<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hugo on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/hugo/</link>
        <description>Recent content in Hugo on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/hugo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Claude4 released, attempting to develop: Hugo tags, hyperlink translation assistant</title>
        <link>https://ttf248.life/en/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;This site is developed using Hugo, but I’ve always used Chinese titles, which results in less friendly generated article links. In simpler terms, when shared, they don&amp;rsquo;t look as good because the Chinese characters are escaped into formats like %E4%BD%A0%E5%A5%BD within the links. While you can solve this by setting a slug, it’s tedious to do manually every time.&lt;/p&gt;
&lt;p&gt;Therefore, I decided to try using Claude4 to develop a translation assistant that automatically converts Chinese titles to English slugs and adds hyperlinks within the articles. This would eliminate the need for manual setup.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claude4 is amazing – its contextual understanding has significantly improved, as has its efficiency in handling complex tasks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;project-address&#34;&gt;Project Address
&lt;/h2&gt;&lt;p&gt;Domestic Project Address: &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
International Project Address: &lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;code-implementation&#34;&gt;Code Implementation
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s first discuss the implementation approach: We need to scan all articles, extract tag information and article titles, and then call the local large model (such as gemma-3-12b-it) for translation.&lt;/p&gt;
&lt;p&gt;In actual development, Claude4 showcased several significant advantages compared to previous generation large models. Due to the diverse functional requirements, Claude4 automatically designed an interactive menu, comprehensively considering various usage scenarios. For example, in tag processing, Claude4 not only supports tag statistics and analysis but also includes classification statistics and can even detect &lt;strong&gt;unlabeled articles&lt;/strong&gt;. Furthermore, it provides &lt;strong&gt;preview&lt;/strong&gt; and tag page generation functionalities.&lt;/p&gt;
&lt;p&gt;Whether it&amp;rsquo;s integrating with local large models, adding translation caches, or performing large-scale code refactoring, Claude4 completes everything in one go, with almost no issues. Despite the project’s small scale, it incorporates many minor features. Previously, large models often forgot earlier content during development, but this time the &lt;code&gt;Claude4&lt;/code&gt; performed exceptionally well, &lt;strong&gt;virtually eliminating context loss&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In short, its intelligence has increased, and we plan to switch to &lt;code&gt;Claude4&lt;/code&gt; for more development work as our primary coding model.&lt;/p&gt;
&lt;h2 id=&#34;translation-cache&#34;&gt;Translation Cache
&lt;/h2&gt;&lt;p&gt;This approach, besides reducing the number of calls to large models, is quite efficient when running a 12b model locally – it doesn’t waste much time. However, if you need to call the large model every time, it will still be somewhat slow. Secondly, to fix the connections within articles, if a full update operation is executed and the article title is very long, there&amp;rsquo;s occasionally a situation where the two translated results differ, causing the link to change – which is quite awkward.&lt;/p&gt;
&lt;h2 id=&#34;feature-optimization&#34;&gt;Feature Optimization
&lt;/h2&gt;&lt;p&gt;The entire project was handed over to &lt;code&gt;Claude4&lt;/code&gt; to analyze the space for optimization and generate the following recommendations:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Externalize Configuration - Improve maintainability and flexibility
Structured Logging - Facilitates troubleshooting and monitoring
Performance Monitoring - Understand system runtime status
User Experience - Visual feedback such as progress bars
Error Handling - A more robust exception handling mechanism
Code Organization - Clearer module partitioning
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code was reviewed, and everything appeared to be in order. For example, the configuration files were modified to convert existing configurations from the original code into default configurations. If a corresponding configuration file was not found when reading the configuration file, a default configuration file would automatically generate to avoid user errors. Here&amp;rsquo;s the English translation of the provided text:&lt;/p&gt;
&lt;p&gt;“Requirements: When translating, dynamically calculate the current translation efficiency, estimate remaining time, and output relevant information to the console. Currently, we’re obtaining the character count of the article, the number of characters translated per line, the time taken, and fitting a calculation for the translation time of every 100 characters. Simultaneously, we&amp;rsquo;re calculating the estimated remaining translation time.&lt;/p&gt;
&lt;p&gt;The code is complete, but the results aren’t satisfactory, so I asked AI to provide a new design solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide multiple efficiency calculation methods: real-time efficiency, average efficiency, and sliding window efficiency&lt;/li&gt;
&lt;li&gt;Improve display methods: progress bars, segmented statistics, and dynamic refresh&lt;/li&gt;
&lt;li&gt;Add more useful metrics: API call counts, success rates, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After completing the code, I discovered a new surprise – translation efficiency statistics were flooding the console in real time, but without endless scrolling.”&lt;/p&gt;
&lt;h2 id=&#34;feature-optimization-1&#34;&gt;Feature Optimization
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Translate text to English (total 7163 characters)...
Detected 53 lines needing translation
  [1/53] Stage1/6 [░░░░░░░░░░░░░░░░░░░░░░░░░] 1.9% translating 354 characters...
    ✅ Completed (3.1s) | API call #1
    ✅ Completed (1.5s) | API call #2
    ✅ Completed (0.9s) | API call #3
    ✅ Completed (0.2s) | API call #4
    ✅ Completed (1.0s) | API call #5
    ✅ Completed (1.0s) | API call #6
    ✅ Completed (0.2s) | API call #7
    📊 Progress: Lines 13.2% (7/53) | Characters 12.9% (925/7163) 114.6 characters per second 📊
    ⚡ Efficiency: Real-time 76.4 | Average 117.9 | Recent 109.0 | Stage 113.6 characters per second 📊
    🎯 Success rate: 100.0% (7/7) | Remaining: 46 lines 7 seconds] 9.4% translating 110 characters...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;feature-optimization-2&#34;&gt;Feature Optimization
&lt;/h2&gt;&lt;p&gt;🎯 Success Rate: 100.0% (7/7) | Remaining: 46 lines 7 7s] 9.4% Translation 110 characters&amp;hellip;
⏱️ Estimated Remaining: 55s | Expected Completion: 00:10:19 8s] 11.3% Translation 114 characters&amp;hellip;
💾 Processing Speed: 3211.3 rows/minute | Total Time: 8s] 13.2% Translation 16 characters&amp;hellip;
[8/53] Stage1/6 [███░░░░░░░░░░░░░░░░░░░░░░] 15.1% Translation 166 characters&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;feature-optimization-3&#34;&gt;Feature Optimization
&lt;/h2&gt;&lt;p&gt;Previously, the code used to control the program wasn&amp;rsquo;t extensive, so I was curious about how it was implemented. Examining the code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// Clear screen and redraw (dynamic refresh effect)
if translationCount &amp;gt; 1 {
    fmt.Print(&amp;quot;\033[6A\033[K&amp;quot;) // Move up 6 lines and clear
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;performance-statistics-menu&#34;&gt;Performance Statistics Menu
&lt;/h3&gt;&lt;p&gt;The newly added &lt;strong&gt;Performance Statistics Menu&lt;/strong&gt;, which I myself designed, isn&amp;rsquo;t as well-designed as this one.&lt;/p&gt;
&lt;p&gt;📊 Performance Statistics:
🔄 Translation Count: 360
⚡ Cache Hit Rate: 1.4% (5/365)
⏱️ Average Translation Time: 315.927234ms
📁 File Operations: 73
❌ Error Count: 0&lt;/p&gt;
&lt;h3 id=&#34;progress-bar-display&#34;&gt;Progress Bar Display
&lt;/h3&gt;&lt;p&gt;The newly added &lt;strong&gt;Progress Bar Display&lt;/strong&gt;, providing detailed progress, elapsed time, and estimated remaining time.
Please select function (0-13): 10
🔍 Collecting translation target&amp;hellip;
📄 Cached file loaded, containing 0 translation records
📊 Translation cache statistics:
🏷️ Total tags: 229
📝 Total articles: 131
✅ Cached: 0
🔄 To be translated: 360&lt;/p&gt;
&lt;h3 id=&#34;progress-bar-display-1&#34;&gt;Progress Bar Display
&lt;/h3&gt;&lt;p&gt;Confirm full translation cache generation? (y/n): y
🚀 Generating full translation cache&amp;hellip;
📄 Loaded cache file, containing 0 translation records
🔍 Checking translations in cache&amp;hellip;
🔄 Need to translate 360 new tags
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - Time taken: 3s - Estimated remaining: 3m8s
💾 Saved cache file, containing 5 translation records
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2. 8%) - Time taken: 6s - Estimated remaining: 3m28s 💾 Cache file saved, containing 10 translation records
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - Time taken: 9s - Estimated remaining: 3m30s 💾 Cache file saved, containing 15 translation records&lt;/p&gt;
&lt;h3 id=&#34;progress-bar-display-2&#34;&gt;Progress Bar Display
&lt;/h3&gt;&lt;p&gt;[██████████████████████████████████] 20/360 (5.6%) - Time Elapsed: 13s - Estimated Remaining: 3m36s💾 Cache file saved, containing 20 translation records
[████████████████████████████████░░] 25/360 (6.9%) - Time Elapsed: 16s - Estimated Remaining: 3m33s💾 Cache file saved, containing 25 translation records
[██████████████████████████████████] 30/360 (8. (3%) - Time taken: 19s - Estimated remaining: 3m30s [████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - Time taken: 22s - Estimated remaining: 3m25s [████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░]&lt;/p&gt;
&lt;h3 id=&#34;progress-bar-display-3&#34;&gt;Progress Bar Display
&lt;/h3&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;=== Hugo Blog Management Tool ===

🚀 Core Features
  1. One-Click Processing of All (Complete Blog Handling Process)

📝 Content Management
  2. Generate Tag Pages
  3. Generate Article Slug
  4. Translate Articles into Multi-Language Versions

💾 Cache Management
  5. View Cache Status
  6. Generate Full Translation Cache
  7. Clear Translation Cache

  0. Exit Program
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Feeling bored and wanting to design a theme based on traditional Chinese ink wash painting.</title>
        <link>https://ttf248.life/en/p/designing-a-chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/designing-a-chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;I’ve grown tired of endlessly tweaking my homepage and suddenly want to embrace a minimalist style, designing a Chinese ink wash theme.&lt;/p&gt;
&lt;p&gt;Currently, the stylesheet is heavily customized – specific styles are configured to override the default theme styles for different elements. Without refactoring, I attempted to generate a new theme directly using AI, but the results were incredibly unstable.  Coincidentally, I also encountered a queue for trae claude large model, switching to vscode agent mode, which further degraded the results; the generated output lacked any design sense. Ultimately, it comes down to my own lack of understanding of frontend development, preventing me from effectively breaking down tasks and delegating them to AI.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Upgrading from a desktop to a 2.5G network card, accelerating local area network connectivity.</title>
        <link>https://ttf248.life/en/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</guid>
        <description>&lt;p&gt;Desktop hardware three-in-one, in the previous text we mentioned PCIe adapter for solid state drives, where did the old SSDs go? Of course they weren’t wasted – if they were damaged, they were disassembled and installed on the newly purchased ‘MechMaker Mini-3765H’ (bought a year ago).&lt;/p&gt;
&lt;p&gt;This new machine has powerful hardware specifications: 2.5G dual network interfaces, PCIe4.0, WiFi6.&lt;/p&gt;
&lt;p&gt;Recently I moved house and my room doesn&amp;rsquo;t have a dedicated router for networking, so the machines are connected via wireless networks. The ASUS motherboard desktop’s wireless card performance wasn’t great, or perhaps it was the router’s wireless access, which resulted in slow upload speeds between local networks, leading to poor network speeds between the machines. I purchased a 2.5G network card and installed it on the desktop.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;At this point, all the slots on the motherboard are full: graphics card, wireless card, 2.5G network card, PCIe adapter for solid state drives.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;network-instructions&#34;&gt;Network Instructions
&lt;/h2&gt;&lt;p&gt;Both machines connect to the internet using their original wireless network cards, but are directly connected via Ethernet cables between the two, with both ends equipped with 2.5G network cards.  The specifics of how to physically connect the cables aren&amp;rsquo;t detailed here – numerous tutorials are available online; just remember to disable your firewall. You can select either machine as the gateway.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[Machine 1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;Subnet Mask: 255.255.255.0&amp;lt;br&amp;gt;Default Gateway: - &amp;lt;br&amp;gt;Obtain DNS Automatically] --&amp;gt;|Ethernet Cable (2.5G)| B[Machine 2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;Subnet Mask: 255.255.255.0&amp;lt;br&amp;gt;Default Gateway: 192.168.4.1&amp;lt;br&amp;gt;Obtain DNS Automatically];
    A --&amp;gt;|Wireless Card| Internet;
    B --&amp;gt;|Wireless Card| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;two-subnet-speed-testing&#34;&gt;Two Subnet Speed Testing
&lt;/h2&gt;&lt;h3 id=&#34;router-lan&#34;&gt;Router LAN
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
Connecting to host 192.168.3.237, port 5201
[  4] local 192.168.3.122 port 1656 connected to 192.168.3.237 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.00   sec  9.17 MBytes  76.7 Mbits/sec
[  4]   1.00-2.00   sec  9.91 MBytes  83.2 Mbits/sec
[  4]   2.00-3.00   sec  8.74 MBytes  73.3 Mbits/sec
[  4]   3.00-4.00   sec  10.2 MBytes  85.2 Mbits/sec
[  4]   4.00-5.00   sec  9.23 MBytes  77.1 Mbits/sec

### Router LAN
[ 4 ] 4.00-5.00 sec 9.23 MB 77.1 Mbits/sec
[ 4 ] 5.00-6.00 sec 8.80 MB 73.9 Mbits/sec
[ 4 ] 6.00-7.01 sec 8.00 MB 66.8 Mbits/sec
[ 4 ] 7.01-8.00 sec 7.69 MB 64.9 Mbits/sec
[ 4 ] 8.00-9.01 sec 9.72 MB 81.1 Mbits/sec
[ 4 ] 9.01-10.01 sec 7.63 MB 63.6 Mbits/sec
--- --- --- --- --- --- --- --- ---
[ ID] Interval           Transfer     Bandwidth
[ 4 ] 0.00-10.01 sec 89.0 MB 74.6 Mbits/sec                  sender

### Router LAN
[ 4 ] 0.00-10.01 sec 89.0 MBytes 74.6 Mbits/sec                sender
[ 4 ] 0.00-10.01 sec 89.0 MBytes 74.6 Mbits/sec                receiver

### Router LAN
iperf Done.

### Direct LAN Connection
```shell
C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
Connecting to host 192.168.4.1, port 5201
[  4] local 192.168.4.2 port 1524 connected to 192.168.4.1 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.01   sec   178 MBytes  1.48 Gbits/sec
[  4]   1.01-2.00   sec   204 MBytes  1.72 Gbits/sec
[  4]   2.00-3.00   sec   214 MBytes  1.80 Gbits/sec
[  4]   3.00-4.00   sec   229 MBytes  1.92 Gbits/sec
[  4]   4.00-5.00   sec   202 MBytes  1.69 Gbits/sec
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;direct-lan&#34;&gt;Direct LAN
&lt;/h3&gt;&lt;p&gt;[ 4 ]   4.00-5.00   sec   202 MBytes  1.69 Gbits/sec
[ 4 ]   5.00-6.00   sec   213 MBytes  1.79 Gbits/sec
[ 4 ]   6.00-7.00   sec   230 MBytes  1.93 Gbits/sec
[ 4 ]   7.00-8.00   sec   192 MBytes  1.61 Gbits/sec
[ 4 ]   8.00-9.00   sec   220 MBytes  1.84 Gbits/sec
[ 4 ]   9.00-10.00  sec   230 MBytes  1.93 Gbits/sec&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[ ID] Interval           Transfer     Bandwidth
[ 4 ]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  sender&lt;/p&gt;
&lt;h3 id=&#34;direct-lan-1&#34;&gt;Direct LAN
&lt;/h3&gt;&lt;p&gt;[ 4 ] 0.00-10.00 sec 2.06 GB 1.77 Gbps                  sender
[ 4 ] 0.00-10.00 sec 2.06 GB 1.77 Gbps                  receiver&lt;/p&gt;
&lt;h3 id=&#34;direct-lan-2&#34;&gt;Direct LAN
&lt;/h3&gt;&lt;p&gt;iperf Done.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wutongsuimeng.github.io/post/%E7%BB%99hugo%E6%B7%BB%E5%8A%A0mermaid%E6%94%AF%E6%8C%81/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adding Mermaid Support to Hugo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Hugo Module Customizing Theme: Explanation of Approach</title>
        <link>https://ttf248.life/en/p/hugo-module-customizing-themes-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/hugo-module-customizing-themes-ideas/</guid>
        <description>&lt;p&gt;Reviewing the historical commit records, the site has undergone many theme switches. Each theme switch involved some custom modifications, and this is where I’m documenting the approach to customizing themes. My &lt;code&gt;Github&lt;/code&gt; repository briefly maintained the even theme, but due to my obsessive-compulsive tendencies, I didn&amp;rsquo;t want to upgrade the &lt;code&gt;hugo&lt;/code&gt; compiler to the latest version, which resulted in incompatibility with the even theme, so I switched back to the &lt;code&gt;stack&lt;/code&gt; theme.&lt;/p&gt;
&lt;h2 id=&#34;hugos-modularity&#34;&gt;Hugo&amp;rsquo;s Modularity
&lt;/h2&gt;&lt;p&gt;When we talk about modularity, many people think of things like Nginx modules and IDEA plugins. Typically, I can upload various modules to satisfy my specific needs. The reason everyone likes this kind of module is that it’s incredibly flexible – you don’t have to put in too much effort to meet your own requirements. Often, even though the overall concepts are similar, there are always subtle differences. This highlights the complexity of software, not just technically, but also from a business perspective. Most often, we face business complexity. This is precisely where the saying “it’s like crossing a river and climbing a mountain” – “隔行如隔山” – is best illustrated. Today, not only the internet industry and finance, but even traditional manufacturing industries are using information systems to help with their production and management. Here’s the English translation of the provided text:&lt;/p&gt;
&lt;p&gt;“Similarly, even within the same industry, different companies will have variations in their leave systems. However, Hugo&amp;rsquo;s modules differ somewhat from what people typically expect – they aren’t organized based on functionality to meet specific differentiation needs. Instead, they are primarily structured around directory hierarchies to identify and recognize identical structures.”&lt;/p&gt;
&lt;p&gt;Resource link: &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo Architecture — Hugo Modules&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugos-modularization&#34;&gt;Hugo&amp;rsquo;s Modularization
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; still works, but it’s not recommended. Maintaining this approach can be complex, as the theme requires separate Git repository management.&lt;/p&gt;
&lt;h2 id=&#34;theme-modification-logichttpsstackjimmycaicomguidemodify-theme&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Theme Modification Logic&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;Once you’ve grasped the foundational concepts of modularization, understanding custom themes becomes much simpler. Hugo themes are currently assembled from multiple different modules. To modify a single module, locate its corresponding template file and make the necessary changes.&lt;/p&gt;
&lt;p&gt;Excerpted from the official &lt;code&gt;stack&lt;/code&gt; documentation:&lt;/p&gt;
&lt;p&gt;Using this method, there will be no files under the &lt;code&gt;themes&lt;/code&gt; directory.  To modify the theme, you will need to copy the file you want to modify to the same directory under the &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2 id=&#34;theme-modification-logichttpsstackjimmycaicomguidemodify-theme-1&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Theme Modification Logic&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;For example, in order to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you will need to copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copy the code from the theme&amp;rsquo;s repository). The same applies to the &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories.&lt;/p&gt;
&lt;h2 id=&#34;how-to-find-template-files&#34;&gt;How to Find Template Files
&lt;/h2&gt;&lt;h3 id=&#34;conventional-approach&#34;&gt;Conventional Approach
&lt;/h3&gt;&lt;p&gt;Review the source files of the topic, understand its design rationale, identify the corresponding template file, and modify it.&lt;/p&gt;
&lt;h3 id=&#34;bruteforce-approach&#34;&gt;Bruteforce Approach
&lt;/h3&gt;&lt;p&gt;As I don’t have a deep understanding of frontend code, I sometimes resort to a brute-force approach, such as opening the corresponding page directly in the browser, finding the areas I want to modify, and using “Inspect Element” to pinpoint the &lt;code&gt;css name&lt;/code&gt;, then searching the source code for the relevant file, copying it into the site directory, and making changes.&lt;/p&gt;
&lt;h2 id=&#34;tips&#34;&gt;Tips
&lt;/h2&gt;&lt;p&gt;The official setup provides a default file for customizing styles. To modify specific areas, we can split them into multiple files and import them using &lt;code&gt;custom.scss&lt;/code&gt;. This approach allows for better management of style files.
&lt;img src=&#34;https://ttf248.life/p/hugo-module-customizing-themes-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summarize-modified-content-6h&#34;&gt;Summarize Modified Content (6h)
&lt;/h2&gt;&lt;p&gt;It’s now the first year of AI coding, and the detailed content will not be pasted here for brevity; instead, we simply list some of the modifications made to this site, such as adjusting the copy button styles, reconfiguring the code block styles, and ChatGPT can be easily handled.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Overall: Global text style, adopting the display style previously used by merging &lt;code&gt;even&lt;/code&gt; with &lt;code&gt;info cn&lt;/code&gt;, which is friendly to Chinese&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homepage: Added mouse interaction animation to the right navigation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homepage: New article summaries are added (a time-consuming task, achieved using a clever workaround)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll Bar: Improved the styling of the scroll bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Blocks: Introduced &lt;code&gt;highlight.&lt;/code&gt;. - JavaScript code highlighting plugin, beautify code block styles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Article details: Some content is a reprint, with new original author information display and original link display&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Archived page: Top category image, remove the theme&amp;rsquo;s color mask, display the original image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Archived page: Added a statistical display panel for classification by year&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Archived page: Two-column layout display ## Summarize Modified Content (6h)
It’s now the first year of AI coding, and the detailed content will not be pasted here for brevity; instead, we simply list some of the modifications made to this site, such as adjusting the copy button styles, reconfiguring the code block styles, and ChatGPT can be easily handled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overall: Global text style, adopting the display style previously used by merging &lt;code&gt;even&lt;/code&gt; with &lt;code&gt;info cn&lt;/code&gt;, which is friendly to Chinese&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homepage: Added mouse interaction animation to the right navigation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Homepage: New article added summary preview (took quite a while, implemented using a clever trick)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scroll Bar: Beautified the scroll bar’s style&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code Blocks: Introduced &lt;code&gt;highlight.&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;consolidated-modifications-6h&#34;&gt;Consolidated Modifications (6h)
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;stack&lt;/code&gt; theme component reuse rate was very high, leading to significant delays in adding summary previews to new homepage articles.  I modified the corresponding component, which also triggered changes to the article’s detail page, resulting in redundant display of the main content. My familiarity with &lt;code&gt;golang templates&lt;/code&gt; wasn&amp;rsquo;t strong, so it took up a considerable amount of time. I struggled to get component parameter passing working and ultimately resolved it through a workaround: introducing a &lt;code&gt;JavaScript&lt;/code&gt; script separately on the homepage and using custom special variables to implement the summary preview.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes high component reuse rates can also be problematic, leading to changes in one place affecting others. Therefore, when modifying themes, you must pay attention not to disrupt existing logic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;comments&#34;&gt;Comments
&lt;/h3&gt;&lt;p&gt;This guy&amp;rsquo;s modifications are more refined: &lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;
&lt;del&gt;This site simply enabled the &lt;code&gt;Waline&lt;/code&gt; comment system, as the &lt;code&gt;stack&lt;/code&gt; theme defaults to supporting &lt;code&gt;Waline&lt;/code&gt;. Just configure it in the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recommend contacting via email on the homepage, this site does not open the comments section.&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Linux System Benchmark Test</title>
        <link>https://ttf248.life/en/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;Windows platform has RuMaster (Entertainment Master), which isn’t known for highly accurate data, but it still provides some reference. Of course, there are other professional benchmarking software as well. When it comes to Linux systems, there haven&amp;rsquo;t seemed to be particularly suitable benchmarking software encountered.&lt;/p&gt;
&lt;p&gt;Sysbench is a versatile benchmark testing tool that can be used to test CPU, memory, file I/O, thread performance, and more. You can use Sysbench to execute various performance testing tasks.&lt;/p&gt;
&lt;p&gt;I just happen to have three machines available for testing: the Mechanical Artist mini laptop, a small local host, an Alibaba Cloud Dev development cloud server, and a Huawei Cloud Dev server.&lt;/p&gt;
&lt;h2 id=&#34;installing-sysbench&#34;&gt;Installing Sysbench
&lt;/h2&gt;&lt;p&gt;On most Linux distributions, you can use the package manager to install Sysbench. For example, on CentOS 8, you can use the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbench-usage-examples&#34;&gt;Sysbench Usage Examples
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Testing CPU performance: &lt;code&gt;sysbench --test=cpu run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Testing memory read performance: &lt;code&gt;sysbench --test=memory run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Testing file I/O performance:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Testing multi-threaded performance: &lt;code&gt;sysbench --test=threads --num-threads=4 run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Testing MySQL database performance (adjust maximum connection number):&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sysbench-usage-examples-1&#34;&gt;Sysbench Usage Examples
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;score-report&#34;&gt;Score Report
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;h2 id=&#34;score-report-1&#34;&gt;Score Report
&lt;/h2&gt;&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34;
&lt;h2 id=&#34;score-report-2&#34;&gt;Score Report
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column A (id=&amp;ldquo;0C0&amp;rdquo; style=&amp;ldquo;width:100px;&amp;rdquo; class=&amp;ldquo;column-headers-background&amp;rdquo;)&lt;/th&gt;
&lt;th&gt;Column B (id=&amp;ldquo;0C1&amp;rdquo; style=&amp;ldquo;width:421px;&amp;rdquo; class=&amp;ldquo;column-headers-background&amp;rdquo;)&lt;/th&gt;
&lt;th&gt;Column C (id=&amp;ldquo;0C2&amp;rdquo; style=&amp;ldquo;width:398px;&amp;rdquo; class=&amp;ldquo;column-headers-background&amp;rdquo;)&lt;/th&gt;
&lt;th&gt;Column D (id=&amp;ldquo;0C3&amp;rdquo; style=&amp;ldquo;width:422px;&amp;rdquo; class=&amp;ldquo;column-headers-background&amp;rdquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Row 1 &lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;1&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;score-report-3&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;row-header-wrapper&amp;rdquo; style=&amp;ldquo;line-height: 20px&amp;rdquo;&amp;gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Local Technician&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云 (Alibaba Cloud)&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;华为云 (Huawei Cloud)&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Configuration&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 23.04&lt;br&gt;  Kernel                        Linux&lt;/p&gt;
&lt;h2 id=&#34;score-report-4&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;Information
Operating System              Ubuntu 23.04
Kernel                        Linux 6.2.0-36-generic x86_64
Model                         Machenike Machenike DT Computer
Motherboard                   Machenike Machenike DT Computer
BIOS                          American Megatrends International, LLC.
DB19V012&lt;/p&gt;
&lt;p&gt;CPU Information
Name                          Intel Core i7-12650H
Topology                      1 Processor, 10 Cores, 16 Threads
Identifier&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;i7-12650H
Topology: 1 Processor, 10 Cores, 16 Threads
Identifier: GenuineIntel Family 6 Model 154 Stepping 3
Base Frequency: 4.60 GHz
L1 Instruction Cache: 32.0 KB x 8
L1 Data Cache: 48.0 KB x 8
L2 Cache: 1.25 MB x 2
L3 Cache: 24.0 MB&lt;/p&gt;
&lt;p&gt;Memory Information:
Size: 62.6 GB&lt;/p&gt;
&lt;h2 id=&#34;score-report-5&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;Size                          62.6 GB&lt;/p&gt;
&lt;p&gt;System Information
Operating System              CentOS Stream 8
Kernel                        Linux 4.18.0-513.el8.x86_64 x86_64
Model                         Alibaba Cloud Alibaba Cloud ECS
Motherboard                   N/A
BIOS                          SeaBIOS 449e491&lt;/p&gt;
&lt;p&gt;CPU Information
Name                          Intel(R) Xeon(R) Platinum
Topology                      1 Processor, 1 Core, 2&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report-1&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;Intel(R) Xeon(R) Platinum
Topology: 1 Processor, 1 Core, 2 Threads
Identifier: GenuineIntel Family 6 Model 85 Stepping 4
Base Frequency: 2.50 GHz
L1 Instruction Cache: 32.0 KB
L1 Data Cache: 32.0 KB
L2 Cache: 1.00 MB
L3 Cache: 33.0 MB&lt;/p&gt;
&lt;p&gt;Memory Information:
Size: 1.65 GB&lt;/p&gt;
&lt;h2 id=&#34;score-report-data&#34;&gt;Score Report Data
&lt;/h2&gt;&lt;p&gt;Information
Size 1.65 GB&lt;/p&gt;
&lt;p&gt;System Information
Operating System Ubuntu 22.04.1 LTS
Kernel Linux 5.15.0-60-generic x86_64
Model OpenStack Foundation OpenStack Nova
Motherboard N/A
BIOS SeaBIOS
rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000&lt;/p&gt;
&lt;p&gt;CPU Information
Name Intel(R) Xeon(R) Gold&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report-2&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;Information:
Name                          Intel(R) Xeon(R) Gold 6278C CPU @ 2.60GHz
Topology                      1 Processor, 1 Core, 2 Threads
Identifier                    GenuineIntel Family 6 Model 85 Stepping 7
Base Frequency                2.60 GHz
L1 Instruction Cache          32.0 KB
L1 Data Cache                 32.0 KB
L2 Cache                      1.00 MB
L3 Cache                      35.8 MB&lt;/p&gt;
&lt;p&gt;Memory Information:
Size&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report-3&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;L3 Cache                      35.8 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          3.64 GB&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R2&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;3&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;CPU&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current&lt;/p&gt;
&lt;h2 id=&#34;score-report-6&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;with following options:
Number of threads: 1
Initializing random number generator from current time&lt;/p&gt;
&lt;p&gt;Prime numbers limit: 10000&lt;/p&gt;
&lt;p&gt;Initializing worker threads&amp;hellip;
Threads started!&lt;/p&gt;
&lt;p&gt;CPU speed:
events per second:  4032.48&lt;/p&gt;
&lt;p&gt;General statistics:
total time:                          10.0004s
total number of events:              40330&lt;/p&gt;
&lt;p&gt;Latency (ms):
min:                                    0.25
avg:&lt;/p&gt;
&lt;h2 id=&#34;score-report-7&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;min:                                    0.25&lt;br&gt;         avg:                                    0.25&lt;br&gt;         max:                                    0.73&lt;br&gt;         95th percentile:                        0.25&lt;br&gt;         sum:                                 9997.55&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           40330.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9975/0.00&lt;/p&gt;
&lt;p&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report-4&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1062.51&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0008s&lt;br&gt;    total number of events:              10628&lt;br&gt;&lt;br&gt;Latency (ms):&lt;/p&gt;
&lt;h2 id=&#34;score-report-8&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;10.0008s &lt;br&gt;
total number of events: 10628 &lt;br&gt;&lt;br&gt;
Latency (ms):&lt;br&gt;
min: 0.91 &lt;br&gt;
avg: 0.94 &lt;br&gt;
max: 22.84 &lt;br&gt;
95th percentile: 1.06 &lt;br&gt;
sum: 9993.46 &lt;br&gt;&lt;br&gt;
Threads fairness:&lt;br&gt;
events (avg/stddev): 10628.0000/0.00 &lt;br&gt;
execution time (avg/stddev):&lt;/p&gt;
&lt;h2 id=&#34;score-report-9&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;events (avg/stddev):           10628.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9935/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1125.56&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:&lt;/p&gt;
&lt;h2 id=&#34;score-report-10&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;speed:
events per second: 1125.56&lt;/p&gt;
&lt;p&gt;General statistics:
total time: 10.0005s
total number of events: 11258&lt;/p&gt;
&lt;p&gt;Latency (ms):
min: 0.86
avg: 0.89
max: 1.70
95th percentile: 0.99
sum: 9995.40&lt;/p&gt;
&lt;p&gt;Threads fairness:&lt;/p&gt;
&lt;h2 id=&#34;score-report-11&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;0.99 &lt;br&gt;         sum:                                 9995.40 &lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           11258.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9954/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R3&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;4&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Memory&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random&lt;/p&gt;
&lt;h2 id=&#34;run-test-report&#34;&gt;Run Test Report
&lt;/h2&gt;&lt;p&gt;dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;Running the test with the following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 101993199 (10198146.52 per second)&lt;br&gt;&lt;br&gt;99602.73 MiB transferred (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:&lt;/p&gt;
&lt;h2 id=&#34;score-report-12&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;MiB transferred (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              101993199&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.03&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4059.50&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;score-report-13&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;0.00
sum:                                 4059.50
Threads fairness:&lt;br&gt;    events (avg/stddev):           101993199.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.0595/0.00&lt;/p&gt;
&lt;p&gt;Running the test with following options:
Number of threads: 1
Initializing random number generator from current time&lt;/p&gt;
&lt;p&gt;Running memory speed test with the following options:
block size: 1KiB
total size: 102400MiB
operation: write
scope:&lt;/p&gt;
&lt;h2 id=&#34;score-report-14&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 48418803 (4841.00 per second)&lt;br&gt;&lt;br&gt;47283.99 MiB transferred (4727.54 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              48418803&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:&lt;/p&gt;
&lt;h2 id=&#34;score-report-15&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;(ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                   25.26&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4578.95&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           48418803.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of&lt;/p&gt;
&lt;h2 id=&#34;score-report-16&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;4.5789/0.00 &lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with the following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 57056904 (5704765.11 per second)&lt;br&gt;&lt;br&gt;55719.63 MiB transferred (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General&lt;/p&gt;
&lt;h2 id=&#34;scoring-data-report&#34;&gt;Scoring Data Report
&lt;/h2&gt;&lt;p&gt;(5704765.11 per second)&lt;/p&gt;
&lt;p&gt;55719.63 MiB transferred (5571.06 MiB/sec)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;General statistics:
total time:                          10.0001s
total number of events:              57056904&lt;/p&gt;
&lt;p&gt;Latency (ms):
min:                                    0.00
avg:                                    0.00
max:                                    0.06
95th percentile:                        0.00
sum:&lt;/p&gt;
&lt;h2 id=&#34;score-report-17&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;95th percentile:                        0.00&lt;br&gt;         sum:                                 4556.06&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           57056904.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5561/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R4&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;5&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Disk&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 1.81 seconds&lt;/p&gt;
&lt;h2 id=&#34;score-report-18&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;Hard Drive&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 1.81 seconds (1129.59 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with the following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report-5&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      3373.41&lt;br&gt;    writes/s:                     2248.94&lt;br&gt;    fsyncs/s:                     7201.80&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report-6&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:               35.14&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0127s&lt;br&gt;    total number of events:              128288&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.08&lt;br&gt;         max:                                    5.14&lt;br&gt;         95th percentile:                        0.34&lt;br&gt;         sum:&lt;/p&gt;
&lt;h2 id=&#34;score-report-19&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;95th percentile: 0.34&lt;br&gt;         sum: 9977.78&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev): 128288.0000/0.00&lt;br&gt;    execution time (avg/stddev): 9.9778/0.00&lt;br&gt;&lt;br&gt;2147483648 bytes written in 19.29 seconds (106.16 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files,&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report-7&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;Random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:&lt;/p&gt;
&lt;h2 id=&#34;score-report-20&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1593.12&lt;br&gt;    writes/s:                     1062.08&lt;br&gt;    fsyncs/s:                     3406.64&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  24.89&lt;br&gt;    written, MiB/s:               16.60&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0164s&lt;br&gt;    total number of events:              60600&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:&lt;/p&gt;
&lt;h2 id=&#34;score-report-21&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;events: 60600&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min: 0.00&lt;br&gt;         avg: 0.16&lt;br&gt;         max: 31.32&lt;br&gt;         95th percentile: 0.54&lt;br&gt;         sum: 9956.30&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev): 60600.0000/0.00&lt;br&gt;    execution time (avg/stddev): 9.9563/0.00
bytes: 2147483648&lt;/p&gt;
&lt;h2 id=&#34;score-report-22&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;execution time (avg/stddev):   9.9563/0.00&lt;/p&gt;
&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 18.29 seconds (111.98 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100
&lt;h2 id=&#34;benchmark-data-report-8&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;Ratio for combined random IO test: 1.50 &lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1665.88&lt;br&gt;    writes/s:                     1110.59&lt;br&gt;    fsyncs/s:                     3563.77&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  26.03&lt;br&gt;    written, MiB/s:&lt;/p&gt;
&lt;h2 id=&#34;benchmark-data-report-9&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;p&gt;3563.77&lt;/p&gt;
&lt;p&gt;Throughput:
read, MiB/s:                  26.03
written, MiB/s:               17.35&lt;/p&gt;
&lt;p&gt;General statistics:
total time:                          10.0112s
total number of events:              63355&lt;/p&gt;
&lt;p&gt;Latency (ms):
min:                                    0.00
avg:                                    0.16
max:                                  205.01
95th percentile:                        0.78&lt;/p&gt;
&lt;h2 id=&#34;score-report-23&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;205.01&lt;br&gt;         95th percentile:                        0.78&lt;br&gt;         sum:                                 9972.64&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           63355.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9726/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R5&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Multi-threaded&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running&lt;/p&gt;
&lt;h2 id=&#34;score-report-24&#34;&gt;Score Report
&lt;/h2&gt;&lt;div style=&#34;width: 6vw&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Multi-Thread&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with the following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0002s&lt;br&gt;    total number of events:              197956&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.16&lt;br&gt;         avg:
&lt;h2 id=&#34;score-report-25&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;(ms):&lt;br&gt;         min:                                    0.16&lt;br&gt;         avg:                                    0.20&lt;br&gt;         max:                                    0.34&lt;br&gt;         95th percentile:                        0.21&lt;br&gt;         sum:                                39970.47&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           49489.0000/5.70&lt;br&gt;    execution time (avg/stddev):   9.9926/0.00&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads:&lt;/p&gt;
&lt;h2 id=&#34;score-report-26&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;Running the test with the following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0174s&lt;br&gt;    total number of events:              18360&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:&lt;/p&gt;
&lt;h2 id=&#34;score-report-27&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:                                   32.77&lt;br&gt;         95th percentile:                        2.61&lt;br&gt;         sum:                                40050.41&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           4590.0000/94.36&lt;br&gt;    execution time (avg/stddev):   10.0126/0.00&lt;/p&gt;
&lt;p&gt;Running the test with following options:
Number of threads: 4
Initializing random number generator from&lt;/p&gt;
&lt;h2 id=&#34;score-report-28&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;Test with the following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads&amp;hellip;&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              28536&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.23&lt;br&gt;         avg:                                    1.40&lt;br&gt;         max:                                    3.56&lt;/p&gt;
&lt;h2 id=&#34;score-report-29&#34;&gt;Score Report
&lt;/h2&gt;&lt;p&gt;1.40 &lt;br&gt; max: 3.56 &lt;br&gt; 95th percentile: 1.47 &lt;br&gt; sum: 39975.16 &lt;br&gt;&lt;br&gt; Threads fairness:&lt;br&gt; events (avg/stddev): 7134.0000/39.87 &lt;br&gt; execution time (avg/stddev): 9.9938/0.01&lt;/p&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue
&lt;/h2&gt;&lt;p&gt;Whether &lt;code&gt;ChatGPT&lt;/code&gt; is a good thing or not, the table above couldn’t be arranged according to previously mastered &lt;code&gt;Markdown&lt;/code&gt;, and failing to create a table would result in a poor display effect. Customizing the theme limited the maximum width of the page, so I adjusted the configuration of the pages accordingly, changing the width to percentage limits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A simple method is to use tools like TablesGenerator to generate HTML tables (content complexity doesn’t suit this).&lt;/li&gt;
&lt;li&gt;Or you can write it in Google Docs and then download and save it as an HTML document, directly copy it into a blog (simple and direct, which was ultimately adopted).
Ensure that the config is enabled with unsafe configuration items, and give the page configuration width separately. In Hugo, you can set the width of a page individually. This can be achieved by adding custom parameters in the page’s Front Matter. Here&amp;rsquo;s an example: - In your Markdown page&amp;rsquo;s Front Matter section (typically at the beginning of the file), add a custom parameter, such as &lt;code&gt;custom_width&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;My Page&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # Set width to 800 pixels
---

Content...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;epilogue-1&#34;&gt;Epilogue
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;In your Hugo theme, find or create the corresponding single page template file (e.g., &lt;code&gt;layouts/_default/single.html&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Within the single page template, check if there is a &lt;code&gt;custom_width&lt;/code&gt; parameter in the page&amp;rsquo;s Front Matter and apply it to the relevant HTML elements, such as &lt;code&gt;div&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we&amp;rsquo;ve used inline styles (&lt;code&gt;style&lt;/code&gt; attribute) to set the &lt;code&gt;max-width&lt;/code&gt; property on the &lt;code&gt;div&lt;/code&gt; element, making it default to 100% when no &lt;code&gt;custom_width&lt;/code&gt; parameter is specified. &lt;code&gt;margin: 0 auto;&lt;/code&gt; is used to center the &lt;code&gt;div&lt;/code&gt; element.&lt;/p&gt;
&lt;h2 id=&#34;postscript&#34;&gt;Postscript
&lt;/h2&gt;&lt;p&gt;Please note that in actual applications, you may need to adjust the examples above based on your theme structure and CSS styling details. Ensure that when adjusting styles, you maintain consistency and readability of the theme.
Due to slight differences in the enabled theme, the site’s custom &lt;code&gt;CSS&lt;/code&gt; configuration was finally adjusted.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Blog IDE Environment and Ramblings</title>
        <link>https://ttf248.life/en/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;This article introduces the basic concepts of Markdown and its applications in various software, recommends using VSCode as an IDE, and lists recommended plugins. The author shares their experience switching from Hexo to Hugo, emphasizing Hugo’s flexibility and customization capabilities. Finally, it provides some suggestions for quickly getting started with new technologies and shares a trick for resolving the issue of Hugo theme styles not updating.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A lightweight markup language that allows people to write documents in an easy-to-read and -write plain text format.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;markdown-1&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;Detailed Markdown syntax will not be elaborated upon in this document. We recommend an ebook, &lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;click here&lt;/a&gt;. Many software applications on the market now support MD as a writing format. The csdn blog system has launched an online editor that supports MD syntax; the default article when first using it is an introduction to MD syntax, which I think is quite good. Evernote added support for MD notes in 2018, with various MD markers available in the shortcut bar, making it almost as easy to use as editing a regular article, and the overall interaction process is friendly to beginners.&lt;/p&gt;
&lt;h3 id=&#34;ide-recommendations&#34;&gt;IDE Recommendations
&lt;/h3&gt;&lt;p&gt;When writing this article, it’s already 2020 – you’ve undoubtedly heard of VS Code, after all, anyone thinking about using Git Page to build a blog system is an industry professional. In the early years, Sublime and Atom were also good choices. With two years of promotion from the open-source community, VS Code has developed rapidly and has gradually become the preferred choice for newcomers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The relationship between Microsoft’s giant and the open-source community has successfully transitioned into a honeymoon phase: embracing open source. Our company has also actively introduced the Java ecosystem in recent two years, meaning that in business development, Java&amp;rsquo;s ecosystem is now truly fragrant domestically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vs-code-plugin-recommendations&#34;&gt;VS Code Plugin Recommendations
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-07-17.png&#34;
	width=&#34;310&#34;
	height=&#34;306&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Plugin List&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;All plugins have their own Readme files, introducing basic usage, core functions, and some authors even provide dynamic effect demonstration images.
&lt;code&gt;Paste Image&lt;/code&gt;, combined with Hugo&amp;rsquo;s image plugin method, is very convenient for importing images.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t remember the shortcuts, open the VS Code shortcut management menu, search for “md”, read it several times; review it again to look at the plugin usage instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo
&lt;/h2&gt;&lt;p&gt;I switched from Hexo to Hugo, as I love tinkering – it’s just my nature! Ultimately, I couldn&amp;rsquo;t resist the urge to quietly write articles.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugo supports placing images and Markdown documents in a single folder.&lt;/li&gt;
&lt;li&gt;The Academic theme supports various article styles in its design.&lt;/li&gt;
&lt;li&gt;Various convenient customization extensions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;academic&#34;&gt;academic
&lt;/h2&gt;&lt;p&gt;The default website is &lt;code&gt;exampleSite&lt;/code&gt;, and menu imports are done using the &lt;code&gt;#component&lt;/code&gt; method, it’s recommended to use &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The URL pattern allows navigation links to jump to a single page instead of scrolling on the homepage – this is purely a matter of personal preference.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Style options: Notebooks, Speeches, eBooks&lt;/li&gt;
&lt;li&gt;Flexibility: Custom overall style, custom CSS styles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This theme&amp;rsquo;s Chinese support isn’t very complete; primarily from a visual perspective, the font sizes don’t align well with Chinese reading habits. The Hexo development team is largely comprised of Chinese developers, which is an advantage over Hugo in this regard. However, it’s rewarding to do things yourself and customize – browser element auditing. When you locate an element, to find out the CSS style name you need to modify, you click &lt;strong&gt;Insert Style Rule Below&lt;/strong&gt;, even with nested CSS layers, it can easily get the node name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Introduce &lt;code&gt;custom.css&lt;/code&gt;](https://sourcethemes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;academic-1&#34;&gt;academic
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Built-in syntax highlighting settings, &lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;official link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The kids are complaining again, you’re talking so vaguely and not providing any details.&lt;/p&gt;
&lt;p&gt;What I want to say is that with these things, you have enough to work with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Official Manuals&lt;/li&gt;
&lt;li&gt;Plugin Documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When quickly getting started with new technologies, it&amp;rsquo;s recommended to first read the official website documentation, &lt;strong&gt;skim reading&lt;/strong&gt; – not aiming for full comprehension in one go, but at least having a general idea. Search engine results may not always be consistent with the latest version and could potentially mislead you. Similarly, flipping through a new book is best done by first looking at the table of contents to understand what the author intends to cover; sometimes it’s beneficial to read the introduction, particularly in translated foreign works where the translator&amp;rsquo;s preface often encompasses the core content of the book.&lt;/p&gt;
&lt;h2 id=&#34;easter-eggs&#34;&gt;Easter Eggs
&lt;/h2&gt;&lt;p&gt;Switching the Hugo Academic built-in style and publishing to the site, the style did not change when accessed. A clever little buddy already thought of it – clearing local browser cache could solve the problem.  It was then that I, with my ingenuity, used Developer Mode (F12) and switched to &lt;code&gt;network&lt;/code&gt;, checking “disable cache” and refreshed – and it worked!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
