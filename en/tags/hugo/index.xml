<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hugo on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/hugo/</link>
        <description>Recent content in Hugo on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 16:58:31 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/hugo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Claude4 release, attempting development: hugo tags, hyperlink translation assistant</title>
        <link>https://ttf248.life/en/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;This site is built with Hugo, but I&amp;rsquo;ve always used Chinese titles, which results in unfriendly URLs for the articles. To put it simply, they don&amp;rsquo;t look very good when shared; Chinese characters are encoded as %E4%BD%A0%E5%A5%BD and so on in the links. While this can be solved by setting slugs, it’s too much trouble to do manually each time.&lt;/p&gt;
&lt;p&gt;So, today I tried using Claude4 to develop a translation assistant that automatically converts Chinese titles into English slugs and adds hyperlinks in articles. This can avoid manual setup.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claude 4 is truly impressive; its ability to understand context has been significantly improved, and its efficiency in handling complex tasks has also increased dramatically&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;project-address&#34;&gt;Project address
&lt;/h2&gt;&lt;p&gt;Domestic project address: [https://cnb.cool/ttf248/hugo-content-suite]
Foreign project address: [https://github.com/ttf248/hugo-content-suite]&lt;/p&gt;
&lt;h2 id=&#34;code-implementation&#34;&gt;Code implementation
&lt;/h2&gt;&lt;p&gt;First, let me outline the implementation approach: we need to scan all articles, extract tag information and article titles, and then call a local large language model (such as gemma-3-12b-it) for translation&lt;/p&gt;
&lt;p&gt;In practical development, &lt;code&gt;Claude4&lt;/code&gt; demonstrates several significant advantages compared to previous generations of large models. Due to the diverse functional requirements, &lt;code&gt;Claude4&lt;/code&gt; automatically designs an interactive menu, comprehensively considering various use cases. For example, in terms of tag processing, &lt;code&gt;Claude4&lt;/code&gt; not only supports tag statistics and analysis but also includes classification statistics and can even detect &lt;strong&gt;untagged articles&lt;/strong&gt;. Furthermore, it provides &lt;strong&gt;preview&lt;/strong&gt; and generate tag page functions.&lt;/p&gt;
&lt;p&gt;Whether it&amp;rsquo;s connecting to local large models, adding new translation caches, or conducting large-scale code refactoring, &lt;code&gt;Claude4&lt;/code&gt; completed everything in one go with virtually no issues. Although the project is not large in scale, it includes many small features. In the past, large language models often forgot previous content during development, but &lt;code&gt;Claude4&lt;/code&gt; performed exceptionally well this time, &lt;strong&gt;with almost no instances of forgetting context.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In short, intelligence has improved, and we are preparing to switch to &lt;code&gt;Claude4&lt;/code&gt; for more development work as the primary model for daily coding&lt;/p&gt;
&lt;h2 id=&#34;translation-cache&#34;&gt;Translation cache
&lt;/h2&gt;&lt;p&gt;Speaking of this, apart from reducing the number of large model calls, running a 12b model locally is quite efficient and doesn&amp;rsquo;t cause delays. However, if you need to call the large model each time, it will still be a bit slow. Secondly, in order to keep the article links consistent, when performing a full update operation, long article titles can occasionally lead to different translation results, causing the article link to change – which is quite awkward.&lt;/p&gt;
&lt;h2 id=&#34;feature-optimization&#34;&gt;Feature optimization
&lt;/h2&gt;&lt;p&gt;The entire project was thrown to &lt;code&gt;Claude4&lt;/code&gt;, and it analyzed potential areas for optimization, resulting in the following suggestions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;配置外置化 - 提高可维护性和灵活性
结构化日志 - 便于问题排查和监控
性能监控 - 了解系统运行状况
用户体验 - 进度条等视觉反馈
错误处理 - 更完善的异常处理机制
代码组织 - 更清晰的模块划分
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I reviewed the code, and everything is fine. For example, with configuration files, I know how to convert the original code&amp;rsquo;s configurations into default ones. When reading the configuration file, if a corresponding file doesn’t exist, it will automatically generate a default one, avoiding user errors.&lt;/p&gt;
&lt;h3 id=&#34;performance-statistics-menu&#34;&gt;Performance Statistics Menu
&lt;/h3&gt;&lt;p&gt;The newly added &lt;strong&gt;performance statistics menu&lt;/strong&gt;, which I designed myself, might not even be this well-designed&lt;/p&gt;
&lt;p&gt;Performance Statistics:
Translation count: 360
Cache hit rate: 1.4% (5/365)
Average translation time: 315.927234ms
File Operations: 73
Incorrect attempts: 0&lt;/p&gt;
&lt;h3 id=&#34;progress-bar-display&#34;&gt;Progress bar display
&lt;/h3&gt;&lt;p&gt;The new &lt;strong&gt;progress bar display&lt;/strong&gt; shows detailed progress, elapsed time, and estimated remaining time&lt;/p&gt;
&lt;p&gt;Please select function (0-13): 10
Collecting translation target..
Cached file loaded, containing 0 translation records&lt;/p&gt;
&lt;p&gt;Translation cache statistics:
Total number of tags: 229
Total number of articles: 131
Cached: 0 items
360&lt;/p&gt;
&lt;p&gt;Confirm generating the full translation cache? (y/n): y
Generating full translation cache..
Cached file loaded, containing 0 translation records
Checking for translations in cache..
Need to translate 360 new tags
5/360 (1.4%) - Time taken: 3s - Estimated remaining: 3m8s💾 Saved cache file, containing 5 translation records
10/360 (2.8%) - Time taken: 6s - Estimated remaining time: 3m28s💾 Saved cache file, containing 10 translation records
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - Time taken: 9s - Estimated remaining: 3m30s💾 Saved cache file, containing 15 translation records
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - Time taken: 13s - Estimated remaining: 3m36s💾 Saved cache file, containing 20 translation records
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - Time taken: 16s - Estimated remaining: 3m33s💾 Saved cache file, containing 25 translation records
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8.3%) - Time elapsed: 19s - Estimated remaining: 3m30s💾 Saved cache file, containing 30 translation records
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - Time elapsed: 22s - Estimated remaining: 3m25s💾 Saved cache file, containing 35 translation records&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;=== 博客标签管理工具 ===

📊 数据查看
  1. 标签统计与分析
  2. 分类统计
  3. 无标签文章

🏷️  标签页面管理
  4. 预览标签页面
  5. 生成标签页面

📝 文章Slug管理
  6. 预览文章Slug
  7. 生成文章Slug

💾 缓存管理
  8. 查看缓存状态
  9. 预览全量翻译缓存
 10. 生成全量翻译缓存
 11. 清空翻译缓存

🔧 系统工具
 12. 查看性能统计
 13. 重置性能统计

  0. 退出程序
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;hugo-tag-automation-management-tool&#34;&gt;Hugo tag automation management tool
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A smart tag management tool designed specifically for Hugo blogs, supporting AI translation, local caching, and a user-friendly interface&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;key-features&#34;&gt;Key Features
&lt;/h2&gt;&lt;h3 id=&#34;ai-intelligent-translation&#34;&gt;AI intelligent translation
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Local AI model translation based on LM Studio&lt;/li&gt;
&lt;li&gt;Chinese tags are automatically converted into SEO-friendly English slugs&lt;/li&gt;
&lt;li&gt;Supports batch translation, improving processing efficiency&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;intelligent-cache-system&#34;&gt;Intelligent Cache System
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Local JSON cache to avoid repeated translations&lt;/li&gt;
&lt;li&gt;Automatically detects cache status, saving API calls&lt;/li&gt;
&lt;li&gt;Support for cache management and clearing functions&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;friendly-user-interface&#34;&gt;Friendly user interface
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Intuitive command-line menu system&lt;/li&gt;
&lt;li&gt;Colored output, clear and easy to read&lt;/li&gt;
&lt;li&gt;Preview function, safe and reliable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-analysis-and-statistics&#34;&gt;Data analysis and statistics
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Tag Usage Frequency Analysis&lt;/li&gt;
&lt;li&gt;Categorized Statistics and Visualization&lt;/li&gt;
&lt;li&gt;Untagged Article Detection&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;get-started-quickly&#34;&gt;Get Started Quickly
&lt;/h2&gt;&lt;h3 id=&#34;environmental-requirements&#34;&gt;Environmental requirements
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Go 1.21+&lt;/li&gt;
&lt;li&gt;LM Studio (Optional, for AI Translation)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;install-and-run&#34;&gt;Install and run
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 克隆项目
git clone https://github.com/ttf248/hugo-content-suite.git
cd hugo-content-suite

# 安装依赖
go mod tidy

# 运行工具
go run main.go [content目录路径]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;basic-usage&#34;&gt;Basic Usage
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Tag Analysis: View blog tag usage statistics&lt;/li&gt;
&lt;li&gt;Generate tag pages: Create dedicated pages for each tag&lt;/li&gt;
&lt;li&gt;Article Slug Management: Generate SEO-friendly URLs for article titles&lt;/li&gt;
&lt;li&gt;Cache Management: View and manage translation cache&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;project-architecture&#34;&gt;Project Architecture
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hugo-content-suite/
├── main.go              # 主程序入口
├── models/              # 数据模型
├── scanner/             # 文章扫描解析
├── stats/               # 统计分析
├── translator/          # AI翻译模块
├── generator/           # 内容生成器
├── display/             # 界面显示
└── docs/               # 详细文档
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;main-features&#34;&gt;Main Features
&lt;/h2&gt;&lt;h3 id=&#34;tag-management&#34;&gt;Tag Management
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Tag Statistics Analysis&lt;/li&gt;
&lt;li&gt;Automatically Generated Tag Page&lt;/li&gt;
&lt;li&gt;Batch Translation Processing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;article-management&#34;&gt;Article Management
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Automatic Slug Generation&lt;/li&gt;
&lt;li&gt;Article Content Analysis&lt;/li&gt;
&lt;li&gt;Batch processing support&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;smart-features&#34;&gt;Smart features
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AI-powered translation&lt;/li&gt;
&lt;li&gt;Intelligent caching mechanism&lt;/li&gt;
&lt;li&gt;Precise content identification&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;document-link&#34;&gt;Document link
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Installation Guide&lt;/li&gt;
&lt;li&gt;Function Usage Instructions&lt;/li&gt;
&lt;li&gt;[API Interface Documentation]&lt;/li&gt;
&lt;li&gt;Troubleshooting&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;contribution-guidelines&#34;&gt;Contribution Guidelines
&lt;/h2&gt;&lt;p&gt;Welcome to submit Issues and Pull Requests! Please refer to &lt;a class=&#34;link&#34; href=&#34;docs/contributing.md&#34; &gt;Contributing Guide&lt;/a&gt; for details&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License
&lt;/h2&gt;&lt;p&gt;MIT License - see &lt;a class=&#34;link&#34; href=&#34;LICENSE&#34; &gt;LICENSE&lt;/a&gt; file&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If this project is helpful to you, please give it a star to support it!&lt;/p&gt;</description>
        </item>
        <item>
        <title>Bored and wanting to design a traditional Chinese ink-wash painting style theme</title>
        <link>https://ttf248.life/en/p/chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;I&amp;rsquo;m tired of those colorful and flashy homepages, suddenly I want to go for a minimalist style and design a theme in Chinese ink-wash painting style&lt;/p&gt;
&lt;p&gt;Because the stylesheet is heavily modified, specific styles are configured for different elements to override the theme&amp;rsquo;s default styles&lt;/p&gt;
&lt;p&gt;Without refactoring, trying to directly generate a new theme using AI results in something that is very unstable&lt;/p&gt;
&lt;p&gt;It just so happened I ran into the queue for the trae claude large model, switched to VS Code agent mode, and the results were really bad – whatever was modified lacked any sense of design&lt;/p&gt;
&lt;p&gt;Ultimately, it&amp;rsquo;s because I don&amp;rsquo;t understand frontend well enough to effectively break down tasks for AI&lt;/p&gt;</description>
        </item>
        <item>
        <title>Desktop upgrade to 2.5G network card, accelerating local area network interconnection</title>
        <link>https://ttf248.life/en/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</guid>
        <description>&lt;p&gt;We previously mentioned the PCIe adapter for solid-state drives, so where did the old SSDs go? They weren&amp;rsquo;t wasted; they were removed and installed in the &lt;code&gt;Mechanical Master Creator Mini-3765H&lt;/code&gt; (purchased a year ago)&lt;/p&gt;
&lt;p&gt;The new machine still has impressive hardware specs: 2.5G dual network ports, PCIE4.0, and WiFi6&lt;/p&gt;
&lt;p&gt;Recently moved, and the room doesn&amp;rsquo;t have a separate router for networking. The machines are all connected via wireless network. The ASUS motherboard desktop’s wireless card performance isn’t good enough, or it could be due to the router&amp;rsquo;s wireless access; the upload speed between local area networks is poor, which results in slow speeds between the machines. I purchased a 2.5G network card and installed it on the desktop.&lt;/p&gt;
&lt;p&gt;At this point, all of the motherboard&amp;rsquo;s slots are used up: graphics card, wireless network card, 2.5G network card, and a solid-state drive PCIe adapter&lt;/p&gt;
&lt;h2 id=&#34;network-instructions&#34;&gt;Network instructions
&lt;/h2&gt;&lt;p&gt;The two machines still use the original wireless network card for internet access, but they are directly connected with a network cable, and both ends have 2.5G network cards. How to connect the two machines with a network cable doesn&amp;rsquo;t need much explanation; there are many tutorials online. Remember to disable the firewall. You can choose either machine as the gateway.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[机器1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: - &amp;lt;br&amp;gt;自动获取DNS] --&amp;gt;|网线直连（2.5G）| B[机器2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: 192.168.4.1&amp;lt;br&amp;gt;自动获取DNS];
    A --&amp;gt;|无线网卡| Internet;
    B --&amp;gt;|无线网卡| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;speed-test-of-two-network-segments&#34;&gt;Speed test of two network segments
&lt;/h2&gt;&lt;h3 id=&#34;router-local-area-network&#34;&gt;Router local area network
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
Connecting to host 192.168.3.237, port 5201
[  4] local 192.168.3.122 port 1656 connected to 192.168.3.237 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.00   sec  9.17 MBytes  76.7 Mbits/sec
[  4]   1.00-2.00   sec  9.91 MBytes  83.2 Mbits/sec
[  4]   2.00-3.00   sec  8.74 MBytes  73.3 Mbits/sec
[  4]   3.00-4.00   sec  10.2 MBytes  85.2 Mbits/sec
[  4]   4.00-5.00   sec  9.23 MBytes  77.1 Mbits/sec
[  4]   5.00-6.00   sec  8.80 MBytes  73.9 Mbits/sec
[  4]   6.00-7.01   sec  8.00 MBytes  66.8 Mbits/sec
[  4]   7.01-8.00   sec  7.69 MBytes  64.9 Mbits/sec
[  4]   8.00-9.01   sec  9.72 MBytes  81.1 Mbits/sec
[  4]   9.01-10.01  sec  7.63 MBytes  63.6 Mbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  sender
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;direct-lan-connection&#34;&gt;Direct LAN connection
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
Connecting to host 192.168.4.1, port 5201
[  4] local 192.168.4.2 port 1524 connected to 192.168.4.1 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.01   sec   178 MBytes  1.48 Gbits/sec
[  4]   1.01-2.00   sec   204 MBytes  1.72 Gbits/sec
[  4]   2.00-3.00   sec   214 MBytes  1.80 Gbits/sec
[  4]   3.00-4.00   sec   229 MBytes  1.92 Gbits/sec
[  4]   4.00-5.00   sec   202 MBytes  1.69 Gbits/sec
[  4]   5.00-6.00   sec   213 MBytes  1.79 Gbits/sec
[  4]   6.00-7.00   sec   230 MBytes  1.93 Gbits/sec
[  4]   7.00-8.00   sec   192 MBytes  1.61 Gbits/sec
[  4]   8.00-9.00   sec   220 MBytes  1.84 Gbits/sec
[  4]   9.00-10.00  sec   230 MBytes  1.93 Gbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  sender
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reference-materials&#34;&gt;Reference materials
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Adding Mermaid Support to Hugo&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Customizing Hugo Themes with Modules: An Explanation of Ideas</title>
        <link>https://ttf248.life/en/p/hugo-module-custom-theme-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/hugo-module-custom-theme-ideas/</guid>
        <description>&lt;p&gt;Looking back at the historical commit records, the site has switched themes many times. Each time a theme is switched, there are some custom modifications. Here&amp;rsquo;s a record of the思路 for customizing themes. The author’s &lt;code&gt;Github&lt;/code&gt; also has a repository where they briefly maintained the even theme. Later, due to obsessive-compulsive tendencies and a desire to upgrade the &lt;code&gt;hugo&lt;/code&gt; compiler to the latest version, it became incompatible with the even theme, so they switched back to the &lt;code&gt;stack&lt;/code&gt; theme.&lt;/p&gt;
&lt;h2 id=&#34;hugos-modularity&#34;&gt;Hugo&amp;rsquo;s modularity
&lt;/h2&gt;&lt;p&gt;When it comes to modularity, people might think of Nginx modules or IDEA plugins, etc. Typically, I can satisfy my differentiated needs by uploading some modules. The reason everyone likes this kind of module is mainly because it&amp;rsquo;s flexible enough and can meet their own needs without too much effort. Because often, although they are generally similar, there are always some differences in the details. This also illustrates the complexity of software, which includes not only technical complexity but also business complexity. In most cases, we face business complexity. This is the best explanation for the saying &amp;ldquo;different industries are like different mountains&amp;rdquo; in the software field. Nowadays, not only the internet industry and financial industry, but even traditional manufacturing has adopted information systems to help with corporate production and management. Even for a leave application system, there will be differences between companies, even within the same industry.&lt;/p&gt;
&lt;p&gt;Hugo&amp;rsquo;s modules are a bit different from what people typically think of as modules; they aren’t organized around functionality to meet diverse needs. Instead, they primarily rely on directory structure to identify common structures.&lt;/p&gt;
&lt;p&gt;Link to materials: &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo Architecture — Hugo&amp;rsquo;s Modules&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;git submodule&lt;/code&gt; method still works, but this article does not recommend using it. If there are updates to the introduced theme, maintenance will be more complicated, requiring a separate git repository to manage the theme.&lt;/p&gt;
&lt;h2 id=&#34;modifying-theme-logic&#34;&gt;Modifying Theme Logic
&lt;/h2&gt;&lt;p&gt;With a foundational understanding of modularity, understanding custom themes becomes much easier. The current themes in &lt;code&gt;hugo&lt;/code&gt; are also assembled from multiple different modules; to modify one, simply locate the corresponding template file and make changes.&lt;/p&gt;
&lt;p&gt;Quoted from the &lt;code&gt;stack&lt;/code&gt; official documentation:&lt;/p&gt;
&lt;p&gt;Using this method, there won&amp;rsquo;t be any file under &lt;code&gt;themes&lt;/code&gt; directory. In order to modify the theme, you will have to copy the file you want to modify to the same directory under &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, in order to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you will have to copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copy the code from theme&amp;rsquo;s repository). The same applies to &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories。&lt;/p&gt;
&lt;h2 id=&#34;how-to-find-the-template-file&#34;&gt;How to find the template file
&lt;/h2&gt;&lt;h3 id=&#34;orthodox-thinking&#34;&gt;Orthodox thinking
&lt;/h3&gt;&lt;p&gt;Browse the theme&amp;rsquo;s source files, understand the design concept, find the corresponding template file, and make modifications&lt;/p&gt;
&lt;h3 id=&#34;brute-force-approach&#34;&gt;Brute force approach
&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;m not very familiar with front-end code, so sometimes I use a crude approach. For example, I open the corresponding page directly in the browser, find the place I want to modify, locate the &lt;code&gt;css name&lt;/code&gt; using &amp;ldquo;Inspect Element,&amp;rdquo; search for it in the theme source code, find the corresponding file, copy it to the site directory, and then make the changes.&lt;/p&gt;
&lt;h2 id=&#34;little-tips&#34;&gt;Little tips
&lt;/h2&gt;&lt;p&gt;The official default provides a file for customizing styles, and we can split the places that need to be modified into multiple files, introducing our other files through the &lt;code&gt;custom.scss&lt;/code&gt; file, which allows for better management of style files&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hugo-module-custom-theme-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary-of-revisions-6h&#34;&gt;Summary of revisions (6h)
&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s already the first year of AI coding. I won’t go into detailed content here, but just briefly list some modifications to this site, such as adjusting the style of the copy button and reconfiguring the code block styles – ChatGPT can easily handle these tasks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overall: Global text style, inheriting the display style of the previous &lt;code&gt;even&lt;/code&gt; merged with &lt;code&gt;info cn&lt;/code&gt;, friendly to Chinese&lt;/li&gt;
&lt;li&gt;Homepage: Add mouse interaction animation to the right navigation&lt;/li&gt;
&lt;li&gt;Homepage: Articles now have abstract previews (implemented with a somewhat expedient method due to the time it took)&lt;/li&gt;
&lt;li&gt;Scroll bar: I&amp;rsquo;ve styled the scroll bar&lt;/li&gt;
&lt;li&gt;The code block introduces the &lt;code&gt;highlight.js&lt;/code&gt; code highlighting plugin and beautifies the style of the code blocks&lt;/li&gt;
&lt;li&gt;Article details: Some content is reproduced, with added display of original author information and original link&lt;/li&gt;
&lt;li&gt;Archive page: Remove the theme&amp;rsquo;s color overlay and display the original image for the category picture at the top&lt;/li&gt;
&lt;li&gt;The archive page now features a statistics display panel categorized by year&lt;/li&gt;
&lt;li&gt;Archive page: Two-column layout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The component reusability of the &lt;code&gt;stack&lt;/code&gt; theme is high, which also led to significant time consumption when adding summary previews for homepage articles. After modifying the corresponding components, changes occurred on the article details page, resulting in duplicate content being displayed. I&amp;rsquo;m not very familiar with &lt;code&gt;golang template&lt;/code&gt; syntax, so it took a considerable amount of time. I couldn’t resolve parameter passing between components, and ultimately, I used a workaround: introducing a separate &lt;code&gt;JavaScript&lt;/code&gt; script for the homepage and implementing summary previews through custom special variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes, excessive code reuse can also be a problem, leading to changes in one area affecting others. Therefore, when modifying the theme, it is important to pay attention and avoid disrupting the original logic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;comments-section&#34;&gt;Comments section
&lt;/h3&gt;&lt;p&gt;This guy&amp;rsquo;s modifications are more complete: [https://blog.reincarnatey.net/2024/0719-better-waline/]&lt;/p&gt;
&lt;p&gt;This site simply enables the &lt;code&gt;Waline&lt;/code&gt; comment system. The &lt;code&gt;stack&lt;/code&gt; theme natively supports &lt;code&gt;Waline&lt;/code&gt;, just configure it in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recommended homepage, email contact. This site does not open its comment section.&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Linux system benchmark testing</title>
        <link>https://ttf248.life/en/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;The Windows platform has a program called &amp;ldquo;Rulu Master&amp;rdquo; (Entertainment Master), which isn&amp;rsquo;t necessarily accurate with its data, but it does provide some reference. Of course, there are other professional benchmarking software available. On the Linux system, I haven’t found any particularly suitable benchmarking software yet.&lt;/p&gt;
&lt;p&gt;Sysbench is a versatile benchmarking tool that can be used to test CPU, memory, file I/O, thread performance, and more. You can use Sysbench to perform various performance testing tasks.&lt;/p&gt;
&lt;p&gt;I just happen to have three machines available for testing: Mecha-Debug Mini local host, Alibaba Cloud Dev development cloud server, and Huawei Cloud development server&lt;/p&gt;
&lt;h2 id=&#34;installing-sysbench&#34;&gt;Installing Sysbench
&lt;/h2&gt;&lt;p&gt;In most Linux distributions, you can use a package management tool to install Sysbench. For example, on CentOS 8, you can use the following command for installation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;examples-of-using-sysbench&#34;&gt;Examples of Using Sysbench
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Test CPU performance: &lt;code&gt;sysbench --test=cpu run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test memory read performance: &lt;code&gt;sysbench --test=memory run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Testing File I/O Performance:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Testing multi-threading performance: &lt;code&gt;sysbench --test=threads --num-threads=4 run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Testing MySQL database performance (requires adjusting the maximum number of connections):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;benchmark-data-report&#34;&gt;Benchmark Data Report
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34; style=&#34;width:421px;&#34; class=&#34;column-headers-background&#34;&gt;B&lt;/th&gt;&lt;th id=&#34;0C2&#34; style=&#34;width:398px;&#34; class=&#34;column-headers-background&#34;&gt;C&lt;/th&gt;&lt;th id=&#34;0C3&#34; style=&#34;width:422px;&#34; class=&#34;column-headers-background&#34;&gt;D&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R0&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;本地机械师&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;华为云&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;系统配置&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 23.04&lt;br&gt;  Kernel                        Linux 6.2.0-36-generic x86_64&lt;br&gt;  Model                         Machenike Machenike DT Computer&lt;br&gt;  Motherboard                   Machenike Machenike DT Computer&lt;br&gt;  BIOS                          American Megatrends International, LLC.&lt;br&gt;DB19V012&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel Core i7-12650H&lt;br&gt;  Topology                      1 Processor, 10 Cores, 16 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 154 Stepping 3&lt;br&gt;  Base Frequency                4.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB x 8&lt;br&gt;  L1 Data Cache                 48.0 KB x 8&lt;br&gt;  L2 Cache                      1.25 MB x 2&lt;br&gt;  L3 Cache                      24.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          62.6 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              CentOS Stream 8&lt;br&gt;  Kernel                        Linux 4.18.0-513.el8.x86_64 x86_64&lt;br&gt;  Model                         Alibaba Cloud Alibaba Cloud ECS&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS 449e491&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Platinum&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 4&lt;br&gt;  Base Frequency                2.50 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      33.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          1.65 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 22.04.1 LTS&lt;br&gt;  Kernel                        Linux 5.15.0-60-generic x86_64&lt;br&gt;  Model                         OpenStack Foundation OpenStack Nova&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS&lt;br&gt;rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Gold 6278C CPU @ 2.60GHz&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 7&lt;br&gt;  Base Frequency                2.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      35.8 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          3.64 GB&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R2&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;3&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;CPU&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  4032.48&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              40330&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.25&lt;br&gt;         avg:                                    0.25&lt;br&gt;         max:                                    0.73&lt;br&gt;         95th percentile:                        0.25&lt;br&gt;         sum:                                 9997.55&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           40330.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9975/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1062.51&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0008s&lt;br&gt;    total number of events:              10628&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.91&lt;br&gt;         avg:                                    0.94&lt;br&gt;         max:                                   22.84&lt;br&gt;         95th percentile:                        1.06&lt;br&gt;         sum:                                 9993.46&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           10628.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9935/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1125.56&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0005s&lt;br&gt;    total number of events:              11258&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.86&lt;br&gt;         avg:                                    0.89&lt;br&gt;         max:                                    1.70&lt;br&gt;         95th percentile:                        0.99&lt;br&gt;         sum:                                 9995.40&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           11258.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9954/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R3&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;4&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;内存&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 101993199 (10198146.52 per second)&lt;br&gt;&lt;br&gt;99602.73 MiB transferred (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              101993199&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.03&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4059.50&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           101993199.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.0595/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 48418803 (4841004.79 per second)&lt;br&gt;&lt;br&gt;47283.99 MiB transferred (4727.54 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              48418803&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                   25.26&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4578.95&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           48418803.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 57056904 (5704765.11 per second)&lt;br&gt;&lt;br&gt;55719.63 MiB transferred (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              57056904&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.06&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4556.06&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           57056904.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5561/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R4&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;5&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;硬盘&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 1.81 seconds (1129.59 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      3373.41&lt;br&gt;    writes/s:                     2248.94&lt;br&gt;    fsyncs/s:                     7201.80&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:               35.14&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0127s&lt;br&gt;    total number of events:              128288&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.08&lt;br&gt;         max:                                    5.14&lt;br&gt;         95th percentile:                        0.34&lt;br&gt;         sum:                                 9977.78&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           128288.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9778/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 19.29 seconds (106.16 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1593.12&lt;br&gt;    writes/s:                     1062.08&lt;br&gt;    fsyncs/s:                     3406.64&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  24.89&lt;br&gt;    written, MiB/s:               16.60&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0164s&lt;br&gt;    total number of events:              60600&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                   31.32&lt;br&gt;         95th percentile:                        0.54&lt;br&gt;         sum:                                 9956.30&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           60600.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9563/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 18.29 seconds (111.98 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1665.88&lt;br&gt;    writes/s:                     1110.59&lt;br&gt;    fsyncs/s:                     3563.77&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  26.03&lt;br&gt;    written, MiB/s:               17.35&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0112s&lt;br&gt;    total number of events:              63355&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                  205.01&lt;br&gt;         95th percentile:                        0.78&lt;br&gt;         sum:                                 9972.64&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           63355.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9726/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R5&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;多线程&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0002s&lt;br&gt;    total number of events:              197956&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.16&lt;br&gt;         avg:                                    0.20&lt;br&gt;         max:                                    0.34&lt;br&gt;         95th percentile:                        0.21&lt;br&gt;         sum:                                39970.47&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           49489.0000/5.70&lt;br&gt;    execution time (avg/stddev):   9.9926/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0174s&lt;br&gt;    total number of events:              18360&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:                                   32.77&lt;br&gt;         95th percentile:                        2.61&lt;br&gt;         sum:                                40050.41&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           4590.0000/94.36&lt;br&gt;    execution time (avg/stddev):   10.0126/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              28536&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.23&lt;br&gt;         avg:                                    1.40&lt;br&gt;         max:                                    3.56&lt;br&gt;         95th percentile:                        1.47&lt;br&gt;         sum:                                39975.16&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           7134.0000/39.87&lt;br&gt;    execution time (avg/stddev):   9.9938/0.01&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 id=&#34;afterword&#34;&gt;Afterword
&lt;/h2&gt;&lt;p&gt;ChatGPT is still a good thing. The table there cannot be arranged according to the previously mastered Markdown; if it&amp;rsquo;s not made into a table, the display effect will be very poor. Custom themes limited the maximum page width, and I adjusted the page configuration in sync, changing the width to a percentage limit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A simple method is to use online tools like TablesGenerator to generate HTML tables (not suitable for complex content)&lt;/li&gt;
&lt;li&gt;Or use Google Docs online, then download and save as an HTML document, and directly copy it into the blog (simple and direct, this is the method we adopted)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure the config is enabled with the unsafe setting, and configure the width separately for each page&lt;/p&gt;
&lt;p&gt;In Hugo, you can set the width for pages individually. This can be achieved by adding a custom parameter in the page&amp;rsquo;s Front Matter. Here is an example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a custom parameter, such as &lt;code&gt;custom_width&lt;/code&gt;, in the Front Matter section of your Markdown page (usually at the beginning of the file)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;我的页面&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 设置宽度为 800 像素
---

正文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;In your Hugo theme, find or create the corresponding single-page template file (for example, &lt;code&gt;layouts/_default/single.html&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In single-page templates, check for a &lt;code&gt;custom_width&lt;/code&gt; parameter in the page&amp;rsquo;s Front Matter and apply it to the corresponding HTML element, such as a &lt;code&gt;div&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we used inline styles (the &lt;code&gt;style&lt;/code&gt; attribute) to set the &lt;code&gt;max-width&lt;/code&gt; property for the &lt;code&gt;div&lt;/code&gt; element, so that when the &lt;code&gt;custom_width&lt;/code&gt; parameter is not specified, its width defaults to 100%. &lt;code&gt;margin: 0 auto;&lt;/code&gt; is used to center the &lt;code&gt;div&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;Please note that in practical applications, you may need to adjust the above examples according to your theme structure and CSS style details. Ensure consistency and readability of your theme when adjusting styles.&lt;/p&gt;
&lt;p&gt;Due to slight differences in the enabled theme, the site&amp;rsquo;s custom &lt;code&gt;CSS&lt;/code&gt; configuration was adjusted&lt;/p&gt;</description>
        </item>
        <item>
        <title>Blog IDE environment and random thoughts</title>
        <link>https://ttf248.life/en/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;This article introduces the basic concepts of Markdown and its applications in various software. It recommends using VSCode as an IDE and lists recommended plugins. The author shares their experience switching from Hexo to Hugo, emphasizing Hugo&amp;rsquo;s flexibility and customization capabilities. Finally, it provides some tips for quickly getting started with new technologies and shares a trick for resolving the issue of Hugo theme styles not updating.&lt;/p&gt;
&lt;h2 id=&#34;preface&#34;&gt;Preface
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;A lightweight markup language that allows people to write documents in a readable and writable plain text format&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Detailed Markdown syntax will not be elaborated on in this article; a recommended ebook is available, &lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;click here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many software on the market already support md as a writing format. The CSDN blog system launched an online editor that supports md syntax, and it comes with an introductory article about md syntax when you use it for the first time, which I think is pretty good; Evernote added support for md notes in 2018, with various md tag options in the quick bar, making it feel similar to editing regular articles, and the overall interactive process is friendly to beginners.&lt;/p&gt;
&lt;h3 id=&#34;ide-recommendations&#34;&gt;IDE recommendations
&lt;/h3&gt;&lt;p&gt;When writing this article, it&amp;rsquo;s already 2020. You must have heard of VS Code, after all, anyone who considers using Git Page to build a blog system is an industry professional. In earlier years, Sublime and Atom were also good choices. With two years of community support, VS Code has developed rapidly and gradually become the preferred entry point for beginners.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The relationship between Microsoft and the open-source community has transitioned from a state of separation to a honeymoon period: embracing open source. The company I work for has also actively introduced the Java ecosystem in recent years; in other words, the Java ecosystem is genuinely appealing for business development within China now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vs-code-extension-recommendations&#34;&gt;VS Code extension recommendations
&lt;/h3&gt;&lt;p&gt;Plugin List&lt;/p&gt;
&lt;p&gt;Plugins all have their own Readme files, introducing basic usage and core features; some plugin authors also provide dynamic effect demonstration images&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s very convenient to introduce images using the image plugin method of Hugo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I haven&amp;rsquo;t memorized the shortcuts, so I opened the VS Code shortcut management menu and searched for &amp;ldquo;md,&amp;rdquo; looking at it several times; I reviewed the plugin usage instructions again&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;hugo
&lt;/h2&gt;&lt;p&gt;As a writer, I&amp;rsquo;ve switched from &lt;code&gt;Hexo&lt;/code&gt; to &lt;code&gt;Hugo&lt;/code&gt;. My nature is to tinker and I simply couldn’t stand writing articles quietly without constantly experimenting.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugo supports placing images and md documents in separate folders&lt;/li&gt;
&lt;li&gt;Academic themes support various types of article styles in design&lt;/li&gt;
&lt;li&gt;Various convenient custom extensions&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;academic&#34;&gt;academic
&lt;/h2&gt;&lt;p&gt;The website defaults to &lt;code&gt;exampleSite&lt;/code&gt;, menu integration uses the &lt;code&gt;#component&lt;/code&gt; method, and using &lt;code&gt;url&lt;/code&gt; is recommended&lt;/p&gt;
&lt;p&gt;The URL pattern allows for single-page jumps when clicking on navigation, rather than scrolling on the homepage—this is purely a matter of personal preference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Styles: Essays, Speeches, E-books&lt;/li&gt;
&lt;li&gt;Flexibility: Customize overall style, customize CSS styles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This theme&amp;rsquo;s support for Chinese is not yet very complete, mainly from a visual perspective – the font size isn&amp;rsquo;t quite in line with Chinese reading habits. However, Hexo’s developers are mostly Chinese, which gives it an advantage over Hugo in this regard.&lt;/p&gt;
&lt;p&gt;However, it&amp;rsquo;s about doing things yourself and providing for your own needs. Inspect the browser elements. Once you’ve located the element, to know the CSS style name that needs modification, click &lt;strong&gt;Insert Style Rule Below&lt;/strong&gt; in the sidebar. Even with deeply nested CSS, you can easily get the node name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introducing &lt;strong&gt;custom.css&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Introducing &lt;strong&gt;custom_js&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The theme&amp;rsquo;s built-in syntax highlighting settings, &lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;official link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The little one is about to complain again – why are you being so vague from beginning to end, not mentioning any details?&lt;/p&gt;
&lt;p&gt;What I want to say is, these things will be enough for you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Official manual&lt;/li&gt;
&lt;li&gt;Plugin Description&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To quickly get started with new technologies, it&amp;rsquo;s recommended to first read the official documentation. Don’t worry about understanding everything on the first pass; at least get a general idea. Search engine results may not always be consistent with the latest version and could potentially mislead you. The same applies to reading new books – look at the table of contents first to understand what the author intends to cover. Sometimes, reading the preface is helpful; in some foreign works translated into Chinese, the translator&amp;rsquo;s preface often summarizes the book’s content and core ideas.&lt;/p&gt;
&lt;h2 id=&#34;easter-egg&#34;&gt;Easter egg
&lt;/h2&gt;&lt;p&gt;Switching to the built-in Hugo Academic style didn&amp;rsquo;t change the appearance when published to the site. Clever users probably already figured it out: clear your local browser cache, and the problem is solved. The ingenious me: F12 developer mode, switch to &lt;code&gt;network&lt;/code&gt;, check &lt;code&gt;disable cache&lt;/code&gt;, refresh, done!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
