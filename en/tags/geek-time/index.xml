<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Geek Time on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/geek-time/</link>
        <description>Recent content in Geek Time on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 02:57:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/geek-time/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>A Brief Discussion on Automated Testing</title>
        <link>https://ttf248.life/en/p/shallow-discussion-on-automation-testing/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/shallow-discussion-on-automation-testing/</guid>
        <description>&lt;p&gt;Investment in testing for financial trading systems far exceeds that of other systems, with tedious testing steps repeated endlessly and a very low ROI. As projects and personnel change, uncontrollable factors are inevitably introduced. A common scenario is modifying a field output by interface A, which unexpectedly affects the result of interface B. With each version release, risks accumulate.&lt;/p&gt;
&lt;h2 id=&#34;theoretical-knowledge&#34;&gt;Theoretical knowledge
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;How do you measure the value of automation?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ROI of an automated test case = (Manual execution time) * (Number of executions) / (Development cost + Maintenance cost)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which features need automated testing?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Features that users commonly use and which don&amp;rsquo;t change frequently. Writing automated test code for this type of interface yields the highest return.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why choose this time to promote automated testing?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s definitely not suitable now, as we approach the project launch. Relying on distant water to quench immediate thirst doesn’t work; automation is a long-term benefit model. The project is already live in the &lt;strong&gt;production environment&lt;/strong&gt; and entering a stable release cycle – this is the most appropriate time.&lt;/p&gt;
&lt;h2 id=&#34;framework-selection&#34;&gt;Framework Selection
&lt;/h2&gt;&lt;p&gt;Without relevant practical experience, being assigned a task like automation testing is typically approached as follows: open a search engine, look for tools and frameworks compatible with the current system&amp;rsquo;s &lt;strong&gt;technology stack&lt;/strong&gt;, go through the user manuals, and get started. If you can quickly find a suitable tool, congratulations, a &lt;strong&gt;perfect start&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I apologize first. I checked the relevant materials, and it&amp;rsquo;s not that there isn&amp;rsquo;t any [solution], but rather the framework itself is too complex, and deploying it consumes excessive resources. What beginners need is something compact and streamlined. I consulted with colleagues in the testing team, who suggested building a framework using &lt;code&gt;Python&lt;/code&gt; – essentially encapsulating existing unit testing frameworks into an automated testing framework.&lt;/p&gt;
&lt;p&gt;Refer to the design of this project: &lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;why-do-we-need-frameworks&#34;&gt;Why do we need frameworks?
&lt;/h2&gt;&lt;p&gt;The service has multiple deployment environments, including a development environment, a testing environment, and a pre-production testing environment. The framework&amp;rsquo;s role is to provide an abstraction layer, separating test cases and data. It allows for different case data configurations for each environment, while also supporting shared data.&lt;/p&gt;
&lt;p&gt;The core logic is all about improving the utilization of automation. Even if the scenario becomes more complex, and data between different environments is inconsistent and unrelated, simply add a &lt;code&gt;label&lt;/code&gt; tag when configuring case data to specify the environment supported by the current data.&lt;/p&gt;
&lt;h2 id=&#34;reference-materials&#34;&gt;Reference materials
&lt;/h2&gt;&lt;p&gt;How to Do Cost-Effective Automation Testing&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
