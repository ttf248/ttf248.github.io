<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Little-Endian on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/little-endian/</link>
        <description>Recent content in Little-Endian on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/little-endian/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Why do computers commonly use little-endian storage?</title>
        <link>https://ttf248.life/en/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;An introduction to byte order &lt;a class=&#34;link&#34; href=&#34;https://example.com/post/2023/01-10-%e4%b8%bb%e6%9c%ba%e5%ba%8f%e3%80%81%e7%bd%91%e7%bb%9c%e5%ba%8f%ef%bc%8c%e9%80%9a%e8%bf%87%e8%b0%83%e8%af%95%e5%99%a8%ef%bc%8c%e7%9b%b4%e6%8e%a5%e8%a7%82%e5%af%9f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Host Byte Order, Network Byte Order, observed directly through a debugger&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the field of computer science, certain design habits have formed due to historical reasons, just like the width of a hip pocket determines the width of a rocket’s thrusters – there&amp;rsquo;s no need to analyze their “advantages” and “disadvantages” purely based on that.&lt;/p&gt;
&lt;h2 id=&#34;original-link&#34;&gt;Original Link
&lt;/h2&gt;&lt;p&gt;Author: Beiji (North Pole)
Link: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
Source: Zhihu
Copyright belongs to the author. For commercial reprints, please contact the author for permission. Non-commercial reprints must indicate the source.&lt;/p&gt;
&lt;h2 id=&#34;text-translation&#34;&gt;Text Translation
&lt;/h2&gt;&lt;p&gt;Nowadays, the current situation is a result of historical habits + commercialization, and has little to do with technology itself. ARM can be set up in big-endian or little-endian format. The TCP/IP header still uses big-endian (network byte order). There are also many storage protocols/specifications in the storage field that save data in a big-endian manner.&lt;/p&gt;
&lt;p&gt;Therefore, the three questions posed by the user seem to be incorrect in today&amp;rsquo;s view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do computers generally adopt little-endian storage? –&amp;gt; Incorrect.&lt;/li&gt;
&lt;li&gt;Why is low-byte storage more efficient in a little-endian way than in a big-endian way? –&amp;gt; Efficiency will not be higher.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Any argument about these three questions using current technology belongs to shooting first and drawing the target.&lt;/p&gt;
&lt;h2 id=&#34;translated-text&#34;&gt;Translated Text
&lt;/h2&gt;&lt;p&gt;However, when it comes to the choice between big-endian and little-endian, there were indeed certain objective factors in the history of computer development: The advantage of host byte order (little-endian) is that little-endian adders are easier to implement. If you create an 8-bit * 4 adder, you only need one 8-bit adder and sequentially add all bytes from low to high. The carry circuit is very simple. In contrast, if using big-endian, you would need to load a 32-bit value at once, otherwise it wouldn&amp;rsquo;t be possible to perform calculations. Looking back now, the difference between loading 8 bits or 32 bits is not significant; however, in the decades of the past, memory prices were high, so simplicity was paramount. Therefore, the host byte order selection for little-endian was based on cost considerations. The advantages of network big-endian byte order: In the early days, caches on devices were very small. Receiving the high byte first allowed for a quick determination of message information: packet length (how much cache to prepare), address range (IP addresses are matched from front to back). Early network devices’ caches were at the byte level, and taking the high byte first was indeed slightly faster. Therefore, network devices used big-endian primarily due to cost considerations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Therefore, the choice of byte order was largely influenced by application scenarios and costs (such as PPC/MIPS being more suitable for networking equipment), while later technological developments have continued to use big-endian due to compatibility reasons. In today’s view, these advantages no longer exist; they are simply historical habits.&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
