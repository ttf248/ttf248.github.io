<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/git/</link>
        <description>Recent content in Git on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git Submodule Merge History Lost</title>
        <link>https://ttf248.life/en/p/git-submodule-merge-history-lost/</link>
        <pubDate>Mon, 02 Jun 2025 16:44:58 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-submodule-merge-history-lost/</guid>
        <description>&lt;p&gt;There’s a Git repository locally where submodules were in temporary branches during the initial pull. I made commits on that temporary branch, and then switched back to the &lt;code&gt;main&lt;/code&gt; branch. However, those committed changes seem to be lost and cannot be found within the &lt;code&gt;main&lt;/code&gt; branch. I also can&amp;rsquo;t find any record of that temporary branch.&lt;/p&gt;
&lt;h2 id=&#34;solutions&#34;&gt;Solutions
&lt;/h2&gt;&lt;p&gt;When you’ve committed to a temporary branch within a Git submodule and then switch back to the &lt;code&gt;main&lt;/code&gt; branch, you lose those commits. You can resolve this situation by following these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Verify Commit History&lt;/strong&gt;: Navigate into the submodule directory and use &lt;code&gt;reflog&lt;/code&gt; to find the lost commits.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a New Branch to Preserve Commits&lt;/strong&gt;: Create a new branch based on the lost commits.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Merge or Cherry-Pick Commits to Main&lt;/strong&gt;: Integrate the code into the main branch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of the specific steps:&lt;/p&gt;
&lt;h2 id=&#34;solutions-1&#34;&gt;Solutions
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Enter the submodule directory
cd path/to/your/submodule

# View the reflog record of all HEAD changes (including commits not associated with branches)
git reflog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;solutions-2&#34;&gt;Solutions
&lt;/h2&gt;&lt;p&gt;PS F:\dev\notebook\scripts\hugo-content-suite&amp;gt; git reflog
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD): checkout: moving from c8d070651310e90d283cb64d98da088c5fe05e73 to main
c8d0706 HEAD@{1}: commit: feat: Add Markdown tag usage documentation, providing detailed syntax examples and effect demonstrations
48250f5 HEAD@{2}: commit: feat: Remove article translation preview functionality, simplifying the translation process
b8280b6 HEAD@{3}: commit: feat: Add absolute path retrieval function, supporting converting relative paths to absolute paths
92c354b HEAD@{4}: commit: fix: Fix article scanning logic to ensure scanning with absolute paths&lt;/p&gt;
&lt;h2 id=&#34;solutions-3&#34;&gt;Solutions
&lt;/h2&gt;&lt;p&gt;92c354b HEAD@{4}: commit: fix: Fix article scanning logic to ensure absolute path scanning
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{5}: checkout: Moving from main to de05175d4ec0828e3ae95d726b09dfff18f67a23
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{6}: clone: from &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite.git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;solutions-4&#34;&gt;Solutions
&lt;/h2&gt;&lt;h1 id=&#34;create-a-new-branch-based-on-a-lost-commit-eg-using-commit-456def&#34;&gt;Create a new branch based on a lost commit (e.g., using commit 456def)
&lt;/h1&gt;&lt;p&gt;git checkout -b saved-work 456def&lt;/p&gt;
&lt;h1 id=&#34;switch-back-to-the-main-branch&#34;&gt;Switch back to the main branch
&lt;/h1&gt;&lt;p&gt;git checkout main&lt;/p&gt;
&lt;h1 id=&#34;merge-the-saved-work-into-main-or-use-cherry-pick-to-select-specific-commits&#34;&gt;Merge the saved work into main (or use cherry-pick to select specific commits)
&lt;/h1&gt;&lt;p&gt;git merge saved-work&lt;/p&gt;
&lt;h1 id=&#34;or&#34;&gt;or
&lt;/h1&gt;&lt;p&gt;git cherry-pick 456def&lt;/p&gt;
&lt;h1 id=&#34;return-to-the-root-project-directory-and-commit-submodule-updates&#34;&gt;Return to the root project directory and commit submodule updates
&lt;/h1&gt;&lt;p&gt;cd ..
git add path/to/your/submodule
git commit -m &amp;ldquo;Update submodule to include new changes&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;key-operations-guide&#34;&gt;Key Operations Guide
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git reflog&lt;/strong&gt;: Displays the entire history of HEAD, including commits not associated with any branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git checkout -b&lt;/strong&gt;: Creates a new branch from any commit and saves your work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git merge/cherry-pick&lt;/strong&gt;: Integrates saved commits into the target branch.
If no record is found in reflog, you may need to try using &lt;code&gt;git fsck --lost-found&lt;/code&gt; to find orphaned commits, but this situation is rare.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Commit messages in Git’s history</title>
        <link>https://ttf248.life/en/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-modify-commit-message/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;Scripts for batch modifying Git history commit author information, rewriting Git history records using &lt;code&gt;git filter-branch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You provided the script to modify author information in Git repository history commits in bulk. The overall approach is correct, but using an array (e.g., &lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;) within the &lt;code&gt;git filter-branch&lt;/code&gt; &lt;code&gt;--env-filter&lt;/code&gt; may cause compatibility issues because some shell environments (such as &lt;code&gt;/bin/sh&lt;/code&gt;) do not support array syntax.
To improve compatibility, it is recommended to replace the array with a string separated by spaces and iterate through each old email address using a &lt;code&gt;for&lt;/code&gt; loop. Here&amp;rsquo;s an example of the modified script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-english&#34;&gt;for OLD_EMAIL in $OLD_EMAILS
do
  if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
  then
    export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
    export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
  fi
  if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
  then
    export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
    export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
  fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before executing this script, it is recommended to back up your repository to prevent any unforeseen issues.&lt;/li&gt;
&lt;li&gt;This operation will rewrite Git history and modify commit author information, which may cause the commit hash values to change.&lt;/li&gt;
&lt;li&gt;If you have already pushed changes to a remote repository, you need to use a forced push:
Please exercise caution when using forced pushes, especially in collaborative projects, to avoid impacting others.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Count all unique author email addresses in the repository&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Git Disable HTTP Repository</title>
        <link>https://ttf248.life/en/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;Updated habit software version, unsure which Git version to start from, prohibiting fetching code from &lt;code&gt;Http&lt;/code&gt; repositories.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;background-introduction&#34;&gt;Background Introduction
&lt;/h2&gt;&lt;p&gt;Environment: Windows platform, I’ve always used Tiny Turtle to operate Git, and key configuration was also handled through it. I previously created a script to batch update local repositories.
Previous article link: &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/en/p/bulk-update-local-git-and-legacy-permissions/&#34; &gt;Batch Update Local Git Repository&lt;/a&gt;
Today when I went home to execute the code update, the previous error occurred, and the repository could no longer be updated normally. I was planning to use &lt;code&gt;Git&lt;/code&gt;’s configuration to continue using the &lt;code&gt;http&lt;/code&gt; protocol to update the repository, but I searched everywhere without finding the corresponding configuration item.
The simplest solution is of course to switch to the &lt;code&gt;ssh&lt;/code&gt; protocol to update the repository, as the &lt;code&gt;gitlab&lt;/code&gt; configured by the company will not provide the &lt;code&gt;https&lt;/code&gt; protocol in the short term.&lt;/p&gt;
&lt;h2 id=&#34;legacy-issues&#34;&gt;Legacy Issues
&lt;/h2&gt;&lt;p&gt;When writing the batch update local repository script previously, we originally intended to use &lt;code&gt;ssh&lt;/code&gt; to pull the repository and didn&amp;rsquo;t investigate thoroughly. The &lt;code&gt;git&lt;/code&gt; configuration information configured via TortoiseGit was not synchronized to the config file, resulting in a &amp;ldquo;permission denied&amp;rdquo; error when executing with the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull # prompts that permission is denied and cannot update the repository normally
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Checking the key configuration using commands was correct: &lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you can successfully pull code with Git TortoiseGit, but receive a &amp;ldquo;key incorrect&amp;rdquo; error when using the &lt;code&gt;git pull&lt;/code&gt; command in the terminal, this may be because Git TortoiseGit is using PuTTY&amp;rsquo;s SSH key, while the terminal uses OpenSSH&amp;rsquo;s SSH key.
The keys configured in TortoiseGit do not come from the system . Here&amp;rsquo;s the English translation of the provided text:&lt;/p&gt;
&lt;p&gt;“When reading SSH folder key files, instead of configuring the path to the key file through the interface repository configuration, a useful tip is to pull the first repository with its configured key, allowing subsequent repositories to reuse that same key. After PuTTY loads the key, it doesn’t immediately exit; instead, it starts a proxy service.”&lt;/p&gt;
&lt;h2 id=&#34;legacy-issues-1&#34;&gt;Legacy Issues
&lt;/h2&gt;&lt;p&gt;By adjusting the global configuration and not using the system default &lt;code&gt;ssh&lt;/code&gt; configuration, this setup will have Git Bash use TortoisePlink for SSH operations. This configuration is suitable for situations where you are using PuTTY tools provided by TortoiseGit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please modify the executable file path above to match your specific TortoiseGit installation location.  No need to add this path to the system environment variables due to the complete path configuration.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>- Batch update local Git repositories and resolve legacy permission issues.</title>
        <link>https://ttf248.life/en/p/bulk-update-local-git-and-legacy-permissions/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/bulk-update-local-git-and-legacy-permissions/</guid>
        <description>&lt;p&gt;The projects within the team have dependencies on each other, and due to historical reasons, submodules haven’t been used to manage these project dependencies. Daily development requires manually updating the repository code one by one, otherwise various strange issues may arise.&lt;/p&gt;
&lt;p&gt;Referring to online resources, the structure is generally similar. A local manual repository directory (&lt;strong&gt;git_list.txt&lt;/strong&gt;) is maintained, and a script iterates through the directories to perform an update in one go. Before starting each project, this script needs to be executed.&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;h2 id=&#34;linux-1&#34;&gt;Linux
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ Updating Repository ===================&amp;quot;

# Check if git_list.txt exists
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt file does not exist! Please create and add the Git repository URLs to pull.&amp;quot;
  exit 1
else
  echo &amp;quot;============ Detected Git Repository List File ===================&amp;quot;
fi

# Read each URL from git_list.txt and execute the pull operation
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url completed!&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;Directory $url does not exist, skipping pull.&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows
&lt;/h2&gt;&lt;p&gt;Create a new file: batch_pull.bat&lt;/p&gt;
&lt;h2 id=&#34;windows-1&#34;&gt;Windows
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem Enter the script directory
cd /d &amp;quot;%~dp0&amp;quot;

rem Check if git_list.txt exists
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt file does not exist! Please create and add the Git repository URLs to pull.
  exit /b 1
) else (
  echo ============ Detected Git Repository List File =========
)

rem Read each URL from git_list.txt and execute the pull operation
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i completed!
    echo ========================================
  ) else (
    echo Directory %%i does not exist, skipping pull.
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;legacy-issues&#34;&gt;Legacy Issues
&lt;/h3&gt;&lt;p&gt;Also handle the &lt;code&gt;git&lt;/code&gt; folder permission files encountered after reinstalling the system: &lt;strong&gt;Fatal error &amp;ldquo;unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)&amp;rdquo;&lt;/strong&gt;.
Most suggestions found online originate from &lt;code&gt;stack overflow&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add trust to the repository directory: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Manually modify the configuration file &lt;code&gt;.gitconfig&lt;/code&gt;, specifying the directory as trusted&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After using this method, repository updates are normal, but there are many warning messages displayed in the console every time &lt;code&gt;git pull&lt;/code&gt; is executed, indicating owner errors.&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-the-operating-system-on-a-desktop-pc&#34;&gt;Reinstalling the Operating System on a Desktop PC
&lt;/h3&gt;&lt;p&gt;The machine hadn&amp;rsquo;t been reinstalled for a long time, and the system partition was filled with a massive amount of garbage files. There was no choice but to take some time to reinstall it. I ran into this permission issue again, and previous scripts wouldn’t run because the permissions were incomplete.&lt;/p&gt;
&lt;p&gt;Using the new approach, I simply added &lt;code&gt;*&lt;/code&gt;, which allows &lt;code&gt;git&lt;/code&gt; to automatically trust all directories.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;I suspect it&amp;rsquo;s a user permission issue, or perhaps everyone hasn’t gotten used to the fact that Windows also has similar commands like &lt;code&gt;chown&lt;/code&gt; for modifying folder owners. Of course, if you have only a few directories, you can manually modify the ownership as well. However, this work computer has domain information added, and I don&amp;rsquo;t know whether it&amp;rsquo;s an anomaly in the company’s domain deployment or whether there are anomalies in the local system settings. The user list couldn&amp;rsquo;t find the user used for login, so I finally handled it through command-line processing.&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-the-operating-system&#34;&gt;Reinstalling the Operating System
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Get the current user&#39;s username
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# Set PowerShell&#39;s character encoding to UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# The root directory to change ownership for
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # Replace with the actual path
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reinstalling-the-operating-system-on-a-desktop-pc-1&#34;&gt;Reinstalling the Operating System on a Desktop PC
&lt;/h3&gt;&lt;h1 id=&#34;check-if-its-a-file-or-a-folder&#34;&gt;Check if it&amp;rsquo;s a file or a folder
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;if ($_ -is [System.IO.DirectoryInfo]) {
    # If it&#39;s a folder, use icacls to change ownership permissions
    $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
    if ($LASTEXITCODE -eq 0) {
        Write-Host &amp;quot;Ownership of folder $itemPath has been changed to $currentUserName&amp;quot;
    } else {
        Write-Host &amp;quot;Unable to change ownership of folder $itemPath. Error message: $icaclsResult&amp;quot;
    }
} else {
    # If it&#39;s a file, use icacls to change ownership permissions
    $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reinstalling-the-operating-system-on-a-desktop-pc-2&#34;&gt;Reinstalling the Operating System on a Desktop PC
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;$takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
if ($LASTEXITCODE -eq 0) {
    # Write-Host &amp;quot;已更改文件 $itemPath 的所有者为 $currentUserName&amp;quot;
} else {
    Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reinstalling-the-operating-system-on-a-desktop-pc-3&#34;&gt;Reinstalling the Operating System on a Desktop PC
&lt;/h3&gt;&lt;p&gt;As expected, unexpected issues arose. The Chinese information output from the script execution was garbled, and attempts to set the console character encoding and adjust the script encoding resulted in gibberish. It’s highly likely that my brain wasn&amp;rsquo;t fully sober. I tried enabling the beta feature in Control Panel - Region - Language Settings, globally opening Unicode encoding, which resolved the script execution issues. However, several development software applications were unable to function properly. Looking back, I realized that adjusting the script file encoding to &lt;code&gt;gbk&lt;/code&gt; was the solution.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>A Collection of Less Commonly Used Git Commands</title>
        <link>https://ttf248.life/en/p/less-common-git-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/less-common-git-commands-summary/</guid>
        <description>&lt;p&gt;Less commonly used, but very useful &lt;code&gt;git&lt;/code&gt; commands&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-the-system-caused-changes-to-folder-ownership-on-windows&#34;&gt;Reinstalling the system caused changes to folder ownership on &lt;code&gt;Windows&lt;/code&gt;.
&lt;/h3&gt;&lt;p&gt;The new version of &lt;code&gt;git&lt;/code&gt; has added security checks, prompting an unsafe state and preventing further operation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;new-computer-saving-account-password-information&#34;&gt;New Computer Saving Account Password Information
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the saved information needs to be updated, first clear out the old credentials&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
