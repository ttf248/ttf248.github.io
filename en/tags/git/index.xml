<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/git/</link>
        <description>Recent content in Git on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Fri, 06 Jun 2025 18:41:08 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git Single Configuration Proxy</title>
        <link>https://ttf248.life/en/p/git-single-configuration-proxy/</link>
        <pubDate>Fri, 06 Jun 2025 18:29:46 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-single-configuration-proxy/</guid>
        <description>&lt;p&gt;Accessing GitHub domestically is slow, and you can speed it up by configuring a proxy. There’s also another way: find a domestic hosting platform like CodeOcean or Coding. Configure the corresponding build pipeline to sync your code to GitHub.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using ‘coding’ for many years – its interface is simple, and they recently released an announcement that the free version can no longer be used, requiring migration to Tencent’s new platform, &lt;code&gt;cnb&lt;/code&gt;.  Let me also complain a bit about Alibaba’s hosting platform; the entire interface design feels very dated/stuffy. &lt;strong&gt;It&amp;rsquo;s like eating a bowl of congee (班味 - ban wei)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;repository-migration&#34;&gt;Repository Migration
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;cnb&lt;/code&gt; website provides migration tools that can batch migrate code from &lt;code&gt;github&lt;/code&gt; to &lt;code&gt;cnb&lt;/code&gt;.
&lt;a class=&#34;link&#34; href=&#34;https://docs.cnb.cool/zh/guide/migration-tools.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.cnb.cool/zh/guide/migration-tools.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-proxy-configuration&#34;&gt;Git Proxy Configuration
&lt;/h2&gt;&lt;p&gt;To avoid slow synchronization due to the lack of an accelerator, tools will first synchronize code to your local machine and then upload it to the remote repository.&lt;/p&gt;
&lt;p&gt;Git can be configured for HTTP proxies independently using the following commands, without affecting system-wide settings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set HTTP proxy
git config --global http.proxy http://proxy.example.com:8080

# Set HTTPS proxy
git config --global https.proxy http://proxy.example.com:8080

# Optional: Configure proxy for a specific domain
git config --global http.https://github.com.proxy http://proxy.example.com:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To remove the proxy configuration, use the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global --unset http.proxy
git config --global --unset https.proxy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To view your current proxy configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global --get http.proxy
git config --global --get https.proxy
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Git Submodule Merge History Lost</title>
        <link>https://ttf248.life/en/p/git-submodule-merge-history-lost/</link>
        <pubDate>Mon, 02 Jun 2025 16:44:58 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-submodule-merge-history-lost/</guid>
        <description>&lt;p&gt;There’s a Git repository locally where submodules were in temporary branches during the initial pull. I made commits on that temporary branch, and then switched back to the &lt;code&gt;main&lt;/code&gt; branch. However, those committed changes seem to be lost and cannot be found within the &lt;code&gt;main&lt;/code&gt; branch. I also can&amp;rsquo;t find any record of that temporary branch.&lt;/p&gt;
&lt;h2 id=&#34;solutions&#34;&gt;Solutions
&lt;/h2&gt;&lt;p&gt;After committing to a temporary branch within the Git submodule and switching back to the &lt;code&gt;main&lt;/code&gt; branch, these commits are no longer found. This situation can be resolved by following the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Verify Commit History&lt;/strong&gt;: Navigate to the submodule directory and use &lt;code&gt;reflog&lt;/code&gt; to find the lost commits.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a New Branch to Save Commits&lt;/strong&gt;: Create a new branch based on the lost commit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Merge or Cherry-Pick Commits to Main&lt;/strong&gt;: Integrate the code into the main branch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the specific steps:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Enter the submodule directory
cd path/to/your/submodule

# View reflog records all HEAD changes (including commits not associated with branches)
git reflog

PS F:\dev\notebook\scripts\hugo-content-suite&amp;gt; git reflog
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{0}: checkout: moving from c8d070651310e90d283cb64d98da088c5fe05e73 to main
c8d0706 HEAD@{1}: commit: feat: Add Markdown tag symbol usage documentation, provide detailed syntax examples and effect display
48250f5 HEAD@{2}: commit: feat: Remove article translation preview function, simplify the translation process
b8280b6 HEAD@{3}: commit: feat: Add absolute path acquisition function, support converting relative paths to absolute paths
92c354b HEAD@{4}: commit: fix: Fix article scanning logic, ensure scanning using absolute paths
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{5}: checkout: moving from main to de05175d4ec0828e3ae95d726b09dfff18f67a23
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{6}: clone: from https://cnb.cool/ttf248/hugo-content-suite.git

# Create a new branch based on the lost commit (e.g., using 456def commit)
git checkout -b saved-work 456def

# Switch back to the main branch
git checkout main

# Merge the saved work into main (or use cherry-pick to select specific commits)
git merge saved-work
# Or
git cherry-pick 456def

# Return to the parent project directory and commit submodule updates
cd ..
git add path/to/your/submodule
git commit -m &amp;quot;Update submodule to include new changes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;key-operational-instructions&#34;&gt;Key Operational Instructions
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git reflog&lt;/strong&gt;: Displays the entire history of HEAD, including commits not associated with any branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git checkout -b&lt;/strong&gt;: Creates a new branch from any commit and saves your work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git merge/cherry-pick&lt;/strong&gt;: Integrates saved commits into the target branch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the reflog doesn&amp;rsquo;t contain records, you may need to try using &lt;code&gt;git fsck --lost-found&lt;/code&gt; to find orphaned commits, but this is a rare occurrence.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Commit messages in Git’s history</title>
        <link>https://ttf248.life/en/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-modify-commit-message/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;Script for batch modifying Git history commit author information, rewriting Git history records using &lt;code&gt;git filter-branch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You provided the script to modify the author information in the Git repository history in bulk. The overall approach is correct, but using an array (e.g., &lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;) within the &lt;code&gt;git filter-branch&lt;/code&gt;’s &lt;code&gt;--env-filter&lt;/code&gt; might cause compatibility issues because some shell environments (such as &lt;code&gt;/bin/sh&lt;/code&gt;) do not support array syntax.
To improve compatibility, it&amp;rsquo;s recommended to replace the array with space-separated strings and use a &lt;code&gt;for&lt;/code&gt; loop to iterate through each old email address. Here is an example of the modified script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is recommended to back up your repository before executing this script to prevent any unexpected issues.&lt;/li&gt;
&lt;li&gt;This operation rewrites Git history, modifying the author information of commits, which may cause changes in commit hash values.&lt;/li&gt;
&lt;li&gt;If you have already pushed the changes to a remote repository, you need to use a forced push:
Please use forced pushes cautiously, especially in collaborative projects, to avoid affecting others.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Count all unique authors&amp;rsquo; email addresses in the repository&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Git Disable HTTP Repository</title>
        <link>https://ttf248.life/en/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;Updated habit software version, unsure which Git version to start from, prohibiting fetching code from &lt;code&gt;Http&lt;/code&gt; repositories.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;background-introduction&#34;&gt;Background Introduction
&lt;/h2&gt;&lt;p&gt;Environment: Windows platform, I’ve always used Tiny Turtle to operate Git, and key configuration was also handled through it. I previously created a script to batch update local repositories.
Previous article link: &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/en/p/bulk-update-local-git-and-legacy-permissions/&#34; &gt;Batch Update Local Git Repository&lt;/a&gt;
Today when I went home to execute the code update, the previous error occurred, and the repository could no longer be updated normally. I was planning to use &lt;code&gt;Git&lt;/code&gt;’s configuration to continue using the &lt;code&gt;http&lt;/code&gt; protocol to update the repository, but I searched everywhere without finding the corresponding configuration item.
The simplest solution is of course to switch to the &lt;code&gt;ssh&lt;/code&gt; protocol to update the repository, as the &lt;code&gt;gitlab&lt;/code&gt; configured by the company will not provide the &lt;code&gt;https&lt;/code&gt; protocol in the short term.&lt;/p&gt;
&lt;h2 id=&#34;legacy-issues&#34;&gt;Legacy Issues
&lt;/h2&gt;&lt;p&gt;When writing the batch update local repository script previously, we initially planned to use &lt;code&gt;ssh&lt;/code&gt; to pull the repository and didn&amp;rsquo;t investigate thoroughly. The &lt;code&gt;git&lt;/code&gt; configuration information configured via Small Turtle was not synchronized to the config file, resulting in a &amp;ldquo;permission denied&amp;rdquo; error when executing with the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull # prompts for permission issues and cannot update the repository normally
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Checking the key configuration using the command was correct: &lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you can successfully pull code using Small Turtle (TortoiseGit), but receive a &amp;ldquo;key not recognized&amp;rdquo; error when using the &lt;code&gt;git pull&lt;/code&gt; command from the command line, this may be because Small Turtle uses PuTTY&amp;rsquo;s SSH key while the command line uses OpenSSH&amp;rsquo;s SSH key.&lt;/p&gt;
&lt;p&gt;The key configuration in Small Turtle does not read key file information from the system &lt;code&gt;.ssh&lt;/code&gt; folder; instead, it configures the path to the key file separately through the interface when configuring the repository. There’s a useful trick: configuring the first pulled repository with its key allows other repositories to reuse that same key file. PuTTY loads the key and doesn&amp;rsquo;t immediately exit but starts a proxy service.&lt;/p&gt;
&lt;p&gt;By adjusting the global configuration to not use the system default &lt;code&gt;ssh&lt;/code&gt; configuration, Git Bash will use TortoisePlink for SSH operations. This configuration is suitable for situations where you are using TortoiseGit with the built-in PuTTY tool.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please modify the execution file path in the above configuration to match your Small Turtle installation path. Since the full path is configured, no need to add it to the system environment variables.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>- Batch update local Git repositories and resolve legacy permission issues.</title>
        <link>https://ttf248.life/en/p/bulk-update-local-git-and-legacy-permissions/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/bulk-update-local-git-and-legacy-permissions/</guid>
        <description>&lt;p&gt;The projects within the team have dependencies on each other, and due to historical reasons, submodules haven’t been used to manage these project dependencies. Daily development requires manually updating the repository code one by one, otherwise various strange issues may arise.&lt;/p&gt;
&lt;p&gt;Referring to online resources, the structure is generally similar. A local manual repository directory (&lt;strong&gt;git_list.txt&lt;/strong&gt;) is maintained, and a script iterates through the directories to perform an update in one go. Before starting each project, this script needs to be executed.&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ Updating Repository ===================&amp;quot;

# Check if git_list.txt exists
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt file does not exist! Please create and add the Git repository URLs to pull.&amp;quot;
  exit 1
else
  echo &amp;quot;============ Detected Git Repository List File ===================&amp;quot;
fi

# Read each URL from git_list.txt and execute the pull operation
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url completed!&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;Directory $url does not exist, skipping pull.&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows
&lt;/h2&gt;&lt;p&gt;Create a new file: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem Enter the directory of the script
cd /d &amp;quot;%~dp0&amp;quot;

rem Check if git_list.txt exists
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt file does not exist! Please create and add the Git repository URLs you want to pull.
  exit /b 1
) else (
  echo ============ Detected Git repository list file =========
)

rem Read each URL from git_list.txt and execute the pull operation
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i completed!
    echo ========================================
  ) else (
    echo Directory %%i does not exist, skipping pull.
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;historical-issues&#34;&gt;Historical Issues
&lt;/h3&gt;&lt;p&gt;Also addressed the &lt;code&gt;git&lt;/code&gt; folder permission files encountered after reinstalling the system: &lt;strong&gt;Fatal error &amp;ldquo;unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)&amp;rdquo;&lt;/strong&gt;.
Most suggested solutions online originate from &lt;code&gt;stack overflow&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add trust to the repository directory: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Manually modify the configuration file &lt;code&gt;.gitconfig&lt;/code&gt;, specifying the directory to add trust&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After using this method, repository updates are normal, but there are many warning messages displayed in the console every time &lt;code&gt;git pull&lt;/code&gt; is executed, indicating owner errors.&lt;/p&gt;
&lt;h3 id=&#34;desktop-system-reinstallation&#34;&gt;Desktop System Reinstallation
&lt;/h3&gt;&lt;p&gt;Machines developed for a long time without system reinstallation, the system partition contained an explosion of garbage files, so I took some time to reinstall the system and encountered this permission issue again. Previous scripts would not run because the permissions were incomplete.&lt;/p&gt;
&lt;p&gt;Using the new approach, directly add &lt;code&gt;*&lt;/code&gt;, so that &lt;code&gt;git&lt;/code&gt; automatically trusts all directories.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;It is suspected to be a user permission problem, or whether everyone has not adapted to the &lt;code&gt;windows&lt;/code&gt; platform. There are similar &lt;code&gt;chown&lt;/code&gt; commands.  You can modify folder ownership. Of course, if your directories are few, manually modifying ownership also works. However, this work computer has added domain information. I don&amp;rsquo;t know if it&amp;rsquo;s an abnormal domain deployed by the company or whether there is an anomaly in the local system settings. The user list cannot find the user used for login, and finally processed through command-line operations.&lt;/p&gt;
&lt;p&gt;With administrator permissions, execute the &lt;code&gt;powershell&lt;/code&gt; script &lt;code&gt;change_ower.ps1&lt;/code&gt;, remember to adjust the script file encoding to &lt;code&gt;gbk&lt;/code&gt; so that it doesn&amp;rsquo;t display garbled characters in Chinese operating systems.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Get the current user&#39;s username
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# Set PowerShell&#39;s character encoding to UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# The root directory path to change ownership
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # Replace with the actual directory path

# Recursively iterate through directories and change file and folder owners
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # Check if it&#39;s a file or a folder
    if ($_ -is [System.IO.DirectoryInfo]) {
        # If it&#39;s a folder, use icacls to change the owner permission
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;Changed the owner of folder $itemPath to $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;Unable to change the owner of folder $itemPath. Error information: $icaclsResult&amp;quot;
        }
    } else {
        # If it&#39;s a file, use icacls to change the owner permission
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;Changed the owner of file $itemPath to $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;Unable to change the owner of file $itemPath. Error information: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unexpected situations still occurred, and the Chinese information output by the script was garbled. I tried setting the console character encoding and adjusting the script encoding, but the output was all garbled.  It is likely that my brain wasn&amp;rsquo;t clear at all. I tried enabling the beta feature in Control Panel - Region - Language Settings to globally enable Unicode encoding, and the script executed normally. Several development software programs could not work properly. Later, when reviewing materials, I remembered to adjust the script file encoding to &lt;code&gt;gbk&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>A Collection of Less Commonly Used Git Commands</title>
        <link>https://ttf248.life/en/p/less-common-git-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/less-common-git-commands-summary/</guid>
        <description>&lt;p&gt;Less commonly used, but very useful &lt;code&gt;git&lt;/code&gt; commands&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-the-system-caused-changes-to-folder-ownership-on-windows&#34;&gt;Reinstalling the system caused changes to folder ownership on &lt;code&gt;Windows&lt;/code&gt;.
&lt;/h3&gt;&lt;p&gt;The new version of &lt;code&gt;git&lt;/code&gt; has added security checks, prompting an unsafe state and preventing further operation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;new-computer-saving-account-password-information&#34;&gt;New Computer Saving Account Password Information
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the saved information needs to be updated, first clear out the old credentials&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
