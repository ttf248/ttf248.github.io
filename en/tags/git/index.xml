<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/git/</link>
        <description>Recent content in Git on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 07:41:32 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Commit messages in Git’s history</title>
        <link>https://ttf248.life/en/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;Script to batch modify Git history commit author information, rewriting the Git history records using &lt;code&gt;git filter-branch&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The script you provided is used to batch modify the author information in the Git repository history. The overall approach is correct, but using an array (like &lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;) within the &lt;code&gt;git filter-branch&lt;/code&gt; &lt;code&gt;--env-filter&lt;/code&gt; might cause compatibility issues because some shell environments (such as &lt;code&gt;/bin/sh&lt;/code&gt;) do not support array syntax.&lt;/p&gt;
&lt;p&gt;To improve compatibility, it&amp;rsquo;s recommended to replace the array with a string separated by spaces and iterate through each old email address using a &lt;code&gt;for&lt;/code&gt; loop. Here’s an example of the modified script:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is highly recommended to back up your repository before executing this script to prevent any unforeseen issues. - This operation will rewrite Git history, modifying commit author information and may cause the commit hash values to change.&lt;/li&gt;
&lt;li&gt;If you have already pushed your changes to a remote repository, you need to use a forced push:
Please exercise caution when using forced pushes, especially in collaborative projects, to avoid impacting others.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Count all unique authors&amp;rsquo; email addresses in the repository&lt;/p&gt;</description>
        </item>
        <item>
        <title>Git Disable HTTP Repository</title>
        <link>https://ttf248.life/en/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;Update the habit of software version, unknown from which version of &lt;code&gt;Git&lt;/code&gt; to start, prohibit pulling code from &lt;code&gt;Http&lt;/code&gt; repository.&lt;/p&gt;
&lt;h2 id=&#34;background-introduction&#34;&gt;Background Introduction
&lt;/h2&gt;&lt;p&gt;Environment: Windows platform, I’ve always used Little Turtle to operate Git, and key configuration was also handled through it. I previously created a script to batch update local repositories.
Previous article link: &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/en/p/bulk-update-local-git-repository-and-legacy-permission-issues/&#34; &gt;Batch Update Local Git Repository&lt;/a&gt;
Today when executing the code update at home, the previous error occurred, and the repository could no longer be updated normally. I was planning to use &lt;code&gt;Git&lt;/code&gt;’s configuration to continue using the &lt;code&gt;http&lt;/code&gt; protocol to update the repository, but I searched everywhere without finding the corresponding configuration item.
The simplest solution is of course to switch to the &lt;code&gt;ssh&lt;/code&gt; protocol to update the repository, as the &lt;code&gt;gitlab&lt;/code&gt; configured by the company will not provide the &lt;code&gt;https&lt;/code&gt; protocol in the short term.&lt;/p&gt;
&lt;h2 id=&#34;legacy-issues&#34;&gt;Legacy Issues
&lt;/h2&gt;&lt;p&gt;When writing the batch update local repository script previously, we initially planned to use &lt;code&gt;ssh&lt;/code&gt; to pull the repository and didn&amp;rsquo;t thoroughly investigate why. The &lt;code&gt;git&lt;/code&gt; configuration information configured via TortoiseGit was not synchronized to the config file, resulting in errors when executing through the command line.&lt;/p&gt;
&lt;p&gt;Checking key configurations with commands like &lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt; were correct. If you can successfully pull code using Git Small Turtle (TortoiseGit), but receive a &amp;ldquo;key incorrect&amp;rdquo; error when using the &lt;code&gt;git pull&lt;/code&gt; command, this might be because TortoiseGit is using PuTTY&amp;rsquo;s SSH key while the command line uses OpenSSH&amp;rsquo;s SSH key.&lt;/p&gt;
&lt;p&gt;The keys configured in TortoiseGit do not come from the system . Here’s the English translation of the provided text:&lt;/p&gt;
&lt;p&gt;“When reading a secret key file via SSH folder, it instead uses the interface repository configuration to independently configure the path of the key file. A useful trick is to pull the first repository with its configured key, allowing subsequent repositories to reuse that same key. After PuTTY loads the key, it doesn’t immediately exit but starts a proxy service. By adjusting global settings and not using the system&amp;rsquo;s default &lt;code&gt;ssh&lt;/code&gt; configuration, Git Bash will use TortoisePlink for SSH operations. This configuration is suitable when using the PuTTY tool provided by TortoiseGit.”&lt;/p&gt;
&lt;h2 id=&#34;legacy-issues-1&#34;&gt;Legacy Issues
&lt;/h2&gt;&lt;p&gt;Please modify the execution file path in the above configuration to match your specific Mini Turtle path. Due to the complete path configured, no need to add the path to the system environment variables.&lt;/p&gt;</description>
        </item>
        <item>
        <title>- Batch update local Git repositories and resolve legacy permission issues.</title>
        <link>https://ttf248.life/en/p/bulk-update-local-git-repository-and-legacy-permission-issues/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/bulk-update-local-git-repository-and-legacy-permission-issues/</guid>
        <description>&lt;p&gt;The projects within the team have dependencies on each other, and due to historical reasons, submodules haven’t been used to manage these project dependencies. Daily development requires manually updating the repository code one by one, otherwise various strange issues may arise.&lt;/p&gt;
&lt;p&gt;Referring to online resources, the structure is generally similar. A local manual repository directory (&lt;strong&gt;git_list.txt&lt;/strong&gt;) is maintained, and a script iterates through the directories to perform an update in one go. Before starting each project, this script needs to be executed.&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows
&lt;/h2&gt;&lt;p&gt;Create a new file: batch_pull.bat&lt;/p&gt;
&lt;h3 id=&#34;historical-issues&#34;&gt;Historical Issues
&lt;/h3&gt;&lt;p&gt;Also addressed the &lt;code&gt;git&lt;/code&gt; folder permission files encountered after reinstalling the system: &lt;strong&gt;Fatal error &amp;ldquo;unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)&amp;rdquo;&lt;/strong&gt;
Most suggested solutions online originate from &lt;code&gt;stack overflow&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add trust to the repository directory: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Manually modify the configuration file &lt;code&gt;.gitconfig&lt;/code&gt;, specifying the directory to add trust
After using these methods, repository updates were normal, but numerous warning messages appeared in the console every time &lt;code&gt;git pull&lt;/code&gt; was executed, indicating owner errors.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;reinstalling-the-system-on-a-desktop-machine&#34;&gt;Reinstalling the System on a Desktop Machine
&lt;/h3&gt;&lt;p&gt;The machine hadn&amp;rsquo;t been reinstalled for a long time, and the system partition was filled with a massive amount of garbage files, leaving me no choice but to take some time to reinstall it. I ran into this permission issue again, and previous scripts wouldn’t run because the permissions were incomplete.&lt;/p&gt;
&lt;p&gt;Using the new approach, I simply added &lt;code&gt;*&lt;/code&gt;, which automatically trusts all directories for &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I suspect it&amp;rsquo;s a user permission issue, or perhaps everyone hasn&amp;rsquo;t gotten used to the fact that Windows also has similar commands like &lt;code&gt;chown&lt;/code&gt; to modify folder owners. Of course, if you have only a few directories, you can manually change the owner. However, this work computer has domain information added, and I’m not sure whether it’s due to an anomaly in the company&amp;rsquo;s deployed domain or an abnormality in the local system settings. In the user list, I couldn’t find the user used for login. Finally, I resolved it by processing through the command line.  Running the &lt;code&gt;change_ower.ps1&lt;/code&gt; PowerShell script with administrator privileges. ps1&lt;code&gt;，remember to adjust the script file encoding to &lt;/code&gt;gbk&lt;code&gt;, for Chinese operating systems, otherwise it will be garbled. Unexpected situations still appeared, the Chinese information output by the script was garbled, trying to set the console character encoding, adjusting the script encoding, all outputs were garbled, my brain must have been pretty messed up, try enabling Control Panel-Region-Language Settings beta function, globally enable Unicode encoding, the script executed normally, several development software could not work properly, I will review the materials later and realized that adjusting the script file encoding to &lt;/code&gt;gbk` ### Reinstalling the System on a Desktop Machine
The machine, which hadn&amp;rsquo;t been reinstalled for a long time, had an explosion of garbage system files, leaving me with no choice but to take some time and reinstall it. I ran into this permission issue again, and previous scripts wouldn’t run because the permissions were incomplete.&lt;/p&gt;
&lt;p&gt;Using the new approach, I simply added &lt;code&gt;*&lt;/code&gt;, which automatically trusts all directories for &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I suspect it&amp;rsquo;s a user permission issue, or perhaps everyone hasn&amp;rsquo;t gotten used to the fact that Windows also has similar commands like &lt;code&gt;chown&lt;/code&gt; to modify folder owners. Of course, if your directories are few in number, you can manually change the owner as well. However, this work computer has domain information added, and I’m not sure whether it’s due to an anomaly in the company&amp;rsquo;s deployed domain or some abnormality in the local system settings. In the user list, I couldn’t find the user used for login, so I finally handled it through command-line processing.  Administrator permissions were used to execute the &lt;code&gt;change_ower.powershell&lt;/code&gt; script.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>A Collection of Less Commonly Used Git Commands</title>
        <link>https://ttf248.life/en/p/git-less-common-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-less-common-commands-summary/</guid>
        <description>&lt;p&gt;Less commonly used, but very useful &lt;code&gt;git&lt;/code&gt; commands&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-the-system-caused-changes-to-folder-ownership-on-windows&#34;&gt;Reinstalling the system caused changes to folder ownership on &lt;code&gt;Windows&lt;/code&gt;.
&lt;/h3&gt;&lt;p&gt;The new version of &lt;code&gt;git&lt;/code&gt; has increased security checks, prompting an unsafe message and preventing further operation.&lt;/p&gt;
&lt;h3 id=&#34;new-computer-account-password-information&#34;&gt;New Computer Account Password Information
&lt;/h3&gt;&lt;p&gt;If the information saved needs to be updated, first clear out the old credentials.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
