<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/git/</link>
        <description>Recent content in Git on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Commit messages in Git history</title>
        <link>https://ttf248.life/en/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;This script is used to batch modify author information in Git history, rewriting commit records using &lt;code&gt;git filter-branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The provided script for batch modifying author information in Git repository history is conceptually correct, but (does not support array syntax)&lt;/p&gt;
&lt;p&gt;To improve compatibility, it is recommended to replace the array with a space-separated string and iterate through each old email address using &lt;code&gt;for&lt;/code&gt;. Here&amp;rsquo;s an example of the modified script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please provide the Chinese text you want me to translate. I am ready when you are!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Before running this script, it is recommended to back up your repository to prevent unexpected issues&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This operation will rewrite Git history, modify commit author information, and may cause changes to commit hashes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have already pushed changes to the remote repository, you need to use a force push&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --force --tags origin &#39;refs/heads/*&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use force pushes cautiously, especially in collaborative projects, to avoid impacting others&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;List all unique author email addresses in the warehouse statistics&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>git-disable-http-repositories</title>
        <link>https://ttf248.life/en/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;Accustomed to updating software versions, unsure which version&amp;rsquo;s repository to pull code from&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;background-introduction&#34;&gt;Background introduction
&lt;/h2&gt;&lt;p&gt;Environment: Windows platform, consistently using TortoiseGit for Git operations, including configuring SSH keys. Previously attempted a script to batch update local repositories.&lt;/p&gt;
&lt;p&gt;Previous article link:&lt;/p&gt;
&lt;p&gt;When updating the code today, I encountered the previous error and the repository failed to update properly. I thought of updating the repository using &lt;strong&gt;INLINE_CODE_0__应该提供了配置，让我继续使用__INLINE_CODE_1&lt;/strong&gt;, but couldn&amp;rsquo;t find the corresponding configuration item after searching around.&lt;/p&gt;
&lt;p&gt;The simplest solution is, of course, to switch to the &lt;code&gt;ssh&lt;/code&gt;协议来更新仓库，公司配置的&lt;code&gt;gitlab&lt;/code&gt;短期内不会提供&lt;code&gt;https&lt;/code&gt;protocol&lt;/p&gt;
&lt;h2 id=&#34;outstanding-issues&#34;&gt;Outstanding issues
&lt;/h2&gt;&lt;p&gt;When writing the batch update script for the local repository, I initially intended to use the &lt;strong&gt;INLINE_CODE_0__的方式拉取仓库，也没细查是因为什么，通过小乌龟配置的__INLINE_CODE_1&lt;/strong&gt; configuration information, but it wasn&amp;rsquo;t synchronized to the config, resulting in issues when executing via command line&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull #提示没有权限，无法正常更新仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Checking the key configuration via command is also correct&lt;/p&gt;
&lt;p&gt;If you can successfully pull code using TortoiseGit but receive a &amp;ldquo;key incorrect&amp;rdquo; error when using the &lt;code&gt;git pull&lt;/code&gt; command in the command line, this is likely because TortoiseGit uses PuTTY&amp;rsquo;s SSH key while the command line uses OpenSSH&amp;rsquo;s SSH key&lt;/p&gt;
&lt;p&gt;The small turtle&amp;rsquo;s key configuration doesn&amp;rsquo;t read key file information from the system .ssh folder; instead, it configures the key file path separately when configuring the interface repository. A useful tip: configuring a key for the first repository being pulled allows other repositories to reuse this key file. After PuTTY loads the key, it doesn’t immediately exit but starts an agent service.&lt;/p&gt;
&lt;p&gt;By adjusting the global configuration and not using the system default &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; setting, Git Bash will use TortoisePlink for SSH operations. This configuration is suitable when using the PuTTY tool that comes with TortoiseGit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modify the file path of the executable as needed to match your Little Turtle installation directory. Due to the full path configuration, no need to add it to system environment variables.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Batch update of local Git repository and legacy permission issues</title>
        <link>https://ttf248.life/en/p/bulk-update-local-git-repository-and-legacy-permission-issues/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/bulk-update-local-git-repository-and-legacy-permission-issues/</guid>
        <description>&lt;p&gt;Projects within the team have dependencies; due to historical reasons and a lack of dependency management using &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;, developers must manually update repository code sequentially, or they may encounter various issues&lt;/p&gt;
&lt;p&gt;Referencing online resources, the structure is generally similar. Maintain a local repository directory: &lt;strong&gt;git_list.txt&lt;/strong&gt;. Write a script to traverse the directory and perform an update in one go; run the script before starting work each time.&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ 更新仓库 ===================&amp;quot;

# 检查 git_list.txt 是否存在
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。&amp;quot;
  exit 1
else
  echo &amp;quot;============ 检测到了 git 仓库清单文件 ====&amp;quot;
fi

# 逐行读取 git_list.txt 中的 URL，并执行拉取操作
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url 完成！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;目录 $url 不存在，跳过拉取。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;windows
&lt;/h2&gt;&lt;p&gt;create a new file: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem 进入脚本所在目录
cd /d &amp;quot;%~dp0&amp;quot;

rem 检查 git_list.txt 是否存在
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。
  exit /b 1
) else (
  echo ============ 检测到了 git 仓库清单文件 ====
)

rem 逐行读取 git_list.txt 中的 URL，并执行拉取操作
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i 完成！
    echo ========================================
  ) else (
    echo 目录 %%i 不存在，跳过拉取。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;historical-legacies&#34;&gt;Historical legacies
&lt;/h3&gt;&lt;p&gt;Dealing with a &lt;strong&gt;Fatal error&lt;/strong&gt; &amp;ldquo;&lt;strong&gt;Unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)&lt;/strong&gt;&amp;rdquo; after reinstalling the system&lt;/p&gt;
&lt;p&gt;Most online advice originates from &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding trusted directory&lt;/li&gt;
&lt;li&gt;Manually modify the configuration file &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; to add a trusted directory&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After addressing the issue, warehouse updates are now normal. However, each execution of __INLINE_CODE_0 console displays numerous warning messages indicating an owner error.&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-windows-on-a-desktop-computer&#34;&gt;Reinstalling Windows on a desktop computer
&lt;/h3&gt;&lt;p&gt;The development machine hadn&amp;rsquo;t been reinstalled in a long time, resulting in a system disk overrun with junk files. I had to reinstall the system. Now I’m encountering this permission issue again; old scripts won&amp;rsquo;t run and the permissions are incomplete.&lt;/p&gt;
&lt;p&gt;Using the new scheme, directly adding &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;，这样__INLINE_CODE_1__ will automatically trust all directories&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Not sure if it&amp;rsquo;s a user permissions issue or that people aren&amp;rsquo;t accustomed to the command, but I changed the folder owner. If you don’t have many directories, manually changing owners is also an option. However, this work computer has domain information added, so I’m not sure whether there’s an anomaly in the company’s deployed domain or a local system configuration issue. The user used for login couldn&amp;rsquo;t be found in the user list; ultimately, I resolved it using the command line.&lt;/p&gt;
&lt;p&gt;Administrator privileges, run __INLINE_CODE_0__脚本__INLINE_CODE_1__BOLD_4&lt;code&gt;gbk&lt;/code&gt;, a Chinese operating system to avoid garbled characters&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 获取当前用户的用户名
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# 设置 PowerShell 的字符编码为 UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 要更改所有者的根目录路径
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 替换为实际的目录路径

# 递归遍历目录并更改文件和文件夹的所有者
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # 检查是文件还是文件夹
    if ($_ -is [System.IO.DirectoryInfo]) {
        # 如果是文件夹，使用 icacls 更改所有者权限
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        # 如果是文件，使用 icacls 更改所有者权限
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;已更改文件 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, something unexpected happened. The Chinese output from the script was garbled. I tried setting the console character encoding and adjusting the script&amp;rsquo;s encoding, but it remained gibberish. My thinking must have been off. I then tried enabling the beta feature in Control Panel - Region - Language settings and globally enabled Unicode encoding. The script ran normally, but several development software programs stopped working properly. Later, reviewing my notes, I realized I needed to adjust the script file&amp;rsquo;s encoding to &lt;em&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;materials&#34;&gt;Materials
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>A Summary of Several Less Commonly Used Git Commands</title>
        <link>https://ttf248.life/en/p/git-less-common-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-less-common-commands-summary/</guid>
        <description>&lt;p&gt;Infrequently used, but very useful commands&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-the-system-changes-ownership-information-for-all-folders&#34;&gt;Reinstalling the system changes ownership information for all folders
&lt;/h3&gt;&lt;p&gt;The new version added security checks, prompting a warning that prevents further operation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;new-computer-saves-account-password-information&#34;&gt;New computer saves account password information
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the saved information needs updating, clear the old records first&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
