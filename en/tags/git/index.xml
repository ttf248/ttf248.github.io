<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/git/</link>
        <description>Recent content in Git on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 02:57:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Modifying commit messages in Git history</title>
        <link>https://ttf248.life/en/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;The script is used to batch modify the author information of Git history commits by rewriting commit records using git filter-branch&lt;/p&gt;
&lt;p&gt;The script you provided is intended to batch modify the author information in Git repository history, and the overall idea is correct. However, using arrays (like &lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;) in &lt;code&gt;--env-filter&lt;/code&gt; of &lt;code&gt;git filter-branch&lt;/code&gt; may cause compatibility issues because some shell environments (such as &lt;code&gt;/bin/sh&lt;/code&gt;) do not support array syntax.&lt;/p&gt;
&lt;p&gt;To improve compatibility, it is recommended that you replace the array with a space-separated string and iterate through each old email address using a &lt;code&gt;for&lt;/code&gt; loop. Here&amp;rsquo;s an example of the modified script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Precautions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is recommended to back up your repository before running this script to prevent unexpected situations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This operation will rewrite the Git history, modify the author information of commits, and may cause changes to commit hash values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have already pushed changes to the remote repository, you need to use a force push&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --force --tags origin &#39;refs/heads/*&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please use force push cautiously, especially in collaborative projects, to avoid impacting others&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Find all unique author email addresses in the warehouse statistics&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Disable HTTP repositories in Git</title>
        <link>https://ttf248.life/en/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;I&amp;rsquo;ve gotten used to updating software versions, but I don’t know from which version of &lt;code&gt;Git&lt;/code&gt; onwards it started prohibiting pulling code from &lt;code&gt;HTTP&lt;/code&gt; repositories&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;background-introduction&#34;&gt;Background introduction
&lt;/h2&gt;&lt;p&gt;Environment: Windows platform, I&amp;rsquo;ve always used TortoiseGit to operate git, and configured keys through TortoiseGit as well. I previously set up a script to batch update local repositories.&lt;/p&gt;
&lt;p&gt;Previous link: [Batch Update Local Git Repository]({relref &amp;ldquo;/post/2023/10-19-批量更新本地git仓库&amp;rdquo;})&lt;/p&gt;
&lt;p&gt;When I tried to deploy a code update at home today, the error mentioned earlier occurred, and the repository could not be updated normally. I thought &lt;code&gt;Git&lt;/code&gt; should provide a configuration option to allow me to continue updating the repository using the &lt;code&gt;http&lt;/code&gt; protocol, but I searched around and couldn&amp;rsquo;t find the corresponding setting.&lt;/p&gt;
&lt;p&gt;The simplest solution is of course to switch to the &lt;code&gt;ssh&lt;/code&gt; protocol to update the repository, as the company&amp;rsquo;s configuration will not provide the &lt;code&gt;https&lt;/code&gt; protocol for &lt;code&gt;gitlab&lt;/code&gt; in the short term&lt;/p&gt;
&lt;h2 id=&#34;outstanding-issues&#34;&gt;Outstanding issues
&lt;/h2&gt;&lt;p&gt;When writing the batch update local repository script earlier, I originally intended to pull the repository using &lt;code&gt;ssh&lt;/code&gt;, but didn&amp;rsquo;t investigate why it failed. It turned out that the &lt;code&gt;git&lt;/code&gt; configuration information configured in TortoiseGit wasn&amp;rsquo;t synchronized to the config file, which caused issues when executing through the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull #提示没有权限，无法正常更新仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Checking the key configuration with a command is also correct: &lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you can normally pull code using TortoiseGit, but are prompted with a key error when using the &lt;code&gt;git pull&lt;/code&gt; command in the command line, this may be because TortoiseGit uses PuTTY’s SSH key while the command line uses OpenSSH’s SSH key&lt;/p&gt;
&lt;p&gt;The small turtle&amp;rsquo;s key configuration does not read key file information from the system .ssh folder, but instead configures the key file path separately when configuring the interface repository. A useful tip: configuring a key for the first repository being pulled allows other repositories to reuse this key file. After PuTTY loads the key, it doesn’t immediately exit but starts an agent service.&lt;/p&gt;
&lt;p&gt;By adjusting the global configuration and not using the system&amp;rsquo;s default &lt;code&gt;ssh&lt;/code&gt; configuration, Git Bash will use TortoisePlink for SSH operations with this configuration. This setup is suitable for situations where you are using the PuTTY tool that comes with TortoiseGit.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Modify the execution file path as needed to correspond with your Little Turtle installation directory. Since a full path is configured, you do not need to add it to your system environment variables.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Batch update local Git repository and legacy permission issues</title>
        <link>https://ttf248.life/en/p/bulk-update-local-git-repository-and-legacy-permission-issues/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/bulk-update-local-git-repository-and-legacy-permission-issues/</guid>
        <description>&lt;p&gt;The projects within the team have dependencies on each other. Due to historical reasons, &lt;code&gt;submodules&lt;/code&gt; were not used to manage these dependencies. As a result, developers need to manually update the repository code sequentially during daily development; otherwise, they may encounter various strange issues.&lt;/p&gt;
&lt;p&gt;Referencing online resources, the structures are generally similar. Maintain a local repository directory manually: &lt;strong&gt;git_list.txt&lt;/strong&gt;. Write a script to traverse the directory and perform an update in one go. Before starting work, run the script first.&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ 更新仓库 ===================&amp;quot;

# 检查 git_list.txt 是否存在
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。&amp;quot;
  exit 1
else
  echo &amp;quot;============ 检测到了 git 仓库清单文件 ====&amp;quot;
fi

# 逐行读取 git_list.txt 中的 URL，并执行拉取操作
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url 完成！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;目录 $url 不存在，跳过拉取。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;windows
&lt;/h2&gt;&lt;p&gt;create a new file: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem 进入脚本所在目录
cd /d &amp;quot;%~dp0&amp;quot;

rem 检查 git_list.txt 是否存在
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。
  exit /b 1
) else (
  echo ============ 检测到了 git 仓库清单文件 ====
)

rem 逐行读取 git_list.txt 中的 URL，并执行拉取操作
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i 完成！
    echo ========================================
  ) else (
    echo 目录 %%i 不存在，跳过拉取。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;historical-legacies&#34;&gt;Historical legacies
&lt;/h3&gt;&lt;p&gt;Handling the &lt;code&gt;git&lt;/code&gt; folder permission files after reinstalling the system: &lt;strong&gt;Fatal error &amp;ldquo;unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most of the suggested practices online come from &lt;code&gt;stack overflow&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add trusted directory: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Manually modify the &lt;code&gt;.gitconfig&lt;/code&gt; configuration file and specify the directory to be trusted&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After handling it in the above manner, the warehouse update is normal, but there are a lot of warning messages in the console when executing &lt;code&gt;git pull&lt;/code&gt;, indicating an owner error&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-the-system-on-a-desktop-computer&#34;&gt;Reinstalling the system on a desktop computer
&lt;/h3&gt;&lt;p&gt;The development machine hasn&amp;rsquo;t been reinstalled in a long time, and the system disk is full of junk files. There was nothing I could do, so I took the time to reinstall the system. I encountered this permission issue again, and previous scripts won’t run because the permissions are incomplete.&lt;/p&gt;
&lt;p&gt;Use the new scheme, directly add &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;git&lt;/code&gt; will automatically trust all directories&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;I&amp;rsquo;m not sure if it’s a user permissions issue, or whether people aren&amp;rsquo;t used to the fact that the &lt;code&gt;windows&lt;/code&gt; platform also has commands similar to &lt;code&gt;chown&lt;/code&gt;. You can modify the folder owner, of course. If you don’t have many directories, manually modifying the owners is fine. However, this work computer has domain information added, and I’m not sure if it&amp;rsquo;s an anomaly with the company&amp;rsquo;s deployed domain or a local system setting issue. The user used for login couldn&amp;rsquo;t be found in the user list, so I ultimately handled it through the command line.&lt;/p&gt;
&lt;p&gt;Administrator privileges, execute the &lt;code&gt;powershell&lt;/code&gt; script &lt;code&gt;change_ower.ps1&lt;/code&gt;. Remember to adjust the script file encoding to &lt;code&gt;gbk&lt;/code&gt;, for Chinese operating systems, otherwise it will display garbled characters.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 获取当前用户的用户名
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# 设置 PowerShell 的字符编码为 UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 要更改所有者的根目录路径
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 替换为实际的目录路径

# 递归遍历目录并更改文件和文件夹的所有者
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # 检查是文件还是文件夹
    if ($_ -is [System.IO.DirectoryInfo]) {
        # 如果是文件夹，使用 icacls 更改所有者权限
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        # 如果是文件，使用 icacls 更改所有者权限
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;已更改文件 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As expected, something unexpected still happened. The Chinese information output by the script execution was garbled. I tried setting the console character encoding and adjusting the script encoding, but everything was still garbled. It felt like my brain wasn&amp;rsquo;t working properly. I then tried enabling the beta feature of Control Panel-Region-Language settings and globally enabled Unicode encoding. The script executed normally, but several development software stopped working correctly. Later, when reviewing the materials, I remembered to adjust the script file’s encoding to &lt;code&gt;gbk&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;materials&#34;&gt;Materials
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>A summary of several less commonly used Git commands</title>
        <link>https://ttf248.life/en/p/git-less-common-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-less-common-commands-summary/</guid>
        <description>&lt;p&gt;Not frequently used, but very useful &lt;code&gt;git&lt;/code&gt; commands&lt;/p&gt;
&lt;h3 id=&#34;reinstalling-the-system-resulted-in-changes-to-folder-ownership-information-in-windows&#34;&gt;Reinstalling the system resulted in changes to folder ownership information in Windows
&lt;/h3&gt;&lt;p&gt;The new version of &lt;code&gt;git&lt;/code&gt; added security checks, prompting an insecurity message, which prevents further operations&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;new-computer-saves-account-password-information&#34;&gt;New computer saves account password information
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the saved information needs to be updated, clear the old records first&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
