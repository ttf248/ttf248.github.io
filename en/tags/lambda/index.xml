<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Lambda on Uncle Xiang&#39;s Notebook</title>
        <link>https://blog.ttf248.life/en/tags/lambda/</link>
        <description>Recent content in Lambda on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/en/tags/lambda/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Lambda expression parameter lifetime in C&#43;&#43;</title>
        <link>https://blog.ttf248.life/en/p/cpp-lambda-parameter-lifetime/</link>
        <pubDate>Wed, 13 Nov 2024 19:23:02 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/en/p/cpp-lambda-parameter-lifetime/</guid>
        <description>&lt;p&gt;In C++, lambda expressions are convenient anonymous functions that can capture external variables and use them internally. This makes lambdas a flexible programming tool. However, the lifecycle of lambda expression parameters is an aspect requiring special attention, particularly when capturing and passing arguments.&lt;/p&gt;
&lt;h3 id=&#34;lambda-expression-parameter-lifecycle&#34;&gt;Lambda expression parameter lifecycle
&lt;/h3&gt;&lt;p&gt;The lifetime of lambda expression parameters generally mirrors that of other C++ functions. Parameters exist during the function call and end when the call completes. However, due to potential capture of external variables, parameter lifetimes can also be affected by the capturing method.&lt;/p&gt;
&lt;h3 id=&#34;the-relationship-between-capture-and-parameter-lifecycle&#34;&gt;The relationship between capture and parameter lifecycle
&lt;/h3&gt;&lt;h4 id=&#34;capturing-external-variables&#34;&gt;Capturing External Variables
&lt;/h4&gt;&lt;p&gt;C++ lambda expressions allow capturing external variables in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By value capture, the values of external variables are copied into the lambda, and the lifecycle of these copies is controlled by the lambda&amp;rsquo;s lifecycle&lt;/li&gt;
&lt;li&gt;Through capturing references, external variable references are preserved; lambda&amp;rsquo;s references point to the original external variables, and their lifecycle depends on the external variables&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda_by_value = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // 捕获x的副本
auto lambda_by_reference = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // 捕获x的引用

lambda_by_value();  // 打印10
lambda_by_reference();  // 打印10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The lifecycle of captured variables is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a variable is captured, its value is copied into the lambda; when the lambda&amp;rsquo;s lifecycle ends, this copy is destroyed&lt;/li&gt;
&lt;li&gt;Lambda functions hold references to external variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lambda-parameters&#34;&gt;Lambda Parameters
&lt;/h4&gt;&lt;p&gt;Lambda parameters are similar to regular function parameters, with a lifecycle limited to the lambda function body. They are created upon lambda invocation and terminate when the invocation is complete.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto lambda = [](int a, int b) {
    std::cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; std::endl;
};
lambda(5, 10);  // a和b在这里是lambda的参数
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;a&lt;/code&gt;BOLD_2&lt;code&gt;b&lt;/code&gt; are the parameters of the lambda expression; they are created when the lambda is called and destroyed after it finishes executing&lt;/p&gt;
&lt;h3 id=&#34;lifecycle-issues-when-capturing-external-variables&#34;&gt;Lifecycle issues when capturing external variables
&lt;/h3&gt;&lt;h4 id=&#34;whether-captured-variables-are-valid-outside-of-the-lambda&#34;&gt;Whether captured variables are valid outside of the lambda
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Even if external variables are destroyed after a lambda call, the lambda internally still holds a copy of those variables. Therefore, the internal copy can be used safely, even if the external variables no longer exist.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x 在lambda调用后修改
lambda();  // 打印10，捕获的是x的副本
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;If a lambda captures a reference to an external variable, access to that reference within the lambda depends on the lifetime of the external variable. If the external variable is destroyed before the lambda executes, it can lead to a dangling reference and undefined behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x 在lambda调用前修改
lambda();  // 打印20，捕获的是x的引用
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s crucial to ensure that captured external variables remain valid when the lambda is executed if the order of execution for lambdas is uncertain&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        
    </channel>
</rss>
