<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Lambda on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/lambda/</link>
        <description>Recent content in Lambda on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/lambda/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C&#43;&#43; Lambda Expression Parameter Lifetimes</title>
        <link>https://ttf248.life/en/p/cpp-lambda-parameter-lifetime/</link>
        <pubDate>Wed, 13 Nov 2024 19:23:02 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/cpp-lambda-parameter-lifetime/</guid>
        <description>&lt;p&gt;In C++, lambda expressions are a convenient way to create anonymous functions that can capture external variables and use them within their bodies. This makes lambdas a flexible programming tool. However, the lifetime of parameters in a lambda expression is an aspect that requires particular attention, especially when capturing and passing parameters.&lt;/p&gt;
&lt;h3 id=&#34;1-lambda-expression-parameter-lifetime&#34;&gt;1. Lambda Expression Parameter Lifetime
&lt;/h3&gt;&lt;p&gt;The lifetime of parameters in a lambda expression is typically the same as that of other C++ functions. Parameters exist while the function is called, and their lifetime ends when the function call terminates. However, due to the possibility of lambdas capturing external variables, the parameter&amp;rsquo;s lifetime is also affected by how itâ€™s captured.&lt;/p&gt;
&lt;h3 id=&#34;2-capturing-the-relationship-with-parameter-lifecycles&#34;&gt;2. Capturing the Relationship with Parameter Lifecycles
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;#### 2.1 Capturing External Variables

C++ lambda expressions allow external variables to be captured in two ways:

- **Capture by Value:** When capturing by value, the value of the external variable is copied into the lambda, and the lifetime of the copy is controlled by the lifetime of the lambda.
- **Capture by Reference:** When capturing by reference, a reference to the external variable is retained, and the lambda&#39;s reference points to the original external variable. The lifetime depends on the lifetime of the external variable.
``` ```cpp
int x = 10;
auto lambda_by_value = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // Captures a copy of x
auto lambda_by_reference = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // Captures a reference to x

lambda_by_value();  // Prints 10
lambda_by_reference();  // Prints 10

For the captured variables, their lifetimes are as follows:
- **Capture by value**: When the lambda is created, a copy of the external variable x is made and stored within the lambda. When the lambda&#39;s lifetime ends, this copied value is destroyed.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;21-capture-external-variables&#34;&gt;2.1 Capture External Variables
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;By Reference Capture:&lt;/strong&gt; The lambda holds a reference to the external variable, &lt;strong&gt;the external variable must be valid before it is used within the lambda, otherwise undefined behavior will occur.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-lambda-parameters&#34;&gt;2.2 Lambda Parameters
&lt;/h4&gt;&lt;p&gt;Lambda parameters are similar to regular function parameters; their lifetime is limited to the lambda function body. That is, lambda parameters are created when the lambda is called and their lifetime ends when the lambda call completes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto lambda = [](int a, int b) {
    std::cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; std::endl;
};
lambda(5, 10);  // a and b are the parameters of the lambda here
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are the parameters of the lambda expression, they are created when the lambda is called and destroyed after the lambda executes.&lt;/p&gt;
&lt;h3 id=&#34;3-lifecycle-issues-when-capturing-external-variables&#34;&gt;3. Lifecycle Issues When Capturing External Variables
&lt;/h3&gt;&lt;h4 id=&#34;31-whether-captured-variables-are-valid-outside-lambda&#34;&gt;3.1 Whether Captured Variables Are Valid Outside Lambda
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Value Capture&lt;/strong&gt;: Even if the external variable is destroyed after the lambda call, the lambda internally holds a copy of the external variable. Therefore, the copy within the lambda can be used safely, even if the external variable no longer exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x is modified after the lambda call
lambda();  // Prints 10, captures a copy of x
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reference Capture&lt;/strong&gt;: If the external variable is captured by reference, the lambda&amp;rsquo;s access to that reference depends on the lifetime of the external variable. If the external variable is destroyed before the lambda executes, it results in a dangling reference problem and undefined behavior. ```cpp
int x = 10;
auto lambda = &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&amp;amp;x&lt;/a&gt; { std::cout &amp;laquo; x &amp;laquo; std::endl; };
x = 20;  // x is modified before lambda execution
lambda();  // Prints 20, captures a reference to x&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
&amp;gt; If the execution order of the lambda is uncertain, it&#39;s crucial to ensure that any external variables captured within the lambda are still valid when the lambda executes.&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
