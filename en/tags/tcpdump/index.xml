<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tcpdump on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/tcpdump/</link>
        <description>Recent content in Tcpdump on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Thu, 19 Jun 2025 13:07:23 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/tcpdump/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Cross-machine computation time difference</title>
        <link>https://ttf248.life/en/p/cross-machine-computation-time-difference/</link>
        <pubDate>Thu, 19 Jun 2025 09:45:36 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/cross-machine-computation-time-difference/</guid>
        <description>&lt;p&gt;The existing communication protocol within the group uses &lt;code&gt;steady_clock&lt;/code&gt; as a timestamp to calculate the latency for each individual node. In a specific scenario, a message packet’s built-in timestamp was used, and this timestamp originated from another machine – &lt;strong&gt;resulting in&lt;/strong&gt; an anomalous latency calculation.&lt;/p&gt;
&lt;p&gt;As a side note: Gemini2.5 Pro shows promise of completely surpassing GPT-4.&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting
&lt;/h2&gt;&lt;p&gt;I didn&amp;rsquo;t pay attention to the issue with the base layer timestamp calculation at the beginning, so I just shut down all services and accessed locally to analyze the logs. I found that one service kept failing to stop, continuously sending business data, and there was nothing I could do. I used packet capture on the communication port to locate the machine&amp;rsquo;s position.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo tcpdump -nni any -B 4096 -s 0 -w tmp.pcap port 13100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The internal network situation was complex, and messages were being forwarded through proxies. First, I captured packets on port 13100 from the service&amp;rsquo;s local machine using &lt;code&gt;tcpdump&lt;/code&gt;. Then, I switched to capturing packets on the proxy server on port 13100.&lt;/p&gt;
&lt;p&gt;Analysis revealed that requests with excessive latency originated from the Shenzhen office. When troubleshooting the affected services, they were deployed in Shanghai.&lt;/p&gt;
&lt;h2 id=&#34;steady-clock-and-system-clock-differences&#34;&gt;Steady Clock and System Clock Differences
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::steady_clock&lt;/code&gt; and &lt;code&gt;std::system_clock&lt;/code&gt; are the two primary clocks in C++ for time handling. They have the following key differences:&lt;/p&gt;
&lt;h3 id=&#34;stdsystem_clock&#34;&gt;std::system_clock
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Represents &amp;ldquo;Wall Clock Time&amp;rdquo;&lt;/strong&gt;: It represents the actual, real-world time within the system. This time is consistent with the time displayed by the operating system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Can be Adjusted&lt;/strong&gt;: The time of this clock can be adjusted by a user or a system service (such as NTP Network Time Protocol) forward or backward. For example, if you manually modify the system time or the system synchronizes with a time server, the value of &lt;code&gt;system_clock&lt;/code&gt; will jump.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not Suitable for Measuring Time Intervals&lt;/strong&gt;: Because it can jump backward, using it to calculate the difference between two time points may result in a negative number or inaccurate results.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Primary Use&lt;/strong&gt;: To obtain the current calendar time, used in scenarios where it needs to correspond to real-world time (e.g., logging timestamp).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stdsteady_clock&#34;&gt;std::steady_clock
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Monotonic Clock:&lt;/strong&gt; This clock starts from a certain point and will only steadily move forward, never decreasing. Its rate may be fixed or not (although it&amp;rsquo;s usually fixed).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unadjustable:&lt;/strong&gt; &lt;code&gt;steady_clock&lt;/code&gt; is unaffected by system time changes. Even if the user modifies the system time, it will continue to advance steadily.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best for Measuring Time Intervals:&lt;/strong&gt; Due to its monotonicity, it’s the best choice for measuring code execution time, timeout waits, etc., ensuring accuracy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uncertain Startpoint:&lt;/strong&gt; Its starting point (epoch) is typically when the system starts, but this isn&amp;rsquo;t guaranteed by the standard.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;are-steady_clock-values-the-same-across-different-machines&#34;&gt;Are &lt;code&gt;steady_clock&lt;/code&gt; values the same across different machines?
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt;
The value of &lt;code&gt;steady_clock&lt;/code&gt; is &lt;strong&gt;not comparable&lt;/strong&gt; between different machines. Even between two different startup instances on the same machine, its value is not comparable.
This is because it was designed to precisely measure a time interval &lt;strong&gt;during a single program execution&lt;/strong&gt;, rather than representing an absolute point in time. Its epoch (start) is undefined and is almost always different across systems or different startup sessions.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Wall Clock&lt;/td&gt;
&lt;td&gt;Monotonic Clock&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;summary-1&#34;&gt;Summary
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Adjustable&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Yes, can jump forward or backward&lt;/td&gt;
&lt;td&gt;No, only moves forward&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;summary-2&#34;&gt;Summary
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Primary Use&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Get current calendar time&lt;/td&gt;
&lt;td&gt;Measure time intervals, timeouts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;summary-3&#34;&gt;Summary
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cross-machine/restart comparison&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Possible (after synchronization)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Not possible&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;summary-4&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;In simple terms:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To know “What time is it now?”, use &lt;code&gt;system_clock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To know “How long did this code run for?”, use &lt;code&gt;steady_clock&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
