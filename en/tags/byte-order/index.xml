<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Byte-Order on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/byte-order/</link>
        <description>Recent content in Byte-Order on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/byte-order/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Why do computers commonly use little-endian storage?</title>
        <link>https://ttf248.life/en/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;An Explanation of Byte Order&lt;/p&gt;
&lt;p&gt;Some design habits formed due to historical reasons in computer science are like the principle that the width of a horse&amp;rsquo;s rear end determines the width of a rocket engine – there’s no need to analyze their “advantages” or “disadvantages”; they’re simply historical conventions&lt;/p&gt;
&lt;h2 id=&#34;original-link&#34;&gt;Original link
&lt;/h2&gt;&lt;p&gt;Author: Arctic
Link:
Source: Zhihu
Copyright belongs to the author. Please contact the author for commercial reproduction; for non-commercial reproduction, please cite the source.&lt;/p&gt;
&lt;h2 id=&#34;full-text-reprint&#34;&gt;Full text reprint
&lt;/h2&gt;&lt;p&gt;The current endianness situation is a result of historical habits and commercialization, not inherently related to the technology itself. ARM can be configured as either big-endian or little-endian. The TCP/IP header still uses big-endian (network byte order). Many storage protocols/specifications in the storage field also save data in big-endian format.&lt;/p&gt;
&lt;p&gt;Therefore, regarding the three questions posed by the original poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incorrect&lt;/li&gt;
&lt;li&gt;Efficiency is not higher&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Arguing these three issues based on current technology is like drawing a target before shooting an arrow&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Regarding the choice between big-endian and little-endian, there were objective factors in computer history: Little-endian (host byte order) advantages: Implementing adders is easier. For an 8-bit * 4 adder, a single 8-bit adder suffices, with sequential addition from low to high bytes; the carry circuit is simple. Big-endian would require loading 32 bits at once, otherwise calculation is impossible. While the difference between loading 8 or 32 bits isn&amp;rsquo;t significant now, decades ago when memory was expensive, simplicity was key. Therefore, little-endian was chosen based on cost considerations. Big-endian (network byte order) advantages: Early devices had small caches; receiving high bytes allowed for quick determination of packet information – buffer size and address range (IP addresses are matched from front to back). Early network device caches operated on a byte basis, so retrieving the high byte was faster. Thus, big-endian was used in network devices, also based on cost considerations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Historically, byte order selection was primarily driven by application scenarios and cost (e.g., PPC/MIPS being better suited for network devices). Later, due to compatibility reasons, the endian configuration has been retained.&lt;/p&gt;
&lt;p&gt;These advantages no longer exist; they&amp;rsquo;re merely historical habits&lt;/p&gt;</description>
        </item>
        <item>
        <title>Host order, network order, observe directly through the debugger</title>
        <link>https://ttf248.life/en/p/host-order-network-order-debugger-observation/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/host-order-network-order-debugger-observation/</guid>
        <description>&lt;p&gt;In the history of computer development, there has been no unified standard for data storage&lt;/p&gt;
&lt;p&gt;There are two common rules for byte ordering. For example, little-endian refers to arranging the lower digits of a multi-digit number at smaller addresses and the higher digits at larger addresses; conversely, big-endian is when this arrangement is reversed. Byte order is a factor that must be considered in network applications because different machine types may use different standards, so they are all converted according to the network standard.&lt;/p&gt;
&lt;p&gt;Big-endian byte order aligns better with the left-to-right reading habit&lt;/p&gt;
&lt;h2 id=&#34;please-provide-the-chinese-text-you-want-me-to-translate-i-am-ready-when-you-are-just-paste-the-text-here&#34;&gt;Please provide the Chinese text you want me to translate. I am ready when you are! Just paste the text here.
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Processors such as x86, MOS Technology 6502, Z80, VAX, and PDP-11 are little-endian&lt;/li&gt;
&lt;li&gt;Processors such as Motorola 6800, Motorola 68000, and PowerPC 970 use big-endian order&lt;/li&gt;
&lt;li&gt;The byte order for ARM, PowerPC (excluding PowerPC 970), DEC Alpha, SPARC V9, MIPS, PA-RISC, and IA64 is configurable&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;network-preface&#34;&gt;Network Preface
&lt;/h2&gt;&lt;p&gt;Network transmission generally uses big-endian order, also known as network byte order or network order. Big-endian is defined as the network byte order in the IP protocol.
Socket definitions specify a set of conversion functions for transforming 16- and 32-bit integers between network byte order and host byte order&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); //把uint32_t类型从主机序转换到网络序
uint16_t htons(uint16_t hostshort); //把uint16_t类型从主机序转换到网络序
uint32_t ntohl(uint32_t netlong); //把uint32_t类型从网络序转换到主机序
uint16_t ntohs(uint16_t netshort); //把uint16_t类型从网络序转换到主机序
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;strong&gt;INLIN_ITALIC_1&lt;/strong&gt;__ is chosen as the network library, the built-in namespace contains cross-platform adapted function names&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;visual-studio-debugger&#34;&gt;Visual Studio debugger
&lt;/h2&gt;&lt;p&gt;In debug mode, select the Debug menu, then Window, and check Memory Window&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;INLIN_ITALIC_1&lt;/strong&gt;__, you can view data in memory directly within the debugger, as shown in the figure below&lt;/p&gt;
&lt;p&gt;Please provide the Chinese text you want me to translate. I am ready when you are.&lt;/p&gt;
&lt;h3 id=&#34;how-to-check-memory&#34;&gt;How to check memory
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Prints the variable name and jumps to its address&lt;/li&gt;
&lt;li&gt;If the variable is already a pointer, select it by double-clicking, drag it to the memory window, and display the contents at that address&lt;/li&gt;
&lt;li&gt;If the variable is not a pointer, add it to the calculation window, obtain its address, then manually copy it to the memory window&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;for-example&#34;&gt;For example
&lt;/h3&gt;&lt;p&gt;Received data, stored in &lt;strong&gt;INLINE_CODE_0__对象中，将网络序转成主机序，得到__INLINE_CODE_1&lt;/strong&gt; equal to 30, and the server allocates four bytes for transmitting this data&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // 网络序转成主机序
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Observe the content of &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; in the memory window&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-order-network-order-debugger-observation/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Observe the content of &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; in the memory window&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-order-network-order-debugger-observation/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
