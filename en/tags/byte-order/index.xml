<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Byte-Order on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/byte-order/</link>
        <description>Recent content in Byte-Order on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 20:54:02 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/byte-order/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Why do computers generally use little-endian storage?</title>
        <link>https://ttf248.life/en/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;Regarding byte order: A layman&amp;rsquo;s explanation &lt;a class=&#34;link&#34; href=&#34;https://example.com/post/2023/01-10-%e4%b8%bb%e6%9c%ba%e5%ba%8f%e3%80%81%e7%bd%91%e7%bb%9c%e5%ba%8f%ef%bc%8c%e9%80%9a%e8%bf%87%e8%b0%83%e8%af%95%e5%99%a8%ef%bc%8c%e7%9b%b4%e6%8e%a5%e8%a7%82%e5%af%9f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Host Order, Network Order, observed directly via debugger&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the field of computer science, certain design habits have formed due to historical reasons, just like the width of a hip dictates the width of a rocket&amp;rsquo;s thrusters – there’s no need to rigidly analyze their “advantages” and “disadvantages”; it’s simply a matter of historical convention.&lt;/p&gt;
&lt;h2 id=&#34;original-link&#34;&gt;Original Link
&lt;/h2&gt;&lt;p&gt;Author: Beiji (North Pole)
Link: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
Source: Zhihu
Copyright belongs to the author. For commercial reprints, please contact the author for permission. Non-commercial reprints must indicate the source.&lt;/p&gt;
&lt;h2 id=&#34;text-translation&#34;&gt;Text Translation
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s the translation of the provided text into English:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Mining&lt;/li&gt;
&lt;li&gt;Deep Learning&lt;/li&gt;
&lt;li&gt;Neural Network&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Nowadays, the current situation is a result of historical habits plus commercialization, and it has little to do with technology itself. ARM can be set up as big-endian or little-endian. The TCP/IP header still uses big-endian (network byte order). There are also many storage protocols/specifications that use big-endian to store data.&lt;/p&gt;
&lt;p&gt;Therefore, the three questions posed by the user seem incorrect in today&amp;rsquo;s view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do computers generally adopt little-endian storage? –&amp;gt; Incorrect.&lt;/li&gt;
&lt;li&gt;Why is storing the low byte in a little-endian manner more efficient than in a big-endian manner? –&amp;gt; Efficiency will not be higher.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Any argument about these three questions using current technology is like shooting an arrow first and then drawing the target.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;However, if we say that the choice of big-endian or little-endian did have some objective factors in the history of computer development: The advantage of host-byte order (little-endian) is that a 8-bit * 4 adder can be easily made, requiring only an 8-bit adder to sequentially add all bytes from low to high, and the carry circuit is very simple. If it were big-endian, it would require loading 32 bits once, which cannot perform calculations. Nowadays, the difference between loading 8 bits or 32 bits is not significant, but in the early days when storage prices were expensive, simplicity was always preferred, so the host-byte order chose little-endian based on cost considerations. The advantage of network byte order (big-endian) is that early devices had very small caches. Taking the high byte first could quickly determine the message information: packet length (need to prepare how much cache), address range (IP addresses are matched from front to back). Early network devices&amp;rsquo; caches were at the byte level, and taking the high byte was indeed a little faster. Therefore, network devices used big-endian based on cost considerations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So, the choice of byte order has historically been more influenced by application scenarios and costs (such as PPC/MIPS being more suitable for network devices), and the configuration of big-endness and little-endness has been carried over to this day due to compatibility reasons. In today&amp;rsquo;s view, these advantages no longer exist, they are merely historical habits.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Host byte, network byte, observe directly through debugger</title>
        <link>https://ttf248.life/en/p/host-network-byte-order-debugger/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/host-network-byte-order-debugger/</guid>
        <description>&lt;p&gt;Throughout the history of computer development, there has been no unified standard for data storage. There are two commonly used rules for byte arrangement. For example, if the low-order bits of a multi-digit number are placed at smaller addresses and the high-order bits are placed at larger addresses, it is referred to as little-endian; conversely, it is called big-endian. In network applications, byte order is a factor that must be considered because different types of machines may adopt different standards, so they are all converted according to the network standard.
According to reading habits, big-endian byte order is more consistent with the left-to-right reading order.&lt;/p&gt;
&lt;h2 id=&#34;processor-architecturehttpszhwikipediaorgwikie5ad97e88a82e5ba8f&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Processor Architecture&lt;/a&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Processors such as x86, MOS Technology 6502, Z80, VAX, and PDP-11 use little-endian byte order.&lt;/li&gt;
&lt;li&gt;Processors like Motorola 6800, Motorola 68000, PowerPC 970 use big-endian byte order.&lt;/li&gt;
&lt;li&gt;The byte order of processors such as ARM, PowerPC (excluding PowerPC 970), DEC Alpha, SPARC V9, MIPS, PA-RISC and IA64 is configurable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;network-byte-order&#34;&gt;Network Byte Order
&lt;/h2&gt;&lt;p&gt;Network transmission generally uses big-endian byte order, also known as network byte order or network order. The IP protocol defines big-endian as the network byte order.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Berkeley&lt;/code&gt; sockets API defined a set of conversion functions to convert 16 and 32-bit integers between network byte order and host byte order.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); // Converts a uint32_t from host byte order to network byte order
uint16_t htons(uint16_t hostshort); // Converts a uint16_t from host byte order to network byte order
uint32_t ntohl(uint32_t netlong); // Converts a uint32_t from network byte order to host byte order
uint16_t ntohs(uint16_t netshort); // Converts a uint16_t from network byte order to host byte order
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If using &lt;code&gt;asio&lt;/code&gt; as the networking library, its internal namespace provides cross-platform adaptation functions with different names:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;visual-studio-debugger&#34;&gt;Visual Studio Debugger
&lt;/h2&gt;&lt;p&gt;In debugging mode, select the Debug menu, Window, and checkmark the Memory window. Within &lt;code&gt;Visual Studio&lt;/code&gt;, you can directly view data in memory using the debugger, as shown in the following image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/Snipaste_2023-01-10_14-44-00.png&#34;
	width=&#34;535&#34;
	height=&#34;147&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Debugger Menu&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;363&#34;
		data-flex-basis=&#34;873px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;ways-to-view-memory&#34;&gt;Ways to View Memory
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The window directly outputs &amp;amp;variable name and jumps to the corresponding variable address.&lt;/li&gt;
&lt;li&gt;If the variable is originally a pointer, double-click on the variable to select it and drag it to the memory window to display the content at the corresponding address.&lt;/li&gt;
&lt;li&gt;If the variable is not a pointer, add it to the calculation window to obtain its address, then manually copy it to the memory window.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lets-illustrate-with-an-example&#34;&gt;Let&amp;rsquo;s illustrate with an example
&lt;/h3&gt;&lt;p&gt;Receive a data segment, stored in the &lt;code&gt;buffer&lt;/code&gt; object, convert network byte order to host byte order, resulting in &lt;code&gt;body_length&lt;/code&gt; being 30. The server allocates four bytes for transmitting this data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // Network byte order to host byte order
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Big-endian byte order&lt;/strong&gt;: When observing the &lt;code&gt;buffer_&lt;/code&gt; content in memory,
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Little-endian byte order&lt;/strong&gt;: When observing the content of &lt;code&gt;body_length_&lt;/code&gt; in memory,
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
