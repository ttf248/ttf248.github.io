<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C# on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/c/</link>
        <description>Recent content in C# on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/c/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>UI Thread Issues and Solutions in WPF</title>
        <link>https://ttf248.life/en/p/wpf-ui-thread-and-freezing-issues-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/wpf-ui-thread-and-freezing-issues-solutions/</guid>
        <description>&lt;p&gt;Correctly handling the user interface (UI) thread is crucial for ensuring application smoothness and responsiveness, especially when developing desktop applications and building rich client applications using the Windows Presentation Foundation (WPF) framework. The UI thread, also known as the main thread, is the core thread responsible for processing window and control events, layout calculations, and rendering the interface. All interactions with UI elements should be performed on the UI thread; this is a fundamental principle followed by WPF and most other GUI frameworks.&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-ui-thread&#34;&gt;What is the UI thread?
&lt;/h2&gt;&lt;p&gt;The UI thread is created and initialized by the operating system when a WPF application starts, and it&amp;rsquo;s the only thread that can directly access and modify the state of UI components. All user interactions—such as button clicks, text box input, and window resizing—are handled within this thread’s context. Furthermore, WPF’s dependency property system, data binding mechanism, and layout logic all execute synchronously on the UI thread.&lt;/p&gt;
&lt;h2 id=&#34;lag-and-its-causes&#34;&gt;Lag and its causes
&lt;/h2&gt;&lt;p&gt;When the UI thread is occupied or blocked for an extended period—for example, due to lengthy calculations, large data loads, database queries, or other I/O-intensive tasks—it can fail to respond promptly to user interactions, resulting in a frozen interface (freeze), commonly known as &amp;ldquo;lag.&amp;rdquo; This causes noticeable application latency and sluggishness; severe cases may trigger an “Application Not Responding” (ANR) warning&lt;/p&gt;
&lt;h2 id=&#34;two-basic-rules-of-the-ui-thread&#34;&gt;Two basic rules of the UI thread
&lt;/h2&gt;&lt;p&gt;To avoid these situations, WPF developers should follow two key rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Any operation that may cause the UI thread to hang should be moved to a background thread as much as possible to ensure the UI thread can promptly respond to user input and render screen changes&lt;/li&gt;
&lt;li&gt;Due to WPF&amp;rsquo;s security mechanism, only the UI thread is authorized to modify UI elements. Attempting to directly change the UI state from another thread will result in an exception. Therefore, even after background threads complete calculations or data preparation, results must be displayed on the UI through appropriate cross-thread communication mechanisms.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solution-asynchronous-programming-and-thread-safe-updates&#34;&gt;Solution: Asynchronous Programming and Thread-Safe Updates
&lt;/h2&gt;&lt;p&gt;WPF offers various asynchronous programming models and tools to help developers achieve this while maintaining a smooth UI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The WPF Dispatcher class allows you to schedule work items for execution in the UI thread&amp;rsquo;s task queue. You can use the &lt;code&gt;Invoke&lt;/code&gt; method to safely update the UI from background threads.&lt;/li&gt;
&lt;li&gt;By leveraging C#&amp;rsquo;s asynchronous features, you can write asynchronous methods and use the &lt;code&gt;__INLINE_CODE_0__&lt;/code&gt; keyword to wait for background tasks to complete, automatically returning to the UI thread to execute subsequent UI update code upon completion&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case study
&lt;/h2&gt;&lt;h3 id=&#34;update-ui-using-the-__inline_code_0__-method&#34;&gt;Update UI using the &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; method
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // 假设这是一个耗时操作
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // 这里是模拟一个耗时计算的方法
        
        // 当耗时操作完成后，在UI线程上更新UI
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 模拟耗时操作
    Thread.Sleep(5000);
    return &amp;quot;已完成&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;use-__inline_code_0__bold_2taskrun&#34;&gt;Use __INLINE_CODE_0__BOLD_2&lt;code&gt;Task.Run&lt;/code&gt;
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // 防止用户重复点击

    try
    {
        // 开启后台任务
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // 在后台任务完成后，自动切换回UI线程更新UI
        LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;发生错误: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // 重新启用按钮
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
