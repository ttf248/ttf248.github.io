<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Protobuf on Uncle Xiang&#39;s Notebook</title>
        <link>https://blog.ttf248.life/en/tags/protobuf/</link>
        <description>Recent content in Protobuf on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/en/tags/protobuf/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Protobuf Zero-Value Trap: When Defaults Become Silent Killers of Business Logic</title>
        <link>https://blog.ttf248.life/en/p/protobuf-zero-value-traps/</link>
        <pubDate>Thu, 20 Feb 2025 15:26:51 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/en/p/protobuf-zero-value-traps/</guid>
        <description>&lt;p&gt;US stocks have three trading periods: pre-market, intra-market, and post-market. The data push logic (to minimize bandwidth usage) sends the full dataset once initially, then pushes incremental updates for all subsequent fields.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why not use the optimal solution? It involves different project teams, some of which have been live for many years. We are newly integrated, so we can only try to maintain compatibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;a-series-of-questions&#34;&gt;A series of questions
&lt;/h2&gt;&lt;p&gt;Looking at the abstract alone, there might not seem to be a problem. However, bringing this system architecture into the problem-solving process has triggered a series of issues. Just as one issue was resolved, another arose, stemming from the previous ones.&lt;/p&gt;
&lt;h3 id=&#34;unable-to-identify-trading-period&#34;&gt;Unable to identify trading period
&lt;/h3&gt;&lt;p&gt;Whether the in-memory stage is defined as the default value or the actual business value&lt;/p&gt;
&lt;p&gt;A simple understanding: Receiving a 0 each time makes it impossible to determine whether it&amp;rsquo;s a new quote setting or the default value of Protobuf&lt;/p&gt;
&lt;h3 id=&#34;introduce-optional&#34;&gt;Introduce optional
&lt;/h3&gt;&lt;p&gt;Since protobuf release 3.15, proto3 supports using the optional keyword (just as in proto2) to give a scalar field presence information&lt;/p&gt;
&lt;p&gt;The internal communication protocol is based on &lt;code&gt;protobuf&lt;/code&gt;BOLD_3&lt;code&gt;optional&lt;/code&gt;BOLD_4&lt;code&gt;protobuf&lt;/code&gt;, and the project&amp;rsquo;s underlying implementation uses a static library, which requires upgrading the entire compilation chain. This cost is very high.&lt;/p&gt;
&lt;h3 id=&#34;gcc-version-issue&#34;&gt;GCC version issue
&lt;/h3&gt;&lt;p&gt;After much deliberation, we devised a plan to release two different versions at the underlying level, aiming to carefully control new features&lt;/p&gt;
&lt;p&gt;Commonly used server types within the group: CentOS 7, CentOS 8. The default version of CentOS 7 is above 7.4, so CentOS 7 is not supported.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bug 82461 - [7 Regression] Temporary required for brace-initializing (non-literal-type) member variable&lt;/a&gt;ã€‚&lt;/p&gt;
&lt;p&gt;After some troubleshooting, moving the related services and compilation server to CentOS 8 resolved the issue&lt;/p&gt;
&lt;h2 id=&#34;reasonable-enumeration&#34;&gt;Reasonable Enumeration
&lt;/h2&gt;&lt;p&gt;Looking back at the entire issue, there&amp;rsquo;s a simpler and more efficient solution: adjust the enumeration definition to start numbering from 1 instead of 0. This effectively distinguishes default values from business values, avoiding the aforementioned series of problems.&lt;/p&gt;
&lt;h3 id=&#34;why-is-starting-from-1-more-reasonable&#34;&gt;Why is starting from 1 more reasonable?
&lt;/h3&gt;&lt;p&gt;In C++, the default value of an enumeration type is fixed at 0. If we define a meaningful business value as 0 (e.g., &amp;ldquo;in-plate&amp;rdquo;), the downstream system cannot determine whether the received 0 represents a business value or an unset default value during incremental push. However, if enumerations are defined starting from 1, 0 can be reserved for a meaningless default value or an &amp;ldquo;unknown&amp;rdquo; state, resolving the issue.&lt;/p&gt;
&lt;p&gt;Suggested practices:&lt;/p&gt;
&lt;p&gt;When designing Protobuf enums, always define 0 as a meaningless default value
Assign actual business values starting from 1, ensuring distinction from the default value of 0&lt;/p&gt;
&lt;p&gt;This small adjustment not only resolved the trading period identification issue but also provided a valuable lesson for future protocol design&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
