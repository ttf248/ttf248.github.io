<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Chatgpt on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/chatgpt/</link>
        <description>Recent content in Chatgpt on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/chatgpt/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AI Programming and Task Decomposition</title>
        <link>https://ttf248.life/en/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;Two years ago, I added a copy function to the site, which took me half a day of tinkering. Ultimately, the rendering effect wasn&amp;rsquo;t quite satisfactory, and as a somewhat mediocre frontend developer, I didn‚Äôt plan on improving it ‚Äì if it worked, it was good enough. This year, I used &lt;code&gt;AI&lt;/code&gt; to develop a mini-program, which has made me more familiar with frontend development. I refactored it (the &lt;code&gt;AI&lt;/code&gt; redesigned it).&lt;/p&gt;
&lt;p&gt;Insight: Breaking down tasks really helps; many small tasks are quite natural for the &lt;code&gt;AI&lt;/code&gt; to develop. For the closed mini-program, 75% of the code was provided by &lt;code&gt;AI&lt;/code&gt;, and multiple tasks were broken down and delivered, with manual assembly of project code.&lt;/p&gt;
&lt;h2 id=&#34;previous-context&#34;&gt;Previous Context
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.github.io/post/2022/001/%E4%BB%A5%E4%B8%BA%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E6%83%85%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%A4%8D%E5%88%B6%E6%8C%89%E9%92%AE/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Making simple things easier: Adding a code copy button&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;content&#34;&gt;Content
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;promot&lt;/strong&gt;: Design CSS and JavaScript code to locate webpage elements with the class &amp;ldquo;highlight&amp;rdquo;, and within that element&amp;rsquo;s container, add a copy button to enable copying the content. The first draft of the code was immediately problematic; generate a revised version that is essentially usable, but the copied content was incorrect, containing redundant text; further guidance led to optimizing the core color design, including which effects to incorporate.&lt;/p&gt;
&lt;p&gt;Having learned your specific requirements for button size and color, we can redesign the button styles to accommodate these demands.  Below is an adjusted CSS style sheet incorporating your provided color scheme and optimized for the button&amp;rsquo;s dimensions:&lt;/p&gt;
&lt;h2 id=&#34;content-1&#34;&gt;Content
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* Adjust position */
  right: 2px;
  padding: 3px 6px; /* Reduce size */
  font-size: 12px; /* Decrease font size */
  background-color: #8FD1E1; /* Button background color */
  color: #272822; /* Text color */
  border: 1px solid #272822; /* Border color */
  border-radius: 3px; /* Rounded corners */
  cursor: pointer;
  opacity: 0.7; /* Default semi-transparent */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* Smooth transition effect */
}

.copy-btn:hover {
  opacity: 1; /* Unhide on hover */
  background-color: #A3D4E5; /* Background color on hover */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;content-2&#34;&gt;Content
&lt;/h2&gt;&lt;p&gt;In this style, I‚Äôve reduced the size and font size of the buttons to make them more refined. Additionally, the buttons have a semi-transparent default state that becomes opaque and has a slightly brighter background color when you hover over them, providing visual feedback. This design meets your color requirements while maintaining modern and user-friendly characteristics.&lt;/p&gt;
&lt;p&gt;I‚Äôve also provided a simpler &lt;code&gt;JavaScript&lt;/code&gt; implementation:&lt;/p&gt;
&lt;h2 id=&#34;content-3&#34;&gt;Content
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // Find all elements with the class &#39;highlight&#39;
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // Create a copy button
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;Copy&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // Append the button to each .highlight element
    highlight.appendChild(copyBtn);
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;content-4&#34;&gt;Content
&lt;/h2&gt;&lt;p&gt;// Add the button to each element with the class &amp;ldquo;highlight&amp;rdquo;
highlight.appendChild(copyBtn);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Add click event listener
copyBtn.addEventListener(&#39;click&#39;, function() {
  // Assuming the first &amp;lt;code&amp;gt; element under &amp;quot;.highlight&amp;quot; contains the code to copy
  const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## Content

navigator.clipboard.writeText(code).then(() =&amp;gt; {
    // Display copy success message
    copyBtn.textContent = &#39;Copied!&#39;;
    setTimeout(() =&amp;gt; {
      copyBtn.textContent = &#39;Copy&#39;;
    }, 2000);
  }).catch(err =&amp;gt; {
    console.error(&#39;Copy failed: &#39;, err);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue
&lt;/h2&gt;&lt;p&gt;While I had hoped to see a copy button added to the top-right corner of the code area, due to my lack of familiarity with frontend development, I was unable to accurately describe the functionality based on keywords and spent several rounds iterating with &lt;code&gt;AI&lt;/code&gt;. It remains to be seen what impact &lt;code&gt;AI&lt;/code&gt; will have on software development over time.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AI-assisted programming, the evolution of productivity</title>
        <link>https://ttf248.life/en/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;‚ÄúGitHub Copilot‚Äù was released less than two years ago, and ‚ÄúChatGPT‚Äù has appeared. I don‚Äôt fully understand the underlying principles; I&amp;rsquo;ve been using them for a while. The two tools‚Äô levels of assistance are completely different, but they have both achieved a significant increase in productivity.&lt;/p&gt;
&lt;p&gt;For things that are too complex, AI still can‚Äôt do it ‚Äì after all, they lack logic, or they rely on patterns or fixed frameworks; the training data is sufficient, and AI‚Äôs effect is nine out of ten.&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;GitHub Copilot
&lt;/h2&gt;&lt;p&gt;When publishing, I looked at the official introduction‚Äôs ‚Äúdemo‚Äù and found it wasn&amp;rsquo;t very smart. After trying it out, it wasn‚Äôt great, so I gave up on it.&lt;/p&gt;
&lt;p&gt;Before 2022, when I had some free time, I switched to the new version to try it out, and the effect was already quite good. The only issue was that the speed in China was a bit slow, which was probably due to network reasons. For languages like &lt;code&gt;Python&lt;/code&gt;, the code generated based on comments was pretty good, and much faster than researching and writing code myself.&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Github Copilot&lt;/code&gt; still focused on developers, i.e., from a development perspective when designing the product. You need to understand how programming works and guide AI assistance through comments gradually. &lt;code&gt;ChatGPT&lt;/code&gt; has moved to the next level, &lt;strong&gt;allowing non-experts to quickly get started&lt;/strong&gt;. With its conversational chat interface, you can simply pose questions, describe requirements, and ask for clarification if you don&amp;rsquo;t understand something. Here‚Äôs a translation of the provided text into English:&lt;/p&gt;
&lt;p&gt;‚ÄúLet&amp;rsquo;s take an example to understand the concept of tokenization, but don&amp;rsquo;t know how to code it. We want to calculate the similarity between two strings:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python tokenize and calculate the similarity between &amp;quot;Weitian Yuntong&amp;quot;, &amp;quot;LOGORY&amp;quot; and &amp;quot;Hefei Weitian Yuntong Information Technology Co., Ltd.&amp;quot;;
Before comparison, standardize the strings by converting English to lowercase;
If the second string contains the first string&#39;s starting character, truncate the second string to a length equal to the first string‚Äôs length.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hello, this is Bing. üòä&lt;/p&gt;
&lt;p&gt;According to online information 123, Python tokenization can be implemented using the jieba library. The jieba library supports three tokenization modes: precise mode, full-potential mode, and search engine mode. You can choose an appropriate mode based on your needs.‚Äù To compare the similarity of two strings, you first need to tokenize them and then calculate metrics such as word vectors or edit distance. You can use libraries like NumPy or SciPy for performing mathematical operations.&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-1&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;To standardize string processing, converting to lowercase in English can be achieved using Python&amp;rsquo;s built-in &lt;code&gt;lower()&lt;/code&gt; function.
To extract the second string, you can use Python‚Äôs slicing operator [ ] to achieve this.
Below is a possible code example:&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-2&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jieba
import numpy as np
from scipy.spatial.distance import cosine

# Define two strings
str1 = &amp;quot;Á∂≠Â§©ÈÅãÈÄö LOGORY&amp;quot;
str2 = &amp;quot;ÂêàËÇ•Á∂≠Â§©ÈÅãÈÄö‰ø°ÊÅØÁßëÊäÄËÇ°‰ªΩÊúâÈôêÂÖ¨Âè∏&amp;quot;

# Normalize strings, convert English to lowercase
str1 = str1.lower()
str2 = str2.lower()

# Find the position of the first character of str1 in str2
index = str2.find(str1[0])

# If found, slice str2
if index != -1:
    str2 = str2[index:index+len(str1)]

# Use jieba library to tokenize strings
words1 = list(jieba.cut(str1))
words2 = list(jieba.cut(str2))

# Calculate word vectors (using frequency as weights)
vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chatgpt-3&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;h1 id=&#34;calculate-the-word-vectors-of-two-strings-with-frequency-as-weight&#34;&gt;Calculate the word vectors of two strings (with frequency as weight)
&lt;/h1&gt;&lt;p&gt;vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))&lt;/p&gt;
&lt;p&gt;for i, word in enumerate(words1):
vector1[i] += 1  # Count the number of times each word appears in the first string
if word in words2:
vector2[i] += 1  # Count the number of times each word appears in the second string&lt;/p&gt;
&lt;h1 id=&#34;calculate-the-similarity-between-the-two-strings-using-cosine-distance-as-an-index&#34;&gt;Calculate the similarity between the two strings (using cosine distance as an index)
&lt;/h1&gt;&lt;p&gt;similarity = 1 - cosine(vector1, vector2)&lt;/p&gt;
&lt;p&gt;print(&amp;ldquo;The similarity between the two strings is:&amp;rdquo;, similarity)&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-4&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Going Further ‚Äì Consult the Execution Results. Congratulations, you‚Äôve identified an issue! The result was hallucinated; it didn&amp;rsquo;t actually run the code, but will provide a good-looking response.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example
&lt;/h3&gt;&lt;p&gt;Question: SQL statement to retrieve records from the product code table where the product code is within the range of 80000-89999.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Hello, this is Bing. üòä

Based on search result 12, you can use the SQL BETWEEN operator to select values within a given range. The BETWEEN operator includes both the start and end values.

You need to first specify the table name and column name that you want to query, and then use the BETWEEN operator and the range values in the WHERE clause.

For example, if you want to retrieve records from the product code table where the product code is between 80000 and 89999, you can use the following statement:

SELECT * FROM product_code
WHERE code BETWEEN 80000 AND 89999;
Here, * represents selecting all columns 3.
``` If you only want to select specific columns, such as product name and price, you can separate them with commas like this:

SELECT name, price FROM product_code
WHERE code BETWEEN 80000 AND 89999;

Hopefully, this helps.

Please note that product codes are strings, and your code is incorrect.

### Example

```markdown
Sorry, I didn‚Äôt realize the product code was a string. If that‚Äôs the case, you need to add single quotes around both ends of the range values, as follows:

SELECT * FROM product_code
WHERE code BETWEEN &#39;80000&#39; AND &#39;89999&#39;;
Please forgive my mistake. üôè
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congratulations, it recognizes errors!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
