<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Submodule on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/submodule/</link>
        <description>Recent content in Submodule on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/submodule/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git Submodule Merge History Lost</title>
        <link>https://ttf248.life/en/p/git-submodule-merge-history-lost/</link>
        <pubDate>Mon, 02 Jun 2025 16:44:58 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/git-submodule-merge-history-lost/</guid>
        <description>&lt;p&gt;There’s a Git repository locally where submodules were in temporary branches during the initial pull. I made commits on that temporary branch, and then switched back to the &lt;code&gt;main&lt;/code&gt; branch. However, those committed changes seem to be lost and cannot be found within the &lt;code&gt;main&lt;/code&gt; branch. I also can&amp;rsquo;t find any record of that temporary branch.&lt;/p&gt;
&lt;h2 id=&#34;solutions&#34;&gt;Solutions
&lt;/h2&gt;&lt;p&gt;When you’ve committed to a temporary branch within a Git submodule and then switch back to the &lt;code&gt;main&lt;/code&gt; branch, you lose those commits. You can resolve this situation by following these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Verify Commit History&lt;/strong&gt;: Navigate into the submodule directory and use &lt;code&gt;reflog&lt;/code&gt; to find the lost commits.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a New Branch to Preserve Commits&lt;/strong&gt;: Create a new branch based on the lost commits.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Merge or Cherry-Pick Commits to Main&lt;/strong&gt;: Integrate the code into the main branch.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s a breakdown of the specific steps:&lt;/p&gt;
&lt;h2 id=&#34;solutions-1&#34;&gt;Solutions
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Enter the submodule directory
cd path/to/your/submodule

# View the reflog record of all HEAD changes (including commits not associated with branches)
git reflog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;solutions-2&#34;&gt;Solutions
&lt;/h2&gt;&lt;p&gt;PS F:\dev\notebook\scripts\hugo-content-suite&amp;gt; git reflog
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD): checkout: moving from c8d070651310e90d283cb64d98da088c5fe05e73 to main
c8d0706 HEAD@{1}: commit: feat: Add Markdown tag usage documentation, providing detailed syntax examples and effect demonstrations
48250f5 HEAD@{2}: commit: feat: Remove article translation preview functionality, simplifying the translation process
b8280b6 HEAD@{3}: commit: feat: Add absolute path retrieval function, supporting converting relative paths to absolute paths
92c354b HEAD@{4}: commit: fix: Fix article scanning logic to ensure scanning with absolute paths&lt;/p&gt;
&lt;h2 id=&#34;solutions-3&#34;&gt;Solutions
&lt;/h2&gt;&lt;p&gt;92c354b HEAD@{4}: commit: fix: Fix article scanning logic to ensure absolute path scanning
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{5}: checkout: Moving from main to de05175d4ec0828e3ae95d726b09dfff18f67a23
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{6}: clone: from &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite.git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;solutions-4&#34;&gt;Solutions
&lt;/h2&gt;&lt;h1 id=&#34;create-a-new-branch-based-on-a-lost-commit-eg-using-commit-456def&#34;&gt;Create a new branch based on a lost commit (e.g., using commit 456def)
&lt;/h1&gt;&lt;p&gt;git checkout -b saved-work 456def&lt;/p&gt;
&lt;h1 id=&#34;switch-back-to-the-main-branch&#34;&gt;Switch back to the main branch
&lt;/h1&gt;&lt;p&gt;git checkout main&lt;/p&gt;
&lt;h1 id=&#34;merge-the-saved-work-into-main-or-use-cherry-pick-to-select-specific-commits&#34;&gt;Merge the saved work into main (or use cherry-pick to select specific commits)
&lt;/h1&gt;&lt;p&gt;git merge saved-work&lt;/p&gt;
&lt;h1 id=&#34;or&#34;&gt;or
&lt;/h1&gt;&lt;p&gt;git cherry-pick 456def&lt;/p&gt;
&lt;h1 id=&#34;return-to-the-root-project-directory-and-commit-submodule-updates&#34;&gt;Return to the root project directory and commit submodule updates
&lt;/h1&gt;&lt;p&gt;cd ..
git add path/to/your/submodule
git commit -m &amp;ldquo;Update submodule to include new changes&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;key-operations-guide&#34;&gt;Key Operations Guide
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git reflog&lt;/strong&gt;: Displays the entire history of HEAD, including commits not associated with any branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git checkout -b&lt;/strong&gt;: Creates a new branch from any commit and saves your work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git merge/cherry-pick&lt;/strong&gt;: Integrates saved commits into the target branch.
If no record is found in reflog, you may need to try using &lt;code&gt;git fsck --lost-found&lt;/code&gt; to find orphaned commits, but this situation is rare.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
