<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Code Area on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/code-area/</link>
        <description>Recent content in Code Area on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 02:57:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/code-area/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AI programming and task decomposition</title>
        <link>https://ttf248.life/en/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;Two years ago, I added a copy function for the code area on the site. It took almost half a day of effort, and the final rendering effect was not ideal. As a novice front-end developer, I didn&amp;rsquo;t bother to improve it; as long as it worked, that was fine. This year, using &lt;code&gt;AI&lt;/code&gt; to develop a mini program, I’m also more familiar with front-end development, so I rebuilt (redesigned by AI) it.&lt;/p&gt;
&lt;p&gt;Understanding the Dao: The task has been broken down into many small tasks, and AI development is still smooth. For a previously defunct mini-program, 75% of the code was provided by AI, and it was delivered through multiple tasks, with manual assembly of project code.&lt;/p&gt;
&lt;h2 id=&#34;previous-text&#34;&gt;Previous text
&lt;/h2&gt;&lt;p&gt;Adding a code copy button to what seems like a simple thing&lt;/p&gt;
&lt;h2 id=&#34;main-body&#34;&gt;Main body
&lt;/h2&gt;&lt;p&gt;Design CSS and JavaScript code to locate webpage elements with the class &amp;ldquo;highlight&amp;rdquo;. Within the container of these elements, add a copy button to implement the functionality of copying the code.&lt;/p&gt;
&lt;p&gt;The first draft of the code looks problematic at a glance. A second draft was generated, which is basically usable, but contains incorrect copied content and redundant text. Further optimization is needed, with manual specification of core color design and included effects.&lt;/p&gt;
&lt;p&gt;We understand you have specific requirements for the button&amp;rsquo;s size and color. We can redesign the button style to accommodate these requirements. Here is an adjusted CSS style, which includes the color scheme you provided and optimizes the button’s dimensions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* 调整位置 */
  right: 2px;
  padding: 3px 6px; /* 缩小尺寸 */
  font-size: 12px; /* 减小字体大小 */
  background-color: #8FD1E1; /* 按钮背景色 */
  color: #272822; /* 文字颜色 */
  border: 1px solid #272822; /* 边框颜色 */
  border-radius: 3px; /* 圆角 */
  cursor: pointer;
  opacity: 0.7; /* 默认半透明 */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* 平滑过渡效果 */
}

.copy-btn:hover {
  opacity: 1; /* 鼠标悬停时不透明 */
  background-color: #A3D4E5; /* 鼠标悬停时的背景色 */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this style, I have reduced the size of the buttons and font size to make them more refined. At the same time, the default state of the button is semi-transparent, and when the mouse hovers over it, it becomes opaque, and the background color will become slightly brighter to provide visual feedback. This design both meets your color requirements and maintains a modern and user-friendly feel.&lt;/p&gt;
&lt;p&gt;A simpler JavaScript was provided accordingly&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // 查找所有 .highlight 元素
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // 创建复制按钮
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;复制&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // 将按钮添加到每个 .highlight 元素中
    highlight.appendChild(copyBtn);

    // 添加点击事件监听器
    copyBtn.addEventListener(&#39;click&#39;, function() {
      // 假设 .highlight 下的第一个 &amp;lt;code&amp;gt; 元素包含要复制的代码
      const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;

      navigator.clipboard.writeText(code).then(() =&amp;gt; {
        // 显示复制成功信息
        copyBtn.textContent = &#39;已复制!&#39;;
        setTimeout(() =&amp;gt; {
          copyBtn.textContent = &#39;复制&#39;;
        }, 2000);
      }).catch(err =&amp;gt; {
        console.error(&#39;复制失败: &#39;, err);
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;afterword&#34;&gt;Afterword
&lt;/h2&gt;&lt;p&gt;Although I would prefer a copy button to be added in the top area of the code region, due to my lack of understanding of frontend development, I couldn&amp;rsquo;t accurately describe the function based on keywords. After several rounds of troubleshooting with &lt;code&gt;AI&lt;/code&gt;, it still didn’t reach the expected result.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s just that I don&amp;rsquo;t know how much impact AI will have on software development as time goes on&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
