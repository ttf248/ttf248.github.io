<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Flag Bit on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/flag-bit/</link>
        <description>Recent content in Flag Bit on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 02:57:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/flag-bit/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C&#43;&#43; Bitwise Operations Basics: Bit Extraction and Flag Setting</title>
        <link>https://ttf248.life/en/p/cpp-bitwise-operations-basics-flags/</link>
        <pubDate>Fri, 17 Jan 2025 02:23:56 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/cpp-bitwise-operations-basics-flags/</guid>
        <description>&lt;p&gt;In practical C++ development, bit operations are a common technique, especially when dealing with system states, flags, or control bits. Bit operations can provide very efficient solutions. This article will explain how to use bit operations to get and set specific flag bits through an example.&lt;/p&gt;
&lt;h3 id=&#34;basic-operating-concepts&#34;&gt;Basic operating concepts
&lt;/h3&gt;&lt;p&gt;In computers, data is stored in binary digits (bits) of 0 and 1. Bitwise operations are operations performed on these binary digits. C++ has several commonly used bitwise operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bitwise AND (&amp;amp;): Used to check if a bit is 1&lt;/li&gt;
&lt;li&gt;Bitwise OR (|): Used to set a bit to 1&lt;/li&gt;
&lt;li&gt;XOR (exclusive OR) by bit: Used to invert a specific bit&lt;/li&gt;
&lt;li&gt;Bitwise NOT (~) : Inverts all bits&lt;/li&gt;
&lt;li&gt;Shift all bits left by several positions&lt;/li&gt;
&lt;li&gt;Shifts all bits to the right by several positions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example, we need to perform a series of bit operations on an &lt;code&gt;unsigned short&lt;/code&gt; type variable &lt;code&gt;wInfo&lt;/code&gt;, using different flag bits to represent different states&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR
    A[原始数值: 00010000] --&amp;gt; B[左移: 00010000 &amp;lt;&amp;lt; 1]
    B --&amp;gt; C[结果: 00100000]
    C --&amp;gt; D[右移: 00100000 &amp;gt;&amp;gt; 1]
    D --&amp;gt; E[结果: 00010000]

    subgraph 左移操作
        direction LR
        A --&amp;gt; B --&amp;gt; C
    end

    subgraph 右移操作
        direction LR
        C --&amp;gt; D --&amp;gt; E
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;requirements-analysis&#34;&gt;Requirements Analysis
&lt;/h3&gt;&lt;p&gt;According to the description in the question, we have a 16-bit flag used to represent different states. These states are represented by various binary bits, each corresponding to a specific meaning. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has bit0 failed?&lt;/li&gt;
&lt;li&gt;Is bit1 compressed?&lt;/li&gt;
&lt;li&gt;Is bit2 incremental?&lt;/li&gt;
&lt;li&gt;Does bit3 have any follow-up packages?&lt;/li&gt;
&lt;li&gt;Normal request or logout&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;implement-using-bit-operations&#34;&gt;Implement using bit operations
&lt;/h3&gt;&lt;p&gt;We will use bit operations to set and get these flag bits. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extracting bit values: Obtain the value of a specific bit (0 or 1)&lt;/li&gt;
&lt;li&gt;Set a bit to 1&lt;/li&gt;
&lt;li&gt;Set a bit to 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We first define an &lt;code&gt;unsigned short&lt;/code&gt; type variable &lt;code&gt;wInfo&lt;/code&gt; to store these flags. Then, we use bit operations to check and set the corresponding flags.&lt;/p&gt;
&lt;h3 id=&#34;c-example-code&#34;&gt;C++ example code
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;bitset&amp;gt;

// 定义标志位常量
const unsigned short BIT_0_FAIL = 1 &amp;lt;&amp;lt; 0;    // bit0 是否失败
const unsigned short BIT_1_COMPRESSED = 1 &amp;lt;&amp;lt; 1; // bit1 是否压缩
const unsigned short BIT_2_INCREMENT = 1 &amp;lt;&amp;lt; 2;  // bit2 是否增量
const unsigned short BIT_3_HAS_MORE = 1 &amp;lt;&amp;lt; 3;   // bit3 是否有后续包
const unsigned short BIT_5_CANCEL = 1 &amp;lt;&amp;lt; 5;     // bit5 正常请求(0)或注销(1)

// 检查某一位是否为1
bool isBitSet(unsigned short wInfo, unsigned short bitMask) {
    return (wInfo &amp;amp; bitMask) != 0;
}

// 设置某一位为1
void setBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo |= bitMask;
}

// 清除某一位（设置为0）
void clearBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo &amp;amp;= ~bitMask;
}

int main() {
    // 假设wInfo的初始值为0
    unsigned short wInfo = 0;

    // 设置bit0（失败标志）
    setBit(wInfo, BIT_0_FAIL);
    
    // 设置bit1（压缩标志）
    setBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印wInfo的二进制值
    std::cout &amp;lt;&amp;lt; &amp;quot;wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    // 检查各个标志位
    std::cout &amp;lt;&amp;lt; &amp;quot;bit0 (是否失败): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_0_FAIL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit1 (是否压缩): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_1_COMPRESSED) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit2 (是否增量): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_2_INCREMENT) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit3 (是否有后续包): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_3_HAS_MORE) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit5 (是否注销): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_5_CANCEL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;

    // 清除bit1（压缩标志）
    clearBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印更新后的wInfo
    std::cout &amp;lt;&amp;lt; &amp;quot;Updated wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Execute code, recommended by an old friend: &lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wInfo (in binary): 0000000000000011
bit0 (是否失败): 是
bit1 (是否压缩): 是
bit2 (是否增量): 否
bit3 (是否有后续包): 否
bit5 (是否注销): 否
Updated wInfo (in binary): 0000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;code-explanation&#34;&gt;Code explanation
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Flag bits are defined using bit shift operations (&lt;code&gt;1 &amp;lt;&amp;lt; n&lt;/code&gt;). For example, &lt;code&gt;1 &amp;lt;&amp;lt; 0&lt;/code&gt; corresponds to &lt;code&gt;bit0&lt;/code&gt;, &lt;code&gt;1 &amp;lt;&amp;lt; 1&lt;/code&gt; corresponds to &lt;code&gt;bit1&lt;/code&gt;, and so on. This assigns a unique binary position to each flag bit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;isBitSet&lt;/code&gt; function checks if a specific flag is set to 1 by performing a bitwise AND operation &lt;code&gt;wInfo &amp;amp; bitMask&lt;/code&gt;. If the bit is 1, the function returns &lt;code&gt;true&lt;/code&gt;; otherwise, it returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;setBit&lt;/code&gt; function sets a specific flag to 1 using a bitwise OR operation &lt;code&gt;wInfo |= bitMask&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;clearBit&lt;/code&gt; function sets a specific flag to 0 using a bitwise AND operation: &lt;code&gt;wInfo &amp;amp;= ~bitMask&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;Through bit manipulation, we can efficiently handle multiple status flag bits. This technique is particularly useful in practical development. For example, it is often used in scenarios such as embedded development, network protocols, and system state management, where bit flags are used to represent multiple binary states, saving space and improving efficiency.&lt;/p&gt;
&lt;p&gt;I hope this blog helps you understand how to use bitwise operations in C++ to achieve bit extraction and setting. Mastering these skills is very helpful for writing efficient and maintainable code!&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
