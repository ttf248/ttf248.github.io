<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Github on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/github/</link>
        <description>Recent content in Github on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Fri, 20 Jun 2025 00:23:48 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/github/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Daily Musings</title>
        <link>https://ttf248.life/en/p/daily-musings/</link>
        <pubDate>Thu, 19 Jun 2025 19:07:33 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/daily-musings/</guid>
        <description>&lt;p&gt;AI has been integrated into daily development workflows, and recent investments have shifted focus from external funds to internal stocks and ETFs.&lt;/p&gt;
&lt;h2 id=&#34;open-source-projects&#34;&gt;Open Source Projects
&lt;/h2&gt;&lt;h3 id=&#34;project-log&#34;&gt;Project Log
&lt;/h3&gt;&lt;p&gt;Last week, I was bored and tried to obtain GitHub badges, starting to use the Issue module. Previously, when writing code, I always wanted to find a place to record the content of each AI modification, but creating a separate document to record it felt disorganized. Now that we have the Issue module, tagging them to distinguish between bugs, features, enhancements, etc., has made the records clear and efficient. Even if I might not need them in the future, recording them is still a form of accumulation.
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader/issues?q=is%3Aissue&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;View Issue List&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;release-notes&#34;&gt;Release Notes
&lt;/h3&gt;&lt;p&gt;Release record, find the most recent related commits. Since all commits are AI-generated, copy all recent commit records from the web interface and give them to AI to organize – this is a good release record.
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader/releases/tag/v1.9.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/comic-reader/releases/tag/v1.9.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;engagement&#34;&gt;Engagement
&lt;/h3&gt;&lt;p&gt;That time it was featured on GitHub’s personal page, it passively increased the motivation to write code – after all, the data visualization made things quite fascinating. Even simple positive feedback could provide the impetus to keep going.&lt;/p&gt;
&lt;h3 id=&#34;trae&#34;&gt;Trae
&lt;/h3&gt;&lt;p&gt;Paid for a monthly trial, honestly, it’s better in VSCode using Claude4. The practical effect is also better. Sometimes, even with the same problem, Trae gives better answers. Should I buy an annual subscription later? Given my current chaotic usage frequency, Trae might not be enough; don&amp;rsquo;t think about it too much, we’ll see when we run out. Byte should still have other paid plans and purchase more call volumes.
&lt;del&gt;Simple small issues can be solved using Microsoft, GitHub Copilot, and various models can also be called.&lt;/del&gt;
The plan is to fail – GitHub Copilot is now starting to limit the number of calls &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/zh/copilot/about-github-copilot/plans-for-github-copilot#models&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;618 opened restrictions&lt;/a&gt;
How to check &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/zh/copilot/managing-copilot/understanding-and-managing-copilot-usage/monitoring-your-copilot-usage-and-entitlements#downloading-a-monthly-usage-report&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;current usage&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;investment&#34;&gt;Investment
&lt;/h2&gt;&lt;p&gt;Ultimately, I couldn’t resist. Since the Hong Kong Connect channel was opened, I hadn&amp;rsquo;t traded in the Hong Kong market, and I bought some Xiaomi stock thinking about their upcoming new car launch. It rose a bit, so I sold it, and when it fell, I bought it back again, repeating this process several times before the new car was released, making a small profit on the stock.&lt;/p&gt;
&lt;p&gt;At this time, I didn’t know what to do but look at the cross-border capital flows of Hong Kong Connect, watching Meituan&amp;rsquo;s net inflow of funds, and followed suit by buying it in, successfully becoming a shareholder, forgetting to look at the overall capital flow, only a part of the domestic purchases, and there were still many foreign investors in the Hong Kong market. This time it was just an opportunity to practice with blue-chip stocks, slowly holding on to the final gains.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Controlling positions and losses are &lt;strong&gt;contrary to human nature&lt;/strong&gt;, slow down, slow down, don’t rush. If Xiaomi&amp;rsquo;s new car doesn’t perform well, should I sell? That’s a question. My investment cognition is still insufficient, and I need to read more books and learn more. The Fed isn’t planning on cutting interest rates, and the Hong Kong market plunged once, if I missed the entry time? That wouldn&amp;rsquo;t be right, what if the news came out that interest rates were being cut and the Hong Kong market soared? This is investment, testing human nature.
&lt;code&gt;A phrase I often repeat: buying is for national fortune, but I don’t really believe in national fortune.&lt;/code&gt;
Aside from the belief in national fortune, &lt;strong&gt;another one is attention&lt;/strong&gt;. Since you&amp;rsquo;re going to do long-term investing, frequent monitoring of the market is pointless. Ten minutes in the morning and ten minutes at the close are enough. What is the final expected return rate? There’s still no clear stop-loss position.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When the market falls sharply, Tencent is a hot commodity, with capital flocking to it.
| 00700 | Tencent Holdings | 498.600 | 80.08 billion |&lt;/p&gt;
&lt;h2 id=&#34;investment-1&#34;&gt;Investment
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Latest Price&lt;/th&gt;
&lt;th&gt;Turnover&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;03690&lt;/td&gt;
&lt;td&gt;Meituan-W&lt;/td&gt;
&lt;td&gt;128.100&lt;/td&gt;
&lt;td&gt;6.881 Billion&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;investment-2&#34;&gt;Investment
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Latest Price&lt;/th&gt;
&lt;th&gt;Volume&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;09992&lt;/td&gt;
&lt;td&gt;Bubble Mate&lt;/td&gt;
&lt;td&gt;247.200&lt;/td&gt;
&lt;td&gt;5.703 Billion&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;investment-3&#34;&gt;Investment
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Latest Price&lt;/th&gt;
&lt;th&gt;Volume&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;09988&lt;/td&gt;
&lt;td&gt;Alibaba-W&lt;/td&gt;
&lt;td&gt;109.800&lt;/td&gt;
&lt;td&gt;532.2 Billion&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;investment-4&#34;&gt;Investment
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Latest Price&lt;/th&gt;
&lt;th&gt;Turnover&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01810&lt;/td&gt;
&lt;td&gt;Xiaomi Group-W&lt;/td&gt;
&lt;td&gt;53.050&lt;/td&gt;
&lt;td&gt;41.05 Billion&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>GitHub Pages Easter Egg: Deploying Multiple Pages</title>
        <link>https://ttf248.life/en/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;Recently, my biological clock has been a bit off, still tinkering with GitHub Pages deployments around 2 AM.&lt;/p&gt;
&lt;p&gt;I went to eat after work, and I just wanted to sleep when I finished, then came back around 8:30 PM, feeling drowsy, thinking I’d take a nap, and ended up falling asleep immediately. When I woke up, it was already past 2 AM.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Categories that haven&amp;rsquo;t even launched yet: AI Study Group&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- more --&gt;
&lt;h2 id=&#34;facepalm&#34;&gt;Facepalm
&lt;/h2&gt;&lt;p&gt;Yesterday we said there wouldn&amp;rsquo;t be much frontend development, but today it’s not frontend – it’s the experience of UI/UX.&lt;/p&gt;
&lt;h2 id=&#34;project&#34;&gt;Project
&lt;/h2&gt;&lt;p&gt;Please join our old friend, &lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt;.
That’s the original self-selected stock project – we&amp;rsquo;re restructuring the overall project structure, and all subsequent AI programming content will be housed within this project.&lt;/p&gt;
&lt;h2 id=&#34;deploying-multiple-pages&#34;&gt;Deploying Multiple Pages
&lt;/h2&gt;&lt;p&gt;The project is hosted domestically at &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/ai-coding-demo&lt;/a&gt;. Due to well-known reasons, pages cannot be published within China, so we need to publish them on GitHub outside of it.&lt;/p&gt;
&lt;p&gt;The blog is published on the external GitHub. I haven&amp;rsquo;t tried this before, and also, the current project I’m working on isn’t a traditional blog site; it simply contains a lot of documentation layered with several static HTML design mockups.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s right – this page is where I discovered that deploying multiple pages using pages won&amp;rsquo;t affect the blog’s publication, but instead adds a new path under the blog’s domain name.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ai-coding-demo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ttf248.life/ai-coding-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was absolutely thrilled when I saw this!&lt;/p&gt;
&lt;h2 id=&#34;ai-study-group&#34;&gt;AI Study Group
&lt;/h2&gt;&lt;p&gt;Yesterday, I created a new category and thought about using AI to learn many computer courses, such as algorithms and LeetCode practice problems.
Each learning record is published on the blog to form a knowledge base. A new category was created: AI Study Group.
Now it seems that different courses require creating separate projects, and all learning notes are written in the project&amp;rsquo;s Readme.md file.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Merge the Pull Request into the Repository of the Fork</title>
        <link>https://ttf248.life/en/p/merge-pullrequest-to-forked-repo/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/merge-pullrequest-to-forked-repo/</guid>
        <description>&lt;p&gt;&lt;code&gt;github-readme-stats&lt;/code&gt; is a GitHub profile statistics generator that allows users to display various statistics and charts within their GitHub profiles. It offers multiple customization options to tailor it to user needs.&lt;/p&gt;
&lt;p&gt;I manage my repository habits by grouping them by project; GitHub doesn&amp;rsquo;t support repository grouping, so I have to achieve this by splitting repositories across different organizations. The latest branch of &lt;code&gt;github-readme-stats&lt;/code&gt; cannot support statistics for repositories spanning different organizations; I forked a branch and merged the corresponding code.&lt;/p&gt;
&lt;h2 id=&#34;final-result&#34;&gt;Final Result
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;pull-request-original-address&#34;&gt;Pull Request Original Address
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adds the ability to include data from organization repositories&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;merging-a-pull-request-into-your-forked-repository&#34;&gt;Merging a Pull Request into Your Forked Repository
&lt;/h2&gt;&lt;p&gt;To merge a &lt;strong&gt;Pull Request (PR)&lt;/strong&gt; into your &lt;strong&gt;forked repository&lt;/strong&gt;, there are several ways to do this, depending on whether you want to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Merge the PR from the &lt;strong&gt;upstream repository&lt;/strong&gt; into your fork, or&lt;/li&gt;
&lt;li&gt;Merge a PR from another person’s fork into your fork, or&lt;/li&gt;
&lt;li&gt;Merge a PR that was opened on your fork (e.g., someone forked and created a PR for you)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ll first give you a common scenario: &lt;strong&gt;You have forked a repository and want to merge a PR from the upstream into your fork&lt;/strong&gt;.  Here’s the workflow below 👇&lt;/p&gt;
&lt;h3 id=&#34;-method-one-command-line-most-universal&#34;&gt;✅ Method One: Command Line (Most Universal)
&lt;/h3&gt;&lt;h4 id=&#34;step-1-clone-your-own-fork&#34;&gt;Step 1: Clone your own fork
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/your-username/repository-name.git
cd repository-name
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-2-add-upstream-original-repository-address&#34;&gt;Step 2: Add Upstream (Original Repository Address)
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/original-author-username/repository-name.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-3-fetch-the-upstream-pr-branch&#34;&gt;Step 3: Fetch the Upstream PR Branch
&lt;/h4&gt;&lt;p&gt;Find the PR number you want to merge, for example PR #123.
You can then checkout the code for that PR like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-4-switch-and-merge-branches&#34;&gt;Step 4: Switch and Merge Branches
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # Or your own target branch
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If everything goes well, you can push to your forked GitHub repository:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;-method-two-github-web-interface-simple-but-limited&#34;&gt;✅ Method Two: GitHub Web Interface (Simple but Limited)
&lt;/h3&gt;&lt;p&gt;If you see a PR on GitHub’s web interface that is against the upstream repository, you can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the PR page.&lt;/li&gt;
&lt;li&gt;Click “&lt;strong&gt;Commits&lt;/strong&gt;” or “&lt;strong&gt;Files changed&lt;/strong&gt;” in the top-right corner to see which branch this PR is based on.&lt;/li&gt;
&lt;li&gt;On your fork page, create a new branch and then manually cherry-pick the PR’s commit (requires Git knowledge).&lt;/li&gt;
&lt;li&gt;Or, click “&lt;strong&gt;Open in GitHub Desktop&lt;/strong&gt;” and use the GUI tool to merge.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;-if-someone-has-created-a-fork-and-submitted-a-pr-to-it-simply-navigate-to-the-pr-page-click-the-merge-pull-request-button-and-youre-done&#34;&gt;🚀 If someone has created a fork and submitted a PR to it, simply navigate to the PR page, click the &amp;ldquo;&lt;strong&gt;Merge pull request&lt;/strong&gt;&amp;rdquo; button, and you’re done.
&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Would you like me to walk you through it step-by-step based on your specific scenario (e.g., PR link, whether you&amp;rsquo;re using a web interface or the command line)? Or, please provide the link and I can analyze the simplest approach for you.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
