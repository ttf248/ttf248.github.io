<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Trae on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/trae/</link>
        <description>Recent content in Trae on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 02:57:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/trae/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Design and develop a customizable stock selection module without coding</title>
        <link>https://ttf248.life/en/p/no-code-design-develop-custom-stock-module/</link>
        <pubDate>Thu, 27 Feb 2025 23:20:39 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/no-code-design-develop-custom-stock-module/</guid>
        <description>&lt;p&gt;Last month we tested Cursor, but due to limitations on the free tier, we didn&amp;rsquo;t do any complex feature development, just some simple testing. At that time, we also discovered that ByteDance released a similar product, and both used the same underlying large language model – Claude-3.5.&lt;/p&gt;
&lt;p&gt;Byte&amp;rsquo;s product is called Trae, first launched for Mac, and finally released a Windows version this February. Products from big companies are just good – you can use them for free, without paying, with unlimited access to Claude-3.5. This model has a very nice effect.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ultimately, I got stuck on the development of the K-line chart. Due to my basic lack of knowledge in React, I had to give up. To continue developing it, I need to supplement some fundamental front-end knowledge and break down the tasks more finely, rather than giving a large task: develop the K-line chart.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;issues-found&#34;&gt;Issues found
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Due to insufficient training data for Vue3 + Element-Plus due to the use of foreign AI models, we chose React as the front-end framework&lt;/li&gt;
&lt;li&gt;There may be occasional grammatical errors that need manual correction&lt;/li&gt;
&lt;li&gt;Solutions to some complex problems require human guidance&lt;/li&gt;
&lt;li&gt;Code structure optimization requires human guidance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most time-consuming part was packaging the frontend code into a container. As the author has no foundation, I had no concept of &lt;code&gt;.env.production&lt;/code&gt; or &lt;code&gt;tsconfig.json&lt;/code&gt;. I only managed to understand the corresponding logic with help from Bean. There&amp;rsquo;s a big difference in how the frontend development (dev) mode and build mode check the code. The container scripts for the backend database and services took about five minutes altogether.&lt;/p&gt;
&lt;p&gt;Currently, AI primarily improves development efficiency; having a foundation is best, as AI won&amp;rsquo;t solve all your problems&lt;/p&gt;
&lt;h2 id=&#34;warehouse-address&#34;&gt;Warehouse address
&lt;/h2&gt;&lt;p&gt;As the title says, this time we&amp;rsquo;re avoiding writing code and directly engaging with AI to design and develop a customizable stock selection module. Let’s see what kind of results we can achieve in the end.&lt;/p&gt;
&lt;p&gt;Repository address: [https://github.com/ttf248/trae-demo]&lt;/p&gt;
&lt;p&gt;Detailed usage instructions can be found in the README.md file in the repository&lt;/p&gt;
&lt;p&gt;The warehouse contains many submission records, mostly conversations between me and Trae, as well as my tests of some of Trae&amp;rsquo;s functions, with notes indicating whether manual intervention was required to achieve the corresponding functionality&lt;/p&gt;
&lt;h2 id=&#34;prompt&#34;&gt;Prompt
&lt;/h2&gt;&lt;p&gt;The project was created from scratch, here&amp;rsquo;s the prompt for the project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;基于项目原型图，开发功能：自选股，需要支持合约的新增、删除、修改、查询。自选股界面需要展示基础的行情数据。支持多个不同的市场切换。

前端：react
后端：golang gin gorm
数据库：PostgreSQL

服务端需要支持跨域请求，同时需要考虑数据的校验和错误处理，如果后端服务不可用，前端需要告警提示。

后端需要展示请求和应答的日志；前端也打印通讯的日志，方便排查问题。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ui-and-interaction-optimization&#34;&gt;UI and interaction optimization
&lt;/h2&gt;&lt;p&gt;The design of the front-end interface is completely dependent on Grok. We first created a prototype in Trae, but it lacked aesthetic appeal. Due to the model&amp;rsquo;s strong coding capabilities but relatively weak other abilities, we need to use Grok to optimize the front-end UI.&lt;/p&gt;
&lt;p&gt;By taking a screenshot of the current interface, uploading it to Grok, and having it help us optimize the UI, we can potentially receive many optimization suggestions at once. We will manually evaluate them and then copy them into Trae for execution, observing the effects of the optimization.&lt;/p&gt;
&lt;h3 id=&#34;technology-stack&#34;&gt;Technology stack
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Frontend: React + TypeScript&lt;/li&gt;
&lt;li&gt;Backend: Golang + Gin + GORM&lt;/li&gt;
&lt;li&gt;Database: PostgreSQL 17&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;system-architecture&#34;&gt;System architecture
&lt;/h2&gt;&lt;h2 id=&#34;backend-architecture&#34;&gt;Backend architecture
&lt;/h2&gt;&lt;p&gt;The backend is implemented using the Go Gin framework for a RESTful API, with main modules including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Database module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use GORM as an ORM framework&lt;/li&gt;
&lt;li&gt;Support configuring database connections through environment variables&lt;/li&gt;
&lt;li&gt;Automatically migrate database tables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Routing module&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RESTful API Design&lt;/li&gt;
&lt;li&gt;Unified error handling mechanism&lt;/li&gt;
&lt;li&gt;Built-in request logging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cross-domain handling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support cross-domain in local development environments&lt;/li&gt;
&lt;li&gt;Configurable CORS policy&lt;/li&gt;
&lt;li&gt;Support cross-domain cookies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;frontend-architecture&#34;&gt;Frontend Architecture
&lt;/h2&gt;&lt;p&gt;Built with React + TypeScript, it achieves:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stock list display&lt;/li&gt;
&lt;li&gt;Self-selected stock management&lt;/li&gt;
&lt;li&gt;Market Data Display&lt;/li&gt;
&lt;li&gt;Error prompt mechanism&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
