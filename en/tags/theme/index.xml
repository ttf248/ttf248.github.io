<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Theme on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/theme/</link>
        <description>Recent content in Theme on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 20:54:02 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/theme/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Feeling bored and wanting to design a Chinese ink wash style theme.</title>
        <link>https://ttf248.life/en/p/designing-a-chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/designing-a-chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;I’ve grown tired of staring at colorful, cluttered homepages and suddenly want to embrace a minimalist style, designing a Chinese ink wash theme.&lt;/p&gt;
&lt;p&gt;Currently, the stylesheet is heavily customized – specific styles are configured to override the default theme styles for different elements. Without refactoring, attempting to generate a new theme directly with AI yielded inconsistent results; it was difficult to describe—the output was very unstable.  Adding to this, I encountered a queue for trae claude large model and switched to vscode agent mode, which resulted in even worse outcomes – the generated changes lacked any design sense. Ultimately, it comes down to my own lack of understanding of frontend development, preventing me from effectively breaking down tasks and delegating them to AI.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hugo Module Customizing Theme: Explanation of Approach</title>
        <link>https://ttf248.life/en/p/hugo-module-customizing-themes-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/hugo-module-customizing-themes-ideas/</guid>
        <description>&lt;p&gt;Browsing through the historical commit records, the site has undergone numerous theme switches. Each theme switch involved some custom modifications, and this is where I’m documenting the approach to customizing themes. My &lt;code&gt;Github&lt;/code&gt; repository briefly maintained the even theme, but due to my obsessive-compulsive tendencies, I resisted upgrading the &lt;code&gt;hugo&lt;/code&gt; compiler to the latest version, which resulted in incompatibility with the even theme, so I switched back to the &lt;code&gt;stack&lt;/code&gt; theme.&lt;/p&gt;
&lt;h2 id=&#34;hugos-modularity&#34;&gt;Hugo&amp;rsquo;s Modularity
&lt;/h2&gt;&lt;p&gt;When we talk about modularity, many people think of Nginx modules and IDEA plugins, among others. Typically, I can upload some modules to satisfy my differentiated needs. The reason everyone likes this kind of module is that it’s sufficiently flexible – you don’t have to put in too much effort to meet your own requirements. Because often, even though the overall situation is similar, there are always some details that differ. This also illustrates the complexity of software, not just technically but also from a business perspective. Most of the time, we face business complexity. This is precisely where the saying “it’s like crossing a mountain range” best applies. Today, not only the internet industry and finance, but even traditional manufacturing industries are using information systems to help businesses with their production and management. Even a leave system can have differences between companies in the same industry.&lt;/p&gt;
&lt;p&gt;Unlike the modules you might be familiar with, Hugo&amp;rsquo;s modules are different – they don’t focus on meeting differentiated needs based on functionality. Instead, they rely primarily on directory structure to identify identical structures.&lt;/p&gt;
&lt;p&gt;Resource link: &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo Architecture — Hugo Modules&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;git submodule&lt;/code&gt; approach can still be used, and this article doesn’t recommend it. If you introduce a theme, maintaining it will be more complicated – you&amp;rsquo;ll need to manage the theme as a separate Git repository.&lt;/p&gt;
&lt;h2 id=&#34;theme-modification-logichttpsstackjimmycaicomguidemodify-theme&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Theme Modification Logic&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;Once you have a solid understanding of the foundational concepts of modularization, customizing themes becomes much simpler. Hugo themes are currently assembled from multiple different modules. To modify one module, simply locate its corresponding template file and make the changes directly.&lt;/p&gt;
&lt;p&gt;As extracted from the official &lt;code&gt;stack&lt;/code&gt; documentation:&lt;/p&gt;
&lt;p&gt;Using this method, there will be no files under the &lt;code&gt;themes&lt;/code&gt; directory.  To modify a theme, you must copy the file you want to modify into the same directory under the &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you must copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copying the code from the theme&amp;rsquo;s repository). The same applies to the &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories.&lt;/p&gt;
&lt;h2 id=&#34;how-to-find-template-files&#34;&gt;How to Find Template Files
&lt;/h2&gt;&lt;h3 id=&#34;conventional-approach&#34;&gt;Conventional Approach
&lt;/h3&gt;&lt;p&gt;Review the source files of the topic, understand its design rationale, identify the corresponding template file, and modify it.&lt;/p&gt;
&lt;h3 id=&#34;brute-force-approach&#34;&gt;Brute Force Approach
&lt;/h3&gt;&lt;p&gt;As I’m not very familiar with frontend code, I sometimes resort to a brute force approach, such as opening the corresponding page directly in the browser, finding the areas I want to modify, and using “Inspect Element” to pinpoint the &lt;code&gt;css name&lt;/code&gt;, then searching the source code for the relevant file, copying it into the site directory, and making changes.&lt;/p&gt;
&lt;h2 id=&#34;tips&#34;&gt;Tips
&lt;/h2&gt;&lt;p&gt;The official setup provides a default file for customizing styles. To modify specific areas, we can split them into multiple files and import them using &lt;code&gt;custom.scss&lt;/code&gt;. This approach allows for better management of style files.
&lt;img src=&#34;https://ttf248.life/p/hugo-module-customizing-themes-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;consolidated-modifications-6h&#34;&gt;Consolidated Modifications (6h)
&lt;/h2&gt;&lt;p&gt;It’s now the first year of &lt;code&gt;AI&lt;/code&gt; coding, and detailed content will not be pasted here for brevity; instead, we&amp;rsquo;ll simply list some of the modifications made to this site, such as adjusting the copy button styles, reconfiguring the code block styles, and &lt;code&gt;ChatGPT&lt;/code&gt; was easily handled.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overall: Global text style, retaining the display style previously used by merging &lt;code&gt;even&lt;/code&gt; with &lt;code&gt;info cn&lt;/code&gt;, which is friendly for Chinese&lt;/li&gt;
&lt;li&gt;Homepage: Added mouse interaction animation to the right navigation&lt;/li&gt;
&lt;li&gt;Homepage: New article summaries added (took quite a while to implement using a clever workaround)&lt;/li&gt;
&lt;li&gt;Scroll Bar: Improved the styling of the scroll bar&lt;/li&gt;
&lt;li&gt;Code Blocks: Introduced the &lt;code&gt;highlight.js&lt;/code&gt; code highlighting plugin, beautifying the code block styles&lt;/li&gt;
&lt;li&gt;Article Details: Some content is from reprints, with new author information display and original link display&lt;/li&gt;
&lt;li&gt;Archive Pages: Removed the color mask from the category images at the top to display the original image&lt;/li&gt;
&lt;li&gt;Archive Pages: Added a statistical display panel for categorization by year&lt;/li&gt;
&lt;li&gt;Archive Pages: Two-column layout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;stack&lt;/code&gt; theme has a high component reuse rate, which also led to the lengthy time taken to add new article summaries to the homepage.  After modifying the corresponding components, changes occurred in the article details page as well, resulting in redundant display of content. The &lt;code&gt;golang template&lt;/code&gt; syntax wasn&amp;rsquo;t very familiar, so it took up quite a bit of time.  Component parameter passing was never resolved, and ultimately, through a clever workaround, a &lt;code&gt;JavaScript&lt;/code&gt; script was independently introduced to the homepage to implement the summary preview by using custom special variables.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes, high component reuse can also be a problem, leading to unintended consequences when modifying one place affecting others. Therefore, when modifying themes, you must pay attention not to disrupt existing logic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;comments&#34;&gt;Comments
&lt;/h3&gt;&lt;p&gt;This guy&amp;rsquo;s modifications are more refined: &lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;
&lt;del&gt;This site simply enabled the &lt;code&gt;Waline&lt;/code&gt; comment system, as the &lt;code&gt;stack&lt;/code&gt; theme defaults to supporting &lt;code&gt;Waline&lt;/code&gt;. Just configure it in the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recommend contacting via email on the homepage, this site does not open the comments section&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
