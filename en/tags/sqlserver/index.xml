<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>SqlServer on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/sqlserver/</link>
        <description>Recent content in SqlServer on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/sqlserver/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Bulk Modify SQL Server Database Disk File Permissions</title>
        <link>https://ttf248.life/en/p/bulk-modify-sqlserver-database-disk-permissions/</link>
        <pubDate>Tue, 23 Jan 2024 19:06:36 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/bulk-modify-sqlserver-database-disk-permissions/</guid>
        <description>&lt;p&gt;The company adjusted its security policies. Ultimately, ‘Mechanical Mini’ was relocated back home as a backup server, along with a full system reinstallation. Ubuntu switched to Windows Server; due to an irregular activation method – used in their own home environment – it seemed like it wouldn&amp;rsquo;t be activated, and that was fine. An unconventional activation triggered Microsoft’s detection (running normally for half a month), the server would automatically shut down after one hour of operation. After reviewing the system logs, it was discovered that this was due to using a pirated version.&lt;/p&gt;
&lt;p&gt;There wasn’t much they could do, so they reinstalled the system again, and SQL Server also needed to be reinstalled. It&amp;rsquo;s always quite frustrating dealing with these issues – strict file permission controls prevented them from successfully attaching the database.&lt;/p&gt;
&lt;h2 id=&#34;error-message&#34;&gt;Error Message
&lt;/h2&gt;&lt;p&gt;After the system reinstallation, &lt;code&gt;SqlServer&lt;/code&gt; may encounter error 5120, an operating system access denied error, when attaching a database.&lt;/p&gt;
&lt;h2 id=&#34;processing-script&#34;&gt;Processing Script
&lt;/h2&gt;&lt;p&gt;Previous link: &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/en/p/bulk-update-local-git-and-legacy-permissions/&#34; &gt;Batch Update Local Git Repository&lt;/a&gt;, it’s that familiar script all over again – let&amp;rsquo;s modify it to iterate through folders while also changing file permissions, currently using full editing privileges.
Most online tutorials instruct you to manually modify files; they only need to change a few files each time? I have batches of files to process, and manually handling them would drive me crazy.&lt;/p&gt;
&lt;h2 id=&#34;script-to-process&#34;&gt;Script to Process
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$rootDirectory = &amp;quot;D:\data\2013_RujiaInfo&amp;quot;

Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;script-to-handle&#34;&gt;Script to Handle
&lt;/h2&gt;&lt;p&gt;if ($_ -is [System.IO.DirectoryInfo]) {
$icaclsResult = icacls $itemPath /setowner &amp;ldquo;$currentUserName&amp;rdquo; 2&amp;gt;&amp;amp;1
if ($LASTEXITCODE -eq 0) {
Write-Host &amp;ldquo;Successfully changed the owner of folder $itemPath to $currentUserName&amp;rdquo;
# Grant current user write permissions
Invoke-Expression &amp;ldquo;icacls &lt;code&gt;&amp;quot;$itemPath&lt;/code&gt;&amp;rdquo; /grant &lt;code&gt;&amp;quot;$($currentUserName):(OI)(CI)F&lt;/code&gt;&amp;quot;&amp;quot;
Write-Host &amp;ldquo;Granted $currentUserName edit permissions for the folder&amp;rdquo;
} else {
Write-Host &amp;ldquo;Failed to change the owner of folder $itemPath. Error message: $icaclsResult&amp;rdquo;
}
} else {&lt;/p&gt;
&lt;h2 id=&#34;processing-script-1&#34;&gt;Processing Script
&lt;/h2&gt;&lt;p&gt;Write-Host &amp;ldquo;Unable to change the owner of folder &amp;lsquo;$itemPath&amp;rsquo;. Error message: &amp;lsquo;$icaclsResult&amp;rsquo;&amp;rdquo;
}
} else {
$takeownResult = icacls $itemPath /setowner &amp;ldquo;$currentUserName&amp;rdquo; 2&amp;gt;&amp;amp;1
if ($LASTEXITCODE -eq 0) {
# Grant current user write permissions
Invoke-Expression &amp;ldquo;icacls &lt;code&gt;&amp;quot;$itemPath&lt;/code&gt;&amp;rdquo; /grant &lt;code&gt;&amp;quot;$($currentUserName):(F)&lt;/code&gt;&amp;quot;&amp;quot;
Write-Host &amp;ldquo;Granted $currentUserName edit file permissions&amp;rdquo;
} else {
Write-Host &amp;ldquo;Unable to change the owner of file &amp;lsquo;$itemPath&amp;rsquo;. Error message: &amp;lsquo;$takeownResult&amp;rsquo;&amp;rdquo;
}
}
}&lt;/p&gt;
&lt;h2 id=&#34;processing-script-2&#34;&gt;Processing Script
&lt;/h2&gt;</description>
        </item>
        
    </channel>
</rss>
