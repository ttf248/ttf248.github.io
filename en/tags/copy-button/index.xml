<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Copy-Button on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/copy-button/</link>
        <description>Recent content in Copy-Button on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/copy-button/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AI Programming and Task Decomposition</title>
        <link>https://ttf248.life/en/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;Two years ago, I added a copy function to the site, which took me half a day of tinkering. Ultimately, the rendering effect wasn&amp;rsquo;t quite satisfactory, and as a somewhat mediocre frontend developer, I didn’t plan on improving it – if it worked, it was good enough. This year, I used &lt;code&gt;AI&lt;/code&gt; to develop a mini-program, which has made me more familiar with frontend development. I refactored it (the &lt;code&gt;AI&lt;/code&gt; redesigned it).&lt;/p&gt;
&lt;p&gt;Insight: Breaking down tasks really helps; many small tasks are quite natural for the &lt;code&gt;AI&lt;/code&gt; to develop. For the closed mini-program, 75% of the code was provided by &lt;code&gt;AI&lt;/code&gt;, and multiple tasks were broken down and delivered, with manual assembly of project code.&lt;/p&gt;
&lt;h2 id=&#34;previous-context&#34;&gt;Previous Context
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.github.io/post/2022/001/%E4%BB%A5%E4%B8%BA%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E6%83%85%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%A4%8D%E5%88%B6%E6%8C%89%E9%92%AE/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Making simple things easier: Adding a code copy button&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;content&#34;&gt;Content
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;promot&lt;/strong&gt;: Design CSS and JavaScript code to locate webpage elements with the class &amp;ldquo;highlight&amp;rdquo;, and within that element&amp;rsquo;s container, add a copy button to enable copying the content. The first draft of the code was immediately problematic; generate a revised version that is essentially usable, but the copied content was incorrect, containing redundant text; further guidance led to optimizing the core color design, including which effects to incorporate.&lt;/p&gt;
&lt;p&gt;Having learned your specific requirements for button size and color, we can redesign the button styles to accommodate these demands.  Below is an adjusted CSS style sheet incorporating your provided color scheme and optimized for the button&amp;rsquo;s dimensions:&lt;/p&gt;
&lt;h2 id=&#34;content-1&#34;&gt;Content
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* Adjust position */
  right: 2px;
  padding: 3px 6px; /* Reduce size */
  font-size: 12px; /* Decrease font size */
  background-color: #8FD1E1; /* Button background color */
  color: #272822; /* Text color */
  border: 1px solid #272822; /* Border color */
  border-radius: 3px; /* Rounded corners */
  cursor: pointer;
  opacity: 0.7; /* Default semi-transparent */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* Smooth transition effect */
}

.copy-btn:hover {
  opacity: 1; /* Unhide on hover */
  background-color: #A3D4E5; /* Background color on hover */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;content-2&#34;&gt;Content
&lt;/h2&gt;&lt;p&gt;In this style, I’ve reduced the size and font size of the buttons to make them more refined. Additionally, the buttons have a semi-transparent default state that becomes opaque and has a slightly brighter background color when you hover over them, providing visual feedback. This design meets your color requirements while maintaining modern and user-friendly characteristics.&lt;/p&gt;
&lt;p&gt;I’ve also provided a simpler &lt;code&gt;JavaScript&lt;/code&gt; implementation:&lt;/p&gt;
&lt;h2 id=&#34;content-3&#34;&gt;Content
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // Find all elements with the class &#39;highlight&#39;
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // Create a copy button
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;Copy&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // Append the button to each .highlight element
    highlight.appendChild(copyBtn);
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;content-4&#34;&gt;Content
&lt;/h2&gt;&lt;p&gt;// Add the button to each element with the class &amp;ldquo;highlight&amp;rdquo;
highlight.appendChild(copyBtn);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Add click event listener
copyBtn.addEventListener(&#39;click&#39;, function() {
  // Assuming the first &amp;lt;code&amp;gt; element under &amp;quot;.highlight&amp;quot; contains the code to copy
  const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## Content

navigator.clipboard.writeText(code).then(() =&amp;gt; {
    // Display copy success message
    copyBtn.textContent = &#39;Copied!&#39;;
    setTimeout(() =&amp;gt; {
      copyBtn.textContent = &#39;Copy&#39;;
    }, 2000);
  }).catch(err =&amp;gt; {
    console.error(&#39;Copy failed: &#39;, err);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;epilogue&#34;&gt;Epilogue
&lt;/h2&gt;&lt;p&gt;While I had hoped to see a copy button added to the top-right corner of the code area, due to my lack of familiarity with frontend development, I was unable to accurately describe the functionality based on keywords and spent several rounds iterating with &lt;code&gt;AI&lt;/code&gt;. It remains to be seen what impact &lt;code&gt;AI&lt;/code&gt; will have on software development over time.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
