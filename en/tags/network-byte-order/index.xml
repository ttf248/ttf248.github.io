<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Network Byte Order on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/network-byte-order/</link>
        <description>Recent content in Network Byte Order on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 02:57:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/network-byte-order/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Why do computers generally use little-endian storage?</title>
        <link>https://ttf248.life/en/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;An Explanation of Byte Order [Host Order, Network Order, Observing Directly Through a Debugger]&lt;/p&gt;
&lt;p&gt;Some design habits formed due to historical reasons in the computer field are like the principle that the width of a horse&amp;rsquo;s rear end determines the width of a rocket engine – there’s no need to analyze their “advantages” and “disadvantages”; they’re simply historical conventions&lt;/p&gt;
&lt;h2 id=&#34;original-link&#34;&gt;Original link
&lt;/h2&gt;&lt;p&gt;Author: Arctic
Link: [https://www.zhihu.com/question/637413724/answer/3346032134]
Source: Zhihu
Copyright belongs to the author. For commercial reproduction, please contact the author for authorization; for non-commercial reproduction, please indicate the source.&lt;/p&gt;
&lt;h2 id=&#34;reprint-of-the-main-text&#34;&gt;Reprint of the main text
&lt;/h2&gt;&lt;p&gt;The current endianness situation is a result of historical habits and commercialization, not really related to the technology itself. ARM can be configured as either big-endian or little-endian. The TCP/IP header still uses big-endian (network byte order). There are also many storage protocols/specifications in the storage field that save data in big-endian format.&lt;/p&gt;
&lt;p&gt;So, the three questions raised by the original poster, looking back today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why do computers generally use little-endian storage? &amp;ndash;&amp;gt; Incorrect&lt;/li&gt;
&lt;li&gt;Efficiency is not necessarily higher&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Any attempt to justify these three issues based on current technology is like drawing a target before shooting an arrow&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;However, when it comes to the choice between big-endian and little-endian, there were indeed certain objective factors in the history of computer development: Advantages of host byte order (little-endian): Little-endian adders are easier to implement. If you want to build an 8-bit * 4 adder, you only need one 8-bit adder and can simply loop through all bytes from low to high and add them. The carry circuit is very simple. However, with big-endian, you need to load 32 bits at once, otherwise the calculation cannot be performed. Looking at it now, there’s not much difference between loading 8 bits or 32 bits, but decades ago, memory was expensive, so simplicity was preferred. Therefore, the choice of little-endian for host byte order was based on cost considerations. Advantages of network byte order (big-endian): Early devices had very small caches, and receiving the high byte first allowed for quick determination of packet information: package length (how much cache to prepare), address range (IP addresses are matched from front to back). Early networking devices used bytes as their unit, so taking the high byte first was indeed faster. Therefore, network devices use big-endian, also based on cost considerations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Therefore, the choice of byte order has historically been driven more by application scenarios and cost considerations (such as PPC/MIPS being better suited for network devices), and later, due to compatibility reasons, the endian configuration has continued to be used until today&lt;/p&gt;
&lt;p&gt;Looking at it today, these advantages no longer exist at all; they are merely historical habits&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
