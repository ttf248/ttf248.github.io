<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Network-Byte-Order on Uncle Xiang&#39;s Notebook</title>
        <link>https://blog.ttf248.life/en/tags/network-byte-order/</link>
        <description>Recent content in Network-Byte-Order on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/en/tags/network-byte-order/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Why do computers commonly use little-endian storage?</title>
        <link>https://blog.ttf248.life/en/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/en/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;An Explanation of Byte Order&lt;/p&gt;
&lt;p&gt;Some design habits formed due to historical reasons in computer science are like the principle that the width of a horse&amp;rsquo;s rear end determines the width of a rocket engine – there’s no need to analyze their “advantages” or “disadvantages”; they’re simply historical conventions&lt;/p&gt;
&lt;h2 id=&#34;original-link&#34;&gt;Original link
&lt;/h2&gt;&lt;p&gt;Author: Arctic
Link:
Source: Zhihu
Copyright belongs to the author. Please contact the author for commercial reproduction; for non-commercial reproduction, please cite the source.&lt;/p&gt;
&lt;h2 id=&#34;full-text-reprint&#34;&gt;Full text reprint
&lt;/h2&gt;&lt;p&gt;The current endianness situation is a result of historical habits and commercialization, not inherently related to the technology itself. ARM can be configured as either big-endian or little-endian. The TCP/IP header still uses big-endian (network byte order). Many storage protocols/specifications in the storage field also save data in big-endian format.&lt;/p&gt;
&lt;p&gt;Therefore, regarding the three questions posed by the original poster:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incorrect&lt;/li&gt;
&lt;li&gt;Efficiency is not higher&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Arguing these three issues based on current technology is like drawing a target before shooting an arrow&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Regarding the choice between big-endian and little-endian, there were objective factors in computer history: Little-endian (host byte order) advantages: Implementing adders is easier. For an 8-bit * 4 adder, a single 8-bit adder suffices, with sequential addition from low to high bytes; the carry circuit is simple. Big-endian would require loading 32 bits at once, otherwise calculation is impossible. While the difference between loading 8 or 32 bits isn&amp;rsquo;t significant now, decades ago when memory was expensive, simplicity was key. Therefore, little-endian was chosen based on cost considerations. Big-endian (network byte order) advantages: Early devices had small caches; receiving high bytes allowed for quick determination of packet information – buffer size and address range (IP addresses are matched from front to back). Early network device caches operated on a byte basis, so retrieving the high byte was faster. Thus, big-endian was used in network devices, also based on cost considerations.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Historically, byte order selection was primarily driven by application scenarios and cost (e.g., PPC/MIPS being better suited for network devices). Later, due to compatibility reasons, the endian configuration has been retained.&lt;/p&gt;
&lt;p&gt;These advantages no longer exist; they&amp;rsquo;re merely historical habits&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
