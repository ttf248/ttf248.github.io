<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Anti-Debug on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/anti-debug/</link>
        <description>Recent content in Anti-Debug on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 02:57:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/anti-debug/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How to anti-debug a program</title>
        <link>https://ttf248.life/en/p/program-how-to-anti-debug/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/program-how-to-anti-debug/</guid>
        <description>&lt;p&gt;On a whim, I thought about finding new wallpaper. I usually go with black backgrounds, with some colored areas. Since there will be icons on the desktop, other color schemes would make them unclear.&lt;/p&gt;
&lt;p&gt;Stared at the assembly code for a while, couldn&amp;rsquo;t understand it. Tried throwing it to &lt;code&gt;AI&lt;/code&gt;, which explained the instructions but not the context. It must be an instruction used in some specific scenario; it wouldnâ€™t appear in regular code.&lt;/p&gt;
&lt;p&gt;AI is not as good as search engines now; it lacks sufficient knowledge accumulated through assembly&lt;/p&gt;
&lt;h2 id=&#34;wallpaper&#34;&gt;Wallpaper
&lt;/h2&gt;&lt;p&gt;Black assembly wallpaper&lt;/p&gt;
&lt;h2 id=&#34;assembly-code&#34;&gt;Assembly code
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Actual application scenarios&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;explanation&#34;&gt;Explanation
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;TrapFlag&lt;/code&gt; is a flag in the status register. When this flag is set, an exception &lt;code&gt;SINGLE_STEP&lt;/code&gt; is thrown. Because if we are tracing code, the debugger clears this flag, so we won&amp;rsquo;t see this exception.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In actual testing, if you step over the detection and debugging functions directly, the debugging will not be detected; it is only detected when stepping into the execution of the detection function (literature query, not yet actually verified)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reference-materials&#34;&gt;Reference materials
&lt;/h2&gt;&lt;p&gt;The relevant materials in Chinese are translations of website drafts, and the site explains many anti-debugging techniques&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
