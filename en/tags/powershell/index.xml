<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Powershell on Uncle Xiang&#39;s Notebook</title>
        <link>https://blog.ttf248.life/en/tags/powershell/</link>
        <description>Recent content in Powershell on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/en/tags/powershell/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PowerShell 7 and Persistent Settings Command-Line Prediction View</title>
        <link>https://blog.ttf248.life/en/p/powershell-7-persisting-settings-command-line-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/en/p/powershell-7-persisting-settings-command-line-prediction-view/</guid>
        <description>&lt;p&gt;Having been accustomed to zsh on Linux, I recently discovered that PowerShell 7 also supports persistent settings for command-line prediction views. I tried it out and found it quite useful.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not sure what action was taken, but this feature is enabled – it just appeared&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In today&amp;rsquo;s diverse operating system environment, system administrators and developers are seeking a cross-platform, efficient, and powerful tool to meet their needs for system management and automation. PowerShell 7 is such a highly anticipated tool, offering robust scripting capabilities and enabling operation across Windows, Linux, and macOS, bringing unprecedented convenience to users.&lt;/p&gt;
&lt;h2 id=&#34;powershell-7-a-powerful-cross-platform-tool&#34;&gt;PowerShell 7: A Powerful Cross-Platform Tool
&lt;/h2&gt;&lt;h3 id=&#34;cross-platform-features&#34;&gt;Cross-platform features
&lt;/h3&gt;&lt;p&gt;PowerShell 7 removes platform limitations, allowing users to utilize a single tool for enterprise-level server management on Windows, system administration in Linux environments, or everyday development tasks on macOS. This significantly improves work efficiency and reduces learning costs and operational complexity caused by platform differences.&lt;/p&gt;
&lt;h3 id=&#34;powerful-features&#34;&gt;Powerful features
&lt;/h3&gt;&lt;p&gt;It features robust scripting capabilities, supporting object-oriented programming, functions, and modules. With PowerShell 7, users can easily manage the file system (creating, deleting, copying, moving files and folders), access and modify the registry for in-depth system configuration, and manage processes and services for effective monitoring and control. Furthermore, PowerShell 7 integrates with various Windows and non-Windows technologies, such as user and permission management in Active Directory and resource provisioning and management on Azure cloud platforms.&lt;/p&gt;
&lt;h3 id=&#34;open-source-ecosystem&#34;&gt;Open-source ecosystem
&lt;/h3&gt;&lt;p&gt;PowerShell 7 is open-source, enabling global developers and enthusiasts to actively participate in its development and improvement. A wealth of open-source modules and tools are constantly emerging, enriching PowerShell 7&amp;rsquo;s functionality and applications. Users can find suitable modules within the open-source community to extend PowerShell 7’s capabilities or contribute their own code to advance the entire community.&lt;/p&gt;
&lt;h3 id=&#34;compatibility-and-stability&#34;&gt;Compatibility and Stability
&lt;/h3&gt;&lt;p&gt;PowerShell 7 introduces numerous new features and improvements while maintaining compatibility with older PowerShell versions. These enhancements boost performance, increase stability, and allow users to complete tasks more smoothly, reducing interruptions due to software issues.&lt;/p&gt;
&lt;h2 id=&#34;open-command-line-prediction-view&#34;&gt;Open command-line prediction view
&lt;/h2&gt;&lt;p&gt;Among PowerShell 7&amp;rsquo;s many useful features, the &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; command is a practical tool that enhances the user’s command-line experience&lt;/p&gt;
&lt;p&gt;Without enabling the command, inline auto-completion is available. Enabling it provides predictive suggestions in a list format, allowing users to select options with arrow keys, improving accuracy and efficiency of command input.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-make-commands-persistent&#34;&gt;How to make commands persistent
&lt;/h2&gt;&lt;p&gt;To ensure a command takes effect each time PowerShell starts, you can add it to the PowerShell profile. The PowerShell profile is a special script that automatically executes its commands when PowerShell launches.&lt;/p&gt;
&lt;h3 id=&#34;confirm-configuration-file-path&#34;&gt;Confirm configuration file path
&lt;/h3&gt;&lt;p&gt;In PowerShell, we can use the &lt;code&gt;$_&lt;/code&gt; variable to view the configuration file path. If the file does not exist at that path, the user can create it manually.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;open-configuration-file&#34;&gt;Open configuration file
&lt;/h3&gt;&lt;p&gt;Open the file corresponding to the configuration file path obtained through the &lt;code&gt;__INLINE_CODE_0&lt;/code&gt; variable using a text editor, such as the powerful Notepad++ or the lightweight Visual Studio Code&lt;/p&gt;
&lt;h3 id=&#34;add-command&#34;&gt;Add command
&lt;/h3&gt;&lt;p&gt;Add the &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; command to the open configuration file. Ensure the command is written accurately to guarantee it takes effect when the configuration file is executed.&lt;/p&gt;
&lt;h3 id=&#34;save-configuration-file&#34;&gt;Save configuration file
&lt;/h3&gt;&lt;p&gt;After adding the command, save the configuration file and close the text editor. The configuration file now includes the commands we want to execute each time PowerShell starts.&lt;/p&gt;
&lt;h3 id=&#34;verification-settings&#34;&gt;Verification Settings
&lt;/h3&gt;&lt;p&gt;Close the current PowerShell window and restart it. In the newly launched PowerShell, when entering commands, the command-line input prediction view should display in a list format, indicating that our settings have taken effect successfully.&lt;/p&gt;
&lt;p&gt;Through these steps, we not only gained a deeper understanding of PowerShell 7&amp;rsquo;s powerful features and capabilities but also learned how to enhance the user experience by setting command-line input prediction views and ensuring these settings persist. We hope this knowledge helps you use PowerShell 7 more confidently and efficiently to complete various system management and automation tasks.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
