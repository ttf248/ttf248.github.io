<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Powershell on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/powershell/</link>
        <description>Recent content in Powershell on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Sun, 25 May 2025 02:57:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/powershell/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PowerShell 7 and Persistent Settings Command-Line Prediction View</title>
        <link>https://ttf248.life/en/p/powershell-7-persisting-settings-command-line-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/powershell-7-persisting-settings-command-line-prediction-view/</guid>
        <description>&lt;p&gt;I&amp;rsquo;m used to zsh on Linux, and when writing a blog post the other day, I suddenly discovered that PowerShell 7 also supports persistent settings for command-line prediction views. So I tried it out, and found it quite useful.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t know what operation was performed, but this feature is enabled â€“ it just appeared&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In today&amp;rsquo;s diverse operating system environment, system administrators and developers have been seeking a tool that is cross-platform, efficient, and powerful to meet their needs in system management and automation tasks. PowerShell 7 is precisely such a highly anticipated tool; it not only provides robust scripting capabilities but also enables operation across Windows, Linux, and macOS operating systems, bringing users unprecedented convenience.&lt;/p&gt;
&lt;h2 id=&#34;powershell-7-a-powerful-cross-platform-tool&#34;&gt;PowerShell 7: A Powerful Cross-Platform Tool
&lt;/h2&gt;&lt;h3 id=&#34;cross-platform-features&#34;&gt;Cross-platform features
&lt;/h3&gt;&lt;p&gt;PowerShell 7 breaks platform limitations, allowing users to utilize a single PowerShell 7 tool whether managing enterprise-level servers on Windows systems, performing system maintenance in Linux environments, or tackling everyday development tasks on macOS. This significantly improves work efficiency and reduces the learning curve and operational complexity caused by platform differences.&lt;/p&gt;
&lt;h3 id=&#34;powerful-features&#34;&gt;Powerful features
&lt;/h3&gt;&lt;p&gt;It possesses powerful scripting capabilities, supporting object-oriented programming, functions, modules, and other advanced programming features. Through PowerShell 7, users can easily operate the file system, creating, deleting, copying, and moving files and folders; access and modify the registry to make in-depth adjustments to the system configuration; and manage processes and services to effectively monitor and control the system&amp;rsquo;s running state. In addition, PowerShell 7 can also interact with various Windows and non-Windows technologies, such as user and permission management in Active Directory, resource allocation and management on the Azure cloud platform, etc.&lt;/p&gt;
&lt;h3 id=&#34;open-source-ecosystem&#34;&gt;Open-source ecosystem
&lt;/h3&gt;&lt;p&gt;PowerShell 7 is open-source, a feature that allows developers and enthusiasts worldwide to actively participate in its development and improvement. A large number of open-source modules and tools are constantly emerging, enriching the functionality and application scenarios of PowerShell 7. Users can find suitable modules within the open-source community to extend PowerShell 7&amp;rsquo;s capabilities based on their needs, or contribute their own code to promote the development of the entire community.&lt;/p&gt;
&lt;h3 id=&#34;compatibility-and-stability&#34;&gt;Compatibility and Stability
&lt;/h3&gt;&lt;p&gt;PowerShell 7 introduces many new features and improvements while maintaining compatibility with older versions of PowerShell. These enhancements not only improve performance but also enhance stability, allowing users to complete various tasks more smoothly and reducing work interruptions caused by software failures.&lt;/p&gt;
&lt;h2 id=&#34;open-command-line-prediction-view&#34;&gt;Open command-line prediction view
&lt;/h2&gt;&lt;p&gt;Among the many useful features of PowerShell 7, the &lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; command is a practical tool that can enhance the user&amp;rsquo;s command-line input experience&lt;/p&gt;
&lt;p&gt;Without enabling commands, inline auto-completion is still possible. However, this only provides completion within the current line. When enabled, it offers predictive suggestions displayed as a list of all potential options. Users can select the desired option using up and down arrow keys, thereby improving the accuracy and efficiency of command input.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-make-commands-persistent&#34;&gt;How to make commands persistent
&lt;/h2&gt;&lt;p&gt;To ensure that the &lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; command takes effect every time PowerShell starts, we can add it to PowerShell&amp;rsquo;s profile. A PowerShell profile is a special script that automatically executes its commands when PowerShell starts.&lt;/p&gt;
&lt;h3 id=&#34;confirm-configuration-file-path&#34;&gt;Confirm configuration file path
&lt;/h3&gt;&lt;p&gt;In PowerShell, we can use the &lt;code&gt;$PROFILE&lt;/code&gt; variable to view the configuration file path. If the file does not exist at that path, users can manually create one.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;open-the-configuration-file&#34;&gt;Open the configuration file
&lt;/h3&gt;&lt;p&gt;Open the file corresponding to the configuration file path obtained through the &lt;code&gt;$PROFILE&lt;/code&gt; variable using a text editor, such as the powerful Notepad++ or the lightweight Visual Studio Code&lt;/p&gt;
&lt;h3 id=&#34;add-command&#34;&gt;Add command
&lt;/h3&gt;&lt;p&gt;In the open configuration file, add the command &lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt;. Ensure the command is written accurately to guarantee that the configuration takes effect correctly when executed.&lt;/p&gt;
&lt;h3 id=&#34;save-configuration-file&#34;&gt;Save configuration file
&lt;/h3&gt;&lt;p&gt;After completing the command addition, save the configuration file and close the text editor. At this point, the configuration file already contains the commands we want to execute each time PowerShell starts.&lt;/p&gt;
&lt;h3 id=&#34;verification-settings&#34;&gt;Verification Settings
&lt;/h3&gt;&lt;p&gt;Close the current PowerShell window and restart PowerShell. In the newly started PowerShell, when entering commands, the command-line input prediction view style should be displayed in list view, indicating that our settings have taken effect successfully.&lt;/p&gt;
&lt;p&gt;Through the above steps, we not only gained a deeper understanding of the powerful features and capabilities of PowerShell 7, but also learned how to enhance the user experience by setting command-line input prediction views, and how to make these settings persistent. We hope this knowledge will help you become more proficient in using PowerShell 7 and efficiently complete various system management and automation tasks.&lt;/p&gt;
&lt;h2 id=&#34;reference-materials&#34;&gt;Reference materials
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
