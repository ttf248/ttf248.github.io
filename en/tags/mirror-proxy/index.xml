<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Mirror-Proxy on Uncle Xiang&#39;s Notebook</title>
        <link>https://ttf248.life/en/tags/mirror-proxy/</link>
        <description>Recent content in Mirror-Proxy on Uncle Xiang&#39;s Notebook</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Mon, 02 Jun 2025 20:54:02 +0800</lastBuildDate><atom:link href="https://ttf248.life/en/tags/mirror-proxy/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Docker Domestic Mirror Proxy Failed</title>
        <link>https://ttf248.life/en/p/docker-domestic-image-proxy-failure/</link>
        <pubDate>Sat, 04 Jan 2025 18:29:25 +0800</pubDate>
        
        <guid>https://ttf248.life/en/p/docker-domestic-image-proxy-failure/</guid>
        <description>&lt;p&gt;Deploying Docker on domestic servers, after deployment, if the company doesn’t provide a registry center, the first thing developers need to do is configure a domestic registry mirror address. It&amp;rsquo;s lucky that today there was a server configured with a registry mirror address, but when pulling images, it kept failing to pull.&lt;/p&gt;
&lt;p&gt;Error response from daemon: “https://registry-1.docker.io/v2/”: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)&lt;/p&gt;
&lt;!-- 20250106 – Two days after, all servers were restored, and this didn’t even make the news! All domestic registry mirrors went down --&gt;
&lt;h2 id=&#34;troubleshooting-and-repair-attempts&#34;&gt;Troubleshooting and Repair Attempts
&lt;/h2&gt;&lt;p&gt;Initially, we attempted to switch to alternative mirror acceleration addresses, hoping to resolve the issue. However, as expected, the problem persisted.&lt;/p&gt;
&lt;p&gt;Subsequently, we began modifying the local DNS configuration in an attempt to find a breakthrough at the network resolution level. Unfortunately, after debugging, the fault remained.&lt;/p&gt;
&lt;p&gt;At this point, the stability of the local network was heavily questioned, so we decisively switched to a mobile hotspot, attempting to bypass potential local network faults. However, the result was discouraging – there were no signs of improvement.&lt;/p&gt;
&lt;h2 id=&#34;problem-propagation&#34;&gt;Problem Propagation
&lt;/h2&gt;&lt;p&gt;We currently have &lt;strong&gt;a few servers deployed domestically&lt;/strong&gt; with Docker environments, and all of them failed to successfully pull the image. We initially hoped to find an alternative solution, but we found that they all consistently failed with identical error messages, indicating that the issue isn&amp;rsquo;t isolated to a single device.&lt;/p&gt;
&lt;p&gt;Further investigation revealed that the image proxy seemingly malfunctioned instantaneously. In this critical moment, we quickly switched to a machine outside of the country, and thankfully, image pulls were restored at this location. This suggests that the problem is likely related to the domestic network links or associated configurations.&lt;/p&gt;
&lt;h2 id=&#34;strategy-adjustment-circumventing-the-issue&#34;&gt;Strategy Adjustment: Circumventing the Issue
&lt;/h2&gt;&lt;p&gt;Given that direct image pulling methods within China have been heavily restricted, while foreign mirrors remain accessible, to expedite project progress, we’ve decided to employ a circumvention tactic. Initially, we switched to foreign servers to successfully pull the required images, subsequently pushing them to domestic mirror repositories to establish a “data bridge.”&lt;/p&gt;
&lt;p&gt;At the same time, we synchronized modifications to the Dockerfile files, replacing image addresses with those adapted for the Chinese environment and then rebuilt the images, ultimately achieving successful deployment.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
