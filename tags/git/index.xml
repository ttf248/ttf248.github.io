<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on 向叔记事簿</title>
        <link>https://ttf248.life/tags/git/</link>
        <description>Recent content in Git on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 07 May 2025 18:42:40 +0800</lastBuildDate><atom:link href="https://ttf248.life/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git修改历史记录中的递交信息</title>
        <link>https://ttf248.life/p/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9A%84%E9%80%92%E4%BA%A4%E4%BF%A1%E6%81%AF/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/p/git%E4%BF%AE%E6%94%B9%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9A%84%E9%80%92%E4%BA%A4%E4%BF%A1%E6%81%AF/</guid>
        <description>&lt;p&gt;脚本用于批量修改 Git 历史提交的作者信息，通过 git filter-branch 重写历史提交记录。&lt;/p&gt;
&lt;p&gt;您提供的脚本用于批量修改 Git 仓库历史提交中的作者信息，整体思路是正确的，但在 &lt;code&gt;git filter-branch&lt;/code&gt; 的 &lt;code&gt;--env-filter&lt;/code&gt; 中使用数组（如 &lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;）可能会导致兼容性问题，因为某些 shell 环境（如 &lt;code&gt;/bin/sh&lt;/code&gt;）并不支持数组语法。&lt;/p&gt;
&lt;p&gt;为提高兼容性，建议将数组替换为以空格分隔的字符串，并使用 &lt;code&gt;for&lt;/code&gt; 循环遍历每个旧邮箱地址。以下是修改后的脚本示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在执行此脚本之前，建议备份您的仓库，以防止意外情况发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此操作会重写 Git 历史，修改提交的作者信息，可能会导致提交哈希值发生变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果您已经将更改推送到远程仓库，需要使用强制推送：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --force --tags origin &#39;refs/heads/*&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请谨慎使用强制推送，尤其是在多人协作的项目中，以避免对他人造成影响。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;统计仓库所有的不重复作者邮箱&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Git禁用http仓库</title>
        <link>https://ttf248.life/p/git%E7%A6%81%E7%94%A8http%E4%BB%93%E5%BA%93/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/p/git%E7%A6%81%E7%94%A8http%E4%BB%93%E5%BA%93/</guid>
        <description>&lt;p&gt;习惯更新软件版本，不知道从哪个版本的&lt;code&gt;Git&lt;/code&gt;开始，禁止从&lt;code&gt;Http&lt;/code&gt;仓库拉取代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍
&lt;/h2&gt;&lt;p&gt;环境：Windows 平台，一直用的都是小乌龟来操作git，配置秘钥也是通过小乌龟来处理的，之前弄过一次脚本，批量更新本地的仓库&lt;/p&gt;
&lt;p&gt;前文链接：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/p/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0git%E4%BB%93%E5%BA%93%E5%92%8C%E5%8E%86%E5%8F%B2%E9%81%97%E7%95%99%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/&#34; &gt;批量更新本地Git仓库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天回家执行代码更新的时候，出现了前面的报错，仓库无法正常更新了，本想着&lt;code&gt;Git&lt;/code&gt;应该提供了配置，让我继续使用&lt;code&gt;http&lt;/code&gt;的协议更新仓库，找了一圈，也没翻到对应的配置项。&lt;/p&gt;
&lt;p&gt;最简单的解决方案当然是切换成&lt;code&gt;ssh&lt;/code&gt;协议来更新仓库，公司配置的&lt;code&gt;gitlab&lt;/code&gt;短期内不会提供&lt;code&gt;https&lt;/code&gt;协议。&lt;/p&gt;
&lt;h2 id=&#34;遗留问题&#34;&gt;遗留问题
&lt;/h2&gt;&lt;p&gt;前面编写批量更新本地仓库脚本的是时候，本来想着使用&lt;code&gt;ssh&lt;/code&gt;的方式拉取仓库，也没细查是因为什么，通过小乌龟配置的&lt;code&gt;git&lt;/code&gt;配置信息并没有同步到 config 中，导致通过命令行执行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull #提示没有权限，无法正常更新仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过命令检查秘钥配置也是正确的：&lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果你使用Git小乌龟（TortoiseGit）能够正常拉取代码，但在命令行中使用 git pull 命令时提示秘钥不对，这可能是因为Git小乌龟使用的是PuTTY的SSH密钥，而命令行使用的是OpenSSH的SSH密钥。&lt;/p&gt;
&lt;p&gt;小乌龟的秘钥配置，不会从系统 .ssh 文件夹读取秘钥文件信息，而是通过界面仓库配置的时候，单独配置秘钥文件的路径，有用的小技巧：拉取的第一个仓库配置了秘钥即可让其余仓库都复用这个秘钥文件，PuTTY 加载秘钥以后，不会立即退出，而是启动了一个代理服务。&lt;/p&gt;
&lt;p&gt;通过调整全局配置，不使用系统默认的&lt;code&gt;ssh&lt;/code&gt;配置，这样配置后，Git Bash 将使用 TortoisePlink 进行 SSH 操作。这种配置适用于使用 TortoiseGit 自带的 PuTTY 工具的情况。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面配置的执行文件文件路径自行修改到对应的小乌龟路径，由于配置的完整路径，无需添加路径到系统环境变量中。&lt;/p&gt;</description>
        </item>
        <item>
        <title>批量更新本地Git仓库和历史遗留的权限问题</title>
        <link>https://ttf248.life/p/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0git%E4%BB%93%E5%BA%93%E5%92%8C%E5%8E%86%E5%8F%B2%E9%81%97%E7%95%99%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/p/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0git%E4%BB%93%E5%BA%93%E5%92%8C%E5%8E%86%E5%8F%B2%E9%81%97%E7%95%99%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;p&gt;组里的项目之间存在依赖关系，由于历史原因，并未使用&lt;code&gt;submodule&lt;/code&gt;维护项目的依赖，日常开发需要手动依次更新仓库代码，否则可能碰到各种奇怪的问题。&lt;/p&gt;
&lt;p&gt;参考网上的资料，结构基本都类似，本地手动维护一份仓库目录：&lt;strong&gt;git_list.txt&lt;/strong&gt;，编写脚本遍历目录，一次执行更新，以后开工前先执行下脚本&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ 更新仓库 ===================&amp;quot;

# 检查 git_list.txt 是否存在
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。&amp;quot;
  exit 1
else
  echo &amp;quot;============ 检测到了 git 仓库清单文件 ====&amp;quot;
fi

# 逐行读取 git_list.txt 中的 URL，并执行拉取操作
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url 完成！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;目录 $url 不存在，跳过拉取。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;windows
&lt;/h2&gt;&lt;p&gt;create a new file: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem 进入脚本所在目录
cd /d &amp;quot;%~dp0&amp;quot;

rem 检查 git_list.txt 是否存在
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。
  exit /b 1
) else (
  echo ============ 检测到了 git 仓库清单文件 ====
)

rem 逐行读取 git_list.txt 中的 URL，并执行拉取操作
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i 完成！
    echo ========================================
  ) else (
    echo 目录 %%i 不存在，跳过拉取。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;历史遗留问题&#34;&gt;历史遗留问题
&lt;/h3&gt;&lt;p&gt;顺带处理重装系统以后碰到的&lt;code&gt;git&lt;/code&gt;文件夹权限文件：&lt;strong&gt;Fatal error &amp;ldquo;unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网上建议的做法大多来源自&lt;code&gt;stack overflow&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仓库目录添加信任: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;手动修改配置文件&lt;code&gt;.gitconfig&lt;/code&gt;，指定目录添加信任&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的方式处理以后，仓库更新是正常了，每次执行&lt;code&gt;git pull&lt;/code&gt;控制台都有很多警告信息，提示用户所有者错误&lt;/p&gt;
&lt;h3 id=&#34;台式机重装系统&#34;&gt;台式机重装系统
&lt;/h3&gt;&lt;p&gt;开发的机器，太久没有重装系统，系统盘垃圾文件爆炸，没辙，抽空重装了一波系统，再次碰到这个权限的问题，以前的脚本跑不通，修改的权限不完整&lt;/p&gt;
&lt;p&gt;用上新的方案，直接添加&lt;code&gt;*&lt;/code&gt;，这样&lt;code&gt;git&lt;/code&gt;会自动信任所有目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;不知道是用户权限的问题，还是大家没习惯&lt;code&gt;windows&lt;/code&gt;平台其实也有类似&lt;code&gt;chown&lt;/code&gt;的命令，修改文件夹所有者，当然如果你的目录不多，手动修改所有者也行，但是这台工作电脑添加了域信息，不知道是公司部署的域存在异常，还是本地系统设置存在异常，用户清单中，找不到登录所用的用户，最后还是通过命令行处理的。&lt;/p&gt;
&lt;p&gt;管理员权限，执行&lt;code&gt;powershell&lt;/code&gt;脚本&lt;code&gt;change_ower.ps1&lt;/code&gt;，记得调整脚本文件编码为&lt;code&gt;gbk&lt;/code&gt;，中文操作系统，这样才不会乱码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 获取当前用户的用户名
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# 设置 PowerShell 的字符编码为 UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 要更改所有者的根目录路径
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 替换为实际的目录路径

# 递归遍历目录并更改文件和文件夹的所有者
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # 检查是文件还是文件夹
    if ($_ -is [System.IO.DirectoryInfo]) {
        # 如果是文件夹，使用 icacls 更改所有者权限
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        # 如果是文件，使用 icacls 更改所有者权限
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;已更改文件 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不出意外的还是出现了预料之外的情况，脚本执行输出的中文信息乱，尝试设置控制台的字符编码，调整脚本编码，输出的都是乱码，脑子那会大概率不清醒了，试着启用 控制面板-区域-语言设置的 beta 功能，全局开启 Unicode 编码，脚本执行是正常了，好几个开发软件都无法正常工作，回头梳理资料才想起来，调整脚本文件的编码，设置为 &lt;code&gt;gbk&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;资料&#34;&gt;资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>几个不常用GIT命令汇总</title>
        <link>https://ttf248.life/p/%E5%87%A0%E4%B8%AA%E4%B8%8D%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/p/%E5%87%A0%E4%B8%AA%E4%B8%8D%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</guid>
        <description>&lt;p&gt;不常用，但是很有用的&lt;code&gt;git&lt;/code&gt;命令&lt;/p&gt;
&lt;h3 id=&#34;重装系统导致windows上文件夹所有者信息变更&#34;&gt;重装系统导致&lt;code&gt;windows&lt;/code&gt;上文件夹所有者信息变更
&lt;/h3&gt;&lt;p&gt;新版本&lt;code&gt;git&lt;/code&gt;增加了安全性校验，提示不安全，导致无法继续操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;新电脑保存账号密码信息&#34;&gt;新电脑保存账号密码信息
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果保存的信息需要更新，先清理老的凭证&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
