<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>powershell on 向叔记事簿</title>
        <link>https://ttf248.life/tags/powershell/</link>
        <description>Recent content in powershell on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language><atom:link href="https://ttf248.life/tags/powershell/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PowerShell 7 与持久化设置命令行预测视图</title>
        <link>https://ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/</guid>
        <description>&lt;p&gt;用习惯了 Linux 上面的 zsh，前两天写博客的时候，突然发现 PowerShell 7 也支持持久化设置命令行预测视图，于是就试了一下，发现还是挺好用的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也不知道是做了什么操作，开启了这个功能，反正就是有了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在当今多样化的操作系统环境下，系统管理员和开发者们一直在寻找一款能够跨平台、高效且功能强大的工具，以满足他们在系统管理和自动化任务方面的需求。PowerShell 7正是这样一款备受瞩目的工具，它不仅提供了强大的脚本编写能力，还实现了跨Windows、Linux和macOS等操作系统的运行，为用户带来了前所未有的便利。&lt;/p&gt;
&lt;h2 id=&#34;powershell-7跨平台的强大工具&#34;&gt;PowerShell 7：跨平台的强大工具
&lt;/h2&gt;&lt;h3 id=&#34;跨平台特性&#34;&gt;跨平台特性
&lt;/h3&gt;&lt;p&gt;PowerShell 7打破了平台的限制，无论是在Windows系统上进行企业级的服务器管理，还是在Linux环境下进行系统运维，亦或是在macOS上进行日常开发任务，用户都可以使用统一的PowerShell 7工具。这极大地提高了工作效率，减少了因平台差异而带来的学习成本和操作复杂性。&lt;/p&gt;
&lt;h3 id=&#34;强大的功能&#34;&gt;强大的功能
&lt;/h3&gt;&lt;p&gt;它具备强大的脚本编写能力，支持面向对象编程、函数、模块等高级编程特性。通过PowerShell 7，用户可以轻松地操作文件系统，对文件和文件夹进行创建、删除、复制、移动等操作；可以访问和修改注册表，对系统的配置进行深度调整；能够管理进程和服务，实现对系统运行状态的有效监控和控制。此外，PowerShell 7还能与各种Windows和非Windows技术进行交互，例如在Active Directory中进行用户和权限管理，在Azure云平台上进行资源调配和管理等。&lt;/p&gt;
&lt;h3 id=&#34;开源生态&#34;&gt;开源生态
&lt;/h3&gt;&lt;p&gt;PowerShell 7是开源的，这一特性使得全球的开发者和爱好者能够积极参与到它的开发和改进中来。大量的开源模块和工具不断涌现，丰富了PowerShell 7的功能和应用场景。用户可以根据自己的需求，在开源社区中找到合适的模块来扩展PowerShell 7的功能，或者贡献自己的代码，推动整个社区的发展。&lt;/p&gt;
&lt;h3 id=&#34;兼容性与稳定性&#34;&gt;兼容性与稳定性
&lt;/h3&gt;&lt;p&gt;PowerShell 7在保持对旧版本PowerShell一定兼容性的同时，引入了许多新的功能和改进。这些改进不仅提升了性能，还增强了稳定性，使得用户在使用过程中能够更加流畅地完成各种任务，减少了因软件故障而导致的工作中断。&lt;/p&gt;
&lt;h2 id=&#34;开启命令行预测视图&#34;&gt;开启命令行预测视图
&lt;/h2&gt;&lt;p&gt;在PowerShell 7的众多实用功能中，&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; 命令是一个能够提升用户命令行输入体验的实用工具。&lt;/p&gt;
&lt;p&gt;不开启命令，也能实现自动补全，但是仅仅是行内的补全，开启后，可以实现预测视图，以列表的形式展示所有可能的补全选项，用户可以通过上下键选择需要的选项，从而提高了命令输入的准确性和效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;让命令持久生效的方法&#34;&gt;让命令持久生效的方法
&lt;/h2&gt;&lt;p&gt;为了让 &lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; 命令在每次启动PowerShell时都能生效，我们可以将其添加到PowerShell的配置文件中。PowerShell的配置文件是一个特殊的脚本，在PowerShell启动时会自动执行其中的命令。&lt;/p&gt;
&lt;h3 id=&#34;确定配置文件路径&#34;&gt;确定配置文件路径
&lt;/h3&gt;&lt;p&gt;在PowerShell中，我们可以使用 &lt;code&gt;$PROFILE&lt;/code&gt; 变量来查看配置文件的路径。如果该路径下的文件不存在，用户可以手动创建一个。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;打开配置文件&#34;&gt;打开配置文件
&lt;/h3&gt;&lt;p&gt;使用文本编辑器，如功能强大的Notepad++或者轻量级的Visual Studio Code，打开通过 &lt;code&gt;$PROFILE&lt;/code&gt; 变量获取到的配置文件路径对应的文件。&lt;/p&gt;
&lt;h3 id=&#34;添加命令&#34;&gt;添加命令
&lt;/h3&gt;&lt;p&gt;在打开的配置文件中，添加 &lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; 命令。确保命令的书写准确无误，以保证配置文件在执行时能够正确生效。&lt;/p&gt;
&lt;h3 id=&#34;保存配置文件&#34;&gt;保存配置文件
&lt;/h3&gt;&lt;p&gt;完成命令添加后，保存配置文件并关闭文本编辑器。此时，配置文件已经包含了我们希望在每次PowerShell启动时执行的命令。&lt;/p&gt;
&lt;h3 id=&#34;验证设置&#34;&gt;验证设置
&lt;/h3&gt;&lt;p&gt;关闭当前的PowerShell窗口，重新启动PowerShell。在新启动的PowerShell中，输入命令时，命令行输入预测视图样式应该已经按照我们的设置，以列表视图的形式展示，这表明我们的设置已经成功生效。&lt;/p&gt;
&lt;p&gt;通过以上步骤，我们不仅深入了解了PowerShell 7的强大功能和特性，还掌握了如何通过设置命令行输入预测视图样式来提升操作体验，并且学会了如何让这些设置持久生效。希望这些知识能够帮助你在使用PowerShell 7的过程中更加得心应手，高效地完成各种系统管理和自动化任务。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
