<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>位操作 on 向叔记事簿</title>
        <link>https://ttf248.life/tags/%E4%BD%8D%E6%93%8D%E4%BD%9C/</link>
        <description>Recent content in 位操作 on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 06 Feb 2025 22:38:41 +0800</lastBuildDate><atom:link href="https://ttf248.life/tags/%E4%BD%8D%E6%93%8D%E4%BD%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C&#43;&#43; 位操作基础：按位取值与标志位设置</title>
        <link>https://ttf248.life/p/c-%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80%E6%8C%89%E4%BD%8D%E5%8F%96%E5%80%BC%E4%B8%8E%E6%A0%87%E5%BF%97%E4%BD%8D%E8%AE%BE%E7%BD%AE/</link>
        <pubDate>Fri, 17 Jan 2025 02:23:56 +0800</pubDate>
        
        <guid>https://ttf248.life/p/c-%E4%BD%8D%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80%E6%8C%89%E4%BD%8D%E5%8F%96%E5%80%BC%E4%B8%8E%E6%A0%87%E5%BF%97%E4%BD%8D%E8%AE%BE%E7%BD%AE/</guid>
        <description>&lt;p&gt;在实际的C++开发中，位操作是常见的技术，尤其在处理系统状态、标志位或控制位时，位操作可以提供非常高效的解决方案。本文将通过一个例子，讲解如何使用位操作来获取和设置特定的标志位。&lt;/p&gt;
&lt;h3 id=&#34;位操作基础概念&#34;&gt;位操作基础概念
&lt;/h3&gt;&lt;p&gt;在计算机中，数据是以二进制位（0和1）存储的。位操作就是对二进制位进行操作。C++中有几种常用的位操作符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按位与（&amp;amp;）&lt;/strong&gt;：用于检查某一位是否为1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按位或（|）&lt;/strong&gt;：用于设置某一位为1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按位异或（^）&lt;/strong&gt;：用于反转某一位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按位取反（~）&lt;/strong&gt;：将所有位反转。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左移（&amp;laquo;）&lt;/strong&gt;：将所有位左移若干位。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右移（&amp;raquo;）&lt;/strong&gt;：将所有位右移若干位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本例中，我们需要对一个 &lt;code&gt;unsigned short&lt;/code&gt; 类型的变量 &lt;code&gt;wInfo&lt;/code&gt; 进行一系列的位操作，通过不同的标志位来表示不同的状态。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR
    A[原始数值: 00010000] --&amp;gt; B[左移: 00010000 &amp;lt;&amp;lt; 1]
    B --&amp;gt; C[结果: 00100000]
    C --&amp;gt; D[右移: 00100000 &amp;gt;&amp;gt; 1]
    D --&amp;gt; E[结果: 00010000]

    subgraph 左移操作
        direction LR
        A --&amp;gt; B --&amp;gt; C
    end

    subgraph 右移操作
        direction LR
        C --&amp;gt; D --&amp;gt; E
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;需求解析&#34;&gt;需求解析
&lt;/h3&gt;&lt;p&gt;根据题目中的描述，我们有一个 16 位的标志位，用来表示不同的状态。这些状态通过各个不同的二进制位来表示，每个二进制位对应一种特定的含义。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bit0&lt;/strong&gt; 是否失败&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit1&lt;/strong&gt; 是否压缩&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit2&lt;/strong&gt; 是否增量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit3&lt;/strong&gt; 是否有后续包&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit5&lt;/strong&gt; 正常请求或注销&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用位操作实现&#34;&gt;使用位操作实现
&lt;/h3&gt;&lt;p&gt;我们将通过位操作来设置和获取这些标志位。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按位取值&lt;/strong&gt;：获取某一位的值（0或1）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按位设置&lt;/strong&gt;：设置某一位为1。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按位清除&lt;/strong&gt;：设置某一位为0。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们首先定义一个 &lt;code&gt;unsigned short&lt;/code&gt; 类型的变量 &lt;code&gt;wInfo&lt;/code&gt; 来保存这些标志位。然后，我们通过位操作来检查和设置相应的标志。&lt;/p&gt;
&lt;h3 id=&#34;c-示例代码&#34;&gt;C++ 示例代码
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;bitset&amp;gt;

// 定义标志位常量
const unsigned short BIT_0_FAIL = 1 &amp;lt;&amp;lt; 0;    // bit0 是否失败
const unsigned short BIT_1_COMPRESSED = 1 &amp;lt;&amp;lt; 1; // bit1 是否压缩
const unsigned short BIT_2_INCREMENT = 1 &amp;lt;&amp;lt; 2;  // bit2 是否增量
const unsigned short BIT_3_HAS_MORE = 1 &amp;lt;&amp;lt; 3;   // bit3 是否有后续包
const unsigned short BIT_5_CANCEL = 1 &amp;lt;&amp;lt; 5;     // bit5 正常请求(0)或注销(1)

// 检查某一位是否为1
bool isBitSet(unsigned short wInfo, unsigned short bitMask) {
    return (wInfo &amp;amp; bitMask) != 0;
}

// 设置某一位为1
void setBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo |= bitMask;
}

// 清除某一位（设置为0）
void clearBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo &amp;amp;= ~bitMask;
}

int main() {
    // 假设wInfo的初始值为0
    unsigned short wInfo = 0;

    // 设置bit0（失败标志）
    setBit(wInfo, BIT_0_FAIL);
    
    // 设置bit1（压缩标志）
    setBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印wInfo的二进制值
    std::cout &amp;lt;&amp;lt; &amp;quot;wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    // 检查各个标志位
    std::cout &amp;lt;&amp;lt; &amp;quot;bit0 (是否失败): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_0_FAIL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit1 (是否压缩): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_1_COMPRESSED) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit2 (是否增量): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_2_INCREMENT) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit3 (是否有后续包): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_3_HAS_MORE) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit5 (是否注销): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_5_CANCEL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;

    // 清除bit1（压缩标志）
    clearBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印更新后的wInfo
    std::cout &amp;lt;&amp;lt; &amp;quot;Updated wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行代码，推荐老朋友：&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wInfo (in binary): 0000000000000011
bit0 (是否失败): 是
bit1 (是否压缩): 是
bit2 (是否增量): 否
bit3 (是否有后续包): 否
bit5 (是否注销): 否
Updated wInfo (in binary): 0000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;代码解释&#34;&gt;代码解释
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;标志位定义&lt;/strong&gt;：使用位移操作（&lt;code&gt;1 &amp;lt;&amp;lt; n&lt;/code&gt;）来定义各个标志位。例如，&lt;code&gt;1 &amp;lt;&amp;lt; 0&lt;/code&gt; 对应 &lt;code&gt;bit0&lt;/code&gt;，&lt;code&gt;1 &amp;lt;&amp;lt; 1&lt;/code&gt; 对应 &lt;code&gt;bit1&lt;/code&gt;，依此类推。这样，我们就为每个标志位分配了唯一的二进制位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查某一位&lt;/strong&gt;：&lt;code&gt;isBitSet&lt;/code&gt; 函数通过与运算 &lt;code&gt;wInfo &amp;amp; bitMask&lt;/code&gt; 来检查特定的标志位是否为1。如果该位为1，函数返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置某一位&lt;/strong&gt;：&lt;code&gt;setBit&lt;/code&gt; 函数通过按位或操作 &lt;code&gt;wInfo |= bitMask&lt;/code&gt; 来将特定的标志位置为1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;清除某一位&lt;/strong&gt;：&lt;code&gt;clearBit&lt;/code&gt; 函数通过按位与操作 &lt;code&gt;wInfo &amp;amp;= ~bitMask&lt;/code&gt; 来将特定的标志位置为0。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;通过位操作，我们能够高效地处理多个状态标志位。在实际开发中，这种技术尤其有用。例如，在嵌入式开发、网络协议、系统状态管理等场景中，常常使用位标志来表示多个二进制状态，既节省空间又提高效率。&lt;/p&gt;
&lt;p&gt;希望这篇博客能够帮助你理解如何在 C++ 中使用位操作来实现按位取值和设置，掌握这些技能对编写高效且易于维护的代码非常有帮助！&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
