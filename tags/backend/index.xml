<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>后端 on 向叔记事簿</title>
        <link>https://ttf248.life/tags/backend/</link>
        <description>Recent content in 后端 on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language><atom:link href="https://ttf248.life/tags/backend/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>老毛病，繁花迷人眼</title>
        <link>https://ttf248.life/p/old-ailment-stunning-flowers/</link>
        <pubDate>Mon, 26 May 2025 23:54:12 +0800</pubDate>
        
        <guid>https://ttf248.life/p/old-ailment-stunning-flowers/</guid>
        <description>&lt;p&gt;多年来一直专注于后端开发，最近开始尝试探索 &lt;code&gt;AI&lt;/code&gt; 编程，并涉足了一些前端相关的内容。然而，在这段折腾的过程中，我逐渐意识到自己又陷入了一个老毛病——繁花迷人眼。总想着用 &lt;code&gt;AI&lt;/code&gt; 来实现一个前端界面，但实际上，这样的尝试对于当前的工作并没有太大的实际帮助，反而分散了精力。&lt;/p&gt;
&lt;h2 id=&#34;ai-的适用场景&#34;&gt;AI 的适用场景
&lt;/h2&gt;&lt;p&gt;在小型项目中，AI 工具的确能够发挥巨大的作用，尤其是在编写那些独立性强、与系统耦合度低、业务逻辑简单的函数时更显得得心应手。这类任务通常有明确的输入输出，且上下文依赖较少，非常适合当前 AI 辅助编程的能力范围。&lt;/p&gt;
&lt;p&gt;然而，当面对复杂的系统架构或深度的业务逻辑时，AI 的局限性就会逐渐显现。它可能会生成看似合理但实际上脱离项目真实需求的代码，甚至引入一些难以排查的潜在问题。在这些场景下，AI 更适合作为辅助工具，而非完全依赖的代码生成器。我们需要对生成的代码进行严格的审查和测试，确保其符合实际需求。&lt;/p&gt;
&lt;h2 id=&#34;错误与学习的代价&#34;&gt;错误与学习的代价
&lt;/h2&gt;&lt;p&gt;在尝试用 AI 生成前端代码的过程中，我发现自己面临了许多挑战。由于前端并不是我熟悉的领域，排查问题的过程往往耗时耗力。即使通过调整提示词让 AI 重写代码，也难以避免一些低级错误的出现。这种反复尝试不仅浪费了时间，还让我意识到，当前的精力更应该集中在后端的业务逻辑上，而不是在不熟悉的领域中摸索。&lt;/p&gt;
&lt;p&gt;回想起周末完成的那个项目，我更加确信，专注于后端开发和用户交互逻辑，通过控制台来实现功能，才是当前最有效率的选择。等到有更多的时间和精力时，再系统地学习前端知识，或许会是更好的策略。&lt;/p&gt;
&lt;h2 id=&#34;前端学习的计划&#34;&gt;前端学习的计划
&lt;/h2&gt;&lt;p&gt;前端技术栈繁杂多样，想要快速上手并不现实。我计划先选择一个框架，比如 Vue.js 或 React.js，深入学习其核心概念和使用方法。只有在熟悉了基础知识之后，再尝试用 AI 辅助生成前端代码，才能有效避免因不熟悉而导致的错误和时间浪费。&lt;/p&gt;
&lt;p&gt;总之，当前阶段的重点还是要放在后端开发上，稳扎稳打地提升自己的核心技能。等到时机成熟，再去探索前端和 AI 的结合，或许会有更大的收获。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
