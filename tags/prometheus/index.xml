<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>prometheus on 向叔记事簿</title>
        <link>https://ttf248.life/tags/prometheus/</link>
        <description>Recent content in prometheus on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language><atom:link href="https://ttf248.life/tags/prometheus/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Prometheus监控系统Histogram和Summary</title>
        <link>https://ttf248.life/p/prometheus-monitoring-system-histogram-and-summary/</link>
        <pubDate>Wed, 04 Jun 2025 19:00:28 +0800</pubDate>
        
        <guid>https://ttf248.life/p/prometheus-monitoring-system-histogram-and-summary/</guid>
        <description>&lt;p&gt;业务系统设计了 Summary 类型的监控指标，计算平均耗时：request_duration_milliseconds_sum / request_duration_milliseconds_count。&lt;/p&gt;
&lt;p&gt;查看数据，发现某个接口平均耗时很高，翻看时序图，平均耗时是突然增加的，等于就是某次请求耗时很高，拉高了平均值，想查具体是什么时候发生的请求，由于时段内的请求太少，查出来的数据一直空。&lt;/p&gt;
&lt;h3 id=&#34;-为什么-_sum-和-_count-有数据&#34;&gt;✅ 为什么 &lt;code&gt;_sum&lt;/code&gt; 和 &lt;code&gt;_count&lt;/code&gt; 有数据
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_sum&lt;/code&gt; 和 &lt;code&gt;_count&lt;/code&gt; 是 Summary 类型的&lt;strong&gt;核心指标&lt;/strong&gt;，Prometheus 始终会采集并记录这两个值；&lt;/li&gt;
&lt;li&gt;它们是&lt;strong&gt;累积型的 counter&lt;/strong&gt;，适合用 &lt;code&gt;rate()&lt;/code&gt; 或 &lt;code&gt;increase()&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;无论请求延迟如何变化，只要有请求，就一定会有 &lt;code&gt;_sum&lt;/code&gt; 和 &lt;code&gt;_count&lt;/code&gt; 数据；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-为什么-quantile099-可能无法在时序图中展示&#34;&gt;❌ 为什么 &lt;code&gt;{quantile=&amp;quot;0.99&amp;quot;}&lt;/code&gt; 可能&lt;strong&gt;无法在时序图中展示&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;哪怕 Summary 配置了 quantile=&amp;ldquo;0.99&amp;rdquo;，这个时间序列也可能不存在或缺失&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;指标肯定是配置了，数据也没有过期，📉 请求量太小，quantile 无法计算，滑动窗口机制，过了这段时间，就不会再纳入统计范围。&lt;/p&gt;
&lt;p&gt;分位数（如 p99）是通过采样统计计算的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果某段时间内请求数太少（如 1~2 个请求），p99 的计算是&lt;strong&gt;不稳定或没有代表意义&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;Prometheus &lt;strong&gt;客户端 SDK 会选择不暴露该 quantile 时间序列&lt;/strong&gt;，以避免误导；&lt;/li&gt;
&lt;li&gt;所以你会看到 &lt;code&gt;_sum&lt;/code&gt;、&lt;code&gt;_count&lt;/code&gt; 正常累加，但 &lt;code&gt;quantile=&amp;quot;0.99&amp;quot;&lt;/code&gt; 没数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;histogram-和-summary-的区别&#34;&gt;Histogram 和 Summary 的区别
&lt;/h3&gt;&lt;h4 id=&#34;1-histogram&#34;&gt;1. &lt;strong&gt;Histogram&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作原理&lt;/strong&gt;:&lt;br&gt;
Histogram 会将数据分桶（buckets），记录每个桶中落入的样本数量。&lt;br&gt;
例如，定义的桶为 &lt;code&gt;[10ms, 50ms, 100ms, 500ms, 1s]&lt;/code&gt;，每次请求的耗时会被归入对应的桶中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以在 Prometheus 中聚合多个实例的数据（例如多个服务节点的请求耗时分布）。&lt;/li&gt;
&lt;li&gt;适合计算分位数（如 P50、P95、P99）和观察耗时分布。&lt;/li&gt;
&lt;li&gt;提供了灵活的查询能力，支持通过 PromQL 动态计算分位数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要预定义桶的范围，选择不当可能导致数据分布不均（例如，所有请求都落在一个桶中）。&lt;/li&gt;
&lt;li&gt;桶的数量越多，存储和计算的开销越大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要聚合多个实例的数据。&lt;/li&gt;
&lt;li&gt;需要动态调整分位数或分析耗时分布。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-summary&#34;&gt;2. &lt;strong&gt;Summary&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作原理&lt;/strong&gt;:&lt;br&gt;
Summary 会在客户端直接计算分位数（如 P50、P95、P99），并将结果上报到 Prometheus。&lt;br&gt;
它还会记录样本的总数和总和，用于计算平均值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要预定义桶，直接提供分位数结果。&lt;/li&gt;
&lt;li&gt;适合单实例的精确分位数计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分位数的计算是在客户端完成的，无法在 Prometheus 中聚合多个实例的数据。&lt;/li&gt;
&lt;li&gt;如果需要调整分位数（如从 P95 改为 P99），需要修改代码并重新部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单实例监控，且对分位数的精确性要求较高。&lt;/li&gt;
&lt;li&gt;不需要聚合多个实例的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-主要区别对比&#34;&gt;3. &lt;strong&gt;主要区别对比&lt;/strong&gt;
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;Histogram&lt;/th&gt;
&lt;th&gt;Summary&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;分位数计算&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;在 Prometheus 中动态计算&lt;/td&gt;
&lt;td&gt;在客户端直接计算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;多实例聚合&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;支持&lt;/td&gt;
&lt;td&gt;不支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;桶的定义&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;需要预定义&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;存储开销&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;取决于桶的数量&lt;/td&gt;
&lt;td&gt;固定开销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;灵活性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;高（可动态调整分位数）&lt;/td&gt;
&lt;td&gt;低（需修改代码调整分位数）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-总结&#34;&gt;4. &lt;strong&gt;总结&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;如果需要聚合多个实例的数据，或者需要灵活调整分位数，选择 &lt;strong&gt;Histogram&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果只需要单实例的精确分位数，且分位数固定，选择 &lt;strong&gt;Summary&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在你的场景中，由于服务是分布式的，建议优先使用 &lt;strong&gt;Histogram&lt;/strong&gt;，这样可以在 Prometheus 中聚合所有实例的数据，并动态计算分位数和耗时分布。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;滑动窗口的概念及其与-histogram-和-summary-的关系&#34;&gt;滑动窗口的概念及其与 Histogram 和 Summary 的关系
&lt;/h3&gt;&lt;h4 id=&#34;1-滑动窗口的概念&#34;&gt;1. &lt;strong&gt;滑动窗口的概念&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;滑动窗口是一种时间窗口机制，用于统计一段时间内的数据变化。它通过不断移动的时间范围，动态反映系统的实时状态。滑动窗口的特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;固定时间范围&lt;/strong&gt;：窗口的长度是固定的，例如最近 1 分钟、5 分钟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时更新&lt;/strong&gt;：随着时间的推移，窗口会滑动，旧的数据被移出窗口，新数据被加入窗口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常见用途&lt;/strong&gt;：用于计算实时指标（如请求速率、平均值、分位数等）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Prometheus 中，滑动窗口通常通过查询函数（如 &lt;code&gt;rate()&lt;/code&gt;、&lt;code&gt;avg_over_time()&lt;/code&gt;）实现。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-滑动窗口与-histogram-的关系&#34;&gt;2. &lt;strong&gt;滑动窗口与 Histogram 的关系&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Histogram 的数据结构&lt;/strong&gt;：&lt;br&gt;
Histogram 会将样本数据分桶，并记录每个桶的计数。Prometheus 会周期性地抓取这些计数值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;滑动窗口的实现&lt;/strong&gt;：&lt;br&gt;
在 Prometheus 中，可以通过查询语句对 Histogram 的数据应用滑动窗口。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate(http_request_duration_seconds_bucket[5m])&lt;/code&gt;：计算过去 5 分钟内每个桶的请求速率。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))&lt;/code&gt;：计算过去 5 分钟内的 P95 分位数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;滑动窗口可以动态反映最近一段时间的请求耗时分布。&lt;/li&gt;
&lt;li&gt;Histogram 的分桶机制与滑动窗口结合，可以高效计算分位数和分布。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-滑动窗口与-summary-的关系&#34;&gt;3. &lt;strong&gt;滑动窗口与 Summary 的关系&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Summary 的数据结构&lt;/strong&gt;：&lt;br&gt;
Summary 会在客户端直接计算分位数，并上报到 Prometheus。它还会记录样本总数和总和。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;滑动窗口的实现&lt;/strong&gt;：&lt;br&gt;
在 Prometheus 中，可以通过查询语句对 Summary 的数据应用滑动窗口。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m])&lt;/code&gt;：计算过去 5 分钟内的平均请求耗时。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;限制&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary 的分位数是客户端计算的，无法在 Prometheus 中重新计算分位数，因此滑动窗口对分位数的支持有限。&lt;/li&gt;
&lt;li&gt;如果需要聚合多个实例的数据，滑动窗口无法直接作用于 Summary 的分位数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-滑动窗口的适用场景&#34;&gt;4. &lt;strong&gt;滑动窗口的适用场景&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实时监控&lt;/strong&gt;：滑动窗口适合用于监控系统的实时状态，例如最近 1 分钟的请求速率、耗时分布等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常检测&lt;/strong&gt;：通过滑动窗口，可以快速发现短时间内的异常情况（如请求耗时突然增加）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态分析&lt;/strong&gt;：滑动窗口可以动态反映系统的变化趋势，而不是静态的全局统计。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;5-总结&#34;&gt;5. &lt;strong&gt;总结&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Histogram&lt;/strong&gt; 与滑动窗口结合，可以动态计算分位数（如 P95、P99）和请求耗时分布，适合分布式系统的监控。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summary&lt;/strong&gt; 与滑动窗口结合，可以计算平均值等简单指标，但分位数的灵活性较差，且不支持多实例聚合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在你的场景中，由于需要监控极端请求耗时（如 P99）和大部分请求的平均值，建议使用 &lt;strong&gt;Histogram&lt;/strong&gt;，并结合滑动窗口查询来动态分析系统的性能表现。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
