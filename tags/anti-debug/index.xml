<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Anti-Debug on 向叔记事簿</title>
        <link>https://ttf248.life/tags/anti-debug/</link>
        <description>Recent content in Anti-Debug on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 23 Jan 2024 20:05:34 +0800</lastBuildDate><atom:link href="https://ttf248.life/tags/anti-debug/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>程序如何反调试</title>
        <link>https://ttf248.life/p/%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E5%8F%8D%E8%B0%83%E8%AF%95/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://ttf248.life/p/%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E5%8F%8D%E8%B0%83%E8%AF%95/</guid>
        <description>&lt;p&gt;心血来潮，琢磨找找新壁纸，习惯黑色系列，部分区域彩色即可，桌面需要放置图标，其他色系作壁纸，图标就不清晰了。&lt;/p&gt;
&lt;p&gt;盯着上面的汇编代码思考一波，没看懂，尝试扔给&lt;code&gt;AI&lt;/code&gt;，解释了指令，没有解释场景，必然是某个特殊场景用到的指令，常规代码不是这样的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AI&lt;/code&gt;此时不如搜索引擎了，汇编的知识储备不足。&lt;/p&gt;
&lt;h2 id=&#34;壁纸&#34;&gt;壁纸
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E5%8F%8D%E8%B0%83%E8%AF%95/Snipaste_2024-01-23_19-50-53.png&#34;
	width=&#34;1020&#34;
	height=&#34;470&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;黑色汇编壁纸&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;汇编代码&#34;&gt;汇编代码
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实际应用场景&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解释说明&#34;&gt;解释说明
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TrapFlag&lt;/code&gt;是标志寄存器中的一个标志位，当这个标志位被设置时，会抛出异常&lt;code&gt;SINGLE_STEP&lt;/code&gt;，因为如果我们跟踪代码，这个标志位会被调试器清零，所以我们看不到这个异常。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际测试时发现，如果直接步过检测调试的函数，那么调试不会被检测到，只有步入检测函数执行时才会检测到(资料查询，尚未实际验证)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料
&lt;/h2&gt;&lt;p&gt;中文的相关资料，都是基于网站的英文稿子翻译，站点科普了很多种反调试的技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
