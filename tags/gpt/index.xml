<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Gpt on 向叔记事簿</title>
        <link>https://ttf248.github.io/tags/gpt/</link>
        <description>Recent content in Gpt on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 10 Jan 2025 00:07:38 +0800</lastBuildDate><atom:link href="https://ttf248.github.io/tags/gpt/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>探秘 ESP 分区、GPT 分区表与 Windows 操作系统的协同奥秘</title>
        <link>https://ttf248.github.io/p/%E6%8E%A2%E7%A7%98-esp-%E5%88%86%E5%8C%BAgpt-%E5%88%86%E5%8C%BA%E8%A1%A8%E4%B8%8E-windows-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%8F%E5%90%8C%E5%A5%A5%E7%A7%98/</link>
        <pubDate>Thu, 09 Jan 2025 23:58:20 +0800</pubDate>
        
        <guid>https://ttf248.github.io/p/%E6%8E%A2%E7%A7%98-esp-%E5%88%86%E5%8C%BAgpt-%E5%88%86%E5%8C%BA%E8%A1%A8%E4%B8%8E-windows-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%8F%E5%90%8C%E5%A5%A5%E7%A7%98/</guid>
        <description>&lt;p&gt;昨个下班到家，惯例启动台式机，系统启动正常，无法加载无线网卡，以为网卡松动了，拆机，重新安装无线网卡，问题大发了，系统直接无法启动，引导加载失败。&lt;/p&gt;
&lt;p&gt;太久没有折腾台式机，分区引导有点陌生，DisGenius 重新划分一个空白分区（一般习惯划分到磁盘前部），然后分配为 ESP 分区（默认300M），进入 PE 系统重建引导，相关资料网上都能查到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.github.io/p/%E6%8E%A2%E7%A7%98-esp-%E5%88%86%E5%8C%BAgpt-%E5%88%86%E5%8C%BA%E8%A1%A8%E4%B8%8E-windows-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%8F%E5%90%8C%E5%A5%A5%E7%A7%98/20250110000433.png&#34;
	width=&#34;330&#34;
	height=&#34;269&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;新建ESP分区&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.github.io/p/%E6%8E%A2%E7%A7%98-esp-%E5%88%86%E5%8C%BAgpt-%E5%88%86%E5%8C%BA%E8%A1%A8%E4%B8%8E-windows-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%8F%E5%90%8C%E5%A5%A5%E7%A7%98/20250110000509.png&#34;
	width=&#34;433&#34;
	height=&#34;355&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;可以去掉MSR分区&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;121&#34;
		data-flex-basis=&#34;292px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在计算机的存储世界里，ESP分区、GPT分区表和Windows操作系统紧密相连，它们各自扮演着独特且关键的角色，共同支撑起系统的稳定运行与高效管理。然而，在深入了解它们之前，不得不提及计算机分区历史长河中的“前辈”——MBR分区表格式，它与后来的新技术相互映照，更凸显出科技演进的脉络。今天，就让我们深入剖析它们的内在关联与精妙之处。&lt;/p&gt;
&lt;h2 id=&#34;一mbr分区表传统硬盘分区的基石&#34;&gt;一、MBR分区表——传统硬盘分区的“基石”
&lt;/h2&gt;&lt;p&gt;MBR，全称主引导记录（Master Boot Record），自个人计算机诞生初期便已存在，统治硬盘分区领域长达数十年之久。&lt;/p&gt;
&lt;h3 id=&#34;1-基本架构&#34;&gt;1. 基本架构
&lt;/h3&gt;&lt;p&gt;它位于硬盘的第一个扇区，也就是 0 号扇区，占用 512 字节空间。这 512 字节主要分为三个部分：一是引导程序代码，负责在计算机启动时加载操作系统的引导加载器，通常为 446 字节；二是磁盘分区表，占据 64 字节，最多可定义 4 个主分区信息，每个分区描述占用 16 字节，记录着分区的起始磁头、扇区、柱面，以及分区类型、大小等关键参数；最后 2 字节为 MBR 结束标志“55 AA”，用于标识该扇区为合法的 MBR。&lt;/p&gt;
&lt;h3 id=&#34;2-历史功绩与局限&#34;&gt;2. 历史功绩与局限
&lt;/h3&gt;&lt;p&gt;在早期，MBR 分区表完全满足了个人计算机相对简单的存储需求。它使得操作系统能够顺利识别硬盘分区，实现数据的有序存储与读取。但随着时代发展，其局限性愈发明显。一方面，受限于 64 字节的分区表空间，最多只能划分 4 个主分区，若要创建更多分区，需借助扩展分区及逻辑分区这种略显复杂的方式，给磁盘管理带来不便；另一方面，其最大仅支持 2TB 的硬盘容量，在如今动辄数 TB 甚至数十 TB 的大容量硬盘面前，显得力不从心，这成为制约存储技术进一步发展的瓶颈。&lt;/p&gt;
&lt;h2 id=&#34;二esp分区系统的隐形启动钥匙&#34;&gt;二、ESP分区——系统的“隐形启动钥匙”
&lt;/h2&gt;&lt;p&gt;ESP，全称为 EFI System Partition，即 EFI 系统分区。它是基于 UEFI（统一可扩展固件接口）标准的电脑所必需的一个特殊分区。&lt;/p&gt;
&lt;h3 id=&#34;1-功能特性&#34;&gt;1. 功能特性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动引导&lt;/strong&gt;：当电脑通电启动，UEFI 固件首先会在硬盘上寻找 ESP 分区，读取其中存放的启动加载程序（如 Windows Boot Manager），进而启动操作系统。这就像是一把精准的钥匙，开启系统启动的大门，没有它，系统将在开机时陷入迷茫，不知何去何从。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储驱动&lt;/strong&gt;：ESP 分区还存储了一些系统启动过程中必需的驱动程序，以确保在早期启动阶段，硬件设备（如硬盘控制器、显卡等）能正常工作，为后续操作系统的顺利接管奠定基础。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-空间需求与格式&#34;&gt;2. 空间需求与格式
&lt;/h3&gt;&lt;p&gt;通常情况下，ESP 分区建议大小在 100MB - 500MB 之间，一般分配 200MB 左右即可满足基本需求。其文件系统格式必须为 FAT32，这是因为 UEFI 固件只能识别 FAT32 格式来读取启动文件，确保了兼容性与跨平台性。&lt;/p&gt;
&lt;h2 id=&#34;三gpt分区表硬盘的智能管家&#34;&gt;三、GPT分区表——硬盘的“智能管家”
&lt;/h2&gt;&lt;p&gt;GPT（GUID Partition Table），即全局唯一标识分区表，是一种用来替代传统 MBR 分区表的新型分区方案。&lt;/p&gt;
&lt;h3 id=&#34;1-优势尽显&#34;&gt;1. 优势尽显
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大容量支持&lt;/strong&gt;：在如今这个数据爆炸的时代，大容量硬盘层出不穷。GPT 分区表突破了 MBR 的 2TB 容量限制，理论上它能够支持高达 9.4ZB（泽字节，1ZB = 1024 EB，1EB = 1024 PB，1PB = 1024 TB）的超大存储空间，为海量数据存储提供了可能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区数量多&lt;/strong&gt;：与 MBR 最多只能划分 4 个主分区不同，GPT 允许创建多达 128 个分区，这给予用户和系统管理员极大的灵活性，无论是划分多个系统分区、数据分区，还是为特殊用途预留分区，都游刃有余。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠性高&lt;/strong&gt;：GPT 分区表采用了冗余备份机制，在硬盘头部和尾部各保存一份分区表信息。当一处分区表损坏时，系统能够自动从另一处备份恢复，大大降低了因分区表故障导致的数据丢失风险，为数据安全保驾护航。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-结构剖析&#34;&gt;2. 结构剖析
&lt;/h3&gt;&lt;p&gt;GPT 分区表由多个部分组成，包括保护 MBR（这是为了兼容传统 BIOS 而保留的一小部分 MBR 结构，但不用于实际分区管理）、GPT 头（存储 GPT 分区表的基本信息，如分区表版本、分区数量、分区表大小等）以及分区项数组（每个分区项详细记录了分区的起始扇区、结束扇区、分区类型 GUID、分区唯一标识符等关键信息）。这些结构相互协作，精准地规划和管理硬盘空间。&lt;/p&gt;
&lt;h2 id=&#34;四windows操作系统用户的数字交互天地&#34;&gt;四、Windows操作系统——用户的“数字交互天地”
&lt;/h2&gt;&lt;p&gt;Windows 作为全球广泛使用的操作系统，构建起人与计算机硬件之间的友好桥梁。&lt;/p&gt;
&lt;h3 id=&#34;1-与-esp-分区和-gpt-分区表的融合&#34;&gt;1. 与 ESP 分区和 GPT 分区表的融合
&lt;/h3&gt;&lt;p&gt;在基于 UEFI 启动的 Windows 系统安装过程中，安装程序会自动创建 ESP 分区，并将启动文件部署其中。同时，会以 GPT 分区表格式对硬盘进行初始化，划分出系统保留分区（用于存放系统关键文件，类似传统 BIOS 下的系统引导文件区域）、Windows 系统分区（安装系统核心文件的地方）以及其他用户自定义的数据分区等。Windows 系统依靠 GPT 分区表精确识别各个分区，通过 ESP 分区顺利启动，三者无缝对接，为用户带来流畅的开机与使用体验。&lt;/p&gt;
&lt;h3 id=&#34;2-系统管理与优化依托&#34;&gt;2. 系统管理与优化依托
&lt;/h3&gt;&lt;p&gt;Windows 在运行过程中，充分利用 GPT 分区表的优势进行磁盘管理。例如，在磁盘管理工具中，能够轻松识别 GPT 分区，方便用户创建、删除、格式化分区，调整分区大小等操作，满足不同阶段的数据存储需求。而且，系统更新、软件安装等过程也与分区布局紧密相关，合理的分区规划有助于提升系统性能与稳定性，减少因磁盘空间不足或分区混乱引发的问题。&lt;/p&gt;
&lt;h2 id=&#34;五实战小贴士维护与故障排查&#34;&gt;五、实战小贴士：维护与故障排查
&lt;/h2&gt;&lt;p&gt;了解了它们的紧密关系，日常维护与故障排查就有章可循。&lt;/p&gt;
&lt;h3 id=&#34;1-磁盘空间管理&#34;&gt;1. 磁盘空间管理
&lt;/h3&gt;&lt;p&gt;定期检查 ESP 分区空间，避免因安装过多启动项相关软件导致空间不足，影响系统启动。对于 GPT 分区下的数据分区，合理规划存储，及时清理无用文件，防止单个分区爆满影响系统运行。&lt;/p&gt;
&lt;h3 id=&#34;2-启动故障排查&#34;&gt;2. 启动故障排查
&lt;/h3&gt;&lt;p&gt;若遇到系统无法启动，首先检查 ESP 分区是否损坏或文件丢失。可以借助 UEFI 固件自带的启动项修复工具，或者 Windows 安装介质进入修复环境，重建 ESP 分区的启动文件。若怀疑 GPT 分区表故障，利用专业磁盘工具（如 DiskGenius）检查分区表完整性，尝试修复备份分区表信息，找回丢失分区。&lt;/p&gt;
&lt;p&gt;ESP 分区、GPT 分区表和 Windows 操作系统宛如一个精密协作的团队，各自发挥专长，为我们打造稳定、高效的计算机使用环境。深入理解它们，不仅能帮助我们在系统安装、维护时得心应手，更能让我们洞悉计算机底层运行逻辑，畅游数字世界。与此同时，回顾 MBR 分区表的兴衰，更让我们感慨科技进步的力量，它推动着存储技术不断向前，以适应日益增长的数据存储需求。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Prompt 工程师</title>
        <link>https://ttf248.github.io/p/prompt-%E5%B7%A5%E7%A8%8B%E5%B8%88/</link>
        <pubDate>Sun, 26 Mar 2023 20:46:53 +0800</pubDate>
        
        <guid>https://ttf248.github.io/p/prompt-%E5%B7%A5%E7%A8%8B%E5%B8%88/</guid>
        <description>&lt;p&gt;就如当年学习搜索引擎的技巧，我们也需要学习一些和&lt;code&gt;AI&lt;/code&gt;沟通的技巧，给出合理且充分的限定条件，高效的获取需要的答案。&lt;/p&gt;
&lt;p&gt;如果你换个角度呢，当前的&lt;code&gt;AI&lt;/code&gt;属于一个记忆力很好的小孩子，它拥有过目不忘的能力，有抄作业的能力。我们需要做的是学会如何正确、有效的和&lt;code&gt;AI&lt;/code&gt;沟通，精准的描述需求，帮助&lt;code&gt;AI&lt;/code&gt;生成预期的结果。&lt;/p&gt;
&lt;h2 id=&#34;科普&#34;&gt;科普
&lt;/h2&gt;&lt;p&gt;火出天际的&lt;code&gt;AI&lt;/code&gt;确切的说&lt;code&gt;Generative Pre-Training&lt;/code&gt;，直译过来就是生成式的预训练。它是一种基于互联网可用数据训练的文本生成深度学习模型，用于问答、文本摘要生成、机器翻译、分类、代码生成和对话 AI 等任务。目前已经有 GPT-1、GPT-2、GPT-3 和 GPT-4 等不同版本的模型，每个版本都比前一个版本更大、更强大。&lt;/p&gt;
&lt;h2 id=&#34;到底有没有智能&#34;&gt;到底有没有智能
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;相似度足够高，准确率也就越高&lt;/li&gt;
&lt;li&gt;基础的、重复性的工作，进过特定训练，不再需要人工的介入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成式AI是一种利用现有的文本、音频、图像等数据来创建新内容的技术。它可以用于文本生成、语音合成、图像生成、对话系统等多种任务。生成式AI的逻辑性取决于它的训练数据和模型结构。一般来说，生成式AI可以在一定程度上遵循语法、逻辑和常识，但也可能出现错误、偏差或不真实的内容。因此，生成式AI的输出需要人类的判断和验证，不能盲目相信或使用。&lt;/p&gt;
&lt;h2 id=&#34;prompt-工程师&#34;&gt;Prompt 工程师
&lt;/h2&gt;&lt;p&gt;时间河流不会逆流，人需要学会适应潮流。你可以认为&lt;code&gt;AI&lt;/code&gt;不智能，没有逻辑性，它经常写出来不能用的代码。&lt;/p&gt;
&lt;p&gt;如果你换个角度呢，当前的&lt;code&gt;AI&lt;/code&gt;属于一个记忆力很好的小孩子，它拥有过目不忘的能力，有抄作业的能力。我们需要做的是学会如何正确、有效的和&lt;code&gt;AI&lt;/code&gt;沟通，精准的描述需求，帮助&lt;code&gt;AI&lt;/code&gt;生成预期的结果。&lt;/p&gt;
&lt;h2 id=&#34;对话模式&#34;&gt;对话模式
&lt;/h2&gt;&lt;p&gt;两年前&lt;code&gt;Github Copilot&lt;/code&gt;发布，谁也想不到两年后，&lt;code&gt;OpenAI&lt;/code&gt;横空出世，让人类认知到了大语言模型的能力。&lt;/p&gt;
&lt;p&gt;基于&lt;strong&gt;基于注释的编程&lt;/strong&gt;和&lt;strong&gt;基于对话的编程&lt;/strong&gt;，交互逻辑上完全不同，对话的模式，小白用户的交互体验友好，此处必须提到&lt;code&gt;NewBing&lt;/code&gt;在每个问题之后，给出的追问提示，微软在尝试引导用户，获取&lt;code&gt;AI&lt;/code&gt;知识库里面，更多的内容。&lt;/p&gt;
&lt;h2 id=&#34;举个栗子&#34;&gt;举个栗子
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：高铁旅途时间漫漫，编码是个不错的选择。流量有限的情况下，处理几个图片，获取了图片素材，下载软件处理图片稍微有点奢侈，网络条件也不允许。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：有一批图片素材，带透明背景图，用来作为小程序的导航栏，选中的状态是彩色的，没选中的状态是黑白的，素材都是彩色的，需要预处理一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prompt&lt;/strong&gt;：编写一段 python 代码，从一个文件夹中读取所有的图片，将图片转换成黑白，维持透明背景，保存图片的时候，优化图片的质量，减少文件体积，同时在控制台展示，优化前后的文件体积大小对比&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 导入必要的库
import os
import PIL
from PIL import Image

# 定义一个函数，将图片转换成黑白，维持透明背景，保存图片，并返回文件体积
def convert_and_save(image_file):
    # 打开图片
    image = Image.open(image_file)
    # 获取图片的模式，如果是 RGBA 模式，说明有透明背景
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 创建一个和图片大小一致的白色背景图片
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 将原图片粘贴到白色背景上，忽略透明像素
        background.paste(image, mask=image.split()[3])
        # 将合成的图片转换成灰度模式
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # 将灰度图片再转换成 RGBA 模式，以便保留透明背景
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # 如果不是 RGBA 模式，直接将图片转换成灰度模式
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 获取原图片的文件名和扩展名
    file_name, file_ext = os.path.splitext(image_file)
    # 定义新图片的文件名，添加 _bw 后缀表示黑白
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 保存新图片，并优化质量，减少文件体积
    final_image.save(new_file_name, optimize=True)
    # 获取原图片和新图片的文件体积，并返回
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return old_size, new_size

# 定义一个文件夹路径，存放所有的图片
folder_path = &amp;quot;images&amp;quot;
# 遍历文件夹中的所有文件
for file in os.listdir(folder_path):
    # 拼接完整的文件路径
    file_path = os.path.join(folder_path, file)
    # 判断是否是图片文件，根据扩展名判断，可以根据需要添加或修改扩展名
    if file_path.endswith((&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;)):
        # 调用函数，转换并保存图片，并获取文件体积
        old_size, new_size = convert_and_save(file_path)
        # 在控制台展示优化前后的文件体积大小对比
        print(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;AI&lt;/code&gt;迅速给出了答案，看着很漂亮，用起来也没问题，经验丰富的程序源，会觉得下面的代码不够通用，也没法上生产环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数固定了&lt;/li&gt;
&lt;li&gt;没有日志文件，信息都打印在控制台&lt;/li&gt;
&lt;li&gt;图片处理的任务，适合多线程模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NewBing&lt;/code&gt;登场，依据提示，选择了一个问题：&lt;strong&gt;这段代码有什么可以改进的地方吗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这次给的答案，实话，完全超出了预期，一般程序员能想到的优化措施，&lt;code&gt;AI&lt;/code&gt;都给出对应的建议&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;这段代码可能还有一些可以改进的地方，比如：

可以使用 argparse 库，让用户可以通过命令行参数指定文件夹路径和扩展名，而不是写死在代码里。
可以使用 logging 库，记录程序的运行情况，而不是直接打印到控制台。
可以使用 try-except 语句，捕获可能出现的异常，比如文件打开失败，图片转换失败等，并做相应的处理。
可以使用 multiprocessing 库，利用多核处理器，加速图片的转换和保存过程。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很友好的应答，考虑到部署的环境存在差异，允许不支持多进程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;当然，我很乐意帮你修改一下代码。我尝试添加了 argparse, logging 和 try-except 语句，但没有添加 multiprocessing 库，因为我不确定你的电脑是否支持多核处理。修改后的代码如下：
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 导入必要的库
import argparse
import logging
import multiprocessing
import os

from PIL import Image


# 定义一个函数，将图片转换成黑白，维持透明背景，保存图片，并返回文件体积
def convert_and_save(image_file):
    # 打开图片
    try:
        image = Image.open(image_file)
    except Exception as e:
        logging.error(f&amp;quot;Failed to open {image_file}: {e}&amp;quot;)
        return None, None
    # 获取图片的模式，如果是 RGBA 模式，说明有透明背景
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 创建一个和图片大小一致的白色背景图片
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 将原图片粘贴到白色背景上，忽略透明像素
        background.paste(image, mask=image.split()[3])
        # 将合成的图片转换成灰度模式
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # 将灰度图片再转换成 RGBA 模式，以便保留透明背景
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # 如果不是 RGBA 模式，直接将图片转换成灰度模式
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 获取原图片的文件名和扩展名
    file_name, file_ext = os.path.splitext(image_file)
    # 定义新图片的文件名，添加 _bw 后缀表示黑白
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 保存新图片，并优化质量，减少文件体积
    try:
        final_image.save(new_file_name, optimize=True)
    except Exception as e:
        logging.error(f&amp;quot;Failed to save {new_file_name}: {e}&amp;quot;)
        return None, None
    # 获取原图片和新图片的文件体积，并返回
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return file_name, old_size, new_size

# 定义一个函数，解析命令行参数，并返回文件夹路径和扩展名列表
def parse_args():
    # 创建一个解析器对象
    parser = argparse.ArgumentParser(description=&amp;quot;Convert images to black and white and optimize quality.&amp;quot;)
    # 添加一个必选的位置参数，表示文件夹路径
    parser.add_argument(&amp;quot;folder_path&amp;quot;, help=&amp;quot;The path of the folder that contains the images.&amp;quot;)
    # 添加一个可选的参数，表示扩展名列表，默认为 png, jpg, jpeg 和 gif
    parser.add_argument(&amp;quot;-e&amp;quot;, &amp;quot;--extensions&amp;quot;, nargs=&amp;quot;+&amp;quot;, default=[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;], help=&amp;quot;The extensions of the image files.&amp;quot;)
    # 解析命令行参数，并返回结果对象
    args = parser.parse_args()
    return args.folder_path, args.extensions

# 定义一个函数，打印优化前后的文件体积大小对比
def print_result(result):
    # 如果结果不为空，说明转换和保存成功
    if result:
        # 解包结果为文件名和文件体积元组
        if len(result) == 3:
            file, old_size, new_size = result
            # 在控制台展示优化前后的文件体积大小对比
            logging.info(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
        else:
            logging.info(f&amp;quot;{result}&amp;quot;)

# 配置日志记录器，将日志输出到控制台和文件中，设置日志等级为 INFO
logging.basicConfig(level=logging.INFO,
                    format=&amp;quot;%(asctime)s %(levelname)s %(message)s&amp;quot;,
                    handlers=[logging.StreamHandler(),
                              logging.FileHandler(&amp;quot;log.txt&amp;quot;)])

# 调用函数，获取文件夹路径和扩展名列表
folder_path, extensions = parse_args()

if __name__ == &amp;quot;__main__&amp;quot;:
    # Windows 需要这个函数的原因是 Windows 缺乏 fork() 函数（这不完全正确）。
    # 因此，在 Windows 上，fork() 是通过创建一个新的进程来模拟的，这个新的进程中运行的代码，在 Linux 上是在子进程中运行的。
    # 由于这些代码要在技术上无关的进程中运行，所以它必须在运行之前被传递到那里。
    # 传递的方式是先将它们序列化，然后通过管道从原始进程发送到新的进程。
    # 另外，这个新的进程被通知它必须运行通过管道传递的代码，通过向它传递 --multiprocessing-fork 命令行参数。
    # 如果你看一下 freeze_support() 函数的实现，它的任务是检查它运行在哪个进程中，是否应该运行通过管道传递的代码
    multiprocessing.freeze_support()

    # 创建一个进程池，根据电脑的核心数自动分配进程
    pool = multiprocessing.Pool()
    # 创建一个空列表，用于存放异步任务的结果对象
    results = []
    # 遍历文件夹中的所有文件
    for file in os.listdir(folder_path):
        # 拼接完整的文件路径
        file_path = os.path.join(folder_path, file)
        # 判断是否是图片文件，根据扩展名判断，可以根据需要修改扩展名列表
        if any(file_path.endswith(ext) for ext in extensions):
            # 调用函数，转换并保存图片，并获取文件体积，使用异步方式，不阻塞主进程
            result = pool.apply_async(convert_and_save, args=(file_path,), callback=print_result)
            # 将结果对象添加到列表中
            results.append((file, result))
    # 关闭进程池，不再接受新的任务
    pool.close()
    # 等待所有的任务完成
    pool.join()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;后记&#34;&gt;后记
&lt;/h2&gt;&lt;p&gt;由于本地开发是&lt;code&gt;windows&lt;/code&gt;系统，&lt;code&gt;AI&lt;/code&gt;第一次给出的答案，并没有加上&lt;code&gt;main&lt;/code&gt;函数，也没有&lt;code&gt;multiprocessing.freeze_support&lt;/code&gt;。通过追问发生的报错，修复了代码。&lt;/p&gt;
&lt;p&gt;就如当年学习搜索引擎的技巧，我们也需要学习一些和&lt;code&gt;AI&lt;/code&gt;沟通的技巧，给出合理且充分的限定条件，高效的获取需要的答案。&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;如果你是个编程新手，基于给出的注释，还有看不懂的地方，可以继续追问相关代码&lt;/strong&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
