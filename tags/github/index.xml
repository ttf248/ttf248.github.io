<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>github on 向叔记事簿</title>
        <link>https://ttf248.life/tags/github/</link>
        <description>Recent content in github on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language><atom:link href="https://ttf248.life/tags/github/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>日常碎碎念</title>
        <link>https://ttf248.life/p/daily-musings/</link>
        <pubDate>Thu, 19 Jun 2025 19:07:33 +0800</pubDate>
        
        <guid>https://ttf248.life/p/daily-musings/</guid>
        <description>&lt;p&gt;AI已经融入到日常开发的工作流、投资最近切换了思路，从场外基金，切换到了场内的股票和ETF。&lt;/p&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目
&lt;/h2&gt;&lt;h3 id=&#34;项目记录&#34;&gt;项目记录
&lt;/h3&gt;&lt;p&gt;上周无聊时尝试获取 Github 勋章，开始使用 Issue 模块。以前写代码时，总想找个地方记录每次 AI 改动的内容，但单独弄个文档记录显得杂乱。现在有了 Issue 模块，打上标签区分 bug、feature、enhancement 等，记录变得清晰且高效。即使以后可能用不到，记录下来也是一种积累。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader/issues?q=is%3Aissue&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;查看 Issue 列表&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;版本发布&#34;&gt;版本发布
&lt;/h3&gt;&lt;p&gt;版本发布记录，找到最近相关的提交，由于都是AI生成的提交记录，从网页端，复制近期所有的提交记录，扔给AI让它整理下，就是一份不错的发布记录。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader/releases/tag/v1.9.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/comic-reader/releases/tag/v1.9.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;活跃度&#34;&gt;活跃度
&lt;/h3&gt;&lt;p&gt;那次整上了Github的个人主页，被动的提高了写代码的积极性，毕竟数据可视化了，有些东西，就是那么奇妙，简单的正反馈，能让人有持续下去的动力。&lt;/p&gt;
&lt;h3 id=&#34;trae&#34;&gt;Trae
&lt;/h3&gt;&lt;p&gt;付费买了首月体验，怎么说呢，在 Vscode 里面也是用的 Claude4 模型，字节的 IDE 体验上还是更好，实战的效果也是更好，有时候同样的问题，Trae 能给出更好的答案，后续要不要买个年费呢？按照现在瞎搞的频率，Trae 次数可能不够用，不用想那么多，等用完再说，字节应该还有另外的的付费方案，购买更多的调用次数。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;简单的小问题，用微软的，github copilot 各个模型也能都能调用。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;计划夭折，github copilot 也开始限制调用次数，&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/zh/copilot/about-github-copilot/plans-for-github-copilot#models&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;618 开启限制次数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如何查看&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/zh/copilot/managing-copilot/understanding-and-managing-copilot-usage/monitoring-your-copilot-usage-and-entitlements#downloading-a-monthly-usage-report&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;当前使用量&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;投资&#34;&gt;投资
&lt;/h2&gt;&lt;p&gt;终归还是没忍住，自从开通了港股通，还没在港股交易过，想着小米要发布新车，买了点小米，涨了点就卖了，跌了又买回来，来回操作几次，还没等到新车发布，股票上小赚。&lt;/p&gt;
&lt;p&gt;这个时候没事看什么跨境通的资金流，看着美团都是资金的净流入，跟风买进去，成功当上了股东，忘记看总的资金流，国内买入的资金，只是一部分，港股还有很多外资。这次刚好实践下，蓝筹股，慢慢持有最后的收益会怎么样。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;仓位的控制和亏损，&lt;strong&gt;反人性的东西&lt;/strong&gt;，慢慢来，慢慢来，不能急。小米如果新车不太行，到底要不要卖掉呢？这是个问题。投资的认知还是不够，还是要多看书，多学习。美联储不准备降息，港股大跌一波，建仓的时候如果再晚一些？也不对，如果传出来的消息是降息，港股大涨怎么办？这就是投资，考验人性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;常念叨的一句话，买的是国运，但自己好像不太信国运。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;抛开国运的信仰问题，&lt;strong&gt;另外一个就是注意力&lt;/strong&gt;，既然是要做长线，频繁看盘是没意义，每天早上十分钟，收盘十分钟差不多了。最终预期的收益率是多少？还没一个明确的止盈位置。&lt;/p&gt;
&lt;p&gt;除开止盈的问题，配置部分股票，还是老脑子里面有个固有的观念，资产配置需要一部分股票。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;市场大跌的时候，腾讯还是香饽饽，资金扎堆&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;代码&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新价&lt;/th&gt;
&lt;th&gt;成交额&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;00700&lt;/td&gt;
&lt;td&gt;腾讯控股&lt;/td&gt;
&lt;td&gt;498.600&lt;/td&gt;
&lt;td&gt;80.08亿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;03690&lt;/td&gt;
&lt;td&gt;美团-W&lt;/td&gt;
&lt;td&gt;128.100&lt;/td&gt;
&lt;td&gt;68.81亿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;09992&lt;/td&gt;
&lt;td&gt;泡泡玛特&lt;/td&gt;
&lt;td&gt;247.200&lt;/td&gt;
&lt;td&gt;57.03亿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;09988&lt;/td&gt;
&lt;td&gt;阿里巴巴-W&lt;/td&gt;
&lt;td&gt;109.800&lt;/td&gt;
&lt;td&gt;53.22亿&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;01810&lt;/td&gt;
&lt;td&gt;小米集团-W&lt;/td&gt;
&lt;td&gt;53.050&lt;/td&gt;
&lt;td&gt;41.05亿&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;这段是好几天后更新的，港股一波大涨，那天跌下去的基本都涨回来了。脑子突然想到去年亏损的恒生电子，怎么说呢，从老东家走了，就是对未来的预期不看好，选择买入恒生碰到下跌，心理就会拿不住。两波节奏，股价彻底涨回去，一个是去年的牛市，还有一个就是过年那会的杭州六小龙概念。今年的稳定币也算一个？&lt;/p&gt;
&lt;p&gt;从哪里跌到从哪里爬起来是没错，短时间没机会重新建仓恒生电子了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;update 20250625&lt;/p&gt;
&lt;p&gt;小米发布会还没开始，上次清空场内ETF，券商这两天大涨，还是没做到长期持有，中间随意变仓了，要买小米，也不应该动券商ETF的资金。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Github Pages 彩蛋：部署多个 Pages</title>
        <link>https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;最近生物钟有点错乱，凌晨两点多还在折腾 Github Pages 的部署。&lt;/p&gt;
&lt;p&gt;加完班才去吃饭，鄙人刚好吃完就想睡，吃完回来八点半左右，犯困了，想着眯会，直接就睡着了，醒来已经凌晨两点多了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还没启动就消亡的分类：AI 研习社&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;打脸&#34;&gt;打脸
&lt;/h2&gt;&lt;p&gt;昨天才说的不折腾前端，好的今天我们折腾的不是前端，而是 UI UX 的体验。&lt;/p&gt;
&lt;h2 id=&#34;项目&#34;&gt;项目
&lt;/h2&gt;&lt;p&gt;有请我们的老朋友，&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;没错，就是原来自选股那个项目，重构项目的整体结构，后续 AI 编程相关的内容都会放在这个项目下。&lt;/p&gt;
&lt;h2 id=&#34;部署多个-pages&#34;&gt;部署多个 Pages
&lt;/h2&gt;&lt;p&gt;项目国内托管在 &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/ai-coding-demo&lt;/a&gt;，由于众所周知的原因，国内是不支持发布 pages 的，所以我们需要在国外的 Github 上发布。&lt;/p&gt;
&lt;p&gt;博客就是发布在国外的 Github 上。没试过，多个项目发布 pages，还有就是，当前处理的项目，并不是一个传统的博客站点，里面只是有很多文档，叠加几个静态的 html 设计稿。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;没错，这个页面，是我第一次点击，然后就发现了，多个项目部署 pages，并不会影响博客的发布，而是在博客的域名下，增加了一个新的路径。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ai-coding-demo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ttf248.life/ai-coding-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看到这里的时候，我直呼完美。&lt;/p&gt;
&lt;h2 id=&#34;ai-研习社&#34;&gt;AI 研习社
&lt;/h2&gt;&lt;p&gt;昨天新建的分类，想着通过 AI 来学习很多计算机的课程，比如说：算法、LeetCode 刷题。&lt;/p&gt;
&lt;p&gt;每次的学习记录，发布到博客上，形成一个知识库。新建了分类：AI 研习社&lt;/p&gt;
&lt;p&gt;现在看来，不同的课程，新建不同项目就行，学习笔记都写到项目的 Readme.md 中。&lt;/p&gt;</description>
        </item>
        <item>
        <title>合并 PullRequest 到 Fork 的仓库</title>
        <link>https://ttf248.life/p/merge-pullrequest-to-forked-repo/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://ttf248.life/p/merge-pullrequest-to-forked-repo/</guid>
        <description>&lt;p&gt;&lt;code&gt;github-readme-stats&lt;/code&gt; 是一个 GitHub 个人资料的统计信息生成器，允许用户在其 GitHub 个人资料中显示各种统计信息和图表。它提供了多种自定义选项，可以根据用户的需求进行调整。&lt;/p&gt;
&lt;p&gt;笔者管理仓库习惯按照项目分组，github 不支持仓库分组，只能通过拆分不同的组织来实现。&lt;code&gt;github-readme-stats&lt;/code&gt; 最新分支无法支持跨越不同组织的仓库统计，笔者 fork 了一个分支，合并了对应的代码。&lt;/p&gt;
&lt;h2 id=&#34;最终效果&#34;&gt;最终效果
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;pull-request-原始地址&#34;&gt;Pull Request 原始地址
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adds the ability to include data from organization repositories&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;合并-pullrequest-到-fork-的仓库&#34;&gt;合并 PullRequest 到 Fork 的仓库
&lt;/h2&gt;&lt;p&gt;要将某个 &lt;strong&gt;Pull Request (PR)&lt;/strong&gt; 合并到你 &lt;strong&gt;fork 的仓库&lt;/strong&gt;，有几种方式可以做到，取决于你是想：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从&lt;strong&gt;上游（upstream）仓库&lt;/strong&gt;合并 PR 到你的 fork，还是&lt;/li&gt;
&lt;li&gt;从其他人的 fork 中合并 PR 到你的 fork，或者&lt;/li&gt;
&lt;li&gt;合并一个开在你 fork 上的 PR（比如别人给你 fork 提了个 PR）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我先给你一个最常见的场景：&lt;strong&gt;你 fork 了一个仓库，想把上游的某个 PR 合并到你的 fork&lt;/strong&gt;。操作流程如下👇：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-方法一命令行方式最通用&#34;&gt;✅ 方法一：命令行方式（最通用）
&lt;/h3&gt;&lt;h4 id=&#34;步骤-1克隆你自己的-fork&#34;&gt;步骤 1：克隆你自己的 fork
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/你的用户名/仓库名.git
cd 仓库名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;步骤-2添加-upstream原仓库地址&#34;&gt;步骤 2：添加 upstream（原仓库地址）
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/原作者用户名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;步骤-3抓取-upstream-的-pr-分支&#34;&gt;步骤 3：抓取 upstream 的 PR 分支
&lt;/h4&gt;&lt;p&gt;找到你想合并的 PR 编号，例如 PR #123。&lt;/p&gt;
&lt;p&gt;你可以这样拉取该 PR 的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;步骤-4切换并合并分支&#34;&gt;步骤 4：切换并合并分支
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # 或者你自己的目标分支
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果一切正常，你可以推送到你 fork 上的 GitHub 仓库：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-方法二github-网页界面简单但有限&#34;&gt;✅ 方法二：GitHub 网页界面（简单但有限）
&lt;/h3&gt;&lt;p&gt;如果你在 GitHub 网页上看到某个 PR 是对上游仓库的，你可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入该 PR 页面。&lt;/li&gt;
&lt;li&gt;点击右上角 “&lt;strong&gt;Commits&lt;/strong&gt;” 或 “&lt;strong&gt;Files changed&lt;/strong&gt;”，看这个 PR 是基于哪个分支。&lt;/li&gt;
&lt;li&gt;在你的 fork 页面，新建一个分支，然后手动 cherry-pick PR 的 commit（需要点 Git 技术）。&lt;/li&gt;
&lt;li&gt;或者点“&lt;strong&gt;Open in GitHub Desktop&lt;/strong&gt;”，用 GUI 工具来合并。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-如果别人是对你的-fork-提了-pr&#34;&gt;🚀 如果别人是对你的 fork 提了 PR
&lt;/h3&gt;&lt;p&gt;你就直接进入 PR 页面，点击 “&lt;strong&gt;Merge pull request&lt;/strong&gt;” 按钮即可。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;需要我根据你现在的具体场景（比如 PR 链接、你是用网页还是命令行）来手把手演示吗？也可以给我具体链接，我帮你分析最简单的做法。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
