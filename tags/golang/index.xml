<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>golang on 向叔记事簿</title>
        <link>https://ttf248.life/tags/golang/</link>
        <description>Recent content in golang on 向叔记事簿</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language><atom:link href="https://ttf248.life/tags/golang/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Go 项目查找所有没有引用的函数</title>
        <link>https://ttf248.life/p/find-all-functions-not-referenced-in-the-go-project/</link>
        <pubDate>Mon, 02 Jun 2025 21:10:47 +0800</pubDate>
        
        <guid>https://ttf248.life/p/find-all-functions-not-referenced-in-the-go-project/</guid>
        <description>&lt;p&gt;在 Go 语言项目中，使用 &lt;code&gt;staticcheck&lt;/code&gt; 查找未引用的函数是一种高效的静态分析方法。&lt;/p&gt;
&lt;h3 id=&#34;1-安装-staticcheck&#34;&gt;&lt;strong&gt;1. 安装 staticcheck&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;确保已安装 Go（版本 1.16+），然后执行以下命令安装 &lt;code&gt;staticcheck&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install honnef.co/go/tools/cmd/staticcheck@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-基本用法查找未引用的函数&#34;&gt;&lt;strong&gt;2. 基本用法：查找未引用的函数&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;在项目根目录下执行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;staticcheck ./...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;关键检查规则&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;U1000&lt;/strong&gt;：检测未使用的函数、方法、变量或类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U1001&lt;/strong&gt;：检测未使用的参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-过滤特定检查规则&#34;&gt;&lt;strong&gt;3. 过滤特定检查规则&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;若只需检查未使用的函数，可指定规则：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;staticcheck -checks=U1000 ./...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-输出格式&#34;&gt;&lt;strong&gt;4. 输出格式&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;默认输出格式为 &lt;code&gt;{path}:{line}:{column}: {message}&lt;/code&gt;，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;main.go:10:2: func UnusedFunction is unused (U1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-配置文件可选&#34;&gt;&lt;strong&gt;5. 配置文件（可选）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;在项目根目录创建 &lt;code&gt;.staticcheck.conf&lt;/code&gt; 文件，自定义检查规则：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;checks&amp;quot;: [&amp;quot;U1000&amp;quot;, &amp;quot;-ST1000&amp;quot;]  // 启用 U1000，禁用 ST1000（字符串格式化规则）
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6-集成到-vs-code&#34;&gt;&lt;strong&gt;6. 集成到 VS Code&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 &lt;a class=&#34;link&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=golang.go&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go 扩展&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;settings.json&lt;/code&gt; 中添加：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;go.lintTool&amp;quot;: &amp;quot;staticcheck&amp;quot;,
  &amp;quot;go.lintFlags&amp;quot;: [&amp;quot;-checks=U1000&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;7-忽略特定代码&#34;&gt;&lt;strong&gt;7. 忽略特定代码&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;在函数上方添加注释 &lt;code&gt;//lint:ignore U1000 reason&lt;/code&gt; 可忽略检查：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//lint:ignore U1000 Used by generated code
func UnusedButNeeded() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常见问题解答&#34;&gt;&lt;strong&gt;常见问题解答&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q：如何处理测试文件中的未使用函数？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A：&lt;code&gt;staticcheck&lt;/code&gt; 默认会检查测试文件。若需排除，可使用 &lt;code&gt;-tests=false&lt;/code&gt; 标志。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Q：如何在 CI/CD 中集成？&lt;/strong&gt;&lt;br&gt;
A：在 GitHub Actions 中添加：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: Run staticcheck
  run: staticcheck -checks=U1000 ./...
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例输出&#34;&gt;&lt;strong&gt;示例输出&lt;/strong&gt;
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ staticcheck -checks=U1000 ./...
internal/utils/helper.go:15:2: func privateHelper is unused (U1000)
cmd/server/main.go:23:2: func initConfig is unused (U1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;code&gt;staticcheck&lt;/code&gt; 的 &lt;code&gt;U1000&lt;/code&gt; 规则，你可以快速定位并清理未引用的函数，提高代码质量。&lt;/p&gt;</description>
        </item>
        <item>
        <title>为什么需要学习一门新语言</title>
        <link>https://ttf248.life/p/why-learn-a-new-language/</link>
        <pubDate>Thu, 04 Aug 2022 11:27:30 +0800</pubDate>
        
        <guid>https://ttf248.life/p/why-learn-a-new-language/</guid>
        <description>&lt;p&gt;从上学时期开始算，接触 &lt;code&gt;C++&lt;/code&gt; 已经十多年了，为什么需要学习其他的编程语言？&lt;/p&gt;
&lt;p&gt;工作经历：缺乏优雅的模块设计经验，&lt;code&gt;C++&lt;/code&gt; 语法是自由的，学习了其他的语言，也能引导写出更优雅的设计&lt;/p&gt;
&lt;p&gt;编写一些工具的时候，时常会用到&lt;/p&gt;
&lt;p&gt;底层库的设计也好、业务模块实现也好，设计的准则都是想通的&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
