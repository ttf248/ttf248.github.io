<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 向叔の手帳</title>
        <link>https://ttf248.life/ja/post/</link>
        <description>Recent content in Posts on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 24 Sep 2025 21:45:46 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>デスクトップPCへのローディング失敗 (Desukutoppu Ki e no Roodingu Shibi)</title>
        <link>https://ttf248.life/ja/p/desktop-boot-loader-failure/</link>
        <pubDate>Wed, 24 Sep 2025 21:25:37 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/desktop-boot-loader-failure/</guid>
        <description>&lt;p&gt;7月の頃、思いつきで、週末に特にすることがなく、デスクトップパソコンのホコリを掃除しようと思い立ちました。4～5年ほど掃除していなかったので、確かにホコリもかなり溜まっていたのです。掃除が終わってシステムを再起動すると、すべて正常に動作し、普段からパソコンをシャットダウンせずに長期間稼働させていたため、シャットダウンしたディスプレイの電源を切っておき、幸い妻が転住してきたので、夜になると彼女が見たことのない様々な光源の下で、手当たり次第にパソコンをシャットダウンしてくれました。&lt;/p&gt;
&lt;h2 id=&#34;散热器&#34;&gt;散热器
&lt;/h2&gt;&lt;p&gt;本来应该写稿子，重装系统各种事情掺杂进来，忘记了，人脑有时候就是这么神奇，今天突然想起来了。
&lt;img src=&#34;https://ttf248.life/p/desktop-boot-loader-failure/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250717180011_438_45.jpg&#34;
	width=&#34;1279&#34;
	height=&#34;2275&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;散热器&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;システム起動失敗&#34;&gt;システム起動失敗
&lt;/h2&gt;&lt;p&gt;数日ごとに起動を試みるも、システムがブルースクリーンになり、エラーメッセージが何度か変化して最終的に起動できなくなりました。ハードディスクの清掃中に、ハードディスクが固定されずに落下し、システムブートファイルが見つからなかったため、起動に失敗したと推測しました。エラーメッセージは明らかにブートロードに失敗していることを示しており、USBドライブで正常にPEシステムに入力できました。そこで、落ち着いて次の手順を実行しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ハードディスクケーブルを抜き差しする（ハードディスクが多数あり、特にブートディスクを確認）&lt;/li&gt;
&lt;li&gt;徹底的にフォーマットしてシステムドライブを再インストール&lt;/li&gt;
&lt;li&gt;他のディスクをハードディスクとして使用し、再インストール&lt;/li&gt;
&lt;li&gt;ハードディスクに問題がないか、ハードディスクチェックツールで確認&lt;/li&gt;
&lt;li&gt;BOIS設定を変更する（UEFIと互換モードなど様々な試み）&lt;/li&gt;
&lt;li&gt;上記の手順に基づいて、ハードディスクをMBR形式に変更し、ブート設定を再構成してシステムをインストール&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;週末一通りの作業を終え、システムが正常に起動し、他に問題も見つからなかったため、なぜ古いブートモードに切り替える必要があったのか疑問に思いました。&lt;/p&gt;
&lt;p&gt;華碩製のマザーボードを購入した際に、デフォルトでUEFIモードになっており、長年にわたってシステム再インストールもUEFIモードを使用していました。今回、様々な方法を試しても解決しないのであれば…。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>蛹から抜け出すように：小米17の名称変更を通して、華テックと小米のハイエンドな駆け引きを見る</title>
        <link>https://ttf248.life/ja/p/breaking-through-the-cocoon-examining-huawei-and-xiaomis-high-end-rivalry-following-xiaomi-17s-renaming/</link>
        <pubDate>Fri, 19 Sep 2025 10:15:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/breaking-through-the-cocoon-examining-huawei-and-xiaomis-high-end-rivalry-following-xiaomi-17s-renaming/</guid>
        <description>&lt;p&gt;情報過多の時代において、私たち一人ひとりが無意識のうちに「情報カプセル」の中に閉じこもっている。アルゴリズムが私たちの興味のあるコンテンツを推薦し、長期的には私たちの視野が形lessに狭まる。そしてこの現象は、スマートフォンの市場においても同様に当てはまるようだ—ブランドの忠誠心、メディアの指向性、コミュニティの声がすべて消費者に次々と「カプセル」を織りなしている。&lt;/p&gt;
&lt;p&gt;しかし最近、小米の一挙手一投足は、静かな湖面に石を投げ込むようなものであり、この無形の壁を打ち破ろうと波紋を広げた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プロンプト：情報カプセル、小米携帯電話の16を17に変更するのは一時的な行動ではなく、多くの在庫があること、华为のハイエンド路線、小米のハイエンド路線は最終的に製品力で語られる&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;小米的陽謀暗算16をスキップし17に正面突破&#34;&gt;小米的「陽謀」（暗算）：16をスキップし、17に正面突破
&lt;/h2&gt;&lt;p&gt;Xiaomiは、発売間近となる次期フラッグシップモデルを、毅然と「小米16」から「小米17」へと名称を変更しました。これは、直接AppleのiPhone 17に対抗するという意図を明確に示すものです。これは単なる衝動的な思いつきではありません。このような規模の巨大な企業にとって、どのフラッグシップモデルも、命名、備品、マーケティングは、一挙手一投足が全身に及ぶ大規模なプロジェクトです。数百万もの梱包材、宣伝物、チャネルコミュニケーションなどすべてを数か月、あるいは1年以上前から計画する必要があるのです。&lt;/p&gt;
&lt;p&gt;今回の名称変更は、Xiaomiが綿密に練り上げた「陽謀」（暗算）であり、ブランド戦略における大胆な賭けなのです。これは明確な信号を送っています。「高性价比」というイメージに留まることなく、AppleやHuaweiが長年支配してきたハイエンド市場への正面突破を目指すということです。&lt;/p&gt;
&lt;p&gt;デジタル上でiPhoneと同一化することで、Xiaomiは消費者の慣習的な思考を覆し、自社の製品をトップレベルのフラッグシップモデルと同等の対話の文脈の中に置こうとしています。これは、Xiaomiが自社製品の品質に対する高揚した自信の宣言であり、ハイエンド市場に参入して以来5年間で最も大胆かつ決断的な試みなのです。&lt;/p&gt;
&lt;h2 id=&#34;華為のハイエンド戦略逆境の中で輝きを取り戻す&#34;&gt;華為のハイエンド戦略：逆境の中で輝きを取り戻す
&lt;/h2&gt;&lt;p&gt;ハイエンド市場について言えば、華為は避けて通れないテーマです。多くの周知された外部圧力の後、華為の高難易度路線は異常に困難でしたが、同時に異常なほど確固たるものでした。画像技術における継続的な深耕と自社開発チップのブレークスルーにより、華為PuraおよびMateシリーズは依然としてハイエンド市場における基準となる製品です。&lt;/p&gt;
&lt;p&gt;華為の戦略は、より「内功（内なる力）」の鍛錬に似ています。強力な技術的障壁を構築することで、XMAGE画像ブランド、昆仑ガラス、鴻蒙（ホンコン）オペレーティングシステムなどのように、製品の中核的な差別化要素を作り出しています。サプライチェーンの巨大な課題にも直面しながらも、華為は製品力の継続的な向上によって、非常に高いユーザーロイヤリティを確立しました。&lt;/p&gt;
&lt;p&gt;現在、華為は中国におけるハイエンド市場でのシェアが着実に回復しており、これは忍耐力と製品力に関する勝利の物語そのものです。その高難易度路線は、技術革新とブランドの耐久性を基盤に、逆境の中で一歩ずつ進むことで確立されました。&lt;/p&gt;
&lt;h2 id=&#34;高端の争いは結局は製品力の対決&#34;&gt;高端の争いは、結局は「製品力」の対決
&lt;/h2&gt;&lt;p&gt;小米の「一挙手一投足で完了」あるいは、ファーウェイの「着実に攻める」といった、それぞれ異なるハイエンド戦略を展開する中、最終的に落着点となるのは、「製品力」である。&lt;/p&gt;
&lt;p&gt;ハイエンドユーザーがより高い価格を支払う理由は、単なるブランドイメージだけではない。それは、製品背後の技術、体験、デザイン、そしてサービスに対する全方位的な承認だからだ。喧騒としたマーケティングの後に残るのは、実際に体験したことによる満足度であり、それがユーザーを留める鍵となる。&lt;/p&gt;
&lt;p&gt;それでは、注目点を製品自体に絞って見ていこう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;画像能力：&lt;/strong&gt; ファーウェイPura 70 Ultraは、独自の伸縮式カメラと強力なXMAGE影像システムにより、スマートフォン写真の分野で継続的にリーダーシップを発揮している。一方、小米17シリーズも、ライカとの深度協力を受けており、新たなセンサーとアルゴリズムを搭載し、業界トップレベルの水準への挑戦を目指している。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;コア性能：&lt;/strong&gt; 小米17は、高通社の最新の骁龍旗舰チップを初搭載し、性能の解放において天然の優位性を確立している。一方、ファーウェイは、自社開発チップのイテレーションを通じて、電力効率とシステム連携における独自の競争力を発揮している。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ディスプレイとデザイン：&lt;/strong&gt; 両社ともディスプレイ品質、筐体素材、デザイン言語において最大限の努力を惜しまない。昆仑ガラスの堅牢性と耐久性は、小米がディスプレイ表示技術に継続的に投資した結果であり、それぞれ製品の明確な特徴となっている。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;エコ体験：&lt;/strong&gt; 鴻蒙（ファーウェイ）システムの分散能力は、ファーウェイにシームレスなエコ体験を提供している。一方、小米のHyperOSも、独自のスマートエコシステム閉環構築に向けて努力している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マーケティング戦略は、消費者の「情報茧房」を打破し、より多くの人にブランドの雄心と変化を見せることを可能にする。しかし、消費者を「破房而出」（家を出る）させ、自社の製品に心酔して乗り換えさせるには、最終的には過硬な製品力こそが、断固たる選択肢を提供しなければならない。&lt;/p&gt;
&lt;p&gt;小米が数字“16”を“17”に変えたことは、単なる名前の変更ではなく、そのブランド心态と市場戦略における躍遷である。ファーウェイは、嵐の中でハイエンドブランドの根拠を再構築した。中国ハイエンドスマートフォン市場におけるこの双雄の博弈は、まさに精彩を増していく段階に入っている。&lt;/p&gt;
&lt;p&gt;消費者にとっては、これは朗報と言えるだろう。巨頭たちが互いに譲歩し、製品自体に注目するようになると、最終的にはより多様で、体験至上主義の素晴らしい時代が到来するはずだ。そして、このハイエンドの争いの中で最後に笑うのは誰なのかは、時間と各ユーザーの指先が最終的な答えを示すだろう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Keepalived &#43; HAProxy を用いた高可用ロードバランシングの構築</title>
        <link>https://ttf248.life/ja/p/keepalived-haproxy-for-high-availability-load-balancing/</link>
        <pubDate>Fri, 19 Sep 2025 09:45:55 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/keepalived-haproxy-for-high-availability-load-balancing/</guid>
        <description>&lt;p&gt;現代インターネットアーキテクチャにおいて、高可用性はシステム設計における重要な検討事項です。本稿では、KeepalivedとHAProxyを使用して高可用なロードバランシングクラスタを構築し、サービスの継続性と信頼性を確保する方法について詳細に解説します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;実際の構成部分が検証されていないため、本文の構成はAIによって作成されています&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この画像は「タスク計画」というタイトルで、おそらくタスクのスケジュールやリストを示していると思われます。詳細な翻訳のためには画像の具体的な内容を確認する必要がありますが、一般的な表現として以下のように記述できます。&lt;/p&gt;
&lt;p&gt;タスク計画 (Tasukku Keikaku) - 任務計画 (Tanmoku Keikaku)&lt;/p&gt;
&lt;h2 id=&#34;技術概要&#34;&gt;技術概要
&lt;/h2&gt;&lt;h3 id=&#34;keepalived-の概要&#34;&gt;Keepalived の概要
&lt;/h3&gt;&lt;p&gt;Keepalived は、VRRP（Virtual Router Redundancy Protocol）プロトコルを基盤とした高可用性ソリューションであり、主にサーバーのフェイルオーバーとロードバランシングを実現するために使用されます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主な特徴：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VRRP プロトコル対応:&lt;/strong&gt; 仮想IPアドレスの主/備切り替えの実装&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;健康チェック:&lt;/strong&gt; サービスの状態を監視し、自動的に故障トランスファーを実行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;設定の簡素化:&lt;/strong&gt; 設定ファイルのみで複雑な高可用性アーキテクチャを実現&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;軽量:&lt;/strong&gt; リソース消費量が少なく、性能に優れている&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;動作原理：&lt;/strong&gt;
Keepalived は、VRRP プロトコルを通じて複数のサーバー間で仮想IPアドレスを共有します。正常時には、主サーバーが仮想IPアドレスを持ちサービスを提供し、主サーバーが故障した場合、備サーバーが自動的に仮想IPアドレスを接管し、サービスの停止を防ぎます。&lt;/p&gt;
&lt;h3 id=&#34;haproxy-の概要&#34;&gt;HAProxy の概要
&lt;/h3&gt;&lt;p&gt;HAProxy は、高性能なロードバランサーおよびリバースプロキシサーバーであり、高負荷環境で広く利用されています。
&lt;strong&gt;主な機能：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ロードバランシング:&lt;/strong&gt; 複数のロードバランシングアルゴリズムをサポート&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ヘルスチェック:&lt;/strong&gt; バックエンドサーバーの状態をリアルタイムに監視&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSL終端:&lt;/strong&gt; HTTPS トラフィックの処理をサポート&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;統計モニタリング:&lt;/strong&gt; 詳細な実行状態の統計情報を提供
&lt;strong&gt;利用シーン：&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Web サービス のロードバランシング&lt;/li&gt;
&lt;li&gt;データベース接続プーリング&lt;/li&gt;
&lt;li&gt;マイクロサービスゲートウェイ&lt;/li&gt;
&lt;li&gt;API インターフェース のプロキシ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;アーキテクチャ設計&#34;&gt;アーキテクチャ設計
&lt;/h2&gt;&lt;h3 id=&#34;全体アーキテクチャ&#34;&gt;全体アーキテクチャ
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;                    ┌─────────────────┐
                    │   Client        │
                    └─────────┬───────┘
                              │
                    ┌─────────▼───────┐
                    │  Virtual IP     │
                    │  (VIP)          │
                    └─────────┬───────┘
                              │
              ┌───────────────┼───────────────┐
              │               │               │
    ┌─────────▼───────┐              ┌─────────▼───────┐
    │   HAProxy-1     │              │   HAProxy-2     │
    │  (Master)       │◄────────────►│   (Backup)      │
    │  + Keepalived   │   VRRP       │  + Keepalived   │
    └─────────┬───────┘              └─────────┬───────┘
              │                                │
              └──────────┬─────────────────────┘
                         │
        ┌────────────────┼────────────────┐
        │                │                │
┌───────▼───────┐ ┌──────▼──────┐ ┌───────▼───────┐
│  Web Server 1 │ │ Web Server 2│ │  Web Server 3 │
│   Backend     │ │   Backend   │ │   Backend     │
└───────────────┘ └─────────────┘ └───────────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;全体アーキテクチャ-1&#34;&gt;全体アーキテクチャ
&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;                    ┌─────────────────┐
                    │   クライアント        │
                    └─────────┬───────┘
                              │
                    ┌─────────▼───────┐
                    │  仮想IP (VIP)       │
                    └─────────┬───────┘
                              │
              ┌───────────────┼───────────────┐
              │               │               │
    ┌─────────▼───────┐              ┌─────────▼───────┐
    │   HAProxy-1     │              │   HAProxy-2     │
    │  (マスター)       │◄────────────►│   (バックアップ)      │
    │  + Keepalived   │   VRRP       │  + Keepalived   │
    └─────────┬───────┘              └─────────┬───────┘
              │                                │
              └──────────┬─────────────────────┘
                         │
        ┌────────────────┼────────────────┐
        │                │                │
┌───────▼───────┐ ┌──────▼──────┐ ┌───────▼───────┐
│  Web Server 1 │ │ Web Server 2│ │  Web Server 3 │
│   バックエンド     │ │   バックエンド   │ │   バックエンド     │
└───────────────┘ └─────────────┘ └───────────────┘
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;コンポーネントの説明&#34;&gt;コンポーネントの説明
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仮想IP (VIP)&lt;/strong&gt;: 顧客がアクセスする統一的なエントリポイント&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HAProxy 主備ノード&lt;/strong&gt;: ロードバランシングサービスを提供し、Keepalivedを使用して高可用性を実現します&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バックエンドサーバー&lt;/strong&gt;: 実際にサービスを提供するWebサーバー&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;環境準備&#34;&gt;環境準備
&lt;/h2&gt;&lt;h3 id=&#34;サーバ計画&#34;&gt;サーバ計画
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;役割&lt;/th&gt;
&lt;th&gt;IPアドレス&lt;/th&gt;
&lt;th&gt;ホスト名&lt;/th&gt;
&lt;th&gt;サービス&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HAProxy 主ノード&lt;/td&gt;
&lt;td&gt;192.168.1.10&lt;/td&gt;
&lt;td&gt;lb-master&lt;/td&gt;
&lt;td&gt;HAProxy + Keepalived&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;サーバ計画-1&#34;&gt;サーバ計画
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;役割&lt;/th&gt;
&lt;th&gt;IPアドレス&lt;/th&gt;
&lt;th&gt;ホスト名&lt;/th&gt;
&lt;th&gt;サービス&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HAProxy 備後端&lt;/td&gt;
&lt;td&gt;192.168.1.11&lt;/td&gt;
&lt;td&gt;lb-backup&lt;/td&gt;
&lt;td&gt;HAProxy + Keepalived&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;サーバー構成&#34;&gt;サーバー構成
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ロール&lt;/th&gt;
&lt;th&gt;IPアドレス&lt;/th&gt;
&lt;th&gt;ホスト名&lt;/th&gt;
&lt;th&gt;サービス&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;仮想IP&lt;/td&gt;
&lt;td&gt;192.168.1.100&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;VIP&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;サーバー計画&#34;&gt;サーバー計画
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;役割&lt;/th&gt;
&lt;th&gt;IPアドレス&lt;/th&gt;
&lt;th&gt;ホスト名&lt;/th&gt;
&lt;th&gt;サービス&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Webサーバー1&lt;/td&gt;
&lt;td&gt;192.168.1.20&lt;/td&gt;
&lt;td&gt;web1&lt;/td&gt;
&lt;td&gt;Nginx/Apache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;サーバー構成-1&#34;&gt;サーバー構成
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ロール&lt;/th&gt;
&lt;th&gt;IPアドレス&lt;/th&gt;
&lt;th&gt;ホスト名&lt;/th&gt;
&lt;th&gt;サービス&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Webサーバー2&lt;/td&gt;
&lt;td&gt;192.168.1.21&lt;/td&gt;
&lt;td&gt;web2&lt;/td&gt;
&lt;td&gt;Nginx/Apache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;サーバー計画-1&#34;&gt;サーバー計画
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ロール&lt;/th&gt;
&lt;th&gt;IPアドレス&lt;/th&gt;
&lt;th&gt;ホスト名&lt;/th&gt;
&lt;th&gt;サービス&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Webサーバー3&lt;/td&gt;
&lt;td&gt;192.168.1.22&lt;/td&gt;
&lt;td&gt;web3&lt;/td&gt;
&lt;td&gt;Nginx/Apache&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;ソフトウェアのインストール&#34;&gt;ソフトウェアのインストール
&lt;/h3&gt;&lt;p&gt;HAProxy主備サーバに必要ソフトウェアをインストールします：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# CentOS/RHEL
yum install -y haproxy keepalived

# Ubuntu/Debian
apt-get update
apt-get install -y haproxy keepalived

# サービスを起動時に自動開始にする
systemctl enable haproxy keepalived
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;keepalived-設定&#34;&gt;Keepalived 設定
&lt;/h2&gt;&lt;h3 id=&#34;主ノード設定-lb-master&#34;&gt;主ノード設定 (lb-master)
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;/etc/keepalived/keepalived.conf&lt;/code&gt; ファイルを作成します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;! Configuration File for keepalived

global_defs {
    router_id LB_MASTER
    script_user root
    enable_script_security
}

# HAProxyサービスのステータスを確認するスクリプト
vrrp_script chk_haproxy {
    script &amp;quot;/etc/keepalived/check_haproxy.sh&amp;quot;
    interval 2
    weight -2
    fall 3
    rise 2
}

vrrp_instance VI_1 {
    state MASTER
    interface eth0
    virtual_router_id 51
    priority 100
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass mypassword123
    }

    virtual_ipaddress {
        192.168.1.100/24
    }

    track_script {
        chk_haproxy
    }

    notify_master &amp;quot;/etc/keepalived/notify.sh master&amp;quot;
    notify_backup &amp;quot;/etc/keepalived/notify.sh backup&amp;quot;
    notify_fault &amp;quot;/etc/keepalived/notify.sh fault&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;備中节点配置-lb-backup&#34;&gt;備中节点配置 (lb-backup)
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;/etc/keepalived/keepalived.conf&lt;/code&gt; ファイルを作成します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;! keepalived の構成ファイル

global_defs {
    router_id LB_BACKUP
    script_user root
    enable_script_security
}

vrrp_script chk_haproxy {
    script &amp;quot;/etc/keepalived/check_haproxy.sh&amp;quot;
    interval 2
    weight -2
    fall 3
    rise 2
}

vrrp_instance VI_1 {
    state BACKUP
    interface eth0
    virtual_router_id 51
    priority 90
    advert_int 1
    authentication {
        auth_type PASS
        auth_pass mypassword123
    }

    virtual_ipaddress {
        192.168.1.100/24
    }

    track_script {
        chk_haproxy
    }

    notify_master &amp;quot;/etc/keepalived/notify.sh master&amp;quot;
    notify_backup &amp;quot;/etc/keepalived/notify.sh backup&amp;quot;
    notify_fault &amp;quot;/etc/keepalived/notify.sh fault&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;haproxy健康チェックスクリプト&#34;&gt;HAProxy健康チェックスクリプト
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;/etc/keepalived/check_haproxy.sh&lt;/code&gt;というHAProxyの健康チェックスクリプトを作成します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# HAProxyプロセスが実行中か確認
if [ $(ps -C haproxy --no-header | wc -l) -eq 0 ]; then
    # HAProxyを起動を試行
    systemctl start haproxy
    sleep 2

    # 再度チェックし、まだ実行されていない場合は終了
    if [ $(ps -C haproxy --no-header | wc -l) -eq 0 ]; then
        exit 1
    fi
fi

# HAProxyポートがリッスン中か確認
if ! netstat -tuln | grep -q &amp;quot;:80 &amp;quot;; then
    exit 1
fi

exit 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;状態通知スクリプト&#34;&gt;状態通知スクリプト
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;/etc/keepalived/notify.sh&lt;/code&gt; という状態通知スクリプトを作成します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

TYPE=$1
NAME=$2
STATE=$3

case $STATE in
    &amp;quot;MASTER&amp;quot;)
        echo &amp;quot;$(date): Became MASTER&amp;quot; &amp;gt;&amp;gt; /var/log/keepalived-state.log
        ;;
    &amp;quot;BACKUP&amp;quot;)
        echo &amp;quot;$(date): Became BACKUP&amp;quot; &amp;gt;&amp;gt; /var/log/keepalived-state.log
        ;;
    &amp;quot;FAULT&amp;quot;)
        echo &amp;quot;$(date): Fault detected&amp;quot; &amp;gt;&amp;gt; /var/log/keepalived-state.log
        ;;
    *)
        echo &amp;quot;$(date): Unknown state: $STATE&amp;quot; &amp;gt;&amp;gt; /var/log/keepalived-state.log
        ;;
esac
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;スクリプトの実行権限を設定します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x /etc/keepalived/check_haproxy.sh
chmod +x /etc/keepalived/notify.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;haproxy-設定&#34;&gt;HAProxy 設定
&lt;/h2&gt;&lt;h3 id=&#34;メイン設定ファイル&#34;&gt;メイン設定ファイル
&lt;/h3&gt;&lt;p&gt;主備ノード上で同じHAProxyの設定ファイル &lt;code&gt;/etc/haproxy/haproxy.cfg&lt;/code&gt; を作成します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;global
    log 127.0.0.1:514 local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 1m
    timeout server 1m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

# ページ設定の統計
listen stats
    bind *:8080
    stats enable
    stats uri /stats
    stats realm HAProxy\ Statistics
    stats auth admin:password123
    stats refresh 30s

# 前端設定
frontend web_frontend
    bind *:80
    default_backend web_servers

# 後端サーバー設定
backend web_servers
    balance roundrobin
    option httpchk GET /health
    
    server web1 192.168.1.20:80 check inter 2000 rise 2 fall 3
    server web2 192.168.1.21:80 check inter 2000 rise 2 fall 3
    server web3 192.168.1.22:80 check inter 2000 rise 2 fall 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;設定手順&#34;&gt;設定手順
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;グローバル設定:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;log&lt;/code&gt;: 日志設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chroot&lt;/code&gt;: セーフティサンドボックス&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stats socket&lt;/code&gt;: 管理インターフェース&lt;/li&gt;
&lt;li&gt;&lt;code&gt;daemon&lt;/code&gt;: バックグラウンド実行
&lt;strong&gt;デフォルト設定:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mode http&lt;/code&gt;: HTTPモード&lt;/li&gt;
&lt;li&gt;&lt;code&gt;balance roundrobin&lt;/code&gt;: ラウンドロビンバランシング&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option httpchk&lt;/code&gt;: HTTPヘルスチェック&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: 様々なタイムアウト設定
&lt;strong&gt;バックエンドサーバー:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check&lt;/code&gt;: ヘルスチェックを有効にする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inter 2000&lt;/code&gt;: チェック間隔2秒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rise 2&lt;/code&gt;: 連続2回成功した場合に可用とマークする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fall 3&lt;/code&gt;: 連続3回失敗した場合に不可用とマークする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;サービス開始とテスト&#34;&gt;サービス開始とテスト
&lt;/h2&gt;&lt;h3 id=&#34;サービスの起動&#34;&gt;サービスの起動
&lt;/h3&gt;&lt;p&gt;主節点および副節点上でサービスを起動します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# HAProxyの起動
systemctl start haproxy
systemctl status haproxy

# Keepalivedの起動
systemctl start keepalived
systemctl status keepalived
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;vip認証の確認&#34;&gt;VIP認証の確認
&lt;/h3&gt;&lt;p&gt;仮想IPが正しくバインドされているかを確認します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 主ノードでIPアドレスを表示
ip addr show

# 以下の様な出力が表示されるはずです：
# eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
#     inet 192.168.1.10/24 brd 192.168.1.255 scope global eth0
#     inet 192.168.1.100/24 scope global secondary eth0:0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;機能テスト&#34;&gt;機能テスト
&lt;/h3&gt;&lt;h4 id=&#34;1-負荷分散テスト&#34;&gt;1. 負荷分散テスト
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# VIPに複数回アクセスし、リクエストの分配状況を監視
for i in {1..10}; do
    curl -s http://192.168.1.100/ | grep &amp;quot;Server&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-フェイルオーバーテスト&#34;&gt;2. フェイルオーバーテスト
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 主ノードでHAProxyサービスを停止する
systemctl stop haproxy

# VIPがバックノードに切り替わるのを監視する
ip addr show

# サービスの正常性を確認する
curl http://192.168.1.100/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-バックエンドサーバー障害テスト&#34;&gt;3. バックエンドサーバー障害テスト
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 一台のWebサーバーを停止する
# web1サーバーで：
systemctl stop nginx

# HAProxy統計ページを監視する
curl http://192.168.1.100:8080/stats
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;モニタリングとメンテナンス&#34;&gt;モニタリングとメンテナンス
&lt;/h2&gt;&lt;h3 id=&#34;ロギング監視&#34;&gt;ロギング監視
&lt;/h3&gt;&lt;h4 id=&#34;haproxyログ&#34;&gt;HAProxyログ
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# HAProxyログの確認
tail -f /var/log/haproxy.log

# アクセス統計の確認
grep &amp;quot;HTTP/1.1&amp;quot; /var/log/haproxy.log | tail -20
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;keepalivedログ&#34;&gt;Keepalivedログ
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Keepalivedログの確認
tail -f /var/log/messages | grep keepalived

# 状態変化ログの確認
tail -f /var/log/keepalived-state.log
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;パフォーマンス監視&#34;&gt;パフォーマンス監視
&lt;/h3&gt;&lt;h4 id=&#34;統計ページ監視&#34;&gt;統計ページ監視
&lt;/h4&gt;&lt;p&gt;HAProxyの統計ページへのアクセス: &lt;code&gt;http://192.168.1.100:8080/stats&lt;/code&gt;
主要指標:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Session Rate&lt;/strong&gt;: 会話レート&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session Total&lt;/strong&gt;: 総会話数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bytes In/Out&lt;/strong&gt;: 流量統計&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Response Time&lt;/strong&gt;: 応答時間&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server Status&lt;/strong&gt;: サーバー状態&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;コマンドライン監視&#34;&gt;コマンドライン監視
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# HAProxyプロセスの状態を確認
ps aux | grep haproxy

# ポートのリスニング状態を確認
netstat -tuln | grep -E &amp;quot;(80|8080)&amp;quot;

# 接続数を確認
ss -ant | grep :80 | wc -l
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;よくあるトラブルシューティング&#34;&gt;よくあるトラブルシューティング
&lt;/h2&gt;&lt;h3 id=&#34;1-vipの切り替え不可&#34;&gt;1. VIPの切り替え不可
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;問題現象:&lt;/strong&gt;
主ノード故障後、VIPがバックアップノードに切り替わらない
&lt;strong&gt;トラブルシューティング手順:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Keepalived設定を確認
keepalived -t -f /etc/keepalived/keepalived.conf

# VRRP通信を監視
tcpdump -i eth0 vrrp

# ファイアウォール設定を確認
iptables -L | grep vrrp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解決策:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VRRPプロトコル通信が正常であることを確認&lt;/li&gt;
&lt;li&gt;ネットワークインターフェースの設定を確認&lt;/li&gt;
&lt;li&gt;認証パスワードの一致性を検証&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-健康チェック失敗&#34;&gt;2. 健康チェック失敗
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;問題現象:&lt;/strong&gt;
バックエンドサーバーが利用不可としてマークされている
&lt;strong&gt;トラブルシューティング手順:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 手動で健康チェックを実行
curl -I http://192.168.1.20/health

# HAProxyログを確認
grep &amp;quot;Health check&amp;quot; /var/log/haproxy.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解決策:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;健康チェックURLにアクセス可能であることを確認&lt;/li&gt;
&lt;li&gt;チェック間隔と閾値を調整&lt;/li&gt;
&lt;li&gt;バックエンドサーバーの状態を確認&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-負荷分散の不均衡&#34;&gt;3. 負荷分散の不均衡
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;問題現象:&lt;/strong&gt;
リクエストがバックエンドサーバーに均等に分散されない
&lt;strong&gt;トラブルシューティング手順:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 統計ページを確認
curl -s http://192.168.1.100:8080/stats

# アクセスログを分析
awk &#39;{print $6}&#39; /var/log/haproxy.log | sort | uniq -c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解決策:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;負荷分散アルゴリズムの設定を確認&lt;/li&gt;
&lt;li&gt;サーバーの重み設定を検証&lt;/li&gt;
&lt;li&gt;セッション保持の要件を考慮&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;オプティマイズの提案&#34;&gt;オプティマイズの提案
&lt;/h2&gt;&lt;h3 id=&#34;1-パフォーマンス最適化&#34;&gt;1. パフォーマンス最適化
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# システムパラメータの調整
echo &#39;net.core.somaxconn = 65535&#39; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &#39;net.ipv4.tcp_max_syn_backlog = 65535&#39; &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p

# HAProxy設定の最適化
# maxconn値を増やす
# timeoutパラメータを調整する
# 圧縮機能を有効にする
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-セキュリティ強化&#34;&gt;2. セキュリティ強化
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 統計ページへのアクセス制限
# haproxy.cfg に ACL ルールを追加
acl allowed_ips src 192.168.1.0/24
http-request deny if !allowed_ips

# SSL/TLS の有効化
bind *:443 ssl crt /etc/ssl/certs/server.pem
redirect scheme https if !{ ssl_fc }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-モニタリングとアラート&#34;&gt;3. モニタリングとアラート
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 統合監視システム
# Prometheusによる監視設定
# Grafanaダッシュボードの設定
# アラートルールを設定
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;KeepalivedとHAProxyの組み合わせにより、高可用性を持つロードバランシングクラスタを構築しました。この構成には以下の利点があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;高可用性:&lt;/strong&gt; VRRPプロトコルによる自動フェイルオーバーを実現&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ロードバランシング:&lt;/strong&gt; スマートなリクエスト分散により、システム性能を向上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;健康チェック:&lt;/strong&gt; リアルタイムでサービスの状態を監視し、故障ノードを自動的に除外&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;メンテナンスの容易さ:&lt;/strong&gt; 設定が簡単で、管理も容易&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;コスト効率:&lt;/strong&gt; オープンソースソフトウェアを使用することで、運用コストを削減
本番環境へのデプロイ時には、ネットワークセキュリティ、監視アラート、バックアップとリカバリなどの面での整備が必要であり、システムの安定性と信頼性を確保します。&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>美团の赤字から債券ミスマッチへ (Meitan no akiji kara kaibon mismatch he)</title>
        <link>https://ttf248.life/ja/p/from-meituans-losses-to-bond-mismatch/</link>
        <pubDate>Thu, 18 Sep 2025 19:19:10 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/from-meituans-losses-to-bond-mismatch/</guid>
        <description>&lt;p&gt;波詭雲譎の株式市場において、私たちはしばしば信仰と期待を羅針盤とし、霧の中を抜け出し富の彼岸を目指そうとする。しかし、航行が羅針盤の指針から逸れると、容易に方向感覚を失い、最悪の場合、座礁してしまうだろう。本稿はまさにそのような航海に関するものであり、それは**小米（シミー）**への執着から始まったものの、資本の波潮の中で幾度となく漂流したものである。&lt;/p&gt;
&lt;h2 id=&#34;信念と現実の交錯小米の得失&#34;&gt;信念と現実の交錯：小米の得失
&lt;/h2&gt;&lt;p&gt;6月、私は雷總への&lt;strong&gt;信仰&lt;/strong&gt;と、小米の&lt;strong&gt;電気自動車&lt;/strong&gt;の未来に対する美しい憧憬を抱き、毅然と高位で小米を買収した。当時、信仰の力は強力であり、それは雷總が資本家としての精明さを一時的に忘れさせ、最高位閃電配售所（Flash Delivery）がもたらすリスクを無視させることになった。幸いなことに、何度か&lt;strong&gt;波段操作&lt;/strong&gt;が行われたものの、いずれもわずかな利益で終わったことで、私は初入港股市場の一点甘味を得ることができた。&lt;/p&gt;
&lt;p&gt;しかし、蜜汁（甘い誤算）した自信もまた伴うようになった。少額儲けた&lt;strong&gt;九方&lt;/strong&gt;株の後に、私はある程度&lt;strong&gt;昏頭&lt;/strong&gt;（ひどく愚かになる）し、合理的な分析に基づかない意思決定をするようになり、単に&lt;strong&gt;港股通ネット買い入資金流&lt;/strong&gt;という一つの指標に依存するようになった。&lt;/p&gt;
&lt;h2 id=&#34;美団の滑走路と無謀な買い増し&#34;&gt;美団の「滑走路」と無謀な買い増し
&lt;/h2&gt;&lt;p&gt;資金の流れに便乗して、私は&lt;strong&gt;美団&lt;/strong&gt;に目を向けた。しかし今回は、会社の&lt;strong&gt;財務データ&lt;/strong&gt;、&lt;strong&gt;過去の推移&lt;/strong&gt;を深く分析することなく、当時勃発していた&lt;strong&gt;デリバリー競争&lt;/strong&gt;さえ認識していなかった。株価が下落し始めたとき、私はすぐに損切りをせず、むしろ無謀に&lt;strong&gt;ポジションを追加&lt;/strong&gt;した。&lt;/p&gt;
&lt;p&gt;香港株の一手株式価格が2～3万香港ドルで変動し、資金の制約により自由にポジション管理ができず、これは美団での損失をさらに悪化させた。この教訓から、香港市場において、無謀な買い増しは、常に水漏れしている浴缸に水を注ぎ込むようなものであり、結果として水の流出を加速させるだけであることを痛感した。&lt;/p&gt;
&lt;h2 id=&#34;愚か者万福の予期せぬ収穫&#34;&gt;「愚か者万福」の予期せぬ収穫
&lt;/h2&gt;&lt;p&gt;まさに私が美団の損失に悩んでいた時、ある偶然の出来事が起こった——私は&lt;strong&gt;アリババ&lt;/strong&gt;を買っていた。持ち帰ることはできなかったが、迅速に売却し、この利益で美団の一部損失を補填することができた。これがまさに「愚か者万福」と呼ばれるものであり、私を美団の泥沼から一時的に脱出させることを可能にしたのだ。&lt;/p&gt;
&lt;h2 id=&#34;資産運用投資よりも重要な基礎&#34;&gt;資産運用：投資よりも重要な基礎
&lt;/h2&gt;&lt;p&gt;今回の経験を通して、株式市場の変動だけでなく、改めて自身の&lt;strong&gt;資産運用&lt;/strong&gt;方法を見直すきっかけとなりました。当時、短期的な緊急資金として確保していた保険資金を、&lt;strong&gt;中国債券&lt;/strong&gt;に投資してしまいました。この資金は2か月後に支払いに充当される予定でしたが、債券の短期保有による収益率は低く、流動性の問題も抱えることになりました。もし当時の時点でこの資金を&lt;strong&gt;マネーファンド&lt;/strong&gt;に預金していれば、より安定した収益を得ることができ、資金ニーズにも柔軟に対応することが可能でした。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>いくつかのことを学ぶ必要があるだろう、発言を遮る方法について。 (Sukitakunakun no koto o manabu hitsuyou ga aru darou, hatsugen o sadaru houhou ni tsuite.)

Alternatively, a more concise translation:

発言を遮ることを学ばなければならない。(Hatsugen o sadaru koto o manabanakereba naranai.)</title>
        <link>https://ttf248.life/ja/p/sometimes-you-need-to-learn-how-to-interrupt/</link>
        <pubDate>Fri, 22 Aug 2025 13:14:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/sometimes-you-need-to-learn-how-to-interrupt/</guid>
        <description>&lt;p&gt;誰もがそれぞれの人生の軌跡を持っており、そのため「好为人師」（人となりを勧める）は、大人の世界ではしばしば不要に見えます。&lt;/p&gt;
&lt;h2 id=&#34;世界観&#34;&gt;世界観
&lt;/h2&gt;&lt;p&gt;私達の人生の旅は、それぞれ異なる成長背景から始まり、それらの経験が河のように匯聚し、流れ込み、最終的に私たち独自の人生軌跡を形作ります。  varje 物語、 každé 选择は、私たちの脳の中で交織・融合し、世界に対する見方、つまり&lt;strong&gt;世界観&lt;/strong&gt;を凝縮します。
あなたが目にした悲劇は、他人にとっては単なる本の中の物語かもしれません。
あなたが軽視する生活は、別の人にとっては苦労して追い求める理想かもしれません。
互いの違いを理解し尊重することは、この多様な世界を洞察するための第一歩です。 時には&lt;strong&gt;沈黙もまた理解の一形態&lt;/strong&gt;です。
空虚なことを言っているような話題が嫌いな場合、私は私の経験と見解を共有する方が良いでしょう。 しかし避けられないのは、あなたは遭遇し、静かに流れを見ることも戦略となるでしょう。&lt;/p&gt;
&lt;h2 id=&#34;投資観&#34;&gt;投資観
&lt;/h2&gt;&lt;p&gt;私が主に&lt;strong&gt;固定金利＋（固收+）&lt;strong&gt;という投資方法を選択する理由は、その&lt;/strong&gt;安定した収益&lt;/strong&gt;と&lt;strong&gt;低いリスク&lt;/strong&gt;を重視するためです。そのため、資産配分においては、このような商品に傾斜を置きます。&lt;/p&gt;
&lt;p&gt;株式については、短期と長期の二つの投資として区別します。私看来、&lt;strong&gt;短期投資&lt;/strong&gt;は強い投機性を伴い、一種の&lt;strong&gt;ギャンブル&lt;/strong&gt;に他なりません。一方、&lt;strong&gt;長期投資&lt;/strong&gt;こそが真の&lt;strong&gt;価値投資&lt;/strong&gt;です。これは、自分自身で会社を設立し、資金調達から上場までの一連の流れを経験するようなものであり、株式配当だけでなく、経済の法則に対する深い洞察と将来への見通しを反映していると言えます。&lt;/p&gt;
&lt;p&gt;幼い頃から自分が&lt;strong&gt;ギャンブル依存症&lt;/strong&gt;であることに気づいていましたが、読書は理性的な角度から不合理な欲求をコントロールすることを可能にします。&lt;/p&gt;
&lt;p&gt;暗号通貨というものは、投資の観点からは好ましくありません。実質的な価値が見つからないためですが、その原理やリスクを理解し、以前に紹介されていたステーブルコインについても知っておく必要があります。&lt;/p&gt;
&lt;h2 id=&#34;えッグ卵&#34;&gt;えッグ（卵）
&lt;/h2&gt;&lt;p&gt;WeChatではグループチャットを折りたたむことが可能ですが、&lt;strong&gt;あなたと友人のプライベートチャットも折りたたむことができます&lt;/strong&gt;。設計の観点からすると、すべての会話は同じ階層に属しており、単に表示方法が異なるだけです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>予期せぬソフトウェアアンインストール体験 (Yoki sune no sorutowā aninsuto teiken)</title>
        <link>https://ttf248.life/ja/p/a-unexpected-software-uninstall-journey/</link>
        <pubDate>Sat, 16 Aug 2025 17:55:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/a-unexpected-software-uninstall-journey/</guid>
        <description>&lt;p&gt;最後にシステムを再インストールした後、私のPCには十分な量のPDFリーダーソフトが不足していました。
360ソフトウェア管家で、&lt;strong&gt;迅読PDF&lt;/strong&gt;が推奨されており、さらに「特供版」も存在しました。その時、私はこのブランドに少し印象を持っており、「PDFリーダーのようなニッチなソフトウェアを、どうやって利益を上げるつもりなんだ？」と心の中で疑問を抱きました。プロモーション費用は回収できるのだろうか？
その後、迅雷のプロモーションで再び出会い、PCにも本当に必要だと感じたので、思い切ってインストールしました。&lt;/p&gt;
&lt;h2 id=&#34;相安無事直到週末&#34;&gt;&lt;strong&gt;相安無事？直到週末…&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;インストール後、ソフトウェア使い続ける限り相安無事でした。AI機能がいくつか含まれていることに気づきましたが、有料だったため、自分には役に立たず、購入する気もありませんでした。当時まだ純粋に、この有料機能でどれくらい稼げるのかと想像していました。
しかし、今週末、ローカル開発中に&lt;strong&gt;QQ音楽&lt;/strong&gt;が突然、原因不明にフリーズし、クラッシュしました。経験から判断して、タスクマネージャーを開き、残留プロセスがないか確認しました。結果、QQ音楽のプロセスは確かに存在しましたが、応答していませんでした。強制終了したところ、QQ音楽は正常に起動するようになりました。
しかしながら、私は偶然、&amp;quot;&lt;strong&gt;PDFエンジン&lt;/strong&gt;&amp;ldquo;というプロセスの存在に気づきました。それはCPU使用率がほぼ10%を占めており、システム全体のリソース使用率はわずか19％でした。好奇心からファイルパスを開くと、それが私がインストールした&lt;strong&gt;迅読PDF&lt;/strong&gt;だったことがわかりました。&lt;/p&gt;
&lt;h2 id=&#34;信頼の崩壊&#34;&gt;&lt;strong&gt;信頼の崩壊&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;これはソフトウェアの欠陥なのかどうかは分かりませんが、今のところ私はこのシステムに対する信頼を完全に失ってしまいました。&lt;/p&gt;
&lt;p&gt;その過剰なプロモーションを考えると、高額な費用がどこからか回収されているのではないかと疑念を抱き始めます。バックグラウンドで奇妙なタスクが実行されているように見えるのも、それ故に「妥当である」と感じてしまいます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ByteDance AI エンコードの新基準 SOLO</title>
        <link>https://ttf248.life/ja/p/bytedance-ais-solo-encoding-new-paradigm/</link>
        <pubDate>Thu, 14 Aug 2025 21:49:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bytedance-ais-solo-encoding-new-paradigm/</guid>
        <description>&lt;p&gt;以前使用していた製品は、コード開発を行う際には大差なく、しかしByteのSOLOは、コード開発において大きな違いが生じた。当初は招待コードを通じてベータ版に参加したが、現在はメールアドレスを提出し審査を待つ形式となり、審査に通れば利用できる。いつ申請を行ったのか記憶が曖昧なところだが、今日Traeから審査通過の通知を受け取った。&lt;/p&gt;
&lt;h2 id=&#34;字节soloの利点&#34;&gt;字节SOLOの利点
&lt;/h2&gt;&lt;p&gt;通常のプロジェクト開発の流れを参考に、UIデザイン、要件分析、機能設計、技術方案の実装を行い、最後にコードの開発を行うという流れを採用しています。全体的なインタラクションロジックは、初心者にとってより親切であり、複雑なプロジェクトの場合は、従来のパターンの方がより効果的です。AIは補助ツールとして、コードの修正と最適化を行います。&lt;/p&gt;
&lt;h2 id=&#34;港美股app開発&#34;&gt;港美股APP開発
&lt;/h2&gt;&lt;p&gt;はい、タイトルは私が書いたプロンプト文通りです。追加の説明はありません。SOLOモード下では、まず要求ドキュメントと技術アーキテクチャドキュメントが出力され、ユーザーが問題がないことを確認すると、コードの開発が行われます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-trae-solo/blob/master/.trae/documents/%E6%B8%AF%E7%BE%8E%E8%82%A1APP%E4%BA%A7%E5%93%81%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;要求ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-trae-solo/blob/master/.trae/documents/%E6%B8%AF%E7%BE%8E%E8%82%A1APP%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E6%96%87%E6%A1%A3.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;技術アーキテクチャドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どうすればいいかというと、設計が特別完璧ではないとしても、初稿として完全に使えるものです。私はUIのデザイン経験がないため、Figmaからデザインファイルをインポートする機能のテストを行っていません。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コード構築中に、いくつかのドキュメントが見つかりました。SOLOモード下では、AIは存在している問題を自力で処理しようと試みます。例えば、データベースがローカルにある場合、データベースのフィールド設計を増やす必要があるため、最初に対応するスクリプトを生成し、次にjsスクリプトを実行してデータベーススクリプトを実行します。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;また、資料を見ながら見つからなかったポイントもありました。タスク分解機能については、港美股の頃の資料にスクリーンショットがありませんので、以前の漫画リーダープロジェクトを使用しました。バイトもお金持ちなので、一度のリクエストでたくさんのタスクを実行できますが、このシナリオは実際にはあまり多くなく、新しいプロジェクトでは大量のトークンを消費します。ユーザーが依存性を持つときこそ、ここで利益を得られるのです。
&lt;img src=&#34;https://ttf248.life/p/bytedance-ais-solo-encoding-new-paradigm/20250814215722.png&#34;
	width=&#34;571&#34;
	height=&#34;236&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;タスク分解機能&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;580px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>米国株式市場におけるスプリットと合併の理解がスムーズではありません。 (Hoikibo shokusa no gasshu o rikai shimasu naku wa suimu bu nai.)</title>
        <link>https://ttf248.life/ja/p/understanding-spin-offs-and-splits-in-the-us-stock-market-can-be-challenging/</link>
        <pubDate>Wed, 13 Aug 2025 22:09:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/understanding-spin-offs-and-splits-in-the-us-stock-market-can-be-challenging/</guid>
        <description>&lt;p&gt;プロンプト：中国人として、英語の金融ニュースや米企業の行動に関する資料を見たとき、合併についてこのように書かれているのはなぜでしょうか。「NAOV reverse stock split: 1 for 10」は、英語特有の文法的な表現ですか？中国語の文法の習慣に合っていません。それに基づいて、スプリットを説明してください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;こんにちは！これは非常に良い質問です。中国語を母国語とする投資家が初めて英語の金融ニュースに触れる際によく遭遇する混乱です。確かに、これは英語における金融分野特有の表現であり、中国語の語順とは大きく異なります。
詳細な説明をさせていただきます。&lt;/p&gt;
&lt;h2 id=&#34;なぜ1-for-10のように合口にする必要があるのか&#34;&gt;なぜ「1 for 10」のように合口にする必要があるのか？
&lt;/h2&gt;&lt;p&gt;まず、この表現を分解してみましょう。&lt;strong&gt;&lt;code&gt;A for B&lt;/code&gt;&lt;/strong&gt; という構造です。&lt;/p&gt;
&lt;p&gt;この構造の中で：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt; はあなたが&lt;strong&gt;手に入れるべき新しいもの&lt;/strong&gt;（結果）を表します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B&lt;/strong&gt; はあなたが&lt;strong&gt;提供する古いもの&lt;/strong&gt;（コスト/交換）を表します。&lt;/li&gt;
&lt;li&gt;“for”という言葉はここでは「&lt;strong&gt;交換するために&lt;/strong&gt;」という意味です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;したがって、&lt;strong&gt;“1 for 10 reverse stock split”&lt;/strong&gt; の直接的な翻訳は &amp;ldquo;&lt;strong&gt;1株新規発行株式、旧株10株と交換する&lt;/strong&gt;&amp;rdquo; です。&lt;/p&gt;
&lt;p&gt;つまり、あなたの &lt;strong&gt;旧株10株が1株の新規発行株式に統合される&lt;/strong&gt; ということです。これが日本語でいう「&lt;strong&gt;10合1&lt;/strong&gt;」または「&lt;strong&gt;10株並べて1株&lt;/strong&gt;」の意味です。&lt;/p&gt;
&lt;h3 id=&#34;構文習慣の比較&#34;&gt;構文習慣の比較
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;英語の習慣 (結果 for 原因/代償)&lt;/strong&gt;： “得られた結果”を前に置き、 “支払われた代償” を後に置く傾向があります。例えば &lt;code&gt;You get 1 new share for your 10 old shares.&lt;/code&gt;  ニュースタイトルでは簡潔にするために &lt;code&gt;1 for 10&lt;/code&gt; と略されることがあります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中国語の習慣 (原因/代償 -&amp;gt; 結果)&lt;/strong&gt;： 時間的順序や論理的な順序に従い、まず “元の状態” を述べ、その後 “結果” を述べる傾向があります。例えば “(元々の) 10株が(現在の) 1株に合体する” というように表現します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;したがって、これは一般的な英語の文法ではなく、ビジネスや金融分野で “交換比率” を表す際に非常に一般的で習慣的な慣例と略語であると言えます。
&lt;strong&gt;例を挙げて説明 (NAOV 1 for 10 Reverse Stock Split)&lt;/strong&gt;
仮に NAOV社の株式を1,000株保有し、当時は株価が$0.5ドル/株だったとします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;総資産価値&lt;/strong&gt;: 1,000株 * $0.5/株 = $500ドル
合弁（1 for 10）後：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;あなたの持株数&lt;/strong&gt;: 1,000株 / 10 = 100株&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1株あたりの価格 (理論上)&lt;/strong&gt;: $0.5/株 * 10 = $5ドル/株&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;総資産価値&lt;/strong&gt;: 100株 * $5/株 = $500ドル&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;結論&lt;/strong&gt;: 合弁の主な目的は、単価を上げることであり、持株数を減らすことですが（市場変動を考慮しない場合）、あなたの総資産価値は一定に保たれます。会社は通常、取引所が定める最低株価要件（例えば、ナスダックが株価を$1以上に維持することを要求する場合）を満たすために合弁を行います。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;株式分割-stock-split-の解説&#34;&gt;株式分割 (Stock Split) の解説
&lt;/h2&gt;&lt;p&gt;合本株式の発行の仕組みを理解した上で、株式分割は容易に理解できます。株式分割とは、合本株式の発行の逆の操作です。
英語では通常、&lt;strong&gt;&lt;code&gt;2 for 1 stock split&lt;/code&gt;&lt;/strong&gt; または &lt;strong&gt;&lt;code&gt;3 for 1 stock split&lt;/code&gt;&lt;/strong&gt; と表記されます。
私たちが学んだ &lt;code&gt;A for B&lt;/code&gt; の構造を使って解釈します：
&lt;strong&gt;&lt;code&gt;2 for 1 stock split&lt;/code&gt;&lt;/strong&gt; は「&lt;strong&gt;あなたは手元の1株の旧株式と交換するために、2株の新株式を受け取ることになる&lt;/strong&gt;」という意味です。
これはまさに中国語の「&lt;strong&gt;1拆2&lt;/strong&gt;」または「&lt;strong&gt;1株を2株に分割する&lt;/strong&gt;」の意味です。
&lt;strong&gt;例による説明 (ある会社の 2 for 1 Stock Split):&lt;/strong&gt;
株式分割前に、あなたが特定の企業の株式を100株保有しており、その時の株価は1株あたり$200ドルだったとします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;総資産価値&lt;/strong&gt;: 100株 * $200/株 = $20,000ドル
株式分割（2 for 1）後：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保有株数&lt;/strong&gt;: 100株 * 2 = 200株&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1株あたりの価格 (理論上)&lt;/strong&gt;: $200/株 / 2 = $100ドル/株&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;総資産価値&lt;/strong&gt;: 200株 * $100/株 = $20,000ドル
&lt;strong&gt;結論&lt;/strong&gt;: 株式分割の目的は、単価を下げ、小額投資家にとってより魅力的になるようにすることです。これにより、株式の流動性が向上します。保有株数は増加しますが、同時に総資産価値も変わりません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;会社行動&lt;/th&gt;
&lt;th&gt;中国語訳&lt;/th&gt;
&lt;th&gt;英文表記例&lt;/th&gt;
&lt;th&gt;英文の意味&lt;/th&gt;
&lt;th&gt;保有株式数への影響&lt;/th&gt;
&lt;th&gt;每株股价への影響&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;合併 (逆分割)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;10合1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1 for 10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;10旧株と1新株に交換&lt;/td&gt;
&lt;td&gt;減少&lt;/td&gt;
&lt;td&gt;上昇&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめ-1&#34;&gt;まとめ
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;会社アクション&lt;/th&gt;
&lt;th&gt;中国語訳&lt;/th&gt;
&lt;th&gt;英文表記例&lt;/th&gt;
&lt;th&gt;英文の意味&lt;/th&gt;
&lt;th&gt;保有株式数への影響&lt;/th&gt;
&lt;th&gt;株価一人当たりの影響&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;株式分割 (Stock Split)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1株を2株に分割&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2 for 1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1株の旧株式と2株の新規株式との交換&lt;/td&gt;
&lt;td&gt;増加&lt;/td&gt;
&lt;td&gt;低下&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめ-2&#34;&gt;まとめ
&lt;/h2&gt;&lt;p&gt;この説明が、英語の金融情報についてより深く理解するのに役立つことを願っています。これは確かに、考え方を変える必要があるものです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>香港株の取引手数料ゼロ化と市場競争 (Hong Kong Stock Exchange Transaction Fee Zeroization and Market Competition)</title>
        <link>https://ttf248.life/ja/p/hong-kong-stock-exchange-brokerage-fee-liberalization-and-market-competition/</link>
        <pubDate>Wed, 13 Aug 2025 21:47:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-stock-exchange-brokerage-fee-liberalization-and-market-competition/</guid>
        <description>&lt;p&gt;「同一契約コード、同じ方向の取引に対して、手数料は1回のみ徴収する」という手法は、証券業界においては通常**「合併手数料（Commission Aggregation / Combined Commission）」**と呼ばれています。これは香港証取引所や規制当局の硬直的な規定ではなく、&lt;strong&gt;市場競争と証券会社が顧客体験を最適化するために形成されたビジネス慣例&lt;/strong&gt;です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;港股券商、同一契約コード、同じ方向の取引に対して、佣金仅收取一笔，这是有什么历史业务背景吗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;核心歴史的転換点2003年の最低手数料制度の廃止&#34;&gt;核心歴史的転換点：2003年の最低手数料制度の廃止
&lt;/h2&gt;&lt;p&gt;これはこの問題を理解する上で最も重要な背景です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;改革前（2003年4月1日以前）：&lt;/strong&gt; 香港証券市場は&lt;strong&gt;最低手数料制度&lt;/strong&gt;を採用していました。当時、ブローカーは顧客に対して取引金額の0.25%以下の手数料を徴収することが義務付けられていました。この時期、すべての証券会社の手数料率は基本的に同じ水準に固定され、競争は研究能力、顧客関係、サービス品質といった点に集中し、価格競争はほとんど存在しませんでした。そのため、当時の手数料の合算に関する顧客への取り組みがありませんでした。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改革後（2003年4月1日以降）：&lt;/strong&gt; 香港取引所は正式に&lt;strong&gt;最低手数料制度を廃止&lt;/strong&gt;し、証券会社と顧客が自由に手数料率を協議することを可能にしました。この改革は香港の証券業における競争を瞬く間に引き起こし、特に手数料価格競争を引き起こしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;白熱した市場競争の産物&#34;&gt;白熱した市場競争の産物
&lt;/h2&gt;&lt;p&gt;最低取引手数料を廃止した後、証券会社（特に新興のインターネット証券会社）は顧客獲得のために、様々な革新的な価格戦略を採用し、「手数料統合」はその中でも非常に魅力的な取り組みの一つとなった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;アクティブトレーダーの誘致：&lt;/strong&gt; 高頻度取引者や、同じ銘柄を分割して買い増し/売り切り（例えば、単筆の大口注文が市場価格に与える影響を回避するため）を行う投資家にとって、取引ごとに手数料が発生することは、取引コストを大幅に増加させる。この痛みを解決するために、「手数料統合」政策は完璧であり、投資家は1日で柔軟にポジションを構築または決済することができ、複数回の手数料請求を心配する必要がなくなる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顧客の取引コスト削減：&lt;/strong&gt; これが最も直接的な目的である。手数料統合により、顧客の実質的な取引手数料支出は大幅に低減され、証券会社のプラットフォームはコスト面でより競争力を高める。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顧客体験とロイヤルティの向上：&lt;/strong&gt; 顧客にとって有利なこの政策は、ユーザーエクスペリエンスを大幅に向上させ、投資家が証券会社が自分たちのことを考えていると感じるようにすることで、顧客の粘着性とロイヤルティを高める。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;業務ロジックと証券会社の利益&#34;&gt;業務ロジックと証券会社の利益
&lt;/h2&gt;&lt;p&gt;表面上は券商の収益が減少しているように見えますが、全体的な業務ロジックから見ると双方がWin-Winの関係です：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;薄利多売:&lt;/strong&gt; 単発取引の効果コストを下げることが、顧客がより頻繁に取引するように刺激し、全体的な取引量を向上させます。券商は単筆のコミッションで「利益を譲る」ものの、総取引額の増加によって補填し、プラットフォーム利用料や融資・信用取引利息などの他の費用も収益として得ることができます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;市場シェア獲得:&lt;/strong&gt; 競争激しい市場、特に新興のインターネット証券会社にとって、低手数料と優待政策はユーザーを獲得し、市場シェアを迅速に拡大するための最も効果的な手段です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注意すべき重要な点&#34;&gt;注意すべき重要な点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;すべての証券会社が提供しているわけではない：&lt;/strong&gt; 「合併佣金」は主流となっているものの、これは依然として証券会社のビジネス上の意思決定であり、強制規定ではありません。伝統的な証券会社や銀行の証券サービスによっては、取引ごとに料金が発生する可能性があり、投資家は券商を選択する際に、その料金明細を注意深く確認する必要があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「佣金（Brokerage Commission）」のみを対象とする：&lt;/strong&gt; 必ず注意してください。「合併」計算されるのは、証券会社が徴収する「佣金（Brokerage Commission）」に限定されます。政府または取引所が徴収する「固定費用」は、取引ごとに計算され、合算することができません。主なものは以下の通りです。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;印花税 (Stamp Duty):&lt;/strong&gt; 0.1% (買い手と売り手の双方に発生し、端数切り上げで元単位)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交易征费 (SFC Transaction Levy):&lt;/strong&gt; 0.0027% (証券取引委員会が徴収)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交易費 (HKEX Trading Fee):&lt;/strong&gt; 0.00565% (香港株式交易所が徴収)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会财局交易征费 (FRC Transaction Levy):&lt;/strong&gt; 0.00015% (香港財政司署が徴収)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;まとめると、港股券商の「合併佣金」政策は、2003年の最低佣金制度廃止という歴史的背景に基づいています。市場の自由化と白熱化競争の下で、証券会社が顧客コストを削減し、サービス体験を向上させ、顧客を獲得・維持するために導入した重要なビジネス戦略であり、香港金融市場が伝統から現代へ、高ハードルから普惠へと移行する縮図と言えます。&lt;/strong&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>日常のつぶやき</title>
        <link>https://ttf248.life/ja/p/daily-musings/</link>
        <pubDate>Fri, 01 Aug 2025 18:57:38 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/daily-musings/</guid>
        <description>&lt;p&gt;AI を過信しすぎると、何でも AI と考えすぎてしまうことがあります。新しい動向を学ぶ場合、検索エンジンとプロジェクトの公式ドキュメントの方が信頼性が高いです。&lt;/p&gt;
&lt;p&gt;香港株は下げ相場に遅れて参入し、回调に遭遇して日常的に無意味な操作を行い、利益はほぼ失われています。&lt;/p&gt;
&lt;h2 id=&#34;策略取引&#34;&gt;策略取引
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;単に稼ぐために実践する必要がある、というわけではなく、学習を通して自身の能力を高めたいと考えています。私はこれらのテクニカル指標を信用せず、むしろ国の運勢や大株主指数のインデックス投資を信じています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;戦略取引&#34;&gt;戦略取引
&lt;/h2&gt;&lt;p&gt;先月のインスピレーションの一つで、AIが没収されたプロジェクトの一例を参考に、AIを使って実現しようと試みたところ問題が発生。本来はまず資料を集め、既存のプロジェクトがないか、彼らはどのようにして進めていたのかを確認すべきだった。以前は戦略取引を経験したことがなく、指標や市場データの処理など、全く触れたことがなかった。&lt;/p&gt;
&lt;p&gt;当初の計画は、完全に自分なりに想像したもので、AIとのコミュニケーションを通じてバックテストフレームワークを知り、GitHubでプロジェクトが活発であることを確認した。&lt;/p&gt;
&lt;p&gt;AIを使いすぎると、何でもAIを使って解決しようとするくなり、AIにも学習資料やアクティブなプロジェクト、そして完成度の高い公式ドキュメントを提供してもらうのが理想的だ。しかし、AIが出してくる学習案は現在のコードバージョンに追いつかない。&lt;/p&gt;
&lt;p&gt;プロジェクトの構造を調整する：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;データのダウンロード：ヤフー（Yahoo!）から、変動率のローソク足データを取得&lt;/li&gt;
&lt;li&gt;バックテストの公式ガイドに従い、基本的な使い方を学ぶ&lt;/li&gt;
&lt;li&gt;TA-Lib のインストールと使用、一般的な指標の計算、そしてバックテストでデータを表示&lt;/li&gt;
&lt;li&gt;アリペイ（Alipay）のような積立投資ロジックの実装。この戦略は長期的ETF積立投資に適している&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;香港株式取引&#34;&gt;香港株式取引
&lt;/h2&gt;&lt;p&gt;香港株式への参入は約2ヶ月、簡単な振り返りです。
美団の買い入れとその動機は、純資金流入を単純に見るとともに、美団近況を深く分析することなく、偶然にもデリバリー大战（デリバリー競争）に遭遇し、美団の株主となりました。小米も高位で買い入れたところ、機会を見つけて減塩（ポジションから利益確定して一部売却する）し、四期工場が落地（実際に稼働を開始した）したことで一波のチャンスがあったものの、それを継続するには忍耐が必要です。3年の時間ではほぼ終わります。
香港株式における新消費財、テクノロジー株の価格はすでに高水準であり、仮想通貨という概念も加わったため、テクノロジー株が下落した際に、長期的投資には不向きな頻繁な増配（ポジションに資金を追加する）を試みてしまい、今日なら一波賭けてみる、明日には下がって後悔してしまった。持続的に下落する市場に陥ると、簡単に巻き込まれてしまいます。
長期的投資としては、操作の頻度が過剰であり、週あたり2～3回程度が適切です。
上海総合指数は3600、国内の大盤に対して定投（積立投資）をほとんど行わず、この波を見逃してしまいました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>株式と暗号資産の取引および決済における大きな違い</title>
        <link>https://ttf248.life/ja/p/significant-differences-in-trading-and-settlement-between-stocks-and-digital-currencies/</link>
        <pubDate>Mon, 28 Jul 2025 18:28:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/significant-differences-in-trading-and-settlement-between-stocks-and-digital-currencies/</guid>
        <description>&lt;p&gt;真に伝統的な株式とデジタル通貨の取引・決済における巨大な違いを理解するためには、それぞれのエコシステムを構成する核心となる「部品」と「ルール」について深く理解する必要があります。これらは完全に異なるゲームとして捉えることができます：一方では厳格なルールと多角的な協調が特徴の「プロリーグ」、もう一方はコードが法律となり、誰でも参加できる「オープンワールド」です。&lt;/p&gt;
&lt;p&gt;→ 前述2つの問題に関して、補足・拡張できる基礎知識や資料整理について説明します。&lt;/p&gt;
&lt;h2 id=&#34;第1部伝統株式市場の基盤専門機関による信頼の連鎖&#34;&gt;第1部：伝統株式市場の基盤——専門機関による信頼の連鎖
&lt;/h2&gt;&lt;p&gt;伝統金融市場の中核は、**「信頼」&lt;strong&gt;と&lt;/strong&gt;「仲介」**です。全体システムは多層構造として設計されており、各段階で規制された専門機関が特定の役割を担い、市場の安定性と安全性を確保します。&lt;/p&gt;
&lt;h3 id=&#34;主要参与者-the-players&#34;&gt;主要参与者 (The Players)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;あなた（投資家）:&lt;/strong&gt; 取引の起点と終点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;証券会社 (Shoken Gaisha):&lt;/strong&gt; あなたが市場に入る&lt;strong&gt;唯一の扉&lt;/strong&gt;です。上場取引所やニューヨーク証券取引所、ナスダックで直接株式を購入することはできず、免許を持つ証券会社を通じて取引を行う必要があります。証券会社はあなたの取引指示を実行し、資金と有価証券（名義保持者として）を保管します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;証券取引所 (Shoken Torihajo):&lt;/strong&gt; 市場の**「取引大広間」**です。例えばニューヨーク証券取引所(NYSE)、ナスダック(NASDAQ)などがあります。主な機能は、買い手と売り手の申報がここで出会い（撮合）、価格が発見される公平かつ公開された場所を提供することです。&lt;strong&gt;取引所は取引の撮合のみを行い、資金や株式の移転後の処理は行いません。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中央決済機関 (Chuuya Tatei Kaigan):&lt;/strong&gt; 市場の**「リスク保証人」**です。これはリスク管理の中核となります。取引が成立した後、中央決済機関が買い手と売り手の間で介入し、「すべての買い手の売り手」と「すべての売手の買い手」になります。これにより、一方のデフォルトリスクは中央決済機関によって負担され、市場内でドミノ骨牌のようにリスクが蔓延するのを防ぎます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中央証券保管所 (Chuuya Shoken Hokansho):&lt;/strong&gt; 市場の**「最終倉庫」と「総登記所」**です。例えばアメリカのDTCCや中国の中証登などがあります。これは非常に重要な機関で、電子化された方法で市場の大半の有価証券を集中登録・保管します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心概念証券の無紙化と非移動化&#34;&gt;核心概念：証券の「無紙化」と「非移動化」
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;無紙化 (Dematerialization):&lt;/strong&gt; 今日お買い上げの株式は、もはや一枚一枚の紙質凭证ではありません。それはCSDデータベース内の文字列です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非移動化 (Immobilization):&lt;/strong&gt; これは清算の理解における鍵となります。清算が起こる際、実際に「電子株式ファイル」が券商のサーバーから別の券商のサーバーに送信されるわけではありません。実際には、すべての株式はCSDという中央金庫に「固定」されています。清算のプロセスは、CSDがその総勘定帳簿上で、売主券商の総口座（Omnibus Account）から買い手券商の総口座名下へ株式を&lt;strong&gt;移転&lt;/strong&gt;することです。その後、あなたの券商が自社の内部顧客帳簿を更新し、あなた名下にこれらの株式が増加したことを記録します。
この多層的かつ分業明確な構造は、時間的な遅延（T+N）をもたらすものの、強力で成熟したリスク隔離と管理メカニズムを構築し、現代金融市場が安定して運営される基盤となっています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第2部暗号資産市場の基礎コードと暗号学による信頼軽減システム&#34;&gt;第2部：暗号資産市場の基礎——コードと暗号学による「信頼軽減」システム
&lt;/h2&gt;&lt;p&gt;暗号資産は、従来の仲介機関への依存を減らし、あるいは排除することを目的としており、その基盤となるのは**「暗号学的証明」&lt;strong&gt;ではなく&lt;/strong&gt;「機関信用」**です。&lt;/p&gt;
&lt;h3 id=&#34;核心技術-the-technology&#34;&gt;核心技術 (The Technology)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ブロックチェーン / 分散型台帳 (Blockchain / DLT):&lt;/strong&gt; それを世界各地に分散され、無数の人が共同で維持され、内容が改竄できない公共の帳簿と想像してください。すべての取引は公開記録され、誰でも検証できますが、誰もがそれを制御できるわけではありません。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公開鍵と秘密鍵 (Public &amp;amp; Private Keys):&lt;/strong&gt; これはデジタル通貨の世界におけるあなたの&lt;strong&gt;資産所有権の唯一の証明&lt;/strong&gt;です。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公開鍵 (Public Key):&lt;/strong&gt; それはあなたの&lt;strong&gt;銀行口座&lt;/strong&gt;に相当します。安全に誰かに共有して、数字通貨を受信するために使用できます。ウォレットアドレスは公開鍵によって生成されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;秘密鍵 (Private Key):&lt;/strong&gt; それはあなたの&lt;strong&gt;銀行パスワード+U盾+署名の組み合わせ&lt;/strong&gt;であり、資産を動かす唯一の鍵です。秘密鍵を保持している人だけが対応するアドレス上の資産に対する絶対的な制御権を持ちます。これは暗号化世界の黄金律「Not your keys, not your coins」（あなたの私鍵ではないなら、あなたのコインでもない）の由来です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;暗号ウォレット (Crypto Wallet):&lt;/strong&gt; それ自体は**「通貨」を保管していません**（通貨は常にブロックチェーン上に存在します）。ウォレットの本質は、あなたが入っている秘密鍵を&lt;strong&gt;管理するためのツール&lt;/strong&gt;であり、秘密鍵を使用して取引に署名し、ブロックチェーンネットワークと相互作用するのに役立ちます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;スマートコントラクト (Smart Contract):&lt;/strong&gt; それはブロックチェーン上で自動的に実行されるプログラムコードです。そのロジックは「もし…ならば…」（IF-THEN）です。例えば、分散型取引所のスマートコントラクトは次のように規定できます。「もし私がAユーザーから1つのETHを受け取ったら、私は自動的にAユーザーのアドレスに2000個のUSDCを送信します」。このプロセスはコードによって自動的に強制実行され、人工干渉も信頼も必要ありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;核心ルールコンセンサスメカニズム-consensus-mechanism&#34;&gt;核心ルール：コンセンサスメカニズム (Consensus Mechanism)
&lt;/h3&gt;&lt;p&gt;中央サーバーがないネットワークにおいて、数万ものノードがどの取引が合法かを一致するためにどのように合意するのか？ それこそがコンセンサスメカニズムの役割です。最も一般的なものは次のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;プルーフ・オブ・ワーク (Proof of Work - PoW):&lt;/strong&gt; ビットコインを代表するもの。 “マイナー” が大量のハッシュ計算（非常に難しい数学の問題を解くようなもの）を通じて帳簿権を競い合うことで機能します。最初に問題を解いたマイナーは、最新の取引をブロックにまとめてネットワーク全体にブロードキャストし、他のノードが検証後に受け入れます。この方法は非常にエネルギー消費が激しいですが、極めて高いセキュリティを提供します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プルーフ・オブ・ステーク (Proof of Stake - PoS):&lt;/strong&gt; イーサロンアップグレード後に採用されました。計算能力の競争に依存せず、代币を保有し“ステーキング”している “バリデーター” がブロックを作成および検証するために回転します。より多くのステーキングされたトークンを持つほど、ブロック作成と検証の選択確率が高くなります。不正行為を行った場合、そのステーキングされたトークンは没収されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめと比較&#34;&gt;まとめと比較
&lt;/h2&gt;&lt;p&gt;より明確に理解するためには、表を使って両者の根本的な違いをまとめることができます。&lt;/p&gt;
&lt;p&gt;| &lt;strong&gt;資産の形態&lt;/strong&gt; | CSDにおける電子帳簿（デマテリアライズド） | ブロックチェーン上の原生デジタルトークン（ネイティブデジタルトークン） |&lt;/p&gt;
&lt;h2 id=&#34;まとめと比較-1&#34;&gt;まとめと比較
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;伝統株式市場&lt;/th&gt;
&lt;th&gt;デジタル通貨市場&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;所有権証明&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;証券会社の帳簿記録（受益所有権）&lt;/td&gt;
&lt;td&gt;私鍵の制御（直接所有権）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめと比較-2&#34;&gt;まとめと比較
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;伝統株式市場&lt;/th&gt;
&lt;th&gt;デジタル通貨市場&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;信頼モデル&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;規制された法制度および金融機関への信頼&lt;/td&gt;
&lt;td&gt;オープンソースコードと暗号学的証明による「信頼の排除」&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめと比較-3&#34;&gt;まとめと比較
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;伝統株式市場&lt;/th&gt;
&lt;th&gt;デジタル通貨市場&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;コアとなる帳簿&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CSDによって維持される中央集権型帳簿&lt;/td&gt;
&lt;td&gt;全ネットワークノードによって共同で維持される分散型帳簿&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめと比較-4&#34;&gt;まとめと比較
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;伝統株式市場&lt;/th&gt;
&lt;th&gt;デジタル通貨市場&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;取引相手方&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;CCP（中央清算所）&lt;/td&gt;
&lt;td&gt;取引の相手方またはスマートコントラクト&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめと比較-5&#34;&gt;まとめと比較
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;伝統株式市場&lt;/th&gt;
&lt;th&gt;デジタル通貨市場&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;コアな推進力&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;機関信用 (機関クレジット)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;アルゴリズムと暗号化技術 (アルゴリズムと暗号化技術)&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;まとめと比較-6&#34;&gt;まとめと比較
&lt;/h2&gt;&lt;p&gt;上記補足をご参照いただくと、従来の金融が複雑な「信頼チェーン」を構築することでリスク管理や決済を実現しているのに対し、暗号資産は技術手段（暗号学と分散型ネットワーク）を用いて仲介者を必要としない「自己認証による清算」の体系を構築しようとしていることがわかります。この2つの根本的に異なる基盤ロジックが、取引、決済、清算といったあらゆる側面で天と地ほどの差を生み出しているのです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>従来の株式取引で「決済」（クリアランス）という概念が必要となる理由は何ですか？</title>
        <link>https://ttf248.life/ja/p/why-the-concept-of-settlement-is-necessary-in-traditional-stock-trading/</link>
        <pubDate>Mon, 28 Jul 2025 00:18:46 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/why-the-concept-of-settlement-is-necessary-in-traditional-stock-trading/</guid>
        <description>&lt;p&gt;本日、世界がデジタル浪潮に巻き込まれている今、私たちは即時送金や秒速決済に慣れ親しんでいます。そのため、多くの人々は混乱を覚えます。「私は「売却」をクリックしたのに、資金がすぐに全額着金せず、引き出せないのはなぜか？ 1～2営業日も待つ必要があるの？」これは、まさに伝統的な株式取引における極めて重要かつ歴史悠久な概念——&lt;strong&gt;決済（Settlement）&lt;/strong&gt;—を象徴しています。&lt;/p&gt;
&lt;p&gt;簡単に言うと、「取引（Trade）」と「決済（Settlement）」は2つの独立したステップです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;取引：&lt;/strong&gt; つまり、あなたが取引所にて買い付け・売り付けの指示を出し、それが成立した瞬間です。この時点で、あなたは相手方と法的拘束力のある契約を締結し、将来の特定時点において株式と資金を交換することを約束します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;決済：&lt;/strong&gt; これは、契約で合意された内容が実行されるプロセスであり、株式の所有権が売り手から買い手に&lt;strong&gt;正式に、かつ取り消し不可逆的に&lt;/strong&gt;移転され、同時に資金も買い手の口座から売り手に&lt;strong&gt;正式に、かつ取り消し不可逆的に&lt;/strong&gt;振り込まれることになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの2つのステップを分離し、時間差（例：T+1制度、T+2制度）を設定する必要があるのは、歴史的な発展と金融リスクに対する厳格な管理の根源にあるのです。&lt;/p&gt;
&lt;h2 id=&#34;根源的历史紙に由来する時代&#34;&gt;根源的历史：紙に由来する時代
&lt;/h2&gt;&lt;p&gt;コンピュータシステムが普及する以前、株式は実質的に&lt;strong&gt;紙の証憑証書&lt;/strong&gt;でした。取引が取引所内で口頭またはジェスチャーによって合意された後、その後の作業は非常に煩雑でした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;物理輸送:&lt;/strong&gt; 売り手側の証券会社は金庫から対応する証憑証書を見つけ出す必要がありました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;背書転讓:&lt;/strong&gt; 証書の裏面で署名と背書を行い、所有権の譲渡を証明しました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人工伝達:&lt;/strong&gt; これらの証憑証書と対応する小切手は、専門家（信使）が都市中を移動し、買い手側の証券会社に届けられました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;検証照合:&lt;/strong&gt; 買い手側の証券会社は、証書の真正性と取引詳細の正確性を検証する必要がありました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このプロセスには大量の手作業と物理的な移動が含まれており、遅延と不確実性に満ちていました。そのため、これらの複雑なプロセスを完了するために必要なのは、数日間（当初はT+5まで）の決済サイクルでした。1960年代末、ウォール街は取引量の急増により「書類業務危機」（Paperwork Crisis）に陥り、大量の取引がタイムリーに決済できず、交易所は取引時間を短縮せざるを得ない状況に追い込まれました。これは、現代の電子化清算システムの構築を直接引き起こしました。&lt;/p&gt;
&lt;h2 id=&#34;現代コア代替不可能なリスク管理&#34;&gt;現代コア：代替不可能なリスク管理
&lt;/h2&gt;&lt;p&gt;今日すべての取引が電子化されているにもかかわらず、T+Nの決済システムは依然として維持されており、そのコア機能は「物流待ち」から&lt;strong&gt;金融システムの巨大なリスクを管理する&lt;/strong&gt;ものへと進化してきた。このプロセスは、主要な役割を担う**中央清算所（Central Counterparty, CCP）**によって行われ、アメリカのデポジットトレーディング・クリアランス機構（DTCC）や中国證券登記結算有限公司（中證登）などが挙げられる。
決済システムは主に以下のコアリスクを回避するために設計されている：&lt;/p&gt;
&lt;h3 id=&#34;相対者リスクcounterparty-risk&#34;&gt;相対者リスク（Counterparty Risk）
&lt;/h3&gt;&lt;p&gt;これは最も根本的なリスクです。株式を売却した場合、購入者が確実に期日内に支払いをしてもらえると断言できるでしょうか？逆の立場では、買い手も売り手が本物の株式を確実に引き渡してくれると保証できますか？どちらか一方に契約不履行が発生すれば、連鎖反応を引き起こす可能性があります。
&lt;strong&gt;解決策：&lt;/strong&gt; 中央相対者（CCP）の介入。
取引が成立した後、CCPは買い手と売り手の間に「介入」し、&lt;strong&gt;それは売り手にとっての「買い手」、買い手にとっては「売り手」となります。&lt;/strong&gt; このことを「契約更置」（Novation）と呼ばれる法的措置を通じて行うことで、元の売買当事者は互いに責任を負わなくなり、それぞれCCPに責任を負うことになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;売り手にとって：&lt;/strong&gt; 株式をCCPに引き渡せば、必ずCCPからお金を受け取れます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;買い手にとって：&lt;/strong&gt; お金をCCPに支払えば、必ずCCPから株式を受け取れます。
このようにして、個々の参加者の契約不履行リスクは、信用格が非常に高い中央機関であるCCPによって吸収され、市場全体に波及するのを防ぎます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;決済とネット清算-seitousu-to-netto-seiutsu&#34;&gt;決済とネット清算 (Seitousu to Netto Seiutsu)
&lt;/h3&gt;&lt;p&gt;大規模な証券会社は、1日に数百万件の取引を処理します。買い注文と売り注文の両方があります。もしすべての取引を個別に資金と有価証券を移転させるなら、システムは耐えられません。
&lt;strong&gt;解決策：&lt;/strong&gt; 決済日（T日）の前に「決済」を行います。
取引日（T日）の終了後、決済機関は各証券会社の買い注文と売り注文をすべて集計し、これを**「ネット清算」または「轧差」** と呼びます。例えば、ある証券会社が1日に顧客のために株式を合計で10億元購入し、9.8億元の株式を売却した場合、決済日には2000万の資金差額のみを決済機関に支払うだけで済み、19.8億の資金交換を行う必要はありません。同様に、株式の決済もネット清算で行われます。これにより、市場全体の運用効率が大幅に向上し、流動性需要が低下します。&lt;/p&gt;
&lt;h2 id=&#34;株式取引の完全な生命周期&#34;&gt;株式取引の完全な生命周期
&lt;/h2&gt;&lt;p&gt;ここでは、取引から決済までのプロセスを簡単な例を通して見ていきましょう（T+2ルールに基づきます）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;T日（取引日）：&lt;/strong&gt; 午前10時に「買い」注文を行い、100株の特定の企業の株式を即座に約定させます。この時点で、あなたは売り手と契約を結びますが、株式と資金の所有権はまだ移転していません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;T日後場～T+1日（決済期間）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交易所はあなたの取引データを中央清算機関（CCP）に送信します。&lt;/li&gt;
&lt;li&gt;CCPは取引情報を確認し、無効な場合は取引をキャンセルします。その後、「契約更替」を行い、あなたの取引相手となります。&lt;/li&gt;
&lt;li&gt;CCPは券商いがT日に行う全ての取引の純額を計算し、T+2日に支払うべき資金と証券を券商に通知します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;T+2日（決済日）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;午前中に、券商はCCPの指示に基づき、純額を支払うための資金をCCPに送金します。&lt;/li&gt;
&lt;li&gt;CCPが資金を受け取ると、証券保管機構に指令し、売り手の券商のアカウントから100株の株式をあなたの券商のアカウントに引き出します。&lt;/li&gt;
&lt;li&gt;券商は内部であなたの口座情報を更新し、あなたはこの100株の株式を保有していることを表示します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;これで決済が完了し、あなたは法律上、この100株の株式の正式な所有者となり、配当を受け取る権利や投票に参加する権利などを持つことになります。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要するに、伝統的な株式取引で「決済」という概念が必要とされるのは、紙媒体での取引の際の煩雑さを解決するための歴史的経緯と、現代のリスク管理理論が組み合わさった結果です。中央相手方と純額決済を通じて、金融市場全体の安定性と効率性を保障する核心制度として発展してきました。この「遅延」に見える設計は、まさに投資家が取引相手の違約リスクから保護するための重要な防火壁なのです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>デジタル通貨の決済と清算：7x24時間ノンストップ取引の裏側の仕組みを解明</title>
        <link>https://ttf248.life/ja/p/over-the-counter-otc-clearing-and-settlement-of-digital-currencies-unveiling-the-mechanisms-behind-7x24-continuous-trading/</link>
        <pubDate>Mon, 28 Jul 2025 00:03:32 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/over-the-counter-otc-clearing-and-settlement-of-digital-currencies-unveiling-the-mechanisms-behind-7x24-continuous-trading/</guid>
        <description>&lt;p&gt;従来の株式市場とは異なり、明確な始末時間があるのに対し、暗号資産市場は24時間365日取引が可能なという特性から、世界中の投資家の注目を集めている。この特性は、取引時間がない暗号資産の世界において、決済と清算（交割）はどのように行われるのかという核心的な問題を提起する。従来の金融における「休場」の概念が存在しない場合、決済・清算はどのように機能するのだろうか？　全く異なる仕組みになっているのだろうか？　答えは、暗号資産には決済と清算があるだけでなく、その実現方法とシステム設計こそが、全天候取引を支える重要な要素であるということだ。&lt;/p&gt;
&lt;h2 id=&#34;核心の違いt2からリアルタイム決済へ&#34;&gt;核心の違い：T+2からリアルタイム決済へ
&lt;/h2&gt;&lt;p&gt;伝統的な株式取引は、「T+N」の決済制度に従います（例えば、A株のT+1、米国株式のT+2）。これは、取引が成立した日（T日）の後、資金と証券の実質的な移動（決済）が、1つまたは複数の営業日後に完了することを意味します。この期間中、 clearing機関は、差引調整を行い、各当事者の受取金と支払金、および証券の状況を計算します。
デジタル通貨は、このパターンを完全に変えました。その清算と決済の中核は、**「取引即清算、清算即交収」**というものであり、これはその基盤にあるブロックチェーン技術によるものです。&lt;/p&gt;
&lt;h3 id=&#34;ブロックチェーン天然のリアルタイム全額決済システム&#34;&gt;ブロックチェーン：天然のリアルタイム全額決済システム
&lt;/h3&gt;&lt;p&gt;ブロックチェーン自体は、分散型かつ改竄不可能な公共な帳簿と見なすことができます。取引は「ブロック」に記録され、暗号学的な方法で前のブロックにリンクすることで、「チェーン」を形成します。このプロセスには、以下の重要な特性があります：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;リアルタイム性（Real-Time）：&lt;/strong&gt; 取引がネットワーク上のノードによって検証され、ブロックにパケット化されると、資産の移動が完了します。異なるブロックチェーンネットワーク（ビットコイン、イーサリアムなど）の混雑状況やブロック生成速度により、確認時間は数秒から数十分程度ですが、従来の金融の「T+N」と比較すると質的な飛躍です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全額交収（Gross Settlement）：&lt;/strong&gt; 従来の決済システムにおけるネット決済（Netting）とは異なり、ブロックチェーン上の取引は独立しており、全額で完了します。AがBにビットコインを送金するということは、帳簿上、Aのアドレスから1つ減少し、Bのアドレスが増加するだけであり、多方取引を轧差（わせ）して初めて振り込まれるという状況はありません。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最終性（Finality）：&lt;/strong&gt; あるブロックが十分な数の後続ブロックによって確認されると、その取引は「最終的」かつ不可逆的なものとなります。つまり、交収が完了すると、誰もそれを取り消したり、改竄したりすることはできません。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;したがって、根本的に言えば、&lt;strong&gt;デジタル通貨の交収はブロックチェーン上で発生し、ネットワーク共済によって自動的に完了します。&lt;/strong&gt; 従来の意義における中央清算相手方（CCP）や托管機関の介入は必要ありません。&lt;/p&gt;
&lt;h2 id=&#34;中心化取引所と分散型取引所異なる決済清算経路&#34;&gt;中心化取引所と分散型取引所：異なる決済清算経路
&lt;/h2&gt;&lt;p&gt;基盤技術は分散型であるにもかかわらず、ユーザーが暗号資産を取引する主要な場所である取引所は、中心化（Centralized Exchange, CEX）取引所と分散型（Decentralized Exchange, DEX）取引所の2種類に分かれており、それぞれの決済清算メカニズムには違いがあります。&lt;/p&gt;
&lt;h3 id=&#34;中心化取引所cex内部清算チェーン上交割&#34;&gt;中心化取引所（CEX）：内部清算＋チェーン上交割
&lt;/h3&gt;&lt;p&gt;ユーザーがバイナンス（Binance）、コインベースなどの中心化取引所で取引を行う場合、実際には交易所内の中心化された帳簿上で行われていること、ブロックチェーン上で行われることではない。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内部清算（記帳）:&lt;/strong&gt; ユーザーが取引所へデジタル通貨または法貨を充填した後、取引所はユーザーのアカウントに相応の残高をデータベースに記録する。プラットフォーム上のすべての買い取り行為、例えばUSDTでBTCを購入する場合など、本質的には取引所のデータベース内の異なるアカウント間の数字の増減である。このプロセスは、取引所の「マッチングエンジン」によって高速に完了し、内部的にリアルタイムで行われる清算と見なされる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;チェーン上交割（提現/充填）:&lt;/strong&gt; 実際にブロックチェーン上で発生する交割は、ユーザーが「充填」（外部ウォレットから取引所に転入）および「提現」（取引所から外部ウォレットへ転出）を行う場合にのみ発生する。このとき、取引所はチェーン上のトランザクションを開始し、資産の所有権を実際にブロックチェーン上に移動させる。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;システム設計における重要なポイント:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高性能マッチングエンジン:&lt;/strong&gt; 高い同時接続数下で迅速に買い取り注文をマッチングできるようにする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;冷熱ウォレット分離:&lt;/strong&gt; ほとんどのユーザーのアセットはオフライン状態の「冷ウォレット」に保管してセキュリティを確保し、少量の資産をオンライン状態の「熱ウォレット」に保管してユーザーの日常的な提現ニーズに対応する。これは7x24時間のアセットの安全な運用を維持するためのコア設計である。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内部帳簿データベース:&lt;/strong&gt; 高性能分散型データベースを採用し、内部取引記録の正確性と即時性を保証する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;去中心化交易所dex-链上原子交換&#34;&gt;去中心化交易所（DEX）: 链上原子交換
&lt;/h3&gt;&lt;p&gt;Uniswap、SushiSwapなどの分散型取引所では、取引プロセスは根本的に異なります。ユーザーは常に自分のウォレットの秘密鍵をコントロールし、取引は「スマートコントラクト」を通じてチェーン上で直接行われます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原子交換 (Atomic Swap):&lt;/strong&gt; これはDEXの清算交収の中核です。スマートコントラクトとは、ブロックチェーン上で自動的に実行されるプログラムであり、資産の交換を「原子性」で確実に行うことを保証します——つまり、両当事者が成功裏に交換するか、あるいはどちらも失敗するかという状況のみであり、一方が出資した資産がもう一方によって受け取られなくなることはありません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;清算と交収の同時完了:&lt;/strong&gt; ユーザーはウォレットを通じてスマートコントラクトとのインタラクションを承認し、取引がトリガーされ、ブロックチェーン上で確認されると、資産の清算と交収は瞬時に完了します。このプロセスには、いかなる中心化機関の信頼背書も必要ありません。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;システム設計における重要なポイント:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;スマートコントラクト:&lt;/strong&gt; 取引所の中核ロジックであり、取引ペア、流動性プール、価格アルゴリズム（自動マーケットメイカーAMMなど）といったものがコードで固定されており、公開され透明です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;チェーン上プロキシ (Oracles):&lt;/strong&gt; 外部市場の価格情報を安全にブロックチェーン上に入力するために使用されます。これにより、特定の種類のDEXは価格参照を提供できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;フロントエンド (Frontend):&lt;/strong&gt; ウェブページまたはアプリケーションを通じて、ユーザーが自分のウォレットを接続し、バックエンドのスマートコントラクトとインタラクションできるようにします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論暗号資産決済清算の新パラダイム&#34;&gt;結論：暗号資産決済清算の新パラダイム
&lt;/h2&gt;&lt;p&gt;要言えば、暗号資産は清算と決済の概念を全く持っていないわけではなく、ブロックチェーン技術と革新的なシステム設計により、多岐にわたる参加者、時間のかかるバックエンドプロセスから、効率的で透明性があり、場合によってはリアルタイムな自動化プロセスへと転換したのです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;清算の概念は依然として存在:&lt;/strong&gt; CEXにおいては内部帳簿のリアルタイムマッチングと記帳、DEXにおいてはスマートコントラクトの取引ロジックにも清算ルールが含まれています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;決済こそが核心的な変革:&lt;/strong&gt; ブロックチェーンコンセンサスによって決済の最終性が保証され、ほぼリアルタイムな資産移動を実現し、これが7x24時間不中断取引を支える基盤となっています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;システム設計は不中断性を目的とする:&lt;/strong&gt; CEXのホットウォレットとコールドウォレットアーキテクチャ、DEXの自動化スマートコントラクトなど、安全性を確保しながら、人工干渉なしに休むことなく取引できる環境を実現することが、システムの第一要件です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この画期的な清算決済メカニズムは、暗号資産市場が従来の金融市場と異なる顕著な特徴であるだけでなく、将来の金融インフラストラクチャの進化方向を示す重要な示唆を与えています。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Win11 プロフェッショナル版、リモートデスクトップ ログイン エラー：ログイン失敗</title>
        <link>https://ttf248.life/ja/p/win11-pro-professional-remote-desktop-login-error-login-failed/</link>
        <pubDate>Tue, 22 Jul 2025 01:10:10 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/win11-pro-professional-remote-desktop-login-error-login-failed/</guid>
        <description>&lt;p&gt;ホストが原因不明にブルースクリーンになり起動できず、UEFI形式のブート、システムが正常にロードできなくなっていました。MBR形式の古いブート方式に変更したところ、システムは正常に起動しました。&lt;/p&gt;
&lt;p&gt;通常の操作として、システムの遠隔デスクトップを有効にし、別のマシンでテストを行いました。ネットワーク関連はすべて正常でした。Microsoftアカウントを使用してログインし、以前と全く同じ状態でした。&lt;/p&gt;
&lt;p&gt;遠隔デスクトップにログインしようとした際、**「ログイン失敗」**というエラーが表示され、その他の情報は一切表示されませんでした。&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;これは Microsoft アカウントでログインしているシステムのため、リモートデスクトップ接続の際にデフォルトで使用されるのは Microsoft アカウントのメールアドレスであるため、システム上は Microsoft アカウントのメールアドレスをユーザー名として推奨されています。&lt;strong&gt;PIN&lt;/strong&gt; コード認証を有効にするよう推奨されています。&lt;/p&gt;
&lt;p&gt;インターネット上の情報を参考に、まず第一段階としてセキュリティ設定をオフにします。具体的には、「セキュリティを強化するため、このデバイス上の Microsoft アカウントでの Windows Hello ログインのみを許可します（推奨）」というオプションを無効化します。
&lt;img src=&#34;https://ttf248.life/p/win11-pro-professional-remote-desktop-login-error-login-failed/20250721235800.png&#34;
	width=&#34;470&#34;
	height=&#34;259&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ログイン設定&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;重要な第二段階として、システムを再起動します。これにより、PIN コード認証以外にも「Microsoft アカウント」のオプションが表示されます。アカウントでログインし、手動でユーザー名とパスワードを入力します。その後、再度リモートデスクトップ接続を試みると、問題なく動作するようになります。&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/answers/questions/2191955/question-2191955&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/answers/questions/2191955/question-2191955&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RWA（与）Web3：金融の新しいボトルに古いワインを詰めるのか？</title>
        <link>https://ttf248.life/ja/p/rwa-real-world-assets-and-web3-a-new-bottle-of-old-wine/</link>
        <pubDate>Mon, 21 Jul 2025 19:48:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/rwa-real-world-assets-and-web3-a-new-bottle-of-old-wine/</guid>
        <description>&lt;p&gt;技術革新の波を背景に、RWA（実物資産）とWeb3は、金融業界で今最も熱いキーワードとなっています。かつて保守的かつ安定した巨頭として見られていた伝統的な金融機関が、今ではこれらの新たな概念を積極的に受け入れ、RWAおよびDeFi（分散型金融）の発展を大きく推進しています。しかし、この技術主導による変革の裏側には、重要な問いがあります：これほど目を奪われるような新しい概念は、真に破壊的なイノベーションなのか、それとも伝統的な金融ビジネスを「再構築」しただけなのでしょうか？&lt;/p&gt;
&lt;h2 id=&#34;rwa-と-web3コア概念の解読&#34;&gt;RWA と Web3：コア概念の解読
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;RWA（Real World Assets）とは、現実世界の有形または無形の資産を、「トークン化」（Tokenization）技術によって、ブロックチェーン上で発行・流通するデジタル資産です。&lt;/strong&gt; これらの資産は、不動産、債券、プライベートローン、美術品、カーボンクレジットなど、多岐にわたります。その核心価値は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流動性の向上：&lt;/strong&gt; 従来、流動性が低い資産（例えば不動産）をより小さな単位に分割し、投資のハードルを下げることで、株式のように二次市場で容易に取引できるようにします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明性と効率性の向上：&lt;/strong&gt; ブロックチェーンの改ざん不可能性とトレーサビリティを活用して、資産の発行、取引、清算の手続きを簡素化し、中間業者や人的ミスを削減することで、コストを低減し、効率を高めます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;資金調達チャネルの拡大：&lt;/strong&gt; 資産所有者に対し、グローバルかつより効率的な資金調達プラットフォームを提供し、地域的および伝統的な金融仲介の制限を打破します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Web3（Web 3.0）とは、一般的に「次世代インターネット」と呼ばれるものであり、分散型、ユーザーが所有・制御するインターネットエコシステムを構築するという核心理念を持っています。&lt;/strong&gt; 現在、少数数の巨大テクノロジー企業によって支配されているWeb2時代とは異なり、Web3はブロックチェーン技術に基づいており、データ所有権とコントロールをユーザーに返還することを目的としています。その主要な特徴には以下のようなものがあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分散化：&lt;/strong&gt; 情報やアプリケーションは、単一企業のサーバーではなく、ネットワーク内の多数のノードに分散され、単一障害点のリスクや検閲のリスクを軽減します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ユーザー主権：&lt;/strong&gt; ユーザーは、個人データに対するより高いコントロール権限を持ち、誰と共有するか、どのように使用するかを選択できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;許可不要および検閲耐性：&lt;/strong&gt; 誰でもネットワークに参加し、アプリケーションやサービスをリリースしたり、利用したりすることができ、中央集権的な機関の承認を得る必要はありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;伝統金融機関が-rwa-と-defi-を積極的に推進する理由&#34;&gt;伝統金融機関が RWA と DeFi を積極的に推進する理由
&lt;/h2&gt;&lt;p&gt;伝統金融機関が RWA（Real World Assets：実物資産）と DeFi（Decentralized Finance：分散型金融）を積極的に推進している主な理由は、以下の戦略的考慮事項によるものです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;効率化とコスト削減:&lt;/strong&gt; 従来の金融システムには、大量の人手による審査、複雑な決済清算プロセス、煩雑なコンプライアンス手続きなどがあり、その結果として効率が低下し、コストが高額になるという問題がありました。スマートコントラクトやブロックチェーン技術を活用することで、DeFi と RWA は多くのプロセスを自動化し、運用コストを大幅に削減できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新たな収益源と市場の開拓:&lt;/strong&gt; RWA の登場により、金融機関は新たな資産クラスとビジネスモデルを開拓することができます。例えば、不動産やプライベート・クレジットプロジェクトなどのトークン化サービスを提供したり、有価証券を発行・取引したりすることで、手数料収入やコンサルティング収入を生み出すことができます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;競争への対応と優位性の確立:&lt;/strong&gt; 金融技術企業や暗号資産ネイティブ企業からの競争が激化しています。RWA と DeFi に積極的に投資することで、伝統金融機関は革新的な姿勢を示すことができ、次世代の顧客を獲得し、将来の金融格局において有利な立場を確保することができます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明性とリスク管理の向上:&lt;/strong&gt; ブロックチェーンの透明性は、資産の裏付けとなる情報の透明性を高め、投資家がリスクをより適切に評価するのに役立ちます。また、標準化されたトークン契約と自動化されたコンプライアンスチェックは、リスク管理の効率を高めることに貢献します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ビジネスの本質新しいボトルに古いワイン&#34;&gt;ビジネスの本質：新しいボトルに古いワイン？
&lt;/h2&gt;&lt;p&gt;RWA（トークン化された実物資産）とDeFi（分散型金融）が技術やパターンにおいて革新をもたらしてきましたが、核心のビジネスロジックにおいては、従来の金融機関が現在行っているRWA関連業務は、依然としてその&lt;strong&gt;伝統的なビジネスの延伸とデジタル化の進化&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;例えば、&lt;strong&gt;RWA&lt;/strong&gt;を例にとると、その核心は伝統的な資産をトークン化することです。このプロセスは、従来の&lt;strong&gt;資産証券化（ABS）&lt;strong&gt;と異曲同工であり、流動性の低いものの予測可能なキャッシュフローを持つ資産をパッケージングし、分層することで、金融市場で取引可能な証券へと変換します。RWAは、その証券化の媒体を従来の電子憑証からブロックチェーン上のトークンに転換するだけです。その本質は依然として&lt;/strong&gt;信用中介と資産管理&lt;/strong&gt;であり、質の高い資産を選別し、構造化設計を行い、投資家に販売することです。例えば、商業不動産の将来の賃貸収入権をトークン化して、不動産投資信託（REITs）の発行と同様に金融の本質的には違いありません。&lt;/p&gt;
&lt;p&gt;同様に、&lt;strong&gt;DeFi&lt;/strong&gt;分野では、その“分散型”という理念が従来の金融仲介を覆そうとする一方で、現在の伝統機関の参加方法は、&lt;strong&gt;その技術的優位性を活用して既存のビジネスを最適化すること&lt;/strong&gt;に重点が置かれています。例えば、スマートコントラクトを使用して融資承認と放流プロセスを簡素化したり、分散型取引所を通じてより効率的なクロスボーダー決済と清算を行ったりします。その核心となる&lt;strong&gt;貸付、取引、決済&lt;/strong&gt;などの業務は、依然として金融体系の基盤です。&lt;/p&gt;
&lt;p&gt;言い換えれば、伝統金融機関がRWAやDeFiを推進することは、まさに&lt;strong&gt;自己革命&lt;/strong&gt;であり、コアな金融機能を変化させないまま、技術を活用して効率を高め、コストを削減し、市場を拡大しようとするものです。彼らは自分自身を根本的に覆そうとしているのではなく、技術革新を通じて自社の業界地位を強化・拡大することを望んでいます。&lt;/p&gt;
&lt;p&gt;結論として、RWAとWeb3は間違いなく金融業界に深刻な変革をもたらしています。これらの技術は、従来の金融における多くの課題を解決します。しかし、現状の伝統金融機関にとって、これらの技術を採用することは、慎重かつ現実的な戦略選択と言えます。そのビジネスの本質は根本的に変化しておらず、依然として資産、信用、取引といった古くからの金融の命題を中心に展開されます。将来的には、技術の成熟と規制の整備により、より破壊的な金融イノベーションが現れるかもしれませんが、現状では“新瓶に古いワイン”という表現が最も適切であると言えるでしょう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>暗号資産の基礎概念</title>
        <link>https://ttf248.life/ja/p/digital-currency-fundamentals/</link>
        <pubDate>Mon, 21 Jul 2025 19:30:00 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/digital-currency-fundamentals/</guid>
        <description>&lt;p&gt;数字通貨の「マイニング」と「会計」の関係を、わかりやすいたとえ話を用いて説明します。また、ビットコインとイーサーステレウムが数量の上限で異なる理由についても解説します。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;はい、わかりやすい例え話を使い、数字通貨の「マイニング」と「会計」の関係を説明し、ビットコインとイーサーステレウムが数量の上限で異なる理由も解説します。&lt;/p&gt;
&lt;h2 id=&#34;採掘と帳簿付け全民参加型の会計大会&#34;&gt;採掘と帳簿付け：全民参加型の会計大会
&lt;/h2&gt;&lt;p&gt;ビットコインネットワーク全体を、全世界のあらゆる場所で発生するすべてのビットコイン取引（例えば、張三が李四にビットコインを送金する）を記録するために、誰かが公開透明な電子帳簿に記録する必要がある巨大なものだと想像してみてください。そうすれば、取引が成功したとみなされます。&lt;/p&gt;
&lt;p&gt;しかし、誰が帳簿付けをするのでしょうか？誰でも自由に書くことができれば、それは混乱になるだけです。&lt;/p&gt;
&lt;p&gt;この問題を解決するために、ビットコインシステムは継続的に「採掘・帳簿付け大会」を実施しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;帳簿付け（Bookkeeping）&lt;/strong&gt;: 過去約10分間に発生したすべての取引を「ブロック」（帳簿の一ページと理解できます）にまとめて、このブロックには取引記録だけでなく、前の「ブロック」（前一頁の帳簿）へのリンクが含まれています。このように一頁ずつリンクしてチェーン状になることで、改ざんが不可能なチェーン、「ブロックチェーン」が形成されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;採掘（Mining）&lt;/strong&gt;: 実際の核心問題は、誰がこのページを記録する資格があるのかということです。答えは：最も最初に非常に複雑な数学の問題を解いた人（またはマイニングプール）だけが、この回の帳簿付け権を獲得します。この問題を解くプロセスは、形象的に「採掘」と呼ばれます。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;なぜ「採掘」と呼ばれるのですか？&lt;/strong&gt; このプロセスには、大量の計算リソース（マイニングマシン）と電力（エネルギー）が必要です。現実世界で金鉱を掘るのに設備や労働力を投入するのと同様です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;問題解決の目的は何ですか？&lt;/strong&gt; この数学の問題自体に実用的な意味はありません。唯一の目的は、帳簿付けの難易度を高め、平均して10分あたりに1人（またはマイニングプール）が解けるようにすることです。これにより、帳簿更新の速度が安定し、システムのセキュリティも確保されます。誰かが帳簿を改ざんしようとすれば、ネットワーク全体の半分よりも多くの計算リソースを持っている必要があります。これは経済的にほぼ不可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;したがって、採掘と帳簿付けの関係は次のとおりに要約できます。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;「採掘」は「帳簿付け権」を争うプロセスであり、「帳簿付け」は成功した「採掘」の報酬と責任です。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;採掘と会計全民参加型の会計大会&#34;&gt;採掘と会計：全民参加型の会計大会
&lt;/h2&gt;&lt;p&gt;成功にマイニングを達成した「鉱工」は、以下の2つの作業を行います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;最新の取引を新しいブロックにまとめて、ブロックチェーンに接続する（会計処理の完了）。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;システムから与えられる報酬を得る。&lt;/strong&gt; この報酬には、以下の2つの要素が含まれます。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ブロック報酬 (Block Reward)&lt;/strong&gt;：システムが新規ビットコインを自動生成して報酬として与えるものです。これは新しいビットコインが創造される唯一の方法です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取引手数料 (Transaction Fees)&lt;/strong&gt;：当該ブロックに含まれるすべての取引の支払い者が支払う手数料です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ビットコインには上限がある一方でイーサーストリームethereumにはない理由とは&#34;&gt;ビットコインには上限がある一方で、イーサーストリーム（Ethereum）にはない理由とは？
&lt;/h2&gt;&lt;p&gt;これは、2つの暗号通貨における設計哲学と目標の根本的な違いに起因するものです。&lt;/p&gt;
&lt;h3 id=&#34;ビットコインbitcoinデジタルゴールド発行枚数固定&#34;&gt;ビットコイン（Bitcoin）：デジタルゴールド、発行枚数固定
&lt;/h3&gt;&lt;p&gt;ビットコインは当初から、金のような&lt;strong&gt;価値の保存手段&lt;/strong&gt;として設計されてきた。金の価値が重要な理由の一つは、その希少性—地球上の埋蔵量は限られていること—である。
この希少性を模倣するため、ビットコインの創設者中本聪は設計時に以下の二つの鉄則を定めた：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;発行枚数上限&lt;/strong&gt;: ビットコインの発行枚数は永久に &lt;strong&gt;2100万枚&lt;/strong&gt; に制限される。多すぎても少なすぎてもない、ちょうど良い数である。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;マイニング報酬の半減&lt;/strong&gt;: 約4年（または21,000個のブロックが生成されるたびに）、鉱業者がブロックをマイニングして成功した場合に得られる報酬は半分減少する。
&lt;ul&gt;
&lt;li&gt;2009年の開始時は50 BTC&lt;/li&gt;
&lt;li&gt;2012年に半減して25 BTC&lt;/li&gt;
&lt;li&gt;2016年に半減して12.5 BTC&lt;/li&gt;
&lt;li&gt;2020年に半減して6.25 BTC&lt;/li&gt;
&lt;li&gt;2024年に半減して3.125 BTC&lt;/li&gt;
&lt;li&gt;…以降、約2140年頃まで、新しいコインの報酬はほぼゼロに近づく。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;この設計により、ビットコインは**インフレーション（通貨緊縮）**の特性を持つ。時間の経過とともに、新しいコインの生産量はますます少なくなっていく。もし需要が一定または増加し続ければ、理論上その価値は上昇するだろう。これにより、「デジタルゴールド」としての地位が強化される。すべてのビットコインがマイニングされてしまうと、鉱業家の収入は取引手数料のみに依存することになる。&lt;/p&gt;
&lt;h3 id=&#34;イーサリアム分散型アプリケーションプラットフォームより柔軟な供給戦略&#34;&gt;イーサリアム：分散型アプリケーションプラットフォーム、より柔軟な供給戦略
&lt;/h3&gt;&lt;p&gt;イーサリアムの目標はビットコインとは異なります。それは単なるデジタル通貨ではなく、「世界コンピュータ」であり、スマートコントラクトと分散型アプリケーション（DApps）を実行するためのプラットフォームを目的としています。
イーサリアムを分散型の「アプリケーションストア」および「オペレーティングシステム」だと想像してください。このシステムでは、プログラムの実行や取引を行うために「燃料費」（Gas Fee）を支払う必要があり、その燃料はイーサリアム（ETH）です。
この巨大で複雑なシステムを維持するためには、ネットワークのセキュリティを保護するためにマイナー（現在はバリデーター）を継続的にインセンティブ化する必要があります。ビットコインのようにハードキャップを設定した場合、新しいコインがすべて使い果たされた場合、取引手数料だけでネットワークの長期的な安全性を保証できるかどうかは不明です。
そのため、イーサリアムは&lt;strong&gt;ハードキャップを設けない&lt;/strong&gt;戦略を採用しました。しかし、これは無限にインフレーションするわけではありません。イーサリアムの通貨政策はいくつかの重要な調整を経てきました：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初期（プルーフ・オブ・ワークPoW）&lt;/strong&gt;：ビットコインと同様に、マイニングによって新しいコインが生成されますが、明確な総量上限や固定された減半サイクルはありませんでした。これにより、インフレーション率は比較的高いです。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ロンドンアップグレード（EIP-1559）&lt;/strong&gt;：取引手数料の「焼却」メカニズムが導入されました。ユーザーが支払う取引手数料の一部は、基礎手数料として直接「焼却」（流通から永久に削除）されます。つまり、ネットワークのトランザクションが活発な場合、ETHの焼却量は新規発行量よりも多くなる可能性があり、&lt;strong&gt;インフレーション&lt;/strong&gt;につながります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合併（The Merge）&lt;/strong&gt;：イーサリアムは、「マイニング」（プルーフ・オブ・ワークPoW）から「ステイキング」（プルーフ・オブ・ステークPoS）に移行しました。現在、マイナーは電力を使って問題を解く必要がなく、代わりに「バリデーター」が自分のETHをステーキングすることで会計権と報酬を得ます。この転換により、新規ETHの発行速度が大幅に低下（90%以上）しています。
&lt;strong&gt;イーサリアムの特徴のまとめ：&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ハードキャップなし&lt;/strong&gt;：ネットワークの長期的な安全性と開発のための柔軟性を提供します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;動的供給&lt;/strong&gt;：焼却メカニズムとステーク報酬による動的なバランスにより、総供給量は穏やかにインフレーションする可能性も、トランザクションが活発な期間にはディフレーションする可能性もあります。その目標は絶対的な希少性を目指すのではなく、十分なセキュリティを維持しつつ、ETHを「燃料」として利用可能に保つことです。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;コアの違いを一覧&#34;&gt;コアの違いを一覧
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ビットコイン (Bitcoin)&lt;/th&gt;
&lt;th&gt;イーサーステート (Ethereum)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;コアな定位&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;デジタルゴールド、価値の貯蔵&lt;/td&gt;
&lt;td&gt;世界コンピュータ、分散型アプリケーションプラットフォーム&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;コアの違いを一覧-1&#34;&gt;コアの違いを一覧
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ビットコイン (Bitcoin)&lt;/th&gt;
&lt;th&gt;イーサーステート (Ethereum)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;総発行上限&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;あり&lt;/strong&gt;，2100万枚&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;なし&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;コアの違いを一覧-2&#34;&gt;コアの違いを一覧
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ビットコイン (Bitcoin)&lt;/th&gt;
&lt;th&gt;イーサーステートム (Ethereum)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;通貨政策&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;有弾力性（総量固定、供給量減半）&lt;/td&gt;
&lt;td&gt;動的供給（発行＋銷毁、インフレもデフレも可能）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;コアの違いを一覧-3&#34;&gt;コアの違いを一覧
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ビットコイン (Bitcoin)&lt;/th&gt;
&lt;th&gt;イーサーステートム (Ethereum)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;発行目的&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;鉱工への報酬、マイニング完了まで&lt;/td&gt;
&lt;td&gt;長期的にネットワークのセキュリティと運用を保障&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;主要の違いを一目で&#34;&gt;主要の違いを一目で
&lt;/h2&gt;&lt;p&gt;このわかりやすい説明が、それらの関係と違いを理解するのに役立つことを願っています！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>香港株式市場（HONG KONG）の閃電配当（FLASH DEAL）事例</title>
        <link>https://ttf248.life/ja/p/hksg-flash-crash-sell-off-case/</link>
        <pubDate>Mon, 21 Jul 2025 19:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hksg-flash-crash-sell-off-case/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;%e7%8e%96%e6%96%b9%e6%99%ba%e6%8a%95.pdf&#34; &gt;会社は最近、香港市場で資金調達を行っています&lt;/a&gt;。この資金調達は、小米が行ったものと似たようなものであり、本稿では詳細に分析します。&lt;/p&gt;
&lt;h2 id=&#34;九方智投配售案の解釈&#34;&gt;九方智投配售案の解釈
&lt;/h2&gt;&lt;p&gt;配当参加について、費用はどの程度かかりますか。これらの株式はいつ売却可能ですか。この文書には他に重要な情報が含まれていますか&lt;/p&gt;
&lt;h3 id=&#34;-配售における費用&#34;&gt;✅ 配售における費用
&lt;/h3&gt;&lt;p&gt;本配售后は、&lt;strong&gt;既存株主が旧株から新株を配售する&lt;/strong&gt;という配售后であり、配售后の対象は新規投資家（承配人）であり、&lt;strong&gt;一般の個人投資家の申込みには該当しない&lt;/strong&gt;ため、以下の通りです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;もしあなたが承配代理によって選ばれた承配人（すなわちプロ/機関/個人投資家ではない場合）であれば、費用は発生しません。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;-配售に関わる費用&#34;&gt;✅ 配售に関わる費用
&lt;/h3&gt;&lt;p&gt;もしあなたが承配人である場合、かかる費用は以下の通りです。
| 配售価格 | ✅ はい | 1株あたり39.25香港ドル |&lt;/p&gt;
&lt;h3 id=&#34;-配售に関わる費用-1&#34;&gt;✅ 配售に関わる費用
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;費用タイプ&lt;/th&gt;
&lt;th&gt;承配人が負担するか&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;经纪佣金&lt;/td&gt;
&lt;td&gt;✅ はい&lt;/td&gt;
&lt;td&gt;配售价、手数料、印紙税などを含まない&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-配售に関わる費用-2&#34;&gt;✅ 配售に関わる費用
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;費用タイプ&lt;/th&gt;
&lt;th&gt;承配人が負担するか&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;取引手数料 / 証券取引手数料&lt;/td&gt;
&lt;td&gt;✅ はい&lt;/td&gt;
&lt;td&gt;香港株式の取引ルールに従って徴収&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-配售に関わる費用-3&#34;&gt;✅ 配售に関わる費用
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;費用タイプ&lt;/th&gt;
&lt;th&gt;承配人が負担するか&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;印紙税&lt;/td&gt;
&lt;td&gt;✅ はい&lt;/td&gt;
&lt;td&gt;香港株式の売買には0.13%の印紙税がかかります&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-参加卸売に関わる費用&#34;&gt;✅ 参加卸売に関わる費用
&lt;/h3&gt;&lt;h3 id=&#34;-割当株式の売却時期について&#34;&gt;✅ 割当株式の売却時期について
&lt;/h3&gt;&lt;p&gt;公告内容に基づくと：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「割当株式は、ブローカー代理が少なくとも六名以上の承受人に対し最大限努力のもと配当し、完了次第売却いたします。&lt;strong&gt;配售后完成后，预计任何承受人が本社の主要株主となることはありません。&lt;/strong&gt;」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;-株式の売却時期について&#34;&gt;✅ 株式の売却時期について
&lt;/h3&gt;&lt;p&gt;これは以下の意味を示します：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配当株式の譲渡制限が解除され、自由に流通可能&lt;/strong&gt;になります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ロックアップ期間はありません&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;香港証券取引所（ヒンゲン）の二次市場で自由に売買できます&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;配当株式の最終期限は&lt;strong&gt;2025年7月17日&lt;/strong&gt;であり、譲渡完了は&lt;strong&gt;7月17日またはその直後のいずれか&lt;/strong&gt;で完了する見込みです。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-重要なお知らせ&#34;&gt;✅ 重要なお知らせ
&lt;/h3&gt;&lt;h4 id=&#34;資金用途74622億港元淨額&#34;&gt;&lt;strong&gt;資金用途（746.22億港元淨額）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;九方智投はこの資金を以下の４つの事業に活用します：
| チェーン上金融資源投資 | 未定義 | RWA基層資産、デジタル資産取引所、信託銀行、ステーブルコイン運営主体への投資 |&lt;/p&gt;
&lt;h4 id=&#34;資金用途74622億港元純額&#34;&gt;&lt;strong&gt;資金用途（746.22億港元純額）&lt;/strong&gt;
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;割合&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;デジタル資産サービス戦略展開&lt;/td&gt;
&lt;td&gt;不明瞭&lt;/td&gt;
&lt;td&gt;香港および中東地区、Cエンド向けのデジタル資産投資サービス&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;資金用途74622億港元淨額-1&#34;&gt;&lt;strong&gt;資金用途（746.22億港元淨額）&lt;/strong&gt;
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;比率&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;デジタル資産投資顧問の新モデル&lt;/td&gt;
&lt;td&gt;不明&lt;/td&gt;
&lt;td&gt;AI + 研究、MCN運用経験との組み合わせ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;資金用途74622億港元純額-1&#34;&gt;&lt;strong&gt;資金用途（746.22億港元純額）&lt;/strong&gt;
&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;th&gt;比率&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;流動性補充&lt;/td&gt;
&lt;td&gt;不明&lt;/td&gt;
&lt;td&gt;一般企業用途&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;配售価格の割引が大きい&#34;&gt;&lt;strong&gt;配售価格の割引が大きい&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;7月15日の終値41.75香港ドルから&lt;strong&gt;6.0%&lt;strong&gt;の&lt;/strong&gt;割引&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;過去5日間の平均価格47.30香港ドルから&lt;strong&gt;17.0%&lt;strong&gt;の&lt;/strong&gt;割引&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;過去10日間の平均価格46.36香港ドルから&lt;strong&gt;15.3%&lt;strong&gt;の&lt;/strong&gt;割引&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;株式構成の変化&#34;&gt;&lt;strong&gt;株式構成の変化&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;募集引受終了後、&lt;strong&gt;総株数は4.48億株から4.68億株へ増加&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;既存株主の保有割合が&lt;strong&gt;若干希釈&lt;/strong&gt;されたものの、&lt;strong&gt;依然として控股地位を維持&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;新増設発行20,000,000株を承配人が保有し、総株数に占める割合は約&lt;strong&gt;4.27%&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;リスクに関する注意喚起&#34;&gt;&lt;strong&gt;リスクに関する注意喚起&lt;/strong&gt;
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;募集事項は&lt;strong&gt;必ずしも完了するとは限らない&lt;/strong&gt;。市場の安定性、規制当局への届出、重大な不利事象など、複数の条件を満たす必要がある。&lt;/li&gt;
&lt;li&gt;14日以内に完了しない場合、投資信託の購入手続きは自動的に無効となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-概要一言以蔽之&#34;&gt;✅ 概要一言以蔽之
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一般投资者无法参与此次配售；配售股份无锁定期，交割后即可交易；九方智投拟用7.46亿港元布局数字资产与链上金融，未来或向Web3、AI投资顾问方向转型。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;概要一言以蔽之 (Gyōsai ichimon ni moishizu)&lt;/strong&gt; - Summary in one sentence&lt;/li&gt;
&lt;li&gt;将原文翻译成日语，并保持了Markdown格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;先旧后新配售方式详解&#34;&gt;「先旧后新」配售方式详解
&lt;/h2&gt;&lt;p&gt;Kimi: &amp;ldquo;&lt;strong&gt;既存株主が旧株から順に売却&lt;/strong&gt;」は、&lt;strong&gt;香港株式市場で一般的な配售方式&lt;/strong&gt;であり、英語では &lt;strong&gt;Top-up Placement&lt;/strong&gt; と呼ばれます。これを「&lt;strong&gt;大株主がまず旧株を売り、その後新規株式を発行する&lt;/strong&gt;」という二段階のプロセスと理解できます。&lt;/p&gt;
&lt;h3 id=&#34;-例を挙げれば理解できます&#34;&gt;✅ 例を挙げれば理解できます
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;九方智投&lt;/strong&gt;の例として：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;第一段階：主要株主が旧株を売却（先旧）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;既存の株主（Coreworth Investmentsなど）が既に保有している&lt;strong&gt;20,000,000株の旧株&lt;/strong&gt;を、市場参加者（承配人）に39.25香港ドル/株で販売します。&lt;/li&gt;
&lt;li&gt;この結果、&lt;strong&gt;主要株主の持ち株数が減少&lt;/strong&gt;し、&lt;strong&gt;発行済株式総数は変わらない&lt;/strong&gt;ことになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第二段階：会社が主要株主に新株を発行（後新）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;これらの主要株主に&lt;strong&gt;同じ数量（20,000,000株）の新株&lt;/strong&gt;を39.25香港ドル/株で発行します。&lt;/li&gt;
&lt;li&gt;主要株主は、旧株の売却代金で新株を購入し、&lt;strong&gt;持ち株数を元の状態に戻す&lt;/strong&gt;ことになります。&lt;/li&gt;
&lt;li&gt;しかし、発行済株式総数は増加（4.48億株から4.68億株へ）し、&lt;strong&gt;会社が成功裏に資金調達を達成した&lt;/strong&gt;ことになり、&lt;strong&gt;主要株主の持ち株比率がわずかに希薄化する&lt;/strong&gt;ことになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-なぜそうするのか&#34;&gt;✅ なぜそうするのか？
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;迅速な資金調達&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;新株発行のように長期間かかるプロセスを回避し、大株主が既存株式を先行して売却し、その後新株式を発行することで、迅速に資金を得る。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-なぜそうするのか-1&#34;&gt;✅ なぜそうするのか？
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;支配権を維持する&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;主要株主の最終的な保有株式数が変わらないため、支配権が過度に希薄化されることはない。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-なぜそうするのか-2&#34;&gt;✅ なぜそうするのか？
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目的&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;新規投資家の獲得&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;ディスカウントによる割当を通じて、機関投資家や富裕層の投資家を誘致し、株主構成を最適化する。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-なぜそうするのか-3&#34;&gt;✅ なぜそうするのか？
&lt;/h3&gt;&lt;h3 id=&#34;-主要違い旧株-vs-新株&#34;&gt;✅ 主要違い：旧株 vs 新株
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;タイプ&lt;/th&gt;
&lt;th&gt;新株の有無&lt;/th&gt;
&lt;th&gt;直ちに取引可能か&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;旧株&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;❌ 不再発行&lt;/td&gt;
&lt;td&gt;✅ 即時取引可能&lt;/td&gt;
&lt;td&gt;市場に出回っている既存の株式で、新規投資家に販売した後も直接流通します。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-主要違い旧株-vs-新株-1&#34;&gt;✅ 主要違い：旧株 vs 新株
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;タイプ&lt;/th&gt;
&lt;th&gt;新発行株式の有無&lt;/th&gt;
&lt;th&gt;即時取引可能か&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;新株&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 新規発行&lt;/td&gt;
&lt;td&gt;⚠️ ロック期間あり（通常180日）&lt;/td&gt;
&lt;td&gt;会社が新たに発行する株式で、既存の大株主へのもので、通常は一定期間ロックされます。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-主要違い旧株と新株&#34;&gt;✅ 主要違い：旧株と新株
&lt;/h3&gt;&lt;hr&gt;
&lt;h3 id=&#34;-要点まとめ&#34;&gt;✅ 要点まとめ
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;「旧換新上」とは、大株主がまず保有株式を市場に売り放ち、その後、同じ数だけ新規株式を購入することです。これにより、会社は資金調達を行いながらも、経営権を失うことなく維持することができます。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;恒生發行規則解讀&#34;&gt;恒生發行規則解讀
&lt;/h2&gt;&lt;p&gt;Kimi: 你的疑問非常關鍵：「為什麼恆生上市公司看起來可以『隨意』增發股票？是不是香港市場規則特別寬鬆？」
答案是：「是的，恆生比A股確實更寬鬆得多」，但也「不是『毫無限制』」，而是有一套「寬鬆但有限」的規則體系。&lt;/p&gt;
&lt;h3 id=&#34;-上場株式市場香港株とa株増資ルールの比較主要な違い&#34;&gt;✅ 上場株式市場（香港株）とA株：増資ルールの比較（主要な違い）
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロジェクト&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;上場株式市場（香港株）ルール&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;A株ルール&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;株主総会での承認が必要か&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 毎年株主総会で一度の権限を付与し、取締役会が資本増強（発行）を&lt;strong&gt;最大20%まで&lt;/strong&gt;行うことができる。その後、別途会議は不要&lt;/td&gt;
&lt;td&gt;❌ 各増資ごとに&lt;strong&gt;個別株主総会を開催し、2/3以上の賛成を得る必要あり&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-上場適格証券h股とa株増設ルール比較主要な違い&#34;&gt;✅ 上場適格証券（H股）とA株：増設ルール比較（主要な違い）
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロジェクト&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;上場適格証券ルール&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;A株ルール&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;証券取引委員会（SEC）の承認が必要か&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;❌ 20%以下の資本増強＋割引価格が20%以下の場合、「フラッシュ配分」が可能&lt;/td&gt;
&lt;td&gt;✅ SECによる&lt;strong&gt;個別承認&lt;/strong&gt;が必要で、プロセスが長い&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-港股とa株増発ルール比較コアな違い&#34;&gt;✅ 港股とA株：増発ルール比較（コアな違い）
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロジェクト&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;港股ルール&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;A株ルール&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;増発比例上限&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 単次最多20%，12ヶ月内累積摊薄不得超过25%&lt;/td&gt;
&lt;td&gt;✅ 一般不得超過&lt;strong&gt;30%&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-港股とa株増発ルール比較コアな違い-1&#34;&gt;✅ 港股とA株：増発ルール比較（コアな違い）
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロジェクト&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;港股ルール&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;A株ルール&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;価格下落幅制限&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅ 発行価格は市場価格の80%を超えないこと（最大20%引き下げ）&lt;/td&gt;
&lt;td&gt;✅ ヘดターゲット増発は市場価格の80%を超えないこと&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-恒生指数-vs-上海総合指数増配ルール比較コアな違い&#34;&gt;✅ 恒生指数 vs 上海総合指数：増配ルール比較（コアな違い）
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロジェクト&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;恒生指数ルール&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;上証指数ルール&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-上場適格証券h股-vs-a株増設ルール比較主要相違点&#34;&gt;✅ 上場適格証券（H股） vs A株：増設ルール比較（主要相違点）
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;プロジェクト&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;上場適格証券ルール&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;A株ルール&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;用途制限&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;✅  lediglich die Offenlegung des Zwecks, keine wesentliche Prüfung&lt;/td&gt;
&lt;td&gt;✅ Muss den Zweck detailliert erläutern, &lt;strong&gt;証券取引委員会（SEC）は却下できる&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;-上場適格証券の比較増配ルールに関する主要な違いコアな差異&#34;&gt;✅ 上場適格証券の比較：増配ルールに関する主要な違い（コアな差異）
&lt;/h3&gt;&lt;h3 id=&#34;-港元株が気楽に見える理由&#34;&gt;✅ 港元株が「気楽」に見える理由？
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;「一般性授権」メカニズム&lt;/strong&gt;:
毎年株主総会で、取締役会の新規発行株式上限20%を一度に認可し、その後&lt;strong&gt;別途株主総会を開く必要がない&lt;/strong&gt;。取締役会は、状況に応じて株式を発行できる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;「閃電配售（シャンドンパイセウ）」メカニズム&lt;/strong&gt;:
新規発行が20%の資本上限を超えず、割引率が20%を超えなければ、&lt;strong&gt;24時間以内に発行を完了できる&lt;/strong&gt;。審査は不要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;証券取引委員会による逐次承認は不要&lt;/strong&gt;:
香港証取引所は、&lt;strong&gt;形式的な審査のみを行い&lt;/strong&gt;、資金の用途や企業の質に実質的な介入を行わない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;-例を挙げます九方智投が今回なぜ旧から新へという展開を実現できたのか&#34;&gt;✅ 例を挙げます：九方智投が今回なぜ「旧から新へ」という展開を実現できたのか？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;九方智投は&lt;strong&gt;2025年6月20日株主総会&lt;/strong&gt;で&lt;strong&gt;一般性承認&lt;/strong&gt;を得ており、新たに最大20%（つまり89,671,400株以下）の新株式の発行を認可されています。&lt;/li&gt;
&lt;li&gt;本件では20,000,000株を発行し、**資本の4.46%**に過ぎず、20%の上限を下回っており、&lt;strong&gt;承認条件を完全に満たしています&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;したがって、&lt;strong&gt;再度株主総会を開催する必要はなく、証券取引委員会（SEC）の承認も不要で、取締役会が決定することができます&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-概要一言で表すと&#34;&gt;✅ 概要一言で表すと
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;香港株式市場は、「取締役会＋年次承認」の迅速な増発を可能にし、20%を超える資本比率や割引上限を超えない限り、「即時配当」を実施できます。一方、中国A株では、毎回株主総会と証券監督管理委員会（CSRC）の承認が必要であり、手続きが長く制限が多くなります。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;-要点まとめ-1&#34;&gt;✅ 要点まとめ
&lt;/h3&gt;&lt;p&gt;したがって、九方智投は「随意増発」ではなく、&lt;strong&gt;香港株の緩やかな市場メカニズムを合法的に活用した&lt;/strong&gt;ものです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>包括次要内容在内的全面分析：资本收益税、CRS（自动脱税协定）及内地居民在香港和美国股票投资的税务指南</title>
        <link>https://ttf248.life/ja/p/comprehensive-analysis-capital-gains-tax-crs-and-inland-residents-hong-kong-us-stock-investment-tax-guide/</link>
        <pubDate>Wed, 16 Jul 2025 21:12:40 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/comprehensive-analysis-capital-gains-tax-crs-and-inland-residents-hong-kong-us-stock-investment-tax-guide/</guid>
        <description>&lt;p&gt;内地の居住者が香港株式および米国株式に投資する場合、関連する税制を理解することは非常に重要です。本稿では、資本所得税とは何か、香港・米株への投資がなぜこの税種に関与するのかを包括的に分析し、CRS（常設事務所規則）の仕組みを解説します。さらに、本稿では、内地の居住者が香港証券会社、滬港通、深港通といったさまざまなチャネルを通じて香港・米株に投資する場合の税務上の責任と具体的な税率についても詳細に説明します。&lt;/p&gt;
&lt;h2 id=&#34;核心概念解説-kokoronihongo-kekisai&#34;&gt;核心概念解説 (Kokoronihongo Kekisai)
&lt;/h2&gt;&lt;h3 id=&#34;資本利得税capital-gains-taxとは&#34;&gt;資本利得税（Capital Gains Tax）とは？
&lt;/h3&gt;&lt;p&gt;資本利得税（CGT）とは、&lt;strong&gt;資産を売却して得た利益&lt;/strong&gt;に対する課税のことです。これらの資産には、株式、債券、不動産、貴金属などが含まれます。購入価格よりも高い価格で資産を売却した場合に発生する収益（資本利益）は、資本利得税の対象となる可能性があります。&lt;/p&gt;
&lt;p&gt;留意点として、すべての国や地域が資本利得税を課すわけではありません。例えば、香港では現在、資本利得税は徴収されていません。&lt;/p&gt;
&lt;h3 id=&#34;なぜ港元株に資本所得税が発生するのか&#34;&gt;なぜ港元株に資本所得税が発生するのか？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;米元株&lt;/strong&gt;：米国は資本所得税を課す国です。非アメリカの納税居住者（例えば、ほとんどの内地投資家）が米元株を売却する場合、通常は資本所得税を免除できますが、いくつかの条件を満たす必要があります（例えば、1年間の米国在留日数が183日を超えないこと）。しかし、米元株からの配当（股息）は、通常30%の源泉徴収税がかかります。ただし、中国内地とアメリカ合衆国間の租税協定により、中国内地居住者の税率は10%に軽減される場合があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;港元株&lt;/strong&gt;：上記のとおり、香港は資本所得税を課しません。したがって、どのようなチャネルを通じて港元株を取引する場合でも、株式の売買差益に対して税金を支払う必要はありません。ただし、これは内地居住者がこの部分の収益について中国内地税務当局に申告する必要がないことを意味するものではなく、むしろそうする必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;crs申报とは共同申报准則&#34;&gt;CRS申报とは（共同申报准則）？
&lt;/h3&gt;&lt;p&gt;CRS、すなわち「共同申报準則」（Common Reporting Standard）は、グローバルな金融口座に関する税務情報自動交換基準です。その主な目的は、海外の口座を利用した跨境逃税行為を打击することです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;仕組み&lt;/strong&gt;: 要約すると、CRSに署名している国/地域（例えば香港）の金融機関（銀行、証券会社など）は、その非本地の納税居民の口座を特定し、その口座情報（氏名、住所、納税居民身份、口座残高、年度総収入など）を所在地の税務当局に報告します。その後、税務当局はこれらの情報を、口座保持者として納税居民である国/地域の税務当局と交換します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内地投資家への影響&lt;/strong&gt;: 香港の証券会社で口座を開設している内地居民の場合、その納税居民身份は中国内地であり、香港の金融機関は口座情報を香港税関を通じて中国国家税务总局に交換します。これにより、内地税務当局は海外の金融資産と収益に関する情報（所得）を把握し、グローバルな所得課税の基礎を提供することになります。&lt;/p&gt;
&lt;h2 id=&#34;内地居民美股交易税务详解&#34;&gt;内地居民美股交易税务详解
&lt;/h2&gt;&lt;p&gt;中国《个人所得税法》规定，中国税务居民个人需要就其&lt;strong&gt;来源于全球的所得&lt;/strong&gt;缴纳个人所得税。这意味着，即使投资收益发生在境外，并且在当地可能免税，仍有义务向中国税务机关申报并缴纳税款。
近期，中国税务部门已加强对个人境外所得的税收征管力度。&lt;/p&gt;
&lt;h3 id=&#34;香港の証券会社を通じて香港株式および米国株式の取引&#34;&gt;香港の証券会社を通じて香港株式および米国株式の取引
&lt;/h3&gt;&lt;p&gt;内地居住者の方が、香港の証券会社（富途證券、老虎證券など）を通じて香港株式および米国株式を取引する場合、税務上の責任は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;米国株式取引&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;譲渡所得&lt;/strong&gt;：米国株式の売買差益から得られる利益は、「資産譲渡所得」に該当します。中国個人所得税法に基づき、**20%**の税率で中国税務当局に申告・納税する必要があります。米国では通常、非居住者の資本利得税が免除されますが、中国の税務上の居住者として、この部分の全世界所得について中国への課税が必要となる場合があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配当金&lt;/strong&gt;：米国株式から得られる配当金は、証券会社が通常**10%**の源泉徴収税（中米税制優遇措置を受けているもの）を代扣します。この時点で海外で納付された税額は、中国への申告時に控除できますが、その控除額は、この所得を中国の税法に基づいて計算した課税対象となる金額を超えない範囲に限られます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;香港株式取引&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;譲渡所得&lt;/strong&gt;：香港には譲渡所得税がかかりませんが、内地居住者の方が香港株式から得られる価格差益も「資産譲渡所得」に該当し、**20%**の税率で中国税務当局に申告・納税する必要があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配当金&lt;/strong&gt;：H株（内地で登録され、香港証券取引所に上場している会社）から得られる配当金は、発行体が通常**20%&lt;strong&gt;の個人所得税を代扣します。非H株（香港または海外で登録され、香港証券取引所に上場している会社）から得られる配当金は、香港側が通常&lt;/strong&gt;10%**の配当税を代扣します。この時点で海外で納付された税額は、中国への申告時に同様に控除できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;滬港通深港通で取引を行う香港株式&#34;&gt;滬港通、深港通で取引を行う香港株式
&lt;/h3&gt;&lt;p&gt;内地と香港の資本市場の相互接続を促進するため、国家は特定の税制優遇政策を実施しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;譲渡益&lt;/strong&gt;：財政部、税務総局、証券監督委員会が発表した公告に基づき、内地個人投資家が沪港通、深港通を通じて香港株式取引所上場株式を購入・売却して得た&lt;strong&gt;譲渡差額所得は、現時点では個人所得税を徵収されません&lt;/strong&gt;。この優遇措置は明確に&lt;strong&gt;2027年12月31日まで延長されます&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配当金&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;沪港通、深港通を通じて&lt;strong&gt;香港H株&lt;/strong&gt;に投資し、得た配当金については、H株会社が**20%**の税率で個人所得税を代扣します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;香港非H株&lt;/strong&gt;に投資して得た配当金については、中国结算有限公司が**20%**の税率で個人所得税を代扣します。香港で既に納付した予備的所得税は、有効な扣税憑証を提示し、中国结算の管轄税務局に申請することで、税収控除を受けることができます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;税務要点まとめ&#34;&gt;税務要点まとめ
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;投資先&lt;/th&gt;
&lt;th&gt;投資対象&lt;/th&gt;
&lt;th&gt;譲渡所得税&lt;/th&gt;
&lt;th&gt;配当/分配金税&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;香港証券会社&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;米国株式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;内地への課税申告、税率20%&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;米国源泉徴収10%、内地で控除可能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;税務要点まとめ-1&#34;&gt;税務要点まとめ
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;投資先&lt;/th&gt;
&lt;th&gt;投資対象&lt;/th&gt;
&lt;th&gt;譲渡所得税&lt;/th&gt;
&lt;th&gt;配当/分配金税&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;恒生株式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;内地申告、税率20%&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;H株：代扣20%；非H株：香港預提10%、内地抵免&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;税務要点まとめ-2&#34;&gt;税務要点まとめ
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;投資チャネル&lt;/th&gt;
&lt;th&gt;投資対象&lt;/th&gt;
&lt;th&gt;資本利得税&lt;/th&gt;
&lt;th&gt;配当/赤字配分税&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;滬/深港通&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;香港株式&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;暫免課税（2027年末まで）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;H株：代扣20%；非H株：中登代扣20%，香港已納税可控除&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;税務要点まとめ-3&#34;&gt;税務要点まとめ
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;重要なお知事&lt;/strong&gt;: 上記の情報は現在の政策に基づいています。税法は変更される可能性があるため、投資および税務申告を行う前に、専門の税理士にご相談いただくか、税務署が発表する最新情報を確認し、法令遵守を確実に行ってください。境外所得の自己申告期間は通常、翌年の3月1日から6月30日までです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>増額死亡保険契約の解釈</title>
        <link>https://ttf248.life/ja/p/premium-whole-life-insurance-policy-interpretation/</link>
        <pubDate>Wed, 09 Jul 2025 21:13:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/premium-whole-life-insurance-policy-interpretation/</guid>
        <description>&lt;p&gt;通常の人が保険証券を理解するのは、やや困難です。従来の投資戦略は年平均利回りによって理解されますが、増額寿险の計算方式は内部収益率（IRR）であり、この2つにはどのような違いがあるのでしょうか？なぜその差が生じるのでしょうか？&lt;/p&gt;
&lt;p&gt;→ 資金が一括で投入された場合、&lt;strong&gt;内部収益率（IRR）&lt;/strong&gt; と &lt;strong&gt;年平均利回り（Annualized Return）&lt;/strong&gt; は計算結果において&lt;strong&gt;同じ&lt;/strong&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;平易俗な解説&#34;&gt;平易俗な解説
&lt;/h2&gt;&lt;p&gt;想像で、あなたは一棵木を植えます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一括投資 (Lump Sum Investment)&lt;/strong&gt;：苗を買ったり、最初の肥料を与えたりする費用を一括で支払います。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;年間収益率 (Annualized Return)&lt;/strong&gt;：これは、あなたが毎年その木がどれだけ伸びたかを測り、平均して毎年何パーセント伸びるか計算することに似ています。これは、一年間におけるこの投資の平均的な成長率を測定します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内部収益率 (IRR)&lt;/strong&gt;：IRR の概念はより広範囲で、複数のキャッシュフロー（流入と流出）を処理できます。しかし、あなたが一括投資（一回のキャッシュアウト）を行い、最後に一括回収（一回のキャッシュイン）を行う単純な状況では、IRR も「平均して毎年何パーセント成長するか」を探し出し、その成長率で投資額が年利複利に計算された場合に、最終的に回収した金額と一致するようにします。
単一の投資、単一の回収の場合には、中間的なキャッシュフロー（例えば定期的な配当や追加投資）がないため、IRR の計算は単純化され、年利複利成長率を求めることになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;例を挙げてみましょう&#34;&gt;例を挙げてみましょう
&lt;/h2&gt;&lt;p&gt;以下の仮定に基づいて計算します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;初期投資:&lt;/strong&gt; 2024年1月1日に、&lt;strong&gt;10,000元&lt;/strong&gt; を投資しました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;投資期間:&lt;/strong&gt; 3年間&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最終回収:&lt;/strong&gt; 2027年1月1日に、&lt;strong&gt;13,310元&lt;/strong&gt; を回収しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-年換算利回り&#34;&gt;&lt;strong&gt;1. 年換算利回り：&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;年換算利回りの計算式は以下の通りです。
&lt;/p&gt;
$$\text{年換算利回り} = \left( \frac{\text{期末価値}}{\text{期初価値}} \right)^{\frac{1}{\text{投資期間}}} - 1$$
&lt;p&gt;
データに代入します。
&lt;/p&gt;
$$\text{年換算利回り} = \left( \frac{13310}{10000} \right)^{\frac{1}{3}} - 1$$
$$\text{年換算利回り} = (1.331)^{0.3333} - 1$$
$$\text{年換算利回り} = 1.1 - 1 = 0.1 = 10\%$$
&lt;p&gt;
したがって、この投資の年換算利回りは &lt;strong&gt;10%&lt;/strong&gt; です。これは、あなたの資金が毎年平均して10％成長することを意味します。&lt;/p&gt;
&lt;h3 id=&#34;2-内生収益率-irr-の計算&#34;&gt;&lt;strong&gt;2. 内生収益率 (IRR) の計算:&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;IRR は、すべてのキャッシュフローの現在価値 (NPV) をゼロにする割引率です。この例では、キャッシュフローには以下が含まれます:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2024年1月1日：-10,000 元 (投資による支出)&lt;/li&gt;
&lt;li&gt;2027年1月1日：+13,310 元 (投資回収額)
割引率 $r$ を求め、次の式を満たすようにします:
$$-10000 + \frac{13310}{(1+r)^3} = 0$$
$$\frac{13310}{(1+r)^3} = 10000$$
$$(1+r)^3 = \frac{13310}{10000} = 1.331$$
$$1+r = (1.331)^{\frac{1}{3}}$$
$$1+r = 1.1$$
$$r = 1.1 - 1 = 0.1 = 10\%$$
したがって、この投資の内生収益率 (IRR) は &lt;strong&gt;10%&lt;/strong&gt; です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h2&gt;&lt;p&gt;この一次性投入と一次性回収の単純な例では、年利回り（内部収益率）の計算結果は完全に同じになります。これは、この特定のケースにおいて、IRR の計算ロジックと年利回りの複利計算ロジックが等価であるためです。&lt;/p&gt;
&lt;p&gt;IRR が本来その力を発揮する状況は、投資に&lt;strong&gt;複数のキャッシュフロー&lt;/strong&gt;が含まれる場合です。例えば、毎月基金に投資する場合や、プロジェクトから異なるタイミングで配当を受け取り、最後に資金を回収する場合などです。このような複雑なキャッシュフローパターンでは、年利回りは投資の実際の収益を正確に評価できない可能性がありますが、IRR は資金の時間価値と投資全体の収益率をより適切に反映することができます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>最近の大規模言語モデルの利用経験について</title>
        <link>https://ttf248.life/ja/p/recent-usage-experiences-of-large-models/</link>
        <pubDate>Wed, 09 Jul 2025 21:09:01 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/recent-usage-experiences-of-large-models/</guid>
        <description>&lt;p&gt;現状では、どの大規模言語モデルも特によくとはなく、各社それぞれに得意な分野や活用シーンがあります。&lt;/p&gt;
&lt;h2 id=&#34;技術ドキュメント&#34;&gt;技術ドキュメント
&lt;/h2&gt;&lt;p&gt;コードの提供、または IT 技術に関する質問：ChatGPT と Gemini&lt;/p&gt;
&lt;h2 id=&#34;コーディング&#34;&gt;コーディング
&lt;/h2&gt;&lt;p&gt;要件を整理し、コードの修正を要求する：Claude&lt;/p&gt;
</description>
        </item>
        <item>
        <title>回測データはどこで入手できますか？ (Kaiteki data wa doko de otten kitemasu ka?)</title>
        <link>https://ttf248.life/ja/p/where-can-i-find-backtest-data/</link>
        <pubDate>Fri, 27 Jun 2025 19:33:56 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/where-can-i-find-backtest-data/</guid>
        <description>&lt;p&gt;バックテストに必要なのは：配分法（変動率調整法）、わかりやすい例で説明します。同様に、加減算調整ができない理由を例を用いて説明し、Python で過去のデータを取得するための配分法データソースをおすすめします。&lt;/p&gt;
&lt;h2 id=&#34;核心概念なぜ配当修正が必要なのか&#34;&gt;核心概念：なぜ配当修正が必要なのか？
&lt;/h2&gt;&lt;p&gt;投資の世界において、株式の価格は単に売買によって変動するだけではありません。上市公司が行う行為、例えば&lt;strong&gt;配当金の発行、株式分割、増資&lt;/strong&gt;などは、株価に直接影響を与えますが、これらの変動は会社の真の価値の上昇または下落を反映しているわけではありません。&lt;/p&gt;
&lt;p&gt;たとえば、昨日終値が100円だった株式を保有していたとします。今日、会社が1株あたり5元の発行済みの現金配当金を発行するというプロセスを「除算」と呼びます（除算）。配当金を発行すると会社の総価値は減少するため、取引所は株価を5元下落させ、始値が95円になります。&lt;/p&gt;
&lt;p&gt;もし、95元と昨日の100元を使って上昇率を計算した場合、「-5%」という結論が得られます。しかしこれは明らかに誤りです。なぜなら、あなたの口座には5元の現金が増加し、あなたの総資産は損失していませんから。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配当修正（Reinvestment/Adjustment）&lt;/strong&gt; の目的は、配当金、株式分割などの非市場取引要因によって生じる株価の「ギャップ」を埋め、株価の真の動きを復元し、正確な収益率を計算したり、戦略を検証したりするために使用されることです。&lt;/p&gt;
&lt;h2 id=&#34;配当法変動幅調整法通俗例の解説&#34;&gt;配当法（変動幅調整法）：通俗例の解説
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;核心思想：&lt;/strong&gt; 配当法は、あなたが受け取ったすべての配当金や株式分割を、受け取るその瞬間に、当時の株価で即座に買い直すという仮定に基づいています。それは「総資産の変動率」に焦点を当てています。
&lt;strong&gt;例：&lt;/strong&gt;
あなたは &lt;strong&gt;1日目&lt;/strong&gt; に &lt;strong&gt;100元&lt;/strong&gt; の価格で 1 株 “マギカルカンパニー” の株式を購入します。あなたの総資産は &lt;strong&gt;100元&lt;/strong&gt; です。
&lt;strong&gt;2日目&lt;/strong&gt;、市場が変化していませんが、会社が 1 株あたり &lt;strong&gt;2元&lt;/strong&gt; の配当金を発行することを発表しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;除息後、株価は自動的に 100 元から &lt;strong&gt;98元&lt;/strong&gt; に下落します。&lt;/li&gt;
&lt;li&gt;その時点で、あなたの保有ポジションは 1 株の株式（98元）+ 2元の現金になります。&lt;/li&gt;
&lt;li&gt;あなたの&lt;strong&gt;総資産&lt;/strong&gt;は依然として 98 + 2 = &lt;strong&gt;100元&lt;/strong&gt; で変わりません。
&lt;strong&gt;3日目&lt;/strong&gt;、マギカルカンパニーの株価が 98 元から &lt;strong&gt;102.9元&lt;/strong&gt; に上昇します。&lt;/li&gt;
&lt;li&gt;変動率はどれくらいですか？それは &lt;code&gt;(102.9 - 98) / 98 = 5%&lt;/code&gt; です。&lt;/li&gt;
&lt;li&gt;あなたの総資産は現在いくらになりますか？
&lt;ul&gt;
&lt;li&gt;もし配当金を再投資しなければ：1 株の株式（102.9 元）+ 2 元の現金 = &lt;strong&gt;104.9 元&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;私たちが&lt;strong&gt;配当法&lt;/strong&gt;を使って「複利調整」された価格を計算する場合、私たちは 2 元の現金を除息日（2日目）に 98 元の株価で即座に買い直すと仮定します。ただし、計算を簡略化するために、配当法は単純に昨日の価格に基づいて変動率を乗算します。
&lt;strong&gt;配当法の計算ロジック：&lt;/strong&gt;
それは、2日目の総資産（100元）と1日目の総資産（100元）の比率が 0% の増加であることを示唆しています。3日目の総資産は、2日目に比べて 5% 上昇します。
したがって、それは次のような複利調整された価格シーケンスを構築します：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1日目複利調整価格：&lt;/strong&gt; 100 元&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2日目複利調整価格：&lt;/strong&gt; 総資産が変化していないため、昨日の終値に基づいて今日の真の変動率を反映するように調整します。調整方法は、昨日の複利調整価格に今日の実際の変動率を加算することです。ただし、除息日当日、実際の変動率は 0%（総資産が変わらないため）であり、複利調整価格はそのままか、または技術的な調整が行われます。ここでは単純に3日目の価格を見ています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3日目複利調整価格：&lt;/strong&gt; &lt;code&gt;1日目の複利調整価格 * (1 + 0%) * (1 + 5%)&lt;/code&gt; は不正確です。正しいロジックは、除息前の価格を基準として、それを「割引」することです。
より明確な&lt;strong&gt;前複利&lt;/strong&gt;の角度で理解しましょう：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3日目&lt;/strong&gt; の終値は &lt;strong&gt;102.9 元&lt;/strong&gt; です。（基準）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2日目&lt;/strong&gt; の終値は &lt;strong&gt;98 元&lt;/strong&gt; です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1日目&lt;/strong&gt; の終値は 100 元ですが、2日目に除息（株価が 100 から 98 に下がったため、98/100 = 0.98 で割引された）が発生したため、これを後の価格と一致させるために調整する必要があります。
&lt;ul&gt;
&lt;li&gt;修正された1日目の価格 = &lt;code&gt;102.9 / (1 + 5%) / (100/98)&lt;/code&gt; … この計算は非常に複雑です。
&lt;strong&gt;最も簡単な理解方法（変動幅調整法）：&lt;/strong&gt;
配当法の核心は、その期間内の変動幅が「配当金を再投資」戦略の下での総収益率と一致するように、2日目から3日目の複利調整価格の変動幅を保証することです。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1日目の終値から3日目の終値まで、あなたの実際の総収益率は &lt;code&gt;(104.9 - 100) / 100 = 4.9%&lt;/code&gt; です。（ここでは配当金を再投資していないと仮定します）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;なぜ加減法複権は使えないのか&#34;&gt;なぜ「加減法複権」は使えないのか？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;核心思想：&lt;/strong&gt; 加減法複権は、単純な足し算によって配当金を直接除息前の株価に加えることを試みます。
&lt;strong&gt;例（前文を参考に）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一天&lt;/strong&gt;終値：100元&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二天&lt;/strong&gt;除息2元、終値：98元&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三天&lt;/strong&gt;上昇5%、終値：102.9元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;加減法の誤った論理：&lt;/strong&gt;
それは、第二日の98元が2元の配当金によって減少したため、その2元を「戻す」必要があると考えるでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;計算される第二日の「複権価格」＝98 + 2 = 100元&lt;/li&gt;
&lt;li&gt;計算される第三日の「複権価格」＝102.9 + 2 = 104.9元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現在、この「複権価格」系列を使って第三日の変動率を計算します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;変動率 = &lt;code&gt;(104.9 - 100) / 100 = 4.9%&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;問題はどこにあるのか？&lt;/strong&gt;
この4.9%の変動率は間違っています！前述したように、株価の実変動率は&lt;code&gt;(102.9 - 98) / 98 = 5%&lt;/code&gt;です。加減法で得られた4.9%は、株の実際の成長能力を過小評価しています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;なぜ過小評価されるのか？&lt;/strong&gt;
それは、加減法が「&lt;strong&gt;複利&lt;/strong&gt;」効果を考慮していないためです。比例法では、2元の配当金も5%という速度で成長すると仮定しますが、加減法はそれを粗暴に2元として扱い、その後の投資の増加に組み込まないと考えています。時間の経過とともに、配当回数が増えるにつれて、この誤差はますます大きくなり、バックテストの結果が大きく歪んでしまいます。特に高配当株においては顕著です。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一言でまとめると：&lt;/strong&gt; 加減法は価格系列の「成長率」情報を破壊し、収益率の計算を誤らせる。比例法は実際の「収益率」を保持しており、バックテストの正しい選択である。&lt;/p&gt;
&lt;h2 id=&#34;pythonで過去のデータ配分法データソースのおすすめ&#34;&gt;Pythonで過去のデータ「配分法」データソースのおすすめ
&lt;/h2&gt;&lt;p&gt;実践において、私たちは通常、自分で複利調整を計算する必要はありません。専門的なデータプロバイダーは、すでに計算された複利調整後の価格を直接提供してくれます。APIを呼び出す際に、正しい価格タイプを選択するだけで済みます。これは一般的に「&lt;strong&gt;Adjusted Price&lt;/strong&gt;」（調整後価格）と呼ばれます。&lt;/p&gt;
&lt;p&gt;以下に、Pythonで複利調整後の過去のデータを取得するために高く評価されているデータソースをいくつかご紹介します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;yfinance (Yahoo Finance)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;メリット:&lt;/strong&gt; 完全無料、使いが簡単で、個人開発者や初心者にとって最初の選択肢です。提供されるデータはデフォルトで配分法（前複利調整）されています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;デメリット:&lt;/strong&gt; データがクリーンでない場合や、まれに遅延が発生する可能性があります。非常に厳格なビジネス戦略の場合には、より専門的なデータソースが必要になる場合があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pythonでの使用例:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TuShare&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;メリット:&lt;/strong&gt; 国内で非常に人気のある金融データインターフェースで、A株、香港株、米国株など豊富なデータを提供しています。データ品質は高く、ポイント制度があり、基本的なデータは無料で利用できます。明確な複利調整因子と複利調整後の行情インターフェースを提供しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;デメリット:&lt;/strong&gt; トークンを取得するために登録する必要があります。一部の高度なデータや高頻度の呼び出しにはポイントが必要です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pythonでの使用例（事前にトークンを取得する必要があります）:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;baostock&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;メリット:&lt;/strong&gt; 無料でオープンソースの中国A株証券データプラットフォームです。データの安定性と正確性が高く、複利調整オプションも提供しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;デメリット:&lt;/strong&gt; 主にA株市場をカバーしています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pythonでの使用例:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;商用級データソース (Quandl/FactSet, Refinitiv, Bloomberg)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;メリット:&lt;/strong&gt; データ品質が最も高く、カバー範囲が最も広く、更新頻度が最も速く、プロフェッショナルなAPIと技術サポートを提供しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;デメリット:&lt;/strong&gt; 非常に高価で、主に金融機関や企業ユーザーを対象としています。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;初心者へのアドバイス:&lt;/strong&gt;  &lt;strong&gt;yfinance&lt;/strong&gt; または &lt;strong&gt;TuShare&lt;/strong&gt; から始めてください。これらのデータソースは、学習、研究、および個人プロジェクトのバックテストのニーズを満たし、配分法複利調整データの理解と適用に役立ちます。APIを呼び出す際には、「Adjusted」または「複利調整済み」オプションを選択することを必ず確認してください。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>米国のオプションコードの解析：SST1G182500500.U 米国株式コードがSSTである理由</title>
        <link>https://ttf248.life/ja/p/spdr-sp-500-etf-trust-options-code-analysis-sst1g182500500u-why-is-the-underlying-stock-code-sst-1-instead-of-sst/</link>
        <pubDate>Wed, 25 Jun 2025 14:49:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/spdr-sp-500-etf-trust-options-code-analysis-sst1g182500500u-why-is-the-underlying-stock-code-sst-1-instead-of-sst/</guid>
        <description>&lt;p&gt;本レポートは、米国株式オプションコード「SST1G182500500.U」を深く分析し、特にその正股コード部分がInteractive Brokers (IB) に送信する際に「SST 1」として表示される理由を探ります。期権記号の標準化構造、関連会社およびブローカーの内部処理メカニズムを分析することで、この現象の背後にある原因とその取引者への影響について明らかにします。&lt;/p&gt;
&lt;h2 id=&#34;米国株式オプション記号標準化osi&#34;&gt;&lt;strong&gt;米国株式オプション記号標準化（OSI）&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;期権市場の効率的な運営と透明性を確保するため、米国期権決済会社（OCC）は、期権記号イニシアティブ（OSI）と呼ばれる標準化された期権符号体系を策定しました。この体系は、統一されたアルファ数字形式を採用し、期権契約の重要な情報を明確にコード化します &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。2010年2月12日以降、21文字で構成されるOSI規格は、米国およびカナダにおいて全面的に実施され、それまで混乱していた5文字コード形式を代替しました &lt;sup id=&#34;fnref1:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;標準的なOSI期権符号には、通常以下の4つの主要な要素が含まれます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原資産コード（Root Symbol）:&lt;/strong&gt; これは、期権が基づいている株式またはETFのコードです。このフィールドは最大6文字を含み、通常は原資産の取引コードと同一です。例えば、ナイキ株の期権根符号は「NKE」です &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。OSI形式では、根符号が6文字未満の場合、スペースで埋めて6文字の長さになるようにします &lt;sup id=&#34;fnref2:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;満期日（Expiration Date）:&lt;/strong&gt; これは6桁の数字で構成され、「年年-月月-日日 (yymmdd)」の順序で期権の満期日を表します。例えば、「220624」は、期権が2022年6月24日に満期を迎えることを示します &lt;sup id=&#34;fnref1:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;コール/プット指示符（Call/Put Indicator）:&lt;/strong&gt; これは単一文字のフィールドで、期権の種類を示します。‘C’はコールオプション（看漲期權）を表し、保有者が特定の価格で原資産を購入する権利を付与します。‘P’はプットオプション（看跌期權）を表し、保有者が特定の価格で原資産を売却する権利を付与します &lt;sup id=&#34;fnref2:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行使価格（Strike Price）:&lt;/strong&gt; これは、期権が購入（コール）または販売（プット）するために設定された原資産の事前価格です。OSI形式では、行使価格は8桁の数字で表され、最後の3桁は小数部分を表します（「mills」、100分の1ドル）。実際の行使価格を読むには、この8桁の数字を1,000で割るか、小数点字動して左に3桁移動する必要があります。例えば、「00099000」は行使価格が99.00ドルであることを示します &lt;sup id=&#34;fnref3:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;期権は、その価値が原資産に依存するデリバティブです。米国の大半の期権は、シカゴ期権取引所（CBOE）などの交易所で取引され、OCCを通じて決済されます。OCCは世界最大の株式デリバティブ決済組織であり、SECおよびCFTCの規制下で運営され、期権市場の安定性と完全性を確保しています &lt;sup id=&#34;fnref4:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h2 id=&#34;解析期権コード-sst1g182500500u&#34;&gt;&lt;strong&gt;解析期権コード SST1G182500500.U&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;ユーザーが提供した期権コード「SST1G182500500.U」は、OSI形式の要素を含んでいますが、また非標準的な表記方法も存在し、これは通常、会社の方針調整や証券会社の内部表示慣例に関連しています。&lt;/p&gt;
&lt;h3 id=&#34;sst1調整後の正株式コード&#34;&gt;&lt;strong&gt;SST1：調整後の正株式コード&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;「SST1」は、本期オプションコードにおいて最も重要な部分であり、ユーザーが正株式コードが「SST 1」である理由、そして「SST」ではなくなった理由に関する核心的な疑問に直接答えます。この「1」の接尾辞は、会社側の行為（株式分割、合併など）によりオプション契約が調整されたことを示すものです。&lt;/p&gt;
&lt;p&gt;OCC の公式情報メモ #56689 (2025 年 6 月 11 日) に明記されている通り、「オプション記号：SST が SST1 に変更された」こと、およびこの変更の適用日である 2025 年 6 月 12 日 &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; を示しています。このメモが「標的コードが「SST1」である理由」を明確に説明しています。また、Robinhood などの証券会社も同様の慣例を確認しており、「保有株式オプションで逆分割が発生した場合…株式コードには数字が付加されます。例えば、ABC のオプション契約を保有している場合、逆分割後には ABC1 と表示される」 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; と述べています。この業界慣習はさらに「SST1」接尾辞の有効性と目的を裏付けています。&lt;/p&gt;
&lt;h3 id=&#34;g1825満期日非標準形式&#34;&gt;&lt;strong&gt;G1825：満期日（非標準形式）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;“G1825”の部分は、OSI規格の「年年-月月-日日 (yymmdd)」形式（例：2025年7月18日は“250718”）とは明らかに異なっている &lt;sup id=&#34;fnref5:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。
OSIの実装前に、オプション符号は通常、単一文字コードを使用して満期月を表用していた &lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。この古い慣習では、「G」は7月のコールオプションを意味した &lt;sup id=&#34;fnref1:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;。もしこのロジックに従うならば、「18」は日付、「25」は年を表すことになる。したがって、「G1825」は最も可能性として
&lt;strong&gt;2025年7月18日&lt;/strong&gt; と解釈されるだろう。
OSI規格が明確にこの文字コードによる満期日の表示方法を廃止したにもかかわらず、SST1（OSIの後付けの調整慣例）と“G1825”が並存しており、Interactive Brokersまたはそのデータソースが混合型または内部表現を採用していることを示唆する。これは、調整後のオプションへの対応策としての遺留形式であるか、あるいはブローカー独自の表示慣例であり、古い符号体系の要素を新しい調整指示符と組み合わせたものである可能性がある。オプション符号におけるこの不一致性、すなわち、コアなOSI調整根符号と非標準的な満期日形式が並存することは、金融データ標準化における「ラストワンマイル」の課題を反映している。中央機関が統一を目指す一方で、ブローカーは互換性、内部データ管理、またはプラットフォーム機能のために微妙な差異や追加識別子を導入する可能性がある。これにより、「公式」OSI符号と、ユーザーが特定の取引プラットフォームで目にするか、入力する必要がある符号との間に差異が生じる可能性がある。したがって、オプショントレーダーは、一般的なOSI規格だけでなく、ブローカーが符号表示における微細な違いを理解し、適応する必要がある。&lt;/p&gt;
&lt;h3 id=&#34;00500権利価格&#34;&gt;&lt;strong&gt;00500：権利価格&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;ユーザーが提供した“00500”は五桁の数字であり、これはOSI標準の八桁の権利価格フィールドと一致しません（1）。OSI規則に従い、八桁の数字を1,000で割ると実際の権利価格が得られ、「00000500」は0.50米ドルとなります。
SST株式が10株に対して1株の逆分割を行った場合（9）、権利価格は分割比率に応じて調整されることが一般的です（例えば、5.00ドルの権利価格が1:10の分割後に0.50ドルになる可能性があります）。したがって、0.50ドルのような非常に低い権利価格は、調整後のオプションにとっては十分に妥当です。この五桁の数字“00500”は数値500を表しており、これを“mills”（千分の一ドル）として変換すると、0.50米ドルとなります。数字桁数の違いは、IBの内部表現が完全な8桁のOSI形式に変換する前に、極小権利価格の先導ゼロを切り捨てるか、異なる内部エンコーディングを使用している可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;u券商特定后缀&#34;&gt;&lt;strong&gt;.U：券商特定后缀&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;“.U”という接尾辞は、OCC/OSI 21 文字形式の標準的な一部ではありません。おそらく Interactive Brokers (IB) またはその特定の市場データプロバイダーが使用する内部識別子またはフラグである可能性が高いです。このような接尾辞は、独自のシステムで、契約に関する追加情報（例えば、取引所、特定の取引の特徴、データベース内の固有識別子など）を伝達するためによく見られます。&lt;/p&gt;
&lt;h3 id=&#34;コアな焦点sst1-ルート記号&#34;&gt;&lt;strong&gt;コアな焦点：SST1 ルート記号&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;期権記号の他の部分が厳密な OSI 仕様からのわずかな逸脱がある可能性はあっても、「SST1」ルート記号は間違いなく最も重要な要素です。それはユーザーの核心的な質問に直接答えるものであり、記号変更を引き起こした企業の行動を指し示しています。&lt;/p&gt;
&lt;h2 id=&#34;会社行動への影響system1-incsstの逆抽出&#34;&gt;&lt;strong&gt;会社行動への影響：System1, Inc.（SST）の逆抽出&lt;/strong&gt;
&lt;/h2&gt;&lt;h3 id=&#34;企業行動がオプション契約の調整に及ぼす普遍的な影響&#34;&gt;&lt;strong&gt;企業行動がオプション契約の調整に及ぼす普遍的な影響&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;オプションは金融派生商品であり、その価値は直接的に対象資産（例えば株式[1]）に依存します。したがって、対象証券に影響を与える重要な出来事（通常は企業行動と呼ばれます）は、未決済オプション契約の条項にも反映される必要があります。これにより、派生商品の経済的価値と完全性が維持されます[^13]。&lt;/p&gt;
&lt;p&gt;企業行動には、株式分割（正方向および逆方向）、合併、買収、特別配当金、および分社など、幅広い出来事が含まれます[^13]。各タイプの行為はオプション契約に独自の影響を与える可能性があります。&lt;/p&gt;
&lt;p&gt;オプション清算会社（OCC）は、米国オプションの主要な中央清算所として重要な役割を果たします。それは、これらの企業行動に対応するために、未決済オプション契約に必要な調整を法的に決定および実施する責任を負っています[^13]。これらの調整は、詳細なOCC情報メモを通じて市場参加者に正式に伝達されます&lt;sup id=&#34;fnref1:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;調整の方法は企業行動によって異なり、行渡価格の変更、各契約が表す株式数（または他の資産、つまり権利取引可能物）の変更、さらにはオプション記号自体を含む可能性があります。これらの調整の全体的な目標は、オプション保有者がオプション契約の総内在価値を維持できるようにすることです[^13]。&lt;/p&gt;
&lt;h3 id=&#34;逆株分割とそのオプション条項への典型的な影響&#34;&gt;&lt;strong&gt;逆株分割とそのオプション条項への典型的な影響&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;逆株分割とは、発行済株式数を減らすとともに、理論上の株価を比例して引き上げる企業が行う行為&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;である。例えば、10:1の逆分割は、投資家が以前保有していた10株が1株に減少するものの、新株1株あたりの理論的な価値が旧株の10倍になることを意味する&lt;sup id=&#34;fnref1:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;オプション契約においては、逆株分割に伴い、通常、契約条項の調整が必要となる。OCC（米国商品先物取引委員会）が具体的な調整方法を決定し、オプション契約が表す基礎資産株式数（例えば、1:10の分割の場合、100株から10株に減少させる）を変更したり、または比例して行使価格を引き上げたりすることがある[^13]。その目的は、分割前の価値と調整後の価値を一致させることにある。&lt;/p&gt;
&lt;p&gt;逆株分割の結果として、オプションの符号が変更されることが多く、通常、元の株式コードの後ろに数字が付加される（例：「1」）。これにより、これらの調整後のオプションを、分割後に新規発行された標準的なオプションと区別することが可能になる&lt;sup id=&#34;fnref2:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。顕著な副作用として、これらの調整後のオプションは流動性が大幅に低下する傾向がある[^13]。&lt;/p&gt;
&lt;h3 id=&#34;system1-inc-sst-1株分割-10株逆分割の詳細&#34;&gt;&lt;strong&gt;System1, Inc. (SST) 1株分割 10株逆分割の詳細&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;System1, Inc. (NYSE: SST) は、全チャネル顧客獲得マーケティングプラットフォームとして、1株分割10株の逆反結合株式分割を実施することを公表しました。この企業行為は、2025年6月12日の市場開始前に有効となります &lt;sup id=&#34;fnref2:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;今回の逆反分割の主な目的は、Aクラス普通株式の1株あたりの取引価格を向上させ、会社がニューヨーク証券取引所 (NYSE) の上場要件を満たすことができるようにすることです &lt;sup id=&#34;fnref3:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;この分割の結果として、System1 の10株の普通株式（保有株式を含む）はすべて1株の新規株式に自動的に再分類されました &lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。これにより、発行済みおよび流通しているAクラス普通株式の総数が約7,980万株から798万株に大幅に減少しました &lt;sup id=&#34;fnref1:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;逆反分割が行われたにもかかわらず、同社のAクラス普通株式はニューヨーク証券取引所で既存の取引コード“SST”を使用して引き続き取引されますが、CUSIP番号が更新されています &lt;sup id=&#34;fnref2:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id=&#34;occが調整の決定と実施における役割sstからsst1へのシンボル変更&#34;&gt;&lt;strong&gt;OCCが調整の決定と実施における役割：SSTからSST1へのシンボル変更&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;System1, Inc. の逆株分割に対処するため、OCCは2025年6月11日に情報メモ#56689を発行し、オプション契約の調整に関する具体的な詳細を提供しました &lt;sup id=&#34;fnref3:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;このメモでは、2025年6月12日以降、「オプションシンボル：SSTをSST1に変更」と明示していました &lt;sup id=&#34;fnref4:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。OCCからの公式指示であり、ユーザーオプションコードに「SST1」が根シンボルとして現れる明確な理由です。&lt;/p&gt;
&lt;p&gt;さらに、このメモでは調整条項が説明されています。「契約乗数：1。行使価格除数：1。新規乗数：100（例えば、プレミアムまたは行使価格の米ドル拡張の場合、1.00は100ドルに相当します）」 &lt;sup id=&#34;fnref5:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。これは、名目上の契約乗数が依然として100であるにもかかわらず、「SST1」シンボルが参照する対象資産が、1株分割10株の分割を反映して調整されたことを示しています。メモでは、「SST1の対象価格は、以下の方法で決定されます：SST1=0.10（SST）」 &lt;sup id=&#34;fnref6:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; と明確に述べています。これは、「SST1」オプション契約が現在、100単位を表していることを意味しますが、各単位は元のSST株の0.1株に対応し、分割後も総契約価値を維持します。&lt;/p&gt;
&lt;h3 id=&#34;occのsstオプション契約における権利対象資産の調整&#34;&gt;&lt;strong&gt;OCCのSSTオプション契約における権利対象資産の調整&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;1株分割10株反転株式分割の場合、OCCは既存のSSTオプション契約を調整し、その総経済価値を維持することを目的としています。OCCは、各契約の株式数を100株から10株に（これは特定の分割シナリオでは発生する可能性があります）変更せず、代わりに&lt;strong&gt;権利対象資産の記号自体を「SST1」に変更&lt;/strong&gt;しました。&lt;/p&gt;
&lt;p&gt;この「SST1」記号は、オプション契約が引き続き100単位を表しますが、各単位は現在元のSST株式の0.1株に対応します&lt;sup id=&#34;fnref7:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。したがって、「SST1」オプション契約は有効に100 * 0.1 = 10株分割後のSST株式を代表します。行使価格は記号名義上は変更されていませんが、この再評価された資産に適用されます。このアプローチにより、契約の総行使可能価値が分割前の価値と一致するように保たれます。たとえば、オプションが1:10分割前に行使価格が50ドルである場合、その行使価値は5,000ドル（100株 * 50ドル）になります。分割後、新規発行された分割後のSSTオプションの行使価格は500ドルになります。ただし、調整後の「SST1」オプションは元の行使価格（たとえば50ドル）を維持し、それを0.1株の資産に適用することで、有効に5,000ドルの総価値を保持します[^13]。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 1：SST逆分割がオプション契約の特徴に与える影響&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;| &lt;strong&gt;権利対象株式記号&lt;/strong&gt; | SST | SST（新規株式および新規オプション用） |&lt;/p&gt;
&lt;h3 id=&#34;occ-に対する-sst-オプション契約の権利内容の調整&#34;&gt;&lt;strong&gt;OCC に対する SST オプション契約の権利内容の調整&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;1 股分割 10 股逆反分割前（2025年6月12日 prior）&lt;/th&gt;
&lt;th&gt;1 股分割 10 股逆反分割後（2025年6月12日 after）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;調整後のオプション記号&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;SST (標準オプションの根記号)&lt;/td&gt;
&lt;td&gt;SST1 (既存、調整後オプションの根記号)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;occ-の-sst-オプション契約における割付対象の調整&#34;&gt;&lt;strong&gt;OCC の SST オプション契約における割付対象の調整&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;1 株式分割・10 株式反転分割前（2025年6月12日 prior）&lt;/th&gt;
&lt;th&gt;1 株式分割・10 株式反転分割後（2025年6月12日 after）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;各契約の有効株式数&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;100 株 SST&lt;/td&gt;
&lt;td&gt;分割後のSST (100 個の SST1 单位で)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;occ-に対する-sst-オプション契約の対象物の調整&#34;&gt;&lt;strong&gt;OCC に対する SST オプション契約の対象物の調整&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;1 股分割 10 股逆反分割前（2025年6月12日 prior）&lt;/th&gt;
&lt;th&gt;1 股分割 10 股逆反分割後（2025年6月12日 thereafter）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;行使価格調整&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;元行使価格&lt;/td&gt;
&lt;td&gt;元行使価格 (対象物調整後適用)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;occ-の-sst-オプション契約における割付対象の調整-1&#34;&gt;&lt;strong&gt;OCC の SST オプション契約における割付対象の調整&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;1 股分割、10 股逆分割前（2025年6月12日 prior）&lt;/th&gt;
&lt;th&gt;1 股分割、10 股逆分割後（2025年6月12日 after）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;対象 CUSIP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;元 CUSIP&lt;/td&gt;
&lt;td&gt;新 CUSIP (87200P208) 10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;occ-に対する-sst-オプション契約の権利内容調整&#34;&gt;&lt;strong&gt;OCC に対する SST オプション契約の権利内容調整&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;th&gt;1 股分割、10 股逆反分割前（2025年6月12日 prior）&lt;/th&gt;
&lt;th&gt;1 股分割、10 股逆反分割後（2025年6月12日 thereafter）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;権利内容調整後の流動性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;通常&lt;/td&gt;
&lt;td&gt;低下傾向（13）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;occによるsstオプション契約の対象資産の調整&#34;&gt;&lt;strong&gt;OCCによるSSTオプション契約の対象資産の調整&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;企業行動、特に逆株分割は、企業の財務にとって極めて重要ですが、デリバティブ市場への影響はしばしば「予期せぬ」ものであり、顕著な低効率をもたらします。独自の「調整オプション」を作成し、流動性が低く、価格設定と取引が複雑であるため、この証券のオプション市場を細分化させます。このような細分化は、全体的な市場効率を低下させ、買い手・売り手の価格差が拡大したり、価格発見が困難になったりする可能性があります。これは、企業ガバナンスのニーズ（例えば、上場要件を満たすための株式分割など）と、完全に流動的でシンプルなデリバティブ市場への期待との間の直接的なトレードオフを反映しています。&lt;/p&gt;
&lt;p&gt;期権清算会社 (OCC) はこのプロセスにおいて極めて重要な役割を果たします。企業行動は、対象資産の本質を根本的に変化させます。介入がなければ、デリバティブ契約において重大な乖離と不公平な結果をもたらす可能性があります。OCCは、その規制権限と clearing 所の機能を活用して、オプション条項の調整に介入します。これにより、オプションの経済価値が維持され、市場が秩序正しく公正に保たれます。この継続的な調整メカニズムは、全体的な市場の完全性を維持し、期権保有者が対象企業が変化した場合でも価値の連続性を確保する上で不可欠です。&lt;/p&gt;
&lt;h2 id=&#34;interactive-brokers-なぜsst-1を要求するのか&#34;&gt;&lt;strong&gt;Interactive Brokers なぜ「SST 1」を要求するのか&lt;/strong&gt;
&lt;/h2&gt;&lt;h3 id=&#34;証券会社が調整後権利シンボルを採用する慣例&#34;&gt;&lt;strong&gt;証券会社が調整後権利シンボルを採用する慣例&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Interactive Brokers (IB) は、主要な証券会社として、オプションのシンボルに関する業界標準を明確に遵守しています。そのドキュメントでは、「IBは『オプションシンボルイニシアティブ（OSI）フォーラム』(OSI) の形式で 21 文字のシンボルを使用する」ことを確認しています &lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。このコミットメントは、オプションクリアリング機構 (OCC) によって確立された慣例に基づいて、オプションのシンボルを統合および処理することを意味します。&lt;/p&gt;
&lt;p&gt;IB は、顧客がその保有ポジションに影響を与える可能性のある会社行動を理解し、確認するための仕組みも提供しています。Trader Workstation (TWS) とメッセージセンターには、会社行動とそれらがポジションに与える影響を監視するためのツールが用意されています [^15]。&lt;/p&gt;
&lt;p&gt;元の株式シンボルに数字接尾辞（例： “1”）を追加して、調整後のオプションの権利を表すことは、業界内で一般的な慣行です。この手法は通常、OCC によって直接強制され、これらの契約を会社行動後に発行された未調整の対象となるオプションと区別するために使用されます &lt;sup id=&#34;fnref8:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;他の証券会社も同様の手法を採用しています。例えば、Robinhood は、「保有している株式オプションが逆分割の場合、… 株式コードに数字が付加されます。たとえば、ABC オプション契約を保有している場合、逆分割後、それは ABC1 として表示されます」と明示しています &lt;sup id=&#34;fnref1:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。また、Merrill Edge では、「シンボルの横に「A」（「調整済み」を示す）が表示され、シンボル自体には追加の数字が含まれており、それが調整を表します」と述べています [^13]。Questrade も「A」アイコンまたはその他の特殊な指示子について言及しています [^14]。&lt;/p&gt;
&lt;h3 id=&#34;1接尾辞は調整後の契約を区別するための業界慣例&#34;&gt;&lt;strong&gt;「1」接尾辞は、調整後の契約を区別するための業界慣例&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;「SST1」記号が最も直接的かつ主要な理由は、OCC（オプション清算機関）による調整です。OCCの情報メモ#56689に詳述されているように、System1, Inc. における1株分割と10株反転株式分割の後、「期権記号：SST を SST1 に変更」と明示されています &lt;sup id=&#34;fnref9:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。これはIB内部特有の命名法ではなく、調整後の期権契約を識別するための標準化された業界慣例です。&lt;/p&gt;
&lt;p&gt;この慣例は非常に重要であり、反転株式分割などの企業行為の後、未調整の期権シリーズが上市され、標的株で取引を開始する際に、これらの期権は元の記号（例えば「SST」）を使用し続けます。これらの新しい標準契約と、調整済み契約（その権利行使価値または対象株式に対する分割後の有効行使価値が変更されたもの）との混同を防ぐために、調整済みの契約には修正された記号（例えば「SST1」）が割り当てられます [^13]。&lt;/p&gt;
&lt;p&gt;したがって、「SST1」記号は、期権契約の元の条項がOCCによってSystem1, Inc. の1株分割と10株反転株式分割に合わせて変更されたことを明確に示す識別子です。&lt;/p&gt;
&lt;h3 id=&#34;この慣例が取引システムの透明性を維持し混乱を防ぐ仕組み&#34;&gt;&lt;strong&gt;この慣例が取引システムの透明性を維持し、混乱を防ぐ仕組み&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;独自のシンボルシステムがない場合、トレーダーは注文時に意図せず「SST」オプションを取引してしまう可能性があり、それが100株のストックスプリット後の標準的なSST契約を表していると誤認する可能性があります。実際には、これは以前の調整された契約であり、異なる数の株式（たとえば、有効な10倍のストックスプリット後のSST）または再評価された行使価格を表す可能性があります。&lt;/p&gt;
&lt;p&gt;「SST1」のような調整されたシンボルを使用することで、取引システム、 clearing所、およびすべての市場参加者がこれらの契約を正確に識別、価格設定、処理、および決済できるようにします。この精度は、注文ルーティング、価格設定、行使、および配分におけるエラーを防ぐために不可欠であり、重大な財務的差異と紛争につながる可能性があります。&lt;/p&gt;
&lt;p&gt;さらに、この慣例により、調整された（旧）オプション契約と新規に発行された標準的なオプション契約が同じ原資産株式上で同時に上場・取引され、それぞれの契約は独自のシンボルで識別されます。&lt;/p&gt;
&lt;h3 id=&#34;証券会社がこれらの調整後のシンボルをプラットフォームに統合する方法&#34;&gt;&lt;strong&gt;証券会社がこれらの調整後のシンボルをプラットフォームに統合する方法&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Interactive Brokersなどの証券会社は、OCC（注文処理センター）からの強制的なシンボル変更を、Trader Workstation (TWS)を含む取引プラットフォームにシームレスに統合しています。企業行動が発生し、OCCが調整を行った際に、IBは顧客のポートフォリオとオプションチェーン表示に影響を受けるオプション契約のシンボルを更新します &lt;sup id=&#34;fnref1:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;基準株式自体は、引き続き元のシンボル（“SST”）で取引を継続しますが、すでに調整された既存のオプションポジションは、新しいシンボル（“SST1”）で表示されます。これらの特定の調整後の契約に関連する注文入力やクエリを行う際には、トレーダーは“SST1”という根シンボルを使用する必要があります。これは、ユーザーがIBに“SST 1”を送信する必要がある理由を説明しています。&lt;/p&gt;
&lt;p&gt;重要な観察点として、基準株式System1, Inc. は、引き続き元のシンボル “SST” で取引を継続しています &lt;sup id=&#34;fnref3:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;。しかし、&lt;strong&gt;既存の調整されたオプション契約&lt;/strong&gt;については、その基準根シンボルが“SST1”に変わります &lt;sup id=&#34;fnref10:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。これにより、微妙な状況が生じます。つまり、&lt;strong&gt;新規&lt;/strong&gt;オプション（これらのオプションは、分割後の“SST”株式の上場時に基づいて取引される）を取引する場合、基準物は “SST” であり、&lt;strong&gt;既存の調整された&lt;/strong&gt;オプションを取引する場合は、オプションシンボル内の基準物が “SST1” になります。これは、トレーダーが混乱しやすい微妙かつ重要な違いです。&lt;/p&gt;
&lt;p&gt;この現象は、オプション取引における顕著なオペレーション的複雑さを浮き彫りにしています。これは、単にOSI形式を理解するだけでなく、その範囲を超えています。動的な市場において、成功したオプション取引には、企業行動がオプション市場をどのように細分化するかについての継続的な警戒と深い理解が必要です。現在の株式コードを知るだけでは不十分です。トレーダーは、現在の基準物上の“標準”オプションと、その基準物がシンボル変更された“調整”オプションを区別する必要があります。これは、オプションチェーンの詳細、企業行動通知、および証券会社固有のガイダンスを注意深く確認することの重要性をさらに強調しています。&lt;/p&gt;
&lt;p&gt;調整後のオプションシンボル（例： “SST1”）の実施は、明らかに clearing 組織と証券会社の“オペレーション的必要性”です。これは、企業行動の複雑さを管理し、市場の整合性を維持し、正確な清算と決済を保証するための強力なメカニズムです &lt;sup id=&#34;fnref3:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。しかし、最終的なユーザーの視点からは、この変更は重要な混乱の原因となる可能性があります。ユーザーからの直接クエリが示すように。証券会社が“A”アイコンなどの視覚指示符 13 や、顧客ポートフォリオ内のシンボルを自動的に調整する 10 を使用して、この混乱を軽減しようと努めていますが、潜在的な複雑性は依然として存在します。&lt;/p&gt;
&lt;p&gt;これは、堅牢な金融市場インフラストラクチャの技術的要件と、ユーザーフレンドリーインターフェースのニーズとの間の継続的な緊張とトレードオフを明らかにしています。 “SST1”慣例は、システム的に見ると効率的かつ必要ですが、個人トレーダーにその意味を理解する負担を強いる可能性があります。これは、市場参加者がこれらの複雑さを効果的かつ自信を持ってナビゲートするために、専門分析と詳細な教育レポートの持続的な価値を強調しています。&lt;/p&gt;
&lt;h2 id=&#34;取引者への影響とベストプラクティス&#34;&gt;取引者への影響とベストプラクティス
&lt;/h2&gt;&lt;h3 id=&#34;調整後のオプションの識別方法&#34;&gt;&lt;strong&gt;調整後のオプションの識別方法&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;記号接尾辞:&lt;/strong&gt; 調整後のオプションを識別するための最も直接的かつ迅速な指標は、期権根記号に付加された数字接尾辞（例：「1」、「7」はミニオプションに使用され、その他の数字も使用されます）&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;です。例えば、System1, Inc. のオプションで「SST1」ではなく「SST」と表示されることは明確な信号となります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取引プラットフォームの視覚的インジケーター:&lt;/strong&gt; Merrill Edge や Questrade などの主要な取引プラットフォームには、特定の視覚的なヒントが含まれています。トレーダーは、期権チェーン、見積もりウィンドウ、またはポートフォリオビューで、期権記号の横に目立つ「A」アイコン（「調整済み」を示す）やその他の特殊なインジケーターを探すべきです[^13]。Interactive Brokers は、税務最適化ツールとメッセージセンターでもアイコン（例：「C」は会社行動を示す）を使用して、影響を受けたポジションを強調しています[^15]。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流動性の低下:&lt;/strong&gt; 調整後のオプションの強力な実証的信号は、取引量と未決済契約量の顕著な減少です。同一シリーズ内の他の期権や、新規発行され、未調整の標的資産に基づく標準期権と比較して、調整後の期権は通常、流動性の急激な低下を経験します[^13]。このような活動の減少により、買値と売値のスプレッドが拡大する可能性があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行使価格の乖離:&lt;/strong&gt; 調整後のオプションの行使価格は、「不適切」に見えたり、標的株期権チェーンの他の部分と一貫性がないように見えることがあります[^13]。さらに、同じ満期日と行使価格を持つコールオプションやプットオプションが複数存在する場合も、調整後のオプションと新規発行された標準期権が並存している可能性を示唆します[^13]。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;価格異常:&lt;/strong&gt; 期権の価格が標的株の現在の市場価格に対して異常に低いか「過大評価されている」（またはその逆、「信じられないほど良い」）場合、調査が必要です。これは調整によって内在価値や取引可能物が変化した可能性があるためです[^13]。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;オプション清算会社-occ-情報メモと証券会社の通知の参照重要性&#34;&gt;&lt;strong&gt;オプション清算会社 (OCC) 情報メモと証券会社の通知の参照重要性&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;オプション清算会社 (OCC) は、米国オプション契約の調整を決定し実施する最終的な権限を持つ機関[^13] です。彼らの「情報メモ」は、どの企業の行動変更に関する具体的な条項を理解するための公式かつ信頼できる情報源です&lt;sup id=&#34;fnref11:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。これらのメモには、取引可能数量（例えば、各契約における株式数）、行使価格、および新しいオプション記号の変更など、重要な詳細が含まれています。&lt;/p&gt;
&lt;p&gt;Interactive Brokers などの証券会社は、顧客にとってポジションに影響を与える可能性のある、差し迫った企業の行動に関する法的義務と運用能力を有しており、その通知を顧客に提供する必要があります。これらの通知は、通常、顧客メッセージセンター、企業行動ツール、またはプラットフォームアラートを通じて入手可能です[^15]。これらは、証券会社がシステム内で調整をどのように処理するかについての基本的な情報を提供します。&lt;/p&gt;
&lt;p&gt;視覚的なヒントや企業の行動に対する一般的な理解だけに頼ることは不十分であり、高額な誤解につながる可能性があります。正確なポジション管理と取引決定を行うためには、具体的な調整条項（例えば、現金を代替する株式の分割、特定の取引可能数量の変更）を特定するために、これらの公式および証券会社固有の情報源を参照する必要があります。&lt;/p&gt;
&lt;h3 id=&#34;取引調整後方の注意点&#34;&gt;&lt;strong&gt;取引調整後方の注意点&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流動性の著しい低下:&lt;/strong&gt; 取引調整後方で最も顕著な影響は、流動性が著しく低下することです[^13]。これは通常、買い手と売り手の価格差が拡大し、公正な市場価格でポジションに参入または退出することがより困難になり、コストも高くなります。トレーダーは、その希望する注文規模で取引を受け入れる意思のあるカウンターパーティーを見つけることが難しくなる可能性があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;評価複雑性の増加:&lt;/strong&gt; 取引対象物が変化するため、調整後方の評価がより複雑になります。ブラック・ショールズモデルのような標準的なオプション価格決定モデルは、新しい対象物の数量や有効行使価格を考慮するために慎重な手動調整を行わない限り、直接適用できない場合があります。この複雑さは価格効率の低下につながり、トレーダーのリスクを高める可能性があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取引能力の制限:&lt;/strong&gt; Robinhoodなどの一部のブローカープラットフォームでは、取引調整後方に制限が加えられることがあり、通常は「買い直しのみ」ポジションに限定されます&lt;sup id=&#34;fnref2:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。これは、トレーダーが既存の調整後の契約を売却できるものの、新しいポジションを開設することが禁止されることを意味し、戦略の柔軟性を大幅に制限します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行使/分配の曖昧性:&lt;/strong&gt; 行使または分配時の正確な取引対象物を理解することは非常に重要です。OCC（オレゴン州金融機関監督局）の具体的な調整条項によると、調整後のオプションは、株式、株式、現金などの異なる数量の組み合わせで取引される場合や、完全に現金で取引される場合もあります[^13]。これらの条項を誤解すると、予期せぬ財務上の結果につながる可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;オプション取引家のためのアドバイス&#34;&gt;&lt;strong&gt;オプション取引家のためのアドバイス&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;情報収集を積極的に行う：&lt;/strong&gt; 定期的な習慣を身につけ、金融ニュースメディアや証券会社の会社行動に関する情報を積極的に監視し、保有しているオプションのポジションに関連する対象株式に関する発表を確認してください。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公式文書を参照する：&lt;/strong&gt; 会社行動が判明したら、直ちに関連する OCC 情報メモ（OCC ウェブサイトまたは証券会社のリソースを通じて入手可能）および証券会社の特定通知をすぐに参照してください。これらは、正確な調整条項を理解するための権威ある情報源です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;戦略を見直し、評価する：&lt;/strong&gt; 調整があなたの特定のオプション契約のインピンバルエーション、ブレークイーブンポイント、そしてそれらがあなたの全体的な取引戦略における役割にどのように影響するかを慎重に評価してください。調整後の契約があなたの当初の投資理念と一致しているかどうかを確認してください。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ポジション管理を検討する：&lt;/strong&gt; 調整後のオプションポジションは、その固有の複雑さと典型的な流動性の低下により、通常、あなたの取引目標に合致しない場合や流動性問題が耐えられない場合に、ポジションをクローズすることを推奨します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新規契約に注意する：&lt;/strong&gt; 一般的なベストプラクティスとして、調整後のオプション契約で新規ポジションを開設することは避けてください。代わりに、会社行動後に発行された標準オプションシリーズ（対象株式上）に注目し、これらのオプションは通常、より優れた流動性とより直接的な価格設定を提供します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;企業の行動がデリバティブ市場に与える影響は、企業の財務の固有の部分ですが、しばしば顕著な低効率をもたらします。調整後のオプションを作成すると、その流動性が低く、価格設定と取引が複雑になるため、特定の株式のオプション市場が断片化されます。この断片化により、全体的な市場効率が低下し、買い手と売り手のスプレッドが拡大し、価格発見が困難になります。&lt;/p&gt;
&lt;p&gt;ユーザーのクエリは、標準 OSI 形式のオプション記号を認識することだけでは不十分であることを明確に示しています。 “SST”記号内の見かけ上わずかな“1”接尾辞（それを “SST1” にします）は、単なる表面的な変化ではありません。これは、契約条項、取引対象物、および市場動向（流動性、価格行動など）のシリーズの根本的な変更を示唆しています。したがって、トレーダーは表面的な記号の解釈に依存するのではなく、これらの変更背後にある理由を深く探求する必要があります。この積極的な調査は、単なる記号認識を超えて、効果的なリスク管理と取引実行不可欠な要素となります。&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;オプションコード“SST1G182500500.U”は、System1, Inc. (SST) の調整後オプション契約を明確に示しています。その重要な「SST1」根符号は、期貨決済会社 (OCC) が強制的に実行した公式の調整の結果として随意に指定されたものではなく、System1, Inc. が2025年6月12日に発効した1株分割10株逆反結合株式分割が必要であったことに起因します。&lt;/p&gt;
&lt;p&gt;この企業行動は、既存オプション契約の有効な履行対象を根本的に変更しました。名義上の契約倍率は依然として100ですが、「SST1」標的符号は、各契約が現在、分割後のSST株の10株を表していることを示し、元の経済価値を維持します。&lt;/p&gt;
&lt;p&gt;Interactive Brokers（他の主要証券会社と同様に）、これらのOCC強制的な符号慣例に従っています。IBは「SST1」（または「SST 1」）標的物コードを要求することで、その取引システム内でこれらの調整後の契約を正確に識別、処理、表示し、潜在的な誤りを防ぎ、市場の完全性を維持します。ユーザー符号中の“G1825”と“.U”要素は、おそらく証券会社固有または遺留の満期日および内部識別子を示すものであり、「SST1」根符号の根本原因を変えるものではありません。&lt;/p&gt;
&lt;p&gt;真剣なオプショントレーダーにとって、オプション符号を完全に理解することは、特に企業行動の複雑な背景下では有益であるだけでなく、極めて重要です。企業行動は、未決済オプション契約の条項、履行対象、流動性特性を根本的に変更し、「調整後オプション」として独自の符号と取引行動を持つものに転換します。したがって、会社発表、勤勉に公式OCC情報メモを精査し、証券会社固有の符号慣例に注意することは、不可欠なベストプラクティスです。これらの措置は、オプション契約条項を正確に解釈し、リスクエクスポージャーを効果的に管理し、ダイナミックな市場環境において賢明な戦略的取引決定を下すために不可欠です。これらの重要な調整を見過ごすと、予期せぬ財務上の結果、運用複雑性、および重大な損失につながる可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;結論-1&#34;&gt;&lt;strong&gt;結論&lt;/strong&gt;
&lt;/h2&gt;&lt;h2 id=&#34;結論-2&#34;&gt;&lt;strong&gt;結論&lt;/strong&gt;
&lt;/h2&gt;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Option Symbology Initiative - IBKR Guides、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://www.ibkrguides.com/kb/en-us/article-972.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ibkrguides.com/kb/en-us/article-972.htm&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;How to Read the Ticker Symbols for Stock Options - Investopedia、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://www.investopedia.com/ask/answers/05/052505.asp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.investopedia.com/ask/answers/05/052505.asp&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref4:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref5:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;System1, Inc. - Reverse Split Option Symbol: SST New Symbol: SST1 Date: 06/12/2025 - Options Clearing Corporation、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://infomemo.theocc.com/infomemos?number=56689&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://infomemo.theocc.com/infomemos?number=56689&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref4:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref5:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref6:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref7:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref8:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref9:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref10:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref11:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;How corporate actions affect your options | Robinhood、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://robinhood.com/us/en/support/articles/how-corporate-actions-affect-your-options/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://robinhood.com/us/en/support/articles/how-corporate-actions-affect-your-options/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;Option naming convention - Wikipedia、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Option_naming_convention&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Option_naming_convention&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;System1 Class A Common Stock to Begin Trading on a Split-Adjusted Basis on June 12, 2025 - Business Wire、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://www.businesswire.com/news/home/20250611797981/en/System1-Class-A-Common-Stock-to-Begin-Trading-on-a-Split-Adjusted-Basis-on-June-12-2025&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.businesswire.com/news/home/20250611797981/en/System1-Class-A-Common-Stock-to-Begin-Trading-on-a-Split-Adjusted-Basis-on-June-12-2025&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;
&lt;p&gt;System1 (SST) Common Stock to Begin Trading on a Split-Adjusted Basis on June 12, 2025、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://www.streetinsider.com/news/24925768&amp;amp;classic=1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.streetinsider.com/news/24925768&amp;amp;classic=1&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref2:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref3:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;
&lt;p&gt;Prime Trade File Upload Instructions - IBKR Guides、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://www.ibkrguides.com/traderworkstation/prime-trade-file-upload-instructions.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ibkrguides.com/traderworkstation/prime-trade-file-upload-instructions.htm&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34;&gt;
&lt;p&gt;Option symbol - Wikipedia、アクセス日時：2025年6月24日、&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Option_symbol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Option_symbol&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>日々のたわごと</title>
        <link>https://ttf248.life/ja/p/daily-musings/</link>
        <pubDate>Thu, 19 Jun 2025 19:07:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/daily-musings/</guid>
        <description>&lt;p&gt;AIは日常の開発ワークフローに浸透しており、最近投資の方向転換があり、エクイティとETFへのシフトとなりました。&lt;/p&gt;
&lt;p&gt;オープンソースプロジェクト&lt;/p&gt;
&lt;h3 id=&#34;プロジェクト記録&#34;&gt;プロジェクト記録
&lt;/h3&gt;&lt;p&gt;先週、暇つぶしにGitHubバッジを取得するためにIssueモジュールを使い始めました。以前コードを書く際に、AIの変更内容を記録する場所を探していました。個別にドキュメントを作成するのは散らかってしまいがちでした。しかし、Issueモジュールを使用することで、バグ、機能、改善などのラベルで区別し、記録が明確かつ効率的にできるようになりました。将来使わない可能性もありますが、記録を残しておくことは蓄積にもなります。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader/issues?q=is%3Aissue&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Issueリストの確認&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;リリースノート&#34;&gt;リリースノート
&lt;/h3&gt;&lt;p&gt;リリース記録を記載します。最近の関連コミットを見つけ、すべてAI生成のコミット記録であるため、ウェブインターフェースから近隣のすべてのコミット記録をコピーし、それをAIに整理させることで、素晴らしいリリース記録を作成できます。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader/releases/tag/v1.9.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/comic-reader/releases/tag/v1.9.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;アクティビティ&#34;&gt;アクティビティ
&lt;/h3&gt;&lt;p&gt;GitHubの個人ページをきちんと整理したことで、見栄えが良くなり、結果的にコーディングへの積極性が高まりました。なぜなら、データ可視化によって、ある種のものは、非常に奇妙で、簡単なポジティブなフィードバックが、持続するためのモチベーションを生み出すことができるからです。&lt;/p&gt;
&lt;h3 id=&#34;trae&#34;&gt;Trae
&lt;/h3&gt;&lt;p&gt;有料で1ヶ月の体験版を購入しましたが、どう表現するか分かりません。VSCode内でもClaude4モデルを使用しており、バイト（ByteDance）のIDE体験の方が優れており、実戦的な効果も優れています。場合によっては、同じ問題に対してTraeがより良い回答を提示することもあります。今後、年額料金を購入しても良いでしょうか？現状の「適当に弄っている頻度」では、Traeの利用回数が足りなくなる可能性があります。杞憂（きゆう）して構いません。後で使い切ったら考えれば良いですし、バイトには他の有料プランがあり、より多くの呼び出し回数を購入できるかもしれません。
&lt;del&gt;簡単な小さな問題に対しては、マイクロソフトのものを使用しており、GitHub Copilotや各モデルも利用可能です。&lt;/del&gt;
計画は頓挫しました。GitHub Copilotも呼び出し回数に制限が加えられました。&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/zh/copilot/about-github-copilot/plans-for-github-copilot#models&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;618での制限に関する情報&lt;/a&gt;
現在の使用量を確認するには&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/zh/copilot/managing-copilot/understanding-and-managing-copilot-usage/monitoring-your-copilot-usage-and-entitlements#downloading-a-monthly-usage-report&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちら&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;h2 id=&#34;投資&#34;&gt;投資
&lt;/h2&gt;&lt;p&gt;結局、恒生通融通が開通して以来、香港株式市場で取引したことがなく、小米の新車発表を狙って少し買い増し、値上がりすれば売却し、値下がりすれば再び買い戻す、といった操作を何度か繰り返しましたが、新車の発売には至らず、株式でわずかな利益を得ることができました。&lt;/p&gt;
&lt;p&gt;この頃、恒生通の資金の流れを眺めるのが無意味ではなく、美团は資金の純流入であり、それに便乗して投資し、成功裏に株主となりました。しかし、全体的な資金の流れを見過ごし、国内からの買い入れ資金はその一部に過ぎず、香港市場には多くの外国資本も存在することに気づきました。今回、実際に試してみることで、ブルーチップ株を長期保有し、徐々に収益を増やす方法が有効であることを確認できました。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ポジションのコントロールと損切りは、&lt;strong&gt;人の本性とは対照的なもの&lt;/strong&gt;です。焦らず、焦らず、急がないことが大切です。小米の新車が期待外れだった場合、どうやって売却するかという問題です。投資に対する認識はまだ十分ではなく、もっと本を読んだり、学んでいく必要があります。米連邦準備制度理事会（FRB）が利下げを示唆しないため、香港株式市場は一波の暴落し、建玉を入れるタイミングを遅らせることは適切ではありません。しかし、利下げというニュースが出た場合、香港株式市場は大暴騰することになります。これが投資であり、人間の本性を試すものです。
「&lt;strong&gt;常々口にする言葉：買うのは国の運だが、自分はそれを信じているとは言えない&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;上記の国運の信仰を抛却して、**もう一つ重要なのは注意（注意力）**です。長期的な投資をするのであれば、頻繁にチャートを見ることは意味がありません。毎朝10分、取引終了後に10分ほどを目視で確認する程度で十分です。最終的に期待できる収益率はどれくらいでしょうか？明確な損切りポイントも設定されていません。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;市場が暴落した際に、腾讯は依然として魅力的な投資対象となり、資金が集まりました。&lt;/p&gt;
&lt;p&gt;| 00700 | 腾讯控股 | 498.600 | 80.08億 |&lt;/p&gt;
&lt;h2 id=&#34;投資-1&#34;&gt;投資
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新価格&lt;/th&gt;
&lt;th&gt;取引量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;03690&lt;/td&gt;
&lt;td&gt;美団-W&lt;/td&gt;
&lt;td&gt;128.100&lt;/td&gt;
&lt;td&gt;68.81億&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;投資-2&#34;&gt;投資
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新価格&lt;/th&gt;
&lt;th&gt;取引量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;09992&lt;/td&gt;
&lt;td&gt;泡盛マット&lt;/td&gt;
&lt;td&gt;247.200&lt;/td&gt;
&lt;td&gt;57億&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;投資-3&#34;&gt;投資
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新価格&lt;/th&gt;
&lt;th&gt;取引量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;09988&lt;/td&gt;
&lt;td&gt;アルバビバグループ-W&lt;/td&gt;
&lt;td&gt;109.800&lt;/td&gt;
&lt;td&gt;53.22億&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;投資-4&#34;&gt;投資
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新価格&lt;/th&gt;
&lt;th&gt;取引量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01810&lt;/td&gt;
&lt;td&gt;小米グループ-W&lt;/td&gt;
&lt;td&gt;53.050&lt;/td&gt;
&lt;td&gt;41.05億&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>マシン間計算の時間差 (Mashinkan tenkiho no jikanusa)</title>
        <link>https://ttf248.life/ja/p/cross-machine-computation-time-difference/</link>
        <pubDate>Thu, 19 Jun 2025 09:45:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cross-machine-computation-time-difference/</guid>
        <description>&lt;p&gt;既存のグループ内通信プロトコルでは、&lt;code&gt;steady_clock&lt;/code&gt; をタイムスタンプとして使用し、個々のノードの処理時間（レイテンシー）を計算しています。特定の特殊な状況において、メッセージパケット自身のタイムスタンプを使用しましたが、その&lt;strong&gt;自身のもつ&lt;/strong&gt;タイムスタンプは他のマシンから取得されており、結果的に計算されたレイテンシーが異常に大きくなってしまいました。&lt;/p&gt;
&lt;p&gt;要約：Gemini 2.5 Pro は GPT-4 を完全に凌駕する可能性を秘めている。&lt;/p&gt;
&lt;h2 id=&#34;問題のトラブルシューティング&#34;&gt;問題のトラブルシューティング
&lt;/h2&gt;&lt;p&gt;開始当初、出力層のタイムスタンプ計算の問題に注意していなかったので、すべてのサービスを停止して、ローカルアクセスし、ログを分析することにした。あるサービスがずっと停止しないことに気づき、継続的に業務データを送信しているため、手段がなく、通信ポートでパケットキャプチャをして機器の位置を特定した。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo tcpdump -nni any -B 4096 -s 0 -w tmp.pcap port 13100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内部ネットワークの状況は複雑で、メッセージがプロキシを経由して転送されていたため、まずローカルサービスでポート13100のパケットを&lt;code&gt;tcpdump&lt;/code&gt;でキャプチャした。次にプロキシサーバーに切り替えて、ポート13100のパケットをキャプチャした。&lt;/p&gt;
&lt;p&gt;分析の結果、異常に時間がかかるリクエストはすべて深圳オフィスから来ていたため、問題のあるサービスを調査し、そのサービスは上海オフィスにデプロイされていたことがわかった。&lt;/p&gt;
&lt;h2 id=&#34;steady_clock-と-system_clock-の違い&#34;&gt;steady_clock と system_clock の違い
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::steady_clock&lt;/code&gt; と &lt;code&gt;std::system_clock&lt;/code&gt; は、C++ で時間を扱うための主なクロックです。主な違いは以下のとおりです。&lt;/p&gt;
&lt;h3 id=&#34;stdsystem_clock&#34;&gt;std::system_clock
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;「壁時計時間」 (Wall Clock Time) を表す&lt;/strong&gt;: これは、システム全体で現実世界の時間を指します。これはオペレーティングシステムがディスプレイしている時間と一致しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;調整可能&lt;/strong&gt;: このクロックの時間（時刻）は、ユーザーまたはシステムサービス（例：NTP ネットワークタイムプロトコル）によって前後に調整できます。たとえば、手動でシステム時刻を変更したり、システムをタイムサーバーに同期させたりすると、&lt;code&gt;system_clock&lt;/code&gt; の値が跳ね返ります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;時間間隔の測定には不向き&lt;/strong&gt;: 向こう見えになる可能性があるため、2つの時間点間の時間差を計算するには、負の値や不正確な結果が得られる可能性があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主な用途&lt;/strong&gt;: 現在の日付と時刻を取得し、現実世界の時間に対応する必要があるシナリオ（例：ログ記録用のタイムスタンプ）で使用されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stdsteady_clock&#34;&gt;std::steady_clock
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;単調増加クロック (Monotonic Clock)&lt;/strong&gt;: このクロックは、ある開始点から常に安定して前進し、決して減少することはありません。そのレートは固定されている場合もあれば、そうでない場合もあります（ただし通常は固定されています）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;調整不可 (Unadjustable)&lt;/strong&gt;: &lt;code&gt;steady_clock&lt;/code&gt; はシステム時間の変更の影響を受けません。つまり、ユーザーがシステム時間を変更しても、それは引き続き安定して前進し続けます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;時間間隔の測定に最適 (Best for Measuring Time Intervals)&lt;/strong&gt;: その単調性により、コードの実行時間やタイムアウト待ちなどのシナリオにおける最適な選択肢となり、正確性を保証できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;開始点は不確実 (Uncertain Epoch)&lt;/strong&gt;: 周期（epoch）の開始時間は通常システム起動時ですが、これは標準によって保証されているわけではありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;異なるマシンで-steady_clock-は同じですか&#34;&gt;異なるマシンで &lt;code&gt;steady_clock&lt;/code&gt; は同じですか？
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;違います。&lt;/strong&gt;
&lt;code&gt;steady_clock&lt;/code&gt; の値は、異なるマシン間では&lt;strong&gt;比較できません&lt;/strong&gt;。さらに、同一マシンの異なる起動セッション間でも、その値は一貫しません。
なぜなら、それは&lt;strong&gt;単一のプログラム実行中に&lt;/strong&gt;時間間隔を正確に測定することを目的としており、絶対的な時間点を表すためのものではないからです。その開始点（epoch）は未定義であり、異なるシステムや起動セッションではほぼ常に異なります。&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;種類&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;壁時計&lt;/td&gt;
&lt;td&gt;一致時計&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;まとめ-1&#34;&gt;まとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;調整可能か&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;はい、前後に進める&lt;/td&gt;
&lt;td&gt;いいえ、前進のみ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;まとめ-2&#34;&gt;まとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主な用途&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;現在の日付と時刻を取得&lt;/td&gt;
&lt;td&gt;時間間隔の測定、タイムアウト処理など&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;まとめ-3&#34;&gt;まとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;&lt;code&gt;system_clock&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;steady_clock&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;複数マシン/再起動での比較&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可能 (同期後に)&lt;/td&gt;
&lt;td&gt;不可能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;まとめ-4&#34;&gt;まとめ
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;簡単に言うと&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「今、何時ですか？」を知りたい場合は、&lt;code&gt;system_clock&lt;/code&gt; を使用します。&lt;/li&gt;
&lt;li&gt;「このコードは実行されてどれくらい時間がかかりましたか？」を知りたい場合は、&lt;code&gt;steady_clock&lt;/code&gt; を使用します。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>パンくずナビ</title>
        <link>https://ttf248.life/ja/p/breadcrumb-navigation/</link>
        <pubDate>Sat, 14 Jun 2025 23:34:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/breadcrumb-navigation/</guid>
        <description>&lt;p&gt;引き続きAIが勝手に文章を生成し、&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ローカル漫画ブラウザ&lt;/a&gt; を使用した。 終了時にホームページに戻る機能がないことが判明したので、問題を抽出し、AIに投げかけました。解決策は&lt;strong&gt;パン屑ナビゲーション&lt;/strong&gt;を追加することです。&lt;/p&gt;
&lt;h2 id=&#34;面包屑ナビゲーションとは&#34;&gt;面包屑ナビゲーションとは？
&lt;/h2&gt;&lt;p&gt;面包屑ナビゲーション（Breadcrumb Navigation）は、一般的なユーザーインターフェースデザインパターンで、通常はWebサイトやアプリケーション内のユーザーが現在どこにいるかを理解し、上位階層またはホームページへの迅速な移動手段を提供するために使用されます。その名前は、童話「ハンセルとグレーテル」に登場する主人公たちが家路につく際にパンの破片（面包屑）を使ってマークしたことから来ています。&lt;/p&gt;
&lt;p&gt;実際のアプリケーションでは、面包屑ナビゲーションは通常、階層パスの形式で表示されます。例えば：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ホームページ &amp;gt; カテゴリー &amp;gt; サブカテゴリ &amp;gt; 現在のページ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このナビゲーション方法は、ユーザーエクスペリエンスを向上させるだけでなく、ユーザーが迅速に位置を特定し移動するのに役立ちます。特に、階層構造が深いコンテンツ構造においては有効です。&lt;/p&gt;
&lt;h2 id=&#34;クロップドナビゲーション以外にどのようなナビゲーションソリューションがありますか&#34;&gt;クロップドナビゲーション以外にどのようなナビゲーションソリューションがありますか？
&lt;/h2&gt;&lt;p&gt;クロップドナビゲーションは優れた選択肢ですが、さまざまなアプリケーションシナリオに応じて、他の一般的なナビゲーションソリューションもいくつかあります。&lt;/p&gt;
&lt;h3 id=&#34;戻るボタンback-button&#34;&gt;戻るボタン（Back Button）
&lt;/h3&gt;&lt;p&gt;最もシンプルで直接的な解決策であり、通常はページの上部またはツールバーに配置されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;← 返回 または ⬅ Back
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;利点&lt;/strong&gt;：シンプルで分かりやすく、ユーザーの認知コストが低い&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点&lt;/strong&gt;：上一階層のみに戻ることができるだけで、より上位階層への直接移動はできない&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ナビゲーションバーnavigation-bar&#34;&gt;ナビゲーションバー（Navigation Bar）
&lt;/h3&gt;&lt;p&gt;ページの上部または側面に固定されたナビゲーションメニュー：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ホーム | カテゴリ | 設定 | ア propos
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;利点&lt;/strong&gt;：常に表示され、任意の主要ページに直接移動できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点&lt;/strong&gt;：画面スペースを占有し、モバイル端末では折りたたむ必要がある場合があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;側欄sidebar&#34;&gt;側欄（Sidebar）
&lt;/h3&gt;&lt;p&gt;通常在页面左侧或右侧显示層級構造：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;📁 ホーム
├── 📂 アニメ
│   ├── 📖 海賊王
│   └── 📖 うちはイチャプラ
└── 📂 設定
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;利点&lt;/strong&gt;：明確に完全な構造を表示し、多層階層ナビゲーションをサポート&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点&lt;/strong&gt;：占有スペースが多い&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浮動アクションボタンfloating-action-button&#34;&gt;浮動アクションボタン（Floating Action Button）
&lt;/h3&gt;&lt;p&gt;通常は、画面の特定の場所に固定された円形の浮動ボタンです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;🏠 (右下に浮かぶ)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;利点:&lt;/strong&gt; レイアウトスペースを占有せず、いつでもアクセス可能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点:&lt;/strong&gt; 機能が単一で、コンテンツを覆い隠す可能性がある&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ジェスチャーナビゲーション&#34;&gt;ジェスチャーナビゲーション
&lt;/h3&gt;&lt;p&gt;手勢によるナビゲーションを実現します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;右にスワイプで上一階に戻る
ダブルタップでホームページに戻る
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;メリット:&lt;/strong&gt; 操作がスムーズで、モバイル端末の利用習慣に合っている&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;デメリット:&lt;/strong&gt; 学習コストが高い、発見性が低い&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;適切なナビゲーション方法の選択方法&#34;&gt;適切なナビゲーション方法の選択方法
&lt;/h2&gt;&lt;p&gt;ナビゲーション方法を選択する際には、以下の要素を考慮する必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;アプリケーションの種類&lt;/strong&gt;: デスクトップアプリ、Webアプリ、モバイルアプリなど&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ユーザー層&lt;/strong&gt;: 技術的な熟練度、使用習慣&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;コンテンツ階層&lt;/strong&gt;: 階層の深さ、構造の複雑性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;画面スペース&lt;/strong&gt;: 利用可能なスペースのサイズ、レイアウト制限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用頻度&lt;/strong&gt;: ナビゲーション機能の使用頻度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ローカル漫画ブラウザのようなシナリオの場合、以下の組み合わせを推奨します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主要な方法&lt;/strong&gt;: 階層ナビゲーション（明確なパス表示）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;補助的な方法&lt;/strong&gt;: ショートカットキー（効率向上）+ フloatするホームページボタン（起点への迅速な戻り）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これにより、異なるユーザーの習慣を満たしつつ、あらゆるシーンで便利なナビゲーション体験を提供できます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>WeChat バックアップツール ローカルネットワーク認識失敗</title>
        <link>https://ttf248.life/ja/p/wechat-backup-tool-local-network-recognition-failed/</link>
        <pubDate>Fri, 13 Jun 2025 23:04:42 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wechat-backup-tool-local-network-recognition-failed/</guid>
        <description>&lt;p&gt;しばらくの間、スマホのデータを整理し、アルバムや微信のチャット履歴をPCにバックアップしています。スマホには必要なチャット記録だけを残します。&lt;/p&gt;
&lt;p&gt;以前はきちんと地形で、スマホとデスクトップPCが同じローカルネットワーク内にあるため、直接チャット記録をPCにバックアップできていましたが、今日は何らかのエラーでうまくいきませんでした。&lt;/p&gt;
&lt;h2 id=&#34;試した解決策&#34;&gt;試した解決策
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;PCがWi-Fiに接続し、スマートフォンがWi-Fiに接続している。PCとスマートフォンは同じローカルネットワーク内にあるにも関わらず、認識できない。&lt;/li&gt;
&lt;li&gt;スマートフォンでテザリングを有効にし、PCがスマートフォンでテザリングに接続しても認識できない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;デスクトップPCで接続している有線ネットワーク、スマートフォンは無線ネットワーク、WeChatのバックアップと復元時に、このローカルネットワークを認識できない。すでにテストを実施しており、デスクトップPCからスマートフォンのIPアドレスに正常にアクセスできる。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解決策-1&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;腾讯的東西を思いつかなかったので、混元に聞いてみたら、案もなく出てきたものが役に立たなかった。手当たり次第で豆包に投げかけてみると、&lt;strong&gt;サプライズ&lt;/strong&gt;があり、ローカル環境に仮想ネットワークや多重NIC環境がないかというヒントを与えてくれた。&lt;/p&gt;
&lt;p&gt;これは当たっていた。デスクトップPCにはVMware、ZeroTier、Hyper-V、Docker Desktopなど、多くの仮想NICが存在し、また、ルーターに接続するメインのNICと別のマシンを構成する局所ネットワーク用の2.5G NICも搭載されていた。&lt;/p&gt;
&lt;p&gt;そこで、デスクトップPC上のすべての仮想NICと過剰な物理NICを無効化し、メインのNICのみを残して、再度バックアップを実行したところ、これで成功した。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>安定通貨とは何ですか？</title>
        <link>https://ttf248.life/ja/p/what-is-a-stablecoin/</link>
        <pubDate>Thu, 12 Jun 2025 23:43:19 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/what-is-a-stablecoin/</guid>
        <description>&lt;p&gt;ステーブルコインは、米国内および香港において合法的な地位を確立しています。資金がより効率的にグローバルに流動化される一方で、規制がない場合はグレーゾーンが存在するのは明らかです。まるでアメリカが薬物中毒者を管理するような状況です。&lt;/p&gt;
&lt;p&gt;ステーブルコインとは、法定通貨（米ドル、港元など）や貴金属などに連動する暗号資産であり、その価値を安定させることを目的としています。主な種類は、法案担保型（USDT、USDCなど）、商品担保型（金などの貴金属で裏付けられたステーブルコイン）、アルゴリズム型（実物資産に依存せず、アルゴリズムによって価格を調整するタイプ）です([zh.wikipedia.org][1])。&lt;/p&gt;
&lt;h2 id=&#34;-なぜ安定通貨を法的に支援すべきなのか&#34;&gt;🛠️ なぜ安定通貨を法的に支援すべきなのか？
&lt;/h2&gt;&lt;h3 id=&#34;1-決済効率の向上とコスト削減&#34;&gt;1. &lt;strong&gt;決済効率の向上とコスト削減&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;ステーブルコインは、即時かつ低コストなクロスボーダー決済サービスを提供し、特に銀行がカバーしていない地域において顕著な優位性があります。その決済速度が速く、手数料が安いため、国際貿易や送金などに対して実質的な価値があります([ft.com][2])。&lt;/p&gt;
&lt;h3 id=&#34;2-米ドル通貨の国際化を強化する&#34;&gt;2. &lt;strong&gt;米ドル・通貨の国際化を強化する&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;米国（アメリカ）の視点では、ステーブルコインの台頭が米債などの短期資産に対する需要を高め、ドルの地位を強化するとともに、金融イノベーションを促進する。また、欧州連合（EU）もこの機会にデジタルユーロの発行を加速している。&lt;/p&gt;
&lt;h3 id=&#34;3-規制空白を補完しリスクを回避する&#34;&gt;3. &lt;strong&gt;規制空白を補完し、リスクを回避する&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;過去のステーブルコインは、「影金融」の状態にあり、透明性が低く、市場の乱れが頻発し、マネーロンダリングや詐欺などのリスクも含まれていた。米国が提案したSTABLE ActおよびGENIUS Actは、明確な規制、資産の開示、資本/清算規則の設定を要求することで、金融安全と投資家の権利を保護することを目指している([morganlewis.com][3])。
香港では、2025年8月より《Stablecoins Ordinance》（安定仮想通貨法）が施行され、ステーブルコインの発行には金融管理局（HKMA）の許可が必要となり、資産の裏付け、引き出し、マネーロンダリング（AML/CFT）などの基準を満たす必要があり、許可を得ていない機関による広告宣伝は禁止されている([morganlewis.com][4])。&lt;/p&gt;
&lt;h2 id=&#34;-安定通貨会社はどのように利益を上げるのか&#34;&gt;💰 安定通貨会社はどのように利益を上げるのか？
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;储备資産の利息収入&lt;/strong&gt;
例えば、Circle の USDC 予約資産は主に短期米国債に保管されており、現在の金利水準から恩恵を受けており、2023年の収益が大幅に増加し、2025年には約5億ドル（&lt;a class=&#34;link&#34; href=&#34;https://www.ft.com/content/eb588992-ece3-4254-b2ea-721a20bf1180?utm_source=chatgpt.com&#34;  title=&#34;Lessons from a stablecoin IPO: tech turns on a dime&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ft.com&lt;/a&gt;)の利益が見込まれています。Tether の報告書によると、2024年上半期の収益は5億2000万ドルに達しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取引手数料と開発者ツール収入&lt;/strong&gt;
鋳造・贖回費用以外にも、安定通貨プラットフォームはDeFi、ウォレット、企業顧客向けにAPI、SDK、決済ツールなどを提供することで、安定した収入源を得ています（&lt;a class=&#34;link&#34; href=&#34;https://www.marketwatch.com/story/stablecoin-supply-is-growing-fast-heres-how-it-compares-to-cash-66f12bc1?utm_source=chatgpt.com&#34;  title=&#34;Stablecoin supply is growing fast. Here&amp;#39;s how it compares to cash.&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;marketwatch.com&lt;/a&gt;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;金融拡張サービス&lt;/strong&gt;
一部の安定通貨発行会社は、利息贖回、投資機能、企業決済などの付加価値製品を通じて利益を得ていますが、その結果、関連法案が「金利付き安定通貨」に対して制限を設ける可能性があります。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-概要&#34;&gt;✅ 概要
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ステーブルコイン&lt;/strong&gt; は、暗号資産の価格変動を補うための決済手段であり、有価証券やアルゴリズムによって価値を安定させる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;規制立法&lt;/strong&gt; は、そのコンプライアンスを促進し、消費者保護、金融システムの安定を図ると同時に、イノベーションと国際競争力を推進することを目的とする。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;収益モデル&lt;/strong&gt; は、有価証券の利息、手数料、付加価値サービスなどから主に構成される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将来的に規制が適切であれば、ステーブルコインはグローバルな決済システムや中央銀行デジタル通貨（CBDC）との競争において重要な役割を果たす可能性がある。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ft.com/content/b69f304c-798e-4dc3-9f17-6f7a7c8d3ac0?utm_source=chatgpt.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ft.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.reuters.com/world/asia-pacific/ant-unit-plans-apply-stablecoin-issuer-license-hong-kong-2025-06-12/?utm_source=chatgpt.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;reuters.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.reuters.com/world/asia-pacific/hong-kong-passes-stablecoin-bill-one-step-closer-issuance-2025-05-21/?utm_source=chatgpt.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;reuters.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://markets.businessinsider.com/news/currencies/stablecoins-becoming-mainstream-dollar-gold-stable-genius-act-2025-5?utm_source=chatgpt.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;markets.businessinsider.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>大学の寮で4人の人が住んでいました。10年後、それぞれ異なる方向に進んでいきました。</title>
        <link>https://ttf248.life/ja/p/university-dormitory-four-people-ten-years-later-they-went-in-four-different-directions/</link>
        <pubDate>Wed, 11 Jun 2025 21:37:30 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/university-dormitory-four-people-ten-years-later-they-went-in-four-different-directions/</guid>
        <description>&lt;p&gt;影石本日上市了，有个大学室友在里面干了很多年，主导某款产品的硬件研发。&lt;/p&gt;
&lt;p&gt;要说专业呢，影石主营业务是运动相机，和大学的本专业关联最多：&lt;strong&gt;自动化&lt;/strong&gt;。自动化是个大专业，大二时候分小专业，要说大学室友，其实有两拨人，第一拨是大一室友，第二拨是大二室友，重新分小专业的时候，寝室也重新分了。我们这个小专业，涉及嵌入式、工程自动控制、电路设计，总的来说就是很杂。&lt;/p&gt;
&lt;h2 id=&#34;仕事概要&#34;&gt;仕事概要
&lt;/h2&gt;&lt;p&gt;大学卒業後、4人がそれぞれ異なる方向へ進みましたが、全員が自動化を専攻していましたが、それぞれの選択は異なっていました。幸いなことに、寮の4人のうち3人が短期間ですが2年間深圳で再会し、私は深圳支社に配属されました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;私自身&lt;/strong&gt; 以前の記事にも書いたように、卒業後すぐに金融IT業界に入り、ずっと香港・米国株式方向を担当してきました。サイト上では、関連業務の内容更新が比較的少ないです。言い換えれば、業務内容は理解しており、ある程度把握していますが、十分に深く掘り下げていません。これまで取引に関連した内容を扱ってきましたが、その後、システム基幹通信の保守や監視システムの運用など、様々な雑務も担当してきました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;室友A&lt;/strong&gt; は最初は寧波でエアコン関連のハードウェア営業を担当し、その後深圳に移転しました。以前の仕事内容は不明ですが、深圳で一度転職し、中興通信で試用期間中にまだ終了していないうちに退職し、さまざまな不適合がありました。その後、影石で長年勤務し、ある種のスポーツカメラのハードウェア開発を主導しました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;室友B&lt;/strong&gt; は中間での経歴は不明ですが、現在は武漢で自動車関連のハードウェア開発を行っており、長年勤務しています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;室友C&lt;/strong&gt; は現在深圳の万科で不動産監視業務に従事しています。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人生の選択&#34;&gt;人生の選択
&lt;/h2&gt;&lt;p&gt;他の二人は後悔しているのか、よくわからない。連絡が少ないのは、深圳を出る際にそうだったからで、三人の変わり者たちが集まって武汉の友人にビデオ通話をしたことがあった。&lt;/p&gt;
&lt;p&gt;学生時代に寝室の仲間たちはいつも言っていた。「私は自動化に進むべきじゃなかった。コンピュータ系に進むべきだった。コードを書くのが好きだったから、ここではなぜコンピューターを選ばなかったのかを述べるのはやめておこう。以前の記事でこれらすべてについて書いている。」&lt;/p&gt;
&lt;p&gt;今になって考えると、お金は避けて通れない話題だ。深圳を出た当初は、住宅価格が高すぎるという理由で杭州に定住することを考えていたが、運命のいたずらかで杭州には定住せず、上海で働くことにした。これも幸運だったと言えるだろう。高値で買い占められた杭州の不動産を回避できたからだ。深圳を出る際に、国内の港元と米株の取引が最も活発だった時期だった。転職によって給料が上がったが、業界に関する十分な知識を持っていなかった：「国内の引流はグレーゾーンであり、政策リスクがある」。簡単に言うと、港元を通じた取引を避け、米株市場で取引を行ったのだ。「21年」に頭打ちされたことで、国内の引流が封鎖され、国内の証券会社は次々と転換し、米株市場のビジネスが大幅に縮小した。結局のところ、金融業界では合規性が不可欠なのだ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;稿を書く理由に戻ると、影石が上場後に急騰し&lt;strong&gt;270%&lt;strong&gt;になった。会社から投資スキームが提供され、具体的な金額についてはここでは触れない。ただ言えるのは、室友Aが&lt;/strong&gt;深圳で家を買うための頭金&lt;/strong&gt;をほぼ用意できたということだ。私たちがこの投資スキームについて深く話し合ったことはなかったが、私も興味があった。彼のチャネルを通じて一部を投資することを考えていたが、関わる金額が大きすぎて耐えられなかった。結局のところ、室友はリスクが低い投資スキームを選択した。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;家を持てるだけの十分な資金がないから、大きな損失に耐えられない。耐えるなら、五十個ものお金を投入して試してみる価値があるのだろうか。このようなチャンスは、一生に一度しか得られないだろう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;人生の選択-1&#34;&gt;人生の選択
&lt;/h2&gt;&lt;p&gt;稼げていない十年について言えば、それは嘘だと言えるだろう。時折見せる、より多く稼ぐ人々に羨望するのは事実だ。少なくとも、自分たちがやりたいことをやってきた10年間は、喜びにあふれていた。職場での精神的な虐待（PUA）のようなものには遭遇しなかった。&lt;/p&gt;
&lt;p&gt;不動産投資を避けて通ることはできないだろう。頭金が3分の1も必要なのだから。どれだけ努力しても、業界の周期によって成功できるかどうかが決まるし、上向く流れに乗ることさえ重要ではない。それはチャンスを得て影石に参入する機会になるかもしれない。なぜなら、その時点では彼らの製品は海外をターゲットにしており、国内での知名度もまだ高くないからだ。港湾株式（港美株）のコミュニティで安易な生活を送ることは、学校で培った本質的なスキルをほぼ全て還元したことになるだろう。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;話を色々くちゃくちゃ言っても、若者は業界を理解することが難しく、更には10年間のキャリアプランを立てることができない。&lt;/p&gt;
&lt;h2 id=&#34;海外展開プロダクト出海&#34;&gt;海外展開（プロダクト出海）
&lt;/h2&gt;&lt;p&gt;輸出貿易で利益を上げる場合、同じ製品が国内で1千元販売されるのに対し、海外では3千元、さらにはそれ以上も可能である。特に現在、国内における価格競争が激化している状況においては、その影響を考慮する必要がある。影石（シャドー・ストーン）や大疆（DJI）は、全景カメラという分野において既に動きを開始している。&lt;/p&gt;
&lt;p&gt;影石や大疆は、深圳の産業チェーンの優位性を活用するだけでなく、プロダクト出海も重要な要因となっている。国内市場における競争が激しく、価格競争が深刻であるのに対し、海外市場においては価格が高く、利益率を確保しやすい。初期段階での生存可能性を高める上で有利に働く。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>メモリレイアウトとバイナリ互換性</title>
        <link>https://ttf248.life/ja/p/memory-layout-and-binary-compatibility/</link>
        <pubDate>Tue, 10 Jun 2025 18:53:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/memory-layout-and-binary-compatibility/</guid>
        <description>&lt;p&gt;C++ Linux サービスでクラッシュが発生しました。そのサービスは、ある静的ライブラリを使用してコンパイルされています。
静的ライブラリが変更され、ヘッダーファイルにメンバー変数が追加され、静的なバイナリライブラリが再リリースされました。
サービスは新しいバイナリライブラリに依存しており、正常にコンパイル・実行されますがクラッシュします。クラッシュ箇所は明らかに問題ありません。以前のコンパイラアップグレード時の未定義動作や、信頼できないスタックトレースと類似しています。
サービスを再コンパイルする際に、依存するヘッダーファイルを更新することで、正常にビルドおよび実行できるようになりました。
これはなぜ発生したのか、どのようなコンピュータ知識が関係しているのかを詳しく説明します。メモリレイアウトに関連していると推測し、具体的な例を用いて詳細に説明します。&lt;/p&gt;
&lt;p&gt;これは典型的な静的ライブラリのヘッダーファイルとバイナリライブラリの不一致によって引き起こされるクラッシュの問題です。確かにメモリレイアウトに関連しています。以下は詳細な説明です。&lt;/p&gt;
&lt;h2 id=&#34;問題分析&#34;&gt;問題分析
&lt;/h2&gt;&lt;p&gt;静的ライブラリのヘッダーファイルは、クラスの構造（メンバー変数やメソッドなど）を定義し、静的ライブラリのバイナリファイルには実装コードが含まれています。コンパイル時に、コンパイラはヘッダーファイル内のクラス定義に基づいてコードを生成します。このコードには、メモリレイアウトとアクセス方法も含まれます。ヘッダーファイルと静的ライブラリのバイナリファイルが一致しない場合、実行時の未定義動作を引き起こす可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;重要な知識点&#34;&gt;重要な知識点
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;メモリレイアウト&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;C++ において、クラスのメンバ変数はヘッダーファイルで定義された内容に基づいてメモリ上に配置されます。&lt;/li&gt;
&lt;li&gt;ヘッダーファイルにメンバ変数を追加すると、クラスのメモリレイアウトが変化します。例えば、新しいメンバ変数を追加すると、クラスのサイズ（&lt;code&gt;sizeof&lt;/code&gt;）が増加したり、メンバ変数のオフセットが変わったりすることがあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二進数互換性&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;静的ライブラリのバイナリファイルはヘッダーファイルに基づいて生成されます。サービスが古いヘッダーファイルを使用してコンパイルし、実行時に新しい静的ライブラリのバイナリファイルをリンクすると、サービスのコードは古いメモリレイアウトでクラスのメンバ変数にアクセスしようとし、静的ライブラリの実装コードは新しいメモリレイアウトで操作します。この不一致により、未定義動作が発生する可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未定義動作&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;未定義動作は、クラッシュ、誤ったスタック情報、またはプログラムの実行結果の異常などとして現れることがあります。これは、プログラムがメモリ上の不正なアドレスにアクセスしたり、初期化されていない領域にアクセスしたりする場合に発生します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;例による説明&#34;&gt;例による説明
&lt;/h2&gt;&lt;p&gt;以下の前提条件を仮定します。静的ライブラリのヘッダーファイルが以下のように定義されているとします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class MyClass {
public:
    int a;
    void func();
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この静的ライブラリのバイナリファイルは、上記の定義に基づいてコンパイルされています。&lt;/p&gt;
&lt;p&gt;その後、ヘッダーファイルが以下のように変更されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class MyClass {
public:
    int a;
    int b;  // 新規メンバー変数
    void func();
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新しい静的ライブラリのバイナリファイルは、変更されたヘッダーファイルに基づいてコンパイルされています。&lt;/p&gt;
&lt;p&gt;サービスがコンパイル時に依然として古いヘッダーファイルを使い続けると、以下の問題が発生する可能性があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;メモリレイアウトの一貫性のない問題&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;サービスは &lt;code&gt;MyClass&lt;/code&gt; のサイズを &lt;code&gt;sizeof(int)&lt;/code&gt; と想定し、静的ライブラリは &lt;code&gt;sizeof(int) * 2&lt;/code&gt; と想定します。&lt;/li&gt;
&lt;li&gt;サービスが &lt;code&gt;MyClass&lt;/code&gt; のメンバー変数にアクセスしようとすると、誤ったメモリアドレスにアクセスする可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;メソッド呼び出しの問題&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;静的ライブラリの実装コードが新規のメンバー変数（例: &lt;code&gt;b&lt;/code&gt;）に依存している場合で、サービスのコードが正しく &lt;code&gt;b&lt;/code&gt; を初期化していない場合、実行時にクラッシュが発生する可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ヘッダーファイルとバイナリファイルを一致させる&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;サービスをコンパイルする際に、静的ライブラリのバイナリファイルに一致するヘッダーファイルを使用するようにしてください。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;バイナリファイルの互換性がない変更を避ける&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;クラスの定義を変更する必要がある場合は、直接メンバー変数を追加するのではなく、継承やその他の方法で実現することを検討してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依存するすべてのコンポーネントを再コンパイルする&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;静的ライブラリが変更された場合、そのライブラリに依存するすべてのサービスを再コンパイルし、ヘッダーファイルとバイナリファイルを一致させるようにしてください。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;この問題の根本的な原因は、ヘッダーファイルとバイナリファイルの不一致によってメモリレイアウトが誤っていることである。C++ のコンパイラは、コンパイル時にヘッダーファイルに基づいてコードを生成し、実行時の動作はバイナリファイルに依存する。これらが一致しない場合、未定義の動作を引き起こす可能性がある。ヘッダーファイルとバイナリファイルの整合性を確保することで、同様の問題を防ぐことができる。&lt;/p&gt;</description>
        </item>
        <item>
        <title>2025年のビッグイベント</title>
        <link>https://ttf248.life/ja/p/2025-major-events/</link>
        <pubDate>Sun, 08 Jun 2025 23:36:01 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/2025-major-events/</guid>
        <description>&lt;p&gt;いくつかの断片的なアイデアやメモを記録しておき、後で個別の文書にしないようにする。&lt;/p&gt;
&lt;p&gt;友人たちの影響を受けて、私も同様の掲示板のようなページを作りたいと思い、&lt;strong&gt;Notes&lt;/strong&gt;はすでに開発されており、しかしホームページの表示方法や過去データの処理など、細かい問題点がいくつかあり、そこで年度まとめを作成することで、同様の効果を得られると考え、その結果、&lt;strong&gt;AI&lt;/strong&gt;が記事の一時滞在機能の開発につながった。&lt;/p&gt;
&lt;h2 id=&#34;2025年2月&#34;&gt;2025年2月
&lt;/h2&gt;&lt;h3 id=&#34;deepseek-が爆発的に人気を博す&#34;&gt;DeepSeek が爆発的に人気を博す
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日付：2025年2月7日&lt;/strong&gt;
旧正月前夜、DeepSeek は一時的に話題となり、わずか数日間でソーシャルメディア上で広範な注目を集めた。このような突然の爆発的な人気は驚くべきことだっただけでなく、市場全体の連鎖反応を引き起こした。同時に、NVIDIA の株価は暴落し、多くの投資家がその見通しについて疑念を抱き、一部の機関はこの期間中に大規模なショート売りを行った。まるで全てが「綿密に計画された」状況を指しているかのようだった。&lt;/p&gt;
&lt;h3 id=&#34;春節檔電影中的政治元素剖析&#34;&gt;春節檔電影中的政治元素剖析
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日期：2025年2月10日&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好久沒去春節檔湊熱鬧，這次去了兩部電影，感覺有點不一樣。&lt;/p&gt;
&lt;p&gt;本文探討2025年春節檔電影的新變化，聚焦《唐人街探案1900》和《哪吒之魔童鬧海》。前者藉由1900年美國舊金山唐人街背景，展現華人受種族歧視與壓迫，映射社會政治環境；後者作為動畫電影，以豐富隱喻元素暗諷現實國際政治格局，例如玉虛宮類似五角大樓影射美國政治體系、天元鼎上美元符號象徵美元霸權、仙人玉牌像美國綠卡暗示身份等級、滅魂丹似生化武器暗指惡意行徑等。兩部電影帶來全新觀影體驗，引發對電影藝術與政治表達關係的思考。&lt;/p&gt;
&lt;h3 id=&#34;オンラインとオフラインでの映画チケットの価格差が想像を超える&#34;&gt;オンラインとオフラインでの映画チケットの価格差が想像を超える
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日付：2025年2月11日&lt;/strong&gt;
春節期間中、家族（7～8人）で映画を見に行きたいと考えていました。淘票票や猫眼でチケットを購入しようと思い、最初に見た価格は60元でした。手元に映画館のチャージカードがあり、前台で購入する必要があるため、そこで何か割引がないか聞いてみると、同じ回数でも前台で購入すると35元だったのです。この価格差は本当に驚きです。&lt;/p&gt;
&lt;h3 id=&#34;哪吒火爆出圈&#34;&gt;哪吒火爆出圈
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日付：2025-02-15&lt;/strong&gt;
春節檔哪吒の火爆出圈、 непонятное чувство национальной гордости、 похожее на предыдущие фильмы, такие как “战狼” (Чёрная пантера) и “爱国主题” (Патриот)、 несомненно, прогресс есть、 но это не настолько хорошо、 как ожидалось。 Как геймер, многие вещи выглядят слишком жирными、 и сцены боя имеют сильный сетевой стиль。 Уже много людей купили билеты в кино из-за успеха фильма “哪吒” (Ne Zha), но не пошли смотреть。&lt;/p&gt;
&lt;h2 id=&#34;2025年3月&#34;&gt;2025年3月
&lt;/h2&gt;&lt;h3 id=&#34;トランプ政権による関税引き上げが貿易を揺るがす&#34;&gt;トランプ政権による関税引き上げが貿易を揺るがす
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日付：2025年3月4日&lt;/strong&gt;
米国がメキシコおよびカナダの商品に25%の関税を実施し、北米貿易チェーンが激しく変動した。カナダは1550億加ドル相当の米国商品に対する報復措置を発表し、メキシスは中国との自由貿易協定締結を加速させ、リスクを緩和しようとした。この措置により、グローバルサプライチェーンはさらに多様化し、中国の鉄鋼企業は高級鋼材の国産代替ウィンドウ期を迎えた。&lt;/p&gt;
&lt;h2 id=&#34;2025年5月&#34;&gt;2025年5月
&lt;/h2&gt;&lt;h3 id=&#34;医学教育の天宮と董袭莹事件のバタフライ効果&#34;&gt;医学教育の天宮と董袭莹事件のバタフライ効果
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日付：2025年5月7日&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;北京協和の“4+4”プロジェクト（4 年非医学本科 + 4 年医学博士）は、学際的な精英育成を主軸とし、2025年に董袭莹氏事件が発覚し、その家庭背景（医学/研究世帯）を利用してこのプロジェクトに参入したこと、学歴の曖昧さ、論文における剽窃疑惑などが暴露され、この模式が精英化選考と公平性との矛盾を露呈。学制の圧縮と規培（臨床研修）に関する論争も未解決である。&lt;/p&gt;
&lt;p&gt;ある人はこれを天宮の一角だと語り、また別の人は階級的転落だと主張する。董小姐は医者になる必要はなく、単に両親が一生不如意を感じて、彼女を協和の4+4プロジェクトに進学させただけだという。&lt;/p&gt;
&lt;h3 id=&#34;特岗教師採用急に減った&#34;&gt;特岗教師採用、急に減った
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日付：2025-05-12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2020年から2025年の江西省教師採用は、大幅な縮小傾向を示した：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特岗教師採用人数が6,617人から32人に激減（99.5%の減少）&lt;/li&gt;
&lt;li&gt;国編教師が11,324人から2,146人に減少（81.1%の減少）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主科（語数英）の割合は安定したが、総数は縮小。音体美などの学科の割合は上昇したが、絶対的な数は限られていた（例：2025年には各々が採用人数を2人とした）。&lt;/p&gt;
&lt;p&gt;政策面では「退一補一」編組の緊縮により、教師資源は職教および偏遠地域に傾斜し、伝統的な中小学校のポジションは大幅に縮小。2025年には一部学科で採用計画数がゼロとなった。&lt;/p&gt;
&lt;h3 id=&#34;貿易戦が突然一時停止&#34;&gt;貿易戦が突然一時停止
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日付：2025年5月12日&lt;/strong&gt;
貿易戦における関税の変動は、「段階的エスカレーション - 反制 - 交渉」というサイクルを呈现し、米中間の博弈は関税対峙からルール競争へと移行した。短期的な緩和により市場への圧力が軽減されたものの、長期的な不確実性は依然として存在し、WTOの裁決、サプライチェーンの調整、地政学的な変化がグローバル経済に与える継続的な影響を注視する必要がある。&lt;/p&gt;
&lt;p&gt;人々は、認識を超えた利益を得ることができず、今年貿易戦が発動したことで引き起こされた株式暴落は、現在までに失地の大部分を取り戻したが、その間には多くの個人投資家が埋葬されたことを知らないだろう。&lt;/p&gt;
&lt;h2 id=&#34;2025年6月&#34;&gt;2025年6月
&lt;/h2&gt;&lt;h3 id=&#34;苏超火爆群众性体育の経済的価値が顕在化&#34;&gt;苏超火爆：群众性体育の経済的価値が顕在化
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;日付：2025年6月9日&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;江蘇省都市サッカーリーグ（蘇超）第3回大会の平均観客数は1万人を突破し、徐州奥体中心での「楚漢之争」の一試合に22198人が集まり、中国の業余競技会記録を更新。抖音などのプラットフォームが短動画を通じて話題を作り出し、18万人以上が跨城消費（都市間消費）を行い、ホテル稼働率が20～30%向上。競技会の商業化モデルが革新され、江蘇銀行や今世缘などのスポンサーブランドの露出量が大幅に増加し、「スポーツ+文化観光」の効果を実証した。&lt;/p&gt;</description>
        </item>
        <item>
        <title>10.243.52.68 はローカルエリアネットワークにも属します。</title>
        <link>https://ttf248.life/ja/p/102435268-also-belongs-to-the-local-area-network/</link>
        <pubDate>Fri, 06 Jun 2025 18:46:55 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/102435268-also-belongs-to-the-local-area-network/</guid>
        <description>&lt;p&gt;先前的讨论继续，今天我们将探讨局域网的 IP 地址。上次为了同步代码，服务器配置了代理，服务器和家里的台式机通过网络连接了起来，在一个局域网内，代理程序部署在台式机上，服务器通过代理访问外网。同步代码速度很慢，所以就没再理会它，过了半个月，到服务器验证代码时，发现 &lt;code&gt;Git&lt;/code&gt; 代码同步失败，出现了网络错误，也没太在意，仔细查看了报错信息。&lt;/p&gt;
&lt;h2 id=&#34;ローカルリポジトリ&#34;&gt;ローカルリポジトリ
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;fatal: unable to access &amp;lsquo;&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/learn/cpp.git/%27&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/learn/cpp.git/’&lt;/a&gt;: Failed to connect to &lt;a class=&#34;link&#34; href=&#34;http://10.243.52.68&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;10.243.52.68&lt;/a&gt; port 7897 after 7 ms: Couldn’t connect to server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;開発環境&#34;&gt;開発環境
&lt;/h2&gt;&lt;p&gt;当然のことをいいやまぬかと、阿里云サービスとテンセントクラウド原生開発プラットフォームにネットワーク分離があると思い、コードの同期ができないというエラーメッセージをグループに投げかけていた。グループには大賢人がポート情報を見て、「これは代理IPかもしれません」と言い、すぐに誰かが「あなたはローカルネットワークで、ドメイン解決も正しくありません」と付け加えた。まるで脳が失忆しているかのように、自分が代理を設定したことを全く覚えていないのだ。
「ローカルネットワーク」という言葉を見ると、脳が正常に戻り、自分が代理を設定したことを思い出した。エラーが発生したのは自宅のデスクトップPCが接続されているローカルネットワークのアドレスだった。&lt;/p&gt;
&lt;p&gt;慣習的な思考：192.168.x.xはローカルネットワークアドレスである。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンピュータネットワークにおいて、「ローカルネットワーク（LAN）IPアドレス」とは、ローカルネットワーク内で使用されるプライベートIPアドレスを指します。これらのアドレスは公インターネットに直接公開されず、主に内部デバイス間の通信に使用されます。上記で言及した&lt;code&gt;10.243.52.68&lt;/code&gt;と&lt;code&gt;192.168.x.x&lt;/code&gt;はどちらも&lt;strong&gt;プライベートIPアドレス範囲&lt;/strong&gt;に属しますが、異なるアドレス範囲であり、適用されるシナリオや計画ロジックも異なります。以下に詳細な比較を示します。&lt;/p&gt;
&lt;h2 id=&#34;プライベートipアドレスの分類と範囲&#34;&gt;&lt;strong&gt;プライベートIPアドレスの分類と範囲&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;RFC 1918 &lt;a class=&#34;link&#34; href=&#34;https://datatracker.ietf.org/doc/rfc1918/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://datatracker.ietf.org/doc/rfc1918/&lt;/a&gt; に基づき、プライベートIPアドレスは主に3つのセグメントに分類され、それぞれ異なる規模の局域網で使用されます。
| &lt;strong&gt;10.0.0.0/8&lt;/strong&gt; | 255.0.0.0 | 約1600万個 | 大規模企業、园区ネットワーク |&lt;/p&gt;
&lt;h2 id=&#34;プライベートipアドレスの分類と範囲-1&#34;&gt;&lt;strong&gt;プライベートIPアドレスの分類と範囲&lt;/strong&gt;
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;アドレス段&lt;/th&gt;
&lt;th&gt;サブネットマスク&lt;/th&gt;
&lt;th&gt;利用可能なIP数&lt;/th&gt;
&lt;th&gt;適用シナリオ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;172.16.0.0/12&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;255.240.0.0&lt;/td&gt;
&lt;td&gt;約100万個&lt;/td&gt;
&lt;td&gt;中規模企業ネットワーク&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;プライベートipアドレスの分類と範囲-2&#34;&gt;&lt;strong&gt;プライベートIPアドレスの分類と範囲&lt;/strong&gt;
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;アドレス段&lt;/th&gt;
&lt;th&gt;サブネットマスク&lt;/th&gt;
&lt;th&gt;利用可能IP数&lt;/th&gt;
&lt;th&gt;適用シナリオ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;192.168.0.0/16&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;255.255.0.0&lt;/td&gt;
&lt;td&gt;約6.5万個&lt;/td&gt;
&lt;td&gt;小型局域網（家庭、オフィス）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;あなたの問題におけるipアドレス解析&#34;&gt;&lt;strong&gt;あなたの問題におけるIPアドレス解析：&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;10.243.52.68&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
は &lt;strong&gt;&lt;code&gt;10.0.0.0/8&lt;/code&gt;&lt;/strong&gt; 範囲に属し、大規模なプライベートネットワークの典型的なアドレスであり、企業向けローカルエリアネットワーク（LAN）または広域ネットワーク（WAN）（複数の支社間の内部ネットワークなど）で使用されることが多いです。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;192.168.x.x&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
は &lt;strong&gt;&lt;code&gt;192.168.0.0/16&lt;/code&gt;&lt;/strong&gt; 範囲に属し、最も一般的な小型プライベートネットワークアドレスであり、家庭ルーターや小規模なオフィスなどのシナリオで使用されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;両者の核心の違い&#34;&gt;両者の核心の違い
&lt;/h2&gt;&lt;h3 id=&#34;アドレス空間のサイズ&#34;&gt;&lt;strong&gt;アドレス空間のサイズ&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;10.0.0.0/8&lt;/code&gt;&lt;/strong&gt;:
アドレス範囲は &lt;code&gt;10.0.0.0 ~ 10.255.255.255&lt;/code&gt; であり、&lt;strong&gt;16,777,216 個の利用可能なIPアドレス&lt;/strong&gt; を含みます。 大規模なネットワーク（企業、学校、データセンターなど）に適しており、大量のIPアドレスが必要な場合に最適です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;192.168.0.0/16&lt;/code&gt;&lt;/strong&gt;:
アドレス範囲は &lt;code&gt;192.168.0.0 ~ 192.168.255.255&lt;/code&gt; であり、&lt;strong&gt;65,536 個の利用可能なIPアドレス&lt;/strong&gt; を含みます。 小規模なネットワーク（家庭など、通常数十台程度のデバイスがある場合）に適しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;サブネット分割の柔軟性&#34;&gt;&lt;strong&gt;サブネット分割の柔軟性&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;10.0.0.0/8&lt;/code&gt;&lt;/strong&gt;: &lt;br&gt;
アドレス空間が大きいため、&lt;strong&gt;サブネットマスク&lt;/strong&gt;を用いて複数のサブネット（例：&lt;code&gt;10.1.0.0/16&lt;/code&gt;、&lt;code&gt;10.2.0.0/16&lt;/code&gt; など）に分割し、大規模ネットワークの階層的管理とトラフィックの分離を容易にします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;192.168.0.0/16&lt;/code&gt;&lt;/strong&gt;: &lt;br&gt;
通常、デフォルトのサブネットマスク &lt;code&gt;255.255.0.0&lt;/code&gt; を使用し、サブネット分割の必要性は少ないため、シンプルなフラットなネットワーク構造に適しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般的な利用シーン&#34;&gt;&lt;strong&gt;一般的な利用シーン&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;10.xxx.xxx.xxx&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;企業内部ネットワーク: 例えば、複数の海外拠点を経由する多国籍企業がVPNで接続し、各拠点が独立したサブネット（例：&lt;code&gt;10.1.1.0/24&lt;/code&gt;、&lt;code&gt;10.1.2.0/24&lt;/code&gt;）を割り当てられる。&lt;/li&gt;
&lt;li&gt;クラウドサービスプロバイダー内部ネットワーク: AWSや阿里云などのプライベートクラウド環境でよく使用される &lt;code&gt;10.&lt;/code&gt; 段アドレス。&lt;/li&gt;
&lt;li&gt;産業制御ネットワーク: 一部の産業機器はデフォルトで &lt;code&gt;10.&lt;/code&gt; 段アドレスを使用する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;192.168.xxx.xxx&lt;/code&gt;&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;家庭/小規模オフィス: ルーターがデフォルトで割り当てるアドレス（例：&lt;code&gt;192.168.1.1&lt;/code&gt; または &lt;code&gt;192.168.0.1&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;小規模局域網の共有: 例えば、ルーターを使用して構築されたWiFiネットワークで、デバイス数は通常200台以下。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;パブリックネットワークとの分離性&#34;&gt;&lt;strong&gt;パブリックネットワークとの分離性&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;両者ともプライベートアドレスであり、&lt;strong&gt;直接パブリックネットワークにアクセスすることができない&lt;/strong&gt;ため、NAT（ネットワークアドレス変換）またはVPNを介して接続する必要がある。実際使用においては：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;10.&lt;/code&gt; ブロックは、より複雑なネットワークアーキテクチャが必要なシナリオ（マルチサブネット、VLAN分割など）で使用される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;192.168.&lt;/code&gt; ブロックは、アドレス空間が小さいため、プラグアンドプレイに適したシンプルなネットワークに最適である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;なぜ-10-で始まるアドレスが表示されるのか&#34;&gt;&lt;strong&gt;なぜ 10. で始まるアドレスが表示されるのか？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;ローカルネットワークで &lt;code&gt;10.243.52.68&lt;/code&gt; のようなアドレスを見つけた場合、考えられる原因は以下のとおりです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;エンタープライズ級のネットワーク環境&lt;/strong&gt;：
会社や組織が &lt;code&gt;10.&lt;/code&gt; 段を内部IPアドレスとして使用し、部門やデバイス（サーバー、PCなど）を区別するために利用している可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;仮想マシンまたはコンテナネットワーク&lt;/strong&gt;：
クラウドプラットフォーム（VMware、Docker など）で、仮想マシンに IP アドレスを割り当てる際に &lt;code&gt;10.&lt;/code&gt; 段がデフォルトで使用されることがあります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特殊なデバイスのデフォルト設定&lt;/strong&gt;：
一部のネットワーク機器（産業用スイッチ、ファイアウォールなど）は、工場出荷時に &lt;code&gt;10.&lt;/code&gt; 段のアドレスをデフォルトで設定している場合があります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;まとめどのように選択するか&#34;&gt;&lt;strong&gt;まとめ：どのように選択するか？&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小型ネットワーク（家庭/オフィス）:&lt;/strong&gt; &lt;code&gt;192.168.x.x&lt;/code&gt; を優先的に使用し、設定が簡単で十分な性能を発揮します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中規模・大規模ネットワーク（企業/园区）:&lt;/strong&gt; &lt;code&gt;10.x.x.x&lt;/code&gt; または &lt;code&gt;172.16.x.x&lt;/code&gt; を使用し、サブネットの分割や多数のデバイス管理を容易にします。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;両者は本質的にローカルエリアネットワークアドレスであり、アドレス空間と適用シナリオの違いのみがあります。技術的な優劣はありません。具体的なネットワーク計画の要件によって選択します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git単独でプロキシを設定する</title>
        <link>https://ttf248.life/ja/p/git-single-configuration-proxy/</link>
        <pubDate>Fri, 06 Jun 2025 18:29:46 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-single-configuration-proxy/</guid>
        <description>&lt;p&gt;国内へのGitHubアクセス速度が遅い場合、プロキシの設定で加速できます。また、国内のホスティングプラットフォーム（例えば、码云、Codingなど）を利用する方法もあります。対応するビルドパイプラインを設定し、コードをGitHubに同期します。&lt;/p&gt;
&lt;p&gt;長年&lt;code&gt;coding&lt;/code&gt;を使用しており、インターフェースはシンプルで、最近公告を発表し、無料版がサポートされなくなりました。そのため、騰訊の新しいプラットフォーム&lt;code&gt;cnb&lt;/code&gt;への移行が必要になります。それに伴い、アリババのホスティングプラットフォーム全体のインターフェースデザインは、&lt;strong&gt;非常に使いにくい&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;リポジトリの移行&#34;&gt;リポジトリの移行
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cnb&lt;/code&gt;公式サイトで、GitHubから&lt;code&gt;cnb&lt;/code&gt;へのコードをまとめて移行するためのツールが提供されています。
&lt;a class=&#34;link&#34; href=&#34;https://docs.cnb.cool/zh/guide/migration-tools.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.cnb.cool/zh/guide/migration-tools.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-代理設定&#34;&gt;Git 代理設定
&lt;/h2&gt;&lt;p&gt;加速設定を行わない場合、ツールの同期が遅いため、コードはまずローカルに同期され、その後リモートリポジトリにアップロードされます。&lt;/p&gt;
&lt;p&gt;Git は以下のコマンドを使用して HTTP 代理を個別に構成でき、システム全体のグローバル設定に影響を与えません。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# HTTP 代理を設定
git config --global http.proxy http://proxy.example.com:8080

# HTTPS 代理を設定
git config --global https.proxy http://proxy.example.com:8080

# オプション：特定のドメイン名に対してのみ代理を設定
git config --global http.https://github.com.proxy http://proxy.example.com:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代理設定を解除するには、以下のコマンドを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global --unset http.proxy
git config --global --unset https.proxy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現在の代理設定を確認するには、以下のコマンドを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config --global --get http.proxy
git config --global --get https.proxy
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Prometheus監視システムにおけるヒストグラムとサマリー</title>
        <link>https://ttf248.life/ja/p/prometheus-monitoring-system-histogram-and-summary/</link>
        <pubDate>Wed, 04 Jun 2025 19:00:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/prometheus-monitoring-system-histogram-and-summary/</guid>
        <description>&lt;p&gt;ビジネスシステムは、サマリータイプの監視指標を設計し、平均処理時間（request_duration_milliseconds_sum / request_duration_milliseconds_count）を計算していました。&lt;/p&gt;
&lt;p&gt;データを確認したところ、あるインターフェースの平均処理時間が非常に高くなっていることが判明しました。時系列グラフを見ると、平均処理時間が突然増加しており、それは単一のリクエストの処理時間が長かったために引き起こされたもので、平均値を押し上げている状態でした。具体的にいつ発生したリクエストを特定したいのですが、その期間内のリクエスト数が少なく、結果データが常に空になってしまいます。&lt;/p&gt;
&lt;h2 id=&#34;faq-よくある質問--質疑応答-しぎおうどう応&#34;&gt;FAQ (よくある質問) / 質疑応答 (しぎおうどう応)
&lt;/h2&gt;&lt;h3 id=&#34;-なぜ-_sum-と-_count-にデータがあるのか&#34;&gt;✅ なぜ &lt;code&gt;_sum&lt;/code&gt; と &lt;code&gt;_count&lt;/code&gt; にデータがあるのか
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_sum&lt;/code&gt; と &lt;code&gt;_count&lt;/code&gt; は Summary 型の&lt;strong&gt;コア指標&lt;/strong&gt;であり、Prometheus は常にこれらの値を収集して記録します。&lt;/li&gt;
&lt;li&gt;どちらも&lt;strong&gt;累積型のカウンター&lt;/strong&gt;であるため、&lt;code&gt;rate()&lt;/code&gt; または &lt;code&gt;increase()&lt;/code&gt; を使用するのに適しています。&lt;/li&gt;
&lt;li&gt;リクエスト遅延がどのように変化しても、リクエストが存在すれば必ず &lt;code&gt;_sum&lt;/code&gt; と &lt;code&gt;_count&lt;/code&gt; のデータがあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-quantile099-が時系列グラフで表示されない理由&#34;&gt;❌ &lt;code&gt;{quantile=&amp;quot;0.99&amp;quot;}&lt;/code&gt; が時系列グラフで表示されない理由
&lt;/h3&gt;&lt;p&gt;Summary にも quantile=&amp;ldquo;0.99&amp;rdquo; を設定していても、この時間系列が存在しないか欠損している可能性があります：
指標は確実に設定されており、データが期限切れでもありません。📉 リクエスト量が少ないため、quantile を計算できません。スライディングウィンドウメカニズムにより、この期間を過ぎると統計範囲に再含まれなくなります。
分位数（例えば p99）はサンプリング統計によって計算されます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1～2 件程度のリクエストしかない場合、p99 の計算は&lt;strong&gt;不安定で代表的な意味を持たない&lt;/strong&gt;可能性があります。&lt;/li&gt;
&lt;li&gt;Prometheus &lt;strong&gt;クライアント SDK は、この quantile 時間系列を公開しない&lt;/strong&gt;ように選択します（誤解を避けるため）。&lt;/li&gt;
&lt;li&gt;その結果、&lt;code&gt;_sum&lt;/code&gt;、&lt;code&gt;_count&lt;/code&gt; が正常に累積されますが、&lt;code&gt;quantile=&amp;quot;0.99&amp;quot;&lt;/code&gt; にデータが存在しません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ヒストグラムとサマリーの違い&#34;&gt;ヒストグラムとサマリーの違い
&lt;/h2&gt;&lt;h3 id=&#34;ヒストグラム&#34;&gt;&lt;strong&gt;ヒストグラム&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仕組み:&lt;/strong&gt; ヒストグラムは、データをビン（バケット）に分割し、各ビンに収まっているサンプルの数を記録します。
例えば、定義したビンが &lt;code&gt;[10ms, 50ms, 100ms, 500ms, 1s]&lt;/code&gt; の場合、各リクエストのレイテンシは対応するビンに割り当てられます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利点:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus で複数のインスタンス（例えば、複数のサービスノードのリクエストレイテンシ分布）からのデータを集計できます。&lt;/li&gt;
&lt;li&gt;分位数（P50、P95、P99 など）を計算し、レイテンシの分布を観察するのに適しています。&lt;/li&gt;
&lt;li&gt;PromQL を使用して、動的に分位数を計算するための柔軟なクエリ機能を提供します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ビンの範囲を事前に定義する必要があり、選択が不適切だとデータ分布が均一にならない可能性があります（例えば、すべてのリクエストが 1 つのビンに集中する）。&lt;/li&gt;
&lt;li&gt;ビンの数が多いほど、ストレージと計算のオーバーヘッドが増加します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適用シナリオ:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;複数のインスタンスからのデータを集計する必要がある場合。&lt;/li&gt;
&lt;li&gt;分位数を動的に調整したり、レイテンシ分布を分析したりする場合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;概要&#34;&gt;&lt;strong&gt;概要&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仕組み:&lt;/strong&gt; Summary はクライアント側でパーセンタイル（P50、P95、P99 など）を直接計算し、その結果を Prometheus に報告します。
また、サンプル全体の数と合計も記録し、平均値を計算するために使用します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利点:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;プレ定義されたバケットは不要で、直接パーセンタイル結果を提供します。&lt;/li&gt;
&lt;li&gt;単一インスタンスでの正確なパーセンタイル計算に適しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;パーセンタイルの計算はクライアント側で行われるため、Prometheus で複数のインスタンスのデータを集計できません。&lt;/li&gt;
&lt;li&gt;パーセンタイルを調整（例：P95 から P99 に変更）するには、コードを変更して再デプロイする必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適用シナリオ:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;単一インスタンスでの監視であり、パーセンタイルに対する正確性が高い場合。&lt;/li&gt;
&lt;li&gt;複数のインスタンスのデータを集計する必要がない場合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;分位数計算&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;プロメテウス内で動的に計算&lt;/td&gt;
&lt;td&gt;顧客側で直接計算&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;多インスタンス集約&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;対応&lt;/td&gt;
&lt;td&gt;非対応&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;主な違いの比較&#34;&gt;&lt;strong&gt;主な違いの比較&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;バケツの定義&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;事前に定義する必要がある&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;主な違いの比較-1&#34;&gt;&lt;strong&gt;主な違いの比較&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ストレージコスト&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;桶の数に依存&lt;/td&gt;
&lt;td&gt;固定コスト&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;柔軟性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;高 (ビンの幅を動的に調整可能)&lt;/td&gt;
&lt;td&gt;低 (コードを変更してビンの幅を調整する必要がある)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;複数のインスタンスのデータを集約したり、分位数を柔軟に調整する必要がある場合は、&lt;strong&gt;ヒストグラム&lt;/strong&gt;を選択してください。&lt;/li&gt;
&lt;li&gt;単一インスタンスの正確な分位数が必要で、分位数が固定されている場合は、&lt;strong&gt;サマリー&lt;/strong&gt;を選択してください。
あなたのシナリオでは、サービスが分散しているため、&lt;strong&gt;ヒストグラム&lt;/strong&gt;を使用することを推奨します。これにより、Prometheus ですべてのインスタンスのデータを集約し、動的に分位数と経過時間分布を計算できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;スライディングウィンドウの概念とそのヒストグラムおよびサマリーとの関係&#34;&gt;スライディングウィンドウの概念とそのヒストグラムおよびサマリーとの関係
&lt;/h2&gt;&lt;h3 id=&#34;スライディングウィンドウの概念&#34;&gt;&lt;strong&gt;スライディングウィンドウの概念&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;スライディングウィンドウは、時間ウィンドウメカニズムであり、一定期間内のデータ変化を統計するために使用されます。それは、継続的に移動する時間範囲を通して、システムのリアルタイム状態を動的に反映します。スライディングウィンドウの特徴は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;固定時間範囲:&lt;/strong&gt; ウィンドウの長さは固定されており、例えば最近1分、5分などがあります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;リアルタイム更新:&lt;/strong&gt; 時間経過とともに、ウィンドウがスライドし、古いデータがウィンドウから削除され、新しいデータがウィンドウに追加されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一般的な用途:&lt;/strong&gt; リアルタイム指標（リクエストレート、平均値、パーセンタイルなど）を計算するために使用されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prometheusでは、スライディングウィンドウは通常、クエリ関数（&lt;code&gt;rate()&lt;/code&gt;、&lt;code&gt;avg_over_time()&lt;/code&gt;など）によって実装されます。&lt;/p&gt;
&lt;h3 id=&#34;スライディングウィンドウとヒストグラムの関係&#34;&gt;&lt;strong&gt;スライディングウィンドウとヒストグラムの関係&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ヒストグラムのデータ構造&lt;/strong&gt;: &lt;br&gt;
ヒストグラムは、サンプルデータをビンに分割し、各ビンのカウントを記録します。Prometheus は、これらのカウント値を周期的にキャプチャします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;スライディングウィンドウの実装&lt;/strong&gt;: &lt;br&gt;
Prometheus でヒストグラムのデータに対してスライディングウィンドウを適用するには、クエリ文を使用できます。例えば：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate(http_request_duration_seconds_bucket[5m])&lt;/code&gt;: 過去 5 分間の各ビンのリクエストレートを計算します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))&lt;/code&gt;: 過去 5 分間の P95 分位数を計算します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利点&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;スライディングウィンドウは、最近の時間の要求時間分布を動的に反映できます。&lt;/li&gt;
&lt;li&gt;ヒストグラムのビニングメカニズムとスライディングウィンドウを組み合わせることで、効率的に分位数や分布を計算できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;スライディングウィンドウとsummaryの関係&#34;&gt;&lt;strong&gt;スライディングウィンドウとSummaryの関係&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Summaryのデータ構造&lt;/strong&gt;:
Summaryはクライアント側でパーセンタイルを直接計算し、Prometheusに送信します。また、サンプル総数と合計も記録します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;スライディングウィンドウの実装&lt;/strong&gt;:
Prometheusでは、Query文を使用してSummaryのデータをスライディングウィンドウ化できます。例えば：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m])&lt;/code&gt;: 過去5分間の平均リクエスト時間計算します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;制限&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Summaryのパーセンタイルはクライアント側で計算されるため、Prometheus側で再計算できません。したがって、スライディングウィンドウによるパーセンタイルのサポートは限定的です。&lt;/li&gt;
&lt;li&gt;複数のインスタンスのデータを集計する必要がある場合、スライディングウィンドウはSummaryのパーセンタイルに直接作用しません。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;スライディングウィンドウの適用場面&#34;&gt;&lt;strong&gt;スライディングウィンドウの適用場面&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;リアルタイム監視:&lt;/strong&gt; スライディングウィンドウは、システムのリアルタイムな状態を監視するのに適しています。例えば、最近1分間のリクエストレートやレイテンシ分布などです。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;異常検知:&lt;/strong&gt; スライディングウィンドウを使用することで、短期間での異常事象（例えば、リクエストのレイテンシが急増するなど）を迅速に検出できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;動的分析:&lt;/strong&gt; スライディングウィンドウは、システムの変化トレンドを動的に反映し、静的なグローバル統計とは異なります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;概要-1&#34;&gt;概要
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ヒストグラム&lt;/strong&gt; とスライディングウィンドウを組み合わせることで、分位数（例：P95、P99）とリクエストの経過時間分布を動的に計算でき、分散システムでの監視に適しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summary&lt;/strong&gt; とスライディングウィンドウを組み合わせることで、平均値などの単純な指標を計算できますが、分位数の柔軟性に欠け、多インスタンスアグリゲーションもサポートしていません。
あなたのシナリオでは、極端なリクエストの経過時間（例：P99）と大部分のリクエストの平均値を監視する必要があるため、&lt;strong&gt;ヒストグラム&lt;/strong&gt; を使用し、スライディングウィンドウを組み合わせてシステムのパフォーマンスを動的に分析することをお勧めします。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ブログ翻訳プロジェクトの雑感：文化伝達、AIプログラミング</title>
        <link>https://ttf248.life/ja/p/blog-translation-project-musings-cultural-transmission-ai-programming/</link>
        <pubDate>Mon, 02 Jun 2025 21:41:00 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-translation-project-musings-cultural-transmission-ai-programming/</guid>
        <description>&lt;p&gt;文化伝播：意識形態的な影響、潜移漫歩。
AIプログラミング：ソフトウェア設計を行わないため、手戻りが多くなる。&lt;/p&gt;
&lt;h2 id=&#34;文化翻訳&#34;&gt;文化翻訳
&lt;/h2&gt;&lt;p&gt;当初のプロジェクトでは、英語、日本語、韓国語という3つの言語のみをサポートしていました。その後、「結局AI翻訳だから、色々な言語に対応した方が良いのではないか」と考え、フランス語、ロシア語、ヒンディー語を追加しました。その頃は問題に気づかず、プログラムが翻訳を実行する際に、過去のコードの問題により翻訳形式が正しくなく、保存された文章を再翻訳する必要がありました。&lt;/p&gt;
&lt;p&gt;統計的な時間経過の警告が表示され、すべての翻訳が完了するまでに約20時間がかかりました。これは、ローカルでデプロイされている大規模なモデルであるためです。不要な言語をいくつか削除し、翻訳時間を短縮することを考えました。フランス語、ロシア語、ヒンディー語を削除しました。その時、何かがおかしいことに気づきました。なぜ当初選択した言語（日本語、韓国語）が、私の選択になっているのでしょうか？&lt;/p&gt;
&lt;p&gt;世界人口の分布に基づいて見ると、これらの言語のユーザー層はそれほど多くありません。特に韓国語は、世界の利用人数は約8000万人に過ぎません。日本語はわずかに多い約1億2000万人です。一方、フランス語、ロシア語、ヒンディー語の利用人数はすべて1億人以上でした。&lt;/p&gt;
&lt;p&gt;その時、言語のユーザー層が、言語の使用人数によるものではなく、文化翻訳の影響によるものであることに気づきました。韓国と日本の文化は世界的に広範な影響力を持っており、特にアジア地域で顕著です。K-pop、アニメ、映画などの文化製品は大量のファンを引き付け、これらのファンは自然と関連する言語にも興味を持つようになりました。&lt;/p&gt;
&lt;p&gt;プロジェクトの成長を振り返ると、幼い頃によく日本のアニメや漫画を見ていましたし、大人になった今では多くの韓国映画やドラマを見ました。そのため、プロジェクトの設定時の初期言語を選択する際に、無意識のうちにこれらの馴染みのある言語を選択してしまいました。&lt;/p&gt;
&lt;h3 id=&#34;ソフトウェア設計とaiプログラミング&#34;&gt;ソフトウェア設計とAIプログラミング
&lt;/h3&gt;&lt;p&gt;翻訳助手は当初、単なるシンプルなツールに過ぎなかったが、Claude4のコーディング能力を体験してから徐々に機能が拡張され、文章翻訳、タグ翻訳などのモジュールが追加された。機能が増加するにつれて、コードの複雑さもそれに伴って上昇した。AIがコードをリファクタリングしてディレクトリ構造をより明確にしたことは確かだが、新機能の拡張やバグ修正時には、AI生成されたコードには繰り返し問題が発生することがある。&lt;/p&gt;
&lt;p&gt;AIはコード生成において、全体的な構造と設計理念に対する理解に欠けている。既存のコードに基づいて修正や拡張を行うことが多く、既存モジュールの有効な再利用をできていないため、コード冗長性が生じることがある。毎回、重複コードを手動で削除する必要があり、これは無意識のうちに開発コストを増加させている。&lt;/p&gt;
&lt;p&gt;さらに、AI生成されたコードは文法的に正しくても、論理と設計において問題がある場合がある。例えば、別のプロジェクトでプロンプトをわずかに調整しただけで、生成されるウェブページの構造が完全に異なり、一貫性がない。これは初期段階における合理的な設計の欠如、機能の追加が随意な積み重ねによるものであり、コード構造が混乱していることを反映している。&lt;/p&gt;
&lt;p&gt;これはまた、ソフトウェアエンジニアリングの核心的な経験は依然として無視できないことを私たちに思い出させる。適切な設計は返工を減らすだけでなく、コードの保守性と拡張性を向上させることができる。AIは強力なツールであるものの、システム設計に対する人間の深い理解と計画を代替することはできない。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ブログ翻訳プロジェクトの雑感：歴史対話</title>
        <link>https://ttf248.life/ja/p/blog-translation-project-musings-historical-conversations/</link>
        <pubDate>Mon, 02 Jun 2025 21:16:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-translation-project-musings-historical-conversations/</guid>
        <description>&lt;p&gt;ブログ翻訳プロジェクトは当初、複雑に設計されていた——まずMarkdown形式を解析し、プレースホルダーでコンテンツを保護し、最後に大規模言語モデルに送信する仕組みだった。これは完全に無駄であり、大規模言語モデル自体がMarkdownの文法を認識する能力を備えており、元のコンテンツを直接処理し、翻訳時にフォーマットを維持することができたからだ。&lt;/p&gt;
&lt;p&gt;私たちの仕事は、コードのデバッグから、大規模言語モデルの&lt;strong&gt;プロンプト&lt;/strong&gt;のデバッグへと変わった。
モデル：&lt;code&gt;google/gemma-3-4b&lt;/code&gt;
ハードウェア：&lt;code&gt;Nvidia 3060 12GB&lt;/code&gt;
そう、思考しないモデルを選んだ。思考するモデルは翻訳タスクを実行する際に効率が低く、4Bパラメータと12Bパラメータの効果を比較したところ、翻訳タスクにおいてはgemma3の4Bパラメータで十分だった。12Bパラメータは翻訳タスクにおいて明確な利点を持っていなかった。
12Bパラメータの速度：&lt;strong&gt;11.32 tok/sec&lt;/strong&gt;、4Bパラメータの速度：&lt;strong&gt;75.21 tok/sec&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h2&gt;&lt;p&gt;システムに様々な条件制限を加えても、出力される翻訳結果には依然として問題が発生することがありました。具体的には、フォーマットの保護が不十分であったり、過剰な説明文が含まれていたりしました。役割定義時には、Markdown形式を保護し、翻訳結果のみを出力することを明示していたにも関わらず、最終的な翻訳は不安定でした。&lt;/p&gt;
&lt;p&gt;その時、以前漫画翻訳プロジェクトで大言語モデルを活用した経験が思い出されました。その時の翻訳精度は、私のものより良かったようです。コードやリクエストデータを確認したところ、漫画翻訳プロジェクトでは、毎回リクエストにコンテキスト（文脈）を付与していました。現在の翻訳内容に加え、過去の翻訳内容もまとめて送信していたのです。&lt;/p&gt;
&lt;p&gt;このメリットは何でしょうか？前後の翻訳の一貫性を高めるだけでなく、出力フォーマットの安定性を確保することにもつながったと考えられます。&lt;/p&gt;
&lt;h2 id=&#34;履歴対話の重要性&#34;&gt;履歴対話の重要性
&lt;/h2&gt;&lt;p&gt;AI 大規模モデル（GPT シリーズ、Claude、Gemini など）の普及に伴い、ますます多くの企業や開発者が API を通じてこれらのモデルにアクセスし、インテリジェントな顧客サポート、コンテンツ生成、コードアシスタントなどのアプリケーションを構築しています。しかし、多くの方は API への初期導入時に共通の問題に直面します：&lt;strong&gt;モデル出力が不整合で文脈理解が欠如しており、場合によっては質問の意図を誤解してしまう&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;この現象を引き起こす主要な原因の一つは——&lt;strong&gt;API リクエスト中に履歴対話の内容を含めないこと&lt;/strong&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;履歴対話とは&#34;&gt;履歴対話とは？
&lt;/h2&gt;&lt;p&gt;履歴対話とは、一度の会話セッションにおいて、モデルとユーザー間の過去のやり取りの記録を指します。OpenAI の Chat Completions API（など、多くの大規模言語モデル API）では、開発者がリクエスト内で完全な &lt;code&gt;messages&lt;/code&gt; 配列を作成し、過去の会話をユーザーとアシスタントのメッセージが交互に並んだ形式で渡す必要があります。&lt;/p&gt;
&lt;h3 id=&#34;例文&#34;&gt;例文
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;model&amp;quot;: &amp;quot;gpt-4&amp;quot;,
  &amp;quot;messages&amp;quot;: [
    {&amp;quot;role&amp;quot;: &amp;quot;user&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;退職の手紙を書いてください&amp;quot;},
    {&amp;quot;role&amp;quot;: &amp;quot;assistant&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;かしこまりました。退職理由は何を書くようにしますか？&amp;quot;},
    {&amp;quot;role&amp;quot;: &amp;quot;user&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;個人的なキャリアの追求をしたいと考えていると述べる&amp;quot;}
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もし最後の文だけを送った場合：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&amp;quot;role&amp;quot;: &amp;quot;user&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;個人的なキャリアの追求をしたいと考えていると述べる&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モデルは退職の手紙だと全く認識できず、文脈が理解されないため、出力品質は著しく低下します。&lt;/p&gt;
&lt;h2 id=&#34;歴史対話がなぜ重要なのか&#34;&gt;歴史対話がなぜ重要なのか？
&lt;/h2&gt;&lt;h3 id=&#34;1-文脈の構築と一貫性の向上&#34;&gt;1. &lt;strong&gt;文脈の構築と一貫性の向上&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;AIモデルは本質的に「コンテキスト駆動型」であり、過去の出来事を記憶することはできません。除非你&lt;strong&gt;明示的に伝える&lt;/strong&gt;のです。対話履歴を渡すことで、モデルはあなたの意図や話題の背景をより良く理解し、期待される出力を生成できます。&lt;/p&gt;
&lt;h3 id=&#34;2-誤解の低減&#34;&gt;2. &lt;strong&gt;誤解の低減&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;もしあなたがモデルに複数のステップで指示を実行させたい場合（例：文章作成、要約、コードデバッグ）、過去の履歴はモデルが徐々に理解を深め、途中で「逸脱」したり、重要な点を失ったりするのを防ぐのに役立ちます。&lt;/p&gt;
&lt;h3 id=&#34;3-実際の人間のような対話行動のシミュレーション&#34;&gt;3. &lt;strong&gt;実際の人間のような対話行動のシミュレーション&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;実用例として、カスタマーサポートシステム、教育アシスタント、健康相談などにおいて、ユーザーの質問は通常、段階的に展開され、一度に明確な表現で表明されることはありません。会話履歴を保持することで、AIが「記憶力のあるアシスタント」のように振る舞うことができます。&lt;/p&gt;
&lt;h2 id=&#34;api-中における会話履歴の正しい追加方法&#34;&gt;API 中における会話履歴の正しい追加方法
&lt;/h2&gt;&lt;p&gt;OpenAI の API を例に、以下の構造に従うことを推奨します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;messages = [
    {&amp;quot;role&amp;quot;: &amp;quot;system&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;あなたは専門的な法律アシスタントです&amp;quot;},
    {&amp;quot;role&amp;quot;: &amp;quot;user&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;契約書の有効条件とは何ですか？&amp;quot;},
    {&amp;quot;role&amp;quot;: &amp;quot;assistant&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;契約書が有効であるためには、以下の条件を満たす必要があります：……&amp;quot;},
    {&amp;quot;role&amp;quot;: &amp;quot;user&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;口頭での合意は有効ですか？&amp;quot;}
]

response = openai.ChatCompletion.create(
    model=&amp;quot;gpt-4&amp;quot;,
    messages=messages
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;system&lt;/code&gt; メッセージを使用してモデルの動作とアイデンティティを設定します。&lt;/li&gt;
&lt;li&gt;最新の数回の重要な会話のみを保持し、毎回すべての履歴を送信する必要はありません（トークン制限を超えないように）。&lt;/li&gt;
&lt;li&gt;長いセッションでは、早期のコンテンツを切り捨てて、コア情報を要約し、トークンの消費を制御します。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;実践的推奨事項&#34;&gt;実践的推奨事項
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;対話状態管理&lt;/strong&gt;: バックエンドは、各ユーザーのセッション履歴（例: Redis、データベース）を記録するためのキャッシュメカニズムを設計する必要があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;長さ制限&lt;/strong&gt;: OpenAI GPT-4 のコンテキスト長は 128k tokens であり、Claude 3 は 200k～1M पर्यंत可能です。適切なトリミングが必要です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;動的履歴の要約&lt;/strong&gt;: 履歴が長すぎる場合は、モデルを使用して古い会話を要約し、その結果を対話コンテキストに追加します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h2&gt;&lt;p&gt;AI 大規模モデルの能力は強力ですが、開発者に十分なコンテキスト情報を「与える」必要があります。API リクエストに過去の会話を追加することで、モデル出力の品質と一貫性を大幅に向上させるだけでなく、ユーザーエクスペリエンスをより自然で現実的な対話に近づけることができます。AI 顧客サービス、ライティングアシスタント、プログラミングアシスタント、教育アプリケーションなど、どのような分野でも無視できない最適化テクニックです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go プロジェクトで参照されていないすべての関数を検索する。</title>
        <link>https://ttf248.life/ja/p/find-all-functions-not-referenced-in-the-go-project/</link>
        <pubDate>Mon, 02 Jun 2025 21:10:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/find-all-functions-not-referenced-in-the-go-project/</guid>
        <description>&lt;p&gt;Go言語プロジェクトにおいて、&lt;code&gt;staticcheck&lt;/code&gt; を使用して未使用関数を検出することは、効率的な静的解析手法です。&lt;/p&gt;
&lt;h3 id=&#34;1-staticcheck-のインストール&#34;&gt;&lt;strong&gt;1. staticcheck のインストール&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;以下のコマンドを実行して、Go (バージョン 1.16+) と &lt;code&gt;staticcheck&lt;/code&gt; をインストールしてください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install honnef.co/go/tools/cmd/staticcheck@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-基本用法未使用関数の検索&#34;&gt;&lt;strong&gt;2. 基本用法：未使用関数の検索&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;プロジェクトのルートディレクトリで以下のコマンドを実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;staticcheck ./...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;主要チェックルール:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;U1000&lt;/strong&gt;: 未使用関数、メソッド、変数、または型を検出します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U1001&lt;/strong&gt;: 未使用パラメータを検出します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-特定のチェックルールをフィルタリングする&#34;&gt;&lt;strong&gt;3. 特定のチェックルールをフィルタリングする&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;未使用関数のみをチェックする場合、ルールを指定できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;staticcheck -checks=U1000 ./...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-出力形式&#34;&gt;&lt;strong&gt;4. 出力形式&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;デフォルトの出力形式は、&lt;code&gt;{path}:{line}:{column}: {message}&lt;/code&gt; の形式です。例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;main.go:10:2: func UnusedFunction は未使用です (U1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-設定ファイル-オプション&#34;&gt;&lt;strong&gt;5. 設定ファイル (オプション)&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;プロジェクトのルートディレクトリに &lt;code&gt;.staticcheck.conf&lt;/code&gt; ファイルを作成し、カスタムチェックルールを定義します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;checks&amp;quot;: [&amp;quot;U1000&amp;quot;, &amp;quot;-ST1000&amp;quot;]  // U1000 を有効にし、ST1000 を無効にする (文字列フォーマット規則)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6-visual-studio-code-への統合&#34;&gt;&lt;strong&gt;6. Visual Studio Code への統合&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=golang.go&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go 拡張機能&lt;/a&gt; をインストールします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;settings.json&lt;/code&gt; に以下を追加します：&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;7-特定コードの無視&#34;&gt;&lt;strong&gt;7. 特定コードの無視&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;関数の上部にコメント &lt;code&gt;//lint:ignore U1000 reason&lt;/code&gt; を追加することで、以下のチェックを無視できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//lint:ignore U1000 Used by generated code
func UnusedButNeeded() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;よくある質問&#34;&gt;&lt;strong&gt;よくある質問&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Q: テストファイル内の未使用関数をどのように処理しますか?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A: &lt;code&gt;staticcheck&lt;/code&gt; はデフォルトでテストファイルをチェックします。除外する場合は、&lt;code&gt;-tests=false&lt;/code&gt; などのフラグを使用できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q: CI/CD 環境への統合は?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A: GitHub Actions に追加：&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;サンプル出力&#34;&gt;&lt;strong&gt;サンプル出力&lt;/strong&gt;
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ staticcheck -checks=U1000 ./...
internal/utils/helper.go:15:2: 関数 privateHelper は使用されていない (U1000)
cmd/server/main.go:23:2: initConfig 関数は使用されていない (U1000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;staticcheck&lt;/code&gt; の &lt;code&gt;U1000&lt;/code&gt; 規則を使用することで、未使用の関数を迅速に特定し削除し、コード品質を向上させることができます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>浙江の金融圏崩壊、ここ2年間の反腐が政府部門に限定されなくなっています。</title>
        <link>https://ttf248.life/ja/p/the-zhejiang-financial-circle-collapsed-and-the-anti-corruption-efforts-over-the-past-two-years-have-not-been-limited-to-government-departments/</link>
        <pubDate>Mon, 02 Jun 2025 20:57:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/the-zhejiang-financial-circle-collapsed-and-the-anti-corruption-efforts-over-the-past-two-years-have-not-been-limited-to-government-departments/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;抖音で浙江金融圏の汚職摘発報道を見つけた。以前、金融汚職に関する序幕について一度書いたが、その後追跡する記事はなかった。
毎日、経済ニュースを見る習慣がある。以前は金融汚職に関する報道は見当たらなかったが、ここ2年ほどで金融汚職に関する報道が増加し、銀行や証券会社などの金融機関の幹部が摘発されるニュースが増えている。
&lt;a class=&#34;link&#34; href=&#34;p/financial-anti-corruption-curtain-rise/&#34; &gt;金融汚職の序幕&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;近年中国金融分野において最も象徴的な事件の一つである、浙江省における金融圏の系統的な汚職風暴は、2023年に始まった反腐活動が四大国有銀行の浙江省支店長ら幹部の摘発をきっかけに明らかになった。地方金融システムが長年抱えていた権力乱用や政治的癒着といった深層の問題を浮き彫りにしたものである。以下では、事件の経緯、核心的な問題点、根本原因、そしてその後の影響という4つの側面から分析する：&lt;/p&gt;
&lt;h3 id=&#34;一事件の経緯朱從玖事件から四大行掌門人全軍覆没まで&#34;&gt;一、事件の経緯：朱從玖事件から四大行「掌門人」全軍覆没まで
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;火種：朱從玖事件が金融システム内のスパイ活動を浮上させる&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;2023年5月、当時浙江省副省長であった朱從玖が摘発され、その「金融に依存し金融で食う」腐敗モデルが突破口となった。朱從玖が在任中に企業の上場や融資などの介入を通じて巨額の利益を得て、金融機関の高官と利害同盟を形成した。2023年11月、朱從玖は党籍および公職から除奪され、捜査で明らかになった複数の手がかりがその後の金融システム地震を引き起こした。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反腐敗嵐の激化：四大行浙江支店の元頭取が相次いで摘発される&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2024年4月&lt;/strong&gt;：中国銀行浙江省支店の元頭取である郭心剛が摘発され、退職後に低価格での不動産購入や株式溢價などの方法で私腹を肥やし、鉱産融資の承認権を濫用して国有資産に重大な損失をもたらした。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2025年4月&lt;/strong&gt;：建設銀行浙江省支店の元頭取である高強が摘発され、在任中に不正な融資承認を行い、複数のプロジェクトが未完となり、顧問料として数千万元を収受した。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2025年5月&lt;/strong&gt;：農業銀行浙江省支店の元頭取である馮建龍が自ら投案し、在任中に農行浙江支店を「家族企業」に変え、親族が不正に役職に就き、生活作風の問題が深刻であった。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2025年5月30日&lt;/strong&gt;：工商銀行浙江省支店の元頭取である沈榮勤が摘発され、退職後に「政商の回転ドア」を通じて钱塘江金研院などの機関を掌握し、八家民企と利益輸送ネットワークを形成した。こうして四大行浙江支店の元「一把手」（一把は「一柄」の略で、トップを意味する）が15ヶ月間で全て摘発され、反腐敗の閉環が形成された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;規制システムも同時に揺さぶられる&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;2025年1月、浙江省委金融部の元副主任である潘广恩が自ら投案し、職務上の便利を利用して企業株式の公開上場や投資の導入などの利益を得て、違法に巨額の財物を収受した。これは反腐敗行動が金融機関から規制部門へと拡大することを示し、「規制-金融機関-民企」三者の利害関係が深く結びついていることを明らかにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二核心問題信贷腐敗と回転門利益チェーン&#34;&gt;二、核心問題：信贷腐敗と回転門利益チェーン
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;信貸承認権の異化：腐敗の中核的ツール&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;四大行（大手銀行）の元頭取全員が信貸承認権を利用して利益移転を行った：郭心剛が鉱産融資を違法に流動化し、高強が「顧問料」で信貸を操作し、馮建龍家の一族による放贷（融資）により不良プロジェクトが発生し、沈荣勤が金研院プラットフォームを通じて関連企業に資金を移送した。データによると、2024年の銀行システムにおける被摘発者中、68%が違法な融資または貸付に関与しており、信貸権力の失控問題は目障りなほど深刻である。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回転門腐敗：退職は安全保障ではない&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;四人全員が退職後、「身分変換」を通じて権力を維持した：郭心剛が業界協会会長として信貸を干渉し、高強が証券会社独董に転任して資本を操作し、沈荣勤が「金融産学研」プラットフォームを構築して民企と接続した。このような「退職は休養ではない」という模式は、退職した幹部が規制を回避し、隠れた利益チェーンを形成することを可能にする。2024年の金融反腐白皮書によると、68%の事件が退職した幹部に関与しており、浙江事例が典型的なサンプルである。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;政商境界線が曖昧：銀行から民企への利益移転&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;沈荣勤が執掌する钱塘江金研院（チャータンジャン・ジンレンユアン）は、正泰、传化など八家民企によって注資され設立された。表面上は学術機関であるが、実際には政商勾結の枢紐（ふすま）である。このプラットフォームを通じて、沈荣勤は銀行のリソースを関連企業に誘導し、「金融機関-民企智庫」という結合モデルを形成した。同様の模式は、郭心剛、高強事件にも見られ、地方金融生態における政商関係の深層的な歪曲を暴露出している。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;iii-深層原因制度の脆弱性と規制の機能不全&#34;&gt;III. 深層原因：制度の脆弱性と規制の機能不全
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;地方金融規制の長期欠如&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;浙江省は民営経済大省として、金融イノベーションが活発であったにもかかわらず、規制体制が追従しなかった。朱從玖、潘広恩などの官员が長年にわたり地方金融政策を主導し、「运动员」と「裁判員」の両方の役割を果たしたため、規制は形骸化した。例えば、潘広恩が金融办で職務を務めた期間中、企業への融資や株式改革を違法に介入したが、有効な制約を受けることはなかった。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;金融機関の内部統制の失效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;四大行浙江分行の内部監視メカニズムは形骸化していた。馮建龍が農行浙江分行行長を務めた時期、親族がシステム内で急速に昇進し、「一言堂」信貸承認現象が突出した。沈榮勤が推行的「员工关爱计划」は表面上福利であると見なされたが、実際には基层従業員を統制することで権力を巩固し、腐敗行為を隠蔽していた。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外部監視メカニズムの薄弱&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;跨省監察モデルの启用（如沈榮勤案由辽宁省监委办理）は、地方保護主義が反腐プロセスを阻害していたことを示している。さらに、金融機関と民企の複雑な股权関係（如浙商銀行前十大贷款客户中半数为房企）によりリスク伝導が隠蔽され、伝統的な規制手段が穿透することが困難であった。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;四後続の影響規制強化と業界の再構築&#34;&gt;四、後続の影響：規制強化と業界の再構築
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;反腐常態化と制度の堵漏&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;広域監督と穿透的規制&lt;/strong&gt;: 中央紀委は異地办案（異地域での事件処理）を採用し、地方の保護網を断ち切るとともに、審査範囲を在職中の行為から退職後の利益連鎖に拡大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技術反腐落地&lt;/strong&gt;: 浙江省が信貸承認においてAI風控モデルを試験的に導入し、人情贷（人情味のある融資）や政商贷（政治と商業を結びつけた融資）を自動的に識別し、源流から権力蓄積を阻止。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;離職从业制限&lt;/strong&gt;: 浙江省が金融高管の離職リストを作成し、銀行行長が退職後3年間、関連企業での就任を禁止することで、権力の期権化チェーンを切断。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;金融生態系の再構築&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;金融システムリスクの清算&lt;/strong&gt;: 浙商銀行、杭州銀行などの機関が幹部の摘発を受けて内部整頓を開始し、不動産ローン比率が高い問題（例：浙商銀行の不動産不良率が2.48%に達する）をめぐる業務転換を迫られた。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;民企融資環境の最適化&lt;/strong&gt;: 反腐活動後、浙江省は「浙科贷」（浙科金融）などの政策を打ち出し、2024年に3万2千社以上のテクノロジー型中小企業に4500億元もの融資を提供し、金融が実体経済の本源に戻ることを促進。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;社会的警示効果&lt;/strong&gt;
四大行の浙江省支店の原行長たちが集団で失脚したことで、「退職は安全」という幻想を打ち砕き、「反腐に対するゼロ忍耐、無盲区」という信号を送った。この事件は全国の金融システムに鏡鑑（模範）を提供し、権力制約を強化し、規制体系を改善することで、金融安全を守る必要があることを示唆している。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論
&lt;/h3&gt;&lt;p&gt;浙江金融圏崩壊事件は、本質的には地方金融権力の長期的な失控が集中して爆発したものです。この嵐は、多くの「金融蛀虫」を排除するだけでなく、規制モデル、制度設計、および業界生態における深刻な変革を促しました。今後、金融イノベーションとリスク管理のバランスをどのように取るか、そして「親清」政商関係をどのように構築するかは、浙江および全国の金融分野において継続的に探求される課題となるでしょう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Git 子モジュール提交記録の消失</title>
        <link>https://ttf248.life/ja/p/git-submodule-merge-history-lost/</link>
        <pubDate>Mon, 02 Jun 2025 16:44:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-submodule-merge-history-lost/</guid>
        <description>&lt;p&gt;ローカルにGitリポジトリがあり、そのサブモジュールがプル時に一時ブランチになっている。私はその一時ブランチでいくつかのコードをコミットし、その後サブモジュールを&lt;code&gt;main&lt;/code&gt;ブランチに戻した。しかし、これらのコミットされたコードが見つからず、&lt;code&gt;main&lt;/code&gt;ブランチで見つけることができない。また、その一時ブランチの履歴も見つけられない。&lt;/p&gt;
&lt;h2 id=&#34;ソリューション&#34;&gt;ソリューション
&lt;/h2&gt;&lt;p&gt;Git サブモジュールで一時的なブランチにコミットし、&lt;code&gt;main&lt;/code&gt; ブランチに戻すとこれらのコミットが見つからなくなることがあります。この状況を解決するには、以下の手順に従ってください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;コミット履歴の確認:&lt;/strong&gt; サブモジュールのディレクトリに移動し、reflog を使用して失われたコミットを見つけます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新しいブランチを作成してコミットを保存:&lt;/strong&gt; 失われたコミットに基づいて新しいブランチを作成します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;メインブランチへのマージまたはcherry-pick:&lt;/strong&gt; コードをメインブランチに統合します（マージするか、cherry-pickを使用して特定のコミットを選択）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下は具体的な操作手順です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# サブモジュールのディレクトリに移動
cd path/to/your/submodule

# reflog で HEAD の変更履歴を確認（未関連ブランチのコミットも含む）
git reflog

PS F:\dev\notebook\scripts\hugo-content-suite&amp;gt; git reflog
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{0}: checkout: moving from c8d070651310e90d283cb64d98da088c5fe05e73 to main
c8d0706 HEAD@{1}: commit: feat: Markdown 記号の用法ドキュメントを追加、詳細な構文例と効果のデモを提供
48250f5 HEAD@{2}: commit: feat: 文章翻訳プレビュー機能を削除し、翻訳プロセスを簡素化
b8280b6 HEAD@{3}: commit: feat: 絶対パスを取得する機能を追加し、相対パスを絶対パスに変換をサポート
92c354b HEAD@{4}: commit: fix: 文章スキャンロジックの修正、絶対パスを使用してスキャンするようにする
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{5}: checkout: moving from main to de05175d4ec0828e3ae95d726b09dfff18f67a23
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{6}: clone: from https://cnb.cool/ttf248/hugo-content-suite.git

# 失われたコミットに基づいて新しいブランチを作成（例：456def を使用）
git checkout -b saved-work 456def

# メインブランチに戻る
git checkout main

# 保存した作業をメインブランチにマージ（または cherry-pick で特定のコミットを選択）
git merge saved-work
# または
git cherry-pick 456def

# 親プロジェクトディレクトリに戻り、サブモジュールの更新をコミット
cd ..
git add path/to/your/submodule
git commit -m &amp;quot;Update submodule to include new changes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;主要操作手順&#34;&gt;主要操作手順
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git reflog&lt;/strong&gt;: HEADのすべての履歴を表示し、ブランチに関連付けられていないコミットも含む&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git checkout -b&lt;/strong&gt;: 任意のコミットから新しいブランチを作成し、作業を保存する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git merge/cherry-pick&lt;/strong&gt;: 保存されたコミットをターゲットブランチに統合する
reflogで記録が見つからない場合は、&lt;code&gt;git fsck --lost-found&lt;/code&gt;を使用して孤立したコミットを探す必要があるかもしれませんが、これは非常にまれなケースです。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>GitHub Pages の Easter Egg: 複数の Pages をデプロイ</title>
        <link>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;最近、体内時計が少し乱れていて、夜2時過ぎまでGitHub Pagesのデプロイに苦戦していました。
仕事が終わってからようやく食事を摂り、すぐに寝ようとすると、食べ終わって帰宅して8時半頃になり、眠くて困って、目を閉じるとそのまま眠くなってしまい、目が覚めるともう凌晨2時でした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;まだ起動もしていないうちに消滅した分類：AI 研習所&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;フラグフラッグ&#34;&gt;フラグ（フラッグ）
&lt;/h2&gt;&lt;p&gt;昨日、話していなかった「未熟な」フロントエンドを批判していたのに、今日はフロントエンドではなく、UI/UXの体験を追求している。&lt;/p&gt;
&lt;h2 id=&#34;プロジェクト&#34;&gt;プロジェクト
&lt;/h2&gt;&lt;p&gt;弊社の古くからの友人、&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt; が参上します。
そうです、以前の選株プロジェクトを、全体の構造を再構築し、その後のAIプログラミング関連の内容はこのプロジェクト下に集約されます。&lt;/p&gt;
&lt;h2 id=&#34;複数の-pages-をデプロイする&#34;&gt;複数の Pages をデプロイする
&lt;/h2&gt;&lt;p&gt;プロジェクトは国内で &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/ai-coding-demo&lt;/a&gt; でホストされており、周知の通り、国内では Pages の公開をサポートしていません。そのため、海外の GitHub 上に公開する必要があります。&lt;/p&gt;
&lt;p&gt;ブログは海外の GitHub に公開されます。まだ試したことがありませんが、複数のプロジェクトを Pages にデプロイすること、そして現在の処理しているプロジェクトが従来のブログサイトではないこと（単に多くのドキュメントといくつかの静的な HTML デザイン稿が含まれているだけです。）もわかります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;その通り、このページは私が初めてクリックしたところ、複数のプロジェクトを Pages にデプロイすることはブログの公開に影響を与えないこと、そしてブログのドメインの下に新しいパスが追加されることを発見しました。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ai-coding-demo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ttf248.life/ai-coding-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここまできたら、完璧だと叫びました。&lt;/p&gt;
&lt;h2 id=&#34;ai-研習社&#34;&gt;AI 研習社
&lt;/h2&gt;&lt;p&gt;昨日、新しい分類を作成したことをきっかけに、AIを活用して多くのコンピュータ科目の学習を進めようと考えました。例えば、アルゴリズムやLeetCodeのプログラミング問題集などです。&lt;/p&gt;
&lt;p&gt;毎回の学習記録をブログに公開し、知識ベースを形成します。新しい分類として「AI 研習社」を作成しました。&lt;/p&gt;
&lt;p&gt;現在見られるように、異なるコースごとにそれぞれプロジェクトを作成し、学習ノートは各プロジェクトのReadme.mdファイルに記述しています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>慢性疾患、華やかなりし世相に眼移り</title>
        <link>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</link>
        <pubDate>Mon, 26 May 2025 23:54:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</guid>
        <description>&lt;p&gt;長年にわたりバックエンド開発に注力してきましたが、最近は &lt;code&gt;AI&lt;/code&gt; プログラミングを試したり、少しフロントエンド関連のことも取り組むようになりました。しかし、この間の苦労の中で、自分には昔からある古傷—「繁華なものに目を奪われる」—に気づきました。&lt;code&gt;AI&lt;/code&gt; を使ってフロントエンドインターフェースを実現しようとするのですが、実際にはそのような試みが現在の仕事に大きな実用的な助けになりませんし、むしろ時間を浪費してしまいます。&lt;/p&gt;
&lt;h2 id=&#34;ai-の適用シナリオ&#34;&gt;AI の適用シナリオ
&lt;/h2&gt;&lt;p&gt;小規模なプロジェクトにおいては、AI ツールが大きな役割を果たすことができ、特に独立性が高く、システムとの結合度が低く、ビジネスロジックが単純な関数を作成する際に非常に役立ちます。これらのタスクは通常、明確な入力と出力があり、文脈依存が少ないため、現在の AI 支援プログラミングの能力範囲に最適です。&lt;/p&gt;
&lt;p&gt;しかしながら、複雑なシステムアーキテクチャや深いビジネスロジックに対処する場合、AI の限界が現れ始めます。それは、プロジェクトの実際のニーズから乖離した、見かけ上は合理的だが実際には不適切なコードを生成したり、デバッグが困難な潜在的な問題を導入したりする可能性があります。これらのシナリオにおいては、AI は補助ツールとして、完全なコード生成器に依存することなく使用されるべきです。生成されたコードは厳格なレビューとテストを受け、実際の要件を満たしていることを確認する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;誤りと学習の代償&#34;&gt;誤りと学習の代償
&lt;/h2&gt;&lt;p&gt;AI を使ってフロントエンドコードを生成しようとした際、多くの課題に直面しました。フロントエンドは私の馴染みのない分野であるため、問題解決には時間と労力がかかりました。プロンプトを調整して AI にコードを書き直しても、どうしても低レベルのエラーが発生してしまうのです。このような試行錯誤は時間と労力を浪費するだけでなく、現在の私のエネルギーはバックエンドのビジネスロジックに集中すべきだと痛感させられました。&lt;/p&gt;
&lt;p&gt;週末に完成させたプロジェクトを振り返ってみると、バックエンド開発とユーザーインタラクションロジックに焦点を当て、コンソールから機能を実装することが、現状で最も効率的な選択であると確信します。より多くの時間とエネルギーが手に入ったら、フロントエンドの知識を体系的に学ぶ方が良いかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;フロントエンド学習の計画&#34;&gt;フロントエンド学習の計画
&lt;/h2&gt;&lt;p&gt;フロントエンド技術スタックは複雑で多様であり、短期間で習得するのは現実的ではありません。まずは、Vue.jsやReact.jsなどのフレームワークを選択し、そのコアな概念と使用方法を深く学ぶことを計画しています。基礎知識を習得した後で、AIを活用してフロントエンドコードを生成することで、不慣れによる誤りや時間の浪費を防ぐことができます。&lt;/p&gt;
&lt;p&gt;まとめると、現在の段階ではバックエンド開発に重点を置き、着実にコアスキルを向上させることに注力します。その時が来るまで、フロントエンドとAIの組み合わせを探求することは控え、より大きな成果を得られる可能性があります。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Claude4のリリース、開発を試す：hugoタグ、超リンク翻訳アシスタント</title>
        <link>https://ttf248.life/ja/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;本サイトはHugoで開発されていますが、筆者自身は常に中国語のタイトルを使用しており、その結果、生成される文章の超リンクが使いにくい状態でした。つまり、送信する際に、中国語の文字が超リンク内で%E4%BD%A0%E5%A5%BDのような形式にエスケープされてしまうため、見た目が良くありません。設定でslugを設定することで解決できますが、毎回手動で設定する必要があり、非常に面倒でした。
そこで、Claude4を使って翻訳アシスタントを開発し、中国語のタイトルを自動的に英語のslugに変換し、文章中に超リンクを追加することを試みました。これにより、手動での設定を回避できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claude4はマジで最高！文脈理解能力が大幅に向上し、複雑なタスクの処理効率も飛躍的に向上しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;プロジェクトアドレス&#34;&gt;プロジェクトアドレス
&lt;/h2&gt;&lt;p&gt;国内プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
国外プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;コードの実装&#34;&gt;コードの実装
&lt;/h2&gt;&lt;p&gt;まず、実装の思路について説明します。すべての文章をスキャンし、タグ情報と記事タイトルを抽出した後、ローカルの大規模言語モデル（例：gemma-3-12b-it）を呼び出して翻訳します。&lt;/p&gt;
&lt;p&gt;実際の開発において、前世代の大規模言語モデルと比較して、&lt;code&gt;Claude4&lt;/code&gt; はいくつかの顕著な点を発揮しました。機能要件が多いため、&lt;code&gt;Claude4&lt;/code&gt; はインタラクティブメニューを自動的に設計し、さまざまな使用シナリオを考慮しました。例えば、タグ処理に関しては、&lt;code&gt;Claude4&lt;/code&gt; はタグの統計と分析だけでなく、分類統計もサポートし、さらに&lt;strong&gt;ラベルのない文章&lt;/strong&gt;を検出することも可能です。また、プレビュー機能やタグページ生成機能も提供しています。&lt;/p&gt;
&lt;p&gt;ローカルの大規模言語モデルとの連携、翻訳キャッシュの追加、大規模なコードのリファクタリングなど、&lt;code&gt;Claude4&lt;/code&gt; はすべて一度に完了し、ほとんど問題がありませんでした。プロジェクト規模は小さくても、多くの小さな機能を含んでいました。以前の開発プロセスでは、大規模言語モデルが前の内容を忘れてしまうことがよくありましたが、今回の &lt;code&gt;Claude4&lt;/code&gt; は非常に優れており、&lt;strong&gt;ほぼコンテキストを忘れることなく動作しました&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要するに、スマート性が向上し、今後の開発には &lt;code&gt;Claude4&lt;/code&gt; をより多く使用し、日常的なコーディングの主力モデルとして活用していく予定です。&lt;/p&gt;
&lt;h2 id=&#34;翻訳キャッシュ&#34;&gt;翻訳キャッシュ
&lt;/h2&gt;&lt;p&gt;この注文に関する説明では、大規模モデルの呼び出し回数を減らすだけでなく、実際に12Bモデルをローカルで実行すると効率が非常に高く、時間ロスもありません。しかし、毎回大規模モデルを呼び出す場合は、やはり少し遅くなります。また、文章のリンクを固定するために、全量更新を実行した場合、文章のタイトルが長いため、稀に2回の翻訳結果が異なり、リンクが変わってしまうという状況が発生します。これは非常に困ります。&lt;/p&gt;
&lt;h2 id=&#34;機能最適化&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;プロジェクト全体を &lt;code&gt;Claude4&lt;/code&gt; に引き渡して、最適化の余地を分析し、以下の提案を得ました：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;外部化の設定 - メンテナンス性と柔軟性を向上
構造化ログ - 問題のトラブルシューティングと監視が容易になる
パフォーマンスモニタリング - システムの状態を把握する
ユーザーエクスペリエンス - プログレスバーなどの視覚的なフィードバック
エラー処理 - より包括的な例外処理メカニズム
コード整理 - より明確なモジュール分割
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードをレビューしたところ、問題点は一切なく、例えば設定ファイルについては、元のコードから設定を変換し、デフォルト設定に変換した後、設定ファイルを読み込む際に、対応する設定ファイルが存在しない場合に自動的にデフォルト設定ファイルを生成することで、ユーザーの操作ミスを防いでいました。
要件：翻訳文の正体を翻訳する際に、翻訳効率を動的に計算し、残りの時間を予測して、関連情報をコンソールに出力しました。現在、文章の文字数を取得し、各行の翻訳時に現在の翻訳文字数、時間、100文字あたりの翻訳時間を適合計算しています。同時に、文章全体の翻訳残り時間を推定します。
コードが完了した後、新しい驚きを発見しました。翻訳効率の統計情報がリアルタイムで大量に表示されますが、無制限にスクロールダウンすることはありませんでした。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;原文を英語に翻訳中（合計 7163 文字）...
翻訳する必要がある行数が 53 行検出されました。
  [1/53] Stage1/6 [░░░░░░░░░░░░░░░░░░░░░░░░░] 1.9% 354 文字の翻訳...
    ✅ 完了 (3.1秒) | API呼び出し #1
    ✅ 完了 (1.5秒) | API呼び出し #2
    ✅ 完了 (0.9秒) | API呼び出し #3
    ✅ 完了 (0.2秒) | API呼び出し #4
    ✅ 完了 (1.0秒) | API呼び出し #5
    ✅ 完了 (1.0秒) | API呼び出し #6
    ✅ 完了 (0.2秒) | API呼び出し #7
    📊 進捗: 行の 13.2% (7/53) | 文字の 12.9% (925/7163) 114.6 文字/秒 📊
    ⚡ 効率：リアルタイム 76.4 | 平均 117.9 | 最近 109.0 | ステージ 113.6 文字/秒 📊
    🎯 正確度: 100.0% (7/7) | 残り: 46行 7 秒] 9.4% 110 文字の翻訳...
    ⏱️ 残りの推定時間: 55秒 | 予想完了時間: 00:10:19 8秒] 11.3% 114 文字の翻訳...
    💾 处理速度：3211.3 行/分钟 | 总用时：8秒] 13.2% 16 文字の翻訳...
  [8/53] Stage1/6 [███░░░░░░░░░░░░░░░░░░░░░░] 15.1% 166 文字の翻訳...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以前、プログラムを制御するコードはあまり書かれていませんでしたが、どのように実装されているのか知りたくて、コードを調べてみました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// キャッシュクリアと再表示（動的更新効果）
if translationCount &amp;gt; 1 {
   fmt.Print(&amp;quot;\033[6A\033[K&amp;quot;) // 上に 6 行移動し、内容をクリア
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;パフォーマンス統計メニュー&#34;&gt;パフォーマンス統計メニュー
&lt;/h3&gt;&lt;p&gt;新たに作成された&lt;strong&gt;パフォーマンス統計メニュー&lt;/strong&gt;は、私自身が設計したものでも、これほど完璧とは言えない。&lt;/p&gt;
&lt;p&gt;📊 パフォーマンス統計：
🔄 翻訳回数：360
⚡ キャッシュヒット率：1.4% (5/365)
⏱️ 平均翻訳時間：315.927234ms
📁 ファイル操作：73
❌ エラー回数：0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データマイニング&lt;/li&gt;
&lt;li&gt;ディープラーニング&lt;/li&gt;
&lt;li&gt;ニューラルネットワーク&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;=== ブログ管理ツール ===&lt;/p&gt;
&lt;p&gt;🚀 コア機能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全ブログの処理をワンクリックで実行 (完全なブログ処理フロー)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;📝 コンテンツ管理
2. タグページを生成
3. アーティクルスラッグを生成
4. 記事を多言語バージョンに翻訳&lt;/p&gt;
&lt;p&gt;💾 キャッシュ管理
5. キャッシュの状態を確認
6. 全量翻訳キャッシュの生成
7. 翻訳キャッシュをクリア&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;プログラム終了&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>計画生育政策の多面的な影響：社会構造から経済・政治への深層変革</title>
        <link>https://ttf248.life/ja/p/china-family-planning-policy-impacts/</link>
        <pubDate>Sat, 24 May 2025 02:36:49 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/china-family-planning-policy-impacts/</guid>
        <description>&lt;p&gt;中国の計画的な人口抑制政策は、人口増加を制限すると同時に、大家族主義的な発展を抑え込み、伝統的な社会構造を揺るがし、家族企業や政壇の有力な家族勢力を抑制しました。これと比較して、韓国の財閥やインドの家族壟断を見ると、その独自性が浮かび上がります。現在、出産制限が緩和され、低出生率といった課題に直面していますが、同時に新たな垄断リスクにも警戒する必要があります。多方面からのバランスを模索していく必要があります。&lt;/p&gt;
&lt;h4 id=&#34;一人口抑制と家族式発展の好対照&#34;&gt;一、人口抑制と家族式発展の好対照
&lt;/h4&gt;&lt;p&gt;計画生育政策は、中国が継続してきた近40年間の基本国策であり、その直接的な成果は顕著である。データによると、1978年から2007年にかけて、中国の人口自然増加率は12‰から5.2‰に低下し、少生4億余人となった。人口占める世界の割合は22.2%から20.1%に減少した。このような人口成長率の急激な減退は、中国社会における家族構造を深く再構築した。家族企業を例にとると、計画生育政策が実施された後、企業主が子供を産む数は著しく低下した：政策前では3児以上の割合が40.63%であったが、政策後には18.46%に激減し、独生子が女子として育つ割合は6.25%から32.31%へと上昇した。このような構造的な変化は、家族企業が選択できる内部の後継者範囲を大幅に縮小させ、客観的に家族企業の世代交代能力を抑制している。&lt;/p&gt;
&lt;p&gt;韓国とインドの状況と比較すると、その差は顕著である。韓国は厳格な計画生育を実施しなかったものの、出生率は長年にわたり低迷（2023年には0.7）していたが、財閥グループはクロス持股や相続税回避などの手段を通じて、国家経済の命脈を依然として牢として握り続けている。5大財閥の総売上高は韓国GDPの超50%を占め、サムスングループだけでも全国GDPの20%に相当する。一方、インドでは異なった様相が見られる：79%の経済産出は家族企業が貢献し、6大複合体が电信や钢铁などの重要な分野を支配しており、20社のトップ企業が全国企業の利益の80%を稼ぎ出している。このような違いの中核は、中国の計画生育政策が家庭規模を制限することで、家族企業拡大の人材基盤を源泉的に弱体化させたことにある。一方、韓国とインドは政策環境の違いにより、家族勢力が経済領域に継続して浸透したのである。&lt;/p&gt;
&lt;h4 id=&#34;二寡占抑制と社会構造転換&#34;&gt;二、寡占抑制と社会構造転換
&lt;/h4&gt;&lt;p&gt;計画生育政策が経済領域に及ぼす影響は、特に寡占現象の抑制という点において顕著である。中国の家族企業は、女性数の減少により、韓国・インド型の財閥集団を形成することが困難であった。韓国の例では、財閥は「循環出資」を通じて家族による支配権を維持し、三星グループの家族はグループ全体の2%の株式しか保有しておらず、複雑な股权構造によって全体を掌握していた。一方、中国においては、計画生育後に家族企業は一般的に「子承父業」の困境に直面し、職業经理人や株式の多元化改革を余儀なくされた。澎湃新聞の研究によると、計画生育後、家族企業の女性後継者比率は13.85%から34.21%へと上昇し、また後継者の学歴は大幅に向上しており、学士以上の学位を持つ割合は43.75%から98.46%へと増加した。このような転換は、完全に家族による支配を排除したわけではないものの、単一の家族による市場支配の可能性を著しく低減させた。&lt;/p&gt;
&lt;p&gt;社会構造レベルにおいては、計画生育政策が伝統的な家族核心モデルの解体を加速させた。中国における家庭規模は、1982年の4.41人/戸から2020年には2.62人/戸へと縮小し、小型化された家庭は、経済、教育、社会支援などの面で家族の機能を弱体化した。これに対しインドでは、その家庭規模が4人程度に維持され、カースト制度と家族勢力が深く結びついているため、社会流動性が低い状態が続いている。中国における家庭構造の転換は、個人主義の発達のための空間を創出しており、2023年には中国の単身成年人口が2.4億人に達し、消費市場には「一人経済」台頭のトレンドが見られる。このような変化は、家族経済の影響力をさらに希薄化させている。&lt;/p&gt;
&lt;h4 id=&#34;iii-政治分野における権力分散化&#34;&gt;III. 政治分野における権力分散化
&lt;/h4&gt;&lt;p&gt;計画生育政策は、政治生態に深遠な影響を及ぼした。伝統的に、家族勢力は血縁や姻親関係を通じて地方政治に浸透してきた。例えば、河南省新野県において161の政治家族がほぼすべての政府部門を支配し、副科級以上の幹部の中で20%が「官二代」（官僚の子）であった。しかし計画生育政策の実施により、家庭規模が縮小したため、家族ネットワークの拡大が制限された。北京大学の研究では、計画生育によって役人の子供たちの数が減少し、家族政治ネットワークの複雑さが著しく低下したことが示されている。さらに、政策を推進した教育の普及（1982年の一人当たり受教育年数5.2年から2023年には10.9年に向上）は社会的な流動性を促進し、家族勢力が政治資源に対する独占を弱体化させた。&lt;/p&gt;
&lt;p&gt;韓国とインドと比較すると、韓国の財閥と政治との深い結びつき（三星グループの高官と政府の金銭取引など）や、インドのカースト制度下における家族政治の世襲は、中国政策の独自性を浮き彫りにする。中国は計画生育政策を通じて、客観的に権力の世襲の可能性を減少させた。地方政治の中には依然として家族現象が存在するものの、全体的な傾向としては権力構造の分散化が進んでいる。2025年の全国人民代表大会（全会）期間中、政協委員の一人が「人口と計画生育法」を「人口と生育法」に改名し、完全な出生の自由化を提案したことは、将来の政治生態の変化にさらなる影響を与える可能性がある。&lt;/p&gt;
&lt;h4 id=&#34;四政策調整後の課題と機会&#34;&gt;四、政策調整後の課題と機会
&lt;/h4&gt;&lt;p&gt;2016年の全面二孩政策、2021年の三孩政策の実施は、中国の生育政策における重大な転換を意味する。しかし、その効果は限定的であり、2022年の出生率はわずか1.18で、世代交代水準（2.1）を大きく下回っている。&lt;/p&gt;
&lt;p&gt;放開された生育に対する家族企業への影響は二面性を示している。一方、一部の起業家が多胎児を通じて家族传承能力を高める可能性がある（例えば、浙江娃哈哈グループの宗慶後の娘である宗馥莉が独身女として後継者となるケースなど）。他方で、高額な育児コスト（一线都市で子供を18歳まで育てると平均100万元かかる）と職業女性の生育意欲低下により、家庭規模の拡大は制限されている。&lt;/p&gt;
&lt;p&gt;経済分野においては、放開された生育が新たな寡占形態を生み出す可能性がある。三孩政策は母婴、托育などの業界における集中度を高め、2025年の乳幼児托育市場規模は1621.3亿元と予測されており、大手企業が并购を通じて中小企業を統合し、CR5集中度を超える55%となっている。このような集中度は効率をもたらす可能性がある一方で、新たな寡占リスクに警戒する必要がある。政府は生育促進と市場集中防止のバランスを取り、反垄断法による規制強化や育児補助金（例えば、杭州三孩家庭が毎月3000元をミルク補助として受給するケースなど）を通じて家計負担を下げるなどの措置を講じる必要がある。&lt;/p&gt;
&lt;p&gt;政治分野においては、放開された生育が家族勢力に微妙な影響を与える可能性がある。短期的に伝統的な家族政治ネットワークを回復することは困難だが、長期的に見ると多子世帯が地方政治において新たな影響力を形成する可能性がある。したがって、干部の選抜メカニズムの改善と監督強化（例えば、干部の親族任用回避制度の構築など）は、権力世襲を防ぐための重要な鍵となる。&lt;/p&gt;
&lt;h4 id=&#34;五国際鏡鑑と未来展望&#34;&gt;五、国際鏡鑑と未来展望
&lt;/h4&gt;&lt;p&gt;韓国およびインドの経験は、家族勢力の親和性・敵対性と政策誘導が密接に関連していることを示唆する。韓国は財閥育成によって経済発展を遂げたが、同時に社会公平の犠牲となった。インドは効果的な政策による家族支配の抑制に失敗し、貧富格差が拡大した。中国の計画生育政策は人口コントロールを達成すると同時に、家族勢力の拡大を抑制したが、高齢化の加速や労働力不足といった問題も引き起こした。&lt;/p&gt;
&lt;p&gt;未来において、中国は人口政策と社会経済発展の間で新たなバランスを見出す必要がある。一方では、出産支援策（産休の延長、共配役托育施設の建設など）を通じて出生率を高めるべきである。他方では、家族企業の資本操作による新たな独占を防止するため、反垄断取締りを強化する必要がある。政治面においては、地方民主主義の構築と監督メカニズムの改善を通じて権力の透明性を確保することが重要となる。&lt;/p&gt;
&lt;p&gt;結論として、計画生育政策は中国社会変革の重要な推進力であり、その影響は人口領域を超えて広範である。それは家族構造、経済モデル、そして政治生態を再構築し、中国が韓印式に陥る家族支配の罠を回避するための道筋を提供した。政策の調整に伴い、新たな人口格局下で効率と公平、自由と秩序のバランスを取ることこそが、中国が直面する長期的な課題となるだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AIを使いすぎると、後遺症のようなものがある。</title>
        <link>https://ttf248.life/ja/p/ai-overuse-side-effects/</link>
        <pubDate>Wed, 14 May 2025 19:39:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-overuse-side-effects/</guid>
        <description>&lt;p&gt;新しい「AI 灵感碰撞坊」を立ち上げたことで、様々なものが溢れてしまい、AIを使って記録したり、発信したりするものが増え続けていますが、静かに自分自身で考え込むようなものは減ってきているようです。今後はこの欄の出力をある程度コントロールし、月刊形式にまとめるのが良いかもしれません。毎月1本の内容を公開すればよいでしょう。&lt;/p&gt;
&lt;p&gt;これはまるで、一種の副作用のようなもの、あるいは後遺症と言えるかもしれません。効率は上がっていますが、思考の深さや幅は縮んでしまっているように感じます。&lt;/p&gt;
&lt;h2 id=&#34;効率向上否定できない&#34;&gt;効率向上：否定できない
&lt;/h2&gt;&lt;p&gt;以前、ブログのコーナー「魚の七秒鐘見聞」はあまりメンテナンスされていませんでした。いくつかの話題事件を放置し、インターネット検索や記録整理を行わずにいたためです。しかし、様々なAIツールが登場し、大枠を整理するだけで、AIが自動的に関連するイベントを検索・記録し、必要な文章を生成したり、簡単なフォーマット調整を行うことができます。&lt;/p&gt;
&lt;p&gt;これはまさに怠惰な人にとっての福音であり、効率は大幅に向上しました。さらには、執筆やコーディングにおいても同様です。以前はAPIインターフェースドキュメントの詳細な読み込みが必要でしたが、現在はAIがそれを代わりに行うため、非常に効率的です。APIの習得は「肉体労働」であり、「知的労働」ではありません。AIにこの部分を任せるのが最適です。&lt;/p&gt;
&lt;h2 id=&#34;垃圾コンテンツ&#34;&gt;垃圾コンテンツ
&lt;/h2&gt;&lt;p&gt;多くの稿子で、内容の質が低いと言わざるを得ません。読み応えがなく、煙火の息吹がないという点で、以前私が好まなかったスタイルです。まるで蝋を噛むようなものです。&lt;/p&gt;
&lt;p&gt;別の角度から言えば、AI生成コンテンツは、まさに流水線のようなもので、魂が欠けていると感じられます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新時代のインターネットゴミ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;忘却性&#34;&gt;忘却性
&lt;/h2&gt;&lt;p&gt;このタイプの稿子は、読者の状況が不明確であり、時間が経つにつれて、私の記憶も曖昧になり、つい忘れかけてしまうことがあります。&lt;/p&gt;
&lt;p&gt;同様の問題は、コードを書く際にも発生します。コードの提交記録を振り返らずに、自分がどのように考え、なぜそう書いたのか全く思い出せないのです。特に、コードとAIが繰り返しコミュニケーションを通じて生成されたコードは、当初のアイデアとは大きく異なり、場合によっては全く異なるものになってしまうことがあります。&lt;/p&gt;
&lt;h2 id=&#34;検索&#34;&gt;検索
&lt;/h2&gt;&lt;p&gt;最近、Googleや百度を開く回数が明らかに減りました。多くの問題はAIを使って検索したり、インタラクティブな部分も検索結果も、従来の検索エンジンよりもずっと良いからです。
現在では、まだ生きているかどうか分からない&lt;code&gt;bing ai&lt;/code&gt;を追悼しましょう。これは大手企業の中で最初に公開された、インターネットに接続して検索できるAIツールです。
Googleの使用頻度が減り、&lt;code&gt;stackoverflow&lt;/code&gt;へのアクセス回数も減りました。多くの問題は直接AIに質問するだけで済みます。このサイトも時代の淘汰にさらされるでしょう。&lt;/p&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに
&lt;/h2&gt;&lt;p&gt;筆記がメンテナンスしているブログですが、元々アクセス数は少なかったこともあり、現在はさらに期待していません。むしろ、自分宛の記録場所という性格になっています。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>フォークのレポジトリにプルリクエストをマージする</title>
        <link>https://ttf248.life/ja/p/merge-pullrequest-to-forked-repo/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/merge-pullrequest-to-forked-repo/</guid>
        <description>&lt;p&gt;&lt;code&gt;github-readme-stats&lt;/code&gt; は、GitHub の個人プロフィールに関する統計情報を生成するツールです。ユーザーの GitHub 個人プロフィールの様々な統計情報やグラフの表示を可能にします。多様なカスタマイズオプションを提供し、ユーザーのニーズに合わせて調整できます。&lt;/p&gt;
&lt;p&gt;筆者はリポジトリ管理の習慣として、プロジェクトごとにグループ化を行っていますが、GitHub はリポジトリのグループ化をサポートしていないため、異なる組織に分割することで実現しています。&lt;code&gt;github-readme-stats&lt;/code&gt; の最新ブランチでは、異なる組織のリポジトリ統計のクロスオーバーに対応していません。そこで、対応するコードをマージしたブランチをフォークしました。&lt;/p&gt;
&lt;h2 id=&#34;最終結果&#34;&gt;最終結果
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;プルリクエスト-元のurl&#34;&gt;プルリクエスト 元のURL
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;組織のリポジトリからのデータを含める機能を追加&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;上流のプルリクエストをフォークのリポジトリにマージする&#34;&gt;上流のプルリクエストをフォークのリポジトリにマージする
&lt;/h2&gt;&lt;p&gt;ある &lt;strong&gt;プルリクエスト (PR)&lt;/strong&gt; をあなたの &lt;strong&gt;フォークしたリポジトリ&lt;/strong&gt; にマージするには、いくつかの方法があり、あなたが以下のいずれかを達成したいかによって異なります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;上流（upstream）リポジトリ&lt;/strong&gt; から PR をあなたのフォークにマージするか、&lt;/li&gt;
&lt;li&gt;他の人のフォークから PR をあなたのフォークにマージするか、&lt;/li&gt;
&lt;li&gt;あなたのフォークで作成された PR (例えば、他の人があなたにフォークして PR を提起した場合) をマージする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;まず、最も一般的なシナリオを説明します：&lt;strong&gt;フォークしたリポジトリがあり、上流の PR をあなたのフォークにマージしたい場合&lt;/strong&gt;。操作手順は以下のとおりです👇&lt;/p&gt;
&lt;h3 id=&#34;-方法１コマンドライン方式最も汎用的&#34;&gt;✅ 方法１：コマンドライン方式（最も汎用的）
&lt;/h3&gt;&lt;h4 id=&#34;ステップ-1自分のフォークをクローンする&#34;&gt;ステップ 1：自分のフォークをクローンする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/あなたのユーザー名/リポジトリ名.git
cd リポジトリ名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-2upstream-元のリポジトリのurl-を追加&#34;&gt;ステップ 2：upstream (元のリポジトリのURL) を追加
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/原作者のユーザー名/リポジトリ名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-3上流のprブランチをリポジトリに取得する&#34;&gt;ステップ 3：上流のPRブランチをリポジトリに取得する
&lt;/h4&gt;&lt;p&gt;マージしたいPRの番号（例：PR #123）を見つけます。&lt;/p&gt;
&lt;p&gt;以下のコマンドでそのPRのコードをリポジトリに取得できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ4ブランチを切り替えマージする&#34;&gt;ステップ4：ブランチを切り替え、マージする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # またはあなたのターゲットブランチ
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すべて正常であれば、GitHub リポジトリにフォークした場所にプッシュできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;-方法二github-ウェブインターフェースシンプルだが限定的&#34;&gt;✅ 方法二：GitHub ウェブインターフェース（シンプルだが限定的）
&lt;/h3&gt;&lt;p&gt;GitHub のウェブ上で特定のプルリクエスト (PR) が上位のレポジトリに対するものである場合、以下の手順を実行できます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;その PR ページにアクセスします。&lt;/li&gt;
&lt;li&gt;右上部の「&lt;strong&gt;Commits&lt;/strong&gt;」または「&lt;strong&gt;Files changed&lt;/strong&gt;」をクリックし、この PR がどのブランチに基づいて作成されているかを確認します。&lt;/li&gt;
&lt;li&gt;あなたのフォークページで新しいブランチを作成し、手動で PR のコミットを cherry-pick します（Git に関する知識が必要です）。&lt;/li&gt;
&lt;li&gt;または、「&lt;strong&gt;Open in GitHub Desktop&lt;/strong&gt;」をクリックして、GUI ツールを使用してマージします。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;-他人があなたのフォークに対してプルリクエストを送信した場合&#34;&gt;🚀 他人があなたのフォークに対してプルリクエストを送信した場合
&lt;/h3&gt;&lt;p&gt;プルリクエストのページに直接移動し、「&lt;strong&gt;Merge pull request&lt;/strong&gt;」ボタンをクリックしてください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;具体的な状況（例えば、PRリンク、ウェブインターフェースを使用しているかコマンドラインを使用しているか）に応じて、ステップバイステップでデモンストレーションが必要ですか？ または、具体的なリンクを提供していただければ、最も簡単な方法を分析します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git での履歴記録におけるコミット情報</title>
        <link>https://ttf248.life/ja/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;スクリプトは、Git履歴のコミットメッセージの作成者情報をまとめて変更するために使用され、&lt;code&gt;git filter-branch&lt;/code&gt;を使用してGit履歴を書き換えます。&lt;/p&gt;
&lt;p&gt;ご提供いただいたスクリプトは、Gitリポジトリの履歴コミットにおける作成者情報を一括で修正するものであり、全体的な考え方は正しいですが、&lt;code&gt;git filter-branch&lt;/code&gt; の &lt;code&gt;--env-filter&lt;/code&gt; で配列（例：&lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;）を使用すると、一部のシェル環境（例：&lt;code&gt;/bin/sh&lt;/code&gt;）では互換性の問題が発生する可能性があります。これは、配列構文がサポートされていないためです。
互換性を高めるために、配列をスペースで区切られた文字列に置き換え、&lt;code&gt;for&lt;/code&gt;ループを使用して各古いメールアドレスを反復処理することをお勧めします。以下は修正後のスクリプトの例です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このスクリプトを実行する前に、リポジトリのバックアップを作成することを強くお勧めします。これにより、予期しない問題が発生した場合に備えることができます。&lt;/li&gt;
&lt;li&gt;この操作はGit履歴を書き換えており、コミット作成者の情報を変更するため、コミットハッシュが変更される可能性があります。&lt;/li&gt;
&lt;li&gt;既に変更をリモートリポジトリにプッシュしている場合は、強制プッシュを実行する必要があります。
強制プッシュには注意し、特に複数人での共同プロジェクトでは、他のメンバーへの影響がないように慎重に行ってください。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;リポジトリ内のすべてのユニークな作成者メールアドレスの統計&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>コードを記述せず、カスタム株式選定モジュールを設計・開発する。</title>
        <link>https://ttf248.life/ja/p/design-develop-custom-stock-module-no-code/</link>
        <pubDate>Thu, 27 Feb 2025 23:20:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/design-develop-custom-stock-module-no-code/</guid>
        <description>&lt;p&gt;先月の当社では、cursorを試用しましたが、無料枠の制限により、複雑な機能開発は行わず、簡単なテストに留めました。その際に見つけたのは、Byte社も同様の製品を発表しており、両者は共通してClaude-3.5という大規模言語モデルを底で呼んでいる点でした。
Byte社の製品はTraeといい、最初にリリースされたmac版が今年2月にWindows版もリリースされました。大手企業のものは良いもので、無料でClaude-3.5を無制限に利用できるため、このモデルの性能は非常に優れています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最終的にはK線チャートの開発で詰まってしまいました。Reactの知識が全くない私には、直接的に大きなタスクであるK線チャートの開発を引き受けることはできません。より細かくタスクを分割し、開発を進めるためには、筆者がフロントエンドの基礎知識を追加し、タスクを分解する必要がありました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;発見された問題点&#34;&gt;発見された問題点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;外国製のAIモデルを使用していたため、Vue3 + Element-Plusの学習データが不足しており、Reactをフロントエンドフレームワークとして採用しました。&lt;/li&gt;
&lt;li&gt;偶発的な構文エラーが存在する可能性があり、手動での修正が必要です。&lt;/li&gt;
&lt;li&gt;一部の複雑な問題に対する解決策は、人的指導が必要となります。&lt;/li&gt;
&lt;li&gt;コード構造の最適化には、人的指導が必要です。&lt;/li&gt;
&lt;li&gt;最も時間がかかったのは、フロントエンドコードをコンテナにパッケージングすることでした。筆者は環境が全く理解されておらず、&lt;code&gt;.env.production&lt;/code&gt;や&lt;code&gt;tsconfig.json&lt;/code&gt;といった概念自体を知らなかったため、途中で助けを求める豆包（ネットでの質問サイトのユーザー）に頼らざるを得ませんでした。フロントエンドの開発 devモードとbuildモードでは、コードチェックや差異が大きく異なり、対応に苦慮しました。バックエンドのデータベースおよびサービスのコンテナスクリプトは、合計5分で完了しましたが。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AIは現状では開発効率を向上させる主な役割であり、基礎があることが最も重要です。AIがすべての問題を解決してくれるわけではありません。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;リポジトリアドレス&#34;&gt;リポジトリアドレス
&lt;/h2&gt;&lt;p&gt;タイトル通り、今回は手を動かさず、AIと雑談して、自選株モジュールを設計・開発してみます。最終的に何ができるのか試していきます。&lt;/p&gt;
&lt;p&gt;リポジトリアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/trae-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/trae-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;詳細な使用方法は、リポジトリのREADME.mdファイルをご覧ください。&lt;/p&gt;
&lt;p&gt;このリポジトリには多数の提出記録が含まれており、ほとんどが私とTraeとの会話記録、およびTraeの機能に対する私のテストです。対応する機能を実装するために人工干渉を行ったかどうかを備考に記載しています。&lt;/p&gt;
&lt;h2 id=&#34;プロンプト&#34;&gt;プロンプト
&lt;/h2&gt;&lt;p&gt;プロジェクトは、ゼロから作成するものですが、以下の内容がプロジェクトのプロンプトです：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;プロジェクトのプロトタイプ図に基づいて、以下の機能を開発してください：
    *   選別銘柄（ウォッチリスト）機能。契約新規追加、削除、修正、照会をサポートする必要があります。
    *   選別銘柄インターフェースは、基本的な市場データを表示する必要があります。
    *   複数の異なる市場の切り替えをサポートする必要があります。

    フロントエンド：React
    バックエンド：Golang Gin GORM
    データベース：PostgreSQL

    サーバーサイドには、クロスオリジンリクエストをサポートする必要があり、データの検証とエラー処理も考慮する必要があります。バックエンドサービスが利用できない場合、フロントエンドはアラートを表示する必要があります。

    バックエンドは、リクエストとレスポンスのログを表示し、フロントエンドも通信ログを出力して問題のトラブルシューティングに役立てます。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;uiとインタラクションの最適化&#34;&gt;UIとインタラクションの最適化
&lt;/h2&gt;&lt;p&gt;フロントエンドインターフェースのデザインは完全にGrokに依存しています。まず、Trae内で成果物のプロトタイプを作成しましたが、美観が欠けていました。使用していたモデルはコード能力は非常に高いものの、他の能力は弱いため、Grokを使用してフロントエンドのUIを最適化する必要があります。&lt;/p&gt;
&lt;p&gt;現在のインターフェースのスクリーンショットを撮影し、それをGrokにアップロードして、UIを最適化するように指示します。これにより、一度に多くの最適化提案を受け取ることができ、それらを人工的に評価し、Traeにコピーして実行し、最適化の効果を確認できます。&lt;/p&gt;
&lt;h3 id=&#34;技術スタック&#34;&gt;技術スタック
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;フロントエンド：React + TypeScript&lt;/li&gt;
&lt;li&gt;バックエンド：Golang + Gin + GORM&lt;/li&gt;
&lt;li&gt;データベース：PostgreSQL 17&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;システムアーキテクチャ&#34;&gt;システムアーキテクチャ
&lt;/h2&gt;&lt;h2 id=&#34;バックエンドアーキテクチャ&#34;&gt;バックエンドアーキテクチャ
&lt;/h2&gt;&lt;p&gt;バックエンドは Golang の Gin フレームワークを用いて RESTful API を実装しており、主なモジュールには以下が含まれます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;データベースモジュール&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;GORM を ORM 框架として使用&lt;/li&gt;
&lt;li&gt;環境変数でデータベース接続を設定可能&lt;/li&gt;
&lt;li&gt;自動的にデータベーススキーマのマイグレーションを実行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ルーティングモジュール&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RESTful API 設計&lt;/li&gt;
&lt;li&gt;一貫したエラーハンドリングメカニズム&lt;/li&gt;
&lt;li&gt;内蔵されたリクエストログ記録&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;クロスオリジン処理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ローカル開発環境でのクロスオリジンをサポート&lt;/li&gt;
&lt;li&gt;設定可能な CORS ポリシー&lt;/li&gt;
&lt;li&gt;Cookie を使用したクロスオリジンをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;フロントエンドアーキテクチャ&#34;&gt;フロントエンドアーキテクチャ
&lt;/h2&gt;&lt;p&gt;フロントエンドはReact + TypeScriptで構築され、以下の機能を実装しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;株価リストの表示&lt;/li&gt;
&lt;li&gt;お気に入り銘柄の管理&lt;/li&gt;
&lt;li&gt;相場データ表示&lt;/li&gt;
&lt;li&gt;エラー通知メカニズム&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>AI開発2年：ドッカーのリリース前の状態に似ている</title>
        <link>https://ttf248.life/ja/p/ai-development-two-years-like-docker-pre-release/</link>
        <pubDate>Thu, 20 Feb 2025 18:16:37 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-development-two-years-like-docker-pre-release/</guid>
        <description>&lt;p&gt;人工知能（AI）は近年、技術分野で最も議論を呼ぶトピックの一つであり、特に過去2年間でその進歩は目覚ましいものがありました。深層学習、自然言語処理、コンピュータビジョン、自動化意思決定システムなど、AIの応用範囲は多岐にわたります。しかしながら、技術が着実に進化を続けているにもかかわらず、AIはDockerのリリース前のボトルネックに似た状況にあります――つまり、市場を本格的に引き出す「ゲームチェンジャー」となるような、決定的なアプリケーションが存在しないのです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プロンプト：記事を作成してください：AIは過去2年間で発展し、Dockerのリリース前のボトルネックのような状態になっています。既存技術に基づいて、完璧な実用例を作り出し、Dockerはあまり新しい技術を使用していませんが、全体的なソリューションが合理的に、運用および開発ワークフローを変革します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;aiの現状技術は成熟しているが応用には突破が必要&#34;&gt;AIの現状：技術は成熟しているが、応用には突破が必要
&lt;/h2&gt;&lt;p&gt;技術的な側面から見ると、AIは過去2年間で相当な進歩を遂げました。OpenAIが発表したGPTシリーズモデルや、GoogleのBERT、DeepMindのAlphaシリーズなど、AIの処理能力は以前の予測を大幅に上回っています。特に自然言語処理分野では、GPT-4などのモデルが強力な生成能力に加え、理解と推論においても驚くべきパフォーマンスを示しています。&lt;/p&gt;
&lt;p&gt;しかしながら、技術革新は日進月歩であるにもかかわらず、AIの実用的な応用においてはいくつかの課題が残されています。Dockerのリリース前の状況に似ており、AIの潜在力は巨大ですが、現状では広く普及し、産業を変革するほどの「破壊的イノベーション」をもたらす主要なアプリケーションが登場していません。人々はAIの将来について議論していますが、必ずしも革命的な変化をもたらす直接的な応用シナリオを見つけるとは限りません。多くのAIアプリケーションはまだ初期段階の試みにとどまり、大部分はさらなる統合と最適化が必要です。&lt;/p&gt;
&lt;h2 id=&#34;dockerとaiの類似性技術は必ずしも革新ではなく解決策が重要&#34;&gt;DockerとAIの類似性：技術は必ずしも革新ではなく、解決策が重要
&lt;/h2&gt;&lt;p&gt;Dockerリリース前の歴史を振り返ると、技術環境とAIの現状には多くの類似点が見られることに気づきます。Dockerリリース前に、コンテナ技術自体が新しいものではありませんでした。初期のLXC（Linux Containers）や仮想化技術も、コンテナ化の基本的な能力を持っていました。しかし、Dockerは既存技術を巧みに統合・最適化することで、よりシンプルで直感的かつ効率的な解決策を提示しました。この解決策は、画期的な技術を導入したわけではありませんが、運用および開発プロセスにおける多くの課題を解決し、ソフトウェアのデプロイ、拡張、管理プロセスの大幅な簡素化を実現しました。&lt;/p&gt;
&lt;p&gt;同様に、AI分野も類似の状況に直面しています。現在のAI技術は、もはや「新鮮なもの」ではありませんが、大規模なアプリケーションを実現するためには、完璧な実行環境が必要であり、Dockerのように既存技術を統合・最適化して、合理的なアプリケーション解決策を形成することが重要です。AIのゲームチェンジャーとなるアプリケーションは、必ずしも新しい技術のブレークスルーに依存するのではなく、既存技術を組み合わせて、実際のビジネスにおける課題やニーズを解決することにある可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;aiのdocker-momentドッカーmomentを見つける方法&#34;&gt;AIの「Docker Moment」（ドッカーMoment）を見つける方法
&lt;/h2&gt;&lt;p&gt;AI技術を広く普及させるためには、いくつかの側面から取り組む必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;実用シナリオの深掘り&lt;/strong&gt;
現在の多くのAIアプリケーションは実験的な性質が強く、大規模な実用化には至っていません。AI客服やレコメンデーションなどの分野は広く利用されていますが、その機能はまだ多くの場合、業界のボトルネックを突破していません。真のブレイクスルーは、従来のやり方に困っている業界から生まれる可能性があります。例えば、医療、製造業、物流などの分野では、AIがより効率的なデータ処理と予測分析を通じて、企業がこれらの複雑なシナリオで効率を高め、コストを削減するのを支援できます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;製品化と使いやすさ&lt;/strong&gt;
Dockerのようにコンテナ化プロセスを簡素化し運用効率を向上させるのと同様に、AI製品の使いやすさは非常に重要です。AIの普及は技術の普及だけでなく、その製品化の普及でもあります。AIを日常業務フローに統合し、ユーザーが技術的な理解なしにこれらのツールを簡単に利用できるようにすることは、AIの実用化における重要なステップです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;エコシステムの構築と標準化&lt;/strong&gt;
いかなる新技術も広く普及するためには、エコシステムの構築が不可欠です。Dockerが急速に台頭したのも、そのオープン性と互換性によるものであり、開発者がさまざまなクラウドプラットフォーム、ツール、サービスと簡単に連携できるようになったからです。同様に、AIの未来はエコシステムの構築に依存します。AIの標準化、モデルの共有、データのオープン、技術の統合可能性などが、AIが広範な産業応用を達成する上で重要な要素となります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;結論aiの未来は可能性に満ちているが更なる完善な落とし所を必要とする&#34;&gt;結論：AIの未来は可能性に満ちているが、更なる完善な落とし所を必要とする
&lt;/h2&gt;&lt;p&gt;過去2年間にわたり、AI技術は目覚ましい進歩を遂げているものの、現状では「決定的な応用例」が存在しない段階にある。Dockerがリリース前のコンテナ化技術と同様に、AIには合理的な適用シナリオが必要であり、既存の技術とビジネスニーズを深く融合させることで初めて、大規模な応用と普及を実現できる。技術革新は確かに重要だが、業務プロセスを簡素化し、効率を高めるソリューションこそが、技術の普及と発展を促進するだろう。&lt;/p&gt;
&lt;p&gt;未来において、AIはDockerのように、画期的な技術的ブレークスルーではなく、既存技術を統合し、完璧な適用シナリオを構築することで、私たちの仕事や生活様式を変革していく可能性がある。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Protobufのゼロ値問題：デフォルト値が暗黙のビジネスロジックの致命的な脅威となる</title>
        <link>https://ttf248.life/ja/p/protobuf-zero-value-trap/</link>
        <pubDate>Thu, 20 Feb 2025 15:26:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/protobuf-zero-value-trap/</guid>
        <description>&lt;p&gt;米国株式市場には、プレマーケット、マーケットオープン後、マーケットクローズの3つの取引時間があります。データ配信は、プッシュ通知を使用するか、数値増分のロジック（可能な限り帯域幅を節約）を採用します。初回送信では全量データを送りますが、2回目以降はすべてのフィールドを増分で推送します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なぜ最適解を用いないのか？複数のプロジェクトグループに分散しており、一部はすでに数年ローンチされています。弊社は新規の連携のため、できる限り互換性を保つようにしています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;いくつかの問題点&#34;&gt;いくつかの問題点
&lt;/h2&gt;&lt;p&gt;概要だけでは、特に問題がないように見えるかもしれないが、社内システムアーキテクチャに組み込まれた問題や、それらを引き起こす一連の問題が発生する。直前に問題を解決したにもかかわらず、新たな問題が発生し、その問題は以前の問題によって引き起こされたものである。&lt;/p&gt;
&lt;h3 id=&#34;取引時間帯の認識エラー&#34;&gt;取引時間帯の認識エラー
&lt;/h3&gt;&lt;p&gt;盤中ステージを &lt;code&gt;protobuf&lt;/code&gt; で定義されている 0 と認識していますが、増分配信のため、業務側ではこの 0 がデフォルト値なのか、それとも実際の取引値なのかを明確に判断できません。&lt;/p&gt;
&lt;p&gt;分かりやすく言うと、0 を受信した際に、それが新しい行情設定の値なのか、protobuf のデフォルト値なのかを判断できないということです。&lt;/p&gt;
&lt;h3 id=&#34;オプショナルについて&#34;&gt;オプショナルについて
&lt;/h3&gt;&lt;p&gt;protobuf 3.15 以降、proto3 では (proto2 と同様に) オプショナルキーワードを使用してスカラーフィールドの存在情報を指定できるようになりました。&lt;/p&gt;
&lt;p&gt;チーム内の通信プロトコルは &lt;code&gt;protobuf&lt;/code&gt; をベースにしていますが、歴史的な理由により選択されたバージョンが古く、&lt;code&gt;optional&lt;/code&gt; キーワードをサポートしていません。理解している方はご存知でしょう。底层から &lt;code&gt;protobuf&lt;/code&gt; を導入したため、プロジェクトの底层は静的ライブラリとして &lt;code&gt;protobuf&lt;/code&gt; を公開しており、その結果、全体のコンパイルチェーン全体をアップグレードする必要があり、このコストは非常に高くなっています。&lt;/p&gt;
&lt;h3 id=&#34;gcc-のバージョン問題&#34;&gt;GCC のバージョン問題
&lt;/h3&gt;&lt;p&gt;ようやく解決策を思いついたのだが、底层で異なるバージョンのリリースをするという方法を試みた。可能な限り &lt;code&gt;protobuf&lt;/code&gt; の新しいバージョンのコンパイル依存関係の伝播を制御しようとした。しかし、コンパイル時に &lt;code&gt;gcc&lt;/code&gt; のバージョンが低すぎて、&lt;code&gt;protobuf&lt;/code&gt; の新機能に対応していないことが判明した。
グループ内でよく使われるサーバーの種類：CentOS7、CentOS8。CentOS7 のデフォルトの &lt;code&gt;gcc&lt;/code&gt; バージョンは 4.8 であり、CentOS8 のデフォルトの &lt;code&gt;gcc&lt;/code&gt; バージョンは 8.3 である。&lt;code&gt;protobuf&lt;/code&gt; の新機能は &lt;code&gt;gcc&lt;/code&gt; のバージョンが 7.4 以上であることを必要とするため、CentOS7 はサポートできない。
&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bug 82461 - [7 Regression] Temporary required for brace-initializing (non-literal-type) member variable&lt;/a&gt;。
結局、関連サービスのデプロイやコンパイルサーバーを CentOS8 に移動することで問題を解決した。&lt;/p&gt;
&lt;h2 id=&#34;理論的な列挙&#34;&gt;理論的な列挙
&lt;/h2&gt;&lt;p&gt;問題を全体的に見直すと、よりシンプルで効率的な解決策があります。それは、列挙の定義を調整し、1から番号付けするようにすることです。これにより、デフォルト値とビジネス値を明確に区別でき、上記のような問題を防ぐことができます。&lt;/p&gt;
&lt;h3 id=&#34;なぜ-1-から始める方が合理的なのか&#34;&gt;なぜ 1 から始める方が合理的なのか？
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;protobuf&lt;/code&gt; において、enum 型のデフォルト値は固定で 0 に設定されています。もし、有意義なビジネス値を 0 (例えば「市場中」) に定義した場合、増量プッシュ時にビジネス側では受信した 0 がビジネス値なのか、未設定のデフォルト値なのか判断できません。一方、enum を 1 から定義すれば、0 は無意味なデフォルト値または「未知」の状態として保持でき、問題が解決されます。&lt;/p&gt;
&lt;p&gt;推奨される実践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protobuf の enum を設計する際には、常に 0 を無意味なデフォルト値 (例: &lt;code&gt;UNKNOWN&lt;/code&gt; または &lt;code&gt;RESERVED&lt;/code&gt;) として定義すること。&lt;/li&gt;
&lt;li&gt;実際のビジネス値を 1 から割り当て、デフォルト値 0 と区別できるようにすること。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この小さな調整により、取引時間帯の識別の問題を解決するだけでなく、将来のプロトコル設計にも貴重な教訓を提供しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>久しぶりに来る株の荒行 (かろうにくる かぶのあぎょ)</title>
        <link>https://ttf248.life/ja/p/long-time-no-see-bull-market-in-stocks/</link>
        <pubDate>Sat, 15 Feb 2025 03:42:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/long-time-no-see-bull-market-in-stocks/</guid>
        <description>&lt;p&gt;2024年の国慶前に、中国株式市場は注目すべき急騰相場を経験したが、休暇後には劇的な暴落へと転換した。この株式市場の「氷火両重天」（冷暖差）は、投資家たちにジェットコースターのような心境の変化をもたらすと同時に、政策、経済、そして市場の規律に対する深い考察を引き起こした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;昨年国慶前の株式暴騰をテーマにブログを作成し、最後に国慶後の株式暴落を含める。文章スタイル：ニュース記事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;国慶前の株式暴騰政策主導の狂騒&#34;&gt;国慶前の株式暴騰：政策主導の狂騒
&lt;/h2&gt;&lt;p&gt;2024年の国慶前に5日間、中国株式市場は低迷から一転、「沸騰モード」（煮えたぎる状態）へと急上昇した。9月30日、A株市場全体が大幅に放出しながら高騰し、主要指数はすべて過去最高値を更新した。上證指数は8.06%の大幅な上昇、深証成指は10.67%、創業板指は15.36%の急騰を記録し、北證50指数は史上最大の一日株価上昇を達成、22.84%も暴騰した。市場のセンチメントは極度に高揚し、沪深北三市（上証、深証、北證）の当日の取引額は2兆6115億元に達し、前回の取引日と比較して11559億元も放出し、主要株価指数超5300銘柄が同時に上昇し、「一片紅」（一面真っ赤）という状況となった。&lt;/p&gt;
&lt;p&gt;この相場を牽引した主な要因は、政府による一連の予想を上回る政策発表と、それによって引き起こされた市場期待の変化である。9月24日、中国人民銀行は準株価（LRR）の引き下げと金利引き下げを発表し、既存住宅ローン金利を低減するとともに、最低頭金の統一基準を設定した。9月26日の中央政治局会議では、逆周期的調整の財政・金融政策の力度を強化し、資本市場を刺激するとともに、中長期資金の流入を促進する必要性を強調した。9月30日には、不動産支援策が集中して発表された。これらの政策措置は市場に政府が市場と成長を安定させる決意を示したことを伝えた。&lt;/p&gt;
&lt;h2 id=&#34;国慶後の株式市場の大幅暴落歓喜の後の冷静と調整&#34;&gt;国慶後の株式市場の大幅暴落：歓喜の後の冷静と調整
&lt;/h2&gt;&lt;p&gt;しかし、国慶節（中秋節・国慶節）の後、市場のセンチメントは急激に転落した。10月8日、A株はほぼストップ高の水準で強気にオープンしたが、大幅な上昇後、市場は激しい変動を迎えてしまい、最終的に高値から低値へと大きく下落してクローズした。それ以来、市場の重心は継続的に低下し、10月16日時点で上海総合指数（沪指）の振幅は15%を超え、累計470点以上減少した。10月8日から10日の期間において、A株の主要指数は全線下落しており、特に新業期指数（创业板指）は6.21%も下落した。&lt;/p&gt;
&lt;p&gt;この暴落の原因の一つは、前期の急速な上昇によるリスクの消化である点に加え、市場が政策に対する期待を調整したこととも関連している。一部の投資家は、政策の効果が短期的に現れていると考えているものの、長期的な効果については引き続き注視する必要があると見ている。さらに、海外市場の変動もA株に影響を与えた。10月9日、恒生指数は9.41%暴落し、A50先物も10.4%暴落したことで、市場の下落が加速した。&lt;/p&gt;
&lt;h2 id=&#34;市場の反省と展望&#34;&gt;市場の反省と展望
&lt;/h2&gt;&lt;p&gt;国慶節前後の株式市場における劇的な変動は、政策、経済、市場の規則に対する深刻な反省を市場に引き起こした。一方、政策の短期的な刺激効果は顕著であったが、長期的な効果は依然として観察する必要がある。他方、市場の急速な上昇と下落は、投資家が合理性を保ち、感情的な投資を避けるように促すものとなった。&lt;/p&gt;
&lt;p&gt;将来、A株市場が真の「長牛」行情（長期的な上昇トレンド）を出すことができるかどうかは、政策が実体経済に効果的に伝達され、最終的に経済基本面を改善させる能力にかかっている。投資家は政策の実践状況と経済データの変化を注意深く監視し、合理的な投資戦略を調整する必要がある。&lt;/p&gt;
&lt;p&gt;国慶節前後における株式市場の暴騰と暴落は、政策と市場の博弈であり、投資家の心構えを試すものとなった。この「氷火両重天」（極端な寒暖）の行情の中で、私たちは市場の力を目撃し、政策の影響力を認識した。将来、市場がどのように展開していくのか、今後の動向を見守るだけに終わるだろう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>バックエンドサービス TCP 通信異常トラブルシューティング</title>
        <link>https://ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</link>
        <pubDate>Fri, 14 Feb 2025 22:54:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</guid>
        <description>&lt;p&gt;ビジネスモデル：バックエンドサービスがTCPを通じてグループの行情ゲートウェイと接続します。接続ごとに、最初に権限リクエストを送信し、その後継続的にハニーポットパケットを送信して接続状態を維持します。&lt;/p&gt;
&lt;p&gt;しかし、ある日、サービス切断警告の情報を受け取りました。詳細なログ調査の結果、バックエンドサービスは継続的にハニーポットパケットを送信していたにもかかわらず、相手からの応答が一切なく、接続自体が断続的に切断されていました。&lt;/p&gt;
&lt;h2 id=&#34;現場要約&#34;&gt;現場要約
&lt;/h2&gt;&lt;p&gt;当初、社内プロジェクトの進捗をオフィスで作業中に、グループチャットに警報情報がポップアップした。一 glance で見ると、以前からの恒常的な問題だと思い、おそらくネットワークタイムアウトによって心拍送信が失敗し、その結果サービスが切断されたと推測した。しかし、ログの詳細な調査の結果、実際にはそうではなかったことが判明した。バックエンドで権限認証メッセージを送信したが、応答を受信せず、同時に心拍パケットは継続的に送信され続け、相手からは心拍データに対する応答が一切なかった。ログの徹底的な分析により、以下の重要な問題点が明らかになった：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;権限認証メッセージへの応答なし：おそらく相手側のシステムが再起動しており、その結果権限認証メッセージがタイムリーに処理されなかった可能性がある。&lt;/li&gt;
&lt;li&gt;権限認証失敗中に心拍パケット送信：調査の結果、これはプログラムロジック上の脆弱性であることが判明した。心拍送信関数の判断ロジックに欠陥があり、接続状態のみを検証し、権限状態の検証を省略していた。&lt;/li&gt;
&lt;li&gt;サービスが切断されなかったこと：もしサービスが切断可能であれば、再接続メカニズムをトリガーして権限認証メッセージを再送信することができた。
現在、解決すべき最後の課題は、なぜサービスが切断されなかったのかである。この問題の解決には、より詳細で精緻な調査が必要となる。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ネットワークパケットの分析&#34;&gt;ネットワークパケットの分析
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;tcpdump&lt;/code&gt; は非常に強力なネットワークパケットキャプチャツールであり、ネットワークパケットを捕捉するために使用できます。ネットワークパケットを分析することで、通信の詳細をより直感的に理解することができます。ここでは、&lt;code&gt;tcpdump&lt;/code&gt; を使用してネットワークパケットをキャプチャし、さらに分析します。
&lt;img src=&#34;https://ttf248.life/p/backend-service-tcp-communication-troubleshooting/20250220151952.png&#34;
	width=&#34;1126&#34;
	height=&#34;202&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcpdump&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;557&#34;
		data-flex-basis=&#34;1337px&#34;
	
&gt;
分析図のデータから、心拍が正常に送信され続けていること、相手側のサーバーが応答していないこと、そして &lt;code&gt;ACK&lt;/code&gt; が送られていることがわかります。これにより接続は積極的に切断されません。&lt;/p&gt;
&lt;h2 id=&#34;共通フラグの説明&#34;&gt;共通フラグの説明
&lt;/h2&gt;&lt;p&gt;TCP プロトコルにおいて、&lt;code&gt;PSH&lt;/code&gt; (Push) と &lt;code&gt;ACK&lt;/code&gt; (Acknowledgment) は重要なフラグであり、それぞれデータ転送の制御とフロー制御に使用されます。その機能は以下のとおりです。&lt;/p&gt;
&lt;h3 id=&#34;1-psh-push-flag&#34;&gt;&lt;strong&gt;1. PSH (Push Flag)&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;機能:&lt;/strong&gt;
&lt;code&gt;PSH&lt;/code&gt; フラグは、&lt;strong&gt;受信側がバッファ内のデータを上位のアプリケーションに即時送信するように要求する&lt;/strong&gt; 役割を持ちます（バッファが満杯で待つのではなく）。 つまり、&lt;code&gt;PSH&lt;/code&gt; フラグが付いたデータ段を受信すると、受信側はできるだけ早くそのデータをアプリケーションに処理して送信し、オペレーティングシステムのバッファに一時的に保存することはありません。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型的なシナリオ:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP/HTTPS リクエスト:&lt;/strong&gt; クライアントがリクエストを送信する際（例: &lt;code&gt;GET /index.html&lt;/code&gt;）には &lt;code&gt;PSH&lt;/code&gt; が設定され、サーバーから即時の応答を希望します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH プロトコル:&lt;/strong&gt; 毎回キーボード入力が発生すると &lt;code&gt;PSH&lt;/code&gt; がトリガーされ、入力された文字をリアルタイムで転送します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;リアルタイム通信:&lt;/strong&gt; ビデオストリームやオンラインゲームなど、低遅延のシナリオでは &lt;code&gt;PSH&lt;/code&gt; を使用して遅延を減らすことがあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PSH&lt;/code&gt; は必須ではありません。受信側はフラグを無視することもできます（ただし、データを正常に処理する必要があります）。&lt;/li&gt;
&lt;li&gt;送信側が &lt;code&gt;PSH&lt;/code&gt; を設定しない場合、受信側は自身のバッファリング戦略に基づいてデータ送信のタイミングを決定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-ackacknowledgment-flag&#34;&gt;&lt;strong&gt;2. ACK（Acknowledgment Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;機能&lt;/strong&gt;：
&lt;code&gt;ACK&lt;/code&gt; フラグは、&lt;strong&gt;前段のデータが正しく受信されたことを示す&lt;/strong&gt;。各 &lt;code&gt;ACK&lt;/code&gt; には確認番号（&lt;code&gt;Acknowledgment Number&lt;/code&gt;）が含まれており、これは期待される次のバイトのシーケンス番号を表す。TCP の信頼性のある転送の中核メカニズムである。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;動作原理&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;送信側がデータ段を送信すると、期待する受信側の &lt;code&gt;ACK&lt;/code&gt; 値（例えば &lt;code&gt;ACK = シーケンス番号 + データ長&lt;/code&gt;）を付加する。&lt;/li&gt;
&lt;li&gt;受信側がデータを受信すると、受信したデータのシーケンス番号を確認するための &lt;code&gt;ACK&lt;/code&gt; 報文段を生成する。&lt;/li&gt;
&lt;li&gt;送信側は、対応する &lt;code&gt;ACK&lt;/code&gt; を受信するまで再送を行わない。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;送信側がシリアル番号 &lt;code&gt;100～199&lt;/code&gt; のデータ段を送信した場合、期待される受信側の &lt;code&gt;ACK&lt;/code&gt; は &lt;code&gt;200&lt;/code&gt; になる。&lt;/li&gt;
&lt;li&gt;受信側が &lt;code&gt;100～199&lt;/code&gt; 内の特定のデータを受信しない場合、&lt;code&gt;ACK=150&lt;/code&gt; を通じて送信側に再送を通知する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-psh-と-ack-の組み合わせ&#34;&gt;&lt;strong&gt;3. PSH と ACK の組み合わせ&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;TCP 報文において、&lt;code&gt;PSH&lt;/code&gt; (Push) と &lt;code&gt;ACK&lt;/code&gt; (確認応答) は同時に出現することがあり、以下のようなシナリオでよく見られます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP リクエスト応答&lt;/strong&gt;：&lt;br&gt;
クライアントが &lt;code&gt;POST&lt;/code&gt; リクエスト（データを含む）を送信する際、&lt;code&gt;PSH&lt;/code&gt; と &lt;code&gt;ACK&lt;/code&gt; を設定し、前の応答の確認を行います。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH ハンドシェイク後のコマンド転送&lt;/strong&gt;：&lt;br&gt;
クライアントがコマンドを入力した後、&lt;code&gt;PSH&lt;/code&gt; と &lt;code&gt;ACK&lt;/code&gt; が付いたデータ段を送信することで、コマンドが即座にサーバーで処理されるようにします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-その他の関連を示すフラグ&#34;&gt;&lt;strong&gt;4. その他の関連を示すフラグ&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フラグ&lt;/th&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SYN&lt;/td&gt;
&lt;td&gt;シーケンス&lt;/td&gt;
&lt;td&gt;接続の初期化 (3ウェイハンドシェイク)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-その他の重要な関連&#34;&gt;&lt;strong&gt;4. その他の重要な関連&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;標識&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FIN&lt;/td&gt;
&lt;td&gt;終了&lt;/td&gt;
&lt;td&gt;エレガントな接続のクローズ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-その他の関連を示すフラグ-1&#34;&gt;&lt;strong&gt;4. その他の関連を示すフラグ&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フラグ&lt;/th&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td&gt;リセット&lt;/td&gt;
&lt;td&gt;接続の強制終了 (異常状況)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-その他の重要な関連-1&#34;&gt;&lt;strong&gt;4. その他の重要な関連&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;標識&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;URG&lt;/td&gt;
&lt;td&gt;緊急&lt;/td&gt;
&lt;td&gt;緊急ポインタのマーク (ほとんど使用されない)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-その他の関連要素&#34;&gt;&lt;strong&gt;4. その他の関連要素&lt;/strong&gt;
&lt;/h3&gt;&lt;h3 id=&#34;まとめ&#34;&gt;&lt;strong&gt;まとめ&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PSH&lt;/strong&gt; は、&lt;strong&gt;データのアプリケーション層への迅速な到達&lt;/strong&gt; と遅延の低減に焦点を当てています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK&lt;/strong&gt; は、&lt;strong&gt;データの信頼性の高い伝送&lt;/strong&gt; とパケットロスや乱数（順不同）を防ぐことに焦点を当てています。
両者は連携して、TCP プロトコルの効率性と信頼性をバランスしています。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>投資して儲けるというのは、急がないと意味がない。焦っても無駄だ。</title>
        <link>https://ttf248.life/ja/p/investing-takes-time/</link>
        <pubDate>Fri, 14 Feb 2025 20:30:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/investing-takes-time/</guid>
        <description>&lt;p&gt;数年間の株式投資の経験を振り返ると、大金を稼げなかったものの、大きな損失も出せなかった。最大の問題は、資金の流れが不合理であり、精神状態が不安定だったことだ。現在の段階では、主な収入源は仕事で、毎日労働によって固定給を得ており、お金の変化に対する耐性は債券や銀行預金といったものに留まっている。しかし、人は欲を持つものであり、仕入れを少なくすれば株価が上昇しても利益を得られないし、仕入れを多くすれば株価が下落して損失を被る。このような状況では、精神状態の安定が非常に重要であり、それは富を守るための助けとなるだろう。&lt;/p&gt;
&lt;h2 id=&#34;過去の損失事例&#34;&gt;過去の損失事例
&lt;/h2&gt;&lt;p&gt;新規参入時を除いて、小盤株や次新株に触れる機会があり、その後は主に大型株や大口指数ファンドに投資しました：工商銀行、中国連通、恒生電子、中興通信など、様々な大型株指数ファンド。&lt;/p&gt;
&lt;p&gt;ブルーチー（老钱）と呼ばれる安定した株と組み合わせることで利益を出す戦略です：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;恒大の問題が発生した際、銀行株が暴落し、経済全体の景観に対する認識に欠けていたため、早期に市場から撤退することができました。この状況は、不動産が中国経済における割合が高いため、関連するリスクを考慮できず、最終的に「強制破綻」という形で株価が下落しました。その後、工商銀行のような優良株は2年間ほど上昇しました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;貿易戦の初期段階で、中興通信が大きな打撃を受け、株価も大幅に下落しましたが、その後徐々に回復しました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;恒生電子は長年投資してきた銘柄であり、アリババ（蚂蚁金服）が退任した後も株価は大幅に下落しましたが、この株式には強力な庄家が存在し、毎年何度か株価を押し上げる操作を行うことができました。適切なポジションサイズを維持することで、大きな損失を被ることはありませんでした。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;債券投資&#34;&gt;債券投資
&lt;/h2&gt;&lt;p&gt;どうでしょうか、これも利率下落の周期を拾ったと言えるでしょう。杭州での仕事に変動があり、住宅購入の計画を放棄し、手元にあった債権はすでに銀行の定期預金で配置しており、以前投資していた債券に注目し、債券への投資比率を大幅に増やしました。ちょうどこの数年間の利率が下落しており、債券の牛市（利回り上昇の時期）に乗ることができました。&lt;/p&gt;
&lt;p&gt;帰省した杭州での半年の仕事では、多くのことを停滞して考え、家は必ずしも購入する必要はなく、海外で働く必要性もないこと、自身の耐圧能力もそれに伴い変化すること、失業した場合の住宅ローンが山のように積み重なることを改めて認識しました。&lt;/p&gt;
&lt;h2 id=&#34;投資収益期待&#34;&gt;投資収益期待
&lt;/h2&gt;&lt;p&gt;「3年定期預金の対標を口头上には喊着（言っている）が、実際は貪心を持ってさらに多く欲しいと考えており、最初からポジションを増やすことに焦り、その後キャッシュフローが枯渇してしまう。」 保険の購入、住宅ローン、結婚など、資金の大頭となるものは全て、全体的な計画において十分なキャッシュフローを残していないため、その後のキャッシュフロー不足につながる。&lt;/p&gt;
&lt;p&gt;今後の計画は長期保有する&lt;strong&gt;券商ETF&lt;/strong&gt;と&lt;strong&gt;恒生科技指数&lt;/strong&gt;であり、資産全体の配分としては、保険を底仓（ベース）、中長期的債券、そして株式ファンドである。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>時の流れに沿った異端な幻想と感情の拠り所</title>
        <link>https://ttf248.life/ja/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</link>
        <pubDate>Thu, 13 Feb 2025 22:12:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</guid>
        <description>&lt;p&gt;最も初期のネット文学読者が中年になってくると、彼らに向けた爽快な物語も変化してくる。主人公は父親、師匠、あるいは高齢者といった存在が多く登場し、中年の読者のライフと感情に対する異なるニーズに応えるように変化した。このような作品は、レベルアップや逆転劇を追求するだけでなく、感情的な共鳴や人生の洞察に重点を置くようになった。&lt;/p&gt;
&lt;h2 id=&#34;ターゲットユーザー歳月を重ねる読者層の変遷&#34;&gt;ターゲットユーザー：歳月を重ねる読者層の変遷
&lt;/h2&gt;&lt;p&gt;かつてのネット文学（ウェブ小説）の読者は、現在ほとんどが中年へと年齢を重ねています。彼らは人生経験を通して心の鍛錬を受け、価値観や考え方が変化しました。若き頃に熱狂的に支持した熱血（情熱）、冒険などの要素が唯一の追求ではなくなったのです。彼らは読書を通じて、自分自身の現在の生活状況と感情的な共鳴、そして過去の歳月への回想、未来への期待といったものを求めるようになっています。中年爽文は、まさにこのような心理的ニーズに基づき生まれたものであり、より中年人の生活や考え方に近いプロット設定によって、この特定の読者層を引きつけています。&lt;/p&gt;
&lt;h2 id=&#34;役割の変化少年英雄から中年担当&#34;&gt;役割の変化：少年英雄から中年担当
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;私の弟子は皆大悪役&lt;/strong&gt;：主人公陸州が師匠となることで、直面するのは個性豊かで実力も卓越した弟子たち。彼らは正義と邪悪の間で揺れ動き、陸州は彼らを正しい道へと導く必要がある。この小説は、主人公と弟子の間の交流を通して、中年人が後輩を教え導く際に直面する課題や戸惑いを浮き彫りにしている。また、弟子たちの成長と変化は読者に希望と未来を示唆し、子どもや若年層に対する自身の期待を反映しているかのようだ。&lt;/p&gt;
&lt;h2 id=&#34;感情共鳴人生感悟と家庭責任&#34;&gt;感情共鳴：人生感悟と家庭責任
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;六十歳の誕生日システム&lt;/strong&gt;：主人公は六十歳の誕生日にシステムを入手し、新たな人生の旅路を歩み始めます。この設定により、中年読者は「まだ間に合う」という希望と励ましを感じることができます。すでに晩年を迎えていますが、主人公はシステムを通して自身の価値や夢を実現することができます。このプロットは読者に、人生で失った機会や未達成の夢を想起させながら、積極的な生き方の態度を伝え、いつでも夢を追い続けることを奨励します。&lt;/p&gt;
&lt;h2 id=&#34;プロット設計中年生活のリズムと趣味に寄り添う&#34;&gt;プロット設計：中年生活のリズムと趣味に寄り添う
&lt;/h2&gt;&lt;p&gt;中年爽文のプロット設計は、より生活の詳細や感情の繊細な表現に重点を置く傾向があります。若い頃の爽文のように、急速なレベルアップや冒険を追求するのではなく、登場人物間の関係性と感情的な葛藤を描写することに注力します。『史上最强师傅』のような作品では、主人公と弟子との師弟情誼、同門との兄弟情など、細やかに描写されています。このようなプロット設計は、中年読者に温かさや親しみを感じさせ、自分自身の家族愛、友情、恋愛といった生活を想起させるような感覚を与えます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ollama ローカル実行 deepseek-R1</title>
        <link>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</link>
        <pubDate>Fri, 07 Feb 2025 22:41:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</guid>
        <description>&lt;p&gt;Ollamaは、大規模言語モデル（LLM）をローカルで実行およびデプロイすることを目的としたオープンソースのAIツールです。クラウドサービスへの依存なしに、開発者がローカルマシン上でGPTのようなモデルを使用するための簡単なかつ効率的な方法を提供することを目指しています。Ollamaは複数のモデルに対応し、パフォーマンスを最適化することで、リソースが限られたデバイスでもこれらのモデルをスムーズに実行できるように設計されています。&lt;/p&gt;
&lt;p&gt;Ollamaを使用すると、ユーザーはテキストベースのAIアプリケーションを利用でき、ローカルでデプロイされたモデルとインタラクトすることができ、データプライバシーやAPIの使用料金に関する懸念なく、自然言語処理や質問応答などのタスクを実行できます。コマンドラインインターフェース（CLI）を通じて異なるモデルを呼び出し、これらのタスクを実行できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ollamaは様々なモデルを試すのに適しており、Windows版のテストではハードウェアの性能を十分に発揮できなかった可能性があります。これはWindows版の問題かもしれません。Linux版の方が良い結果が得られる可能性があります。32bパラメータのモデルをデプロイし、メモリとGPU負荷が低い場合に、応答速度が遅いことが確認されました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ハードウェア概要&#34;&gt;ハードウェア概要
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;オペレーティングシステム: Windows 11&lt;/li&gt;
&lt;li&gt;CPU: i7-10700K&lt;/li&gt;
&lt;li&gt;メモリ: 40GB&lt;/li&gt;
&lt;li&gt;グラフィックカード: RTX 3060 12GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;環境準備&#34;&gt;環境準備
&lt;/h2&gt;&lt;p&gt;以下のシステム環境変数を設定し、後続の使用を容易にします：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_MODELS=E:\ollama&lt;/code&gt;&lt;/strong&gt;
この変数で Ollama モデルの保存場所を指定します。 &lt;code&gt;E:\ollama&lt;/code&gt; はフォルダパスであり、ダウンロードまたはデプロイしたローカルモデルファイルをすべてここに格納します。Ollama はこのパスに基づいてモデルをロードおよび使用します。モデルファイルの保存場所を変更する場合は、このパスを更新してください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_HOST=127.0.0.1:8000&lt;/code&gt;&lt;/strong&gt;
Ollama サービスのホストとポートを設定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt; はローカルアドレス（localhost）であり、Ollama サービスは本機からのリクエストのみを待ち受けます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8000&lt;/code&gt; は指定するポート番号であり、Ollama サービスが 8000 ポートでリクエストを受信および処理します。必要に応じてポート番号を変更できますが、他のアプリケーションで使用されていないことを確認してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_ORIGINS=*&lt;/code&gt;&lt;/strong&gt;
Ollama サービスへのアクセスを許可するオリジン（ソース）を制御します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; はすべてのオリジン（つまり、すべてのドメインと IP アドレス）が Ollama サービスにアクセスできることを意味します。これは通常、開発およびデバッグ環境で使用されます。本番環境では、セキュリティを高めるために、特定のドメインまたは IP アドレスのみを許可するようにより厳格なオリジン制御を設定することが一般的です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;deepseek-r1-モデルのデプロイ&#34;&gt;DeepSeek-R1 モデルのデプロイ
&lt;/h2&gt;&lt;p&gt;ollama のインストールは、初心者向けで簡単なため、詳細は省略します。
インストール後の検証：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core&amp;gt;ollama -v
ollama version is 0.5.11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モデルのデプロイについては、公式ウェブサイトのモデルページを参照し、対応するパラメータのモデルを選択してください: &lt;code&gt;ollama run deepseek-r1:14b&lt;/code&gt;
14b パラメータは会話コンテキストを効果的に記憶でき、より小さなパラメータバージョンではコンテキストを記憶できません。32b パラメータバージョンは、ローカルでのデプロイ時に非常に遅延するため、詳細なテストは行っていません。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ollama.com/library/deepseek-r1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ollama.com/library/deepseek-r1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/x18990027/article/details/145368094&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/x18990027/article/details/145368094&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>PowerShell 7 と Persistence 設定 コマンドライン予測ビュー</title>
        <link>https://ttf248.life/ja/p/powershell-7-persisting-settings-commandline-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/powershell-7-persisting-settings-commandline-prediction-view/</guid>
        <description>&lt;p&gt;Linux で使慣れた zsh を、昨日ブログを書いている時に、突然 PowerShell 7 もセッション保持設定でコマンド履歴予測ビューをサポートしていることを発見し、試しに触ってみたら、意外と便利だった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;何が原因かはわからないけど、何か操作をしてこの機能を起動しただけで、それで終わり。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現在多様化するオペレーティング環境において、システム管理者や開発者は、プラットフォーム間での互換性、効率性、そして強力な機能を備えたツールを求めています。PowerShell 7 はまさにそのニーズに応える注目を集めているツールです。強力なスクリプト作成能力に加え、Windows、Linux、macOS など様々なオペレーティングシステム上で動作するため、ユーザーに前例のない利便性をもたらします。&lt;/p&gt;
&lt;h2 id=&#34;powershell-7クロスプラットフォームな強力なツール&#34;&gt;PowerShell 7：クロスプラットフォームな強力なツール
&lt;/h2&gt;&lt;h3 id=&#34;クロスプラットフォーム特性&#34;&gt;クロスプラットフォーム特性
&lt;/h3&gt;&lt;p&gt;PowerShell 7は、プラットフォームの制限を打破し、Windowsシステムでのエンタープライズレベルのサーバー管理、Linux環境でのシステム運用、macOSでの日常開発タスクなど、あらゆる環境で一貫してPowerShell 7ツールを使用できます。これにより、作業効率が大幅に向上し、プラットフォームの違いによる学習コストや操作複雑性の問題を軽減します。&lt;/p&gt;
&lt;h3 id=&#34;強力な機能&#34;&gt;強力な機能
&lt;/h3&gt;&lt;p&gt;強力なスクリプト作成能力を備え、オブジェクト指向プログラミング、関数、モジュールなどの高度なプログラミング特性をサポートします。PowerShell 7 を通じて、ユーザーはファイルシステムを簡単に操作し、ファイルやフォルダの作成、削除、コピー、移動などの操作を実行できます。レジストリにアクセスして変更することで、システムの構成を深く調整することも可能です。プロセスとサービスを管理し、システムの状態を効果的に監視および制御することもできます。さらに、PowerShell 7 は、Active Directory におけるユーザーと権限の管理や、Azure クラウドプラットフォームにおけるリソースの配分と管理など、さまざまな Windows および非 Windows 技術との相互作用も可能です。&lt;/p&gt;
&lt;h3 id=&#34;オープンソースエコシステム&#34;&gt;オープンソースエコシステム
&lt;/h3&gt;&lt;p&gt;PowerShell 7はオープンソースであり、この特性により、世界中の開発者や愛好家がその開発と改善に積極的に参加できるようになっています。大量のオープンソースモジュールやツールが継続的に登場し、PowerShell 7 の機能と応用シナリオを豊かにしています。ユーザーは自分のニーズに応じて、オープンソースコミュニティで適切なモジュールを見つけて PowerShell 7 の機能を拡張したり、自身のコードを貢献してコミュニティ全体の発展を推進したりすることができます。&lt;/p&gt;
&lt;h3 id=&#34;互換性と安定性&#34;&gt;互換性と安定性
&lt;/h3&gt;&lt;p&gt;PowerShell 7は、旧バージョンのPowerShellとの互換性を維持しながら、多くの新機能と改善を導入しました。これらの改善により、パフォーマンスが向上し、安定性が強化され、ユーザーはさまざまなタスクをよりスムーズに実行でき、ソフトウェアの故障による作業中断を減らすことができます。&lt;/p&gt;
&lt;h2 id=&#34;コマンドレット予測ビューの起動&#34;&gt;コマンドレット予測ビューの起動
&lt;/h2&gt;&lt;p&gt;PowerShell 7 の多くの便利な機能の中で、&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; コマンドは、ユーザーのコマンドライン入力体験を向上させるための実用的なツールです。&lt;/p&gt;
&lt;p&gt;コマンドを実行しなくても自動補完を実現できますが、これは行内での補完に限定されます。この機能を有効にすると、リスト形式で可能なすべての補完オプションを表示する予測ビューが利用できるようになり、ユーザーは上下キーを使用して必要なオプションを選択することで、コマンド入力の正確性と効率を向上させることができます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/powershell-7-persisting-settings-commandline-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;コマンドを永続化する方法&#34;&gt;コマンドを永続化する方法
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; のようなコマンドを、PowerShellの起動時に常に有効にするには、それを PowerShell の設定ファイルに追加します。PowerShellの設定ファイルは、PowerShell が起動される際に自動的に実行する命令を含む特別なスクリプトです。&lt;/p&gt;
&lt;h3 id=&#34;設定ファイルのパスを特定する&#34;&gt;設定ファイルのパスを特定する
&lt;/h3&gt;&lt;p&gt;PowerShell では、&lt;code&gt;$PROFILE&lt;/code&gt; 変数を使用して設定ファイルのパスを確認できます。もしこのパスにファイルが存在しない場合は、ユーザーは手動で作成することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;設定ファイルのオープン&#34;&gt;設定ファイルのオープン
&lt;/h3&gt;&lt;p&gt;テキストエディタ（例えば、高機能な Notepad++ や軽量の Visual Studio Code）を使用して、$PROFILE 変数で取得した設定ファイルパスに対応するファイルを開きます。&lt;/p&gt;
&lt;h3 id=&#34;コマンドの追加&#34;&gt;コマンドの追加
&lt;/h3&gt;&lt;p&gt;開いている構成ファイルに、&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; コマンドを追加します。コマンドの記述が正確であることを確認し、構成ファイルを実行する際に正しく有効になるようにしてください。&lt;/p&gt;
&lt;h3 id=&#34;構成ファイルへの保存&#34;&gt;構成ファイルへの保存
&lt;/h3&gt;&lt;p&gt;コマンドの追加が完了したら、構成ファイルを保存しテキストエディタを閉じます。これにより、構成ファイルには、PowerShell起動時に実行したいと希望するコマンドが含まれるようになります。&lt;/p&gt;
&lt;h3 id=&#34;検証設定&#34;&gt;検証設定
&lt;/h3&gt;&lt;p&gt;現在の PowerShell ウィンドウを閉じ、PowerShell を再起動します。 新しく起動した PowerShell でコマンドを入力する際、コマンドラインでの予測ビュースタイルの表示が、当方の設定に従いリスト形式で表示されることを確認します。 これにより、当方の設定が正常に適用されたことを示します。
上記の手順を実行することで、PowerShell 7 の強力な機能と特性についてより深く理解し、コマンドラインでの予測ビュースタイルの設定方法を習得するとともに、これらの設定を永続的に適用する方法も学びます。 これらの知識が、PowerShell 7 を使用する際に、よりスムーズかつ効率的に様々なシステム管理および自動化タスクを完了できるようになることを願っています。&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>現代貨幣理論は、世界の経済体の未来なのでしょうか？</title>
        <link>https://ttf248.life/ja/p/modern-monetary-theory-future-global-economy/</link>
        <pubDate>Thu, 06 Feb 2025 23:16:34 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/modern-monetary-theory-future-global-economy/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;株式市場の継続的な上昇トレンド（バブル）は、アメリカ本国の「硬直化された強み」を無視し、ドルの大規模な供給が主な要因である。
現代貨幣制度は、&lt;strong&gt;2008年の金融危機&lt;/strong&gt;の後、世界中の複数の経済体にとって、默認で重要な理論的基盤となりつつある。その特徴は、政府による市場介入の主観的な積極性を強調し、政府財政赤字を主要なツールとして利用し、市場における完全雇用とインフレの安定を実現することにある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大政府とは、一般的に&lt;strong&gt;ケインズ主義&lt;/strong&gt;を指し、景気変動において「ピークを抑え、谷を埋める」役割を重視する。例えば、過熱した時期には抑制し、収縮した時期には刺激するなど、政府支出の乘数効果（同じ金額の政府支出が、消費全体のどれだけを拡大させるか）に注目し、政府支出1に対して企業や個人が追加で増やす収入を計算する。これにより、経済の落ち込みを食い止め、回復を促す。同時に、財政赤字の上限と持続可能性については比較的保守的な見方を取り、&lt;strong&gt;消費乘数&lt;/strong&gt;を通じて市場を回復させ、結果として政府の収入が増加する。特に、経済が過熱している時期には、次の景気循環のための刺激資金を蓄え、例えば、政府債の発行余地や金利水準を活用する。
現代貨幣制度は、ケインズ主義の極端な延伸と言えるが、いくつかの違いもある。最大の点は、政府債務に対する制限がないことである。中央銀行は独立性を持ち続けず、主な目標は&lt;strong&gt;インフレと完全雇用&lt;/strong&gt;であり、限られた資源と生産力に対して、政府は無制限の財政赤字を通じて市場に購買力を供給し、理想的な完全雇用と生産性のボトルネックを達成するまで、継続的に増量していく。この段階でさらに通貨が増加するとインフレを引き起こすため、財政赤字の上限を設定する。ただし、市場にまだ余剰な生産手段が存在すれば、政府は赤字を拡大し続けることができる。&lt;/p&gt;
&lt;h2 id=&#34;金融危機後&#34;&gt;金融危機後
&lt;/h2&gt;&lt;p&gt;もちろん現実には理想の世界ではない。各段階の実行は人に関与しており、ケインズ主義も選択的に適用されるため、その結果は景気の下落を刺激するものが多く、景気の過熱を抑制するものが少ない。経済的な差が刺激をもたらし、過熱も政党の成果となるため、根本的に抑制することが難しく、もたらされた多くの経済的問題、新たな金融危機は従来の生産能力過多による経済的衝撃ほどではない。2008年の世界的な金融危機は、まさにケインズ主義の下での市場の自己強化の結果であるバブルであり、不動産や不動産を基盤とする金融投資商品など、多数の派生構造金融投資品が登場した。危機が勃発する以前に、学界、政界、市場レベルにおいてリスク認識が不足しており、債務で支える繁栄を政党の成果とみなし、より多くの利益を得た。例えば、巨大な金融システムは、損失はあなたのもの、配当は私たちのもの、破産は当然、十分に儲けた。お金は吐き出すことはできない。最終的に大量の参加者が先行者の各段階の収益を負担することになった。&lt;/p&gt;
&lt;p&gt;このとき現代貨幣体系の影が金融危機後に入り、典型的な特徴は急速な&lt;strong&gt;財政赤字のモノジ化と中央銀行による無限量の量的緩和&lt;/strong&gt;、そしていわゆる緊急中央銀行融資政策である。中央銀行が最終的な貸し手として無限に弾を供給し、政府も継続的に債務を抱えることができる。中央銀行は国債の購入を通じて政府財政赤字支出を支援し、政策目標の一致性を確保することもある。これが現代の金融政策と財政政策の境界線がますます曖昧になっている理由である。基礎貨幣投下に関しては、中央銀行が直接国債の購入に関与することを強く依存している。左手で紙幣を発行し、右手で花を咲かせる。&lt;/p&gt;
&lt;p&gt;ユーロ圏と米国は類似した状況を示している。2008年、欧州連合の政府債務は約67兆ユーロ、政府レバレッジ率は約66％で、一般的に認識されている警戒線である60％よりもわずかに高い。2014年、つまり救済5年の時点で、債務規模は95兆ユーロに達し、レバレッジ率は93%となった。米国はさらに誇張されており、2008年に米政府債務は約10兆ドルで、2014年には約18兆ドルに達し、最近では再び政府債務上限を打ち出している。もちろん、毎回のアすなわち政府停滞を噱頭にしており、毎回債務限度を超えるが、現在36兆ドルの突破まで拡大しており、GDP成長の要因を考慮すると、政府レバレッジは60%から120％以上に増加した。連邦準備制度理事会（FRB）は最終的な貸し手として、何度も救済において重要な役割を果たし、政府債務の主要な購入者の一人でもある。&lt;/p&gt;
&lt;h2 id=&#34;現代貨幣体系の弊端と限界&#34;&gt;現代貨幣体系の弊端と限界
&lt;/h2&gt;&lt;p&gt;この政府主導の経済刺激策は、計画経済とは言えないものの、直面する問題は一貫しており、市場の全知全能性とあらゆる环节参与者の無私無畏をどのように保証できるのか？ 最もシンプルな例として、政府部門が特定の方向に予算100万ドルを追加した場合、それは上司の小甥に与えられるのか、それともよりコスト効率の高いオークションに参加させるのか？ もちろん現実には、より複雑な形で利益の輸送が生じ、結果として政府は負債と支出を拡大させながらも、完全に制御不能な方向に流れる。最近アメリカで騒がれている政府効率部門の設立は、まさにこうした問題の延伸である。もちろんこれらのことは、異なる腐敗指数経済体において、その表现は一様ではない。私たちがより議論すべきは、普遍的な問題である。&lt;/p&gt;
&lt;h3 id=&#34;1-インフレーションの問題&#34;&gt;1. インフレーションの問題
&lt;/h3&gt;&lt;p&gt;現代の情報ネットワークの発展に伴い、政府が市場情報の掌握程度は過去に比べて著しく向上したが、全知全能ではないため、市場自体には変動があり、市場は常に期待によって変化し、ループ構造に入ることが予想される。私はあなたの予測を予測する。実態での例を挙げると、2008年～2020年の間に、現代貨幣理論の実践的な成果は目覚ましく、短期的に経済の回復とインフレーションの安定を実現したものの、ユーロ圏では段階的なデフレ問題が発生し、アメリカでもインフレーションは概ね1～3%という予測範囲内に維持されたため、人々は過去のようにケインズ主義を信じるようになった。&lt;/p&gt;
&lt;p&gt;実際には、2008年以降も発展途上国の製造業が引き続き高い成長傾向を示しており、例えば、この期間中に世界の生産地位を確立した我が国や、それに続く東南アジアおよびインドなどの経済体も、製造業の付加価値を維持していたため、現代貨幣理論における最大の制約である資源供給の制約を打ち消し、欧米は産業減少と過剰な金融化下でも、政府債務と通貨供給の急増を背景に、比較的安定したインフレーションを維持することができた。&lt;/p&gt;
&lt;p&gt;しかし、2020年以降、より大規模な景気刺激策の使用により、ユーロ圏およびアメリカで顕著なインフレが発生し、ピーク時にはそれぞれ10%程度まで上昇したが、現在でも利上げ3年近く経っても、アメリカの雇用市場は異常に過熱した状態が続いており、金融市場は通貨の支えの下で経済成長を上回る過剰な繁栄を示しており、基数効果が消失すると、アメリカのインフレは再び3%に向かって加速している。このような利上げ中の過熱状態は、財政赤字と密接に関連しており、利上げは金融政策における収縮であり、財政政策においては依然として拡大しており、2020年の超大規模な通貨投機を組み合わせることで、アメリカのインフレは異常に頑固になっている。現代貨幣理論最大の制約は、インフレーションが高止まりすることである。&lt;/p&gt;
&lt;h3 id=&#34;2-政府債務問題&#34;&gt;2. 政府債務問題
&lt;/h3&gt;&lt;p&gt;原則上、政府は債務で財政を賄う（以債養債）ことは可能ですが、その前提は&lt;strong&gt;中央銀行が完全に傀儡となること&lt;/strong&gt;、すなわち現代貨幣体系における&lt;strong&gt;財政政策と金融政策の目標一致性&lt;/strong&gt;です。これは、連邦準備制度（美聯儲）が政府に完全な権限を委譲する用意がないという事実に照らし合わせると、長らく積み上がってきた政府債務残高、特に利息支出が、財政にとって巨大な負担となっている現状と合致します。&lt;/p&gt;
&lt;p&gt;2023财年：アメリカの2023财年の财政收入は44390億ドルで、その際の债务利息支出は财政收入の約15%を占めました。2024年も高金利の状態が継続し、米国財務省発表のデータによると…&lt;/p&gt;
&lt;p&gt;2024财年：アメリカ連邦政府の財政赤字は1兆833億ドルに達し、債務利息支出は8820億ドルで、これはアメリカ連邦収入の約18%を占めます。さらに、社会保障支出を上回る水準です。&lt;/p&gt;
&lt;p&gt;これが財政の持続可能性の問題であり、長期的に低金利、低インフレ、高債務（例えば日本）が維持されれば、現代貨幣理論に基づいた「72ルール」に従い、利息が十分に低い場合、債務で財政を賄うことは緩やかな増長に繋がります。しかし、もしインフレーションによってこの微妙なバランスが崩れれば、債務の利息支出と累積が進み、複利効果により将来の債務は制御不能となり、本金よりも利息が主要な要因となる可能性があります。中央銀行が再び政府の目標と一致しない場合、この問題はさらに深刻化します。また、トランプ政権の政治的主張は、現在の連邦準備制度（美聯儲）の鷹派的な姿勢とは対照的であり、これがこの任期内におけるアメリカ政府と連邦準備制度（美聯儲）の関係激化の重要な要因となりました。現在主席が任期を終えることができるかどうかは、世論の関心の中心となっています。&lt;/p&gt;
&lt;h3 id=&#34;3-金融バブルと貨幣信用問題&#34;&gt;3. 金融バブルと貨幣信用問題
&lt;/h3&gt;&lt;p&gt;理想的には、政府が拡大した支出が家計および企業部門に流入し、皆が支出を拡大することで有効需要が増加しますが、皆さんは2000年以来の多くの金融バブルの第一人者であるため、投資と消費の選択において、大きな資産価値上昇の傾向が見られ、特に高い資産価値を期待できる商品が存在する場合、皆さんは一斉に金融市場でより高い資産価値を求めて集まり、生活水準の圧縮やレバレッジをかけて乗ることも厭わないでしょう。これは、日本の不動産高成長期、アメリカ、そして我が国の不動産高成長期でも同様の現象でした。政策的な刺激と、業者の自己利益最大化への追求、次級ローンなどの問題が多発し、多くの「救済措置」は実際には借金を促すものでした。&lt;/p&gt;
&lt;p&gt;歴史的経緯から見て、貨幣政策と財政政策が大規模に展開されると、常に&lt;strong&gt;資産バブルと富の再分配の狂騒&lt;/strong&gt;が発生します。資産バブルが先行し、富の再分配が後を追うため、別の問題が生じます。それは、極端なケインズ主義または現代貨幣理論で頻繁に使われる経済的ピラミッド（ミン스키時間）です。熱錢があれば資産価格は継続的に上昇し、それが続けば後から来る人々が持ちお金をしてきます。物価指数（CPI）のような生活費の変化を測るものは変化せず、お金が特定の分野で空回りし、後から来る人々は無力化されます。&lt;strong&gt;狂騒の後に破綻&lt;/strong&gt;が訪れます。それはミンスキー時間における裁きであり、屡々的中しています。&lt;/p&gt;
&lt;p&gt;さらに、貨幣自体にも需給の関係があります。市場供給が過剰になると、従来の投資品では容認できなくなったり、資金を集められなくなる場合（例えば、何度も崩壊した不動産バブルのように、日本人は数十年にわたって不動産投資に足を踏み入れない）、税制などの政策による抑制、不動産保有税を導入して投機需要を減らすことは、金融投機のコストを高めます。そのため、貨幣供給過剰の土壌においては、資金を集め、課税がかからない投資品が急増します。仮想投資商品も次々と登場し、アメリカ大統領夫妻もその一角を占める始末です。ある見方では、ドル圏を狭めることですが、実際には世界的な通貨供給過剰と金融空転下における法定通貨の信用低下は必然の結果です。現代貨測理論が最も依存している国家の独占的権利に基づく信用通貨地位さえも、挑戦を受ける可能性があります。どのような土壌かによって、どのような金融ゲームが生まれるのか。&lt;/p&gt;
&lt;p&gt;まとめると、現代貨幣理論とケインズ主義は、より一層の介入と市場への関与を重視し、財政赤字や中央銀行の独立性に対する姿勢がより強硬であるという点で、一種の段階的・代替関係と言えます。ケインズ主義の過剰な使用は、デフレーションと金融危機をもたらし、人工的な経済過熱からの解消には、現代貨幣理論が2008年以降に受け継ぎました。経済グローバル化下で生産性が向上しているため、短期的に成長を回復させ、インフレ率を維持しましたが、同時に大量の政府債務と金融バブルも蓄積しました。インフレが反騰し、中央銀行と政府の目標が一致しない場合、金利が高く、レバレッジも高ければ、政府財政負担はさらに増大し、財政持続可能性が大幅に低下します。また、過剰な政府介入による基礎貨幣供給は金融バブルを招き、通貨自体の信用を削弱します。見かけ上はドルが強そうに見えますが、それは他者へのごまかしであり、巨額の投資需要が土壌となり、様々な新しい金融投資投機ツールが生み出され、従来の金融投資品に対する税制上の制限から逃れることもあります。これは世界の縮図です。現代貨幣理論は未来ではなく、2008年以降使い始めた過去式であり、逆グローバル化と組み合わさることで、過去の金融バブルが大きくなるほど、政府債務が増え、金融投機ツールが狂騒的になり、富の歪んだ分配を達成する効率が高まるほど、将来的にハードランディングのリスクは大きくなります。経済的・社会的リスクを含み、ケインズ主義であろうと現代貨幣理論であろうと、貨幣供給が多ければ、富の構造問題を解決することは&lt;/p&gt;</description>
        </item>
        <item>
        <title>為替レートにおける「買直定価」と「売直定価」の理解</title>
        <link>https://ttf248.life/ja/p/understanding-buy-and-sell-exchange-rates/</link>
        <pubDate>Thu, 06 Feb 2025 22:32:10 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/understanding-buy-and-sell-exchange-rates/</guid>
        <description>&lt;p&gt;外国為替市場、特に銀行や両替所で「買入換率」と「売出換率」といった用語をよく目にするでしょう。これらの概念について、多くの人は理解できていないか、あるいは混同しているかもしれません。そこで、ここでは簡単な例を通して、この2つの換率の意味と、それらがどのように機能するのかを解説します。&lt;/p&gt;
&lt;h2 id=&#34;1-買入相場と売出相場とは何か&#34;&gt;1. 「買入相場」と「売出相場」とは何か？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;買入相場&lt;/strong&gt;：銀行や外貨交換機関がこのレートで外国為替を購入する意思があるという意味です。つまり、あなたが外国為替（例えば米ドル）を銀行に売ると、銀行はあなたの元気を「買入相場」のレートで支払ってくれます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;売出相場&lt;/strong&gt;：銀行や外貨交換機関がこのレートで外国為替を販売する意思があるという意味です。つまり、あなたが円を使って外国為替を購入すると、銀行は「売出相場」のレートであなたに外国為替を売ります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡単に言うと：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;買入相場&lt;/strong&gt;：銀行があなたの手から外国為替を買う価格。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;売出相場&lt;/strong&gt;：銀行が外国為替をあなたに売る価格。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意点として、銀行の買入相場と売出相場は通常異なり、「売出相場」は「買入相場」よりも高い傾向があります。この差額が銀行の利益源です。&lt;/p&gt;
&lt;h2 id=&#34;2-具体事例分析&#34;&gt;2. 具体事例分析
&lt;/h2&gt;&lt;p&gt;両方の為替レートの実用例をより明確に理解するために、具体的な事例を見ていきましょう。
例えば、銀行でドルを両替する場合、銀行が提示する為替レートは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;買いレート&lt;/strong&gt;：1ドル = 7.0元&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;売りレート&lt;/strong&gt;：1ドル = 7.2元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;シナリオ１あなたはドルを銀行に売る&#34;&gt;シナリオ１：あなたはドルを銀行に売る
&lt;/h3&gt;&lt;p&gt;あなたが持っている1000ドルの価値を、銀行が購入レートで計算します。
&lt;/p&gt;
\[
1000 \, \text{ドル} \times 7.0 \, \text{元/ドル} = 7000 \, \text{元}
\]
&lt;p&gt;
つまり、銀行はあなたに7000元を支払うことになります。このレートは&lt;strong&gt;購入レート&lt;/strong&gt;であり、あなたはドルを銀行に売っているためです。&lt;/p&gt;
&lt;h3 id=&#34;シナリオ２お札をドルで買う&#34;&gt;シナリオ２：お札をドルで買う
&lt;/h3&gt;&lt;p&gt;あなたが手元に7000元（人民元）があり、それをドルに換算したいとします。銀行は売却レートに基づいて計算を行います。&lt;/p&gt;
\[
7000 \, \text{元} \div 7.2 \, \text{元/ドル} = 972.22 \, \text{ドル}
\]
&lt;p&gt;この場合、7000元で約972.22ドルを手に入れることができます。ここでいう為替レートは&lt;strong&gt;売方向の為替レート&lt;/strong&gt;であり、あなたは銀行からドルを買っているためです。&lt;/p&gt;
&lt;h2 id=&#34;3-円安円高の理由とは&#34;&gt;3. 円安・円高の理由とは？
&lt;/h2&gt;&lt;p&gt;あなたは、銀行の買いレート（7.0元/ドル）が売りレート（7.2元/ドル）よりも低いことに気づいただろう。これは、銀行が外貨取引を行う際、このレート差を利用して利益を得るためである。言い換えれば、銀行はより高い売りレートとより低い買いレートの間の差額を徴収することで利益を上げるのだ。&lt;/p&gt;
&lt;p&gt;例えば、上記のケースでは、その差額は以下の通りである：&lt;/p&gt;
\[
\text{売りレート}（7.2） - \text{買いレート}（7.0） = 0.2 \, \text{元}
\]
&lt;p&gt;この差額が銀行の利益源となっている。&lt;/p&gt;
&lt;h2 id=&#34;4-まとめ&#34;&gt;4. まとめ
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;買入相場（かいゆうまえが）&lt;/strong&gt;：銀行はこのレートであなたから外国為替（あなたがお売りする外国通貨のレートと同じ）を買います。（あなたがお買いする外国通貨のレートと同じ）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;売出相場（うつしょうば）&lt;/strong&gt;：銀行はこのレートであなたに外国為替を売ります。（あなたがお買いする外国通貨のレートと同じ）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相場差（そうばさ）&lt;/strong&gt;：買入相場と売出相場との間の差額が銀行の利益源です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この2つのレートの概念について理解できたなら、外貨両替を行う際に、自分がどれだけの外国為替を受け取ることになるのか、あるいはどれだけの人民元で外国為替を買うことができるのかをより明確に知ることができます。この簡単な例が、皆さんが外貨レートの基本的な原理をより良く理解するのに役立つことを願っています！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Visual Studio が「不整合な」PDB ファイルをロードできません。</title>
        <link>https://ttf248.life/ja/p/visual-studio-load-unmatched-pdb/</link>
        <pubDate>Thu, 23 Jan 2025 20:04:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/visual-studio-load-unmatched-pdb/</guid>
        <description>&lt;p&gt;WindowsでVisual Studioを使ってプログラムをデバッグする場合、PDBファイルと実行可能ファイルが一致しない場合、Visual Studioは「シンボルファイルを読み込めません」というエラーを表示します。プログラムの実行中にクラッシュが発生し、ダンプファイルが生成される場合、不一致なPDBファイルの場合、Visual Studioはクラッシュ現場にスムーズに入ることができません。&lt;/p&gt;
&lt;h2 id=&#34;pdb-ファイルとは&#34;&gt;PDB ファイルとは
&lt;/h2&gt;&lt;p&gt;PDB ファイルは、Microsoft が提供するデバッグ情報ファイルで、プログラムのデバッグに使用されます。PDB ファイルには、シンボルテーブル、ソースコード名、行番号などの情報が含まれています。プログラムをコンパイルするときに PDB ファイルが生成され、プログラムのデバッグに使用されます。&lt;/p&gt;
&lt;h2 id=&#34;windbg-デバッグ&#34;&gt;WinDbg デバッグ
&lt;/h2&gt;&lt;p&gt;WinDbg は Microsoft 製のデバッガで、Windows プログラムをデバッグするために使用されます。WinDbg は不一致な PDB ファイルをロードできますが、手動でロードする必要があります。.reload /f /i コマンドを使用して、強制的に不一致な PDB ファイルをロードできます。
しかし、WinDbg の使い勝手は Visual Studio ほど簡単ではないため、Visual Studio も不一致な PDB ファイルをロードできるようにしたいと考えています。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-での-pdb-ファイルのマッチングエラー&#34;&gt;Visual Studio での PDB ファイルのマッチングエラー
&lt;/h2&gt;&lt;p&gt;ソースコードは現在、Git などのバージョン管理システムで管理されており、完全に一致するバージョンのコードを再コンパイルし、対応する PDB ファイルを生成できます。なぜこの PDB ファイルが読み込まれないのでしょうか？主な原因は、メタデータの不一致です。&lt;/p&gt;
&lt;p&gt;元データを修正し、EXE ファイルの情報に基づいて新しい PDB ファイルを生成することで、Visual Studio が PDB ファイルを読み込めるようになります。&lt;/p&gt;
&lt;p&gt;ChkMatch ダウンロード先：&lt;a class=&#34;link&#34; href=&#34;https://www.debuginfo.com/tools/chkmatch.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.debuginfo.com/tools/chkmatch.html&lt;/a&gt;
サイトのキャッシュアドレス：&lt;a class=&#34;link&#34; href=&#34;chkmatch.zip&#34; &gt;chkmatch.zip&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ChkMatch ユーティリティは、実行ファイルとデバッグ情報ファイルの間のマッチングを確認するために使用できます。また、互換性のある実行ファイルとデバッグ情報ファイルをマッチさせるために使用することもできます。

デバッグ情報のマッチングに関する詳細情報や関連する問題については、こちらの記事を参照してください。

サポートされているデバッグ情報形式：DBG, PDB 2.0, PDB 7.0

chkmatch [-c ExeFile DebugInfoFile ] |
         [-m ExeFile DebugInfoFile]
-c
実行ファイルとデバッグ情報ファイルの間のマッチングを確認します。
-m
実行ファイルとデバッグ情報ファイルをマッチさせます。
ExeFile
実行ファイルの名前。
DebugInfoFile
デバッグ情報ファイルの名前。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chkmatch-の使用&#34;&gt;chkmatch の使用
&lt;/h2&gt;&lt;p&gt;まず、検査を実行し、不一致の原因を分析して、署名が一致しないことを示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -c &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb

Executable:
TimeDateStamp: c26d9be3
Debug info: 2 ( CodeView )
TimeStamp: f86b0a4f  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 122  RVA: 001cdc44  FileOffset: 001cbe44
CodeView format: RSDS
Signature: {428c9b95-39a3-4a8d-a8e5-7be453684757}  Age: 1
PdbFile: D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
Debug info: 16 ( Unknown )
TimeStamp: 00000000  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 0  RVA: 00000000  FileOffset: 00000000

Debug information file:
Format: PDB 7.00
Signature: {06fae08e-c0a2-4f3d-9c7c-dfc684445dd1}  Age: 1

Result: Unmatched (reason: Signature mismatch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;次に、デバッグ情報ファイルと実行可能ファイルを一致させる操作を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -m &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb

Executable:
TimeDateStamp: c26d9be3
Debug info: 2 ( CodeView )
TimeStamp: f86b0a4f  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 122  RVA: 001cdc44  FileOffset: 001cbe44
CodeView format: RSDS
Signature: {428c9b95-39a3-4a8d-a8e5-7be453684757}  Age: 1
PdbFile: D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
Debug info: 16 ( Unknown )
TimeStamp: 00000000  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 0  RVA: 00000000  FileOffset: 00000000

## 参考資料
- [forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger](https://stackoverflow.com/questions/38147487/forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger)&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Cursor AI プログラミング IDE のトライアル</title>
        <link>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</link>
        <pubDate>Thu, 23 Jan 2025 19:30:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</guid>
        <description>&lt;p&gt;一年又转眼即逝之际，在工作中最大的变化莫过于AI参与度明显提高。以往，不同开发语言之间切换，需要开发者熟悉各种语言的不同API接口，现在这些基础代码都可以通过AI生成代码了，对于开发者来说，无疑是一个巨大的福音。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;23年の時点で、簡単な入門紹介を既に2本作成していましたが、今では25年となり、どう表現しようか… 顕著な進歩を感じ取ることはなく、自律的な認知能力を発展させ、タスクを合理的に分割できることなどが求められます。もちろん、最も重要なのはAIが生成したコードにバグが存在するかどうかを特定することです。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;Github Copilot
&lt;/h2&gt;&lt;p&gt;いつの日か忘れましたが、シンガポールでサーバーがデプロイされているという情報を見つけました。国内では利用され、長期間のVPN接続も不要になりました。ただし、ログイン時にはVPN接続は必要ですが、そのVPN接続はログイン時のみ使用し、その後はオフにしておくことができます。&lt;/p&gt;
&lt;p&gt;日常的な使い道としてはGithub Copilotをより多く活用しています。この拡張機能は、VS CodeやVisual Studioで直接利用できます。2つのソフトウェア間の切り替えが不要です。ChatGPTと比較して、Github Copilotの方がプロジェクトのサポートが優れており、インタラクションもフレンドリーです。また、一部のローカルファイルをAIに「学習」させることで、生成されるコードがあなたのプロジェクトに合っているものになります。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;最近、Cursor AI という新しいAIプログラミングIDEを見つけました。これはGithub Copilotをベースにしたもので、このIDEはよりスマートで、直接ファイルを作成するのを手伝ってくれます。&lt;/p&gt;
&lt;p&gt;簡単な使い方は試してみて、なかなか良いと感じましたが、既存プロジェクトの理解はまだ十分ではありません。ローカルプロジェクトのファイルが多い場合や、大規模なリファクタリング、最適化、調整を行う場合は、やはり&lt;strong&gt;開発者がタスクを分割して行う&lt;/strong&gt;必要があります。&lt;/p&gt;
&lt;p&gt;例として、curso のエンジンモードに切り替えて、以下の内容を入力してみましょう。「複数の異なるスタイルで切り替えられる個人用履歴書ウェブページの作成。個人情報をデータ表示のために埋めてください。」&lt;/p&gt;
&lt;p&gt;何度かやり取りするうちに、以下のようなウェブページが得られます。もちろん、このウェブページはかなりシンプルですが、初心者にとっては非常に良いでしょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;現在の登録ユーザーは、高度なAPIを150回無料で試用でき、有料ユーザーは5,000回まで制限されています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cursor-ai-1&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cursor/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;履歴書&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43; ビット演算の基礎：ビットごとのANDとフラグ設定</title>
        <link>https://ttf248.life/ja/p/cpp-bitwise-operations-flags/</link>
        <pubDate>Fri, 17 Jan 2025 02:23:56 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-bitwise-operations-flags/</guid>
        <description>&lt;p&gt;実際のC++開発において、ビット演算は一般的な技術であり、特にシステムの状態、フラグビット、または制御ビットを扱う際に、ビット演算は非常に効率的な解決策を提供します。本稿では、例を通して、ビット演算を使用して特定のフラグビットを取得および設定する方法について解説します。&lt;/p&gt;
&lt;h3 id=&#34;ビット演算の基礎概念&#34;&gt;ビット演算の基礎概念
&lt;/h3&gt;&lt;p&gt;コンピュータでは、データは2進数（0と1）のビットで格納されます。ビット演算とは、これらのビットに対して操作を行うことです。C++には、いくつかの一般的なビット演算演算子が用意されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;論理積（&amp;amp;）&lt;/strong&gt;：特定のビットが1であるかどうかを確認します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論理和（|）&lt;/strong&gt;：特定のビットを1に設定します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排他的論理和（^）&lt;/strong&gt;：特定のビットを反転させます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビット反転（~）&lt;/strong&gt;：すべてのビットを反転させます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左シフト（&amp;laquo;）&lt;/strong&gt;：すべてのビットを左に指定された数だけシフトします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右シフト（&amp;raquo;）&lt;/strong&gt;：すべてのビットを右に指定された数だけシフトします。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本例では、&lt;code&gt;unsigned short&lt;/code&gt; 型の変数 &lt;code&gt;wInfo&lt;/code&gt; に対して、さまざまなビット演算を実行し、異なるフラグビットを使用して状態を表す必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR
    A[元の数値: 00010000] --&amp;gt; B[左シフト: 00010000 &amp;lt;&amp;lt; 1]
    B --&amp;gt; C[結果: 00100000]
    C --&amp;gt; D[右シフト: 00100000 &amp;gt;&amp;gt; 1]
    D --&amp;gt; E[結果: 00010000]

    subgraph 左シフト操作
        direction LR
        A --&amp;gt; B --&amp;gt; C
    end

    subgraph 右シフト操作
        direction LR
        C --&amp;gt; D --&amp;gt; E
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;要求分析&#34;&gt;要求分析
&lt;/h3&gt;&lt;p&gt;問題文の記述に基づき、16ビットのフラグビットがあり、これを用いて様々な状態を表します。これらの状態は個々のバイナリビットによって表現され、各バイナリビットは特定の意味に対応しています。例えば：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bit0&lt;/strong&gt; が失敗かどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit1&lt;/strong&gt; が圧縮されているかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit2&lt;/strong&gt; が増分であるかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit3&lt;/strong&gt; が後続のパケットがあるかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit5&lt;/strong&gt; が正常なリクエストまたは注销かどうか&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;位演算による実装&#34;&gt;位演算による実装
&lt;/h3&gt;&lt;p&gt;ビット演算を使用してこれらのフラグを設定および取得します。具体的には：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ビットごとの抽出 (ビットマスク)&lt;/strong&gt;: 特定のビットの値（0または1）を取得します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビット設定&lt;/strong&gt;: 特定のビットを1に設定します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビットクリア&lt;/strong&gt;: 特定のビットを0に設定します。
最初に &lt;code&gt;unsigned short&lt;/code&gt; 型の変数 &lt;code&gt;wInfo&lt;/code&gt; を定義し、これらのフラグを保存するために使用します。その後、ビット演算を使用して対応するフラグを確認および設定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c-のサンプルコード&#34;&gt;C++ のサンプルコード
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;bitset&amp;gt;

// フラグ定数を定義
const unsigned short BIT_0_FAIL = 1 &amp;lt;&amp;lt; 0;    // bit0 が失敗したか
const unsigned short BIT_1_COMPRESSED = 1 &amp;lt;&amp;lt; 1; // bit1 が圧縮されたか
const unsigned short BIT_2_INCREMENT = 1 &amp;lt;&amp;lt; 2;  // bit2 がインクリメントされたか
const unsigned short BIT_3_HAS_MORE = 1 &amp;lt;&amp;lt; 3;   // bit3 に後続のパッケージがあるか
const unsigned short BIT_5_CANCEL = 1 &amp;lt;&amp;lt; 5;     // bit5 は正常リクエスト(0)または注销(1)

// あるビットがセットされているか確認する関数
bool isBitSet(unsigned short wInfo, unsigned short bitMask) {
    return (wInfo &amp;amp; bitMask) != 0;
}

// あるビットをセットする関数
void setBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo |= bitMask;
}

// あるビットをクリア（0に設定）する関数
void clearBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo &amp;amp;= ~bitMask;
}

int main() {
    // wInfo の初期値を 0 と仮定
    unsigned short wInfo = 0;

    // bit0（失敗フラグ）を設定
    setBit(wInfo, BIT_0_FAIL);

    // bit1（圧縮フラグ）を設定
    setBit(wInfo, BIT_1_COMPRESSED);

    // wInfo の2進数表記を出力
    std::cout &amp;lt;&amp;lt; &amp;quot;wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    // 各フラグを確認
    std::cout &amp;lt;&amp;lt; &amp;quot;bit0 (失敗したか): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_0_FAIL) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit1 (圧縮されたか): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_1_COMPRESSED) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit2 (インクリメントされたか): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_2_INCREMENT) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit3 (後続のパッケージがあるか): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_3_HAS_MORE) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit5 (注销されたか): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_5_CANCEL) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;

    // bit1（圧縮フラグ）をクリア
    clearBit(wInfo, BIT_1_COMPRESSED);

    // 更新された wInfo の2進数表記を出力
    std::cout &amp;lt;&amp;lt; &amp;quot;Updated wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードを実行することを推奨します：&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wInfo (in binary): 0000000000000001
bit0 (失敗したか): はい
bit1 (圧縮されたか): いいえ
bit2 (インクリメントされたか): いいえ
bit3 (後続のパッケージがあるか): いいえ
bit5 (注销されたか): いいえ
Updated wInfo (in binary): 0000000000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;コード解説&#34;&gt;コード解説
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;フラグの定義&lt;/strong&gt;: ビットシフト演算 (&lt;code&gt;1 &amp;lt;&amp;lt; n&lt;/code&gt;) を使用して、各フラグを定義します。例えば、&lt;code&gt;1 &amp;lt;&amp;lt; 0&lt;/code&gt; は &lt;code&gt;bit0&lt;/code&gt; に対応し、&lt;code&gt;1 &amp;lt;&amp;lt; 1&lt;/code&gt; は &lt;code&gt;bit1&lt;/code&gt; に対応するなど、同様に推測されます。このようにして、各フラグには一意のバイナリ位置が割り当てられます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットの確認&lt;/strong&gt;: &lt;code&gt;isBitSet&lt;/code&gt; 関数は、指定されたフラグが設定されているかどうかを確認するために、AND 演算 (&lt;code&gt;wInfo &amp;amp; bitMask&lt;/code&gt;) を使用します。もしそのビットが1の場合、関数は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットの設定&lt;/strong&gt;: &lt;code&gt;setBit&lt;/code&gt; 関数は、指定されたフラグを1に設定するために、ビットごとのOR 演算 (&lt;code&gt;wInfo |= bitMask&lt;/code&gt;) を使用します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットのクリア&lt;/strong&gt;: &lt;code&gt;clearBit&lt;/code&gt; 関数は、指定されたフラグを0に設定するために、ビットごとのAND 演算 (&lt;code&gt;wInfo &amp;amp;= ~bitMask&lt;/code&gt;) を使用します。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論
&lt;/h3&gt;&lt;p&gt;ビット演算を用いることで、複数の状態フラグを効率的に処理できるようになります。実際の開発においては、この技術が特に有用です。例えば、組み込み開発、ネットワークプロトコル、システムステート管理などの場面で、複数のバイナリ状態を表すためにビットフラグが頻繁に使用されます。スペースの節約と効率向上に貢献します。
この記事が、C++ でビット演算を用いてビットごとの取得と設定を理解し、習得するのに役立つことを願っています！これらのスキルは、効率的で保守しやすいコードを書く上で非常に役立ちます！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>デスクトップPCを2.5Gネットカードにアップグレードし、ローカルエリアネットワークの接続速度を向上させる。</title>
        <link>https://ttf248.life/ja/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</guid>
        <description>&lt;p&gt;デスクトップPCのハードウェア三連発！前回の記事では、SSD PCIeアダプタについて触れたばかりですが、旧いSSDはどこへ行ったのでしょうか？もちろん無駄にはせず、壊れてしまっていたりするかもしれませんが、分解して新しく購入した「メカシシャ・クリエーター Mini-3765H」（一年前のモデル）にインストールしました。&lt;/p&gt;
&lt;p&gt;このマシンは、ハードウェアスペックも十分に強力で、2.5GデュアルLAN、PCIe4.0、Wi-Fi 6を搭載しています。&lt;/p&gt;
&lt;p&gt;最近引っ越しをして、部屋にルーターを個別に設置してネットワークを構築することができず、すべてのマシンが無線ネットワーク経由で接続されています。ASUSのマザーボードデスクトップPCの無線LANカードの性能はあまり良くなく、ルーターの無線アクセスポイント、ローカルエリア間のアップロード速度が遅いこともあり、マシン間での通信速度が不安定でした。そこで、2.5G NIC（ネットワークインターフェースカード）を購入し、デスクトップPCにインストールしました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これで、マザーボードのスロットはすべて埋まりました：グラフィックカード、無線LANカード、2.5G NIC、SSD PCIeアダプタ。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ネットワークの説明&#34;&gt;ネットワークの説明
&lt;/h2&gt;&lt;p&gt;両台の機器が元の無線LANに接続されているが、両台間をケーブルで直結し、両端に2.5G網カードを装着する。ケーブルで両台を直結する方法については、詳細は省略する（インターネット上には多くのチュートリアルがある）。ファイアウォールを必ず解除することに注意する。どちらか一方をゲートウェイとして使用すればよい。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[マシン1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;サブネットマスク: 255.255.255.0&amp;lt;br&amp;gt;デフォルトゲートウェイ: - &amp;lt;br&amp;gt;自動取得DNS] --&amp;gt;|ケーブル直結（2.5G）| B[マシン2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;サブネットマスク: 255.255.255.0&amp;lt;br&amp;gt;デフォルトゲートウェイ: 192.168.4.1&amp;lt;br&amp;gt;自動取得DNS];
    A --&amp;gt;|無線LANカード| Internet;
    B --&amp;gt;|無線LANカード| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二重網段測速&#34;&gt;二重網段測速
&lt;/h2&gt;&lt;h3 id=&#34;ルーティング局域網&#34;&gt;ルーティング局域網
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
接続先ホスト 192.168.3.237、ポート 5201 に接続
[  4] ローカル 192.168.3.122 ポート 1656 が 192.168.3.237 のポート 5201 に接続
[ ID] インターバル           転送     帯域幅
[  4]   0.00-1.00   秒  9.17 MB  76.7 Mbps
[  4]   1.00-2.00   秒  9.91 MB  83.2 Mbps
[  4]   2.00-3.00   秒  8.74 MB  73.3 Mbps
[  4]   3.00-4.00   秒 10.2 MB  85.2 Mbps
[  4]   4.00-5.00   秒  9.23 MB  77.1 Mbps
[  4]   5.00-6.00   秒  8.80 MB  73.9 Mbps
[  4]   6.00-7.01   秒  8.00 MB  66.8 Mbps
[  4]   7.01-8.00   秒  7.69 MB  64.9 Mbps
[  4]   8.00-9.01   秒  9.72 MB  81.1 Mbps
[  4]   9.01-10.01  秒  7.63 MB  63.6 Mbps
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] インターバル           転送     帯域幅
[  4]   0.00-10.01  秒 89.0 MB  74.6 Mbps                  送信元
[  4]   0.00-10.01  秒 89.0 MB  74.6 Mbps                  宛先

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;直連局域網&#34;&gt;直連局域網
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
接続 192.168.4.1 に、ポート 5201 を確立
[  4] ローカル 192.168.4.2 ポート 1524 が 192.168.4.1 のポート 5201 と接続
[ ID] インターバル           転送     帯域幅
[  4]   0.00-1.01   秒   178 MB   1.48 Gbps
[  4]   1.01-2.00   秒   204 MB   1.72 Gbps
[  4]   2.00-3.00   秒   214 MB   1.80 Gbps
[  4]   3.00-4.00   秒   229 MB   1.92 Gbps
[  4]   4.00-5.00   秒   202 MB   1.69 Gbps
[  4]   5.00-6.00   秒   213 MB   1.79 Gbps
[  4]   6.00-7.00   秒   230 MB   1.93 Gbps
[  4]   7.00-8.00   秒   192 MB   1.61 Gbps
[  4]   8.00-9.00   秒   220 MB   1.84 Gbps
[  4]   9.00-10.00  秒   230 MB   1.93 Gbps
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] インターバル           転送     帯域幅
[  4]   0.00-10.00  秒  2.06 GB   1.77 Gbps                  送信元
[  4]   0.00-10.00  秒  2.06 GB   1.77 Gbps                  宛先

iperf 終了
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wutongsuimeng.github.io/post/%E7%BB%99hugo%E6%B7%BB%E5%8A%A0mermaid%E6%94%AF%E6%8C%81/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HugoにMermaidを導入する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ASUS マザーボード Z490 のディスクが多すぎ、ランダムなディスクが認識されない。</title>
        <link>https://ttf248.life/ja/p/asus-z490-motherboard-disk-recognition-issues/</link>
        <pubDate>Fri, 10 Jan 2025 00:08:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/asus-z490-motherboard-disk-recognition-issues/</guid>
        <description>&lt;p&gt;前の文脈を踏まえ、突然無線LANアダプターが認識されなくなった問題が発生しました。パーティションを再構築する前に、インターネット上でも他の解決策を探しておりました。例えば、マザーボードの電池卸載や、電源を切って15分間待つなどの方法がありました。また、最新版のBOISドライバーへのアップデートも試しましたが、いずれもうまくいきませんでした。&lt;/p&gt;
&lt;p&gt;他に処理すべきことがあり、制限ネットワークに切り替えて、リビングから部屋へ網線を引き込んだところ、有線LANも認識されなくなりました。最終手段としてシステムを再インストールしたところ、パーティションのガイダンスが失われました。もし常に問題が発生していれば、これほど長く悩むことはありませんでした。華碩のマシンにおけるディスク競合は、偶発的なものであり、システムの再起動時に不安定な状態がトリガーとなるようです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先週、台式机に新しい长江存储（チャンジアン cunzhuo）の2TB SSD（M.2インターフェース）を追加したところ、マシンは再起動せず、昨日までシャットダウンすることができませんでした。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/asus-z490-motherboard-disk-recognition-issues/20250110002801.png&#34;
	width=&#34;553&#34;
	height=&#34;322&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ディスクフルハウス&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;システムの再インストール&#34;&gt;システムの再インストール
&lt;/h2&gt;&lt;p&gt;時間を作ってみると、もう2年もシステムを再インストールしていない。Cドライブが足りなくなってきた。Windows の古い問題や、日常的に使用するソフトウェアが Cドライブに何かを保存しようとする。そこで、システムを再インストールすることにした。システムを再インストールした後、ネットワークカードの問題はすべて正常になった。翌日には、開発環境を回復させることができ、システムのバックアップを作成するために、新たな問題が発生した。システムを再起動すると、ブートパーティションが失われた。
前回の記事の手順に従い、ブートパーティションを再構築したが、不安定で、再起動するとブートパーティションが読み込まれなくなる可能性がある。折詰機箱を分解しようかと思ったとき、ハードディスクケーブルが緩んでいることに気づいたが、何度か確認しても問題なかった。&lt;/p&gt;
&lt;h2 id=&#34;記憶の想起&#34;&gt;記憶の想起
&lt;/h2&gt;&lt;p&gt;数年前、この機械はSSDを一度増設した際、PCIe変換器（グラフィックカードのポートに接続）を使用していました。これは、直接マザーボードに取り付けるのではなく、変換器を通してHDDを取り付ける方法でした。今回、直接マザーボードに取り付けたのは、おそらくマザーボードの問題である可能性があります。
&lt;img src=&#34;https://ttf248.life/p/asus-z490-motherboard-disk-recognition-issues/20250110002148.png&#34;
	width=&#34;325&#34;
	height=&#34;545&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SSD変換器&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;59&#34;
		data-flex-basis=&#34;143px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;マザーボードマニュアル&#34;&gt;マザーボードマニュアル
&lt;/h2&gt;&lt;p&gt;マザーボードマニュアルに問題があり、記載されているSATAポートの位置と実際の位置が異なっております。ディスクの多さから、ポートにはすべてハードドライブが取り付けられており、古いSSDはSATAポートを使用しています。マニュアルでは、ポート間の競合が存在すると記載されています。しかし、実際にテストを行ったところ、この競合は不安定に発生し、発生すると対応するディスクを読み込めなくなります。ちょうどこれがシステムディスクであり、ブートローダーも同じディスク上に存在するため、システム起動時にブートローダーのロードに失敗します。
&lt;img src=&#34;https://ttf248.life/p/asus-z490-motherboard-disk-recognition-issues/20250110002401.png&#34;
	width=&#34;807&#34;
	height=&#34;847&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Z490&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;228px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;SSDをPCIe変換器に再インストールすることで、この問題を解決できます。その結果、マザーボード上のSATAポートとの競合が解消され、システム起動が正常に行われます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Windowsに付属のディスククリーンアップツール：ストレージ</title>
        <link>https://ttf248.life/ja/p/windows-disk-cleanup-storage/</link>
        <pubDate>Mon, 06 Jan 2025 19:29:45 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-disk-cleanup-storage/</guid>
        <description>&lt;p&gt;元のバージョンがいつからなのかは不明ですが、Windows 11 ではディスククリーンアップツールが大幅に改善され、よりスマートになっています。&lt;/p&gt;
&lt;p&gt;主な理由は、これが公式のツールであり、ファイルを誤って削除したり、広告が表示されたり、ポップアップが現れたり、バックグラウンドプロセスが実行されたり、不要なものが一切含まれていないことです。&lt;/p&gt;
&lt;p&gt;Windows 11 では、「設定」&amp;gt;「システム」&amp;gt;「ストレージ」&amp;gt;「一時ファイル」からディスククリーンアップツールを開くことができます。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;20250106194453.png&#34; &gt;ストレージインターフェースの画像&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通常ユーザーは「推奨のクリーニング」を選択するだけで、システムはあなたの使用状況に基づいていくつかの提案を行います。&lt;/p&gt;
&lt;p&gt;筆者である私のような開発者は、ディスク上に多くの一時ファイルがあるため、「一時ファイル」を選択し、Visual Studio や Windows Update などの一時ファイルを多く含んでいます。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;Snipaste_2024-12-19_13-39-51.png&#34; &gt;一時ファイルの画像&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Docker 国内イメージプロキシが失敗しました。</title>
        <link>https://ttf248.life/ja/p/docker-domestic-image-proxy-failure/</link>
        <pubDate>Sat, 04 Jan 2025 18:29:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/docker-domestic-image-proxy-failure/</guid>
        <description>&lt;p&gt;国内サーバーへのDockerデプロイで、会社がレジストリを提供していない場合、開発者が最初にやるべきことは、国内のレジストリミラーを設定することです。&lt;/p&gt;
&lt;p&gt;幸いにも今日、サーバー1台にミラー設定を行いましたが、イメージの取得中に常に取得できないという問題が発生しました。&lt;/p&gt;
&lt;p&gt;エラーメッセージ：&lt;code&gt;Error response from daemon: Get &amp;quot;https://registry-1.docker.io/v2/&amp;quot;: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2025年1月6日、隔日のうちにすべてのサーバーが復旧しました。この件は全く話題にならないとは信じられない。国内のすべてのレジストリミラーがダウンしていたのです&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;障害の切り分けと修復試行&#34;&gt;障害の切り分けと修復試行
&lt;/h2&gt;&lt;p&gt;当初、他のミラー加速アドレスに切り替えて問題を解決することを期待したが、予想とは裏腹に問題は依然として発生し続けた。&lt;/p&gt;
&lt;p&gt;次に、ローカルDNS設定を修正して、ネットワーク解析の側面から突破口を探ることを試みたが、結局、ある程度のデバッグを行った結果も、障害は解消されなかった。&lt;/p&gt;
&lt;p&gt;この時点で、ローカルネットワークの安定性が大きく疑われるようになり、そこで断念なく携帯電話のテザリングに切り替えて、潜在的なローカルネットワーク障害を回避することを試みた。しかし、結果は失望であり、問題の改善の兆候は見られなかった。&lt;/p&gt;
&lt;h2 id=&#34;問題の蔓延&#34;&gt;問題の蔓延
&lt;/h2&gt;&lt;p&gt;現在、国内に&lt;strong&gt;数台のサーバーがデプロイされており、すべてDocker環境がインストールされています&lt;/strong&gt;。これらのサーバーからイメージをプルすることを試みましたが、例外なく失敗し、返ってくるエラーメッセージも一様です。これは問題が特定のデバイスに限られたものではなく、広範囲に及んでいることを示唆しています。&lt;/p&gt;
&lt;p&gt;さらに調査した結果、イメージレポジトリのプロキシが瞬く間に停止していることが判明しました。この緊迫した状況下で、迅速に海外のサーバーを使用して試みましたが、幸いにもイメージのプルは正常に戻りました。これは問題が国内のネットワークリンクまたは関連設定にある可能性が高いことを意味します。&lt;/p&gt;
&lt;h2 id=&#34;戦略修正迂回戦術&#34;&gt;戦略修正：迂回戦術
&lt;/h2&gt;&lt;p&gt;国内での直接リポジトリ取得の経路が重く制限される中、海外のリポジトリは正常にアクセスできる状況を鑑み、プロジェクトを迅速に進めるため、迂回戦術を採用することにしました。まず、国外サーバーに切り替えて必要なイメージを取得し、その後、国内イメージレジストリにプッシュすることで、「データブリッジ」を構築します。
同時に、Dockerfileファイルに対しても修正を行い、イメージのURLを国内環境に適したアドレスに変更してから再ビルドを実行し、最終的に成功裏にデプロイしました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>野蛮資本時代の終焉：英雄聯盟eスポーツ時代終了</title>
        <link>https://ttf248.life/ja/p/end-of-league-of-legends-era/</link>
        <pubDate>Tue, 31 Dec 2024 07:19:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/end-of-league-of-legends-era/</guid>
        <description>&lt;p&gt;eスポーツ産業は、過去10年以上で急速な発展を遂げ、世界的に無視できない文化現象となっています。特に「League of Legends」（英雄伝説）（以下LOL）を代表するMOBAジャンルのゲームは、プレイヤーに競技の楽しさを提供するだけでなく、資本に強力な推進力を与え、一連のエスポーツプラットフォームやイベントの活発な発展を促進しました。しかし、これまでのすべてが資本の流入とエンターテイメント産業の台頭に伴い、徐々に衰退へと向かっています。パンダTVの隆盛と崩壊、斗鱼（ドウユー）と虎牙（ホアヤ）の競争は、「ワイルドキャピタル時代」の終焉を象徴し、eスポーツ業界の天時地利人和も変化の兆しが見えています。&lt;/p&gt;
&lt;h2 id=&#34;第一章電競の台頭と資本の注入&#34;&gt;第一章：電競の台頭と資本の注入
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 初期における電子競技：草根からプロ化&lt;/strong&gt;
初期の電竞産業は比較的草根的なスタートを迎え、特に中国市場においてはその傾向が顕著でした。多くのプレイヤーがゲームへの情熱を活かし，《星の衝突》（スタークラフト）やDotaといったゲームで競技に参加しました。しかし、電競の真の台頭は《英雄伝説》（League of Legends）の発表とプロモーションによって始まりました。2011年に《英雄伝説》が正式に中国市場に進出した後、電竞はニッチなコミュニティから徐々に大衆文化の一部へと発展していきました。特に2013年以降、LPL（中国プロリーグ）が段階的に形成され，《英雄伝説》が中国の電競産業における中心的な存在となりました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2 資本の異常な流入：熊猫TVと電竞ライブ配信プラットフォームの台頭&lt;/strong&gt;
2015年は中国の電競業界における分岐点となりました。資本の流入により、電競は単なる競技イベントからより巨大な産業チェーンへと進化しました。熊猫TVがその代表的な存在として、過剰な資本によって生まれたものとなりました。王思聰（熊猫ライブの創業者の一人）が投資した熊猫TVは、革新的なコンテンツと莫大な投資で多くの視聴者やユーザーを引きつけ、急速に台頭しました。しかし、これは資本の「無慈悲」な流入の典型例であり、市場への過度な追い求めは、忍耐力や長期的な視点を欠く結果をもたらすことがあります。熊猫TVの資金と人的資源への投資は短期的に一定の成果を上げたものの、管理の問題と資本への過剰依存により、2019年に破産しました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3 ライブ配信プラットフォームの競争：斗鱼と虎牙の「資本戦争」&lt;/strong&gt;
熊猫TVの崩壊は電競ライブ配信業界の衰退を引き起こさず、むしろ斗鱼（ドウユー）や虎牙（ホアヤ）といったプラットフォームの台頭を促しました。斗鱼と虎牙は二大ライブ配信プラットフォームとして電競業界のリーダーとしての地位を確立し、互いの競争はますます激化しました。斗鱼は初期に《英雄伝説》プロリーグのライブストリーミングやトップレベルのストリーマーへの契約を通じて、電競ライブ配信の基準となりました。一方、虎牙は電競イベントへの投資の拡大と自社のプラットフォームにおける多角的な展開によって、斗魚との差を徐々に縮小しました。&lt;/p&gt;
&lt;p&gt;この過程で、資本が再び大きな役割を果たしました。2018年に斗鱼が成功裏に株式公開（IPO）を実現し、虎牙も同年に行いました。資本の急速な流れは業界の高集中化をもたらし、プラットフォーム間におけるストリーマーや著作権などの分野での激しい競争を生み出し、「資本戦争」と呼ばれる状況を形成しました。&lt;/p&gt;
&lt;h2 id=&#34;第2章汎娯化とeスポーツの融合&#34;&gt;第2章：汎娯化とeスポーツの融合
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;2.1 汎娯化潮流：資金の流れが多様なエンターテイメントプロジェクトへ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;資本がeスポーツ業界に注力するにつれて、eスポーツプラットフォームの内容は汎娯化を遂げている。eスポーツ配信者は、試合解説やイベント生放送だけでなく、歌唱、ダンス、ライブインタラクションなど、さまざまなエンターテイメント形式へと展開している。プラットフォーム上のコンテンツはより豊富になり、eスポーツを核としつつ、多様なエンターテイメント要素を含むエコシステムが徐々に形成されている。&lt;/p&gt;
&lt;p&gt;しかし、汎娯化は問題も引き起こしている——eスポーツ本来の競技に焦点を当てた文化は徐々に後退し、エンターテインメント至上主義の流れが台頭してきた。この傾向により、かつてeスポーツを深く愛していた観客たちは離脱感情を抱き、資本も他のエンターテイメント分野へと目を向け始めている。過剰な資本の流入と利益追求により、eスポーツ産業の本質は徐々に曖昧になり、本来競技性を核とした価値理念が弱体化している。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 汎娯業界の台頭：資本の撤退と転換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ショートビデオプラットフォーム、ライブ配信プラットフォーム、娱乐圈など、他の汎娯業界の台頭とともに、資本は徐々にeスポーツからより広範なエンターテイメントコンテンツへと資金をシフトしている。この過程で、テンセント、アリババ、バイト跳動などの大手企業も、eスポーツプロジェクトのみに依存せず、映画、音楽、ショートビデオなどの分野への投資を拡大している。特にバイト跳動の台頭は、抖音（ドウイン）などのショートビデオプラットフォームの爆発的な成長により、eスポーツが他のエンターテイメントコンテンツによって覆い隠されるようになった。&lt;/p&gt;
&lt;h2 id=&#34;第3章英雄聯盟の青黄不接時代紅利の衰退&#34;&gt;第3章：英雄聯盟の「青黄不接」：時代紅利の衰退
&lt;/h2&gt;&lt;p&gt;2011年に《英雄聯盟》（League of Legends）が中国市場に参入以来、それは中国eスポーツ業界における代名詞となり、数多くのプロ選手、チーム、大会を創出し、巨大なeスポーツ産業を生み出した。しかし、十数年を経て，《英雄聯盟》は中国eスポーツのリーダー的存在として、「青黄不接」（青色でなくなりつつある）の段階に入っている。特に近年では，《英雄聯盟》の影響力は徐々に低下し、顕著な衰退の兆候が見られる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 プレイヤー群の「断層」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最も顕著な変化はプレイヤー群の断層である。当初、eスポーツの急速な発展は大量の青少年プレイヤーによる支持に依存しており、その多くが《英雄聯盟》を通じてプロ選手や観客となった。あのネット中毒の少年たちは、「時代紅利」（時代の恩恵）の下で育ち、LOL（League of Legends）をもたらす競技魅力に没頭し、それが業界全体の急速な拡大を推進した。しかし、時間の経過とともに、これらのプレイヤーは成長し、社会に進出し、他の生活や職業へと転向していった。同時に、新たな世代の若年プレイヤーは《英雄聯盟》に対する熱意が昔ほどではなく、eスポーツの受衆群は明確な年齢偏差と興味の低下を示している。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 ゲームコンテンツの「疲労」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《英雄聯盟》は何度もアップデートや改版を経て、依然として一定の競技魅力を維持しているものの、ゲーム自体のコンテンツイノベーションはやや力不足である。毎年発表されるバージョン更新、ヒーローバランス調整、新プレイスキルの導入などは、根本的にプレイヤーが求める新鮮さへの欲求を解決することができなかった。同時に、MOBA（マルチプレイヤーオンラインバトルアリーナ）ゲーム市場は飽和状態にあり、他のタイプのゲーム（例：王者荣耀（One Piece Unified Front）、和平精英（Game for Peace））が急速に台頭し、かつて《英雄聯盟》の顧客層であった大量のプレイヤーを奪っていった。このような競争状況により，《英雄聯盟》は常に「追従者」の役割から抜け出せない。&lt;/p&gt;
&lt;h2 id=&#34;結論eスポーツ産業の未来はどこへ向かうのか&#34;&gt;結論：eスポーツ産業の未来はどこへ向かうのか？
&lt;/h2&gt;&lt;p&gt;eスポーツ産業は、まるで空にそびえ立つ高楼のように、インターネット業界における過剰な資金が新たなトレンドを求めてさまよう中で生まれたものだ。そして、eスポーツ産業はそのターゲットの一つとして注目を集めている。国内の人口ボーナスを背景とした短期間での爆発的な成功を収めたものの、それは確固たる基盤の上に築かれたものではない。資本の過剰流入、人材の不足、ゲームコンテンツの衰退といった問題が、eスポーツ産業の健全な発展を阻害している。&lt;/p&gt;
&lt;p&gt;大学時代以前は、ゲームをプレイする時間がほとんどなく、リーグは一代一貫した成長を伴うものとして存在していた。総决赛を何本も見た経験から、傍観者としての視点から見ると、中韓の選手、特にFakerのような国内の選手が、大会期間中に常に緊張と不安を感じるのを理解している。もちろん、選手の心理的なプレッシャーは大きいことは承知している。しかし、この業界は10年以上も発展してきたにもかかわらず、選手の心理問題はチームによって十分に重視されておらず、その点に改善が見られない。国内の玩法は依然として、選手自身の才能に依存している。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>香港証券取引所、仮想通貨の発展史</title>
        <link>https://ttf248.life/ja/p/hong-kong-exchange-virtual-currency-history/</link>
        <pubDate>Tue, 31 Dec 2024 07:00:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-exchange-virtual-currency-history/</guid>
        <description>&lt;p&gt;王様再びがアメリカ大統領に選出され、仮想通貨も再び大衆の目に晒されることになった。香港証取引所（HKEX）は、関連事業の積極的な展開を行っており、ここではその概要を簡単に記録する。&lt;/p&gt;
&lt;p&gt;関連契約リストの詳細を確認すると、当初導入されたのは現物ではなく先物を意味しており、これは理にかなっている。なぜなら、先物の市場には流動性が高く、機関投資家の参入が容易だからだ。その後導入された現物ETFも、合理的な理由がある。それは、ETFがより受け入れられやすい投資ツールであるためである。&lt;/p&gt;
&lt;h2 id=&#34;仮想通貨リスト&#34;&gt;仮想通貨リスト
&lt;/h2&gt;&lt;p&gt;香港証取引所の市場データには、契約が仮想通貨であるかどうかを示す識別子が提供されていません。しかし、契約名から判断することができます。公式の取引リストには、対応するサブカテゴリ&lt;code&gt;virtualasset&lt;/code&gt;が提供されています。
&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2022年12月16日&#34;&gt;2022年12月16日
&lt;/h2&gt;&lt;h3 id=&#34;香港証券取引所アジア初の暗号資産etf上場を歓迎&#34;&gt;香港証券取引所、アジア初の暗号資産ETF上場を歓迎
&lt;/h3&gt;&lt;p&gt;香港物取結算所有限公司（香港証券取引所）は本日（金曜日）、アジア初の暗号資産ETFの上場を歓迎した。これにより、製品生態圏をさらに拡大し、香港および国際投資者にとってより多くの選択肢を提供する。&lt;/p&gt;
&lt;p&gt;本日上場された2隻の新規ETF—南方東英ビットコイン期貨ETF（証券コード：3066）と南方東英イーサリアム期貨ETF（証券コード：3068）は、南方東英資産管理有限公司によって運用され、それぞれシカゴ商品交易所（CME）で取引される標準化された、現金決済型のビットコイン先物合約およびイーサリアム先物合約を追跡する。&lt;/p&gt;
&lt;p&gt;香港証券取引所の最高運営責任者兼市場広報担当官である姚嘉仁氏は、「本日上場された暗号資産ETFは、香港の多様で急速に成長している取引所製品生態圏に新たな魅力を加える。これらの新商品がアジアで投資家にとってデジタル資産への投資機会を提供する初の試みであり、デジタル経済に対する当社の関心と市場の需要を反映している。今後数か月でさらにテーマ別ETFやデジタル資産の新商品を導入することを楽しみにしている」と述べた。&lt;/p&gt;
&lt;p&gt;ETFは、香港証券取引所の最も急速に成長している事業部門の一つであり、製品の種類は2022年に継続的に拡大し、多様化しており、年内に初のメタバースETF、初のカーボン先物ETF、初のブロックチェーンETFを上場させるとともに、初めてETFを滬深港通に組み込んだ。&lt;/p&gt;
&lt;p&gt;さらに、香港証券取引所の取引商品（ETP、ETFおよびレバレッジ・インバースETFを含む）の今年最初の11か月間の平均日次取引額は118億元となり、前年同期の78億元から50%増加した。これは、ETPxが投資家にとってますます人気が高まっていることを反映している。2022年11月時点で、香港証券取引所に上場されたETPxは合計168隻で、時価総額は3,735億元に達した。&lt;/p&gt;
&lt;h2 id=&#34;2024年4月30日&#34;&gt;2024年4月30日
&lt;/h2&gt;&lt;h3 id=&#34;香港交易所が初の仮想資産現物etf上場を歓迎&#34;&gt;香港交易所が初の仮想資産現物ETF上場を歓迎
&lt;/h3&gt;&lt;p&gt;香港取引結算有限公司（香港証券取引所）は本日（火曜日）、アジア初の仮想資産現物ETFの上場を歓迎しました。これにより、香港市場の製品の種類が増加し、投資家にとってより豊富な選択肢を提供することで、香港をアジアにおける主要なETF市場としての地位を強化します。&lt;/p&gt;
&lt;p&gt;香港証券取引所の証券商品開発責任者であるロバジン氏は、「本日上場された仮想資産現物ETFは、香港証券取引所の多様かつ活発なETF市場生態圏を豊かにし、投資家にとって新たな資産クラスへの投資機会を提供します。1年前の成功に続き、アジア初の仮想資産現物ETFが、香港証券取引所の売買製品の種類と流動性をさらに向上させます。今後も市場関係者との緊密な連携を通じて、国際的な市場においてより多くの新製品を導入していくことを期待しています。」と述べています。&lt;/p&gt;
&lt;p&gt;最初の仮想資産先物ETFは2022年に上場後、投資家の関心を集め、活発に取引されてきました。香港で上場されている3つの仮想資産先物ETFの日平均取引量は、2023年の890百万から2024年第1四半期には5,130百万へと増加し、同時に5.29億元の資金流入も吸引しました。&lt;/p&gt;
&lt;p&gt;取引所売買商品（ETF、レバレッジ、インバースETFなど）は、香港証券取引所の成長が最も速い市場の一つであり、過去1年で製品の種類が継続的に増加しています。2023年および2024年第1四半期に上場された16隻のETFには、アジア初のサウジアラビアETF、香港初のデリバティブ付与型予約購入オプションETFが含まれており、現在香港証券取引所に上場されているETFは合計179隻です。&lt;/p&gt;
&lt;h2 id=&#34;2024年10月28日&#34;&gt;2024年10月28日
&lt;/h2&gt;&lt;h3 id=&#34;香港証券取引所が仮想資産指数シリーズを導入&#34;&gt;香港証券取引所が仮想資産指数シリーズを導入
&lt;/h3&gt;&lt;p&gt;香港取引及結算所有有限公司（香港証券取引所）は本日（月曜日）、2024年11月15日に香港証券取引所仮想資産指数シリーズ（以下、「指数シリーズ」と略称）を導入することを発表しました。これは、急速に成長している仮想資産という資産クラスに対し、信頼できる基準価格を提供し、香港がアジアにおける主要なデジタル資産センターとしての発展を支援することを目的としています。&lt;/p&gt;
&lt;p&gt;この指数シリーズは、アジア時間におけるビットコインおよびイーサリアムの価格設定において、透明性と信頼性の高い基準となるように設計されており、グローバルな取引所間の価格変動を解消することを目指します。&lt;/p&gt;
&lt;p&gt;香港証券取引所グループの行政总裁陳翊庭氏は、「本日の指数シリーズの導入に大変喜んでおります。地域におけるこの急速に成長している資産クラスへの需要に応えるものです。透明性と信頼性の高いリアルタイム基準を提供することで、投資家が合理的な投資判断を行い、仮想資産のエコシステムが健全な発展を遂げ、香港が国際金融センターとしての地位を確立することを支援できると信じております」と述べました。&lt;/p&gt;
&lt;p&gt;この指数シリーズの導入は、香港証券取引所が新たな分野を探求する取り組みの一環であり、香港の金融技術（FinTech）の開発を支援すると同時に、変化し続ける市場環境において投資家にとって重要な基準ツールおよび解決策を提供します。&lt;/p&gt;
&lt;p&gt;この指数シリーズには、ビットコインおよびイーサリアムの参考指数と、参考為替レートが含まれます。&lt;/p&gt;
&lt;p&gt;参考指数は、ビットコインまたはイーサリアムの24時間取引量加重の現物価格に基づいて計算され、主要な仮想資産取引所からの集約された市場価格を参考に算出されます。これらの数値は、香港時間を基準に即座にドルで表示されます。また、参考為替レートは、金融商品の決済を目的として設計されており、香港時間午後4:00に計算されます。&lt;/p&gt;
&lt;p&gt;この指数シリーズは、欧州連合（EU）の基準法規（BMR）に準拠した初の仮想資産指数シリーズとなり、英国に登録された基準管理機関と仮想資産データおよび指数プロバイダーであるCCDataが共同で管理・計算を行います。&lt;/p&gt;
&lt;p&gt;香港特別行政区政府は2022年に仮想資産の開発に関する政策声明を発表し、香港において活気ある仮想資産産業およびエコシステムを育成することを目指しています。香港証券取引所仮想資産指数シリーズの導入により、リアルタイムデータとアジア時間における日次参考価格を提供することで、一般市民が仮想資産投資トレンドに対する理解を深めるのに役立ちます。&lt;/p&gt;
&lt;p&gt;この指数シリーズのデザインと計算方法に関する詳細については、随時公開されます。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>価格が下がった、価格が下がった、国内の超大型ETFが大量に価格調整を行った。</title>
        <link>https://ttf248.life/ja/p/etf-fees-cut-china/</link>
        <pubDate>Thu, 21 Nov 2024 03:08:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/etf-fees-cut-china/</guid>
        <description>&lt;p&gt;華泰柏瑞沪深300ETFなどに関する公告で、総合手数料を同業他社最安値に引き下げました。&lt;/p&gt;
&lt;p&gt;11月19日、華泰柏瑞基金は、投資家および資産形成ニーズのより良い充足のために、&lt;code&gt;11月22日から開始し&lt;/code&gt;、華泰柏瑞沪深300ETFとその関連ファンドの運用管理手数料および信託手数料を減額し、関連ファンド契約内容を修正しました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;変更後、華泰柏瑞沪深300ETFとその関連ファンドの年間運用管理手数料は0.15%に、年間信託手数料は0.05%にそれぞれ引き下げられ、すべてインデックスファンドの最安値帯に設定されました。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ほぼ同時期、業界上位規模の華夏沪深300ETF、華夏上證50ETF、南方中证500ETF、嘉实沪深300ETF、易方達创业板ETFなども管理手数料および信託手数料を減額する公告を出しており、手数料はすべて0.15%と0.05%に設定されています。&lt;/p&gt;
&lt;p&gt;これまでの多くのETFの減価金減額とは異なり、今回は規模優位の品種が主体的に動き出したことで、業界への影響は大きくなる見込みです。証券取引所によると、11月18日時点で、華泰柏瑞沪深300ETFの規模は3700億元を超え、現在市場で最も規模が大きいETFとなっています。&lt;/p&gt;
&lt;p&gt;最大規模のスーパーETFが最初に減価金減額を実施したことは、投資家への利益還元する積極的な意思を示すとともに、投資家がより高い性价比で人気があり流動性の良いファンドに投資することを可能にします。&lt;/p&gt;
&lt;p&gt;業界の見解では、規模優位のETFによる減価金減額は、公募基金を通じた金融サービスの機能を発揮し、投資家の保有コストを削減し、収益性を高め、投資満足度を高めるのに役立ちます。&lt;/p&gt;
&lt;p&gt;また、低手数料は製品自体の競争力をさらに高め、流動性虹吸効果とコスト運営上の優位性が加わると、製品はより多くの中長期増額資金を引き付ける可能性があり、「長投長持」の良好な生態系を構築するのに役立ちます。&lt;/p&gt;
&lt;p&gt;近年、取引の柔軟性、透明性の高さ、流動性の強さ、投資ハードルが低いなど、独自の利点により、広範指数ETFは資金の低位流入と「長投長持」の主要なチャネルとなっています。&lt;/p&gt;
&lt;p&gt;今回の減価金減額は、ある程度「加速器」となり、A股市場への長期資金の流入をよりスムーズにする可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;跋談&#34;&gt;跋談
&lt;/h2&gt;&lt;p&gt;筆者が定投している天弘ファンドはまだ公告が出ていませんが、追跡されるべきです。もし更新されない場合は、他のファンドへの変更を検討する必要があります。
元の手数料：0.5%、委託手数料：0.1%。新手数料：0.15%、委託手数料：0.05%。この割引幅はかなり大きいです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>三者上場投資顧問の規制が強化され、「抖音（ティックトック）株取引」の裏で利益を上げた人物たちが取り締まりを受ける見通しとなりましたか？</title>
        <link>https://ttf248.life/ja/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</link>
        <pubDate>Thu, 21 Nov 2024 02:59:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;巨大なハンマーが落下する。&lt;/li&gt;
&lt;li&gt;金融アドバイザーサービスがショート動画の風を追い風に、または加速車道に乗ろうとしている。&lt;/li&gt;
&lt;li&gt;今年9月の下旬、A株市場は熱狂的な情熱を示した後、抖音の推奨投資が各方面からの注目を集めた。&lt;/li&gt;
&lt;li&gt;複数の金融系ストリーマーが抖音で人気を獲得し、間接的に資本市場に一定の変動をもたらした。&lt;/li&gt;
&lt;li&gt;しかし、急速に人気を博している多くの金融系ストリーマーの裏には見過ごせない力がある。それは、サードパーティ型金融アドバイザーサービス会社だ。&lt;/li&gt;
&lt;li&gt;調査によると、多くのサードパーティ型金融アドバイザーサービス会社は、ショート動画での複数のアカウント運営を通じて投流を活用してユーザーが投資教育ビデオを見るようにし、関連する金融アドバイザー製品の購入熱意を高めている。&lt;/li&gt;
&lt;li&gt;さらに、あるサードパーティ型金融アドバイザーサービス会社は、今年10月にすでに10億元を稼ぎ出し、今年の上半期の収入を上回ったという噂もある。&lt;/li&gt;
&lt;li&gt;しかし、「好日」はより多くの不確実性に直面している。&lt;/li&gt;
&lt;li&gt;11月以来、複数の省庁が連名で、証券サービス機関に対し、自媒体アカウントのコンプライアンス管理を強化するように求めた。&lt;/li&gt;
&lt;li&gt;11月15日の夕方、同花顺（300033.SZ）は、子会社がライブビジネスにおける個股推奨などの行為を含むため、証券規制委員会から罰款を受けたことを発表した。&lt;/li&gt;
&lt;li&gt;これは市場に厳格な規制の信号を伝えているのかもしれない。&lt;/li&gt;
&lt;li&gt;九方智投（9636.HK）をはじめとする多くのサードパーティ型金融アドバイザーサービス機関の展開も、より多くの圧力に直面するだろう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;厳密な監督が注目されるライブ配信&#34;&gt;厳密な監督が注目されるライブ配信
&lt;/h2&gt;&lt;p&gt;TikTokなどの短動画プラットフォームの台頭により、感情的な声が強調され、間接的に取引行動に影響を与えている。&lt;/p&gt;
&lt;p&gt;巨量算数によると、9月27日から10月8日の成交額が創高を記録した期間において、抖音A株キーワード検索指数は423.84万から1277.86万へと、実に2倍以上に膨張した。&lt;/p&gt;
&lt;p&gt;このような状況下で、サードパーティの投資アドバイザー機関が「波を起こし助ける」行為に注目が集まっている。&lt;/p&gt;
&lt;p&gt;投資アドバイザーの職員がライブ配信を通じて様々な方法で個別の株式を推奨することは、高頻度の違反行為である。&lt;/p&gt;
&lt;p&gt;11月8日、広東証券監理局は、ある企業のライブ配信において、「個別株式の暗示的推奨」などの状況が存在することに対し、新規顧客の追加を一時停止する規制措置を実施した。&lt;/p&gt;
&lt;p&gt;11月14日午後、広東証券フューチャーズ協会は、「ライブ配信における管理体制の不備により、機関が業務停止処分を受けた」と発文し、一部の有証券投資アドバイザー資格を持つ機関がライブ配信での事業展開において、管理体制が不十分であったことや、ライブ配信中に個別の株式を推奨したことを指摘した。&lt;/p&gt;
&lt;p&gt;広東証券フューチャーズ協会は、「ライブ配信における推奨株行為を厳禁する」と表明した。ライブ配信は公共メディアの伝達手段であり、ライブ配信者（セクטור投資アドバイザーとして登録されているかどうかに関わらず）、ライブ配信中に個別の株式を推奨してはならない。」&lt;/p&gt;
&lt;p&gt;これは例外ではない。&lt;/p&gt;
&lt;p&gt;11月7日に上海証券監理局が公開した罰金通知には、また、ソーシャルメディアプラットフォームで違法に株式を推奨する事例も含まれていた。&lt;/p&gt;
&lt;p&gt;規制当局の調査の結果、海顺证券投資顧問有限公司上海分社の投資アドバイザーである王永は、微信视频号を通じて誤解を招く動画コンテンツを公開し、これは専門家の規範に反していた。&lt;/p&gt;
&lt;p&gt;上海証券監理局は、この件について、王永に対して警告書を発行する監督管理措置を実施した。&lt;/p&gt;
&lt;p&gt;信風（ID:TradeWind01）によると、資格のない投資アドバイザー機関が、抖音で券商を介して株式を推奨しているケースもあり、現在では配信が停止されている。&lt;/p&gt;
&lt;p&gt;「業界の有人が抖音でライブ配信を行っているのは、実際には券商の下に位置付けられており、これにより投資アドバイザーの資格を得ることができ、オンラインでのライブ配信を通じて顧客を引きつけ、オフラインで投資アドバイザー製品を販売している。」華南の一人の投資アドバイザーは信風（ID:TradeWind01）に説明した。「しかし、ライブ配信中に株式を推奨されたため発覚し、配信が停止された。正規の券商は、セクטור状況についてライブ配信で説明するだけで、個別の株式については言及しない。」&lt;/p&gt;
&lt;p&gt;現在、規制当局はソーシャルメディアにおける違法な株式推奨に対して高い注意を払っている。&lt;/p&gt;
&lt;p&gt;例えば、深圳証券監理局は最近、業界内で一部の機関や個人が自媒体を通じて違法に株式を推奨するなど、違反行為が発生していることを通知した。これは、辖区证券投資咨询机构の自媒体運営管理をさらに規範するために、各機関が自媒体の運営管理をさらに強化する必要があるためである。&lt;/p&gt;
&lt;p&gt;これにより、サードパーティの投資アドバイザーサービスの事業展開には、より多くの課題が生じる可能性がある。&lt;/p&gt;
&lt;h2 id=&#34;トラフィックビジネスは誤り&#34;&gt;「トラフィックビジネス」は誤り
&lt;/h2&gt;&lt;p&gt;ショート動画に惹かれて参入した投資家たちが儲かるのかどうかは不明だが、水供給業者としてのサードパーティ投顧サービスの二级市場での評価はすでに急騰している。
「オンライン投教第一の株式」である九方智投の時価総額は、今年9月初めの28.78亿元から、11月13日の終値で124.64亿元に急騰し、49回の取引日で既に333.08%の大幅上昇となっている。
半期報告書によると、今年の上半年九方智投は抖音（ドウイン）、小紅書（シャオホンシュー）などのソーシャルメディアプラットフォームでブランド露出を行い、今年6月末までにすでに488のアカウントと0.46億人のフォロワーを獲得した。
例えば、九方智投の首席投資顧問である「洪帮主（ホン・ハンブ）」の抖音上のフォロワー数は226万人を誇る。
「当社はMCN運営に深く取り組んでおり、ユーザー中心で、流量、ブランド、製品の包括的な発展を促進しています。」九方智投は指摘する。「ライブ配信、ショート動画などの新メディアツールとの深い融合を通じて、AI技術を活用し、ファンネットワークを構築し、積極的により効果的なeコマースモデルを探求することで、流量の効率的な変換を実現します。」
九方智投の投顧コースパッケージは数十元から十数万元まで幅広い価格帯をカバーしている。中でも最も高価なコースパッケージである「スーパー投資家」は、半年で13.96万元とされており、独占的な見解や投顧私享サービスなどが含まれている。
ただし、九方智投の投顧商品の返品率は10%以上となっている。
2024年の上半期には、九方智投のフラッグシップシリーズ、九方智投擒龍（チンロン）シリーズの返品率はそれぞれ14.7%、18.5%に達した。
しかし規制嵐の下で、九方智投の展開が影響を受けるかどうかが引き続き注目される。
最近、メディアは九方智投などのサードパーティ投顧会社旗下のアカウントが影響を受けていることを報道している。
11月7日、あるメディアは「洪帮主」がライブ配信を一時停止されたと報じた。
しかし11月15日の夕方、信風（ID:TradeWind01）がそのアカウントを検索したところ、「洪帮主」のライブ配信インターフェースで依然として11月18日のライブ配信を予約することができた。
同時に、関係機関が九方智投を検査しているという市場消息も伝わった。
しかし、九方智投に近い人物は信風（ID:TradeWind01）に、その検査は通常の検査であり、すでに完了したと述べた。
これは最近巻き込まれた規制嵐の一例ではない。
同花順（トウカシュン）も非法勧誘投資で立案され、営業を一時停止する可能性があるという報道があった。
これに対し、同花順は11月15日に「違法な勧誘投資の状況はなく、調査を受けているわけではありません」と回答した。
しかしその夜、同花順は子会社である浙江同花順雲ソフトウェア有限公司がライブビジネスプロモーション中にコンプライアンス管理が不十分であり、個別の株式を推奨するような状況にあったため、浙江証券局から3ヶ月間の新規顧客の追加停止などの制裁を受けたことを発表した。
これは、短動画プラットフォーム上の勧誘投資コンテンツに対する規制当局の関心のさらなる高まりを意味している可能性がある。
実際、ショート動画のケーキは多くの証券会社を引き付けたが、コンプライアンス要件に限定されるため、現在、証券会社はこれに対して比較的慎重になっている。
ある証券会社の人物は、同社が短動画運営やリードジェネレーションの方法を探求し、人員を短動画プラットフォーム会社に派遣して学習を行っていることを伝え、コンプライアンス要件により、現在も探索段階にあると述べた。
規制当局のさまざまなコンプライアンス要件の背後には、短動画プラットフォームの内容が明確な感情的色彩を持っていることがあり、投資は市場参加者が理性的に対応する必要があり、これら二つには天然の対立がある。
もし放漫行為の影響で資本市場が激しく変動すると、資本市場の長期的な健全な発展に反する。
証券免許機関は、短縮された時代への到来をどのような方法で受け入れ、レッドライン&lt;/p&gt;
</description>
        </item>
        <item>
        <title>CentOS 8 Stream EOL</title>
        <link>https://ttf248.life/ja/p/centos-8-stream-eol/</link>
        <pubDate>Sat, 16 Nov 2024 23:24:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/centos-8-stream-eol/</guid>
        <description>&lt;p&gt;&lt;code&gt;CentOS Stream&lt;/code&gt;は、レッドハットのエンタープライズ向け&lt;code&gt;Linux&lt;/code&gt;ディストリビューションの前段のオープンソース開発プラットフォームです。&lt;/p&gt;
&lt;p&gt;初めてオープンオペレーティングシステムのライフサイクル&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/redhat-centos-lifecycle/&#34; &gt;redhat and centos life cycle&lt;/a&gt;に注目したのが、この時期でした。&lt;/p&gt;
&lt;p&gt;期限が切れ、何か問題があるのでしょうか？セキュリティの問題以外にも、dnfが使えなくなってしまい、最近ツールをインストールする際に、dnfが失敗するという問題を調べたところ、&lt;code&gt;CentOS 8 Stream&lt;/code&gt;が期限切れだったことがわかりました。&lt;/p&gt;
&lt;h2 id=&#34;centos-stream-の紹介&#34;&gt;CentOS Stream の紹介
&lt;/h2&gt;&lt;h3 id=&#34;位置と役割&#34;&gt;位置と役割
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、Fedora Linux（上流開発）とRHEL（Red Hat Enterprise Linux、下流開発）の中間に位置し、その橋渡し役を担っています。
最新のRed Hat系Linuxの機能を試すためのバージョンとして利用でき、ベータ版やプレビュー版としての活用に適しています。&lt;/p&gt;
&lt;h3 id=&#34;出身と背景&#34;&gt;出身と背景
&lt;/h3&gt;&lt;p&gt;時間の経過とともに、Red Hat社はエンタープライズ向けLinuxプラットフォームの発展方法についてより効果的な方法を模索し始め、CentOS Streamを発表しました。
‌CentOS 8が2021年末にメンテナンスを終了した後、CentOS Streamはその後継者として更新され続け、CentOSプロジェクトの将来的な開発方向となりました。&lt;/p&gt;
&lt;h3 id=&#34;特徴と利点&#34;&gt;特徴と利点
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、継続的リリース（ローリングリリース）のLinuxディストリビューションであり、より迅速なアップデートを提供します。コミュニティ、パートナー、顧客への参加を促進し、透明性を高め、ユーザーがRed Hat Enterprise Linux (RHEL) に貢献するための機会を増やします。
CentOS Streamの内容は、Red Hatが次期安定版RHELに含める予定のソフトウェアであるため、コミュニティメンバーには安定したABI/APIを使用した開発およびテストのための基盤を提供します。&lt;/p&gt;
&lt;h3 id=&#34;利用シーンとターゲットユーザー&#34;&gt;利用シーンとターゲットユーザー
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、最新のLinux機能アップデートを継続的に取得したいCentOSユーザーや、Red Hat Enterprise Linuxの開発に参加する開発者およびパートナーに適しています。&lt;/p&gt;
&lt;p&gt;また、コミュニティメンバー、Red Hat パートナー、その他の人々が、より安定かつ予測可能なLinuxエコシステムで革新的なオープンソースプログラムを最大限に活用できるよう支援することを目的としています。&lt;/p&gt;
&lt;h2 id=&#34;最終期限httpsendoflifedatecentos-stream&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://endoflife.date/centos-stream&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最終期限&lt;/a&gt;
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;リリース&lt;/th&gt;
&lt;th&gt;公開日&lt;/th&gt;
&lt;th&gt;サポート期間&lt;/th&gt;
&lt;th&gt;セキュリティサポート&lt;/th&gt;
&lt;th&gt;最新&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3年前 (2021年9月15日)&lt;/td&gt;
&lt;td&gt;2年6ヶ月後 (2027年5月31日)&lt;/td&gt;
&lt;td&gt;2年6ヶ月後 (2027年5月31日)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;最終期限httpsendoflifedatecentos-stream-1&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://endoflife.date/centos-stream&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最終期限&lt;/a&gt;
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;リリース&lt;/th&gt;
&lt;th&gt;公開日&lt;/th&gt;
&lt;th&gt;サポート期間&lt;/th&gt;
&lt;th&gt;セキュリティサポート&lt;/th&gt;
&lt;th&gt;最新&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5年前 (2019年9月24日)&lt;/td&gt;
&lt;td&gt;終了済み (2024年5月31日)&lt;/td&gt;
&lt;td&gt;終了済み (2024年5月31日)&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ソリューション&#34;&gt;ソリューション
&lt;/h2&gt;&lt;p&gt;アップグレードの手間を省き、長期サポート版の &lt;code&gt;Ubuntu 24.04&lt;/code&gt; を採用しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hugo モジュールカスタムテーマの修正：考え方の解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を調べてみたところ、サイトが何度もテーマを変更しており、毎回いくつかのカスタム設定を適用していた。そこで、カスタム設定の変更方法を記録しておく。私のGitHubには「even」というテーマがあり、短期間メンテナンスを行っていたが、最新版のHugoコンパイラへのアップグレードを強行した結果、互換性が失われ、最終的に「stack」テーマに切り替えてしまった。&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化について言及する際、NginxモジュールやIDEAプラグインなどを思い浮かべる人が多いでしょう。 通常は、私がいくつかのモジュールをアップロードすることで、私の独自のニーズを満たすことができます。 モジュールが広く受け入れられる理由は、十分に柔軟で、あまり労力をかけずに自分のニーズを満たせることです。 多くの場合は、大体同じように見えるものの、細部には常に違いがあるからです。 これはソフトウェアの複雑さを物語っており、技術的な複雑さだけでなく、ビジネス上の複雑さも含まれます。 大多数の場合、私たちが直面しているのはビジネスの複雑さです。 これこそが、「隔行如隔山」という俗語を最もよく表すものです。&lt;/p&gt;
&lt;p&gt;現在では、インターネット業界だけでなく、金融業界、さらには伝統的な製造業まで、情報化システムを使用して企業の生産と管理を支援しています。 同じ「休暇申請システム」でも、同じ業界の異なる企業間には違いがあります。&lt;/p&gt;
&lt;p&gt;そして&lt;code&gt;Hugo&lt;/code&gt;のモジュールは、皆さんがイメージするモジュールとは少し異なります。 機能単位で独自のニーズを満たすのではなく、ディレクトリ構造を主に使用して、共通の構造を認識します。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugoアーキテクチャ — Hugoのモジュール&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; 方式も引き続き使用できますが、本記事では推奨されません。 テーマを導入した場合、更新が発生するとメンテナンスが煩雑になり、個別の git リポジトリでテーマを管理する必要があるためです。&lt;/p&gt;
&lt;h2 id=&#34;テーマの修正ロジック-httpsstackjimmycaicomguidemodify-themehttpsstackjimmycaicomguidemodify-theme&#34;&gt;テーマの修正ロジック (&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stack.jimmycai.com/guide/modify-theme&lt;/a&gt;)
&lt;/h2&gt;&lt;p&gt;前面モジュール化の基礎概念を理解した上で、カスタムテーマを理解すると、それほど難しくありません。&lt;code&gt;hugo&lt;/code&gt; の現在のテーマも、複数の異なるモジュールを組み合わせて構成されています。あるモジュールを変更したい場合は、対応するテンプレートファイルを検索し、修正すればOKです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; 公式ドキュメントからの抜粋：&lt;/p&gt;
&lt;p&gt;この方法を使用すると、&lt;code&gt;themes&lt;/code&gt; ディレクトリの下にファイルは存在しません。テーマを修正するには、変更したいファイルを同じディレクトリにある &lt;code&gt;layouts&lt;/code&gt; ディレクトリにコピーする必要があります。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; ファイルを変更する場合は、それを &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; にコピーし、そこから修正します（テーマのリポジトリからコードをコピー）。&lt;code&gt;assets&lt;/code&gt; と &lt;code&gt;static&lt;/code&gt; ディレクトリについても同様です。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルの場所を見つける方法&#34;&gt;テンプレートファイルの場所を見つける方法
&lt;/h2&gt;&lt;h3 id=&#34;従来の思路&#34;&gt;従来の思路
&lt;/h3&gt;&lt;p&gt;テーマのソースファイルを確認し、テーマのデザイン思想を理解し、対応するテンプレートファイルを修正します。&lt;/p&gt;
&lt;h3 id=&#34;蛮力的なアプローチ&#34;&gt;蛮力的なアプローチ
&lt;/h3&gt;&lt;p&gt;私はフロントエンドのコードがあまり理解していないため、時には手動で対応することがあります。例えば、関連するページをブラウザで開き、修正したい箇所を見つけ、&lt;code&gt;要素を検査&lt;/code&gt;を使ってCSS名（&lt;code&gt;css name&lt;/code&gt;）を特定し、ソースコード内で検索して該当ファイルを抽出し、それをサイトディレクトリにコピーして変更します。&lt;/p&gt;
&lt;h2 id=&#34;スニppets&#34;&gt;スニppets
&lt;/h2&gt;&lt;p&gt;公式サイトでデフォルトのファイルが用意されており、カスタマイズが必要な箇所は、複数のファイルに分割して &lt;code&gt;custom.scss&lt;/code&gt; ファイルをインポートすることで、よりスタイルの管理を効率化できます。
&lt;img src=&#34;https://ttf248.life/p/hugo-module-customizing-themes-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;修正内容まとめ6時間&#34;&gt;修正内容まとめ（6時間）
&lt;/h2&gt;&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な変更点を以下に列挙します。本サイトで行った修正内容としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定などがあり、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応できました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを引き継ぎ、中国語に最適化&lt;/li&gt;
&lt;li&gt;首页：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;首页：記事に概要プレビュー（手間のかかる方法で実現）を追加&lt;/li&gt;
&lt;li&gt;スクロールバー：スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;コードブロック：&lt;code&gt;highlight.js&lt;/code&gt; を導入し、コードブロックのスタイルを美化&lt;/li&gt;
&lt;li&gt;文章詳細：一部コンテンツが転載であるため、原作者情報と元のリンクを表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：トップのカテゴリ画像にテーマ自带の色付きマスクを削除し、元の画像を表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：年単位でのカテゴリ分類の統計表示パネルを追加&lt;/li&gt;
&lt;li&gt;アーカイブページ：2列表示レイアウト
&lt;code&gt;stack&lt;/code&gt; テーマのコンポーネント再利用率が高いため、首页の記事への概要プレビュー追加に時間がかかりました。対応するコンポーネントを変更したことで、記事の詳細ページの変更も引き起こされ、正文が重複して表示される問題が発生しました。&lt;code&gt;golang テンプレート&lt;/code&gt; の構文はあまり馴染みがないため、多くの時間を費やし、コンポーネント間のパラメータ伝達を解決することができませんでした。最終的には、巧みに手段として、ホームページに独自に &lt;code&gt;JavaScript&lt;/code&gt; スクリプトを導入し、カスタムの特殊変数を通じて概要プレビューを実現しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;コード再利用率が高すぎる場合も問題であり、変更を加えることで他の場所にも影響が及ぶ可能性があるため、テーマを変更する際には注意が必要です。元のロジックを壊さないようにしてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;このイケメンさんの修正はより洗練されています：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;
&lt;del&gt;本サイトではシンプルな形で &lt;code&gt;Waline&lt;/code&gt; 评论システムを導入しており、&lt;code&gt;stack&lt;/code&gt; テーマがデフォルトで &lt;code&gt;Waline&lt;/code&gt; をサポートしているため、&lt;code&gt;config.toml&lt;/code&gt; に設定するだけです。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ホームページへのメール連絡の推奨、本サイトではコメント欄は開放していません&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>県庁の婆羅門：地方における「大物」</title>
        <link>https://ttf248.life/ja/p/county-brahmins-big-shots-in-small-towns/</link>
        <pubDate>Wed, 13 Nov 2024 23:02:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/county-brahmins-big-shots-in-small-towns/</guid>
        <description>&lt;p&gt;最近抖音上の大氷老師（だいひょうし）さんが非常に人気があり、よく動画の切り抜きアカウントを見かける。これらは主にライブ配信の内容だ。あるリスナーがボイスチャットで質問した。「大氷先生、西安の家を売って、故郷に戻って楽な暮らしにしたいのですが。」大氷先生は答えた。「あなたの年齢なら、30代半ばで、楽な暮らしにはならない。ご両親は年老いており、お子さんはまだ独立していない。故郷に戻れば、小県城（しょうけんじょう）の婆羅門（ばろもん）に対しても対応しなければならない。」&lt;/p&gt;
&lt;p&gt;先ほど述べたように、意見が正しいかどうかはさておき、&lt;code&gt;婆羅門&lt;/code&gt;という言葉の意味は何でしょうか？&lt;/p&gt;
&lt;h1 id=&#34;県都の婆羅門地方における大物&#34;&gt;&lt;strong&gt;県都の婆羅門：地方における「大物」&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;多くの小県城（けんじょう）では、人々はしばしば「県都の婆羅門」（けんとうのはらもん）と呼ばれる人物について語る。「婆羅門」たちは、地方社会の一種シンボルのように存在し、必ずしも真の宗教家でも、「高大上」（こうだいじょう）な肩書きを持つ者でもなく、一見普通だが重要な役割を担う人々である。彼らは小地方における「権力、地位、そして発言力」を代表し、その県城（けんじょう）内のある階層の象徴となっている。&lt;/p&gt;
&lt;h2 id=&#34;県都婆羅門とは何か&#34;&gt;&lt;strong&gt;「県都婆羅門」とは何か？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;まず、最初に「婆羅門」は本来、インド社会における最高階層を指し、知恵、権威、精神的な至高を表していました。しかし、中国の県城（けんじょう）の中では、「県城婆羅門」という言葉にはそれほど複雑な宗教的背景はなく、むしろ社会現象の一種を比喩的に表現したものです。&lt;/p&gt;
&lt;p&gt;簡単に言うと、「県城婆羅門」とは、県城の中で「文化的な権威」と呼ばれる存在であり、例えば教師、医師、地元の著名な商人、役人などが該当します。彼らの地位は一見平凡に見えますが、県城という比較的閉鎖的な環境においては、相対的に高い社会的な地位を占めているか、あるいは、彼らの意見や行動が地元で無視できない影響力を持つことがありました。&lt;/p&gt;
&lt;h2 id=&#34;県城の婆羅門とは&#34;&gt;&lt;strong&gt;「県城の婆羅門」とは？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;県城（けたしろ）に住むほとんどの業界で、そうした「婆羅門」（ばろもん）が存在する。彼らは以下のような存在かもしれない：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;教育者&lt;/strong&gt;: 特に地方で長年教えた教師たち。必ずしも名校出身ではないかもしれないが、知識を通して威信を築き上げ、広く尊敬されている。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地方政府職員&lt;/strong&gt;: 副県長（ふくけんちょう）や科級干部（かきげんかんぶ）など、県城の役職にある人々。彼らは一定の資源と権力を掌握しており、その地位が限られているにも関わらず、「婆羅門」として地方に影響力を持つ。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地元「企業家」&lt;/strong&gt;: 県城の中小企業のオーナーたち。規模は大きくないものの、彼らの手にはある程度の富があり、地方における発言力を持っている。一軒か二軒の地元の知名度のある企業を経営し、県城の中で一定の影響力を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの人々は、大都市に住む名流や高官と比べると地位は高くはないが、県城という小さな社会においては、その地位は「文化長者」（ぶんかちょうしゃ）や「権力中心」（けんりょくちゅうしん）と同等であると言える。&lt;/p&gt;
&lt;h2 id=&#34;県城婆羅門の地位社会にどのように影響を与えるのか&#34;&gt;「県城婆羅門」の地位、社会にどのように影響を与えるのか？
&lt;/h2&gt;&lt;p&gt;「県城婆羅門」の真の意味を理解するためには、県城という特殊な環境から考察する必要があります。この場所では、大都市ほど情報流通が速くなく、社会階層の流動も比較的固定されています。ここでいう「婆羅門」たちは、長年にわたり地元で深く耕作し、名声、知識、人脈を蓄積した結果です。彼らは地方の政治、経済、文化などあらゆる側面で影響力を行使します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文化的影響力&lt;/strong&gt;：小規模な地域、特に教育システムが発達していない場合や、一般の人々にとって選択肢が限られている場合に、地元の「婆羅門」たちは、授業での知識伝達、メディアの説明、さらには社交的な場での言動を通じて、地方の文化雰囲気を静かに形作ります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;社会資源の集中&lt;/strong&gt;：県城という限られた人口と資源の中で、これらの「婆羅門」たちは、地方の主要な資源を掌握する存在の一人であることが多いです。社会福祉、政策の実行、あるいは特定のプロジェクトの承認など、彼らの影響は不可欠です。彼らの発言力や決定権が、地方社会において彼らに席次を与えています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;人脈ネットワーク&lt;/strong&gt;：比較的閉鎖的な小社会においては、人脈関係が非常に重要になります。「県城婆羅門」たちは、強力な社交ネットワークを構築することで、情報流通と資源配分をコントロールし、重要な局面で決定的な役割を果たします。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;県城婆羅門の裏に潜む比喩&#34;&gt;&lt;strong&gt;「県城婆羅門」の裏に潜む比喩&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;「県城婆羅門」はしばしば尊敬と崇拝の対象となるが、その「高位」たる地位にも問題はないわけではない。現代社会において、多くの県城における「婆羅門」が真の能力や革新精神を持たないばかりか、世襲関係や資源独占といった方法で地位を維持していることは容易に発見できるだろう。情報化の発展に伴い、これらの「婆羅門」の権力は徐々に打破され、新たな社会流動性が小県城の面貌に影響を及ぼし始めている。&lt;/p&gt;
&lt;p&gt;総じて、「県城婆羅門」は非常に興味深い社会現象であり、地方社会における権力と文化構造を反映している。彼らの「権力」が国家の統治を直接脅かすわけではないかもしれないが、地方レベルにおいては、間違いなく重要な存在である。情報流通が急速に進み、社会変革が加速する現代において、県城に住むこれらの「婆羅門」たちは、これまで経験したことのない挑戦に直面しているのかもしれない。&lt;/p&gt;
&lt;h1 id=&#34;結論&#34;&gt;&lt;strong&gt;結論&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;本来如果没有这篇稿子，只是好奇 &lt;code&gt;婆羅門&lt;/code&gt; 這個詞是什麼意思，然後把它丟給了 &lt;code&gt;kimi&lt;/code&gt;，結果反而挺有趣的。我可以看到網頁端已經搜索出結果，但瞬間就變成相關內容無法顯示，然後我就想，這個詞是不是有什麼特別的意義，於是我就把這件事丟給了 &lt;code&gt;ChatGPT&lt;/code&gt;，才有了這篇文章。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linuxバックエンドサービスの大量文字列データの処理 - 効率が悪い</title>
        <link>https://ttf248.life/ja/p/linux-backend-slow-string-processing/</link>
        <pubDate>Wed, 13 Nov 2024 19:42:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-backend-slow-string-processing/</guid>
        <description>&lt;p&gt;C++開発の歴史的なプロジェクトにおいて、カスタムプロトコルを使用して通信を行っており、そのプロトコルは2次元配列のパターンを採用していました。大量データを処理する際に、プロトコル内部では配列を遍历し、シリアライズ操作を実行してログを生成しており、このため効率が低く、システムが高負荷時に顕著なフレーム落ち（カドゥ）を引き起こしました。事業部門からは、システムのフレーム落ちに関するフィードバックがありました。&lt;/p&gt;
&lt;h2 id=&#34;問題の特定&#34;&gt;問題の特定
&lt;/h2&gt;&lt;p&gt;問題のトラブルシューティングにおいて、まずシステムに対してパフォーマンス分析を実施し、大量データを処理する際にCPU使用率が著しく増加し、システムの応答時間が長くなっていることを発見しました。ログを分析した結果、多数のシリアライズ操作が見られ、これらの操作は2次元配列を処理する際の効率が低いことが原因でシステム性能が低下していました。
&lt;code&gt;pstack&lt;/code&gt;ツールを使用してサービスのスレッド情報を取得し、ログスレッドが文字列の連結に大部分の時間を使用していることを特定しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今日は重点的に取り組むべき点です。異なる累積方式では、その効率の違いは非常に大きいです。過去のコードでは &amp;lsquo;+&amp;rsquo; 演算子を使用しており、この方法は頻繁に一時オブジェクトを作成するため、非常に非効率的でした。それは、その非効率さがどの程度であるかを知らない状況にあるようなものです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;デモ検証&#34;&gt;デモ検証
&lt;/h2&gt;&lt;p&gt;プロジェクトコードに基づいて、ビジネスロジックを抽出し、文字列連結の効率に関する問題を検証するためのシンプルなデモを作成しました。Windows環境ではVisual Studio 2022コンパイラ、Linux環境ではgcc8.5コンパイラを使用し、Releaseモードでビルドして実行することで、効率を比較します。&lt;/p&gt;
&lt;h3 id=&#34;キーポイントの説明&#34;&gt;キーポイントの説明
&lt;/h3&gt;&lt;p&gt;本プロジェクトで使用されたのは方法四であり、テストデータを入手する前に、どの方法が最も効率が良いか、最も効率が悪いかを読者が最初に考えてみるべきです。結果を見たときは、自分自身にとても驚きました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;方法 1 (&lt;code&gt;+=&lt;/code&gt; による連結)&lt;/strong&gt;：各フィールドを &lt;code&gt;+=&lt;/code&gt; を使って文字列に直接連結します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法 2 (&lt;code&gt;std::ostringstream&lt;/code&gt; による連結)&lt;/strong&gt;：ストリーム（&lt;code&gt;std::ostringstream&lt;/code&gt;）を使用して各フィールドを連結する方法で、特に大量のデータを連結する場合に効率的です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法 3 (事前にメモリを割り当てる &lt;code&gt;+=&lt;/code&gt; による連結)&lt;/strong&gt;：&lt;code&gt;reserve&lt;/code&gt; を使用して文字列に必要な十分なメモリを事前に割り当て、メモリ再割り当てのオーバーヘッドを削減することでパフォーマンスを向上させます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法 4 (&lt;code&gt;bodys = bodys + body + &amp;quot;\n&amp;quot;&lt;/code&gt;)&lt;/strong&gt;: 各連結で新しい一時的な文字列オブジェクトを作成するため、パフォーマンスが低下します。特に大規模な連結の場合、各連結において新しいメモリ割り当てとコピーが発生するためです。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参照結果から、プロジェクトはちょうど最も効率の悪い方法を選択していました。&lt;/p&gt;
&lt;p&gt;さらに詳しく分析すると、異なるプラットフォームコンパイラによる最適化効率を分析できます。Microsoft の &lt;code&gt;visual studio&lt;/code&gt; は従来通り優れており、文字列の最適化効率は非常に高いですが、&lt;code&gt;gcc&lt;/code&gt; コンパイラの最適化効率は少し劣ります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;異なるマシンでコードを実行した場合、2つのデータセット間で直接比較する意味はありません。異なる連結方法間の差を比較できます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;主要ポイント&#34;&gt;主要ポイント
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Windowsプラットフォーム下でのVisual Studio 2022コンパイラ

----------------------------------------
データ生成時間: 0.054秒。
----------------------------------------

----------------------------------------
データマージパフォーマンス:
----------------------------------------
+ データマージ (+=) にかかった時間: 0.053秒。
+ ostringstream データマージにかかった時間: 0.054秒。
+ 事前予約済みデータマージにかかった時間: 0.045秒。
+ データマージ (bodys = bodys + body + &amp;quot;\n&amp;quot;) にかかった時間: 16.108秒。

----------------------------------------
データマージ完了。
----------------------------------------

プログラム終了。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Linuxプラットフォーム下でのgcc8.5コンパイラ
----------------------------------------
データ生成時間: 0.108秒。
----------------------------------------

----------------------------------------
データマージパフォーマンス:
----------------------------------------
+ データマージ (+=) にかかった時間: 0.100秒。
+ ostringstream データマージにかかった時間: 0.083秒。
+ 事前予約済みデータマージにかかった時間: 0.057秒。
+ データマージ (bodys = bodys + body + &amp;quot;\n&amp;quot;) にかかった時間: 29.298秒。

----------------------------------------
データマージ完了。
----------------------------------------

プログラム終了。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整コード&#34;&gt;完整コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;random&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

typedef std::vector&amp;lt;std::string&amp;gt; DataRow;
typedef std::vector&amp;lt;DataRow&amp;gt; DataGroup;

struct ResponsePackage
{
    std::string ErrorInfo;
    DataRow Head;
    std::string ClientId;
    std::string UUID;
    std::string MsgID;
    std::string SessionID;
    std::string ExtraInfo1;
    std::string ExtraInfo2;
    DataGroup DataBody;
};

// Generate specified length of random string
std::string generateRandomString(size_t length)
{
    const char charset[] = &amp;quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;quot;;
    const size_t max_index = sizeof(charset) - 1;
    std::string random_string;
    random_string.reserve(length);

    std::random_device rd;
    std::mt19937 generator(rd());
    std::uniform_int_distribution&amp;lt;&amp;gt; distribution(0, max_index);

    for (size_t i = 0; i &amp;lt; length; ++i)
    {
        random_string += charset[distribution(generator)];
    }

    return random_string;
}

void create_large_string()
{
    // Example request package with 50 fields
    ResponsePackage requestPackage;

    requestPackage.Head = {
        &amp;quot;Field1&amp;quot;, &amp;quot;Field2&amp;quot;, &amp;quot;Field3&amp;quot;, &amp;quot;Field4&amp;quot;, &amp;quot;Field5&amp;quot;,
        &amp;quot;Field6&amp;quot;, &amp;quot;Field7&amp;quot;, &amp;quot;Field8&amp;quot;, &amp;quot;Field9&amp;quot;, &amp;quot;Field10&amp;quot;,
        &amp;quot;Field11&amp;quot;, &amp;quot;Field12&amp;quot;, &amp;quot;Field13&amp;quot;, &amp;quot;Field14&amp;quot;, &amp;quot;Field15&amp;quot;,
        &amp;quot;Field16&amp;quot;, &amp;quot;Field17&amp;quot;, &amp;quot;Field18&amp;quot;, &amp;quot;Field19&amp;quot;, &amp;quot;Field20&amp;quot;,
        &amp;quot;Field21&amp;quot;, &amp;quot;Field22&amp;quot;, &amp;quot;Field23&amp;quot;, &amp;quot;Field24&amp;quot;, &amp;quot;Field25&amp;quot;,
        &amp;quot;Field26&amp;quot;, &amp;quot;Field27&amp;quot;, &amp;quot;Field28&amp;quot;, &amp;quot;Field29&amp;quot;, &amp;quot;Field30&amp;quot;,
        &amp;quot;Field31&amp;quot;, &amp;quot;Field32&amp;quot;, &amp;quot;Field33&amp;quot;, &amp;quot;Field34&amp;quot;, &amp;quot;Field35&amp;quot;,
        &amp;quot;Field36&amp;quot;, &amp;quot;Field37&amp;quot;, &amp;quot;Field38&amp;quot;, &amp;quot;Field39&amp;quot;, &amp;quot;Field40&amp;quot;,
        &amp;quot;Field41&amp;quot;, &amp;quot;Field42&amp;quot;, &amp;quot;Field43&amp;quot;, &amp;quot;Field44&amp;quot;, &amp;quot;Field45&amp;quot;,
        &amp;quot;Field46&amp;quot;, &amp;quot;Field47&amp;quot;, &amp;quot;Field48&amp;quot;, &amp;quot;Field49&amp;quot;, &amp;quot;Field50&amp;quot;
    };

    requestPackage.ClientId = &amp;quot;ClientID&amp;quot;;
    requestPackage.UUID = &amp;quot;UUID&amp;quot;;
    requestPackage.MsgID = &amp;quot;MsgID&amp;quot;;
    requestPackage.SessionID = &amp;quot;SessionID&amp;quot;;
    requestPackage.ExtraInfo1 = &amp;quot;ExtraInfo1&amp;quot;;
    requestPackage.ExtraInfo2 = &amp;quot;ExtraInfo2&amp;quot;;

    // Start timing for data generation
    auto start_gen = std::chrono::high_resolution_clock::now();

    // Generate 10,000 rows of data, each with 50 fields
    for (size_t i = 0; i &amp;lt; 10000; ++i)
    {
        DataRow dataRow(50, &amp;quot;This is a test string&amp;quot;);
        requestPackage.DataBody.push_back(dataRow);
    }

    // End timing for data generation
    auto end_gen = std::chrono::high_resolution_clock::now();
    std::chrono::duration&amp;lt;double&amp;gt; duration_gen = end_gen - start_gen;

    // Display result generation time
    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Generation Time: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_gen.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;

    // Data merging using different methods
    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Performance:\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;

    {
        // Method 1: Using &#39;+=&#39; string concatenation
        auto start_merge = std::chrono

## 完全なコード
```json
{
        // Method 2: Using ostringstream
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::ostringstream bodys;
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::ostringstream body;
            body &amp;lt;&amp;lt; &amp;quot;This is a test string&amp;quot;;
            for (auto&amp;amp; item : vec)
            {
                body &amp;lt;&amp;lt; item &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
            }
            bodys &amp;lt;&amp;lt; body.str() &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ ostringstream Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 3: Pre-allocated memory
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys;
        bodys.reserve(1000 * 50 * 20); // Pre-allocate enough memory
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            body.reserve(50 * 20); // Pre-allocate memory for each row
            for (auto&amp;amp; item : vec)
            {
                body += item + &amp;quot; &amp;quot;;
            }
            bodys += body + &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Pre-reserved Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 4: Using &#39;bodys = bodys + body + &amp;quot;\n&amp;quot;&#39;
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys(&amp;quot;&amp;quot;);
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            for (auto&amp;amp; item : vec)
            {
                body = body + item + &amp;quot; &amp;quot;; // Note the use of &#39;body = body + item&#39;
            }
            bodys = bodys + body + &amp;quot;\n&amp;quot;; // Again, using &#39;bodys = bodys + body&#39;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Data merging (bodys = bodys + body + \&amp;quot;\\n\&amp;quot;) took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Complete.\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;
}

int main()
{
    try
    {
        create_large_string();
    }
    catch (const std::exception&amp;amp; e)
    {
        std::cerr &amp;lt;&amp;lt; &amp;quot;Caught exception: &amp;quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\nProgram finished.\n&amp;quot;;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43;におけるラムダ式のパラメータのライフタイムについて</title>
        <link>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</link>
        <pubDate>Wed, 13 Nov 2024 19:23:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</guid>
        <description>&lt;p&gt;C++において、ラムダ式は便利な匿名関数であり、外部変数をキャプチャして内部で使用することができます。これにより、ラムダ式は柔軟なプログラミングツールとなります。しかし、ラムダ式のパラメータのライフサイクルは特に注意すべき点であり、特にキャプチャおよびパラメータを渡す際に重要です。&lt;/p&gt;
&lt;h3 id=&#34;1-ラムダ式のパラメータのライフサイクル&#34;&gt;1. ラムダ式のパラメータのライフサイクル
&lt;/h3&gt;&lt;p&gt;ラムダ式のパラメータのライフサイクルは、通常他のC++関数と同様です。関数の引数は関数呼び出し時に存在し、関数呼び出しが終了すると引数のライフサイクルも終了します。ただし、ラムダ式が外部変数をキャプチャする場合、そのキャプチャ方法によって引数のライフサイクルに影響を受ける可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;2-パラメータのライフサイクルとの関係を捉える&#34;&gt;2. パラメータのライフサイクルとの関係を捉える
&lt;/h3&gt;&lt;h4 id=&#34;21-外部変数のキャプチャ&#34;&gt;2.1 外部変数のキャプチャ
&lt;/h4&gt;&lt;p&gt;C++のラムダ式では、以下の2つの方法で外部変数 キャプチャできます:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;値によるキャプチャ:&lt;/strong&gt; 値によるキャプチャでは、外部変数の値がラムダ内部にコピーされ、ラムダ内のコピーのライフサイクルはラムダのライフサイクルによって制御されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参照によるキャプチャ:&lt;/strong&gt; 参照によるキャプチャでは、外部変数の参照が保持され、ラムダ内の参照は元の外部変数に指し示します。ライフサイクルは外部変数のライフサイクルに依存します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda_by_value = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // xのコピーをキャプチャ
auto lambda_by_reference = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // xの参照をキャプチャ

lambda_by_value();  // 10 を出力
lambda_by_reference();  // 10 を出力
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;キャプチャされた変数 のライフサイクルは以下のとおりです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;値によるキャプチャ:&lt;/strong&gt; キャプチャ時に外部変数の値がラムダにコピーされ、ラムダのライフサイクルが終了すると、コピーされたコピーが破棄されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参照によるキャプチャ:&lt;/strong&gt; ラムダが外部変数の参照を保持し、&lt;strong&gt;外部変数はラムダの使用前に有効でなければなりません。そうでない場合、未定義動作が発生します。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;22-ラムダパラメータ&#34;&gt;2.2 ラムダパラメータ
&lt;/h4&gt;&lt;p&gt;ラムダパラメータは、通常の関数パラメータと同様に、そのライフサイクルはラムダ関数内のみに限られます。つまり、ラムダパラメータはラムダが呼び出されたときに作成され、ラムダが呼び出された後にそのライフサイクルも終了します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto lambda = [](int a, int b) {
    std::cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; std::endl;
};
lambda(5, 10); // ここでaとbはラムダのパラメータ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; はラムダ式のパラメータであり、ラムダが呼び出されたときに作成され、ラムダの実行後に破棄されます。&lt;/p&gt;
&lt;h3 id=&#34;3-外部変数を捕捉する際のライフサイクルに関する問題&#34;&gt;3. 外部変数を捕捉する際のライフサイクルに関する問題
&lt;/h3&gt;&lt;h4 id=&#34;31-キャプチャされた変数が出-lambda-の外で有効か&#34;&gt;3.1 キャプチャされた変数が出 lambda の外で有効か
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;値によるキャプチャ&lt;/strong&gt;：外部変数が lambda が呼び出された後に破棄されても、lambda 内には外部変数のコピーが保持されます。したがって、lambda 内のコピーは安全に使用でき、外部変数が存在しなくなっても問題ありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x は lambda が呼び出された後に変更されます
lambda();  // 10 を出力します（x のコピーを使用）
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;参照によるキャプチャ&lt;/strong&gt;：外部変数を参照でキャプチャする場合、lambda 内での外部変数へのアクセスは外部変数のライフサイクルに依存します。外部変数が lambda が実行される前に破棄された場合、ダングリング参照が発生し、未定義の動作を引き起こります。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x は lambda が実行される前に変更されます
lambda();  // 20 を出力します（x の参照を使用）
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;lambda の実行順序が不定の場合、キャプチャされた外部変数が lambda の実行時に有効であることを保証することが重要です。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Win11 Logitech G431 ヘッドホン ドライバー インストール</title>
        <link>https://ttf248.life/ja/p/win11-logitech-g431-headphone-driver-installation/</link>
        <pubDate>Wed, 05 Jun 2024 07:20:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/win11-logitech-g431-headphone-driver-installation/</guid>
        <description>&lt;p&gt;前回の続きですが、戻ってみたらGhubにアップデートがあったので少し嬉しい。カスタマーサポートが言っていた、ドライバが正常にロードできない問題が解決したと言っていたのですが、色々試してみたものの、再インストールしても正常には動かない。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;引き続きカスタマーサポートに問い合わせて解決策を相談したが、エンジニアによるリモート支援が可能であると伝えられたが、エンジニアの勤務時間と自身の勤務時間が完全に一致しないため、結局諦めざるを得なかった。最後にトラブルシューティングで残された資料を確認し、手動でのドライバーインストールを試みることにした。&lt;/p&gt;
&lt;h2 id=&#34;驱动安装包の入手方法&#34;&gt;驱动安装包の入手方法
&lt;/h2&gt;&lt;p&gt;ロジック社の公式には、個別のデバイスのドライバインストールパッケージが提供されていません。どのようにしてドライバファイルを入手すれば良いでしょうか？
最後にシステムを再構築した際のシステムイメージパッケージと組み合わせて、ローカル仮想マシンでシステムをクリーンに再構築し、そこでGhubを単独で展開します。これにより、ヘッドセットデバイスを仮想マシンに導入し、ドライバのパスを見つけてコピーアウトすることができます。
関連するパス：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\ProgramData\LGHUB&lt;/li&gt;
&lt;li&gt;C:\Windows\System32\DriverStore\FileRepository\logi_audio.inf_amd64_010b035044e24be4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;デバイスマネージャー&#34;&gt;デバイスマネージャー
&lt;/h2&gt;&lt;p&gt;重点は２番目のパスの探し方で、まずはWindows 11 システムがどのように手動でドライバーファイルを管理できるかを整理します。この内容は、&lt;strong&gt;交差法（コントロール変数法）を用いて識別し、デバイスを抜き差しすることで仮想マシン内でデバイスマネージャーの情報からデバイス情報を特定し、合計３つのドライバーを処理する必要があることを認識しました&lt;/strong&gt;。そのうち２つのドライバーはシステムに組み込まれており、１つはロジック社が提供しています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;20240605073331.png&#34; &gt;ドライバーマネージャー&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上記の図の２番目のドライバーは、ロジック社が提供しており、デバイスの現在のドライバープログラムを分析し、仮想マシン内のすべてのドライバーパスを検索します。もちろん、最初に「logi」で始まるファイルを見つける必要があります。その後、ファイルの比較を行うことでドライバーのファイル件を特定し、そのフォルダ全体をコピーすることでドライバーインストールパッケージを入手できます。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;20240605073933.png&#34; &gt;ドライバーインストールパッケージ&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;驅動のインストール&#34;&gt;驅動のインストール
&lt;/h2&gt;&lt;p&gt;デバイスマネージャーのインターフェースで、以下の手順を実行します：&lt;/p&gt;
&lt;p&gt;「ドライバーの更新」をクリックし、「コンピューター上のドライブを検索」をクリックすると、以下の画面が表示されます：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605074130.png&#34;
	width=&#34;528&#34;
	height=&#34;381&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ドライバーインストール&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;332px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;通常起動すると、USBドライバーのみが表示されます。  「ディスクからインストール」を選択し、事前にコピーしてきたフォルダのパスを指定します。 インストール後、「ドロップダウンリスト」からロジック特有のドライバーが追加され、デバイスドライバーを新しくインストールしたドライバーに変更します。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605074208.png&#34;
	width=&#34;593&#34;
	height=&#34;423&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ディスクインストール&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;人体工学デバイス駆動&#34;&gt;人体工学デバイス駆動
&lt;/h2&gt;&lt;p&gt;このドライブファイルはすべてシステムが提供するものですが、デバイスのドライバの前に感嘆符 (!) があるかどうかを確認してください。もし感嘆符があれば、ドライバ選択インターフェースに移動し、ランダムな他の種類のドライバを選択してから、再度元のドライバに戻すことで正常に復元できます。&lt;/p&gt;
&lt;h2 id=&#34;修了&#34;&gt;修了
&lt;/h2&gt;&lt;p&gt;ヘッドホンマイクの音量が正常に回復し、馴染みのあるエコーキャンセル機能も復帰しました。
&lt;a class=&#34;link&#34; href=&#34;20240605074823.png&#34; &gt;サイドノイズ画像&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ロジック(レイザー) ヘッドホン ドライバーのインストールに失敗しました。 (Rōjiku (Reizā) heddohon dᱨīvā no insutora ni himitsu shimaimashita.)

**Note:** I&#39;ve provided the romanized version for pronunciation.  A more natural Japanese phrasing would be:

ロジック(レイザー) ヘッドホンドライバーのインストールが失敗しました。 (Rōjiku (Reizā) heddohon dᱨīvā no insutora ga himitsu shimaimashita.)</title>
        <link>https://ttf248.life/ja/p/logitech-headphone-driver-installation-failure/</link>
        <pubDate>Fri, 31 May 2024 21:46:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/logitech-headphone-driver-installation-failure/</guid>
        <description>&lt;p&gt;これらのことを全く理解していない場合は、すぐに公式のカスタマーサポートに連絡すれば、何時間も悩むことがなくなるだろう。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headphone-driver-installation-failure/20240531220709.png&#34;
	width=&#34;693&#34;
	height=&#34;489&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GHUB&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最近、自宅で開発に使っていたデスクトップPCのCドライブがストレージ容量不足になってしまったため、特意に256GBの半退役SSDをCドライブとして使用するようにした。ところが、その後、色々と勝手なことをしてしまっている。上海に引っ越してからずっと様々な業務に追われており、つい先週ようやくシステムを再インストールした。&lt;/p&gt;
&lt;p&gt;システムを再インストールする過程はスムーズで、日常的なソフトウェアのインストールや開発環境のデプロイにも問題はなかった。数日後、私はリラックスして、数ゲームプレイすることを思い立ったが、その時になってマウスとヘッドホンのドライバーがまだインストールされていないことに気づいた。これらのデバイスはどちらもロジクスの製品であるため、GHUBソフトウェアをダウンロードし、このソフトウェアはハードウェアを自動的に認識し、ドライバーをインストールすることができる。&lt;/p&gt;
&lt;p&gt;しかし、予期せぬ事態が発生した。マウスのドライバーは正常にインストールされたが、ヘッドホンのドライバーは常に「読み込み中」と表示され続けた。最新版のWindows 11システムとロジクスのドライバーの互換性の問題でインストールが失敗しているのではないかと疑ったため、私は情報を検索し、手動でドライバーをインストールすることを試みたが、問題は解決しなかった。&lt;/p&gt;
&lt;p&gt;簡単に説明すると、これらのデバイスのドライバーはそれぞれどのような役割を果たしているのかを示す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マウスのドライバーは主にマウスの移動速度などの機能を調整するために使用される。マクロ機能はほとんど使用しないため、以前覚えていたパラメータに戻すだけでよい。&lt;/li&gt;
&lt;li&gt;ヘッドホンのドライバーは主にヘッドホンリバーブ機能に使用され、これはチームでの音声通話時に非常に役立ち、自分の発言を聞くことができる。システムのミキサー設定にも同様のモニタリング機能があるが、ドライバーで実現するよりも効果がない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私は何度も試みたが、ヘッドホンのドライバーは常に正常に読み込まれなかった。今日、ついにカスタマーサポートに問い合わせることを思いつき、状況を確認し、解決策を見つけることができるかどうかを尋ねた。カスタマーサポートは、最近彼らのサーバーで問題が発生しており、ドライバーのダウンロードが異常になっていると教えてくれた。彼らはこの問題を処理しており、私に急がないように指示し、次のアップデート後に問題が解決すると言った。&lt;/p&gt;
&lt;p&gt;まだヘッドホンのドライバーの問題が解決していないが、少なくとも原因を突き止めることができた。問題が早急に解決することを願っている。&lt;/p&gt;
&lt;h2 id=&#34;マウスドライバ設定&#34;&gt;マウスドライバ設定
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headphone-driver-installation-failure/20240531220930.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;img src=&#34;https://ttf248.life/p/logitech-headphone-driver-installation-failure/20240531220903.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>不動産を促進するための中央銀行の4つの施策</title>
        <link>https://ttf248.life/ja/p/promoting-real-estate-and-central-bank-four-measures/</link>
        <pubDate>Fri, 17 May 2024 20:42:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/promoting-real-estate-and-central-bank-four-measures/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;unsold housing interest rate lower limit&lt;/li&gt;
&lt;li&gt;From tomorrow, the savings rate will be reduced by 0.25%&lt;/li&gt;
&lt;li&gt;First-time homebuyers down payment ratio lowered to 15%&lt;/li&gt;
&lt;li&gt;300 billion yuan of guaranteed mortgage reloans&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;首套二重所有の個人住宅ローン金利の下限措置の取消について&#34;&gt;首套・二重所有の個人住宅ローン金利の下限措置の取消について
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省・自治区・直轄市及び計画特別市の分行；各国有商業銀行、中国郵政貯蓄銀行、各股份制商業銀行：&lt;/p&gt;
&lt;p&gt;党中央・国务院の方針決定・指示遂行を確実にし、我が国の不動産市場における需給関係の変化と国民の質の高い住宅に対する新たな期待に応え、不動産市場の安定した健全な発展を促進するため、以下の事項について商業性個人住宅ローン金利政策の下限措置の調整に関する事項を通知いたします。&lt;/p&gt;
&lt;p&gt;第一に、全国レベルで首套住宅および二套住宅の商業性個人住宅ローン金利の下限措置を取消します。&lt;/p&gt;
&lt;p&gt;第二に、中国人民銀行各省级分行は、地方施策に基づき、各省・地域の市場金利決定自律メカニズムを指導し、管轄区域内の各都市不動産市場の状況および地方政府の調整要求に応じて、管轄区域内の各都市における商業性個人住宅ローン金利の下限及びその水準（設定がある場合）を自主的に決定します。&lt;/p&gt;
&lt;p&gt;第三に、金融機関は、各省・地域の市場金利決定自律メカニズムで定められた金利の下限（設定がある場合）を参考に、本機関の経営状況、顧客リスク状況などの要素を考慮し、各融資案件ごとに具体的な金利水準を合理的に決定するものとします。&lt;/p&gt;
&lt;h2 id=&#34;henkilökohtaisen-asuntopääomarakkaisse-lainan-korkoa-alennetaan-025-prosenttiyksiköllä&#34;&gt;henkilökohtaisen asuntopääomarakkaisse lainan korkoa alennetaan 0,25 prosenttiyksiköllä
&lt;/h2&gt;&lt;p&gt;Kiinan kansallisen pankin Shanghai-päämaja, maakunnat, autonomiset alueet ja suorat hallinnolliset kaupungit sekä suunnitelman yksittäisten kaupunkien sivukonttorit; Kiinan politiikkapankit, valtion kauppabankt ja Kiinan postiverkoston pankki sekä kaikki osakepohjaiset kauppabankt:&lt;/p&gt;
&lt;p&gt;Kiinan kansallisen pankin päätös on, että henkilökohtaisen asuntopääomarakkaisse lainan korko alennetaan 0,25 prosenttiyksiköllä 18. toukokuuta 2024 alkumääräisesti, ja 5 vuoden alle (mukaan lukien) ja yli 5 vuoden ensiasunnon henkilökohtaisen asuntopääomarakkaisse lainan korot säädetään erikseen 2,35 %:ksi ja 2,85 %:ksi, kun taas 5 vuoden alle (mukaan lukien) ja yli 5 vuoden toissijaisen henkilökohtaisen asuntopääomarakkaisse lainan korot säädetään erikseen vähintään 2,775 %:ksi ja 3,325 %:ksi.&lt;/p&gt;
&lt;h2 id=&#34;msızai-no-kōyū-hōritsu-o-juni-tsū-15-ni-tsukuriage&#34;&gt;msızai no kōyū hōritsu o juni-tsū 15% ni tsukuriage
&lt;/h2&gt;&lt;p&gt;Zhōngguó rénmín yínháng Shànghǎi zhǔtǒng, gè shěng, zìzhìqí, zhíxiàshì é jìhuàdānlúnshì fēn xíng; guójiā jīnróng jiānɡyémányǐn zǒngjū gè guǎnlǐ jú, gè guó yōuzǎi shāngyě yìngbǎn, Zhōngguó Yóuspín Chǔxīyínháng, gè gǔkfēn zhì shāngyě yìngbǎn:&lt;/p&gt;
&lt;p&gt;Dìwèi lùyì dǎngzhòng, suǒyuán juécè bùshǔ, shìyìng Wéixuài guōdào gōngqíu xiàngguān, rénmín qúnzú duì yōuzhí jiùfáng de xīn qídài, cùjìn shāofáng shìchǎng píngwěn jiànkāng fāzhǎn, xiàn jiū yuánjí gèrén jiàdǔankuàndìxiàngshì yinxī zhǐ tōngxī yóu wèizhì:&lt;/p&gt;
&lt;p&gt;Duìyú dàikuǎn gòumǎi shāngpǐn jiùfáng de mínzhí jiātdì, mōuzai hǎo jiù fāngmíng hōritsu juni-tsū 15%, èr tàisài hǎo jiù fāngmíng hōritsu juni-tsū 25%.&lt;/p&gt;
&lt;p&gt;Cǐ zhī shàng, Zhōngguó rénmín yínháng gè jiébì fēn xíng, guójiā jīnróng jiānɡyémányǐn zǒngjū gè pǎichù jízhǔ jianjí, yīnzhen shīcùlì suōyuán, zìyóu quèdìng jiùmín hángcheng de shǒutào hé èrtàisài jiàdǔankuàndìxiàngshì yinxī hōritsu xiàxiàn.&lt;/p&gt;
&lt;h2 id=&#34;中央銀行は3000億元を保証型住宅再融資枠として設立&#34;&gt;中央銀行は3000億元を保証型住宅再融資枠として設立
&lt;/h2&gt;&lt;p&gt;下午4時、住宅及び都市建設部、自然資源部、中国人民銀行、国家金融監督管理総局の四部門が国务院政策例行吹風会に集まり、保交房（保障性住房）の実施に関する配套政策について説明しました。&lt;/p&gt;
&lt;p&gt;会上、中国人民銀行副行長陶玲は、中央銀行が3000億元を保証型住宅再融資枠として設立することを発表し、地方国有企業が合理的な価格で未販売の商品住宅を購入し、配售型または配租型保障性住宅として使用することを支援します。これにより、銀行の貸付額が5000亿元に及ぶと予想されます。&lt;/p&gt;
&lt;p&gt;中央銀行の説明によると、保証型住宅再融資枠の期間は1年可展期4次で、金利は1.75%です。これは21家全国性銀行に対して提供され、都市政府が選定した地方国有企業への融資を奨励し、未販売の商品住宅を購入して保障性住宅として使用することを促します。所收购の商品房は厳格に限定され、不動産企業が建設した未販売の商品住宅のみ購入可能です。&lt;/p&gt;
&lt;p&gt;この政策について、近期（きじかい）中央銀行は《关于设立保障性住房再贷款有关事宜的通知》（保証型住宅再融資に関する規定通知）を公表する予定です。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>銀行マーケティング戦略と個人資産管理のバランスアート</title>
        <link>https://ttf248.life/ja/p/bank-marketing-personal-finance-balance/</link>
        <pubDate>Sun, 31 Mar 2024 01:33:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bank-marketing-personal-finance-balance/</guid>
        <description>&lt;p&gt;最近、家の装修プロジェクトにより日々の支出が急増しました。普段もクレジットカードを使っており、請求周期内にお金を返済していますが、手元に十分な現金があるにもかかわらず、これらの現金をマネーファンドで保有し、追加の利息収入を得ることを好んでいます。また、財産の安定性を確保するため、自動引き落とし機能を設定し、期日までにクレジットカードの請求をきちんと返済できるようにしています。&lt;/p&gt;
&lt;h2 id=&#34;銀行の現状預金増加貸出減少&#34;&gt;銀行の現状：預金増加、貸出減少
&lt;/h2&gt;&lt;p&gt;経済的不確実性が高まる中、人々は消費や投資よりも貯蓄を優先する傾向にあります。これにより、銀行の預金残高が増加する一方、銀行は預金者に対してより多くの利息を支払う必要が生じます。一方で、消費と投資活動の低迷により、貸出需要が低下し、銀行は貸出を通じて利息収入を得ることが難しくなります。&lt;/p&gt;
&lt;p&gt;顧客を獲得・維持するため、銀行は競争力のある預金金利を提供せざるを得ず、さらに銀行の収益率を圧迫します。同時に、経済成長と消費を刺激するために、中央銀行が基軸利率を引き下げる政策をとれば、銀行の貸出金利にも影響を与え、その結果、銀行の収益性に影響を与える可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;銀行マーケティング戦略ユーザー習慣の育成&#34;&gt;銀行マーケティング戦略：ユーザー習慣の育成
&lt;/h2&gt;&lt;p&gt;最近、返済日が近づいてきました。まず、中国建設銀行は私に連絡し、1年間の無料分割払いサービスを提供してくれました。金利は一切かかりません。続いて、招商銀行も分割金利を2.5割引したお得なキャンペーンを実施し、年換算金利はわずか1.9%でした。このような優遇措置に対し、私は両行の分割払いサービスを受け入れることにしました。&lt;/p&gt;
&lt;p&gt;私は、銀行がユーザー習慣を育成するために本当にコスト惜しまないことを悟りました。銀行の「流動的な顧客」という定義によれば、私は銀行にとって質の高い顧客であるべきです。現在の銀行における資金の貸し出し難い状況下において、分割払いの意識を醸成することで、銀行は将来私が起こりうる資金繰りの困難を想定し、その際に私からより多くの利息収入を得ることを目指しているのです。毕竟、広く知られているように、クレジットカード請求書の分析金利は決して低くありません。&lt;/p&gt;
&lt;p&gt;銀行が無料の分割払いサービスと低金利の分割払い優遇措置を提供することで、クレジットカードの使用頻度と限額を増やし、ユーザーの間でポジティブなイメージを確立しています。この戦略の変化は、銀行が市場の変化への迅速な対応と顧客ニーズに対する深い理解を示しています。このようにして、銀行は資金の貸し出し難い問題を解決するだけでなく、将来の収益のために準備を整え、&lt;strong&gt;利益は今だけを見れば意味がない。未来を見据えることが長続きの秘訣である&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;個人の財務管理の重要性&#34;&gt;個人の財務管理の重要性
&lt;/h2&gt;&lt;p&gt;銀行の分割払いのような魅力的なオファーは魅力的かもしれませんが、ユーザーとして、過度なクレジットカードの分割払いに依存することによるリスクを認識する必要があります。自身の返済能力と将来の資金需要を十分に考慮し、短期的な金融的便利さのために長期的な債務問題に陥ることを避けるべきです。個人財務管理の鍵は、現在のニーズと将来の計画とのバランスを取ることです。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;image.png&#34; &gt;招商分割払い請求書&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ゲームの多面性：心理発達とソーシャルエンターテインメントの交差点</title>
        <link>https://ttf248.life/ja/p/games-multidimensionality-psychological-development-social-entertainment/</link>
        <pubDate>Sat, 30 Mar 2024 15:07:45 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/games-multidimensionality-psychological-development-social-entertainment/</guid>
        <description>&lt;p&gt;現代のデジタル時代において、ゲームは単なる娯楽という枠を超え、人々の日常生活に欠かせない一部となっています。心理学的な観点から見ると、ゲームは異なる年齢層の人々心理の発達においてそれぞれ異なる役割を果たし、同時に社交・娱乐との密接な繋がりも持ち合わせています。&lt;/p&gt;
&lt;h2 id=&#34;心理状態&#34;&gt;心理状態
&lt;/h2&gt;&lt;p&gt;若者たちは自己探求とアイデンティティ形成の段階にあり、&lt;strong&gt;ゲームは彼らに低コストで試行錯誤できる環境を提供します&lt;/strong&gt;。ゲームを通じて、彼らはさまざまな役割やライフスタイルを試し、好奇心や探求心を満たすことができます。一方、年齢が成長するにつれて、個人の興味や価値観は徐々に安定し、ゲームが生活目標や興味関心に合わなくなる可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;社交属性&#34;&gt;社交属性
&lt;/h2&gt;&lt;p&gt;同時に、ゲームも社交活動の一部となり、特に若年層にとって重要な役割を果たしています。彼らはゲームを通じて友人を作り、ソーシャルネットワークを構築し、ゲームが社交の架け橋となるのです。しかし、年齢とともに社交圈が安定するにつれて、社交ニーズはより成熟した方法で満たされるようになり、ゲームにおける社交的な役割は相対的に低下していきます。&lt;/p&gt;
&lt;h2 id=&#34;ソーシャル属性妹を連れてメイトおもて&#34;&gt;ソーシャル属性：妹を連れて（メイトおもて）
&lt;/h2&gt;&lt;p&gt;国内においては、恋愛教育の不足により、幼少期には「しっかり勉強しろ」とだけ指導され、卒業後に突然「恋愛しろ」と言われることが珍しくない現象が見られます。学業や仕事が忙しかったり、コミュニケーションスキルが不足していたりして、現実生活で安定した感情的な関係を築けず、孤独感や注目されたいという欲求に悩む人が少なくありません。&lt;strong&gt;ゲームにおける「メイトおもて」と呼ばれる行為は、彼らがこのような欲求を満たす出口を提供します。&lt;/strong&gt; 女性プレイヤーを助け、守ることで、自分が必要とされ、尊重されていると感じ、感情的な満足を得ることができます。&lt;/p&gt;
&lt;p&gt;同時に、ゲーム内のインタラクションルールが明確で、環境がコントロール可能であるため、現実生活の複雑さや不確実性とは対照的に、確定性と安全感を提供し、現実の交流における不確実性への恐怖を軽減します。しかし、長期的にはゲーム内の仮想的な充足感に依存することで、現実生活で健全な感情的な関係を築き、維持する能力が低下する可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;現実のプレッシャー&#34;&gt;現実のプレッシャー
&lt;/h2&gt;&lt;p&gt;ゲームは、プレイヤーが一時的に現実世界でのストレスや課題、あるいは不快な感情から逃避するための仮想の世界を提供します。特に学業のプレッシャー、家庭の問題、人間関係の課題に直面している若者にとって、ゲームは慰めとリラックスを得るための手段となる可能性があります。&lt;/p&gt;
&lt;p&gt;ゲームは通常、ミッションをクリアしたり、レベルを上げたり、敵を倒したりする際に達成感や承認を得られるように設計されています。若者はこのようなゲームに没頭することがあり、それは彼らがゲームの中で賞賛され認められているという感覚を得られるためです。この感覚は、現実生活で得ることが難しいかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;年齢を重ねるとゲームをするのが好きになれなくなった&#34;&gt;年齢を重ねるとゲームをするのが好きになれなくなった
&lt;/h2&gt;&lt;p&gt;若い頃は、個人的な社会的な責任やプレッシャーが比較的少なく、ゲームに時間とエネルギーを費やす余裕がありました。仕事に入り、家庭を築くなど、社会的な責任が増えるにつれて、時間とエネルギーはより貴重になり、ゲームは時間の浪費としてではなく、優先順位の低いレジャー活動とはなりにくいものです。&lt;/p&gt;
&lt;p&gt;年齢を重ねるにつれて、人々の認知能力や興味関心も変化します。若い頃には、アクションが早く、グラフィックが美しいゲームに興味を持つかもしれませんが、経験を積むにつれて、戦略性、ストーリー性が強い、あるいは奥深いゲームを好むようになるかもしれません。もし市場に出回っているゲームがこれらの変化したニーズに応えられない場合、興味は自然と薄れてしまいます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>人民元の為替レートは顕著な変動を示し、7.26を突破しました。</title>
        <link>https://ttf248.life/ja/p/renminbi-exchange-rate-volatility/</link>
        <pubDate>Sat, 23 Mar 2024 00:31:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/renminbi-exchange-rate-volatility/</guid>
        <description>&lt;p&gt;人民元の為替レートの変動と上海総合指数の下落は、主要中央銀行の動向、スイス国立銀行の予期せぬ利下げ、米国の経済データ、市場におけるインフレと利下げ期待の調整といった要因が複合的に作用したものです。これらの要因が為替市場と株式市場に影響を及ぼし、人民元の変動とA株市場の下落を引き起こしました。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ご提供いただいたリンクの内容に基づき、2024年3月22日の人民元の為替レートの状況は以下の通りです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ドル/離岸人民元レートの突破:&lt;/strong&gt; 当日オープンスで、人民元が下落し、ドル/離岸人民元は中盤で7.24から7.24926に上昇し、オンショアドルの中盤で7.22から7.22360に上昇しました。両方とも2023年11月17日以来の新たな高値を更新しました。記事執筆時までに、ドル/離岸人民元は7.26を突破し、最低7.2639まで下落し、トレンドも継続しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中央銀行の中間レート調整:&lt;/strong&gt; 3月22日に、中国人民銀行は米ドルに対する中間レートを7.1004に発表し、62bp引き下げました。調整幅が拡大しました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A株市場の反応:&lt;/strong&gt; 多様な要因の影響により、当日はA株の大三指数が低迷して下落し、いずれも1%を超える水準で落ち込みました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;為替市場の変動原因:&lt;/strong&gt; 香港の一大手部外貨取引員の資深なトレーダーは、為替市場の変動は主にスイス国立銀行による予期せぬ利下げによってドルが上昇したことと、米国経済が強調であり、インフレが粘着性を持つ可能性により、利下げが遅れることが原因であると説明しました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主要中央銀行の動向:&lt;/strong&gt; 本週は世界市場における「スーパー中央銀行週間」であり、米国、日本、英国、オーストラリアなど、複数の国の中央銀行が本週中に政策金利を決定します。スイス国立銀行は予期せぬ利下げを発表し、G10通貨中央銀行で自疫情発生以来初の利下げとなりました。これは市場のバランスを打ち破りました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人民元の動向予測:&lt;/strong&gt; 光大銀行金融市場部研究員の周茂華氏は、最近の人民元の変動は確かにあったものの、全体的な幅はドルなどの主要通貨よりもはるかに小さく、短期的な変動が年内の人民元の中立から上昇傾向を覆すことはないと予測しています。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Python辞書におけるカスタムオブジェクトの保存：参照と深いコピーの重要性</title>
        <link>https://ttf248.life/ja/p/python-dictionary-custom-objects-reference-vs-deepcopy/</link>
        <pubDate>Fri, 22 Mar 2024 01:08:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/python-dictionary-custom-objects-reference-vs-deepcopy/</guid>
        <description>&lt;p&gt;Python プログラミングにおいて、辞書は非常に強力なデータ構造であり、キーと値のペアを関連付け、効率的にデータを検索および操作することを可能にします。カスタムオブジェクトを辞書に格納しようとすると、通常、重要な概念である「Python におけるオブジェクト参照（参照渡し）」が問題となります。つまり、カスタムオブジェクトを辞書に入れる場合、辞書はオブジェクトへの参照を格納するだけであり、オブジェクトの完全なコピーを作成しているわけではありません。&lt;/p&gt;
&lt;h2 id=&#34;カスタムオブジェクトの基本的な例&#34;&gt;カスタムオブジェクトの基本的な例
&lt;/h2&gt;&lt;p&gt;以下の簡単な &lt;code&gt;Person&lt;/code&gt; クラスを想定してください:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Person オブジェクトを作成
p1 = Person(&amp;quot;Alice&amp;quot;, 30)

# オブジェクトを辞書に保存
people_dict = {}
people_dict[&amp;quot;alice&amp;quot;] = p1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;code&gt;people_dict&lt;/code&gt; 辞書が &lt;code&gt;&amp;quot;alice&amp;quot;&lt;/code&gt; というキーを持つ項目を含み、その値は &lt;code&gt;Person&lt;/code&gt; 型の &lt;code&gt;p1&lt;/code&gt; オブジェクトへの参照です。  &lt;code&gt;p1&lt;/code&gt; の属性を変更すると:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1.age = 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;辞書からオブジェクトにアクセスするときに、その年齢も更新されていることに気づきます:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(people_dict[&amp;quot;alice&amp;quot;].age)  # 出力: 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは、辞書が &lt;code&gt;Person&lt;/code&gt; オブジェクトの独立したコピーを保存するのではなく、同じメモリ位置への参照を保存しているためです。&lt;/p&gt;
&lt;h2 id=&#34;深復元と浅復元の違い&#34;&gt;深復元と浅復元の違い
&lt;/h2&gt;&lt;p&gt;ネストされたデータ構造やカスタムオブジェクトを扱う場合、このような参照の動作は予期せぬ結果を引き起こす可能性があります。例えば、カスタムオブジェクトが可変型の属性（リストや別のカスタムオブジェクトなど）を含む場合、そのようなオブジェクトを辞書に直接格納し、その変更を加えると、辞書から取得したオブジェクトも影響を受けます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Address:
    def __init__(self, street, city):
        self.street = street
        self.city = city

class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

address = Address(&amp;quot;Main St.&amp;quot;, &amp;quot;Springfield&amp;quot;)
p1 = Person(&amp;quot;Bob&amp;quot;, 40, address)
people_dict[&amp;quot;bob&amp;quot;] = p1

# 原始アドレスオブジェクトを変更
address.city = &amp;quot;Shelbyville&amp;quot;

# 辞書内の人のアドレスも変更される
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 出力：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解決策：深復元&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;このような共有状態の問題を回避するためには、辞書がオブジェクトの完全なコピーを格納していることを確認する必要があります。つまり、参照ではなく、独立したコピーである必要があります。Python は &lt;code&gt;copy&lt;/code&gt; モジュールにある &lt;code&gt;deepcopy&lt;/code&gt; 関数を使用してこれを実現します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import copy

# オブジェクトを深復元で格納
people_dict[&amp;quot;bob_deepcopy&amp;quot;] = copy.deepcopy(p1)

# 原始アドレスオブジェクトを変更しても、深復元されたオブジェクトには影響しない
address.city = &amp;quot;Capital City&amp;quot;
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 出力：Capital City
print(people_dict[&amp;quot;bob_deepcopy&amp;quot;].address.city)  # 出力：Capital City
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要するに、Python で辞書を使用してカスタムオブジェクトを格納する場合は、デフォルトでオブジェクトの参照が格納されることに注意してください。独立した状態を維持する必要がある場合は、&lt;code&gt;deepcopy&lt;/code&gt; を使用して深復元を行い、共有参照による予期せぬデータ変更を防ぐようにしてください。&lt;/p&gt;</description>
        </item>
        <item>
        <title>澱粉腸と路端の屋台：資本のニュースへの影響力 (Dōhin&#39;garu to rukan no yatai: Capita no nyūsu e no eikyoku)</title>
        <link>https://ttf248.life/ja/p/sausages-and-street-vendors-capital-news-influence/</link>
        <pubDate>Mon, 18 Mar 2024 00:31:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/sausages-and-street-vendors-capital-news-influence/</guid>
        <description>&lt;p&gt;315 は実際には鶏骨泥の報道はなかった。この問題自体が、中央テレビ 3・15 晩会の公式暴露と同時期に発生した他の食品安全ホットスポット事件を混乱させている。&lt;/p&gt;
&lt;h2 id=&#34;知乎回答新闻学httpswwwzhihucomquestion648967411answer3433834122&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/648967411/answer/3433834122&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;知乎回答：新闻学&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;315晩会一共提了九个厂家，里面并没有淀粉肠，而现在搞得那些被提名的大品牌完全没热度，倒是把淀粉肠这种国民级（全国各地小吃街基本都会有并且摊位量应该也是第一）的小吃拉出来说事感觉淀粉肠完全就是被拉出来背锅的。我找了网上的新闻来源就是一个央广网在3.15那天发了个调查火腿肠的新闻，但也只是列出了几家厂家的成分，并且几个厂家也并不是主要生产淀粉肠的厂家，成分上并看不出什么毛病，然后这个b记者通过一个工厂员工说有时候用的是鸡骨泥替代鸡肉也就是听说，然后她就去淘宝问宠物食品店卖鸡骨泥的商家，人能不能吃？，这不是sb问题吗？人家一个宠物食品敢说让你人吃？然后后面就传谣传成淀粉肠里含的都有鸡骨泥，鸡骨泥人不能吃。&lt;/p&gt;
&lt;p&gt;现在搞得估计很多工厂都要关门，全国几十万的小摊贩都面临货砸手里没生意干的地步。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;315晩会において9社のメーカーが挙げられ、その中に澱粉腸は含まれておらず、現在話題になっている被指名された大手ブランドも熱意を失っている。それに対し、国民級（全国各地の小吃街に基本的にはあり、摊位数も第一）の澱粉腸を俎上に載せ、議論されているように感じられる。私はインターネット上のニュースソースとして、中央広播網が3.15日にハムの調査報道を行ったものを調べた。しかし、それはいくつかのメーカーの成分を列挙するだけであり、その中で主要な澱粉腸メーカーではない企業も多く、成分上、問題は見当たらない。その後、この記者が工場従業員の話を聞き、「時々鶏骨泥（けいこつねり）で鶏肉を代用している」と聞いたこと、そして「それを聞いて、彼女は淘宝（タオバオ）でペットフード店が販売する鶏骨泥の商家の人には食べられるのか？」と尋ねたことだ。これは明らかに馬鹿げた問題ではないか？ペットフードを販売する企業が人間に食べさせることを言うだろうか？その後、噂が広がり、「澱粉腸の中に鶏骨泥が含まれている」という誤った情報が流布された。鶏骨泥は人間には食べられないのだ。&lt;/p&gt;
&lt;p&gt;現在、多くの工場が閉鎖され、全国の数十万もの小摊贩（こたんぱん）が在庫切れで売り上げがないという状況に陥っていると推定される。&lt;/p&gt;
&lt;h2 id=&#34;人間の真実&#34;&gt;人間の真実
&lt;/h2&gt;&lt;p&gt;潇湘晨報の17日報道によると、3月16日に河南省三門峡で発生した「澱粉腸の崩落」の2日後、あるおばあさんが澱粉腸を販売する出店を始めたが、2時間経っても全く人が現れず、最終的には自分自身で黙々と澱粉腸を食べた。撮影者は、「普段一人で澱粉腸を4～5本食べるが、澱粉腸の中に鶏骨と泥が入っていることを知り、食べないという決断をした」と語る。その日、彼は事件が暴露されることで誰か買ってもらえるかどうか好奇心を持って見守っていたが、2時間も売れずに1本も売らなかった摊贩（たんばん：屋台）を見て愕然とした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;おばさんは何があったのか全く知らず、ただ今日の突然の客の減少を知っただけだ。&lt;/li&gt;
&lt;li&gt;おばあさんの言う通りだ。彼女はただ生活を立てるために生きているだけで、製品に問題があることや、それが合格品であること、また「骨泥（こつねり：鶏骨と泥の混合物）」とは何かを知らなかった。彼女たちはインターネットを知らず、ただ底辺の人々が生き残るための方法を模索しているだけだ。&lt;/li&gt;
&lt;li&gt;澱粉腸は崩落したが、その代償を払っているのは、個々の底辺の営業者たちだ。これは苦痛なプロセスだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;知恵袋回答規制不利httpswwwzhihucomquestion648967411answer3433978475&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/648967411/answer/3433978475&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;知恵袋回答：規制不利&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;数年前の一度の午後、私は北漂（北京生まれの人が使う言葉）の同僚と昼食に向かい、あるソーセージや鉄板焼き肉串を売る屋台を通りかかった。
私は随気なく言った。「今の様な黒科技（最新技術）の淀粉ソーセージ、鉄板肉串がまだ食べられるのか？」なぜなら、私の考えでは、最後に淀粉ハムソーセージを食べたのは大体10年以上前だったからだ。
同僚はしばらく躊躇し、そして婉曲的に言った。「あなたはきっと大都市で暮らしているからそう思うんだ。実はうちの故郷のような小さな町では、塩辛い野菜、インスタントラーメン、ハムソーセージが毎日の生活なんだ。」
「私が学校に通っていた頃は、満点を取れば父に買ってくれる焼き肉串があった。衛生面の問題ではなく、焼き肉串を買うには1.5元しかかけられないから、2キロの青菜を買えるからだ。」
「便利本（インスタントラーメン）、炭酸飲料、スナック菓子を『駄洒落食品』と言うのは、北京で大学に通っていた頃に初めて聞いた。」
私は自分が無心な言葉の中に含まれていた傲慢さに気づき、黙って何も言わなくなった。しかし、この一件は私にとって非常に印象深いものとなった。
実際には、これが中国の大衆の日常だ。
彼らの生活には、高尚な「地中海式食事」「緑色有機野菜」「非遺伝子組み換え大豆」といったものは存在しない。彼らはただ、安くて美味しい野菜、肉類、スナック菓子を手に入れることができるかどうかを心配するだけだ。家族全員が、ほんの少しの幸福な瞬間を楽しむ。
そして棚にあるものは、どのような成分でできているのか、健康に害を与える可能性があるのか、奇妙な化学物質が含まれていないかなど、考えた。
本来、彼らが気にする必要も理解する必要もなかったのだ。
&lt;strong&gt;彼らはただ、問題のあるものがあれば誰かがきちんと管理してくれると素直に信じていた。&lt;/strong&gt;
しかし、315の番組を見て初めて気づいたのだ。
市場にある電子秤やガソリンスタンドの給油機が、高度な技術で改造されたマザーボードを隠し持っていて、アップロード（動画投稿）する人たちが体罰を受けるリスクを冒して動画を撮影しなければならないこと。規制当局が「ようやく」気づいて調査・取り締まること。
&lt;strong&gt;ライブ配信での梅菜肉（梅干しと豚肉の煮込み料理）、屋台での淀粉ソーセージが、腐った肉や骨粉を使って作られていて、央視（中国中央電視台）の記者たちが臥底（潜入捜査）して撮影した映像で初めて明らかになること。そして、その供給源を調査し、追跡すること。&lt;/strong&gt;
テレビ番組や空港広告で大々的に宣伝される「健康酒」が、誰かが動画を撮影して暴露することで、一夜にして緊急撤去され、市民の目に消えていくこと。
年に一度の315。毎回、数個の製品が抽選で取り上げられるだけで十分なのか？
すでに食べた、買った消費者は、誰に訴えることができるだろうか。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>新規に設置した10Gbps光回線なのに、なぜ速度が1Gbpsしか出ないのか？</title>
        <link>https://ttf248.life/ja/p/gigabit-fiber-slow-speed/</link>
        <pubDate>Mon, 18 Mar 2024 00:29:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/gigabit-fiber-slow-speed/</guid>
        <description>&lt;p&gt;自宅のネットワークを驚くほど高速にしたいですか？鍵はケーブルの種類、光猫、ルーターの設定、そして些細なディテールを知ることです。この記事では、6種類のケーブルを使ってテラビット級のネットワークを構築する方法と、簡単なデバイスチェックと設定で、あなたのネットワーク速度が制限されないようにすることについて、簡単に解説します。さあ、一緒に探求し、自宅のネットワーク速度を飛躍的に向上させましょう！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/gigabit-fiber-slow-speed/image.png&#34;
	width=&#34;1001&#34;
	height=&#34;590&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;手動修復&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;407px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第1章ネットワーク伝送媒体の徹底分析&#34;&gt;第1章：ネットワーク伝送媒体の徹底分析
&lt;/h2&gt;&lt;p&gt;千Gb級ネットワーク接続を実現する際、情報を高速に伝送するための担い手であるケーブルが極めて重要な役割を果たします。以下では、カテゴリ5、カテゴリ6、カテゴリ7ケーブルについて詳細な解説を行います。&lt;/p&gt;
&lt;h3 id=&#34;1-五類ケーブルcat5&#34;&gt;1. &lt;strong&gt;五類ケーブル（CAT5）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;五類ケーブル、別名CAT5は、最も普及した初期のツイストペアケーブルの一種であり、各対線芯を精密ならせん構造で設計することで、クロスプレーク（串扰）を低減します。主に10/100Mbpsの高速以太ネットで使用され、最大伝送周波数約100MHzですが、現在の千ギガビット級、さらにはそれ以上の速度を求めるニーズにおいては、物理的な制限から五類ケーブルは要求を満たせません。&lt;/p&gt;
&lt;h3 id=&#34;2-六類ケーブルcat6&#34;&gt;2. &lt;strong&gt;六類ケーブル（CAT6）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;技術の発展に伴い、六類ケーブルが登場しました。五類ケーブルと比較して、六類ケーブルはより厳格な製造基準と先進的な構造設計を採用しており、干渉耐性を大幅に向上させ、伝送効率を高めています。1Gbpsまでの伝送速度をサポートし、理想的な条件下では伝送距離が100メートルにも達するため、千兆ネットワークへの接続要件を満たすのに適しています。&lt;/p&gt;
&lt;h3 id=&#34;3-七類ケーブルcat7&#34;&gt;3. &lt;strong&gt;七類ケーブル（CAT7）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;七類ケーブルは、現在のツイストペア技術における最先端の水準を代表しています。伝送速度において飛躍的な向上を実現し、理論上では最大10Gbpsの超高速率をサポートするだけでなく、設計段階で完全なシールドシステムを採用しており、各配線対間のシールドに加え、全体の外層シールドも含まれています。これにより、外部電磁干渉や近傍串波を大幅に低減し、データ伝送の安定性と正確性を保証します。ただし、七類ケーブルは主に将来の10Gbイーサネットまたは特定の要件の高い環境向けに使用されます。&lt;/p&gt;
&lt;p&gt;千兆家庭ネットワーク環境における構築において、千兆光ファイバの潜在能力を最大限に引き出すためには、六類ケーブルが最も経済的かつ効率的な選択肢となります。また、すべての接続ケーブルの品質が合格していることを確認し、標準的な配線方法に従って作業を行うことも、ネットワーク性能を確保するための重要な要素です。&lt;/p&gt;
&lt;h2 id=&#34;第2章深層ウェブの中枢デバイスの調査---光猫ルーターlanポート帯域幅の影響&#34;&gt;第2章：深層ウェブの中枢デバイスの調査 - 光猫、ルーターLANポート帯域幅の影響
&lt;/h2&gt;&lt;h3 id=&#34;光猫とそのlanポート帯域幅の重要性&#34;&gt;光猫とそのLANポート帯域幅の重要性
&lt;/h3&gt;&lt;p&gt;光猫（光ファイバーモジュレーター・デコーダー）は、家庭用ブロードバンド接続における主要な機器であり、その機能は光ファイバー内の光信号をデジタル信号に変換し、家庭内ネットワークデバイスで使用するために供与するものです。千兆光回線ユーザーの場合、光猫が千兆伝送をサポートしているかどうかが特に重要になります。もし光猫のWANポートが10Gb（百兆）のみをサポートする場合、入宅光ファイバーの速度が高くても、このボトルネックによって10Gb以内に制限されてしまう可能性があります。同様に、光猫のLANポートも千兆出力能力を備えている必要があり、それ以外に接続されるルーターやその他のデバイスが、その真の千兆レートを取得できないのです。&lt;/p&gt;
&lt;h3 id=&#34;ルーターlanポート帯域幅の役割&#34;&gt;ルーターLANポート帯域幅の役割
&lt;/h3&gt;&lt;p&gt;ルーターのLANポートは、受信したデータを各ターミナルデバイスに配布する役割を担います。ルーターのLANポートが単に10Gb（百兆）である場合、他のデバイスの設定がどれほど優れていても、局所網通信は10Gbのレートに制限されます。したがって、千兆家庭ネットワークを構築する場合、ルーターのWANポートが千兆データを受信し、LANポートも千兆レベルのデータ出力能力を提供できるようにすることが重要です。これにより、ご自宅のすべてのスマートデバイスが高速ネットワークによるスムーズな体験を楽しむことができます。&lt;/p&gt;
&lt;p&gt;さらに、一部の古いまたは低端のルーターには、LANポートレート自動交渉メカニズムが存在する場合があります。これは、ルーター自体が千兆をサポートしていても、ケーブルやデバイスの互換性などの理由により10Gbモードに降格してしまう可能性があることを意味します。したがって、ルーターパラメータを正しく設定し、強制千兆モードを有効にし、千兆スイッチまたは直結デバイスと組み合わせて使用することは、全千兆ネットワークを実現するための重要なステップの一つです。&lt;/p&gt;
&lt;p&gt;千兆光ファイバーにアップグレードした場合、必ず千兆光モデムと千兆ルーターに交換し、すべてのデバイスのインターフェースが千兆レベルであることを確認してください。&lt;/p&gt;
&lt;h2 id=&#34;第3章隠された謎--一本の断線したサブラインがテラバイト級ネットワークの速度にどのように影響するか&#34;&gt;第3章：隠された謎 – 一本の断線したサブラインがテラバイト級ネットワークの速度にどのように影響するか
&lt;/h2&gt;&lt;h3 id=&#34;子線故障とネットワーク性能の低下&#34;&gt;子線故障とネットワーク性能の低下
&lt;/h3&gt;&lt;p&gt;測定期間中にネットワークが常に接続を維持し、明らかな切断状態は発生しませんでした。これは新入戸でのブロードバンド導入であり、弱電箱内に配線が散らかっており、光猫のケーブルや電源インターフェース、延長コードの位置を時々調整していたため、偶発的に測定速度が千兆に達することがありました。&lt;/p&gt;
&lt;p&gt;上記の資料に基づき、ケーブルの種類、光猫のLANポート速度などを分析・調査しましたが、最終的には原因はケーブル内部の一本の茶色の子線が断裂していることが判明しました。&lt;/p&gt;
&lt;p&gt;断裂の原因：作業員が水晶頭を設置する際に、このケーブルを少し強く引っ張ったため、子線が半分ほど断ち切られ、完全に切り離されずにいました。その後、光猫の位置を調整する際に、繰り返し移動させることで、最終的に完全に断裂してしまいました。&lt;/p&gt;
&lt;h3 id=&#34;ケーブルの種類8本の機能解析&#34;&gt;ケーブルの種類8本の機能解析
&lt;/h3&gt;&lt;p&gt;六類網線はTIA/EIA-568-B規格に準拠し、8本の双絞り線を含みます。以下のカラーコードに従っています：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;白橙 / 橙 (しろおげ / おげ)&lt;/li&gt;
&lt;li&gt;白緑 / 緑 (しろりょく / りょく)&lt;/li&gt;
&lt;li&gt;白藍 / 藍 (しろらん / らん)&lt;/li&gt;
&lt;li&gt;白棕 / 棕 (しろしゅん / しゅん)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;千兆イーサネット（1000BASE-T）の規格下では、これらの8本の線の中から4対の線が同時に動作します。具体的な役割分担は以下の通りです：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白橙と橙のペア (1&amp;amp;2) は、送信データ (Tx+/-) 用です；&lt;/li&gt;
&lt;li&gt;白緑と緑のペア (3&amp;amp;6) は、受信データ (Rx+/-) 用です；&lt;/li&gt;
&lt;li&gt;白藍と藍のペア (4&amp;amp;5) および白棕と棕のペア (7&amp;amp;8) は、千兆イーサネットでは当初は副用ですが、高度なアプリケーション（例えば、一部PoE給電や将来の技術拡張など）で有効化されることがあります。従来の100Gbイーサネットでは、1, 2, 3, 6 の4本の線を使用するだけで十分です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;断裂子線がネットワーク速度に与える影響&#34;&gt;断裂子線がネットワーク速度に与える影響
&lt;/h3&gt;&lt;p&gt;上記の場合において、もし一根褐色の子線（すなわち棕線または棕白線）が断裂した場合、理論上は千兆ネットワーク環境下で速度低下を引き起こす可能性があります。なぜなら、千兆ネットワークでは、すべての四対の線が同時に双方向で伝送することで満速を実現する必要があるためです。しかしながら、家庭用ネットワーク機器には自動ネゴシエーション機能が搭載されており、ケーブルに問題が検出された場合、正常に動作する低いレートモード（百兆モード）に回帰します。これが、一根子線が断裂してもネットワークが接続を維持し、百兆速度で動作を続ける理由を説明しています。&lt;/p&gt;
&lt;p&gt;要するに、一根棕色の子線が断裂しても百兆ネットワークの基本的な動作には影響しませんが、千兆ネットワーク環境下では、それがネットワーク速度を制限する重要な要因となる可能性があります。詳細な診断と修復を行うまで、その潜在的な能力は十分に発揮されません。また、この状況は、類似の問題が発生した際に、ネットワークインフラストラクチャ上の潜在的な問題を無視しないように警告しています。たとえ基本的な接続に影響を与えないように見える小さな故障であっても、高速ネットワーク体験の隠れた障害となる可能性があります。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>WPFにおけるUIスレッドとフリーズ問題とその解決策</title>
        <link>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-solutions/</guid>
        <description>&lt;p&gt;デスクトップアプリケーションの開発、特にWindows Presentation Foundation (WPF) などのフレームワークを使用してリッチクライアントアプリケーションを構築する際には、ユーザーインターフェース（UI）スレッドの適切な処理が、アプリケーションの応答性やスムーズな動作を保証するために非常に重要です。UIスレッド、またはメインスレッドとは、ウィンドウやコントロールのイベント、レイアウト計算、および画面表示の描画を担当するコアとなるスレッドです。UI要素とやり取りするすべての操作は、UIスレッド上で実行する必要があります。これは、WPFをはじめとするほとんどのGUIフレームワークが遵守する基本的な原則です。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドとは&#34;&gt;UIスレッドとは？
&lt;/h2&gt;&lt;p&gt;UIスレッドは、WPFアプリケーションが起動される際にオペレーティングシステムによって作成され、初期化されるアプリケーションのメインウィンドウです。これは、アプリケーション内でUIコンポーネントの状態を直接アクセスし、変更できる唯一のスレッドです。つまり、ボタンのクリック、テキストボックスへの入力、ウィンドウサイズの変更など、すべてのユーザーインタラクションによって発生するイベントは、このスレッドコンテキストで処理されます。さらに、WPFの依存性プロパティシステム、データバインディングメカニズム、レイアウトロジックもすべてUIスレッド上で同期的に実行されます。&lt;/p&gt;
&lt;h2 id=&#34;uiフリーズとその原因&#34;&gt;UIフリーズとその原因
&lt;/h2&gt;&lt;p&gt;UIスレッドが長時間占有またはブロックされると、例えば、時間のかかる計算、大量のデータ読み込み、データベースクエリ、その他のI/O密度の高いタスクを実行する場合、UIスレッドはユーザーからのインタラクションリクエストにタイムリーに対応できなくなり、結果として画面がフリーズ（Freeze）、つまり私たちがよく言う「カドト」が発生します。このような場合、ユーザーはアプリケーションの遅延や不自然さを明確に感じ、最悪の場合、「Application Not Responding」（ANR）警告が表示されます。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドの基本ルール２つ&#34;&gt;UIスレッドの基本ルール２つ
&lt;/h2&gt;&lt;p&gt;上記のような状況を回避するため、WPF開発者は以下の２つの重要なルールに従う必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UIスレッドで時間がかかる処理を実行しない&lt;/strong&gt;: UIスレッドがブロックされる可能性のある操作は、可能な限りバックグラウンドスレッドで実行し、UIスレッドがユーザーの入力や画面の変化に迅速に対応できるようにする必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非UIスレッドから直接UI要素を更新しない&lt;/strong&gt;: WPFのセキュリティメカニズムにより、UIスレッドのみがUI要素の変更を行う権限を持っています。他のスレッドから直接UIの状態を変更しようとすると例外が発生します。したがって、バックグラウンドスレッドで計算やデータ準備が完了した後でも、適切なクロススレッド通信メカニズムを使用して結果をUIに表示する必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解決策非同期プログラミングとスレッドセーフなアップデート&#34;&gt;解決策：非同期プログラミングとスレッドセーフなアップデート
&lt;/h2&gt;&lt;p&gt;UIのフリーズを防ぎつつ、時間のかかるタスクを実行するために、WPFは、開発者がこの目標を達成するためのさまざまな非同期プログラミングモデルやツールを提供しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatcherオブジェクト&lt;/strong&gt;: WPFのDispatcherクラスを使用すると、タスクをUIスレッドのキューに追加して実行できます。&lt;code&gt;Dispatcher.Invoke&lt;/code&gt;または&lt;code&gt;Dispatcher.BeginInvoke&lt;/code&gt;メソッドを使用して、バックグラウンドスレッドからUIを安全に更新できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;async/awaitキーワード&lt;/strong&gt;: C#言語の非同期特性を活用し、&lt;code&gt;await&lt;/code&gt;キーワードを使用してバックグラウンドタスクが完了するのを待機し、完了後にUI更新コードを実行する非同期メソッドを作成できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ケース-ケース--例-れい&#34;&gt;ケース (ケース) / 例 (れい)
&lt;/h2&gt;&lt;h3 id=&#34;dispatcherinvokeメソッドを使用してuiを更新する&#34;&gt;&lt;code&gt;Dispatcher.Invoke&lt;/code&gt;メソッドを使用してUIを更新する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // これは時間のかかる操作であると仮定します
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // ここは時間のかかる計算メソッドのシミュレーションです

        // 時間のかかる操作が完了したら、UIスレッドでUIを更新します
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;結果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 時間のかかる操作をシミュレーションします
    Thread.Sleep(5000);
    return &amp;quot;完了&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;asyncawaitキーワードとtaskrunの組み合わせ&#34;&gt;&lt;code&gt;async/await&lt;/code&gt;キーワードと&lt;code&gt;Task.Run&lt;/code&gt;の組み合わせ
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // ユーザーが繰り返しクリックするのを防ぐ

    try
    {
        // バックグラウンドタスクを開始
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // バックグラウンドタスクが完了したら、UIスレッドに自動的に切り替えてUIを更新
        LabelStatus.Text = $&amp;quot;計算結果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;エラーが発生しました: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // ボタンを再度有効にする
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>GCCバージョンをアップグレードした結果、プログラムがクラッシュしました：コードの非規整性による問題点</title>
        <link>https://ttf248.life/ja/p/gcc-upgrade-causes-program-crash-code-irregularities/</link>
        <pubDate>Sun, 10 Mar 2024 23:19:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/gcc-upgrade-causes-program-crash-code-irregularities/</guid>
        <description>&lt;p&gt;同一段業務コードにおいて、プログラムが CentOS 7 環境下で正常にコンパイルおよび実行されていたが、CentOS 8 に切り替えて GCC の最新版を使用してコンパイルを行った際に、プログラムがクラッシュが発生した。注目すべきは、問題が &lt;strong&gt;Release モード&lt;/strong&gt; 下でのみ発生し、&lt;strong&gt;Debug モード&lt;/strong&gt; では完全に問題がない点である。これは初めての事例であり、3日間の調査を経て、問題の原因を特定することができた。&lt;/p&gt;
&lt;h3 id=&#34;問題の特定&#34;&gt;問題の特定
&lt;/h3&gt;&lt;p&gt;一番の原因究明の結果、問題の本質は &lt;strong&gt;関数に返り値がないこと&lt;/strong&gt; にあります。リリースモードにおいて、GCCの新バージョンではより多くの最適化が行われるため、本来返り値のない関数が実行中に未知の論理が発生し、それがクラッシュを引き起こしました。結論として、&lt;strong&gt;コンパイラの警告を無視することは許されません。特に、古いプロジェクトにおいては、一部の警告が無視される可能性がありますが、すべての警告を無効にすることは避けるべきです&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;環境説明&#34;&gt;環境説明
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CentOS 7 GCCバージョン:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CentOS 8 GCCバージョン:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;クラッシュ現象&#34;&gt;クラッシュ現象
&lt;/h3&gt;&lt;p&gt;プログラムのクラッシュに関するスタックを分析した結果、以下のスタック情報が得られました：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[New LWP 1385902]
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib64/libthread_db.so.1&amp;quot;.
Core was generated by `./pstack_main`.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007ffe894b4420 in ?? ()
(gdb) bt
#0  0x00007ffe894b4420 in ?? ()
#1  0x00000000004008e9 in main ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このスタックは直感的ではありません。クラッシュ関数のスタック情報が &lt;code&gt;??&lt;/code&gt; と表示されるため、問題の特定がさらに複雑になります。&lt;/p&gt;
&lt;h3 id=&#34;コード例&#34;&gt;コード例
&lt;/h3&gt;&lt;p&gt;問題をより良く理解するために、クラッシュを再現するための最小コード例を示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int test() {
    std::cout &amp;lt;&amp;lt; &amp;quot;1&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    test();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このコード内の &lt;code&gt;test()&lt;/code&gt; 関数は明らかに値を明示的に返していません。また、その戻り値の型は &lt;code&gt;int&lt;/code&gt; です。C++ 仕様によると、関数が &lt;code&gt;int&lt;/code&gt; 型で宣言されている場合、必ず戻り値を持つ必要があり、そうでない場合は未定義動作を引き起こす可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;コンパイル警告&#34;&gt;コンパイル警告
&lt;/h3&gt;&lt;p&gt;当方のプロジェクトにおいて、CMake スクリプトが多くのコンパイル時の警告を抑制しており、その中に以下の警告情報が含まれています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/root/pstack/main.cpp: In function ‘int test()’:
/root/pstack/main.cpp:7:1: warning: no return statement in function returning non-void [-Wreturn-type]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この警告は、&lt;code&gt;test()&lt;/code&gt; 関数が戻り値を持たないことを示しており、これがまさに問題の原因です。GCC の高バージョン（例：8.5.0）では、コードを最適化する際にこのような未定義の動作に対して不安定な最適化を行う可能性があり、プログラムがクラッシュする原因となることがあります。&lt;/p&gt;
&lt;h3 id=&#34;어셈블리-코드-차이점&#34;&gt;어셈블리 코드 차이점
&lt;/h3&gt;&lt;p&gt;GCC 컴파일러 최적화 동작의 차이를 설명하기 위해, 서로 다른 버전의 GCC가 생성한 어셈블리 코드를 비교했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GCC 4.8.5 생성된 어셈블리 코드:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;어셈블리 코드가 다소 길고 표준 출력 스트림(예: &lt;code&gt;std::cout&lt;/code&gt;) 처리에 대한 로직을 포함하고 있습니다. 이는 컴파일러가 &lt;code&gt;test()&lt;/code&gt; 함수에서 누락된 반환 값 문제에 대해 과도하게 최적화하지 않았음을 나타내며, 이로 인해 잠재적으로 충돌을 피했을 수 있음을 시사합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GCC 8.5.0 생성된 어셈블리 코드:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;새로운 버전의 GCC는 더 많은 최적화를 수행하여 코드 양을 줄였습니다. 그러나 이러한 최적화가 누락된 반환 값을 갖는 함수의 실행 시 동작이 불확실하게 되어 프로그램 충돌을 유발할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論
&lt;/h3&gt;&lt;p&gt;今回の問題解決を通して、C++において&lt;strong&gt;関数が返す値は明確に定義されるべきである&lt;/strong&gt;という点を深く認識しました。特に、関数を&lt;code&gt;int&lt;/code&gt;型として宣言する場合、必ず戻り値を提示する必要があります。古いコンパイラ版を使用しているプロジェクトでGCCの新しいバージョンにアップグレードした場合、より多くの最適化や厳格な警告メカニズムが導入される可能性があります。そのため、コンパイル時に&lt;strong&gt;すべての警告を無効化しない&lt;/strong&gt;ことを推奨します。代わりに、関数が返す値、型の一致など、一般的な問題に対して選択的に対処する必要があります。
最終的に、&lt;code&gt;test()&lt;/code&gt;関数に戻り値を付与することで問題は解決し、プログラムは正常に動作するようになりました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>VMware仮想マシンのCPUリソース使用率異常</title>
        <link>https://ttf248.life/ja/p/vmware-virtual-machine-cpu-usage-anomaly/</link>
        <pubDate>Sun, 10 Mar 2024 22:14:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/vmware-virtual-machine-cpu-usage-anomaly/</guid>
        <description>&lt;p&gt;背景：ローカルマシンにデプロイされたWindows版の業務システムで、CPU使用率が約5％です。VMwareにインストールしたCentOS8上にLinux版の業務システムをデプロイし、リソース使用量に異常が見られます。&lt;/p&gt;
&lt;h2 id=&#34;問題の記述&#34;&gt;問題の記述
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;宿主机：win10 企业版&lt;/li&gt;
&lt;li&gt;VMware：17.5&lt;/li&gt;
&lt;li&gt;仮想マシン：centos8
仮想マシンのリソース配分は&lt;code&gt;4C8GB&lt;/code&gt;で、ビジネスシステムを起動します。ビジネスシステムが仮想マシンLinuxシステムにデプロイされており、仮想マシン内部のtopコマンドでシステムのリソース使用率を確認すると、CPU使用率は高くありません。しかし、外側のWindowsシステムでタスクマネージャーを見ると、CPUリソース使用率は非常に高くなっています。プロセスを確認すると、VMware プロセスがCPUリソースを大量に使用しています。
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+
|         Windows           |
|                           |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|   |      VMware        |  |
|   |      Program       |  |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|                           |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;知識点&#34;&gt;知識点
&lt;/h2&gt;&lt;p&gt;この問題のトラブルシューティングは、スムーズに進まず、原因はビジネスシステム自体ではなく、仮想マシンの問題にある。通常のビジネスコードからの思考を、システム負荷に転換し、さらに負荷データの異常から、スワップ中断へと追跡し、最終的に重要なポイントにたどり着くには、VMwareのスワップ中断のパフォーマンスに影響を与えるものは何か？ 本稿ではまず各知識点を解説し、最後に解決策を示す。&lt;/p&gt;
&lt;h3 id=&#34;hyper-v&#34;&gt;Hyper-V
&lt;/h3&gt;&lt;p&gt;Windowsオペレーティングシステムの仮想化技術において、大きな変革がありました。Microsoftが最初にWSL（Windows Subsystem for Linux）をリリースした際、Hyper-Vサービスを有効にすると、VMware仮想マシンの同時使用ができなくなっていました。その後、バージョンアップにより、VMwareはHyper-Vサービスと互換性を持つようになりました。&lt;/p&gt;
&lt;h3 id=&#34;システム負荷&#34;&gt;システム負荷
&lt;/h3&gt;&lt;p&gt;Linuxシステムにおいて、「負荷」（load）とは、実行中または実行を待っているプロセスの数です。負荷は通常、1分間、5分間、および15分間の実行キュー内の平均プロセス数を表す3つの数字で示されます。これらの数字は、「uptime」コマンドまたは「top」コマンドを実行することで確認できます。&lt;/p&gt;
&lt;p&gt;具体的には、この3つの数字はそれぞれ以下の意味を持ちます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;1分負荷&lt;/strong&gt;: システムが過去1分間に実行キュー内に存在していた平均プロセス数です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5分負荷&lt;/strong&gt;: システムが過去5分間に実行キュー内に存在していた平均プロセス数です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;15分負荷&lt;/strong&gt;: システムが過去15分間に実行キュー内に存在していた平均プロセス数です。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;負荷の概念は、システム内で待っているプロセスの数です。この数値が高い場合、システムに多くのプロセスがCPUリソースを待機していることを意味し、システムが遅くなるか応答しなくなる可能性があります（ただし、負荷の高さとシステムの構成およびパフォーマンスによって異なります）。&lt;/p&gt;
&lt;p&gt;理想的には、負荷はシステムの論理CPU数の範囲内に保つことが望ましく、これによりシステムのパフォーマンスを最適化できます。負荷が継続的にCPU数を超過する場合、システム内のプロセスを分析して負荷の原因を特定し、適切な対策を講じることで、リソース割り当てを調整したり、プロセスの実行方法を最適化したりすることができます。&lt;/p&gt;
&lt;h3 id=&#34;負荷の分析---mpstat&#34;&gt;負荷の分析 - mpstat
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;mpstat&lt;/code&gt;コマンドは、個々のプロセッサまたは複数のプロセッサに関するさまざまな情報を報告するために使用されます。これには、平均負荷、CPU利用率、割り込み、コンテキストスイッチングなどが含まれます。&lt;code&gt;sysstat&lt;/code&gt;パッケージの一部として、&lt;code&gt;mpstat&lt;/code&gt;はシステムの負荷状況を分析するための非常に便利なツールです。以下に、&lt;code&gt;mpstat&lt;/code&gt;を使用して負荷を分析する手順を示します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;sysstatのインストール:&lt;/strong&gt;
システムに&lt;code&gt;sysstat&lt;/code&gt;がインストールされていない場合は、使用しているシステムに適したパッケージマネージャを使用してインストールしてください。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mpstatの実行:&lt;/strong&gt;
&lt;code&gt;mpstat&lt;/code&gt;コマンドを実行して、CPUの使用状況と負荷を確認します。デフォルトでは、&lt;code&gt;mpstat&lt;/code&gt;は1秒ごとにCPU利用率の平均値を表示します。出力頻度を調整するには、時間間隔を指定できます。たとえば、&lt;code&gt;mpstat -P ALL 2&lt;/code&gt;を使用して、毎秒1回&lt;code&gt;mpstat&lt;/code&gt;を実行し、&lt;code&gt;irq&lt;/code&gt;で割り込みの使用状況を確認します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出力の分析:&lt;/strong&gt;
&lt;code&gt;mpstat&lt;/code&gt;の出力には、各プロセッサの利用率とシステムの平均負荷が含まれています。平均負荷と各プロセッサの利用率に特に注意してください。これにより、システムの負荷状況を理解できます。負荷が高い場合は、どのプロセスが原因であるかをさらに分析し、パフォーマンスボトルネックがないか確認します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;他のツールの併用:&lt;/strong&gt;
&lt;code&gt;mpstat&lt;/code&gt;に加えて、&lt;code&gt;sar&lt;/code&gt;、&lt;code&gt;pidstat&lt;/code&gt;、&lt;code&gt;iostat&lt;/code&gt;などのツールを使用して、システム全体のパフォーマンスを総合的に分析できます。複数のツールの出力を組み合わせることで、システムの負荷状況をより包括的に理解し、パフォーマンスの問題の根本原因を特定することができます。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;割り込み&#34;&gt;割り込み
&lt;/h3&gt;&lt;p&gt;本内容は詳細に説明しないため、過度な解説は省略します。
推奨: &lt;a class=&#34;link&#34; href=&#34;https://www.codedump.info/post/20200522-sgfap-softirq/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;アプリケーション開発者向けシステムガイド CPU編 - ソフトウェア割り込み&lt;/a&gt;
頻繁にソフトウェア割り込みをトリガーすると、システム負荷にも反映されます。&lt;/p&gt;
&lt;h2 id=&#34;問題のトラブルシューティング&#34;&gt;問題のトラブルシューティング
&lt;/h2&gt;&lt;p&gt;CPUのみから分析するだけでは問題の原因を特定できないため、システムに異常が発生しているのではないかと疑うべきでしょうか。おそらくLinuxオペレーティングシステムの負荷が高くなり、VMwareが過剰なCPUリソースを使用している可能性があります。&lt;code&gt;mpstat&lt;/code&gt;を使用してローカル仮想マシンを分析したところ、&lt;code&gt;irq&lt;/code&gt;の使用量が異常で、単一コアあたり25%近く占めており、正常時にはビジネスプロセス起動時に空転する場合、&lt;code&gt;irq&lt;/code&gt;の割合は約5%程度であるはずでした。&lt;/p&gt;
&lt;p&gt;グループ内の同僚の開発環境では、CentOS 7がVMware上でデプロイされており、リソース使用量は正常でした。一方、上海の開発環境では、VMware上にデプロイされていましたが、ホストマシンのCPUリソース状況を直接観察することはできませんでした。この時、当社は複数の変数に直面していました：VMware仮想マシン、Linuxオペレーティングシステム、GCCバージョン。&lt;/p&gt;
&lt;p&gt;そこでテスト環境を分析することにしました。深圳のテスト環境は物理マシン上にデプロイされており、低バージョンのGCCでコンパイルされたサービスを実行し、CentOS 8上で動作していました。興味深いことに、深圳環境では&lt;code&gt;irq&lt;/code&gt;の使用量は正常でした。&lt;/p&gt;
&lt;p&gt;GCCバージョンに関連する問題が原因である可能性を調査するために、高バージョンのGCCでコンパイルしたプログラムを深圳環境にデプロイしてテストしましたが、結果も正常でした。&lt;/p&gt;
&lt;p&gt;問題は徐々に明確になってきました。オペレーティングシステムに問題があるのではないかと疑い始めました。毕竟、CentOS 8はすでに公式サポートを受けていないためです。しかし、純粋なCentOS 7とCentOS 8を再デプロイしても問題は解決しませんでした。&lt;/p&gt;
&lt;p&gt;この時、当社は唯一の不確実要素、つまりVMware仮想マシンソフトウェアに疑念を抱くようになりました。突然、閃きが起こり、Hyper-V技術が以前有効になっていたものの、完全にシャットダウンされなかったのではないかと考えました。毕竟、ソフトウェア中断も仮想マシンソフトウェアを通じて実現されるためです。異なる仮想マシン仮想化技術にはバグが存在する可能性があります。これらの問題は深く考える価値があります。&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;マイクロソフト公式のマニュアルに従い、本機のHyper-Vサービスを完全に停止した後、VMwareがホストマシン上で正常に動作することが確認されました。これで問題はついに解決に至りました。当初述べたように、この経験は曲折で困難なものであり、包括的な分析と判断が必要でした。また、今回初めて問題を調査し、仮想マシンというレベルまで特定することができました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor
bcdedit /set hypervisorlaunchtype off
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43;プログラミングにおける罠：`std::map`の誤用がプログラムをクラッシュさせることの詳細な解説</title>
        <link>https://ttf248.life/ja/p/cpp-programming-traps-std-map-crash-details/</link>
        <pubDate>Sun, 10 Mar 2024 22:03:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-programming-traps-std-map-crash-details/</guid>
        <description>e&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::map&lt;/code&gt; は C++ 標準ライブラリにおける連想コンテナであり、キー（key）を昇順にソートして要素を格納し、効率的なキーワード検索機能を提供します。しかし、初心者開発者は &lt;code&gt;std::map&lt;/code&gt; の中括弧演算子 &lt;code&gt;[]&lt;/code&gt; の動作について理解不足なために困惑することがあります。実際には、&lt;code&gt;[]&lt;/code&gt; を使用して存在しないキーにアクセスすると、&lt;code&gt;std::map&lt;/code&gt; は新しいキー値ペアを挿入し、デフォルトコンストラクタを使用してそのキーに対応する値の型を初期化します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int main() {
    std::map&amp;lt;std::string, int&amp;gt; myMap;

    // 誤った使い方：存在しないキーにアクセスし、0 が返ると仮定する
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for &#39;nonexistent_key&#39;: &amp;quot; &amp;lt;&amp;lt; myMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;

    // 実際には、上記の行は新しいキー値ペアを作成し、その値を int のデフォルト値（通常は 0）で初期化します。
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このコードは直接プログラムをクラッシュさせませんが、このような暗黙的な挿入動作は、リソースリークや予期しない状態の変更など、いくつかの状況で意図しない副作用を引き起こす可能性があります。さらに悪いことに、マルチスレッド環境での未初期化メモリ領域への同時アクセスにより、プログラムがクラッシュする可能性もあります。&lt;/p&gt;
&lt;p&gt;これらの問題を回避するために、&lt;code&gt;std::map::find()&lt;/code&gt; または &lt;code&gt;std::map::count()&lt;/code&gt; メソッドを使用してキーの存在を確認するか、&lt;code&gt;std::map::insert()&lt;/code&gt; を使用して明示的に要素を挿入することをお勧めします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::map&amp;lt;std::string, int&amp;gt; safeMap;
if (safeMap.count(&amp;quot;nonexistent_key&amp;quot;) == 0) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Key does not exist.&amp;quot; &amp;lt;&amp;lt; std::endl;
} else {
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for existing key: &amp;quot; &amp;lt;&amp;lt; safeMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;
}

// または、キーと値を明示的に挿入する
safeMap.insert({ &amp;quot;new_key&amp;quot;, 0 });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;マップコンテナ内のオブジェクトがポインタ型の場合、暗黙的な挿入動作は未初期化のポインタを保存し、そのポインタへの呼び出しはプログラムのクラッシュにつながります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>pstack でプロセスがフリーズしている原因を調査する</title>
        <link>https://ttf248.life/ja/p/pstack-troubleshooting-process-hangs/</link>
        <pubDate>Sat, 24 Feb 2024 23:55:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/pstack-troubleshooting-process-hangs/</guid>
        <description>&lt;p&gt;ソフトウェア開発および運用において、プロセスがフリーズしてしまう状況は頻繁に発生します。この状態はシステム性能の低下やサービスの停止を引き起こす可能性があります。本稿では、pstackツールを使用してプロセスフリーズの問題を診断する方法について解説します。プロセスのスタック情報を分析することで、問題の原因を特定し解決策を見つけ出すことができます。&lt;/p&gt;
&lt;p&gt;背景：リスク管理システムの子サービスでフリーズが発生し、リスク管理サービスが利用不可となりました。可用性監視の欠如により、プロセスフリーズの状態を早期に検知することができず、システム全体が停止するという事態に至りました。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;プロセスのフォジー（ゾンビプロセス）とは、プロセスが応答を停止しているにもかかわらず、終了していない状態を指します。この状況は、デッドロック、リソースの枯渇、例外など、さまざまな原因によって引き起こされる可能性があります。これらの問題に対処するためには、&lt;code&gt;pstack&lt;/code&gt; ツールを使用してプロセスのスタック情報を分析し、根本原因を特定することができます。&lt;/p&gt;
&lt;h2 id=&#34;ステップ&#34;&gt;ステップ
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pstack&lt;/code&gt; は一般的なツールで、通常は &lt;code&gt;gdb&lt;/code&gt; (GNU デバッガ) と共に提供されます。以下のコマンドでインストールできます：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install gdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プロセスのIDを取得する: まず、スタックされたプロセスのプロセスID (PID) を取得する必要があります。&lt;code&gt;ps&lt;/code&gt; コマンドを使用してすべてのプロセスをリストし、調査対象のプロセスIDを見つけます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pstack&lt;/code&gt; ツールを使ってプロセスのスタック情報を分析します。プロセスIDを取得したら、以下のコマンドを実行してスタック情報を取得できます：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pstack &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これにより、現在の呼び出しシーケンスで実行中の関数が示されたプロセスのスタック情報が出力されます。この情報を分析することで、プロセスが停止した場所を特定し、問題の診断に役立てることができます。&lt;/p&gt;
&lt;p&gt;スタック情報を分析する: スタック情報を確認することで、プロセスがスタック状に停止している原因を見つけることができます。ロックによる競合状態、無限ループ、またはその他の異常な状況などが見つかる可能性があります。具体的な状況に応じて、適切な対策（ロックの解放、コードロジックの修正など）を講じてください。&lt;/p&gt;
&lt;h2 id=&#34;実行例&#34;&gt;実行例
&lt;/h2&gt;&lt;p&gt;簡単なデモで、&lt;code&gt;main&lt;/code&gt;関数が起動した後、新しいスレッドを作成し、実際の関数を実行することで無限ループに陥り、プログラムが正常に終了できず、偽の停止状態になります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake_minimum_required(VERSION 3.0.0)
project(pstack_main VERSION 0.1.0 LANGUAGES C CXX)

include(CTest)
enable_testing()

# スレッドライブラリを検索
find_package(Threads REQUIRED)

add_executable(pstack_main main.cpp)

# スレッドライブラリへのリンク
target_link_libraries(pstack_main PRIVATE Threads::Threads)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;
#include &amp;lt;chrono&amp;gt;

void infiniteLoop() {
    while (true) {
        // メインスレッドが無限ループに陥る
    }
}

int main() {
    std::thread thread(infiniteLoop); // 無限ループを実行する関数を持つスレッドを作成
    thread.join(); // スレッドの終了を待つ
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プログラムを実行し、&lt;code&gt;pstack&lt;/code&gt;の結果を確認します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Thread 2 (Thread 0x7eff3619b700 (LWP 1315017)):
#0  infiniteLoop () at /root/pstack/main.cpp:6
#1  0x0000000000402ca9 in std::__invoke_impl&amp;lt;void, void (*)()&amp;gt; (__f=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:60
#2  0x0000000000402b02 in std::__invoke&amp;lt;void (*)()&amp;gt; (__fn=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:95
#3  0x0000000000403150 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::_M_invoke&amp;lt;0ul&amp;gt; (this=0x2260eb8) at /usr/include/c++/8/thread:244
#4  0x0000000000403126 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::operator() (this=0x2260eb8) at /usr/include/c++/8/thread:253
#5  0x000000000040310a in std::thread::_State_impl&amp;lt;std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt; &amp;gt;::_M_run (this=0x2260eb0) at /usr/include/c++/8/thread:196
#6  0x00007eff36bceb23 in execute_native_thread_routine () from /lib64/libstdc++.so.6
#7  0x00007eff36ea91ca in start_thread () from /lib64/libpthread.so.0
#8  0x00007eff361d58d3 in clone () from /lib64/libc.so.6
Thread 1 (Thread 0x7eff372e1740 (LWP 1315016)):
#0  0x00007eff36eaa6cd in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
#1  0x00007eff36bceda7 in std::thread::join() () from /lib64/libstdc++.so.6
#2  0x00000000004029d2 in main () at /root/pstack/main.cpp:13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プロセスが偽の停止状態になっているのは、無限ループに入っているためで、メイン&lt;/p&gt;
</description>
        </item>
        <item>
        <title>おしゃべりする時間を作るのは良いことです。 (Oshaberi suru jikan o tsukuru no wa ii koto desu.)

Alternatively, a more casual translation could be:

話せば話すほど良いことばかりだよ。(Hasedeba haseba doko ka yoi koto bakari da yo.)</title>
        <link>https://ttf248.life/ja/p/come-out-for-a-walk-is-good/</link>
        <pubDate>Thu, 08 Feb 2024 10:30:43 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/come-out-for-a-walk-is-good/</guid>
        <description>&lt;p&gt;もしあの頃、ご家庭の計画に従って、誠実に電力網を学んでいたら、プログラミングに出会わずに、ただの真面目な青年になっていただろうに。&lt;/p&gt;
&lt;p&gt;記憶の中の埃を払い落とし、きっかけは近年の旧正月とルームメイトとの会話で、それまでの経歴を整理してみたのだ。&lt;/p&gt;
&lt;h2 id=&#34;第一章&#34;&gt;第一章
&lt;/h2&gt;&lt;p&gt;高考の成績を褒めすぎず、悪すぎず、結局211大学を卒業した。当初、父の計画では、電気系統を専攻して帰郷先の市街地の電力局で働くはずだった。前文にも触れられているように、どのようにIT業界に進むのかについては、少し詳細が漏れていた：金銭感覚と自己制御力のことだ。&lt;/p&gt;
&lt;p&gt;初一は村や町内の学校に通い、初二には自宅での転校が決まり、まるで劉姥姥が大観園にやってきたかのように、市街地の繁華さに馴染めずにいた。映画館に行ったことはほとんどなく、ましてや両親と一緒に映画館に行ったこともほとんどなかったが、親戚が私を連れて行ったことがある。天命は時に幸運をもたらし、その頃には相思相愛の仲間たちと出会った。後で連絡が途絶えてしまったが、あの少年時代は今振り返っても素晴らしいものだった。週末の補習授業の後では、教室に残ったプラスチックボトルを片付け、熟練して一気に踏み潰してバッグに詰め込み、家に持ち帰って母に預けた。貯めたお金をまとめ、処理業者に売却した。一緒に将棋やバドミントンをしたり、斗地主（闘牌）で遊んだりもしたが、負けたときはプランクを数回行い、あの頃は少し感謝していた。父は幼い頃から私に様々な運動をさせていた。&lt;/p&gt;
&lt;p&gt;ここから、金銭感覚が少し歪んでしまい、自己卑意識も芽生え始めたが、これらの不幸な出来事はすぐに過ぎ去っていった。家計には恵まれておらず、周りの友達と一緒にお金を使ったり、週末の遊びに参加したりすることができなかった。両親の努力は目に見えており、村から市街地に引っ越してきたのだ。&lt;/p&gt;
&lt;p&gt;その時、種が埋められ、発芽を待っている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;頭脳が簡単な私は、学業期間を通して非常に幸せだった。多くの卒業生が経験するように、大学での勉強は決して困難ではなく、投入と成果の変換は容易だった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第1章&#34;&gt;第1章
&lt;/h2&gt;&lt;p&gt;幼少期の帝国时代を記憶に刻み込み、大学期間にはノートパソコンに触れることで、まるでパンデモスの箱を開けたかのようにゲームとゲーム商人という役割に接触した。当初は底辺の営業担当者として、上流からの仕入れを行い、自身のコミュニティのチャネルを通じて商品を販売し、わずかな利益を得ていた。その後、全体の链路の運轉ロジックを徐々に理解していった。私たちが販売する商品は、上流のプログラムによる大量繁殖によって作られ、そのコストはほぼゼロに近かった。この時点で道は少し傾き始めており、専門分野にはさらに細分化されたものがあり、左側には電力網、右側には自動化（非常に複雑で、チッププログラミングや工場電気自動化）が存在した。プログラムが利益を生み出すことの可能性を理解したのは、まだ小銭程度だった。チャネルの上流は確かに多くの利益を得ており、以前からプログラミングの基礎があったため、様々なことに手を出して少しお金を稼ぎ、専門分野を選ぶ際に自然と自動化を選択することになった。大学で履修した専門科目は多くが未受講となり、常にコードを書くことで金を稼ぐことを考えていた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前年の論文に触れられたように、ハッカーに対する憧憬を持って接触したプログラミングは、正規の教育機関ではないIT技術者が、慈悲に基づいてアセンブリ言語、侵入テスト、ゲーム外掛、DLL劫持、および個人情報窃取を学び、様々な違法・灰色な製品やサービスに精通し理解していた。両親が人としての道徳を教え、法律によって私の道を完全に逸脱するのを防ぎ、道は完全に傾くことはなかった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第1章-1&#34;&gt;第1章
&lt;/h2&gt;&lt;p&gt;前文リンク：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/that-boy-talent-maybe-but-not-much/&#34; &gt;那时少年&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大学の頃にも一度恋愛の話がありましたが、振り返ってみると、もっともなのはテレビドラマの中のロマンスへの憧れでした。未熟な心持ちで、あの頃はどのように人を愛するかさえ理解できず、ましてや「家を持ち、仕事をする」といったことには到底辿り着けませんでした。&lt;/p&gt;
&lt;h2 id=&#34;第2章&#34;&gt;第2章
&lt;/h2&gt;&lt;p&gt;時代の流れの中で、私は幸いにも、大学での数々の騒動を経て、研究院院生になる道を選べなかった。卒業後、就職し、ITブームを追い風に順調な日々を送った。既に8年が過ぎ、業界の熱狂的な投資家（ホットマネー）は消え失せ、徐々に衰退の一途を辿っている。時折、あの選択をしたのは正しかったのかと疑ってしまうこともあった。祖父の言うように電力会社に入ればよかったかもしれない。もしも最初の5年間はそう思えるのであれば、その後は自然に消えていくのだろう。恒生銀行への校内入社から5年間も会社を変えずにいたことは、技術に対する理解、業界に対する認識、そして自身の能力に対する認識において、それぞれ欠落があると言わざるを得ない。杭州本部の指示に従い、深圳支店へ赴任し、職場の争奪戦（事後でようやく経緯を整理したところ、双方とも敗北し、最終的に勝利したのは取締役会だった）を経験した後、技術への情熱を胸に、杭州へと戻った。少し若く、自信過剰な面がありながら、杭州から撤退し、上海へと飛び込んだ。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元々、杭州に戻り、定住し、家を購入する計画を立てていたが、金利は最高点に達し、住宅価格もピークを迎えており、最初から陥落（套路）される可能性があった。経済状況も悪く、十分な資金もなく、住宅ローンを抱えながら結婚するというプレッシャーと、業界の低迷という状況が、精神的に不安定になる原因となっていた。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第3章&#34;&gt;第3章
&lt;/h2&gt;&lt;p&gt;長年をかけて、多くのことを見てきたこともあり、自分自身も愚かさや浪費をしてきた。現状は順風満帆だ。様々な経験をし、様々な人々に出会うことで、人は少しずつ成長していく。もし家に閉じこもり続ければ、性格的な欠点がいかにして現れるかは誰にもわからないだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43;関数呼び出しのオーバーヘッド時間 / 関数呼び出し時のパフォーマンスに関する問題</title>
        <link>https://ttf248.life/ja/p/cpp-function-call-timing/</link>
        <pubDate>Wed, 24 Jan 2024 14:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-function-call-timing/</guid>
        <description>&lt;p&gt;設計行情 SDK、針對不同的回呼函數實現方式，進行了一次耗時的測試。近期在看 C++ 函數編程，當函數變成了一等公民，在程式內部流轉，耗時有什么不同？&lt;/p&gt;
&lt;p&gt;前文連結：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/compiler-callback-performance-testing/&#34; &gt;编译器、回调函数、性能测试&lt;/a&gt;
&lt;code&gt;leimao&lt;/code&gt; 大佬刚好也做了类似的測試，借代码一用。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;実行プラットフォームは引き続き、当社の旧友である &lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt; です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cassert&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

int add_one(int input) { return input + 1; }

bool validate_vector_add_one(std::vector&amp;lt;int&amp;gt; const&amp;amp; input_vector,
                             std::vector&amp;lt;int&amp;gt; const&amp;amp; output_vector)
{
    bool is_valid{true};
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        if (output_vector.at(i) != input_vector.at(i) + 1)
        {
            is_valid = false;
            break;
        }
    }
    return is_valid;
}

void reset_vector(std::vector&amp;lt;int&amp;gt;&amp;amp; input_vector)
{
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        input_vector.at(i) = 0;
    }
}

template &amp;lt;typename T, typename Func&amp;gt;
void unitary_function_pass_by_lambda_function(T&amp;amp; output, T const&amp;amp; input,
                                              Func const func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_std_function_value(T&amp;amp; output, T const&amp;amp; input,
                                                 std::function&amp;lt;T(T)&amp;gt; const func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_std_function_reference(
    T&amp;amp; output, T const&amp;amp; input, std::function&amp;lt;T(T)&amp;gt; const&amp;amp; func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_function_pointer(T&amp;amp; output, T const&amp;amp; input,
                                               T (*func)(T))
{
    output = func(input);
}

int main()
{
    // Set floating point format std::cout with 3 decimal places.
    std::cout.precision(3);

    size_t const num_elements{10000000};
    std::vector&amp;lt;int&amp;gt; input_vector(num_elements, 0);
    std::vector&amp;lt;int&amp;gt; output_vector(num_elements, 0);

    auto const lambda_function_add_one{[](int const&amp;amp; input) -&amp;gt; int
                                       { return input + 1; }};
    std::function&amp;lt;int(int)&amp;gt; const std_function_add_one{lambda_function_add_one};

    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a function pointer: &amp;quot; &amp;lt;&amp;lt; sizeof(&amp;amp;add_one)
              &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a std::function pointer: &amp;quot;
              &amp;lt;&amp;lt; sizeof(&amp;amp;std_function_add_one) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a std::function: &amp;quot; &amp;lt;&amp;lt; sizeof(std_function_add_one)
              &amp;lt;&amp;lt; std::endl;

    // Call function frequently in a vanilla way.
    // The compiler knows what function to call at compile time and can optimize
    // the code.
    // This is the best performance we could get.
    std::chrono::steady_clock::time_point const time_start_vanilla{
        std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        output_vector.at(i) = add_one(input_vector.at(i));
    }
    std::chrono::steady_clock::time_point const time_end_vanilla{
        std::chrono::steady_clock::now()};
    auto const time_elapsed_vanilla{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(time_end_vanilla -
                                                             time_start_vanilla)
            .count()};
    float const latency_vanilla{time_elapsed_vanilla /
                                static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass Vanilla: &amp;quot; &amp;lt;&amp;lt; latency_vanilla &amp;lt;&amp;lt; &amp;quot; ns&amp;quot;
              &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector

## 正文
// 時々、コンパイル時に呼び出す関数を知らない場合があります。
// `std::function` を使用して、関数を引数として渡すことができます。
// この場合は、`std::function` を値で渡します。
// `std::function` のサイズが 32 バイトであるため、値を渡すと多くのコピーが発生し、パフォーマンスが悪くなります。
std::chrono::steady_clock::time_point const
    time_start_pass_by_std_function_value{std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
    unitary_function_pass_by_std_function_value(
        output_vector.at(i), input_vector.at(i), std_function_add_one);
}
std::chrono::steady_clock::time_point const
    time_end_pass_by_std_function_value{std::chrono::steady_clock::now()};
auto const time_elapsed_pass_by_std_function_value{
    std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
        time_end_pass_by_std_function_value -
        time_start_pass_by_std_function_value)
        .count()};
float const latency_pass_by_std_function_value{
    time_elapsed_pass_by_std_function_value /
    static_cast&amp;lt;float&amp;gt;(num_elements)};
std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Std Function Value: &amp;quot;
          &amp;lt;&amp;lt; latency_pass_by_std_function_value &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);

// `std::function` を値で渡す代わりに、参照（ポインタ）で渡すこともできます。
// この場合、オブジェクトのコピーは排除されます。パフォーマンスは、`std::function` を値で渡した場合よりも優れています。
// ただし、ワイルドな方法ほどではありません。
std::chrono::steady_clock::time_point const
    time_start_pass_by_std_function_reference{
        std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
    unitary_function_pass_by_std_function_reference(
        output_vector.at(i), input_vector.at(i), std_function_add_one);
}
std::chrono::steady_clock::time_point const
    time_end_pass_by_std_function_reference{
        std::chrono::steady_clock::now()};
auto const time_elapsed_pass_by_std_function_reference{
    std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
        time_end_pass_by_std_function_reference -
        time_start_pass_by_std_function_reference)
        .count()};
float const latency_pass_by_std_function_reference{
    time_elapsed_pass_by_std_function_reference /
    static_cast&amp;lt;float&amp;gt;(num_elements)};
std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Std Function Reference: &amp;quot;
          &amp;lt;&amp;lt; latency_pass_by_std_function_reference &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);

## 本文
// `std::function` は、関数ポインタ、呼び出し可能オブジェクト、ラムダ関数をラップする汎用的なものです。
// 汎用性があるため、関数ポインタほど効率的ではありません。この場合は、関数ポインタを関数に渡します。
// `std::function` を参照で渡すよりもパフォーマンスが優れています。
std::chrono::steady_clock::time_point const time_start_pass_by_function_pointer{std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
    unitary_function_pass_by_function_pointer(output_vector.at(i),
                                                  input_vector.at(i), &amp;amp;add_one);
}
std::chrono::steady_clock::time_point const time_end_pass_by_function_pointer{std::chrono::steady_clock::now()};
auto const time_elapsed_pass_by_function_pointer{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_function_pointer -
            time_start_pass_by_function_pointer)
            .count()};
float const latency_pass_by_function_pointer{
        time_elapsed_pass_by_function_pointer /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Function Pointer: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_function_pointer &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);

// ラムダ関数を関数に渡すこともできます。
// コンパイラは、コンパイル時に呼び出す関数を知っており、コードを最適化できます。
// `std::function` を参照で渡すよりもパフォーマンスも優れています。
std::chrono::steady_clock::time_point const time_start_pass_by_lambda_function{std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
    unitary_function_pass_by_lambda_function(
        output_vector.at(i), input_vector.at(i), lambda_function_add_one);
}
std::chrono::steady_clock::time_point const time_end_pass_by_lambda_function{std::chrono::steady_clock::now()};
auto const time_elapsed_pass_by_lambda_function{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_lambda_function -
            time_start_pass_by_lambda_function)
            .count()};
float const latency_pass_by_lambda_function{
        time_elapsed_pass_by_lambda_function /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Lambda Function: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_lambda_function &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);

## 本文

```shell
# チーム全体の最適化 (O2) を有効にし、コンパイルには gcc13 を選択しました。gcc のバージョンが異なる場合、性能と時間の違いはわずかに異なりますが、バージョンが高いほど lambda の効果が良いです。
関数のポインタのサイズ: 8 バイト
std::function ポインタのサイズ: 8 バイト
std::function オブジェクトのサイズ: 32 バイト
Vanilla パスのレイテンシ: 0.418 ns
std::function 値でパスするレイテンシ: 3.47 ns
std::function リファレンスでパスするレイテンシ: 1.36 ns
ポインタで関数をパスするレイテンシ: 0.396 ns
ラムダ関数でパスするレイテンシ: 0.44 ns
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://leimao.github.io/blog/CPP-Function-Call-Performance/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://leimao.github.io/blog/CPP-Function-Call-Performance/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>コンピュータがなぜ一般的にlittle-endianなストレージを採用するのか？</title>
        <link>https://ttf248.life/ja/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;バイアスの解説 &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/host-network-byte-order-debugger/&#34; &gt;ホスト序、ネットワーク序、デバッガで直接観察&lt;/a&gt;
コンピュータ分野の歴史的経緯から生まれた特定の設計習慣は、お尻の幅がロケットエンジンの幅を決定するように、内部の「利点」や「欠点」を分析する必要はありません。単なる歴史的な習慣です。&lt;/p&gt;
&lt;h2 id=&#34;元文章リンク&#34;&gt;元文章リンク
&lt;/h2&gt;&lt;p&gt;著: 北極
リンク: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
出典: 知乎
著作権は著作者に帰属します。商業的な転載をご希望の場合は、著者に連絡して許可を得てください。非営利の転載の場合は、出所を明記してください。&lt;/p&gt;
&lt;h2 id=&#34;正文转载&#34;&gt;正文转载
&lt;/h2&gt;&lt;p&gt;現代の様々なデバイスの状態は、歴史的な慣習と商業化の結果であり、技術そのものとは関係がありません。ARMはビッグエンディアン（大端）でも、リトルエンディアン（小端）でも設定できます。TCP/IPヘッダも現在もビッグエンディアン（ネットワークバイト順序）です。ストレージ分野にも、大端方式でデータを保存する多くのストレージプロトコルや仕様があります。&lt;/p&gt;
&lt;p&gt;したがって、質問者の3つの問題は、今日から見ると次のようになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンピュータが一般的に小端形式で保存するのはなぜ？ → 間違い。&lt;/li&gt;
&lt;li&gt;低バイトを低アドレスに配置した小端形式の方が、大端形式よりも効率的である理由は何ですか？ → 効率は高くなりません。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;現在の技術を用いてこれらの問題を論証するものは、すべて矢を射てから的を描くような行為です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;しかし、大端または小端の選択が、コンピュータの開発史において、確かに一定の客観的な要因があったことは事実です。ホストバイト順序（小端）の利点は、小端形式の加算器は比較的簡単に作れることです。8ビット×4の加算器を作成するには、単一の8ビット加算器で、低アドレスから高アドレスまで順番に各バイトを加算するだけで済みます。桁上がり回路は非常にシンプルであり、大端形式では32ビットを一度ロードする必要があるため、計算できません。現在では、8ビットと32ビットのロードの違いはほとんどありませんが、数十年前にはメモリ価格が高価であったため、より単純な方が有利でした。そのため、ホストバイト順序を選択したのはコストを考慮した結果です。ネットワークバイト順序（大端）の利点は、初期のデバイスのキャッシュが非常に小さかったことです。最初に高バイトを受信することで、パケットの長さ（どの程度のキャッシュが必要か）やアドレス範囲（IPアドレスは前から後ろにマッチングする）を迅速に判断できます。当時のネットワークデバイスのキャッシュはバイト単位であり、先頭のバイトを取得することがより速い場合がありました。そのため、ネットワークデバイスが大端を使用したのはコストを考慮した結果です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;したがって、バイト順序の選択は、歴史的に見て、多くの場合、アプリケーションシナリオとコストを重視したもの（例えば、PPC/MIPSはネットワークデバイスに適している）であり、その後の技術発展において、互換性のために大端小端の設定が引き継がれているものです。&lt;/p&gt;
&lt;p&gt;今日から見れば、これらの利点はすべて存在せず、単なる歴史的な慣習に過ぎません。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>プログラムのデバッグを防止する方法</title>
        <link>https://ttf248.life/ja/p/program-anti-debug/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-anti-debug/</guid>
        <description>&lt;p&gt;心血を注ぎ、新しい壁紙を探し求めた。習慣は黒系の壁紙だが、一部の領域には色を加えても良いだろう。デスクトップにはアイコンを配置する必要があるため、他の色系が壁紙だとアイコンが不明瞭になってしまう。&lt;/p&gt;
&lt;p&gt;上記のコードを睨めつけ、理解できずにいた。AIに投げかけて説明したが、状況を説明していなかったのだ。それは特定の状況下で使われる指示であり、通常のコードではこのような形ではない。&lt;/p&gt;
&lt;p&gt;AIは今や検索エンジンには及ばない。アセンブリの知識が不足している。&lt;/p&gt;
&lt;h2 id=&#34;壁紙&#34;&gt;壁紙
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/program-anti-debug/Snipaste_2024-01-23_19-50-53.png&#34;
	width=&#34;1020&#34;
	height=&#34;470&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;黒色のアセンブル壁紙&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;彙集コード&#34;&gt;彙集コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実用例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;彙編コード&#34;&gt;彙編コード
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;PUSHFD&lt;/code&gt; および &lt;code&gt;POPFD&lt;/code&gt; は、フラグレジスタの値をスタックにプッシュおよびポップする命令です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MOV DWORD PTR [ESP], 0X100&lt;/code&gt; は、スタックポインタ (&lt;code&gt;ESP&lt;/code&gt;) のアドレスにある4バイト（DWORD）領域に &lt;code&gt;0x100&lt;/code&gt; の値を移動する命令です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nop&lt;/code&gt; は、何もしない命令です。デバッグやテストのために使用されることがあります。&lt;/p&gt;
&lt;h3 id=&#34;実用例&#34;&gt;実用例
&lt;/h3&gt;&lt;p&gt;このコードは、デバッグモードでプログラムが実行されているかどうかを判断します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__try&lt;/code&gt; ブロック内でアセンブリコードを実行し、例外が発生した場合に &lt;code&gt;__except&lt;/code&gt; ブロックが実行されます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GetExceptionCode() == EXCEPTION_SINGLE_STEP&lt;/code&gt; は、プログラムがシングルステップモードで実行されているかどうかを確認します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXCEPTION_EXECUTE_HANDLER&lt;/code&gt; および &lt;code&gt;EXCEPTION_CONTINUE_EXECUTION&lt;/code&gt; は、それぞれハンドラを実行するか、実行の継続を許可する例外コードです。&lt;/p&gt;
&lt;p&gt;この例では、プログラムがシングルステップモードで実行されている場合、&lt;code&gt;true&lt;/code&gt; が返されます。それ以外の場合は、&lt;code&gt;false&lt;/code&gt; が返されます。&lt;/p&gt;
&lt;h2 id=&#34;説明&#34;&gt;説明
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TrapFlag&lt;/code&gt;はレジスタフラグ領域内のフラグであり、このフラグが設定されると、&lt;code&gt;SINGLE_STEP&lt;/code&gt;例外が発生します。なぜなら、デバッガーでコードをトレースしている場合、このフラグはデバッガーによってリセットされ、その例外を捕捉できないからです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;実際のテストでは、直接ステップオーバーしてデバッグ対象の関数を実行すると、デバッグが検出されないことがわかります。例外は、その関数にエントリする実行時のみ検出されます（資料参照、未検証）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;中国語の関連資料は、すべてウェブサイトの英文稿を翻訳したものです。このサイトでは、さまざまな反调试技術について解説しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>焦点访談/CCTV動画ファイルのダウンロード方法</title>
        <link>https://ttf248.life/ja/p/how-to-download-focus-interview-cctv-videos/</link>
        <pubDate>Tue, 23 Jan 2024 19:23:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/how-to-download-focus-interview-cctv-videos/</guid>
        <description>&lt;p&gt;最近、有人相談してきて、焦点访谈の動画をダウンロードする方法を聞かれたんだけど、頭の中で考えていたのは、おそらくまた &lt;code&gt;m3u8&lt;/code&gt; 形式で暗号化されているだろうという考えだったんだ。ちょっと手軽に処理してみようか。&lt;/p&gt;
&lt;h2 id=&#34;ダウンローダー&#34;&gt;ダウンローダー
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/nilaoda/N_m3u8DL-CLI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/nilaoda/N_m3u8DL-CLI&lt;/a&gt;
&lt;code&gt;m3u8 downloader&lt;/code&gt; のオープンソース 命令行 m3u8/HLS/dash ダウンローダーです。普通 AES-128-CBC 解密、マルチスレッド、カスタムリクエストヘッダなどをサポートしています。简体中文、繁体中文、英語に対応しています。English Supported.&lt;/p&gt;
&lt;h2 id=&#34;ブラウザ拡張機能&#34;&gt;ブラウザ拡張機能
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://microsoftedge.microsoft.com/addons/detail/ngjclnbcdbahekojpkhancmiobdahemb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Live Stream Downloader&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;蜜汁自信&#34;&gt;蜜汁自信
&lt;/h2&gt;&lt;p&gt;アドレスを取得し、これで片付くと思ったが、結果は何もかも役に立たない。正常にセグメント内容を解析したり、資料を検索したりすることができなかった。公式がダウンロードアドレスを処理しており、ある程度の置換を手動で行う必要があることを発見した。プラグインで解析された &lt;code&gt;key&lt;/code&gt; を以下のリンクに手動でコピー＆置き換えなければならない。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;https://newcntv.qcloudcdn.com/asp/hls/2000/0303000a/3/default/***********************/2000.m3u8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2024年1月現在、アドレスは有効。今後変更がある場合は、ウェブページを分析してご自身で判断してください。
過去のアドレスのバックアップ：&lt;code&gt;https://hlswx.cntv.kcdnvip.com/asp/hls/main/0303000a/3/default/一串字符/main.m3u8?maxbr=2000&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://jln.cn/post/517.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jln.cn/post/517.html&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SQL Serverデータベースのディスクファイルの権限を一括で変更する</title>
        <link>https://ttf248.life/ja/p/bulk-modify-sqlserver-database-disk-permissions/</link>
        <pubDate>Tue, 23 Jan 2024 19:06:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-modify-sqlserver-database-disk-permissions/</guid>
        <description>&lt;p&gt;会社セキュリティポリシーの調整により、&lt;code&gt;機械師 mini&lt;/code&gt;は最終的に自宅へ移転し、予備サーバーとして利用。同時にマシンシステムを再インストールし、&lt;code&gt;ubuntu&lt;/code&gt;が&lt;code&gt;windows server&lt;/code&gt;に切り替えられました。アクティベーション手段が不正であったため、自宅で使用しても問題ないように見えていましたが、実際にはアクティベーションができていないと様子がおかしくなりました。&lt;/p&gt;
&lt;p&gt;Microsoftによる検出がトリガーされ、通常稼働していたサーバーが起動から1時間で自動シャットダウン。システムログを徹底的に調査した結果、盗版であることに至りました。&lt;/p&gt;
&lt;p&gt;仕方なく再度システムを再インストールし、&lt;code&gt;SqlServer&lt;/code&gt;も再インストールする必要が生じました。毎回トラブルシューティングを行うと非常に面倒であり、ファイル権限管理が厳格であるため、データベースの追加が正常に行えませんでした。&lt;/p&gt;
&lt;h2 id=&#34;エラーメッセージ&#34;&gt;エラーメッセージ
&lt;/h2&gt;&lt;p&gt;システムを再インストールした後、&lt;code&gt;SqlServer&lt;/code&gt;がデータベースに接続しようとすると、オペレーティングシステムのアクセス拒否エラー5120が発生することがあります。&lt;/p&gt;
&lt;h2 id=&#34;処理スクリプト&#34;&gt;処理スクリプト
&lt;/h2&gt;&lt;p&gt;前文リンク：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/bulk-update-local-git-and-legacy-permissions/&#34; &gt;ローカルGitリポジトリの一括更新&lt;/a&gt;、やはりこの馴染み深いスクリプトだ。改造して、フォルダをトラバースしながらファイルの権限を変更し、現在のユーザーに完全な編集権限を与えるようにする。&lt;/p&gt;
&lt;p&gt;ネット上のチュートリアルはほとんどが手動で修正する方法を示しており、毎回数個のファイルだけ修正するのだろうか？ 私は毎回多数のファイルを処理する必要があり、すべてを手作業で処理すると、精神的に疲れてしまう。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$rootDirectory = &amp;quot;D:\data\2013_RujiaInfo&amp;quot;

Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    if ($_ -is [System.IO.DirectoryInfo]) {
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;フォルダ $itemPath の所有者を $currentUserName に変更しました&amp;quot;
            # 現在のユーザーに書き込み権限を付与
            Invoke-Expression &amp;quot;icacls `&amp;quot;$itemPath`&amp;quot; /grant `&amp;quot;$($currentUserName):(OI)(CI)F`&amp;quot;&amp;quot;
            Write-Host &amp;quot;$currentUserName がフォルダを編集するための権限が付与されました&amp;quot;
        } else {
            Write-Host &amp;quot;フォルダ $itemPath の所有者を変更できません。エラー情報: $icaclsResult&amp;quot;
        }
    } else {
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # 現在のユーザーに書き込み権限を付与
            Invoke-Expression &amp;quot;icacls `&amp;quot;$itemPath`&amp;quot; /grant `&amp;quot;$($currentUserName):(F)`&amp;quot;&amp;quot;
            Write-Host &amp;quot;$currentUserName がファイルを編集するための権限が付与されました&amp;quot;
        } else {
            Write-Host &amp;quot;ファイル $itemPath の所有者を変更できません。エラー情報: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Linuxシステムベンチマークテスト</title>
        <link>https://ttf248.life/ja/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;Windows 平台上有鲁大师（娱乐大师），不能说数据很准，但总归有个参考，当然也有其他的专业跑分软件。到了 Linux 系统，好像一直没遇到特别合适的跑分软件。&lt;/p&gt;
&lt;p&gt;Sysbench 是一款多功能的基准测试工具，可用于测试 CPU、内存、文件 I/O、线程性能等。您可以使用 Sysbench 来执行各种性能测试任务。&lt;/p&gt;
&lt;p&gt;手头上刚好有三台机器用于测试：机械师 mini 本地小主机、阿里云 dev 开发云服务器、华为云开发服务器。&lt;/p&gt;
&lt;h2 id=&#34;sysbench-のインストール&#34;&gt;Sysbench のインストール
&lt;/h2&gt;&lt;p&gt;ほとんどの Linux ディストリビューションでは、パッケージマネージャを使用して Sysbench をインストールできます。例えば、CentOS 8 では、次のコマンドを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbenchの使用例&#34;&gt;Sysbenchの使用例
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU性能のテスト: &lt;code&gt;sysbench --test=cpu run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;メモリ読み取り性能のテスト: &lt;code&gt;sysbench --test=memory run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ファイルI/O性能のテスト:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッド性能のテスト: &lt;code&gt;sysbench --test=threads --num-threads=4 run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MySQLデータベース性能のテスト（最大接続数を調整する必要あり）：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ランニングデータレポート&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;h2 id=&#34;実行データレポート&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34; style=&#34;width:421px;&#34; class=&#34;column-headers-background&#34;&gt;B&lt;/th&gt;&lt;th id=&#34;0C2&#34; style=&#34;width:398px;&#34; class=&#34;column-headers-background&#34;&gt;C&lt;/th&gt;&lt;th id=&#34;0C3&#34; style=&#34;width:422px;&#34; class=&#34;column-headers-background&#34;&gt;D&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R0&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;ローカル機械師&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;华为云&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム構成&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム情報&lt;br&gt;  オペレーティングシステム              Ubuntu 23.04&lt;br&gt;  カーネル                        Linux 6.2.0-36-generic x86_64&lt;br&gt;  モデル                         Machenike Machenike DT Computer&lt;br&gt;  マザーボード                   Machenike Machenike DT Computer&lt;br&gt;  BIOS                          American Megatrends International, LLC.&lt;br&gt;DB19V012&lt;br&gt;&lt;br&gt;CPU情報&lt;br&gt;  名前                          Intel Core i7-12650H&lt;br&gt;  トポロジー                      1 プロセッサ、10 コア、16 スレッド&lt;br&gt;  識別子                    GenuineIntel Family 6 Model 154 Stepping 3&lt;br&gt;  ベース周波数                4.60 GHz&lt;br&gt;  L1 命令キャッシュ          32.0 KB x 8&lt;br&gt;  L1 データキャッシュ                 48.0 KB x 8&lt;br&gt;  L2 キャッシュ                      1.25 MB x 2&lt;br&gt;  L3 キャッシュ                      24.0 MB&lt;br&gt;&lt;br&gt;メモリ情報&lt;br&gt;  サイズ                          62.6 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム情報&lt;br&gt;  オペレーティングシステム              CentOS Stream 8&lt;br&gt;  カーネル                        Linux 4.18.0-513.el8.x86_64 x86_64&lt;br&gt;  モデル                         Alibaba Cloud Alibaba Cloud ECS&lt;br&gt;  マザーボード                   N/A&lt;br&gt;  BIOS                          SeaBIOS 449e491&lt;br&gt;&lt;br&gt;CPU情報&lt;br&gt;  名前                          Intel(R) Xeon(R) Platinum&lt;br&gt;  トポロジー                      1 プロセッサ、1 コア、2 スレッド&lt;br&gt;  識別子                    GenuineIntel Family 6 Model 85 Stepping 4&lt;br&gt;  ベース周波数                2.50 GHz&lt;br&gt;  L1 命令キャッシュ          32.0 KB&lt;br&gt;  L1 データキャッシュ                 32.0 KB&lt;br&gt;  L2 キャッシュ                      1.00 MB&lt;br&gt;  L3 キャッシュ                      33.0 MB&lt;br&gt;&lt;br&gt;メモリ情報&lt;br&gt;  サイズ                          1.65 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム情報&lt;br&gt;  オペレーティングシステム              Ubuntu 22.04.1 LTS&lt;br&gt;  カーネル                        Linux 5. - 64 GB
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;実行データレポート
system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;テストの実行方法：指定されたオプションで&lt;br&gt;スレッド数: 1&lt;br&gt;乱数ジェネレーターを現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限: 10000&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数: 4032.48&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間: 10.0004秒&lt;br&gt;    イベントの総数: 40330&lt;br&gt;&lt;br&gt;遅延 (ms):&lt;br&gt;         最小値: 0.25&lt;br&gt;         平均値: 0.25&lt;br&gt;         最大値: 0.73&lt;br&gt;         95パーセンタイル: 0.25&lt;br&gt;         合計: 9997.55&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差): 40330.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9975/0.00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;データマイニング&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ディープラーニング&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ニューラルネットワーク - 実行データレポート
system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;テストの実行方法：指定されたオプションで&lt;br&gt;スレッド数: 1&lt;br&gt;乱数ジェネレーターを現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限: 10000&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数: 4032.48&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間: 10.0004秒&lt;br&gt;    合計イベント数: 40330&lt;br&gt;&lt;br&gt;遅延 (ms):&lt;br&gt;         最小: 0.25&lt;br&gt;         平均: 0.25&lt;br&gt;         最大: 0.73&lt;br&gt;         95パーセンタイル: 0.25&lt;br&gt;         合計: 9997.55&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差): 40330.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9975/0.00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sysbench 1.0.20 (system LuaJIT 2.1.0-beta3を使用)&lt;br&gt;&lt;br&gt;テストの実行方法：指定されたオプションで&lt;br&gt;スレッド数: 1&lt;br&gt;乱数ジェネレーターを現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限: 10000&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数: 1062.51&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間: 10.0008秒&lt;br&gt;    合計イベント数: 10628&lt;br&gt;&lt;br&gt;遅延 (ms):&lt;br&gt;         最小: 0.91&lt;br&gt;         平均: 0.94&lt;br&gt;         最大: 22.84&lt;br&gt;         95パーセンタイル: 1.06&lt;br&gt;         合計: 9993.46&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差): 10628.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9935/0.00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sysbench 1.0.20 (system LuaJIT 2.1.0-beta3を使用)&lt;br&gt;&lt;br&gt;テストの実行方法：指定されたオプションで&lt;br&gt;スレッド数: 1&lt;br&gt;乱数ジェネレーターを現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限: 10000&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数: 1125.56&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間: 10.0005秒&lt;br&gt;    合計イベント数: 11258&lt;br&gt;&lt;br&gt;遅延 (ms):&lt;br&gt;         最小: 0.86&lt;br&gt;         平均: 0.89&lt;br&gt;         最大: 1.70&lt;br&gt;         95パーセンタイル: 0.99&lt;br&gt;         合計: 9995.40&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差): 11258.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9954/0.00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メモリテストを実行するオプション：指定されたオプションで&lt;br&gt;ブロックサイズ: 1KiB&lt;br&gt;合計サイズ: 102400MiB&lt;br&gt;操作: 書き込み&lt;br&gt;範囲: グローバル&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;総イベント数: 101993199 (10198146.52/秒)&lt;br&gt;&amp;lt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ランダム数生成レポート&#34;&gt;ランダム数生成レポート
&lt;/h2&gt;&lt;p&gt;現在の時刻からの乱数ジェネレーター&lt;br&gt;&lt;br&gt;&lt;br&gt;次のオプションでメモリ速度テストを実行中:&lt;br&gt;  ブロックサイズ：1KiB&lt;br&gt;  合計サイズ：102400MiB&lt;br&gt;  操作：書き込み&lt;br&gt;  範囲：グローバル&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;総操作数：48418803 (1秒あたり4841004.79)&lt;br&gt;&lt;br&gt;転送されたデータ：47283.99 MiB (1秒あたり4727.54 MiB)&lt;br&gt;&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間：                          10.0001s&lt;br&gt;    イベント総数：              48418803&lt;br&gt;&lt;br&gt;レイテンシ（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.00&lt;br&gt;         最大：                                   25.26&lt;br&gt;         95パーセンタイル：                        0.00&lt;br&gt;         合計：                                 4578.95&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント（平均/標準偏差）：           48418803.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   4.5789/0.00&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ランニングテストで次のオプションを使用中：&lt;br&gt;スレッド数：1&lt;br&gt;現在の時刻からの乱数ジェネレーターの初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ：（なし）&lt;br&gt;128ファイル、各16MiB&lt;br&gt;2GiBの合計ファイルサイズ&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IOリクエスト数：0&lt;br&gt;組み合わせてランダムIOテストの読み取り/書き込み比率：1.50&lt;br&gt;定期的なFSYNCが有効になっており、各100リクエストごとにfsync()を呼び出しています。&lt;br&gt;テストの最後にfsync()を呼び出すことが有効になっています。&lt;br&gt;同期I/Oモードを使用&lt;br&gt;ランダムな読み取り/書き込みテストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作：&lt;br&gt;    読み取り/秒：                      3373.41&lt;br&gt;    書き込み/秒：                     2248.94&lt;br&gt;    fsync/秒：                     7201.80&lt;br&gt;&lt;br&gt;スループット：&lt;br&gt;    読み取り、MiB/s：                  52.71&lt;br&gt;    書き込み、MiB/s：               35.14&lt;br&gt;&lt;br&gt;一般的な統計：&lt;br&gt;    合計時間：                          10.0127s&lt;br&gt;    イベント総数：              128288&lt;br&gt;&lt;br&gt;レイテンシ（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.08&lt;br&gt;         最大：                                    5.14&lt;br&gt;         95パーセンタイル：                        0.34&lt;br&gt;         合計：                                 9977.78&lt;br&gt;&lt;br&gt;スレッドの公平性：&lt;br&gt;    イベント（平均/標準偏差）：           128288.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   9.9778/0.00&lt;/p&gt;
&lt;p&gt;スループット：&lt;br&gt;    読み取り、MiB/s：                  52.71&lt;br&gt;    書き込み、MiB/s：               35.14&lt;br&gt;&lt;br&gt;一般的な統計：&lt;br&gt;    合計時間：                          10.0127s&lt;br&gt;    イベント総数：              128288&lt;br&gt;&lt;br&gt;レイテンシ（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.08&lt;br&gt;         最大：                                    5.14&lt;br&gt;         95パーセンタイル：                        0.34&lt;br&gt;         合計：                                 9977.78&lt;br&gt;&lt;br&gt;スレッドの公平性：&lt;br&gt;    イベント（平均/標準 ## ランダム数生成データレポート
現在の時刻からの乱数ジェネレーター&lt;br&gt;&lt;br&gt;&lt;br&gt;次のオプションでメモリ速度テストを実行中:&lt;br&gt;  ブロックサイズ：1KiB&lt;br&gt;  合計サイズ：102400MiB&lt;br&gt;  操作：書き込み&lt;br&gt;  範囲：グローバル&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;総操作数：48418803 (1秒あたり4841004.79)&lt;br&gt;&lt;br&gt;転送されたデータ：47283.99 MiB (1秒あたり4727.54 MiB)&lt;br&gt;&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間：                          10.0001s&lt;br&gt;    イベント総数：              48418803&lt;br&gt;&lt;br&gt;遅延（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.00&lt;br&gt;         最大：                                   25.26&lt;br&gt;         95パーセンタイル：                        0.00&lt;br&gt;         合計：                                 4578.95&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント（平均/標準偏差）：           48418803.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   4.5789/0.00&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;テストオプションで実行中:&lt;br&gt;スレッド数：1&lt;br&gt;現在の時刻からの乱数ジェネレーターの初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ：（なし）&lt;br&gt;128ファイル、各16MiB&lt;br&gt;2GiBの合計ファイルサイズ&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IOリクエスト数：0&lt;br&gt;組み合わせてランダムIOテストの読み取り/書き込み比率：1.50&lt;br&gt;定期的なFSYNCが有効になり、各100リクエストごとにfsync()が呼び出されます。&lt;br&gt;テストの終了時にfsync()を呼び出す。有効になっています。&lt;br&gt;同期I/Oモードを使用&lt;br&gt;ランダムな読み取り/書き込みテストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み取り/秒：                      3373.41&lt;br&gt;    書き込み/秒：                     2248.94&lt;br&gt;    fsync/秒：                     7201.80&lt;br&gt;&lt;br&gt;スループット:&lt;br&gt;    読み取り、MiB/s：                  52.71&lt;br&gt;    書き込み、MiB/s：               35.14&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間：                          10.0127s&lt;br&gt;    イベント総数：              128288&lt;br&gt;&lt;br&gt;遅延（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.08&lt;br&gt;         最大：                                    5.14&lt;br&gt;         95パーセンタイル：                        0.34&lt;br&gt;         合計：                                 9977.78&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント（平均/標準偏差）：           128288.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   9.9778/0.00&lt;/p&gt;
&lt;p&gt;スループット：
読み取り、MiB/s： 52.71
書き込み、MiB/s： 35.14&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ディスク: 2147483648 バイトを 1.81 秒で書き込みました (1129.59 MiB/秒)。&lt;br&gt;&lt;br&gt;テストオプションで実行中:&lt;br&gt;スレッド数：1&lt;br&gt;現在の時刻からの乱数ジェネレーターの初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ：（なし）&lt;br&gt;128ファイル、各16MiB&lt;br&gt;2GiBの合計ファイルサイズ&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IOリクエスト数：0&lt;br&gt;組み合わせてランダムIOテストの読み取り/書き込み比率：1.&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート-1&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;enabled, 各100リクエストごとにfsync()を呼び出す。&lt;br&gt;テストの終了時にfsync()を呼び出し、有効化。&lt;br&gt;同期I/Oモードを使用中&lt;br&gt;ランダムなr/wテストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:                      1593.12&lt;br&gt;    書き込み/秒:                     1062.08&lt;br&gt;    fsync/秒:                     3406.64&lt;br&gt;&lt;br&gt;帯域幅:&lt;br&gt;    読み取り (MiB/s):                  24.89&lt;br&gt;    書き込み (MiB/s):               16.60&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間:                          10.0164秒&lt;br&gt;    イベント総数:              60600&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.00&lt;br&gt;         平均:                                    0.16&lt;br&gt;         最大:                                   31.32&lt;br&gt;         95パーセンタイル:                        0.54&lt;br&gt;         合計:                                 9956.30&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差):           60600.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   9.9563/0.00&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2147483648 バイトを 18.29 秒で書き込みました (111.98 MiB/秒)。&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行中:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数ジェネレーターを初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加のファイルオープンフラグ:(なし)&lt;br&gt;128 ファイル、各 16MiB&lt;br&gt;2GiB の合計ファイルサイズ&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IO リクエスト数: 0&lt;br&gt;ランダムな IO テストの読み取り/書き込み比率: 1.50&lt;br&gt;定期的な FS INC を有効にし、各 100 リクエストごとに fsync() を呼び出す。&lt;br&gt;テストの終了時に fsync() を呼び出し、有効化。&lt;br&gt;同期 I/O モードを使用中&lt;br&gt;ランダムな r/w テストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:                      1665.88&lt;br&gt;    書き込み/秒:                     1110.59&lt;br&gt;    fsync/秒:                     3563.77&lt;br&gt;&lt;br&gt;帯域幅:&lt;br&gt;    読み取り (MiB/s):                  26.03&lt;br&gt;    書き込み (MiB/s):               17.35&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間:                          10.0112秒&lt;br&gt;    イベント総数:              63355&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.00&lt;br&gt;         平均:                                    0.16&lt;br&gt;         最大:                                  205.01&lt;br&gt;         95パーセンタイル:                        0.78&lt;br&gt;         合計:                                 9972.64&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差):           63355.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   9.9726/0.00&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;スレッド数: 4
初期化されたランダムな数値ジェネレーターから現在の時刻を初期化&amp;hellip;&lt;br&gt;&lt;br&gt;ワーカースレッドが開始されました!&lt;br&gt;&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間:                          10.0002秒&lt;br&gt;    イベント総数:              197956&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.16&lt;br&gt;         平均:                                    0.20&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;合計: 40050.41&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;  イベント (平均/標準偏差): 4590.0000/94.36&lt;br&gt;  実行時間 (平均/標準偏差): 10.0126/0.00&lt;/p&gt;
&lt;p&gt;テスト実行時のオプション:
スレッド数: 4
現在の時刻から乱数生成器を初期化
&lt;br&gt;&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;
スレッド起動!&lt;br&gt;&lt;br&gt;&lt;br&gt;
一般統計:
合計時間: 10.0004秒
合計イベント数: 28536&lt;br&gt;&lt;br&gt;遅延 (ms):
最小: 0.23
平均: 1.40
最大: 3.56
95パーセンタイル: 1.47
合計: 39975.16&lt;br&gt;&lt;br&gt;スレッド公平性:
イベント (平均/標準偏差): 7134.0000/39.87
実行時間 (平均/標準偏差): 9.9938/0.01&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;ChatGPTは依然として優れたものですが、以前習得していたMarkdownで完全にテーブルを作成できず、テーブルとして表示すると効果が著しく低下します。カスタムテーマによってページの最大幅が制限されるため、幅を百分率制に調整しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡単な方法としては、TablesGeneratorのようなオンラインツールを使用してHTMLテーブルを生成する方法がありますが（内容が複雑だと不向きです）。&lt;/li&gt;
&lt;li&gt;または、Googleドキュメントで作成し、HTMLドキュメントとしてダウンロードして保存し、ブログに直接コピーする方法を採用しました（シンプルかつ直接的です）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;configの設定でunsafeな設定項目を有効にし、ページごとの幅設定を個別に指定するようにしてください。Hugoでは、ページごとに個別に幅を設定できます。これは、ページのFront Matterにカスタムパラメータを追加することで実現できます。以下はその例です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MarkdownファイルのFront Matterセクション（通常はファイルの冒頭部分）にカスタムパラメータ（例えば&lt;code&gt;custom_width&lt;/code&gt;）を追加します：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;私のページ&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 幅を800ピクセルに設定
---

本文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Hugoのテーマで、対応する単一ページテンプレートファイル（例えば&lt;code&gt;layouts/_default/single.html&lt;/code&gt;）を見つけてください。&lt;/li&gt;
&lt;li&gt;単一ページテンプレート内で、Front Matterに&lt;code&gt;custom_width&lt;/code&gt;パラメータが存在するか確認し、それを適切なHTML要素（例えば&lt;code&gt;div&lt;/code&gt;）に適用します：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、内联スタイル（&lt;code&gt;style&lt;/code&gt;属性）を使用して&lt;code&gt;div&lt;/code&gt;要素の&lt;code&gt;max-width&lt;/code&gt;属性を設定し、&lt;code&gt;custom_width&lt;/code&gt;パラメータが指定されていない場合、幅をデフォルトで100%にしています。&lt;code&gt;margin: 0 auto;&lt;/code&gt;は&lt;code&gt;div&lt;/code&gt;要素を中央揃えにします。&lt;/p&gt;
&lt;p&gt;実際のアプリケーションでは、テーマの構造やCSSスタイルの詳細に応じて、上記の例を調整する必要がある場合があります。スタイルを調整する際には、テーマの一貫性と可読性を維持するようにしてください。&lt;/p&gt;
&lt;p&gt;最後に、使用しているテーマが若干異なるため、サイト全体でカスタムCSSの設定も調整しました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git で HTTP リポジトリを無効にする</title>
        <link>https://ttf248.life/ja/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;習慣更新ソフトウェアバージョンです。Gitのどのバージョンの場合にHTTPリポジトリからのコード取得が許可されないか不明ですが、以下のエラーが発生します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h2&gt;&lt;p&gt;環境：Windows 平台、これまで小烏龟を使ってgitを操作しており、鍵の認証も小烏龜で処理していました。以前、ローカルリポジトリを一括更新するスクリプトを作成したこともあります。&lt;/p&gt;
&lt;p&gt;前回の記事へのリンク：[ローカルGitリポジトリの一括更新](&amp;lt;{{ relref &amp;ldquo;/post/2023/10-19-批量更新本地git仓库&amp;rdquo; &amp;gt;})&lt;/p&gt;
&lt;p&gt;今日、帰宅してコードの更新を実行したところ、上記のエラーが発生し、リポジトリが正常に更新されなくなりました。&lt;code&gt;Git&lt;/code&gt;の設定でHTTPプロトコルを使用するように変更してみるのが妥当だと思って探しましたが、対応する設定項目は見つかりませんでした。&lt;/p&gt;
&lt;p&gt;最も簡単な解決策は、SSHプロトコルに変更してリポジトリを更新することです。会社側で設定している&lt;code&gt;gitlab&lt;/code&gt;は短期的にHTTPSプロトコルを提供しません。&lt;/p&gt;
&lt;h2 id=&#34;既存の問題&#34;&gt;既存の問題
&lt;/h2&gt;&lt;p&gt;以前、ローカルリポジトリをバッチ更新するためのスクリプトを作成する際に、&lt;code&gt;ssh&lt;/code&gt; を使ってリポジトリをプルすることを検討していたが、詳細を確認しなかった。小烏龟（TortoiseGit）で設定した &lt;code&gt;git&lt;/code&gt; 設定情報を config に同期していなかったため、コマンドラインから&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull # 権限がないために正常に更新できない
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と表示された。&lt;/p&gt;
&lt;p&gt;SSH キーの確認コマンド (&lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;) を実行しても問題なく動作するため、小烏龟（TortoiseGit）でコードをプルできるのに、コマンドラインで &lt;code&gt;git pull&lt;/code&gt; コマンドを実行すると SSH キーが正しくないというエラーが表示される場合、小烏龟は PuTTY の SSH 鍵を使用しているのに対し、コマンドラインは OpenSSH の SSH 鍵を使用している可能性がある。&lt;/p&gt;
&lt;p&gt;小烏亀の秘钥設定は、システム &lt;code&gt;.ssh&lt;/code&gt; フォルダから秘钥ファイル情報を読み取らず、インターフェースでリポジトリ設定を行う際に、個別に秘钥ファイルのパスを設定する。このテクニックを利用すると、プルした最初のリポジトリの設定で秘钥を設定すれば、他のリポジトリも同じ秘钥ファイルを共有できる。PuTTY は秘钥をロードした後、すぐに終了せず、代理サービスを開始する。&lt;/p&gt;
&lt;p&gt;グローバル設定を調整し、システムデフォルトの &lt;code&gt;ssh&lt;/code&gt; 設定を使用しないようにすることで、Git Bash は TortoisePlink を使用して SSH 操作を実行するように構成する。この設定は、TortoiseGit に付属の PuTTY ツールを使用する場合に適している。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の実行ファイルパスを、ご自身の TortoiseGit のパスに合わせて変更してください。完全なパスを設定することで、システム環境変数に追加する必要はありません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>AIプログラミングとタスク分解</title>
        <link>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;2年前、サイトにコード領域のコピー機能を追加するために、半日ほど試行錯誤した結果、レンダリング効果が少し不満だった。半ば無能なフロントエンド開発者として、改善することも思わなかった。動けばそれで十分だ、と割り切っていた。今年、&lt;code&gt;AI&lt;/code&gt;を使って小程序を開発し、フロントエンドの開発もより慣れてきた。そしてリファクタリングを行った（&lt;code&gt;AI&lt;/code&gt;が再設計）。&lt;/p&gt;
&lt;p&gt;悟り：タスク分解をして、多くの小さなタスクは&lt;code&gt;AI&lt;/code&gt;で開発すると自然にこなせる。すでに閉鎖された小程序において、&lt;code&gt;75%&lt;/code&gt;のコードを&lt;code&gt;AI&lt;/code&gt;が提供し、複数のタスクを分割して引き渡すことで、人工によってプロジェクトコードが&lt;code&gt;組み立て&lt;/code&gt;られた。&lt;/p&gt;
&lt;h2 id=&#34;前文&#34;&gt;前文
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.github.io/post/2022/001/%E4%BB%A5%E4%B8%BA%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E6%83%85%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%A4%8D%E5%88%B6%E6%8C%89%E9%92%AE/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;簡単なことだと考えたけど、コードのコピーボタンを追加する&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;promot&lt;/strong&gt;: クラス &amp;ldquo;highlight&amp;rdquo; を持つウェブページの要素のコンテナ内に、コードと JavaScript の CSS およびコードを記述して、テキストのコピー機能を実現するコピーボタンを追加します。&lt;/p&gt;
&lt;p&gt;最初のドラフトのコードは一見問題があり、基本的には使用可能なものを生成し、コピーされた内容が正しくなく、冗長な文字が含まれているため、最適化を再度誘導し、コアの色設計を指定し、エフェクトを含めるようにしました。&lt;/p&gt;
&lt;p&gt;お客様がボタンのサイズと色に関して特定の要件をお持ちであることを認識しており、これらの要件に合わせてスタイルのデザインを再構築できます。以下は、提供されたカラーパレットとボタンサイズの最適化を含むスタイルです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* 位置調整 */
  right: 2px;
  padding: 3px 6px; /* サイズ縮小 */
  font-size: 12px; /* フォントサイズ縮小 */
  background-color: #8FD1E1; /* ボタンの背景色 */
  color: #272822; /* テキストの色 */
  border: 1px solid #272822; /* ボーダーの色 */
  border-radius: 3px; /* 角丸 */
  cursor: pointer;
  opacity: 0.7; /* デフォルトの不透明度 */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* 平滑なトランジション効果 */
}

.copy-btn:hover {
  opacity: 1; /* マウスオーバー時に完全表示 */
  background-color: #A3D4E5; /* マウスオーバー時の背景色 */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このスタイルでは、ボタンのサイズとフォントサイズを小さくして、より洗練された外観にしています。また、ボタンはデフォルトで半透明になっており、マウスをホバーすると完全表示され、背景色がわずかに明るくなることで視覚的なフィードバックを提供します。これにより、お客様のカラー要件を満たしつつ、モダンでユーザーフレンドリーな特徴を備えたデザインを実現しています。&lt;/p&gt;
&lt;p&gt;以下はよりシンプルな JavaScript です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // すべての .highlight 要素を検索
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // コピーボタンを作成
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;コピー&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // ボタンを各 .highlight 要素に追加
    highlight.appendChild(copyBtn);

    // クリックイベントリスナーを追加
    copyBtn.addEventListener(&#39;click&#39;, function() {
      // .highlight 内の最初の &amp;lt;code&amp;gt; 要素からコピーするコードを取得 (存在する場合)
      const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;

      navigator.clipboard.writeText(code).then(() =&amp;gt; {
        // コピー成功メッセージを表示
        copyBtn.textContent = &#39;已コピー!&#39;;
        setTimeout(() =&amp;gt; {
          copyBtn.textContent = &#39;コピー&#39;;
        }, 2000);
      }).catch(err =&amp;gt; {
        console.error(&#39;コピー失敗: &#39;, err);
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;コード領域の右上隅に、トップエリアにコピーボタンを追加することを望んでいたが、フロントエンドに関する知識が不足しており、キーワードに基づいて機能を正確に記述することができなかったため、AIと何度もやり取りして期待に応えられなかった。&lt;/p&gt;
&lt;p&gt;しかし、時間の経過とともに、AIがプログラミング開発にどの程度の影響を与えるのかは分からない。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>東方日報・エナンゼンの小作文騒動：文化とビジネスの衝突</title>
        <link>https://ttf248.life/ja/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</link>
        <pubDate>Wed, 20 Dec 2023 18:57:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</guid>
        <description>&lt;p&gt;東方甄選小作文事件是一起由於东方甄选官方账号否认主播董宇辉是所有小作文的作者而引發的網路風波。到底真相如何，已經無從考證，公司權謀的鬥爭將這個事情推上了風口浪尖。&lt;/p&gt;
&lt;p&gt;魚的七秒鐘記憶，以後都交付給&lt;code&gt;AI&lt;/code&gt;撰寫，嘗試了&lt;code&gt;Bing AI&lt;/code&gt;和&lt;code&gt;ChatGPT plus&lt;/code&gt;，前者給的資料更加完整，搜尋引擎的獲取的資料還是更多一些，輸出的博文內容不夠完整，格式比較僵硬；後者透過關鍵字獲取內容，生成的內容不是那麼完整，但是能獲得完整的博文內容，如果給出參考資料的網址，就能優化生成的稿子。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;東方甄選小作文事件は、著作権と創作帰属を巡る論争であり、2023年12月5日以降、主播の董宇輝と东方甄選が関わる一連のインタラクションによって引き起こされました。この騒動は、商業運営の複雑さを示すだけでなく、現代の商業文化やインターネット社会に対する深い反省を促しました。&lt;/p&gt;
&lt;h4 id=&#34;2023年12月5日事件の起点&#34;&gt;2023年12月5日：事件の起点
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Oriental Zen Selectionは、ホストの董宇輝が朗読した「短い文章」（小作文）の動画を公開し、それが急速に人気を集めた。&lt;/li&gt;
&lt;li&gt;Oriental Zen Selectionは動画のコメント欄で、これらの小作文は多くがコピーライターチームによって作成されたものであり、すべて董宇輝が書いたものとは限らないと声明を発表した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月13日董宇辉の回答&#34;&gt;2023年12月13日：董宇辉の回答
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;董宇辉は長文を投稿し、「ファンダム」という名目で誰かを中傷することに反対し、自身の立場を表明した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月14日経営陣の回答&#34;&gt;2023年12月14日：経営陣の回答
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;东方甄选CEOの孫東旭、謝罪動画を公開し、会社運営における欠陥を認めた。&lt;/li&gt;
&lt;li&gt;东方甄选の董事长である俞敏洪も事件についてコメントし、董宇輝に謝罪した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月16日重大決定&#34;&gt;2023年12月16日：重大決定
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;东方甄选官方宣布免去孙东旭的CEO职务，俞敏洪兼任。&lt;/li&gt;
&lt;li&gt;同日，俞敏洪发表致歉信，表示将解除直播间拉黑的网友。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月18日董宇辉的新角色&#34;&gt;2023年12月18日：董宇辉的新角色
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新東方教育科技集團任命董宇輝為新東方教育科技集團董事長文化助理，兼任新東方文旅集團副總裁。&lt;/li&gt;
&lt;li&gt;俞敏洪透露，將與董宇輝成立工作室，開闢新的直播帳號和直播間。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論と反省&#34;&gt;結論と反省
&lt;/h2&gt;&lt;p&gt;この騒動は、著作権と創作の帰属に関する争いであるだけでなく、文化とビジネスの衝突をより深く反映している。デジタル化され、断片化された時代背景の下において、コンテンツ制作の著作権帰属は、深く考えるべきテーマとなっている。東方甄選小作文事件は、単なるメディア騒動ではなく、現代における商業文化とインターネット社会に対する深刻な反省でもある。&lt;/p&gt;
&lt;p&gt;観察者として、私たちはこのような文化とビジネスの衝突をどのように捉えるべきか？商業的利益を追求する一方で、創造者の労務成果をどのように保護し尊重すべきか？これらの問題は、私たち一人ひとりが深く考えるべきものである。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ゲーム心理学：eスポーツ (げーむしんりよく：えスポーツ)</title>
        <link>https://ttf248.life/ja/p/game-psychology-competitive-gaming/</link>
        <pubDate>Mon, 11 Dec 2023 10:26:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/game-psychology-competitive-gaming/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;課金型ゲーム（かきんがたげーむ）：ここでは議論しません。ゲームコミュニティ内での呼称で、円安战士を指します。ゲーム設定の理解は不要で、潤沢な資金が必要です。&lt;/li&gt;
&lt;li&gt;周辺の小弟の前を挟み、城を「屠城」（とじょう）する快感を享受します。&lt;/li&gt;
&lt;li&gt;広範な視聴者を持つeスポーツタイトル（例：英雄伝説 オリンス、DOTA2、王者荣耀、バトルロイヤル バトルパス）：これらのゲームは、完全な世界観設定と健全な競技イベントサイクルを備えています。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;ゲームデザインにおいて、心理学は重要な分野であり、特にソーシャルサイコロジーが重要です。人々の行動、ニーズ、動機を理解することで、より魅力的なゲーム体験を設計することができます。「自慢話」とソーシャルサイコロジーの関係について、以下の角度から考察できます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;社会的承認欲求:&lt;/strong&gt; 人々は社交グループの中で承認欲求を満たそうとします。ゲームにおいて、プレイヤーが特定の分野で優れていると感じさせたり、他のプレイヤーの注目を集めたりすることで、この承認欲求を満たすことができます。これは、スキルを誇示したり、獲得した報酬を示したりすることによって表現されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;社会的競争:&lt;/strong&gt; 一部のゲームは、社交ネットワーク上で自分の成果を示すことを奨励する要素を取り入れています。これは、ランキングシステム、アチーブメントシステム、またはマルチプレイヤー対戦などの方法で実現できます。このような設計は、プレイヤー間の競争心理を刺激し、一部のプレイヤーがより優れたパフォーマンスを発揮して社会的承認を得ようとする可能性があります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自己表現:&lt;/strong&gt; 一部のゲームでは、キャラクターのカスタマイズや仮想アイテムなどを通じて自己表現を行うことができます。この自己表現は、単なる自慢話だけでなく、個性と社交的な交流の方法を示すものにもなります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;チームワーク:&lt;/strong&gt; 一部のゲームは、チームワークを重視し、ソーシャルインタラクションを通じてゲーム目標を達成します。このような状況下では、「自慢話」の行為は必ずしも奨励されず、チーム協調と相互サポートが強調されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;心理的報酬システム:&lt;/strong&gt; ゲームデザインは、プレイヤーの積極的な社交行動を刺激するために、心理的報酬システムを採用することができます。たとえば、プレイヤーに報酬や特権を与え、積極的にソーシャルインタラクションに参加するように促します。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全体として、ゲームデザインにおけるソーシャルサイコロジーは、プレイヤー間の相互作用とソーシャル体験を形作るために使用できます。「自慢話」の行為は、特定の状況下では存在しうるものの、ゲームデザイナーは通常、この行為をバランスさせるように努力し、すべてのプレイヤーにとってポジティブで楽しいゲーム体験を確保します。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;思いついたところまで書いただけで、完全なアウトラインはありません。少し散漫です。
筆者がよくプレイする英雄伝説 オリンスは、私たちが世代の記憶の一部であり、ほとんどの保護者が子供がゲームをプレイすることを好まないのは、このタイプのゲームを深く理解していないことと、ゲーム設定に関連しているためです。各試合は新しい始まりであり、多くの子供にとって、プレイ中に過度な思考を伴わないようにしています。これは、彼らが独自の探索方法に依存することを示しています。このような状況下では、ゲームの勝敗は、子供自身のゲームスキルに大きく左右されます。筆者の実際の経験に基づいて、相当数のプレイヤーがこのタイプに属しており、彼らにとっては、…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最大のコストは金銭ではなく時間です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ゲーム内にはエンターテイメントモードもあり、娯楽を求めるプレイヤーのニーズを満たしています。
英雄聯盟のような競技性の高いゲームは、筆者にとって「三国志」の世界を体験する機会でした。序盤では手持ちの資源はほとんどなく、自分の理解力でキルやヒールを行い、経済力を高め、視界を確保し、相手を待ち伏せするなど、戦略を練りながらプレイします。抜群のゲームセンスを持っていても、そうでない自分でも十分に楽しむことができます。全体を統率する「コントロール感」、不利な状況から逆転して喜びを感じる「爽快感」。
また、多くの人が語る「クラウドプレイヤー」もいます。彼らはもうゲームをプレイしていませんが、世界大会期間中には必ず試合を見守ります。
ここで触れておくべきは、「ゲーム時間」です。それは単一のゲームの時間ではなく、あなたがログインする時間のことです。週末の午後の時間、仕事終わりの夜7時から10時頃など、ほとんどの場合、チームメイトとスムーズにコミュニケーションを取り、送信した信号が理解され、返信があるのを確認できます。しかし、例えば徹夜でプレイする場合、遭遇するのは「ネット依存少年」であり、有利な状況では彼らはあなたのことを慰めることさえあります。画面越しでもその「怒り」を感じ取ることができます。
そもそもIT業界に携わっており、ゲームも多く触れ、色々な種類をプレイしてきたため、競技性の高いゲームは常に自分の頭を使ってプレイする習慣があり、反射速度や才能に頼るのではなく、チームを指揮する役割を担うことを好んでいました。最初は、学生時代にYY工会の大黒柱たちと一緒に遊んでいたのがきっかけでした。
今のゲーム環境はどうでしょうか。以前ほど落ち着きがなく、純粋なものではありません。&lt;/p&gt;
&lt;p&gt;長年級をプレイした後、高分段の対局をしてプレイすると本当に疲れます。 常に高度集中し、相手の謀略を考え、相手の設局をどのように回避するかを考える、まるで「プレイが終わったらもう続けたくない」という状態です。&lt;/p&gt;
&lt;p&gt;真に言わせてください、あなたが非常に上手いので、プロの試合に出場しない限り、人生の軌跡にはほとんど影響しません。 社交の手段としては有効ですが、生計を立てることはできませんし、社会の中で立ち上がることができません。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;シングルプレイゲームとオンラインゲームは、異なる種類のゲームであり、その玩法、体験、技術において顕著な違いがあります。 以下に、シングルプレイゲームとオンラインゲームの違いを理解するための重要な側面を示します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;接続方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;シングルプレイゲーム（オフライン/シングルプレイヤー）：&lt;/strong&gt; このようなゲームは、ローカルデバイス上で単独でプレイされ、インターネット接続が不要です。 ネットワーク接続なしでゲーム体験を楽しむことができます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインゲーム（オンライン/マルチプレイヤー）：&lt;/strong&gt; これらのゲームは通常、インターネット接続が必要です。これは、プレイヤーがリアルタイムで他のプレイヤーと相互作用する必要があるためです。 オンラインゲームは、協力または競争的なものがあり、オンラインソーシャルインタラクションや競技を含みます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;プレイヤーの相互作用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;シングルプレイゲーム：&lt;/strong&gt; プレイヤーは、人工知能、プリセットされたタスク、または敵対的な要素と相互作用します。 ゲーム体験は通常、ゲーム内デザインとストーリーの影響を受けます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインゲーム：&lt;/strong&gt; プレイヤーは、世界中の他のリアルなプレイヤーと相互作用できます。 これには、タスクの共同完了、競争、競技大会、チャット、ギルドシステムなどのソーシャル要素が含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ゲームのデザインとコンテンツ：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;シングルプレイゲーム：&lt;/strong&gt; ゲームデザインは、完全で独立したストーリーとゲーム体験を提供するのに重点を置いています。 ゲーム内容は通常、事前に設計されており、プレイヤーはゲーム内で探索、パズル解決、または戦闘を行います。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインゲーム：&lt;/strong&gt; ゲームデザインは、リアルタイムインタラクションとプレイヤー間の競争または協力を考慮する必要があります。 ゲームの内容はよりダイナミックで、定期的なアップデート、オンラインイベント、ソーシャルインタラクションが含まれる場合があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;技術要件：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;シングルプレイゲーム：&lt;/strong&gt; 通常、オフライン状態で実行でき、デバイスのパフォーマンスとインターネット接続に対する要求は比較的低いです。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインゲーム：&lt;/strong&gt; 強いインターネット接続が必要であり、サーバーとネットワーク性能に関する高い要求があります。 これにより、リアルタイムインタラクションがスムーズに行われるようにします。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ビジネスモデル：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;シングルプレイゲーム：&lt;/strong&gt; 通常、一度限りの購入またはダウンロードのビジネスモデルを採用しており、プレイヤーはゲームを購入するとローカルデバイスでゲームを完全にプレイできます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインゲーム：&lt;/strong&gt; 無料プレイ、広告、アイテム購入、サブスクリプションなど、さまざまなビジネスモデルを採用することがあります。 これにより、サーバー運営とゲームコンテンツの継続的な更新が維持されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;これらの違いを理解することで、プレイヤーは自分の好みを明確にし、ゲームデザイナーがプレイヤーの期待に応えるのに役立ちます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>クラウドサーバーとスクリプトキッド</title>
        <link>https://ttf248.life/ja/p/cloud-servers-and-script-kids/</link>
        <pubDate>Mon, 20 Nov 2023 15:08:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cloud-servers-and-script-kids/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;データマイニング&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ディープラーニング&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ニューラルネットワーク&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双十一のセールで、阿里云に新しいサーバーを導入しました：経済的なモデル、99ドル年間契約、構成は高くありません。ホップサーバーとして、自宅のサービスを代理するのに適しています。イベントは2026年まで続きます。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に上海地域のサーバーを選びました。低遅延で自宅の機械を代理し、Windows 11とWindows Server 2022を使用しました。Server版は後から展開したもので、使用中に拒否アクセスメッセージを受け取りました。当初はサーバーのアップデートだと考えましたが、すぐに回復しませんでした。関連するエラーメッセージを検索すると、誰かがログインを試みていることが示され、パスワードが間違っているため、ログインできなくなりました。
以前にもセキュリティ攻撃のスクリプトに触れたことがあります。すぐに、これらのログインは正常な行動ではないことに気づきました。サーバーが攻撃を受けており、ログインを暴力的に試みている可能性があります。サーバーのファイアウォール設定は簡素で、ホワイトリストを設定していませんでした。自宅の2台の機械の3389ポートをパブリックに公開したため、魚塘の餌のように、誰かがターゲットになりました。攻撃者がスクリプト小子であることを知ったので、次のことは単純でした。ファイアウォールのホワイトリストを設定し、会社のIPアドレスと自宅のIPアドレスのみが代理サービスへのアクセスを許可するようにしました。
&lt;code&gt;frps&lt;/code&gt; 代理サーバーの以前の設定では、ログ記録が無効でした。ログを有効にすると、全国各地の代理IPアドレスが自宅サーバーにログインしようとしていたことがわかりました。幸いなことに、Server版の1台がありました。それによって、Windows 11の機械は必ず攻撃され、パスワード設定が簡単だったため、問題が発生するのを防ぐことができました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [101.43.98.211:50486]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [218.93.202.63:56970]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.179.106.174:60812]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [58.16.204.238:2839]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [124.223.47.24:50274]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.248.128.22:55883]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.143.53.138:56955]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d89473251

```shell
Nov 16 04:46:34 aliyun-sh sshd[156625]: 無効なパスワード：root から 120.55.164.64 ポート 53410 の ssh2
Nov 16 04:46:34 aliyun-sh sshd[156623]: 無効なパスワード：root から 111.16.215.122 ポート 36548 の ssh2
Nov 16 04:46:58 aliyun-sh sshd[156630]: 無効なパスワード：無効なユーザー share から 139.9.233.78 ポート 53872 の ssh2
Nov 16 04:47:23 aliyun-sh sshd[156634]: 無効なパスワード：無効なユーザー spark から 139.9.233.78 ポート 36134 の ssh2
Nov 16 04:47:26 aliyun-sh sshd[156636]: 無効なパスワード：root から 120.55.164.64 ポート 46142 の ssh2
Nov 16 04:47:47 aliyun-sh sshd[156640]: 無効なパスワード：root から 111.16.215.122 ポート 42962 の ssh2
Nov 16 04:48:24 aliyun-sh sshd[156652]: 無効なパスワード：root から 120.55.164.64 ポート 38868 の ssh2
Nov 16 04:48:25 aliyun-sh sshd[156654]: 無効なパスワード：root から 111.16.215.122 ポート 46164 の ssh2
Nov 16 04:48:39 aliyun-sh sshd[156657]: 無効なパスワード：無効なユーザー test から 139.9.233.78 ポート 39386 の ssh2
Nov 16 04:48:50 aliyun-sh sshd[156659]: 無効なパスワード：root から 111.16.215.122 ポート 38892 の ssh2
Nov 16 04:48:53 aliyun-sh sshd[156662]: 無効なパスワード：root から 120.55.164.64 ポート 49348 の ssh2
Nov 16 04:48:53 aliyun-sh sshd[156664]: 無効なパスワード：無効なユーザー test から 139.9.233.78 ポート 49864 の ssh2
Nov 16 04:50:02 aliyun-sh sshd[156672]: 無効なパスワード：root から 111.16.215.122 ポート 45294 の ssh2
Nov 16 04:50:30 aliyun-sh sshd[156680]: 無効なパスワード：無効なユーザー zabbix から 139.9.233.78 ポート 52206 の ssh2
Nov 16 04:50:50 aliyun-sh sshd[156683]: 無効なパスワード：root から 120.55.164.64 ポート 34820 の ssh2
Nov 16 04:50:51 aliyun-sh sshd[156685]: 無効なパスワード：root から 111.16.

## 付録
独自のサーバーを構築する場合、Windows のパブリックアクセスにはホワイトリストの設定が必要です。Linux では、パスワードログインの無効化と、キーファイルによる認証の有効化をお勧めします。&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>ローカルのGitリポジトリと履歴上の遺留権限の問題の一括更新</title>
        <link>https://ttf248.life/ja/p/bulk-update-local-git-and-legacy-permissions/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-update-local-git-and-legacy-permissions/</guid>
        <description>&lt;p&gt;チームのプロジェクト間に依存関係があり、歴史的な理由から &lt;code&gt;submodule&lt;/code&gt; を使用せずにプロジェクトの依存を管理してきました。日常の開発では、リポジトリコードを順番に手動で更新する必要があり、そうでない場合、さまざまな奇妙な問題が発生する可能性があります。&lt;/p&gt;
&lt;p&gt;オンラインの情報源を参照して、構造は基本的に同じです。ローカルで &lt;code&gt;git_list.txt&lt;/code&gt; というディレクトリを維持し、スクリプトを使用してディレクトリを反復処理し、一度に更新を実行し、その後、作業を開始する前にこのスクリプトを実行します。&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux
&lt;/h2&gt;&lt;p&gt;新しいファイルを作成: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ リポジトリの更新 ===================&amp;quot;

# git_list.txt が存在するか確認
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt ファイルが存在しません！git をプルするリポジトリ URL を作成し、追加してください。&amp;quot;
  exit 1
else
  echo &amp;quot;============ git リポジトリリストを検出しました ====&amp;quot;
fi

# git_list.txt から URL を一行ずつ読み込み、プル操作を実行
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url が完了しました！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;ディレクトリ $url は存在しません。プルをスキップします。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows
&lt;/h2&gt;&lt;p&gt;新しいファイルを作成: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem スクリプトの存在するディレクトリへ移動
cd /d &amp;quot;%~dp0&amp;quot;

rem git_list.txt が存在するか確認
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt ファイルが見つかりません！ git リポジトリ URL を作成し、追加してください。
  exit /b 1
) else (
  echo ============ git リポジトリリストファイルが検出されました =========
)

rem git_list.txt 内の URL を行ごとに読み込み、プル操作を実行
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo %%i のプルが完了しました！
    echo ========================================
  ) else (
    echo ディレクトリ %%i は存在しません。スキップします。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;過去の遺留問題&#34;&gt;過去の遺留問題
&lt;/h3&gt;&lt;p&gt;再装システム後に発生した &lt;code&gt;git&lt;/code&gt; フォルダの権限ファイルに関する問題を解決します：&lt;strong&gt;致命的なエラー「unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)」&lt;/strong&gt;
オンラインで提案されている解決策は、主に &lt;code&gt;stack overflow&lt;/code&gt; から提供されています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リポジトリディレクトリに信頼を追加: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitconfig&lt;/code&gt; ファイルを手動で編集し、ディレクトリを信頼として指定&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の方法により、リポジトリの更新は正常になりましたが、毎回 &lt;code&gt;git pull&lt;/code&gt; を実行する際にコンソールに多数の警告メッセージが表示され、所有者に関するエラーを示しています。&lt;/p&gt;
&lt;h3 id=&#34;デスクトップpcのシステム再インストール&#34;&gt;デスクトップPCのシステム再インストール
&lt;/h3&gt;&lt;p&gt;長らくシステムを再インストールしていなかったマシンで、システムディスクにゴミファイルが爆発的に発生し、仕方なく空き時間を利用してシステムを再構築した。再度この権限の問題に遭遇し、以前のスクリプトが動作しない原因は、修正した権限が不完全だったことによるもの。&lt;/p&gt;
&lt;p&gt;新しい解決策を採用し、&lt;code&gt;*&lt;/code&gt;を追加することで、&lt;code&gt;git&lt;/code&gt;がすべてのディレクトリを自動的に信頼するように設定した。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;これはユーザーの権限の問題か、それとも皆さんがWindowsプラットフォームに慣れていないことが原因なのか。実際には&lt;code&gt;chown&lt;/code&gt;のようなコマンドも存在する。フォルダの所有者を変更することはもちろん可能だが、もしディレクトリ数が少ない場合は、手動で所有者を変えることもできる。しかし、このワークステーションはドメイン情報を追加しており、おそらく会社のドメインが異常を抱えているか、あるいはローカルシステムの設定に問題があるため、ユーザーリストからログインに使用するユーザーが見つからない状態だった。最終的にはコマンドラインを使用して問題を解決した。&lt;/p&gt;
&lt;p&gt;管理者権限で&lt;code&gt;powershell&lt;/code&gt;スクリプト&lt;code&gt;change_ower.ps1&lt;/code&gt;を実行し、スクリプトファイルのエンコーディングを&lt;code&gt;gbk&lt;/code&gt;に設定することを忘れないでください。中国語のオペレーティングシステムでは、そうしないと文字化けしてしまうため。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 現在のユーザー名を取得
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# PowerShell の文字エンコーディングを UTF-8 に設定
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 所有者を変更するルートディレクトリパス
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 実際のパスに置き換えてください

# ディレクトリとファイルを再帰的に取得し、所有者を変更
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # アイテムがファイルかディレクトリかをチェック
    if ($_ -is [System.IO.DirectoryInfo]) {
        # ディレクトリの場合、icacls コマンドを使用して所有者権限を変更
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;ディレクトリ $itemPath の所有者を $currentUserName に変更しました&amp;quot;
        } else {
            Write-Host &amp;quot;ディレクトリ $itemPath の所有者変更に失敗しました。エラー情報: $icaclsResult&amp;quot;
        }
    } else {
        # ファイルの場合、icacls コマンドを使用して所有者権限を変更
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;ファイル $itemPath の所有者を $currentUserName に変更しました&amp;quot;
        } else {
            Write-Host &amp;quot;ファイル $itemPath の所有者変更に失敗しました。エラー情報: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;予想外の事態が再び発生し、スクリプト実行時の出力された日本語の情報が文字化けした。コンソールエンコーディングの設定を調整したり、スクリプトのエンコーディングを変更したりしたが、すべて文字化けしてしまう。おそらく脳みそが完全に機能停止しているのだろうと推測し、コントロールパネル - 領域 - 言語設定のベータ機能を試してみた。グローバルにUnicodeエンコーディングを有効にし、スクリプト実行は正常になった。いくつかの開発ソフトウェアが正常に動作しないままであり、後で資料を整理したところ、スクリプトファイルのエンコーディングを&lt;code&gt;gbk&lt;/code&gt;に設定する必要があることを思い出した。&lt;/p&gt;
&lt;h2 id=&#34;资料&#34;&gt;资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>WPF学習資料</title>
        <link>https://ttf248.life/ja/p/wpf-learning-resources/</link>
        <pubDate>Tue, 17 Oct 2023 10:49:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-learning-resources/</guid>
        <description>&lt;p&gt;小規模アプリ（ミニプログラム）開発の設計上の問題がまだ解決されておらず、新たに&lt;strong&gt;WPF&lt;/strong&gt;を立ち上げました。最近会社にも波乱があり、遠隔地での共同作業におけるコミュニケーション効率は依然として不十分で、思い切ってクライアント側のUI開発を受注しました。&lt;/p&gt;
&lt;h2 id=&#34;wpf&#34;&gt;WPF
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8&amp;amp;preserve-view=true&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 微软官网学习资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zh7791/p/11502696.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 基础总结(学習建議)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.wpfsoft.com/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 中文網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/638815741&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 个人まとめと学習推奨&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;WPF&lt;/code&gt; のインターフェースデザインで使われる多くの概念は、ウェブページフロントエンドのデザインに似ています。可能な限り UI デザインとビジネスロジックを分離し、UI デザインを独立して開発することも、インターネット企業が期待する分業方法です。今年、小程序（ミニアプリ）の開発をした経験があり、多くの概念は共通しているため、習得も比較的容易でした。これらのものは現代の UI 設計における「道」であり、基本的なフレームワークの概念を理解することで、その後の道が曲がりにくくなります。&lt;/p&gt;
&lt;p&gt;以前 &lt;code&gt;WinForm&lt;/code&gt; 開発の経験がある読者の場合は、&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zh7791/p/11502696.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 基礎まとめ(学習建議)&lt;/a&gt; を読んでください。内容は短いため、経験豊富な読者が学習ルートを計画するのに適しています。&lt;/p&gt;
&lt;p&gt;初心者の方は、&lt;a class=&#34;link&#34; href=&#34;http://www.wpfsoft.com/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 中文網&lt;/a&gt; から始めて、基本的な概念、発展の歴史、低レベルクラスの論理的認知について理解してください。このウェブサイトは偶然にもタイミングが合っており、今年8月に作者がリリースしたばかりで、読者を惹きつけ、コースの購入を促すためのものです。私のコンテンツとのタイミングが一致しなかったら、ほぼ無縁になっていたでしょう。&lt;/p&gt;
&lt;p&gt;最も本格的な学習資料は、もちろん Microsoft の公式資料ですが、内容は少し退屈なので、新参者は根気強く学ぶ必要があります。&lt;/p&gt;
&lt;p&gt;古典的な電子書籍もたくさんありますが、日常業務に追われるため、静かに読書する時間は限られています。プロジェクトで実践しながら学習することが最適です。&lt;/p&gt;
&lt;h2 id=&#34;c-と-net-のリリース履歴&#34;&gt;C# と .NET のリリース履歴
&lt;/h2&gt;&lt;p&gt;以前学習した言語について、最近数年間の新機能のリリースが少し多いため、文法のバージョンが毎年更新されています。
&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&lt;/a&gt;
公式学習資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/csharp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/csharp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>金融汚職の幕開け (Kin&#39;yū okujo no makkake)</title>
        <link>https://ttf248.life/ja/p/financial-anti-corruption-curtain-rise/</link>
        <pubDate>Mon, 09 Oct 2023 14:53:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/financial-anti-corruption-curtain-rise/</guid>
        <description>&lt;p&gt;中国共中央政治局：要加大国有企业、金融领域的反腐败力度，深入纠治“四风”。&lt;/p&gt;
&lt;h2 id=&#34;中国共中央政治局&#34;&gt;中国共中央政治局
&lt;/h2&gt;&lt;p&gt;中共中央政治局は9月27日に会議を開き，《 بشأن第20回全国党大会初の巡視調査の結果に関する総合報告》を審議しました。中国共産党総書記習近平が会議を主導しました。会議では、巡視調査を契機として、党の全面的な指導をさらに強化し、巡視対象となる党組織に政治的立場を高めさせ、党中央から委託された責任と使命を誠実に履行させ、国有企業の核心機能と競争力を高め、中国特色社会主義の重要な物質的基盤と政治的基盤を夯け、金融企業の経済主体へのサービスと国家戦略への貢献を強化し、質の高い発展を推進することを強調しました。開発と安全を統籌し、底線思考と限界思考を確立し、重大なリスクを防止・軽減するための有効な措置を講じ、安全の底線を確実に守るべきだとしました。全面から厳格な党規律の実践をさらに深めることとし、党委（党組）書記の第一責任人としての責任、幹部団体のメンバーにおける「一岗双责」（一つの職務二つの責任）、紀検監察機構における監督責任を強化し、各級「一把手」（一把は「一人の手」の意味）に対する監督を強化し、国有企業や金融分野での腐敗撲滅の力度を高め、四風（不正行為）を深く是正し、事例を基にした改革と治理を行い、敢えて腐敗しない、腐敗しない、腐敗したくないという姿勢を一体的に推進することを目指しました。（新華社）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重大な金融リスクを引き起こす！中国銀行原党委书记・董事长劉連舸が党籍から除名
中央紀委国家監察委員会ウェブサイトによると、中共中央の承認に基づき、中央紀委国家監察委員会は中国銀行股份有限公司の原党委书记・董事长劉連舸の重大な不規律・違法行為に関する立案調査を実施しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;調査の結果、劉連舸は理想と信念を喪失し、初心と使命を放棄し、党中央の決定と指示を揺るぎなく実行せず、打ち切ったり、弱体化させたりしただけでなく、金融リスク管理の責任を放棄し、違法な融資を行い、重大な金融リスクを引き起こし、全面から厳格な党規律の実践における主体責任を果たさなかっただけでなく、所在組織の政治的生態を深刻に損ない、私用で禁制品である書籍を持ち込んだことになり、心積もり積もって組織の調査に抵抗し、中央八項規定精神を無視し、違法な贈り物や会所への出入り、スキーや旅行の接待を受け、長期間管理対象者の車両を利用し、規則に従わない個人に関する事項の報告をしなかったため、組織からの問い合わせに対して誠実に対応せず、私的な採用と昇進における不正行為を行い、違法に資金の融資・借入れに関与し、秘密情報を私的に保持し、道徳的堕落を犯し、家族の管理を怠り、法規や倫理の底線を持たず、「金融で金融を食べる」ことを通じて、職務上の便宜を利用して他人の融資・資金調達やプロジェクト協力などの分野で利益を得ており、巨額の賄賂を受け取っていました。&lt;/p&gt;
&lt;p&gt;劉連舸は、党の政治的紀律、組織的紀律、廉潔的紀律、業務的紀律、生活的紀律に重大な違反を犯し、受贿罪と違法な融資行為に関与しており、党十八大以降、収縮・抑制せず、さらに拡大したため、性質が深刻で悪影響を与え、厳粛な処分を受けるべきだとされました。中国共産党規律処罰条例、中華人民共和国監察法、中華人民共和国公職人员政务处分法などの関連規定に基づき、中央紀委常委会の会議において研究され、中共中央の承認を経て決定され、劉連舸に党籍除名処分を与え、按定された待遇を取消し、その代表資格を停止し、違法な所得を没収し、犯罪に関与している問題を検察機関に移送することになりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中国光大グループ原党委书记・董事长李晓鹏が重大な不規律・違法行為により党籍と公職から除名。（央視新聞）&lt;/li&gt;
&lt;li&gt;中央紀委国家監察委員会ウェブサイトは、貴州省紀委監委の報道に基づき：貴州銀行の原党委书记・董事长李志明が重大な不規律・違法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;昨年8年ぶりに匯金が四大行を買い注ぎ&#34;&gt;昨年8年ぶりに、匯金が四大行を買い注ぎ
&lt;/h2&gt;&lt;p&gt;2024年10月11日、工商銀行、農業銀行、中国銀行、建設銀行の四大国有商業銀行はそれぞれ公告を発表され、匯金公司による買い注色が、2761万株、3727万株、2489万株、1838万株となりました。 匯金公司は今後6ヶ月以内に二级市場で四大行を継続的に買い注ぎ続ける予定です。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>トラフィック収益化のビジネスモデル：くじ引き</title>
        <link>https://ttf248.life/ja/p/traffic-monetization-business-model-raffle/</link>
        <pubDate>Tue, 19 Sep 2023 07:04:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/traffic-monetization-business-model-raffle/</guid>
        <description>&lt;p&gt;配信者からのiPhone？ミニプログラムランキングの報酬？様々なライブプラットフォームでのギフト抽選会？&lt;/p&gt;
&lt;p&gt;上記の3つは、あまり関連性のないものに見えますが、実際には無料トラフィックによる収益化の異なるパターンであり、少し金融ゲームのようなものです。&lt;/p&gt;
&lt;h2 id=&#34;プラットフォームでのラッキープリズ獲得&#34;&gt;プラットフォームでのラッキープリズ獲得
&lt;/h2&gt;&lt;p&gt;一般的な状況では、ユーザーがリセットしてプラットフォーム通貨を獲得した後、心怡の配信者へギフトを購入したり、各プラットフォームには別の遊び方があります。ユーザーがプラットフォーム通貨を獲得した後、直接ギフトを送るのではなく、一定量の通貨を使って抽選イベントに参加し、限定の高いギフトを獲得することができます。&lt;/p&gt;
&lt;p&gt;この時点で問題が発生しています。オンライン抽選は、簡単に言うとプラットフォームがカジノを開いて、参加人数が多いほど確実に利益を出すということです。**屌ス（草θ）**のようなユーザーが、モバイル端末で一か所勝負する心理で、大当たりを期待し、その後ギフトを贈ることで、面子を得て、大哥（リーダー）になる！&lt;/p&gt;
&lt;h2 id=&#34;配信者からの贈り物実物&#34;&gt;配信者からの贈り物（実物）
&lt;/h2&gt;&lt;p&gt;前述のプラットフォーム抽選は、ユーザー自身の投稿内容を対象としています。配信者は毎月流水ミッションや人気度ミッションを実施し、ギフト抽力を開始する玩法では、ファンが指定されたギフトを贈ったり、指定金額のギフトを贈ったりすることで抽選に参加できるチャンスを得ます。そのギフトは高級スマートフォンであったり、現金ハッピーバッグであったりします。
人気のある配信者にとって、この活動は非常に収益性が高く、一時的なゼロコスト購入に相当し、参加者が十分にあれば、配信者は利益を得ることができます。ここでは配信者の運営能力が試されます。
もちろん、報酬が高い玩法もあります（現金価値）。多くの屋外配信者はこの玩法を利用しており、間接的にオンラインギャンブルを行っていると言えます。視聴内容には誰も関心がなく、ユーザーは自分自身が当選できるかどうかだけを気にします。
ショー形式の配信者を除いて、PKモードを通じてファンに消費を促し、一般的なゲーム配信者は、プレイヤーの消費意欲を高めることが難しく、ゲームプレイとライブ視聴は娯楽であり、追加の金銭支出を望まないものです。特に&lt;strong&gt;競技性の高いゲーム&lt;/strong&gt;においては、抽選方式がユーザーの課金習慣や消費習慣を育み、時折衝動的な消費（大量に送る、当選したい気持ち）を引き起こす可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;ミニプログラムランキング報酬&#34;&gt;ミニプログラムランキング報酬
&lt;/h2&gt;&lt;p&gt;ミニプログラムを設計し、役に立たないワークフローを作成したり、一部のゲームに関連する補助サービスを提供したりします。これらはすべて、騰訊（テンセント）の審査に通るための掩護措置です。ミニプログラム内の遊び方は、ランキングメカニズムを追加して、ユーザーが閲覧したインセンティブ広告やタスクを完了することでポイントを獲得し、ポイントに基づいてランキングを設定し、上位のランキングのユーザーに指定された報酬を与えます。&lt;/p&gt;
&lt;p&gt;コアロジック：広告収入 &amp;gt; 運営コスト + 報酬費用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ミニプログラムにも正常な稼働の方法があり、適切なサービスを提供し、適度な広告を通じて収益を得ることができます。得られる金額は多くないかもしれませんが、わずかな流れでもあり、それは可能です。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>ゼロティア・ローカルエリアネットワーク</title>
        <link>https://ttf248.life/ja/p/zero-tier-remote-lan/</link>
        <pubDate>Tue, 19 Sep 2023 04:58:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/zero-tier-remote-lan/</guid>
        <description>&lt;p&gt;オフィスに新たにミニPCを入手し、環境構築を兼ねて便利に考えたのですが、自宅でも時折アクセスする必要があるため、一時的に社内ネットワークのトンネリングを実施することになりました。これまでの経験から、&lt;code&gt;frp&lt;/code&gt;サービスをデプロイしてポートフォワーディングを設定する方法を選びましたが、その品質は公開サーバーの帯域幅に依存します。少しばかり新鮮な&lt;code&gt;Zerotier&lt;/code&gt;仮想マシンによるローカルエリアネットワーク（LAN）を試してみることにしました。これは&lt;code&gt;VPN&lt;/code&gt;と似ており、ローカルで仮想ネットワークインターフェースを作成し、すべてのマシンを1つの仮想ネットワークに参加させます。&lt;/p&gt;
&lt;h2 id=&#34;zerotierとは&#34;&gt;Zerotierとは
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ZeroTier&lt;/code&gt;は、ソフトウェア定義の広域ネットワーク（SD-WAN）ソリューションであり、異なる地理的な場所にあるデバイス間で安全な仮想ネットワークを作成することを可能にします。 &lt;code&gt;ZeroTier&lt;/code&gt;を使用すると、複数のコンピューター、サーバー、およびデバイスを、あたかも同じローカルネットワーク上にいるかのように、一元的に暗号化された仮想ネットワークに接続できます。これにより、開発者やIT専門家は、複雑なネットワーク設定やVPN構成なしで、異なる場所間で安全にデータを共有し、リソースを共有することができます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ZeroTierネットワーク&lt;/strong&gt;: ZeroTierネットワークは、異なるデバイスがインターネット経由で互いに接続されることを可能にする、仮想的かつグローバルなローカルエリアネットワーク（LAN）です。このネットワークには複数のサブネットを含めることができ、すべてのデバイスはZeroTierの技術を使用して相互に接続されます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;惑星サーバー&lt;/strong&gt;: 惑星サーバーは、ZeroTierネットワークの中核コンポーネントであり、その一元的なトポロジー構造、ルーティング情報、およびネットワーク状態を維持・管理します。惑星サーバーはグローバルなネットワーク制御センターとして機能しますが、直接データを転送しません。ユーザーのデバイスは、少なくとも1つの惑星サーバーに接続してZeroTierネットワークに参加する必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中継サーバー&lt;/strong&gt;: 中継サーバーは、ZeroTierネットワーク内の補助的なノードであり、デバイス間の直接通信チャネルを確立するのを支援します。デバイスが直接接続できない場合、データ転送のために中継サーバーを経由することができます。これにより、ネットワークの到達性とパフォーマンスが向上します。中継サーバーは通常、世界中に配置され、データの転送ハブとして機能します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全体として、ZeroTierは惑星サーバーと中継サーバーの支援により、デバイスがグローバル範囲で仮想LANを作成し、安全かつ高速なデバイス間の通信を実現します。惑星サーバーはグローバルネットワーク管理を担当し、中継サーバーは必要に応じてデバイス間の接続を確立するのに役立ちます。&lt;/p&gt;
&lt;h2 id=&#34;インストールと展開&#34;&gt;インストールと展開
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zerotier.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zerotier.com/&lt;/a&gt; の公式ウェブサイトにアクセスし、インストールファイルおよびドキュメントを入手してください。&lt;/li&gt;
&lt;li&gt;お使いのオペレーティングシステムに応じて、ZeroTier One クライアントをダウンロードしてインストールします。Windows、macOS、Linux など、多くのプラットフォームに対応しています。&lt;/li&gt;
&lt;li&gt;インストールが完了したら、ZeroTier One クライアントを起動します。&lt;/li&gt;
&lt;li&gt;まだアカウントをお持ちでない場合は、ZeroTier アカウントを作成します。クライアント内でアカウントを作成できます。&lt;/li&gt;
&lt;li&gt;ZeroTier アカウントにログインし、新しいネットワークを作成します。ネットワークには一意の16桁IDが割り当てられ、これを覚えておく必要があります。&lt;/li&gt;
&lt;li&gt;デバイスをこのネットワークに参加させます。クライアントでネットワークIDを入力するか、QRコードスキャン機能を使用します。&lt;/li&gt;
&lt;li&gt;ZeroTier クライアントのインストールおよび設定されたデバイスは、同じ仮想ネットワークに追加されます。これらのデバイス間では、現在、ローカルネットワークにあるかのように直接通信できるようになります。&lt;/li&gt;
&lt;li&gt;ZeroTier のコントロールパネルで、ネットワーク設定を管理したり、デバイスを追加したり、ネットワークトラフィックを監視したりできます。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;moon-のインストールとデプロイ&#34;&gt;moon のインストールとデプロイ
&lt;/h2&gt;&lt;p&gt;国内の多くのキャリアが UDP トンネリングを禁止しているため、&lt;code&gt;frp&lt;/code&gt; サービスは安定しており、TCP プロトコルを使用するため、&lt;code&gt;Zerotier&lt;/code&gt; の中継サーバーも同様の効果を実現できます。ファイアウォールで UDP 9993 を開通する必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -s https://install.zerotier.com/ | sudo bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールが成功したか確認する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ローカルネットワークへの参加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli join network-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;moon&lt;/code&gt; の作成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /var/lib/zerotier-one &amp;amp;&amp;amp; sudo zerotier-idtool initmoon identity.public &amp;gt; moon.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;stableEndpoints&lt;/code&gt; ノードを調整するために構成ファイルを開き、&amp;ldquo;サーバーのパブリック IP アドレス/9993&amp;rdquo; を設定します。署名構成を生成し、&lt;code&gt;moons.d&lt;/code&gt; フォルダを作成し、既存のファイルをこのフォルダに移動してサービスを再起動します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo zerotier-idtool genmoon moon.json
mkdir moons.d &amp;amp;&amp;amp; mv 000000eb444ec0d8.moon moons.d/
systemctl restart zerotier-one.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クライアントノードが &lt;code&gt;moon&lt;/code&gt; サーバーに参加し、ID は前の JSON 設定ファイル内の ID フィールドから取得します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli.bat orbit ztaddr ztaddr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;確認:&lt;/strong&gt; 新しい moon ノードが作成され、ID と情報はサーバー構成と同じであることを確認してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 新規 moon 节点の出現を確認し、ID と情報がサーバー設定と一致することを確認します
[root@idv-36f9d5 ~]# zerotier-cli listpeers
200 listpeers &amp;lt;ztaddr&amp;gt; &amp;lt;path&amp;gt; &amp;lt;latency&amp;gt; &amp;lt;version&amp;gt; &amp;lt;role&amp;gt;
200 listpeers 0cccb***** 35.236.*.*/64393;110;10726 327 1.6.3 LEAF
200 listpeers 3a46f***** 185.180.*.*/9993;110;757 -1 - PLANET
200 listpeers 3ed7c***** 39.97.*.*/9993;172;79 32 1.6.3 MOON
200 listpeers 4f838***** - -1 - LEAF
200 listpeers 62f86***** 50.7.*.*/9993;110;4796 351 - PLANET
200 listpeers 778cd***** 103.195.*.*/9993;5148;4887 253 - PLANET
200 listpeers 992fc***** 195.181.*.*/9993;10161;4921 226 - PLANET
200 listpeers 9d2b5***** - -1 - LEAF
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Windows プラットフォームでは、管理者権限でターミナルを起動し、&lt;code&gt;zerotier-cli.bat&lt;/code&gt; コマンドラインを使用して操作します。Linux プラットフォームでは、&lt;code&gt;zerotier-cli&lt;/code&gt; コマンドラインを使用して操作します。 &lt;code&gt;listpeers&lt;/code&gt; サブコマンドは正常に moon 节点を表示するため、参加が成功したことを示しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;卸载方法&#34;&gt;卸载方法
&lt;/h2&gt;&lt;p&gt;Windowsプラットフォームの卸載方法は後述します。通常の操作手順に従い、コントロールパネルからアンインストールしてください。ここではUbuntuについて詳しく説明します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dpkgコマンドでzerotier-oneサービスを削除する&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dpkg -P zerotier-one
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;zerotier-oneフォルダを削除する。このフォルダにはaddressアドレスが保存されており、削除後に再インストールを行うと新しいaddressアドレスを取得します。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo rm -rf /var/lib/zerotier-one/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;跋談&#34;&gt;跋談
&lt;/h2&gt;&lt;p&gt;元々は既にアンインストールされていたものが、サーバーが到着し、適切なプロキシノードが存在しないため、阿里云が営業活動を行い、開発用特供サーバーを提供しました。構成は高くなく、1999年、価格も手頃で、2年間運用しました。主な理由はサーバーから提供される帯域幅でした。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.wnark.com/archives/152.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.wnark.com/archives/152.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Yogile/p/12642423.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/Yogile/p/12642423.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>VMware 仮想マシンのディスクスペース最適化</title>
        <link>https://ttf248.life/ja/p/vmware-virtual-machine-disk-space-optimization/</link>
        <pubDate>Wed, 21 Jun 2023 18:35:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/vmware-virtual-machine-disk-space-optimization/</guid>
        <description>&lt;p&gt;VMWareの仮想マシンをインストールして開発を行う際、通常はディスク容量を多めに確保します。使用していくうちに、ホスト側の使用ディスク容量が仮想マシンの実際のファイルサイズを大幅に上回ることがあります。&lt;/p&gt;
&lt;h2 id=&#34;シナリオの説明&#34;&gt;シナリオの説明
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;df -h&lt;/code&gt;コマンドを実行し、現在のマシンのディスク情報を確認したところ、実際に使用されているのは60GBであり、すべてのシャットアウトとクローンイメージを削除しても、ローカル仮想マシンが占有するディスクスペースは依然として60GBよりも大幅に大きい。これにより、すでに限られたハードドライブの状態が悪化している。&lt;/p&gt;
&lt;h2 id=&#34;前提条件&#34;&gt;前提条件
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;仮想マシンのインストール時に、ディスクの事前割り当てをチェックしなかった&lt;/li&gt;
&lt;li&gt;ローカルに保存された仮想マシンのハードドライブが、現在使用されている容量より十分な空き容量を持っていること
空き容量が不足している場合は、一時的に仮想マシンをポータブルHDDに移動してディスクを最適化した後、再度移行することを検討してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ツール&#34;&gt;ツール
&lt;/h2&gt;&lt;p&gt;公式から &lt;code&gt;open-vm-tools&lt;/code&gt; パッケージが提供されており、yum でインストールするか、vmware-tools イメージパッケージでインストールできます。&lt;/p&gt;
&lt;h2 id=&#34;命令&#34;&gt;命令
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vmware-toolbox-cmd disk shrink /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを実行すると、仮想マシンは自動的にシャットダウンされ、VMware ホストプログラムがディスクの縮小を実行します。 実行時間は仮想マシンのサイズとディスクへのアクセス速度によって異なります。
実行効果は非常に良く、仮想マシンのディスク使用量が &lt;code&gt;df -h&lt;/code&gt; のディスク情報とほぼ一致します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Stable-diffusion - そのインストールから始まる喜びと苦悩 (安定拡散 - そのインストールから始まる喜びと苦悩)</title>
        <link>https://ttf248.life/ja/p/stable-diffusion-zero-install-story/</link>
        <pubDate>Thu, 13 Apr 2023 00:23:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/stable-diffusion-zero-install-story/</guid>
        <description>&lt;p&gt;国内の資料は、基本的には&lt;strong&gt;秋葉&lt;/strong&gt;さんのワンクリックデプロイパッケージを推奨されています。すべてPythonベースのオープンソースプロジェクトなので、デプロイもそれほど複雑ではないだろうと考え、ゼロから試してみることにしました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI生成画像に苦労したので、意図的にグラフィックカードを変更しました。入門版の&lt;code&gt;3060 12g&lt;/code&gt;です。7年勤めた&lt;code&gt;960&lt;/code&gt;が栄光のうちに退役しました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;コアの &lt;code&gt;pytorch cuda&lt;/code&gt; のインストールですが、以前 &lt;code&gt;python&lt;/code&gt; ゲーム補助スクリプトを書いた際にローカルにインストールしたことがありましたが、やはり問題が発生しました。&lt;code&gt;cuda&lt;/code&gt; の暗号化が常に有効にならないという問題です。&lt;/p&gt;
&lt;h2 id=&#34;待処理&#34;&gt;待処理
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;文章構造を再計画し、まず PyTorch を紹介する。バージョン対応関係とバージョン確認方法&lt;/li&gt;
&lt;li&gt;ローカル環境から PyTorch をゼロから新規に作成・デプロイする方法&lt;/li&gt;
&lt;li&gt;Stable Diffusion の翻訳稿を作成する（https://stable-diffusion-art.com/install-windows/ から開始）&lt;/li&gt;
&lt;li&gt;参照資料の整理&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ステップ&#34;&gt;ステップ
&lt;/h2&gt;&lt;p&gt;中国語で検索すると、手順を追ったインストール方法が見つかりにくい可能性があります。&lt;code&gt;Google&lt;/code&gt; で英語で検索すると、同様のチュートリアルがたくさんあります。ゼロから始めるものばかりです。いくつか説明した後、&lt;code&gt;git&lt;/code&gt; のインストールが必要であること、そして &lt;code&gt;python&lt;/code&gt; のインストールについても言及します。その後は、リポジトリをダウンロードし、直接スクリプトをダブルクリックして完了となります。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;
詳細な使用方法や疑問点については、&lt;code&gt;issues&lt;/code&gt; を参照してください。&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&lt;/a&gt;
なぜ誰もこのリポジトリが何をするものなのか説明していないのかわかりません。名前からして、それはインターフェース制御台であり、より簡単に使用できるように設計されていることがわかります。インストール時には、現在のフォルダに &lt;code&gt;Python&lt;/code&gt; 仮想環境があるかどうかを自動的に認識し、存在する場合は現在のパスの &lt;code&gt;python&lt;/code&gt; を使用します。
初心者の方には、&lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt; を参照することをお勧めします。&lt;/p&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;PyTorch
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今日は私が話したいのは、まず彼らの手順をそのまま実行しないでください。Pythonはrequirementファイルを使って依存ライブラリをインストールします。これは小さな問題です。重要なのはあなたのGPUのバージョンとドライバーのバージョンがPyTorchに対応していることです。これは多くの人が対応関係を紹介しているので、ネットで調べてみればわかります。
参考：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_40660408/article/details/129896700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_40660408/article/details/129896700&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仮想環境を作成するのは、空の仮想環境を作り、その中でまず公式サイトのスクリプトを実行してPyTorchをインストールすることです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.version.cuda)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.__version__, torch.cuda.is_available())&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の2つのスクリプトで、必要なCUDAバージョンを確認したり、インストールが成功したかどうかを確認したりできます。&lt;/p&gt;
&lt;p&gt;ここでは、派手な操作をするのではなく、まず公式サイトのロジックをそのままコピーしてインストールすることをお勧めします。直接pipを使ってインストールすると、PyTorchが失敗する可能性や、CUDAがアクティブにならない可能性があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ポイントは、フォルダのパスに不要なものが含まれていないことです。そうでないと、PyTorchを使用できなくなる可能性があります。&lt;/p&gt;
&lt;p&gt;何度もインストールを試みたり、公式のインストールファイルをダウンロードして手動でインストールしたりしました。2.0バージョンをアップグレードしたいと考えていましたが、公式ドキュメントでは2.0がより高速であると記載されています。しかし、以前はあまり使用していなかったので、Pythonのバージョンやそれが影響するかどうか分からずでした。また、公式マニュアルには3.8バージョンの推奨があることが書かれていました。これにより小さな競合が発生しました。以前、ワンクリックインストールパッケージを使用しており、その中に3.10バージョンが含まれていました。最終的には、空のフォルダを作成し、仮想環境を作成して、PyTorchが正しくインストールされていることを確認してから、インストールを開始しました。&lt;/p&gt;
&lt;p&gt;その後、インストールされた仮想環境をWeb UIのフォルダに移動しました。この状態でスクリプトを実行して、他の依存関係の問題は解決されました。&lt;/p&gt;
&lt;p&gt;移動後、次のコマンドを実行する必要があります：&lt;code&gt;python -m pip install --upgrade --force-reinstall pip&lt;/code&gt;  pipを修復します。&lt;/p&gt;
&lt;p&gt;おそらく、これは非常に奇妙に見えるかもしれませんが、この場所でかなり時間を費やしました。なぜなら、常にPyTorchを正しく認識できなかったからです。すべての干渉要因を除外するために、まずそれをインストールし、次に他の依存ライブラリをインストールすることを思いつきました。&lt;/p&gt;
&lt;h2 id=&#34;xformers&#34;&gt;Xformers
&lt;/h2&gt;&lt;p&gt;有効化することを推奨します。画像生成を高速化し、既存の占有量を削減できますが、副作用として、同じパラメータセットで&lt;strong&gt;生成される画像は比較的安定しません&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stable-diffusion-webui:Xformers&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/diffusers/optimization/xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huggingface optimization&lt;/a&gt;
| 100.00% | 2分57秒33 | 7440MiB / 10058MiB | 12288MiB / 12288MiB (100.0%) |&lt;/p&gt;
&lt;h2 id=&#34;xformers-1&#34;&gt;Xformers
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;最適化比率&lt;/th&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;Torch 活性/予約メモリ&lt;/th&gt;
&lt;th&gt;システムVRAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;51.02%&lt;/td&gt;
&lt;td&gt;1分29秒21&lt;/td&gt;
&lt;td&gt;4547/7164 MiB&lt;/td&gt;
&lt;td&gt;9298/12288 MiB (75.67%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;xformers-2&#34;&gt;Xformers
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;((masterpiece)),((best quality)),((high detail)),((realistic,))
産業時代の都市、中央に深い峡谷、中国式の街並み、バザール、橋、（雨の日:1.2）、（スチームパンク:0.8）、中国建築
ネガティブプロンプト：nsfw,((カウボーイ)),(((陰毛))), ((((陰毛の髪の毛))))スケッチ、重複、醜い、大きな目、テキスト、ロゴ、モノクロ、最悪の顔、（悪いおよび変異した手:1.3）、(最悪の品質:2.0)、(低品質:2.0)、(ぼやけ:2.0)、ホラー、ジオメトリ、bad_prompt、（悪い手）、(指が足りない)、複数の四肢、悪い解剖学、（交差した指:1.2）、醜い指、（追加の指と手と足と腕:1.4）、冠髪飾り、（2girl）、(変形した指:1.2)、(長い指:1.2)、サキュバスの翼、角、サキュバスの角、サキュバスのヘアスタイル、（悪いアーティストアニメ）、悪いアーティスト、悪い手、借りたキャラクター、テキスト重視、ウォーターマーク、サンプルウォーターマーク、キャラクターウォーターマーク、Lofterユーザー名、写真の日付ウォーターマーク、映画ポスター、雑誌表紙、ジャーナル、表紙、表紙ページ、道行表、アルバム表紙、漫画表紙、ブランド名の模倣、EasyNegative、タイツ、シルクストッキング、ショート
ステップ数：35、サンプラー：DPM adaptive、CFGスケール：5.5、シード：2223996555、サイズ：1088x1088、モデルハッシュ：543bcbc212、モデル：base_Anything-V3.0-pruned、Clipスキップ：2、ENSD：31337
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;なぜデプロイメントパッケージを推奨しなかったのかというと、そのパッケージには作者が個人的にカスタマイズした設定が含まれており、公式のオリジナルのものとは異なっているためです。もしあなたが初心者であれば、なぜそれらのパラメータが最適なのか分からないかもしれません。しかし、使用していくうちに公式のマニュアルを参照することで、どのパラメータを調整する必要があるかを知ることができます。&lt;/p&gt;
&lt;h2 id=&#34;グラフィックボードの選択&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;p&gt;データマネーマイニングの後、グラフィックボードの価格は比較的高くありません。一般的なエントリーレベルのプレイヤーが、&lt;code&gt;3060&lt;/code&gt;と&lt;code&gt;3060Ti&lt;/code&gt;の間で選択する場合、一般的には大容量&lt;code&gt;12G&lt;/code&gt;版の3060が推奨されます。なぜなら、より高い解像度の画像を生成できるからです。なぜ高い解像度が必要なのでしょうか？それは、生成時に解像度を上げることによって、生成される画像がより鮮明で詳細になるためです。もしあなたが小さな画像を生成したいのであれば、&lt;code&gt;8G&lt;/code&gt;のVRAMでも十分です。&lt;/p&gt;
&lt;p&gt;さらに、&lt;strong&gt;高解像度アップスケーリング&lt;/strong&gt;オプションがあり、ディテールを強調し、画面の詳細さを豊かにすることも、より多くのVRAMが必要です。&lt;/p&gt;
&lt;p&gt;以下はNVIDIA GeForce GTX 970、GeForce RTX 3060 Ti、GeForce RTX 3060、GeForce RTX 3080およびGeForce RTX 3080 Tiの単精度（FP32）、半精度（FP16）および双精度（FP64）浮動小数点演算能力の仕様一覧表：&lt;/p&gt;
&lt;p&gt;| GeForce GTX 970 | 2014 | 3.49 | 87.2 | 0.109 |&lt;/p&gt;
&lt;h2 id=&#34;グラフィックボードの選択-1&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックボードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;半精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;双精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060 Ti&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;16.2&lt;/td&gt;
&lt;td&gt;32.4&lt;/td&gt;
&lt;td&gt;0.51&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;グラフィックボードの選択-2&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックボードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;半精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;双精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;12.7&lt;/td&gt;
&lt;td&gt;25.4&lt;/td&gt;
&lt;td&gt;0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;グラフィックボードの選択-3&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックボードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;半精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;双精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;29.8&lt;/td&gt;
&lt;td&gt;58.9&lt;/td&gt;
&lt;td&gt;0.93&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;グラフィックボードの選択-4&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックボードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;半精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;双精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080 Ti&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;34.8&lt;/td&gt;
&lt;td&gt;68.7&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;显卡的選択&#34;&gt;显卡的選択
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/spreadsheets/d/1Zlv4UFiciSgmJZncCujuXKHwc4BcxbjbSBg71-SdeNk/edit#gid=0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;各種グラフィックカード性能テストデータ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;更新&#34;&gt;更新
&lt;/h2&gt;&lt;p&gt;半年ごとに、改めてインストール手順を整理したり、基礎概念を解説したりする予定でしたが、一般的にAIイラストを生成する場合、結局はベテランユーザーが提供した画像パラメータを調整したり、既存の画像をフォーマットして再レンダリングしたりすることになるという事実に気づきました。&lt;/p&gt;
&lt;p&gt;以前、AIを使ってミニプログラムのUI素材を描画するというプロジェクトがありましたが、半日かけても期待通りの結果が得られず、結局公式のミニプログラムから画像素材を直接ダウンロードする方が良いという結論に至りました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>プログラムの最適化は、ハードウェアと戦おうとするべきではありません。</title>
        <link>https://ttf248.life/ja/p/program-optimization-dont-fight-hardware/</link>
        <pubDate>Fri, 07 Apr 2023 16:30:15 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-optimization-dont-fight-hardware/</guid>
        <description>&lt;p&gt;&lt;code&gt;one loop thread&lt;/code&gt;（単一ループスレッド）の実行時間がすでに&lt;strong&gt;マイクロ秒&lt;/strong&gt;レベルで、サーバーを交換した結果、最大6万パケットまでバックログが積み重なるのをほぼゼロにすることができた。&lt;/p&gt;
&lt;p&gt;シングルスレッドでのループ処理でデータを扱う場合、CPUの性能はクロック周波数、キャッシュサイズ、命令セットアーキテクチャなどの要因によって決まる。一般的に、クロック周波数が高く、キャッシュサイズが大きい、そして命令セットアーキテクチャが高度なCPUほど、シングルスレッドでデータを処理する際の性能が良い。&lt;/p&gt;
&lt;h2 id=&#34;シングルスレッド&#34;&gt;シングルスレッド
&lt;/h2&gt;&lt;p&gt;パフォーマンス向上のために、スレッドを追加することは必ずしも必要ではありません。プロジェクトのプロセスを整理し、時間がかかる箇所を特定し、シングルスレッドで要件を満たせるか検討します。シングルスレッドでは考慮すべき点が少なく、問題が発生する可能性も低くなります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最初からスレッドについて言及するのは、多少不適切です&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;イベント&#34;&gt;イベント
&lt;/h2&gt;&lt;p&gt;処理しているデータは&lt;strong&gt;市場データであり、遅延に敏感&lt;/strong&gt;です。
一晩中ひたすら加班し、新しい最適化版をリリースし、ローカルでインターフェースを剥離してテストを行い、速度はそれなりに良かった（tps：4.2万）。
サーバーにデプロイしたところ、tpsが急降下し、2.1万になった。台式机に戻って試すと、tpsは7.9万だった。グループ内のサービス仮想マシンの問題があるのではないかと疑い始め、まずCPUのクロック周波数（主頻度）の違いを疑った。家庭用PCとサーバーの&lt;code&gt;CPU&lt;/code&gt;では、クロック周波数が最も異なる点だった。&lt;/p&gt;
&lt;p&gt;テストサーバーA&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 47
model name	: Intel(R) Xeon(R) CPU E7- 4807  @ 1.87GHz
stepping	: 2
microcode	: 0x34
cpu MHz		: 1866.733
cache size	: 18432 KB
physical id	: 1
siblings	: 4
core id		: 3
cpu cores	: 4
apicid		: 7
initial apicid	: 7
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 popcnt aes hypervisor lahf_lm pti dtherm arat
bugs		: clflush_monitor cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 3733.46
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;テストサーバーB&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 63
model name	: Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz
stepping	: 2
microcode	: 0x3c
cpu MHz		: 2599.998
cache size	: 20480 KB
physical id	: 14
siblings	: 1
core id		: 0
cpu cores	: 1
apicid		: 14
initial apicid	: 14
fpu		: yes
fpu_exception	: yes
cpuid level	: 15
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cpuid_fault epb pti fsgsbase smep xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 5199.99
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;openaiへの相談&#34;&gt;OpenAIへの相談
&lt;/h2&gt;&lt;p&gt;まず、コア数とクロック周波数に関しては、Intel(R) Xeon(R) CPU E7-4807 @ 1.87GHzは6つの物理コアと12個の論理コアを持ち、クロック周波数は1.87GHzです。一方、Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHzは8つの物理コアと16個の論理コアを持ち、クロック周波数は2.60GHzです。したがって、コア数とクロック周波数という点では、E5-2640 v3がE7-4807よりもシングルスレッドでのデータ処理において有利であると考えられます。
次に、キャッシュサイズに関しては、E7-4807のキャッシュサイズは12MBであり、E5-2640 v3のキャッシュサイズは20MBです。したがって、E5-2640 v3はより大きなキャッシュスペースを持ち、データのアクセス速度とキャッシュヒット率を向上させることができます。
最後に、アーキテクチャに関しては、E5-2640 v3はより高度なHaswellアーキテクチャを採用しており、E7-4807は旧いNehalemアーキテクチャを採用しています。HaswellアーキテクチャはNehalemアーキテクチャと比較して性能が向上しているため、これもE5-2640 v3のシングルスレッドでのデータ処理時の性能向上に影響を与える可能性があります。
したがって、総合的に考えると、シングルスレッドでループ処理を行うシナリオでは、E5-2640 v3はE7-4807よりも優れたパフォーマンスを発揮すると考えられます。ただし、具体的なパフォーマンスの違いは、データ処理のアルゴリズム、メモリ帯域幅、システム負荷など、さまざまな要因によって影響を受けるため、個別の問題に対して具体的に分析する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア情報&#34;&gt;ハードウェア情報
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7%e2%80%934807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7–4807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&lt;/a&gt;
| 価格 | オンライン検索 $78 - 購入 |  |&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア仕様&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-1&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-2&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-3&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-4&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-5&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-6&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-7&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-8&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア情報-1&#34;&gt;ハードウェア情報
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;初登場&lt;/td&gt;
&lt;td&gt;Q3 2020&lt;/td&gt;
&lt;td&gt;Q3 2014&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-9&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;サンプル数&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-10&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-11&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-12&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>プロンプトエンジニア</title>
        <link>https://ttf248.life/ja/p/prompt-engineer/</link>
        <pubDate>Sun, 26 Mar 2023 20:46:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/prompt-engineer/</guid>
        <description>&lt;p&gt;例として、かつて検索エンジンのテクニックを学んだように、私たちはまた、&lt;code&gt;AI&lt;/code&gt;とコミュニケーションするためのテクニックも習得する必要がある。合理的な制約条件を与え、効率的に必要な答えを得る方法を学ぶのだ。&lt;/p&gt;
&lt;p&gt;もし角度を変えて考えると、現在の&lt;code&gt;AI&lt;/code&gt;は記憶力に優れた小さな子供であり、完璧に暗記し、宿題をコピーできる能力を持っている。私たちがやるべきことは、&lt;code&gt;AI&lt;/code&gt;と正確かつ効果的にコミュニケーションする方法を学び、要求を正確に記述することで、&lt;code&gt;AI&lt;/code&gt;が期待される結果を生み出すのを助けることだ。&lt;/p&gt;
&lt;h2 id=&#34;科学普及&#34;&gt;科学普及
&lt;/h2&gt;&lt;p&gt;話題となっている&lt;code&gt;AI&lt;/code&gt;（人工知能）を具体的に言うと&lt;code&gt;Generative Pre-Training&lt;/code&gt;（生成事前学習）です。これはインターネット上で利用可能なデータを用いてテキスト生成を行う深層学習モデルであり、質問応答、テキスト要約生成、機械翻訳、分類、コード生成、対話型AIなど様々なタスクに用いられます。現在、GPT-1、GPT-2、GPT-3、GPT-4といった異なるバージョンのモデルが存在し、それぞれが前バージョンよりも規模が大きく、性能も向上しています。&lt;/p&gt;
&lt;h2 id=&#34;到底有没有智能&#34;&gt;到底有没有智能
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;類似度が高ければ高いほど、精度も高くなる&lt;/li&gt;
&lt;li&gt;基本的な、反復性の仕事は、特定の訓練を受けることで、人工の介入が不要になる
生成式AIとは、既存のテキスト、音声、画像などのデータを活用して新しいコンテンツを作成する技術である。テキスト生成、音声合成、画像生成、対話システムなど、様々なタスクに使用できる。生成式AIの論理性は、その学習データとモデル構造に依存する。一般的に、生成式AIは一定程度、文法、論理、常識に従うことができるが、誤りや偏見、または不真実を含むコンテンツを生成することもある。そのため、生成式AIの出力は人間の判断と検証が必要であり、盲目的に信頼したり使用したりすることはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;プロンプトエンジニア&#34;&gt;プロンプトエンジニア
&lt;/h2&gt;&lt;p&gt;時間は流れの法則を変えない。人は潮流に適応することを学ぶ必要がある。AIを無智能で論理性に欠けるものと捉えがちだが、よく書けば使えないコードを生成することも少なくない。&lt;/p&gt;
&lt;p&gt;もし別の角度から考えると、現在のAIは記憶力に優れた幼い子供であり、丸暗記する能力を持っている。つまり、問題をコピーする能力があるのだ。私たちがやるべきことは、AIに対して適切で効果的かつ正確なコミュニケーションを学び、要求を明確に記述し、AIが期待される結果を生み出すのを支援することだ。&lt;/p&gt;
&lt;h2 id=&#34;対話モデル&#34;&gt;対話モデル
&lt;/h2&gt;&lt;p&gt;2年前、GitHub Copilotの発表は誰も予想していませんでした。その結果、OpenAIが横空に出現し、人類は大規模言語モデルの能力を認識するに至りました。&lt;/p&gt;
&lt;p&gt;コメントベースのプログラミングと対話ベースのプログラミングに基づき、インタラクティブなロジックは完全に異なり、対話のパターンは初心者ユーザーにとって親しみやすく、NewBingが各質問の後に提示するフォローアップのヒントは必須です。Microsoftは、AI知識ベースにあるより多くのコンテンツを取得するために、ユーザーを誘導しようとしています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データの前処理&lt;/li&gt;
&lt;li&gt;深層学習&lt;/li&gt;
&lt;li&gt;ニューラルネットワーク&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;栗子&#34;&gt;栗子
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 必要なライブラリをインポート
import argparse
import logging
import multiprocessing
import os

from PIL import Image


# 画像をグレースケールに変換し、透明背景を維持して画像を保存し、ファイルサイズを返す関数を定義します。
def convert_and_save(image_file):
    # 画像を開く
    try:
        image = Image.open(image_file)
    except Exception as e:
        logging.error(f&amp;quot;画像 {image_file} のオープンに失敗しました：{e}&amp;quot;)
        return None, None
    # 画像のモードを取得します。RGBA モードの場合、透明背景があります。
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 画像と同じサイズの白い背景画像を生成します。
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 元の画像に背景を貼り付け、透明ピクセルを無視します。
        background.paste(image, mask=image.split()[3])
        # 合成された画像をグレースケールモードに変換します。
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # グレースケール画像をRGBAモードに戻して透明背景を維持します。
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # RGBA モードでない場合は、画像が直接グレースケールモードに変換されます。
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 元の画像のファイル名と拡張子を取得します。
    file_name, file_ext = os.path.splitext(image_file)
    # 新しい画像のファイル名を定義し、_bw サフィックスを追加して黒白であることを示します。
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 新しい画像を保存し、品質を最適化してファイルサイズを削減します。
    try:
        final_image.save(new_file_name, optimize=True)
    except Exception as e:
        logging.error(f&amp;quot;{new_file_name} の保存に失敗しました：{e}&amp;quot;)
        return None, None
    # 元の画像と新しい画像のファイルサイズを取得し、返します。
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return file_name, old_size, new_size

# コマンドライン引数を解析し、フォルダパスと拡張名リストを返す関数を定義します。
def parse_args():
    # 解析器オブジェクトを作成します。
    parser = argparse.ArgumentParser(description=&amp;quot;画像を黒白に変換し、品質を最適化します。&amp;quot;)
    # 位置パラメータを追加してフォルダパスを指定します。
    parser.add_argument(&amp;quot;folder_path&amp;quot;, help=&amp;quot;画像が含まれるフォルダーのパスです。&amp;quot;)
    # オプションパラメータを追加して拡張名リストを指定します。デフォルトは png, jpg, jpeg, gif です。
    parser.add_argument(&amp;quot;-e&amp;quot;, &amp;quot;--extensions&amp;quot;, nargs=&amp;quot;+&amp;quot;, default=[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;], help=&amp;quot;画像ファイルの拡張子です。&amp;quot;)
    # コマンドライン引数を解析し、結果オブジェクトを返します。
    args = parser.parse_args()
    return args.folder_path, args.extensions

# 変換前後のファイルサイズの違いを出力する関数を定義します。
def print_result(result):
    # 結果が空でない場合、変換と保存が成功したことを示します。
    if result:
        # 結果をファイル名とファイルサイズのタプルに分解します。
        if len(result) == 3:
            file, old_size, new_size = result
            # コントロールパネルで変換前後のファイルサイズの違いを出力します。
            logging.info(f&amp;quot;{file}: {old_size} バイト -&amp;gt; {new_size} バイト&amp;quot;)
        else:
            # 結果を出力します。
            logging.info(f&amp;quot;{result}&amp;quot;)

# 日志記録器を設定し、ログをコンソールとファイルに出力し、ログレベルを INFO に設定します。
logging.basicConfig(level=logging.INFO,
                    format=&amp;quot;%(asctime)s %(levelname)s %(message)s&amp;quot;,
                    handlers=[logging.StreamHandler(),
                              logging.FileHandler(&amp;quot;log.txt&amp;quot;)])

# # 別のプロセスに、パイプを介して渡されたコードを実行するように通知されます。これは、`--multiprocessing-fork` コマンドライン引数を渡すことで行われます。
# `freeze_support()` 関数の実装を見ると、それが実行されているプロセスの確認と、パイプを介して渡されたコードの実行が必要かどうかを確認するタスクを実行します。
# `multiprocessing.freeze_support()`

# コア数に基づいてコンピューターに自動的にプロセスを割り当てるプロセスプールを作成します。
# プロセスプール = multiprocessing.Pool()
# 异步タスクの結果オブジェクトを格納するための空のリストを作成します。
# results = []
# フォルダー内のすべてのファイルに対して反復処理を行います。
# for file in os.listdir(folder_path):
#     # ファイルパスを結合します。
#     file_path = os.path.join(folder_path, file)
#     # 拡張子リストに基づいて画像ファイルを判断します。必要に応じて拡張子リストを変更できます。
#     if any(file_path.endswith(ext) for ext in extensions):
#         # 関数を呼び出して、画像を変換して保存し、ファイルサイズを取得します。パイプを介したコードの実行は、メインプロセスをブロックすることなく、非同期で行われます。
#         result = pool.apply_async(convert_and_save, args=(file_path,), callback=print_result)
#         # 結果オブジェクトをリストに追加します。
#         results.append((file, result))
# プロセスプールを閉じ、新しいタスクの受け入れをやめます。
# pool.close()
# すべてのタスクが完了するまで待ちます。
# pool.join()

## 終わりに

ローカル開発が `windows` システムであるため、AI が最初に提示した回答には `main` 関数も `multiprocessing.freeze_support` も含まれておらず、エラーが発生しました。質問を重ねることでエラーの原因を特定し、コードを修正しました。

かつて検索エンジンの技術を学ぶように、AI とコミュニケーションする上でも、適切な制約条件を与え、効率的に必要な回答を得るためのスキルを習得する必要があります。

注意：**もしあなたがプログラミング初心者であれば、提示されたコメントと合わせて理解できない点がある場合は、引き続き関連コードについて質問してください。**&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>微信ミニプログラムの背景と開発環境</title>
        <link>https://ttf248.life/ja/p/wechat-mini-program-background-and-development-environment/</link>
        <pubDate>Fri, 24 Mar 2023 21:59:11 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wechat-mini-program-background-and-development-environment/</guid>
        <description>&lt;p&gt;WeChat Mini Program Introduction and Development Preparation&lt;/p&gt;
&lt;h2 id=&#34;なぜミニプログラムが存在するのか&#34;&gt;なぜミニプログラムが存在するのか
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;より良い体験：埋め込みウェブの読み込みが遅延し、白画面になる問題を解決。ネイティブアプリの方がより高速にロードできる。&lt;/li&gt;
&lt;li&gt;規範と管理：微信にとって、アクセスと管理を行うため。
小程序のリリース前に、微信は&lt;code&gt;SDK&lt;/code&gt;である&lt;code&gt;JSSDK&lt;/code&gt;を公開しており、微信支付や券などの微信のネイティブ機能を一部開放していた。しかし、開発者はウェブ開発言語でロジックを構築し、微信の規制を回避することができた。小程序には独自の記述言語が搭載されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;小プログラムとは&#34;&gt;小プログラムとは
&lt;/h2&gt;&lt;p&gt;小プログラムは、ダウンロードやインストールが不要で利用できるアプリケーションです。アプリを手の届くところに持つという夢を実現します。&lt;/p&gt;
&lt;p&gt;ユーザーはスキャンするか検索することでアプリを開き、使い終わったらすぐに終了するというコンセプト（「使ったら片付ける」の理念）も体現しています。&lt;/p&gt;
&lt;p&gt;ユーザーは、多くのアプリをインストールすることなく、いつでもどこでも利用できるというメリットがあります。また、インストールやアンインストールなどの手間がかかりません。&lt;/p&gt;
&lt;h2 id=&#34;ミニアプリとモバイルアプリケーションの違い&#34;&gt;ミニアプリとモバイルアプリケーションの違い
&lt;/h2&gt;&lt;p&gt;インストール不要、メモリを消費しない、拡散が容易：スキャンコード、ミニアプリカード、そーいちょうすう&lt;/p&gt;
&lt;h2 id=&#34;小程序が何ができるか&#34;&gt;小程序が何ができるか
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;コンテンツツール：知乎熱榜、微博热门、摩拜单车、今日头条、腾讯地图、腾讯翻訳&lt;/li&gt;
&lt;li&gt;小売：拼多多、京东购物、蘑菇街、每日优鲜、小米商城、屈臣氏&lt;/li&gt;
&lt;li&gt;ゲーム：跳一跳、欢乐斗地主、欢乐麻将、斗鱼直播、YY直播&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;2018年のコース内容。現在までに一部のアプリベンダーが倒産しているものもあります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;開発準備&#34;&gt;開発準備
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;小プログラムアカウントの登録：通常通り情報を入力して登録し、メールに記載された有効化リンクをクリックします。&lt;/li&gt;
&lt;li&gt;情報登録&lt;/li&gt;
&lt;li&gt;小プログラム管理後台へのログイン&lt;/li&gt;
&lt;li&gt;小プログラム情報の充実&lt;/li&gt;
&lt;li&gt;開発者との連携：個人開発者は、ログインに使用するWeChatのIDを管理者アカウントとして使用し、追加の設定は不要です。
メールには制限があり、新しいメールアドレスが必要です。しかし、QQメールで別名を登録でき、WeChat後台での検証はありません。試行錯誤の結果、小プログラムの名前は複雑になりやすく、商標に関わる場合は審査に通りにくい可能性があります。
サービスカテゴリーを選択することも、必要に応じて追加することもできます。1つの小プログラムには最大5つのカテゴリーを追加できます。
設定画面では、小プログラムの&lt;code&gt;ID&lt;/code&gt;を確認でき、メッセージプッシュも有効化できます。メッセージプッシュを有効化すると、メッセージテンプレート機能を使用できます。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;開発者ツール筆者談&#34;&gt;開発者ツール（筆者談）
&lt;/h2&gt;&lt;p&gt;正常にダウンロードおよびインストールでき、特別な注意点はなく、概要を把握するだけで、すぐにゲストモードでアクセスします。モバイルデバッグを有効にするには、つまり小程序的開発バージョンを確認するには、小程序的開発者にログインし、設定をクリックしてプロジェクトの詳細から指定された小程序的&lt;code&gt;ID&lt;/code&gt;に切り替える必要があります。&lt;/p&gt;
&lt;h2 id=&#34;コード構造&#34;&gt;コード構造
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;js: 相互作用ロジック&lt;/li&gt;
&lt;li&gt;json: データ設定&lt;/li&gt;
&lt;li&gt;wxml: 界面の要素&lt;/li&gt;
&lt;li&gt;wxss: 界面のスタイル&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>オフィスへの引っ越しにより、サーバーにアクセスできなくなりました。</title>
        <link>https://ttf248.life/ja/p/office-move-server-inaccessible/</link>
        <pubDate>Sat, 11 Mar 2023 01:42:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/office-move-server-inaccessible/</guid>
        <description>&lt;p&gt;行政通知、オフィス配置の変更（元の2階から15階への移動）、通常の事務室の移転&lt;/p&gt;
&lt;h2 id=&#34;デザインセンス&#34;&gt;デザインセンス
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/office-move-server-inaccessible/20230311014537.png&#34;
	width=&#34;511&#34;
	height=&#34;916&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;オフィスビル&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;55&#34;
		data-flex-basis=&#34;133px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;移住&#34;&gt;移住
&lt;/h2&gt;&lt;p&gt;荷造り、スムーズな進路、新しい作業場所でのPCの配線整理、心地よい姿勢で仕事を開始
(ÒωÓױ)！、ネットワークケーブルを接続し、チームメンバーがよく使うサーバーにアクセスできなくなりました。無線LANに切り替えてみましたが、正常に戻りました。
当初はサーバーのIPアドレス設定の問題だと思っていました。新しい作業場所の有線LANは、ファイアウォール設定のリストに含まれていませんでした。IT担当者に連絡して調整したら解決しました。このIPアドレス範囲は、他のサーバーにも使用されており、他のサーバーにアクセスしても正常でした。徐々に疑問が生じ始めました。専門的なことは専門家に任せるべきです。最終的に運用部門の同僚が特定し、このサーバーに&lt;code&gt;docker&lt;/code&gt;がデプロイされているため、サービスのデフォルトネットワーク&lt;code&gt;docker0&lt;/code&gt;とオフィスLANの設定IPアドレス範囲が競合してしまい、送信したデータパケットを受信できなくなり、ルーティングされて&lt;code&gt;docker&lt;/code&gt;サービスに渡りました。
他のサーバーには&lt;code&gt;docker&lt;/code&gt;サービスがデプロイされていないため、このサーバーだけでした。私がよく使うので、時々コンテナを使用してテストサービスをデプロイすることがありましたが、このような状況に遭遇したとは思いませんでした。後から考えると、グループ全体が同じオフィスビル内に存在しているため、IT部門の同僚がIPアドレス範囲を割り当てたことは珍しくありません。&lt;/p&gt;
&lt;h2 id=&#34;docker0&#34;&gt;docker0
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# vim /etc/docker/daemon.json
{
    &amp;quot;bip&amp;quot;:&amp;quot;172.200.0.1/24&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サービスを再起動し、新しいネットワークに切り替えると、サーバーが正常にアクセスできるようになりました。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://yeasy.gitbook.io/docker_practice/advanced_network/docker0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker入門から実践 - docker0&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>組み込みシステム入門編１ - プロフェッショナルな用語集</title>
        <link>https://ttf248.life/ja/p/embedded-entry-professional-terms/</link>
        <pubDate>Tue, 07 Mar 2023 13:42:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/embedded-entry-professional-terms/</guid>
        <description>&lt;p&gt;組み込みシステムについて言及すると、脳裏に浮かぶのは、かつて学校の実験室で使っていた51ジャンク機とファルコムのイメージです。&lt;/p&gt;
&lt;p&gt;LPA3399Proは、瑞芯微RK3399Proプラットフォームをベースに開発されたビジュアルホストであり、大量の視覚演算が必要な携帯型コンピューティングホスト向けに設計されています。NPU（ニューラルプロセッシングユニット）内蔵で、3.0TOPSの演算能力を持ち、多様なアルゴリズムモデルに対応しています。&lt;/p&gt;
&lt;p&gt;RV1109は、瑞芯微におけるAI分野の機械視覚ブランチ向けのSoC（システムオンチップ）であり、独立したNPUを搭載しています。RV1109は、1TOPSの演算能力を提供します。&lt;/p&gt;
&lt;h2 id=&#34;system-on-chip&#34;&gt;System on Chip
&lt;/h2&gt;&lt;p&gt;SoC は System on a Chip の略で、「片上システム」を意味します。これは、複数の電子システムを 1 つのチップに統合する技術です。この技術により、電子製品のサイズと重量を大幅に削減すると同時に、性能を向上させ、消費電力を低減することができます。&lt;/p&gt;
&lt;p&gt;SoC（System on a Chip）および CPU（Central Processing Unit）は、コンピュータシステムの重要な構成要素ですが、その間にはいくつかの違いがあります。&lt;/p&gt;
&lt;p&gt;CPU は、コンピュータシステムの中核となるプロセッサであり、プログラムの命令を実行します。通常、演算ユニット、制御ユニット、レジスタなどの基本的な部品のみを含みます。&lt;/p&gt;
&lt;p&gt;一方、SoC は、CPU 以外にもメモリ、グラフィックス プロセッサ、入出力インターフェースなど、他のコンポーネントを 1 つのチップに統合します。これにより、電子製品のサイズと重量を大幅に削減し、性能を向上させ、消費電力を低減することができます。&lt;/p&gt;
&lt;p&gt;まとめると、CPU は SoC の構成要素であり、SoC はより複雑で、集積度の高い電子システムです。&lt;/p&gt;
&lt;h2 id=&#34;マイクロコントローラユニット-microcontroller-unit&#34;&gt;マイクロコントローラユニット (Microcontroller Unit)
&lt;/h2&gt;&lt;p&gt;SoC（System on a Chip）と MCU（Microcontroller Unit）は、複数の電子システムを1つのチップに統合する技術ですが、両者にはいくつかの違いがあります。&lt;/p&gt;
&lt;p&gt;MCU はマイクロコントローラの一種で、通常、CPU、メモリ、入出力インターフェースなどの基本的な部品が含まれています。これは、家電製品や自動車電子システムなど、他の電子機器を制御するために一般的に使用されます。&lt;/p&gt;
&lt;p&gt;一方、SoC（System on a Chip）は、MCU の基本的な部品に加えて、グラフィックスプロセッサや無線通信モジュールなど、さらに多くの電子システムを1つのチップに統合します。これにより、電子製品のサイズと重量を大幅に削減し、同時に性能を向上させ、消費電力を低減することができます。&lt;/p&gt;
&lt;p&gt;まとめると、MCU はシンプルなマイクロコントローラであり、SoC はより複雑で、統合度が高い電子システムです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AIによるプログラミング支援、生産性の進化</title>
        <link>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;GitHub Copilot のリリースからわずか 2 年しか経っていないのに、ChatGPT が登場し、裏にある原理をよく理解していない状態で、しばらく使ってみた。2 つのツールのサポートレベルは完全に異なり、どちらも生産性を大幅に向上させた。&lt;/p&gt;
&lt;p&gt;あまりにも複雑なことについては、AI ではまだできないだろう。なぜなら、彼らは論理がなく、パターンや形式固定されたもの、あるいは范式を定めているからだ。学習データは十分で、AI の効果は 9 分満点になる。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;GitHub Copilot
&lt;/h2&gt;&lt;p&gt;リリース時に、公式サイトの紹介の &lt;code&gt;demo&lt;/code&gt; を見ると、あまり賢くなく、試用してみましたが、使い勝手が良くありませんでしたので、諦めました。
2022年以前に、暇つぶしで切り替えて新バージョンを体験したところ、かなり良くなっており、ただ国内の速度が少し遅いのは、ネットワークの問題である可能性が高いです。&lt;code&gt;Python&lt;/code&gt;のような言語では、コメントに基づいて書かれたコードもそれなりによくできており、自分で資料を探して書いていたよりもはるかに速かったです。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Github Copilot&lt;/code&gt;は、プログラマー、つまり開発者の視点から製品を設計しており、プログラミングの知識が必要であり、コメントを通じてAIによるコーディング支援を誘導していくものでした。
&lt;code&gt;ChatGPT&lt;/code&gt;は次の段階に進み、&lt;strong&gt;専門家でなくてもすぐに使いこなせるように設計されています&lt;/strong&gt;。対話形式でのチャットインターフェースにより、質問や要件の説明、理解できない場合は引き続き質問することができます。&lt;/p&gt;
&lt;p&gt;例えば、品詞分割の概念を知っているものの、コーディング方法がわからない状態で、文字列の類似度を計算したい場合を考えてみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python 品詞分割 維天運通 LOGORY と 合肥維天運通情報科技股份有限公司 2 つの文字列の類似度を計算します。
比較前に、文字列を英語小文字に変換するなどして統一処理を行います。
2 番目の文字列の中に最初の文字列の最初の文字が見つかれば、2 番目の文字列を最初の文字列の長さと同じ長さで切り捨てます。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんにちは、これはBingです。😊
オンラインの情報123に基づき、Python の品詞分割には &lt;code&gt;jieba&lt;/code&gt; などのライブラリを使用できます。&lt;code&gt;jieba&lt;/code&gt; ライブラリは、精密モード、全模式、検索エンジンモードの 3 つの分詞モードをサポートしています。要件に応じて適切なモードを選択できます。
文字列の類似度を比較するには、まず文字列を品詞分割し、その後の単語ベクトルまたは編集距離などの指標を計算する必要があります。&lt;code&gt;numpy&lt;/code&gt; や &lt;code&gt;scipy&lt;/code&gt; などのライブラリを使用して数学演算を行うことができます。
文字列を統一的に処理するために、英語を小文字に変換するには、Python の組み込み関数 &lt;code&gt;lower()&lt;/code&gt; を使用できます。
2 番目の文字列を切り出すには、Python のスライス操作符 &lt;code&gt;[ ]&lt;/code&gt; を使用できます。&lt;/p&gt;
&lt;p&gt;以下は、その際のコード例です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jieba
import numpy as np
from scipy.spatial.distance import cosine

# 定義する 2 つの文字列
str1 = &amp;quot;維天運通 LOGORY&amp;quot;
str2 = &amp;quot;合肥維天運通情報科技股份有限公司&amp;quot;

# 統一処理：英語を小文字に変換
str1 = str1.lower()
str2 = str2.lower()

# 2 番目の文字列の中に最初の文字列の最初の文字が見つかる位置を探す
index = str2.find(str1[0])

# 見つかった場合、2 番目の文字列を切り出す
if index != -1:
    str2 = str2[index:index+len(str1)]

# jieba 库を使用して文字列を品詞分割する
words1 = list(jieba.cut(str1))
words2 = list(jieba.cut(str2))

# 2 つの文字列の単語ベクトル（頻度を重みとして使用）を計算する
vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))

for i, word in enumerate(words1):
    vector1[i] += 1 # 最初の文字列内の各単語の出現回数をカウント
    if word in words2:
        vector2[i] += 1 # 2 番目の文字列内の各単語の出現回数をカウント

# 2 つの文字列の類似度（余弦距離を指標として使用）を計算する
similarity = 1 - cosine(vector1, vector2)

print(&amp;quot;2 つの文字列の類似度は：&amp;quot;, similarity)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;さらに、結果を確認し、問題点を発見します。結果はランダムで、実際のコードを実行していませんが、良い結果を提供します。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;栗子&#34;&gt;栗子
&lt;/h3&gt;&lt;p&gt;質問：SQL文で、製品コードテーブルから、製品コードが80000～89999の範囲にあるレコードを抽出するには？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;こんにちは、Bingです。😊

検索結果12によると、指定された範囲内の値を選択するために、BETWEEN演算子を使用できます。BETWEEN演算子は、開始値と終了値を両方含みます。

まず、クエリするテーブル名と列名を指定し、WHERE句でBETWEEN演算子と範囲値を指定する必要があります。

たとえば、製品コードが80000から89999の範囲にある製品コードテーブルからレコードを抽出するには、次のステートメントを使用できます。

SELECT * FROM product_code
WHERE code BETWEEN 80000 AND 89999;
ここで、*はすべての列3を選択します。特定の列（たとえば、製品名と価格）のみを選択する場合は、カンマで区切って指定できます。例えば：

SELECT name, price FROM product_code
WHERE code BETWEEN 80000 AND 89999;
これで役に立つことを願っています。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さらに質問します。否定して：製品コードは文字列であり、あなたのコードは間違っています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;申し訳ありませんが、製品コードが文字列であることに気づいていませんでした。もしそうであれば、範囲の値の前後にはシングルクォートを追加する必要があります。例えば：

SELECT * FROM product_code
WHERE code BETWEEN &#39;80000&#39; AND &#39;89999&#39;;
私の誤りを許してください。🙏
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おめでとうございます。正しく認識します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>いくつかのGitコマンドのまとめ</title>
        <link>https://ttf248.life/ja/p/less-common-git-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/less-common-git-commands-summary/</guid>
        <description>&lt;p&gt;あまり使わないけれど非常に便利な &lt;code&gt;git&lt;/code&gt; コマンド&lt;/p&gt;
&lt;h3 id=&#34;システムを再インストールした結果windows上のフォルダーの所有権が変更されました&#34;&gt;システムを再インストールした結果、Windows上のフォルダーの所有権が変更されました。
&lt;/h3&gt;&lt;p&gt;新しいバージョンのGitにはセキュリティチェックが追加され、不安全であると警告が表示されるため、操作できなくなりました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ユーザーの新しいコンピューターにアカウントとパスワード情報を保存する&#34;&gt;ユーザーの新しいコンピューターにアカウントとパスワード情報を保存する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存された情報が更新が必要な場合は、まず古い認証情報を削除してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>両替櫃台システム（または、クロスボーダー両替システム）</title>
        <link>https://ttf248.life/ja/p/hk-rmb-dual-counter/</link>
        <pubDate>Thu, 16 Feb 2023 20:25:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hk-rmb-dual-counter/</guid>
        <description>&lt;p&gt;香港交易所于12月13日宣布，旗下证券市场将推出“港元-人民币双柜台模式”（以下简称“双柜台模式”）及双柜台庄家机制，以进一步支持人民币柜台在香港上市、交易及结算。&lt;/p&gt;
&lt;h2 id=&#34;双柜台モードおよび双柜台庄家メカニズム&#34;&gt;双柜台モードおよび双柜台庄家メカニズム
&lt;/h2&gt;&lt;p&gt;香港証取引所（HKEX）は、規制当局の承認と市場の準備が整うのを待って、これらの新措置の登録手続きが2023年第1四半期以降に開始される見込みであると発表しました。双柜台モード下では、HKEXは関連する取引および決済手続を最適化し、投資家が同じ発行体の香港ドル柜台および人民元柜台で上場された証券を交換できるようにします。&lt;/p&gt;
&lt;p&gt;人民币柜台の流動性を高め、両柜台間の価格差を縮小するため、香港証取引所は双柜台庄家メカニズムを導入します。関連法規が立法会で可決されるのを待って、流通量供給活動を行う市場庄家は、特定の取引を行った際に印花税の免除を受けることができます。同時に、これらの新措置も、今後の内地投資家が港股通（香港株式連動基金）を通じて人民元価格で取引される証券を準備するための前段階的な作業を行います。&lt;/p&gt;
&lt;p&gt;「港幣-人民币双柜台モードおよび双柜台庄家メカニズムの導入は、市場発展にとって重要な取り組みです。当社の他の市場措置と連携し、この安排はより多くの双柜台証券が香港に上場され、HKEXの既存の内地製品との良好な協調効果を発揮するのに役立ちます。HKEXは、人民币国際化プロセスを積極的に推進し、香港を世界有数の離岸人民元センターとしての地位を向上させることに尽力しています。」香港証取引所の最高執行責任者および市場統括本部長姚嘉仁が述べました。&lt;/p&gt;
&lt;p&gt;据悉，港股现行的上市、交易、结算及交收安排亦将大致适用于双柜台模式下的人民币柜台证券。HKEX将适时公布双柜台模式的实施日期以及符合纳入庄家机制的合资格双柜台证券名单。&lt;/p&gt;
&lt;p&gt;（注：上記は原文の翻訳です。）&lt;/p&gt;
&lt;h2 id=&#34;港元-人民元取引プラットフォームの特定方法&#34;&gt;港元-人民元取引プラットフォームの特定方法
&lt;/h2&gt;&lt;p&gt;香港証券取引会の文書によると、港元-人民元デュアルプラットフォーム取引のアレンジメントは、既存の株式コード割り当て計画を大まかに準拠し、港元プラットフォームの株式コードは「0」で始まる5桁数字、人民元プラットフォームの株式コードは「8」で始まる5桁数字となる。 港元と人民元プラットフォームの株式コードの最後の4桁は共通である。 人民元プラットフォームの株式略称には、「-R」が付加される。&lt;/p&gt;
&lt;p&gt;取引のアレンジメントに関しては、人民元および港元プラットフォームで同じカテゴリーの証券であり、相互変換可能であるという前提に基づき、あるプラットフォーム（例えば港元プラットフォーム）が空売りを許可されている特定の証券がある場合、別のプラットフォーム（例えば人民元プラットフォーム）も、取引所の規則に従って空売りを許可される指定証券として組み込まれる。 したがって、両方のプラットフォームは、取引所が公開する空売り可能な指定証券リストに共通して含まれる。&lt;/p&gt;
&lt;p&gt;2つのプラットフォームの株式が同一カテゴリーであり、相互変換可能であるため、港元で購入または保有し、人民元で売却することは、持っている状態から売る（沽地）と見なされ、その逆も同様である。 2つのプラットフォーム間の決済期間はT+2である。&lt;/p&gt;
&lt;p&gt;空売り資格を満たす特定の証券の場合、例えば港元で株式を借りてから、人民元プラットフォームで売却することは、担保付きの空売りと見なされる。 その逆も同様である。&lt;/p&gt;
&lt;p&gt;注目すべき点は、デュアルプラットフォームモードにおいて、人民元プラットフォームは取引および決済のみを目的としており、人民元プラットフォームに物理的な株式の入金または引き出しサービスを提供しない点である。 物理的な株式は、まず港元プラットフォームに保管された後に、人民元プラットフォームに変換されるまでしか利用できない。 同様に、人民元プラットフォームは、まず港元プラットフォームに変換された後にのみ、物理的な株式を引き出すことができる。&lt;/p&gt;
&lt;p&gt;関連する取引の決済および清算費用は、香港の決済費用全体が、配当代行サービス料および利息代行サービス料を除いてすべて港元で計算および徴収される。 配当代行サービス料および利息代行サービス料は、関連する証券で使用されている資格通貨で計算される。&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Trading/Securities/Overview/Trading-Mechanism/HKD-RMB-Dual-Counter-Model?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKD-RMB-Dual-Counter-Model&lt;/a&gt;
出典：香港交易所脈搏/HKEx Pulse、券商中国&lt;/p&gt;
</description>
        </item>
        <item>
        <title>- コンパイラ
- コールバック関数
- パフォーマンステスト</title>
        <link>https://ttf248.life/ja/p/compiler-callback-performance-testing/</link>
        <pubDate>Wed, 15 Feb 2023 13:59:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/compiler-callback-performance-testing/</guid>
        <description>&lt;p&gt;昨年、SDKを設計し、イベントのパッキング処理を担当しました。外部に対してはクラスインターフェースを提供し、サービス初期化時に呼び出し元が対応するクラスを実装し、オブジェクトポインタをモジュールに渡します。&lt;/p&gt;
&lt;p&gt;C11にも触れており、好奇心で猫が死ぬように、これらのインターフェースをlambda関数オブジェクトのコールバックとして実現するとどうなるのか、純粋仮想関数インターフェース定義方法と比較して、より柔軟になるのか試してみようと考えました。&lt;/p&gt;
&lt;p&gt;疑問が生じました。2つの異なる構文、性能面からどちらが速いのか不明です。コンパイラ原理は理解していないので、コードを書いて試してみます。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;p&gt;オンラインのURLで、異なるコンパイラを選択したり、コンパイルパラメータを設定したり、&lt;code&gt;linux&lt;/code&gt;プラットフォーム上でコードを実行したり、対応するアセンブリコードを確認したりできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;：時々技術検証のために、ウェブ上で小さなコードスニペットを実行するのは非常に便利です。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://godbolt.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://godbolt.org/&lt;/a&gt;：異なる色でアセンブリコードと対応するコードを区別できるため、ローカルのデバッガよりもさらに便利です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;標準委員会が定める文法規則について、コンパイルレベルにおいてどのように実現するかは、各社のコンパイラに依存します。この点については、特にマイクロソフトのコンパイラは非常に優れていると言わざるを得ません。文法糖衣は万能ではなく、コールバックインターフェースが少ないこと、ラムダ式を使用することでより便利であり、空のコールバック関数インターフェースを定義する必要がないことが挙げられます。コールバックインターフェースの種類が多い場合には、従来の仮想関数の方がビジネスインターフェースの統一に有利です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsプラットフォームでは、両者の性能はほぼ同等で、大きな違いはありません。&lt;/li&gt;
&lt;li&gt;Linuxプラットフォームでは、仮想関数とラムダ式を比較すると、単回りは1.35ns増加します。
通常のビジネスシステム開発においては、この程度の性能損失は無視できる範囲内であり、ラムダ式を使用することで、設計面での利便性が向上します。特に多重信号処理を行う場合には顕著であり、底层にはイベントトリガーがあり、ログ出力が必要な場合、ログオブジェクトへの処理関数を呼び出します。より多くのビジネス処理インターフェースが必要な場合には、底层で&lt;code&gt;vector&lt;/code&gt;にラムダオブジェクトを保存し、イベントトリガー時に順次呼び出しを行います。これはQTのシグナルとスロットに類似しており、ログ、監視、ビジネス1、ビジネス2といったものが完全に疎結合です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;コード&#34;&gt;コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;カウンター：1000000
時間：3966us
カウンター：1000000
時間：5316us
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;atomic&amp;gt;
#include &amp;lt;string&amp;gt;

std::atomic_int64_t カウンター = 0;

// 回呼インターフェースを定義
class UserInterface
{
public:
    virtual void name() = 0;
    virtual void full_name() = 0;
};

class User : public UserInterface
{
public:
    void name() {}
    void full_name() { カウンター++; }
};

void to_string(UserInterface* user)
{
    user-&amp;gt;name();
    user-&amp;gt;full_name();
}

using name_handler = std::function&amp;lt;void()&amp;gt;;
using full_name_handler = std::function&amp;lt;void()&amp;gt;;

class Test
{
    name_handler name_;
    full_name_handler full_name_;

public:
    void set_name_handler(name_handler name)
    {
        name_ = name;
    }

    void set_full_name_handler(full_name_handler full_name)
    {
        full_name_ = full_name;
    }

    void to_string()
    {
        name_();
        full_name_();
    }
};

int main()
{
    User user;

    auto start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++)
    {
        to_string(&amp;amp;user);
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;カウンター： &amp;quot; &amp;lt;&amp;lt; カウンター &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;時間： &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

    counter = 0;
    auto name = []() {};
    auto full_name = []() { カウンター++; };

    Test test;
    test.set_name_handler(name);
    test.set_full_name_handler(full_name);

    start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++)
    {
        test.to_string();
    }

    end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;カウンター： &amp;quot; &amp;lt;&amp;lt; カウンター &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;時間： &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;付録
gist.githubusercontent.com/benloong/8050171/raw/fa577ec923b460862078b8b40233a42a1c619eeb/functionperformance.cpp のようなコードスニペットを参考にしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

using namespace std;
using namespace std::chrono;

class Base
{
public:
	Base(){}
	virtual ~Base(){}
	virtual int func(int i) = 0;
};

class Derived : public Base
{
public:
	Derived(int base = 10) : base{base}
	{

	}
	~Derived(){}

	virtual int func(int i)
	{
		return i*base;
	}
private:
	int base;
};

struct Func
{
	int base;
	int operator()(int i)
	{
		return i*base;
	}
	Func(int base) : base {base}
	{

	}
};
const int base = 10;
int calculate(int i)
{
	return base*i;
}

int main()
{
	const int num = 10000;
	Base *p = new Derived{10};
	int total = 0;
	auto start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += p-&amp;gt;func(i);
	}
	auto end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nvirtual call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += calculate(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\ndirect function call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	Func functor{10};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += functor(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nfunctor call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	int base = 10;
	function&amp;lt;int(int)&amp;gt; lambda = [base](int i)
	{
		return i*base;
	};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += lambda(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nlambda call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	return 0;
}

/*
test on mac mini i7 2.7GHz
clang++ -std=c++11 chronotest.cpp -O0
output:
result: 499950000
virtual call elapsed: 	43171 nanoseconds.

result: 499950000
direct function call elapsed: 	31379 nanoseconds.

result: 499950000
functor call elapsed: 	41497 nanoseconds.

result: 499950000
lambda call elapsed: 	207416 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O1
output:
result: 499950000
virtual call elapsed: 	261 ```
/*
*/

ここに、通常の関数と汎関数（ラムダ式）があり、コールバックインターフェースによる比較と直接呼び出しのパフォーマンスの違いは桁違いです。汎関数は関数に近いため、場合によっては汎関数のパフォーマンスが優れています。コンパイラの仕組みについては知識が不足しており、変数へのアクセスアドレスや関数が隣接していることがCPU処理を有利にするという推測です。

wandboxの結果を添付します。
``` - 付録
コードスニペット [functionperformance.cpp](https://gist.githubusercontent.com/benloong/8050171/raw/fa577ec923b460862078b8b40233a42a1c619eeb/functionperformance.cpp) を見つけました。

```c++
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

using namespace std;
using namespace std::chrono;

class Base
{
public:
	Base(){}
	~Base(){}
	virtual int func(int i) = 0;
};

class Derived : public Base
{
public:
	Derived(int base = 10) : base{base}
	{

	}
	~Derived(){}

	virtual int func(int i)
	{
		return i*base;
	}
private:
	int base;
};

struct Func
{
	int base;
	int operator()(int i)
	{
		return i*base;
	}
	Func(int base) : base {base}
	{

	}
};
const int base = 10;
int calculate(int i)
{
	return base*i;
}

int main()
{
	const int num = 10000;
	Base *p = new Derived{10};
	int total = 0;
	auto start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += p-&amp;gt;func(i);
	}
	auto end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nvirtual call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += calculate(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\ndirect function call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	Func functor{10};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += functor(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nfunctor call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	int base = 10;
	function&amp;lt;int(int)&amp;gt; lambda = [base](int i)
	{
		return i*base;
	};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += lambda(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nlambda call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	return 0;
}

/*
test on mac mini i7 2.7GHz
clang++ -std=c++11 chronotest.cpp -O0
output:
result: 499950000
virtual call elapsed: 	43171 nanoseconds.

result: 499950000
direct function call elapsed: 	31379 nanoseconds.

result: 499950000
functor call elapsed: 	41497 nanoseconds.

result: 499950000
lambda call elapsed: 	207416 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O1
output:
result: 499950000
virtual call

## 付録

```shell
結果: 499950000
仮想呼び出し時間: 6143 ナノ秒。

結果: 499950000
直接関数呼び出し時間: 30 ナノ秒。

結果: 499950000
ファンクタ呼び出し時間: 31 ナノ秒。

結果: 499950000
ラムダ呼び出し時間: 15134 ナノ秒。
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>ホストモード、ネットワークモード、デバッガを使用して直接観察する</title>
        <link>https://ttf248.life/ja/p/host-network-byte-order-debugger/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/host-network-byte-order-debugger/</guid>
        <description>&lt;p&gt;コンピュータの発展の歴史において、データの保存方法には統一された標準は存在しませんでした。
バイトの並び方は2つの一般的なルールに従っていました。例えば、ある多桁数の低いバイトを小さいアドレスに、高いバイトを大きいアドレスに配置する場合、これを小端序と呼びます。その逆の場合、大端序と呼びます。ネットワークアプリケーションにおいては、バイトオーダーは考慮すべき重要な要素であり、異なる種類のコンピュータが異なる標準のバイトオーダーを採用している可能性があるため、すべてネットワーク標準に変換されます。
読解習慣に従うと、大端バイトオーダーは左から右への読み込み順序に合致します。&lt;/p&gt;
&lt;h2 id=&#34;プロセッサアーキテクチャhttpszhwikipediaorgwikie5ad97e88a82e5ba8f&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;プロセッサアーキテクチャ&lt;/a&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;x86、MOS Technology 6502、Z80、VAX、PDP-11などのプロセッサは小端序を採用&lt;/li&gt;
&lt;li&gt;Motorola 6800、Motorola 68000、PowerPC 970などのプロセッサは大端序を採用&lt;/li&gt;
&lt;li&gt;ARM、PowerPC（PowerPC 970を除く）、DEC Alpha、SPARC V9、MIPS、PA-RISCおよびIA64のバイトオーダーは可変式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络序&#34;&gt;网络序
&lt;/h2&gt;&lt;p&gt;ネットワーク転送では一般的に大端序が採用され、ネットワークバイト序とも呼ばれ、ネットワーク序とも言います。IPプロトコルにおいて大端序はネットワークバイト序として定義されています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Berkeley&lt;/code&gt;ソケットは、16ビットおよび32ビット整数をネットワーク序とホストバイト序間で変換するための変換関数群を定義しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); // uint32_t をネットワーク序に変換
uint16_t htons(uint16_t hostshort); // uint16_t をネットワーク序に変換
uint32_t ntohl(uint32_t netlong); // uint32_t をネットワーク序からホスト序へ変換
uint16_t ntohs(uint16_t netshort); // uint16_t をネットワーク序からホスト序へ変換
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;asio&lt;/code&gt; をネットワークライブラリとして使用する場合、組み込みの名前空間には、クロスプラットフォームに対応した関数名が用意されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;visual-studio-デバッガー&#34;&gt;Visual Studio デバッガー
&lt;/h2&gt;&lt;p&gt;デバッグモードでは、デバッグメニューを選択し、ウィンドウからメモリウィンドウにチェックを入れます。
Visual Studio では、デバッガー内で直接メモリ内のデータを表示できます（下記画像参照）。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/Snipaste_2023-01-10_14-44-00.png&#34;
	width=&#34;535&#34;
	height=&#34;147&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;デバッガーメニュー&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;363&#34;
		data-flex-basis=&#34;873px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;メモリの確認方法&#34;&gt;メモリの確認方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ウィンドウから直接変数名を表示し、対応する変数のアドレスにジャンプ&lt;/li&gt;
&lt;li&gt;変数が元のポインタ型である場合、ウィンドウで変数をダブルクリックして選択し、メモリウィンドウにドラッグすることで、対応する内容のアドレスを表示&lt;/li&gt;
&lt;li&gt;変数がポインタ型でない場合は、計算ウィンドウに追加し、アドレスを取得してから、手動でメモリウィンドウにコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例を挙げて説明します&#34;&gt;例を挙げて説明します
&lt;/h3&gt;&lt;p&gt;データを受信し、&lt;code&gt;buffer&lt;/code&gt;オブジェクトに格納します。ネットワークバイトオーダーをホストバイトオーダーに変換し、&lt;code&gt;body_length&lt;/code&gt;が30になります。サーバー側では、このデータを送信するために4バイトを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // ネットワークバイトオーダーをホストバイトオーダーに変換
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;大端型バイトオーダー&lt;/strong&gt;: メモリウィンドウ内の&lt;code&gt;buffer_&lt;/code&gt;の内容を観察します。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;小端型バイトオーダー&lt;/strong&gt;: メモリウィンドウ内の&lt;code&gt;body_length_&lt;/code&gt;の内容を観察します。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>その頃の少年は、才能があるかもしれないが、それほど多くはなかった。</title>
        <link>https://ttf248.life/ja/p/that-boy-talent-maybe-but-not-much/</link>
        <pubDate>Mon, 09 Jan 2023 13:45:09 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/that-boy-talent-maybe-but-not-much/</guid>
        <description>&lt;p&gt;勤務における7回目の年、コードからのポジティブなフィードバックが減ってきており、どのようにしてコーディングという道に進むことになったのかを振り返る。人々の様々な選択において、幼い頃ほど正のフィードバックに従う傾向があり、害を避けることと利益を得ることの間で積極的に判断する。&lt;/p&gt;
&lt;h2 id=&#34;一子供の頃&#34;&gt;一、子供の頃
&lt;/h2&gt;&lt;p&gt;引っ越しで都心に住むようになり、コンピューターの教科書？ハッカーの資料？Windowsシステムに触れるなど、これらは全てエピソードです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;時間は子供時代と、親戚である甥っ子と秘密裏に家のパソコンでゲームをしていた頃に絞るべきでしょう。親戚のおじさんお兄さんがパソコンショップを経営していました。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;幼い頃から私達兄弟姉妹はコンピューターに触れる時間が比較的早かったため、基本的な認識を確立しました。その後、学校ではミクシ（微機）科の授業を受けましたが、興味を持つようになりました。&lt;/p&gt;
&lt;p&gt;中学生の頃にはコンピュータ競技会について聞いたことがあり、とてもクールだと感じました。転校後は、その話はしばらく置いておきました。&lt;/p&gt;
&lt;p&gt;私が上中時代だった頃は、コンピューターの基本的な操作に慣れており、ミクシ科の授業では、比較的注目を浴びることができました。&lt;/p&gt;
&lt;p&gt;もしあなたがそれもまだ知っているなら、間違いありません。熟練しているのではなく、Officeなどのオフィスソフトに精通している方が、さらに素晴らしいでしょう。&lt;/p&gt;
&lt;h2 id=&#34;二引越し&#34;&gt;二、引越し
&lt;/h2&gt;&lt;p&gt;引越しということを改めて考えると、都心に引っ越してきたことと近所の状況から、図書館に接触することになり、小説を αρκε数読んだものの、雑誌も多く読みました。&lt;/p&gt;
&lt;p&gt;『コンピュータ報』、『大众软件』&lt;/p&gt;
&lt;p&gt;ますますコンピューターという製品に対して興味を持つようになりました。子供の頃の心理におけるハッカーへの崇拝が強く、積極的に学校で関連する知識を学びました。&lt;/p&gt;
&lt;p&gt;オペレーティングシステムの基本的なことを理解しました：コントロールパネル、CMDコマンド、VBSスクリプト&lt;/p&gt;
&lt;p&gt;『コンピュータ報』は初心者向けで適しており、毎回事例形式でシステムの操作方法を解説していました。&lt;/p&gt;
&lt;p&gt;『大众软件』では、様々なソフトウェアの紹介、業界ニュース、&lt;strong&gt;もちろんゲームニュースもありました。当初のモチベーションもここで生まれ、ゲームへの興味が芽生えました&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;iii-senior-high-school&#34;&gt;III. Senior High School
&lt;/h2&gt;&lt;p&gt;When I was in my second year of high school, Bo Ge transferred to our class and had several predecessors who were admitted through computer competition quotas in the previous two years. The school principal also paid a lot of attention to this competition.&lt;/p&gt;
&lt;p&gt;There was also a pre-existing hardware foundation: an alumnus from America donated a building to the school, which resulted in a new library and a new computer lab – it all seemed so coincidental.&lt;/p&gt;
&lt;p&gt;Plus Bo Ge’s explanations, he became the computer guru in our class at that time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A scholar + computer master, knowing how to hack other people&amp;rsquo;s computers and disable classroom surveillance software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-高校&#34;&gt;3. 高校
&lt;/h2&gt;&lt;p&gt;競技は紆িরে最終戦までたどり着き、内容を十分に理解できず、問題は基礎的なアルゴリズムばかりでした。しかし、結局は結局です。まるで旅行に出かけただけのようなものでした。&lt;/p&gt;
&lt;h2 id=&#34;第四大学&#34;&gt;第四、大学
&lt;/h2&gt;&lt;p&gt;専門選択に至り、家で自動化を選んだが、実は強電を志しており、帰宅して電力局に入ろうと考えていた。しかし、専門課程はほとんど学ばず、
自己駆動力の学習能力は専門課程ではほとんどなく、大課程内のコンピュータコースは、非常にスムーズに学べた。
専門科目のサボりや、コンピュータコースを真面目に学び、日常的に以下のフォーラムで活動：「精易フォーラム」「吾愛破解」。
専門知識であるアセンブリ言語やC++の知識と組み合わせ、&lt;strong&gt;フォーラムで仕事を受注して稼ぎ、より多くの肯定的なフィードバックを得て、ますます規模が拡大していった&lt;/strong&gt;。
最終的には、小規模な選択肢を選び、チップを書くコードを選択し、家でもあまり関心を持たれず、私自身で選択した。
その時、&lt;strong&gt;第三の重要な人物：堂（とう）哥（ご）&lt;/strong&gt;、高い学歴を持ち、百度（ベイドゥ）に入社していた。
お姉様も私のことを理解しており、私が当時研究に集中できなかったことを知っていたため、堂哥と話して将来の展望を確実にした。
夏休みに帰宅せず、指導教官のもとでプロジェクトに取り組み、経験を積んだ。
自分が見れる成績に基づいて、恒生電子（カントンエレクトロニクス）に入社した。&lt;/p&gt;
&lt;h2 id=&#34;５卒業&#34;&gt;５．卒業
&lt;/h2&gt;&lt;p&gt;ここで重要なことは、私が壁を掻き分けて、選択科目として「コンピュータ情報検索」を選んだこと。資料や問題の迅速な検索と特定の方法を知り、そしてキーパーソンである**碩哥（せきちょう）**から時間を与えられ、問題を自分で解決し、根源まで突き止めることを学んだことです。さらに、研究開発センターのベテランとの出会いも促してくれました。&lt;/p&gt;
&lt;p&gt;これらの経験が、深圳分社において、私が非常に優秀だと周囲に認識されるきっかけとなりました。特に、取引チャネルグループを担当することに成功しました。&lt;/p&gt;
&lt;p&gt;しかし、ここから問題が生じます。コンピュータオペレーティングシステム、アルゴリズムといった基礎知識、ソフトウェア工学設計については、体系的な学習を積んでいなかったため、自身の経験に頼るしかありませんでした。&lt;/p&gt;
&lt;p&gt;そのため、過去の経験に基づき、矛盾したコード設計をしてしまったり、ルールに基づかないモジュール設計になってしまい、７年目に差し掛かり、徐々に力を発揮できなくなってしまいました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>中国の新型コロナウイルス感染症解除</title>
        <link>https://ttf248.life/ja/p/china-coronavirus-end-lockdown/</link>
        <pubDate>Thu, 22 Dec 2022 19:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/china-coronavirus-end-lockdown/</guid>
        <description>&lt;p&gt;政策の発表は非常に突然で、実行も迅速だった。行程制限が解除され、公共の場での緑色コードのチェックはなくなった。&lt;/p&gt;
&lt;p&gt;ニューヨーク・タイムズ中文網を閲覧すると、全体に中国の解封についての議論が溢れている。&lt;/p&gt;
&lt;p&gt;政策を評価することはせず、周囲の状況を記録するだけだ。&lt;/p&gt;
&lt;p&gt;北京には元々ゼロコロナ政策はなく、制限が緩和され、急速に感染が拡大した。周りの友人の中では重症者は誰もいなかった。&lt;/p&gt;
&lt;p&gt;深圳は広州市に隣接しており、これも急速に発展した。上海で仕事をしている友人は、会社が郊外にあるため、この稿を書いている時点で大規模な感染は発生していない。&lt;/p&gt;
&lt;p&gt;故郷の予防措置は少なかったが、それに続いて大規模な拡散があった。&lt;/p&gt;
&lt;p&gt;ほとんどの場合と同じように感じるだろう。突然解き放たれ、1週間ごとに政策が変わるまで続いた。そして最終的に全面解封に至ったのだ。&lt;/p&gt;
&lt;p&gt;3年間のゼロコロナ政策の効果を否定することはできない。随遇に安うことだ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>C11: sleep for vs yield</title>
        <link>https://ttf248.life/ja/p/c11-sleep-for-vs-yield/</link>
        <pubDate>Tue, 20 Sep 2022 20:54:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/c11-sleep-for-vs-yield/</guid>
        <description>&lt;p&gt;コードを眺めていると、&lt;code&gt;std::this_thread::yield()&lt;/code&gt; が突然視線を集めました。C11 の構文糖で、これほど多く使われていたのは初めてです。&lt;code&gt;yield&lt;/code&gt; を以前は目にすることはありませんでした。&lt;/p&gt;
&lt;p&gt;マニュアルを確認せず、まず思い浮かべたのは、それが非同期処理と関連しているのではないかということでした。&lt;code&gt;yield&lt;/code&gt; は boost 協程の実装の中に見られる単語であり、ここでは非同期処理とは関係ありません。制御ロジックは通常のスレッドに関連しています。&lt;/p&gt;
&lt;h2 id=&#34;ドキュメント&#34;&gt;ドキュメント
&lt;/h2&gt;&lt;h3 id=&#34;yield&#34;&gt;yield
&lt;/h3&gt;&lt;p&gt;この関数の正確性は、実装に依存し、特に使用されている OS のスケジューラメカニズムとシステムの状態に依存します。例えば、先入れ先出しリアルタイムスケジューラ（Linux の SCHED_FIFO）が現在のスレッドをサスペンドし、それを実行可能な同優先度のスレッドのキューの末尾に置く（同優先度で他のスレッドがない場合、yield は効果がない）といった具合です。&lt;/p&gt;
&lt;h3 id=&#34;sleep_for&#34;&gt;sleep_for
&lt;/h3&gt;&lt;p&gt;現在のスレッドの実行をブロックし、指定された &lt;code&gt;sleep_duration&lt;/code&gt; 分間少なくとも停止します。
この関数は、スケジューリングやリソース競合による遅延のため、&lt;code&gt;sleep_duration&lt;/code&gt; より長くブロックされる可能性があります。
標準ライブラリでは、安定したクロックを使用して時間を測定することをお勧めします。システム時間で実装する場合は、待機時間がクロック調整に敏感になる可能性があることに注意してください。&lt;/p&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析
&lt;/h3&gt;&lt;p&gt;両方の関数は、現在のスレッドがスレッドを占有しないようにし、実行効果はプラットフォームによって異なる可能性があります。ここまでの内容でまだ少し理解が曖昧ですが、コードを実行して結果を確認してみましょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ThinkPad ノートパソコン（Visual Studio Community 2022）、腾讯云 S2 標準サーバー（gcc8.5）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;分析-1&#34;&gt;分析
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/us&lt;/th&gt;
&lt;th&gt;二次/us&lt;/th&gt;
&lt;th&gt;三次/us&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;9872&lt;/td&gt;
&lt;td&gt;1884&lt;/td&gt;
&lt;td&gt;11302&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-2&#34;&gt;分析
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/US&lt;/th&gt;
&lt;th&gt;二回目/US&lt;/th&gt;
&lt;th&gt;三回目/US&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-3&#34;&gt;分析
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/us&lt;/th&gt;
&lt;th&gt;二回/us&lt;/th&gt;
&lt;th&gt;三回/us&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;171&lt;/td&gt;
&lt;td&gt;168&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-4&#34;&gt;分析
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/us&lt;/th&gt;
&lt;th&gt;二次/us&lt;/th&gt;
&lt;th&gt;三次/us&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-5&#34;&gt;分析
&lt;/h3&gt;&lt;p&gt;実行結果から判断すると、オペレーティングシステムの異なる実装により、高精度なスリープ（休眠）時の &lt;code&gt;sleep_for&lt;/code&gt; の安定性差が非常に大きいことがわかります。高精度なスリープを実現するためには、&lt;code&gt;yield&lt;/code&gt; を使用する方が適しています。&lt;/p&gt;
&lt;p&gt;時間精度を &lt;code&gt;ms&lt;/code&gt; (ミリ秒) に向上させた場合、両者の差異はほとんど見られなくなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;thread&amp;gt;

// 別のスレッドで短い時間の“忙しいスリープ”を実行することを推奨します
void little_sleep(std::chrono::microseconds us)
{
    auto start = std::chrono::high_resolution_clock::now();
    auto end = start + us;
    do {
        std::this_thread::yield();
    } while (std::chrono::high_resolution_clock::now() &amp;lt; end);
}

int main()
{
    auto start = std::chrono::high_resolution_clock::now();

    little_sleep(std::chrono::microseconds(100));
    std::this_thread::sleep_for(std::chrono::microseconds(100));

    auto elapsed = std::chrono::high_resolution_clock::now() - start;
    std::cout &amp;lt;&amp;lt; &amp;quot;waited for &amp;quot;
              &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(elapsed).count()
              &amp;lt;&amp;lt; &amp;quot; microseconds\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照&#34;&gt;参照
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Linuxサーバー、MySQLパスワードのリセット</title>
        <link>https://ttf248.life/ja/p/linux-server-reset-mysql-password/</link>
        <pubDate>Tue, 20 Sep 2022 14:27:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-server-reset-mysql-password/</guid>
        <description>&lt;p&gt;闲置の腾讯クラウドサーバーがあり、年末に契約が満了し、更新も考えていなかったので、開発用のデータベースとしてMySQLをデプロイすることにした。システムを再構築する際に、手間を省いて、腾讯クラウドから提供されている汎用イメージを選択した。すでにMySQLデータベースがインストールされていた。本来はシステム内にReadmeのようなファイルがあり、パスワードや設定ファイルの場所などを説明してくれるだろうと期待していた。&lt;/p&gt;
&lt;p&gt;腾讯クラウドのシステム再構築は非常に速く、約1分で完了通知が来た。ログインして&lt;code&gt;systemctl status mysql&lt;/code&gt;コマンドを実行したところ、MySQLサービスが起動していることが確認できた。パスワードを探し回ったがどこにも見つからず、次第に焦り始めた。&lt;/p&gt;
&lt;p&gt;そこで、サーバーにアクセスしているのであれば、root権限を使ってパスワードをリセットする方法があるはずだと考えた。資料を調べたり、阿里云フォーラムの投稿を参考にしたりして、さらに試行錯誤を続けた。&lt;/p&gt;
&lt;h2 id=&#34;パスワードのリセット&#34;&gt;パスワードのリセット
&lt;/h2&gt;&lt;p&gt;構成ファイル &lt;code&gt;vim /etc/my.cnf&lt;/code&gt; を編集し、&lt;code&gt;mysqld&lt;/code&gt; ノードに以下の設定を追加します：&lt;code&gt;skip-grant-tables&lt;/code&gt; 、&lt;code&gt;systemctl restart mysql&lt;/code&gt; コマンドを実行してデータベースを再起動します。
その後、&lt;code&gt;mysql&lt;/code&gt; を直接使用してデータベースにログインし、通常の操作が続行できます。 &lt;code&gt;root&lt;/code&gt; ユーザーのパスワードをリセットし、同時にリモートログインを許可します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;USE mysql;
UPDATE user SET authentication_string = password(&#39;pass&#39;) WHERE User = &#39;root&#39;;
GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;pass&#39; WITH GRANT OPTION;
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;変更した構成ファイルをロールバックし、データベースを再起動して完了です。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://help.aliyun.com/document_detail/42520.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://help.aliyun.com/document_detail/42520.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>夜の命名術</title>
        <link>https://ttf248.life/ja/p/nights-naming-art/</link>
        <pubDate>Thu, 11 Aug 2022 22:10:14 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/nights-naming-art/</guid>
        <description>&lt;p&gt;中国文字の浩大な体系において、「命」という字は唯一無二であり、同じ読みを持つ字が一つもない。もしかしたら、この冥冥の中の暗示は、人それぞれの生命が一度きりで、複製したり、やり直したりすることができないことの表れなのかもしれない。&lt;/p&gt;
&lt;p&gt;暇な時間に起点中文网のランキングを調べてみると，《夜的命名術》の月票数が圧倒的に多く、首位を独占し、第二名との差はあまりにも大きく、追いつくことすら難しい。これまで私は、唐家三少や耳根といった知名作家の作品を多く読んできたが、今回は新作者の作品に挑戦して、違った読書体験を得ることにした。&lt;/p&gt;
&lt;p&gt;8月初旬時点では，《夜的命名術》の月票数は200万を突破し、第二位は8万人と大きく差が開いているのが驚くべきことだ。&lt;/p&gt;
&lt;p&gt;私は自分の知識不足を自覚しており、この本の文筆を評価する能力はないと考えている。しかし、10数章読み終えたところ、物語は緊密に、巧みに絡み合い、読者を惹きつける魅力的な展開であり、このような高い月票数を獲得しているのは、まさに実力至上主義であると感じた。&lt;/p&gt;
&lt;p&gt;「命」の字と同様に、「死」という字も中国文字の中で同じ読みを持つ字が見つからない。これは生命の終焉が同様に唯一無二で、代替不可能な深い意味合いを秘めているのだろうか？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>自動テストに関する考察</title>
        <link>https://ttf248.life/ja/p/automated-testing-overview/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/automated-testing-overview/</guid>
        <description>&lt;p&gt;金融取引システムにおけるテストへの投資は、他のシステムを大幅に上回っており、煩雑なテスト手順が繰り返し行われていました。ROI（投資対効果）は著しく低く、プロジェクトや人員の変更に伴い、不可避的に多くのコントロールできない要因が導入されました。よく見られるのは、Aインターフェースからの出力フィールドを修正するとBインターフェースの結果に影響が出るケースです。各バージョンリリースごとにリスクも蓄積されていきます。&lt;/p&gt;
&lt;h2 id=&#34;理論的知識&#34;&gt;理論的知識
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自動化の価値をどのように測定するか？&lt;/strong&gt;
自動テストのROI = (手動実行時間) * (実行回数) / (開発コスト + メンテナンスコスト)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;どのような機能に自動テストを行うべきか？&lt;/strong&gt;
ユーザーが頻繁に使用し、頻繁に変更されない機能。このようなインターフェースに対して自動テストコードを作成することで、最大の利益が得られます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;なぜこのタイミングで自動テストを推進するか？&lt;/strong&gt;
プロジェクトのリリース直前は不適切であり、遠い水の問題を近渴（近隣の渇き）で解決しようとするのは無駄です。自動化は長期的な収益モデルであるため、最も適切なタイミングは、プロジェクトが&lt;strong&gt;本番環境&lt;/strong&gt;で稼働し、安定したリリースサイクルに入っている時点です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;フレームワークの選択&#34;&gt;フレームワークの選択
&lt;/h2&gt;&lt;p&gt;関連の実践経験が不足している状態で、このような自動化テストのタスクを受け取った場合、一般的なスタートは、検索エンジンを開いて、現在のシステム&lt;strong&gt;技術スタック&lt;/strong&gt;で利用可能なツールやフレームワークを探し、マニュアルを読み、一発勝負。適切なツールを見つけられれば、おめでとうございます、&lt;strong&gt;完璧なスタート&lt;/strong&gt;です。
まず「間違っていた」と言っておきながら、関連資料を調べ直すと、これは存在しないわけではなく、むしろフレームワーク自体が複雑で、デプロイに必要なリソースも多すぎることがわかります。初心者にとって必要なのは、小さくて、簡潔で、テストチームの同僚に相談すると、&lt;code&gt;Python&lt;/code&gt; 自体構築のフレームワークについて提案され、簡単に言うと、既存のユニットテストフレームワークを自動テストフレームワークとして活用するというものです。
参考となるプロジェクトのデザイン思路：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;フレームが必要な理由&#34;&gt;フレームが必要な理由
&lt;/h2&gt;&lt;p&gt;サービスには、開発環境、テスト環境、本番テスト環境など、複数の異なるデプロイ環境が存在します。フレームワークの役割は、これらの環境間の抽象化層を提供することです。テストケースとデータが分離され、それぞれの環境設定に合わせて異なるケースデータを適用できます。また、共通のデータをサポートすることも可能です。&lt;/p&gt;
&lt;p&gt;主な目的は、自動化の利用率を向上させることです。より複雑なシナリオでは、異なる環境間でのデータ連携は存在せず、全く関係ありません。ケースデータを設定する際に &lt;code&gt;label&lt;/code&gt; 属性を追加し、現在のデータがサポートする環境を指定するだけで済みます。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://time.geekbang.org/column/article/496850&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最高のコストパフォーマンスな自動テスト&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>新しい言語を学ぶべき理由は何ですか？</title>
        <link>https://ttf248.life/ja/p/why-learn-a-new-language/</link>
        <pubDate>Thu, 04 Aug 2022 11:27:30 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/why-learn-a-new-language/</guid>
        <description>&lt;p&gt;学歴から算じると、C++に触れるのは10年以上になる。他のプログラミング言語を学ぶ必要がなぜあるのか？&lt;/p&gt;
&lt;p&gt;職務経験：エレガントなモジュール設計の経験が不足しており、C++の構文は自由度が高いため、他の言語を学習することで、よりエレガントな設計を書くことができるように導かれている。&lt;/p&gt;
&lt;p&gt;いくつかのツールを作成する際に、頻繁に利用することがある。&lt;/p&gt;
&lt;p&gt;低レベルライブラリのデザインやビジネスモジュールの実装など、デザインの原則もすべて理解できている。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Visual Studio コンパイル文字セット [転送]</title>
        <link>https://ttf248.life/ja/p/visual-studio-character-set/</link>
        <pubDate>Thu, 04 Aug 2022 10:51:43 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/visual-studio-character-set/</guid>
        <description>&lt;p&gt;C++をクロスプラットフォームで開発する際、中国のオペレーティングシステムではよく遭遇するエラーは、&lt;code&gt;error C2001&lt;/code&gt;（定数に改行文字が含まれています）です。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio&#34;&gt;Visual Studio
&lt;/h2&gt;&lt;p&gt;CMakeはプロジェクトのコンパイルスクリプトを組織し、Windows環境での開発時に一時的にソリューションファイルを生成します。クロスプラットフォームである理由として、ファイルエンコーディングにUTF-8を選択しています。&lt;/p&gt;
&lt;p&gt;引用資料では、問題の原因について原理に基づき詳細な説明が提供されています。&lt;/p&gt;
&lt;p&gt;エンコーディングに関して、MSVCにはコンパイルオプション&lt;code&gt;/source-charset&lt;/code&gt;と&lt;code&gt;/execution-charset&lt;/code&gt;があり、これらを使用することで、ほとんどのエンコーディング問題を解決できます。&lt;/p&gt;
&lt;p&gt;例えば、WindowsのcmdコマンドプロンプトはデフォルトでGBKエンコーディングしか表示できない場合でも、コードファイル自体がUTF-8で記述されているため、クロスプラットフォームであることや、直接GBKに変換する変更を加えることが難しい状況です。そこで、Win10上で&lt;code&gt;/source-charset:utf-8 /execution-charset:gbk&lt;/code&gt;というコンパイルオプションを設定し、コンパイラをUTF-8エンコーディングで読み込み、内部の文字列配列にはGBKエンコーディングで保存することで、直接printf関数を使用してcmdコマンドプロンプトで漢字を表示することができます。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-用の-cmake-設定&#34;&gt;Visual Studio 用の CMake 設定
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;if(WIN32)
  message(STATUS &amp;quot;WIN32 での構成実行中&amp;quot;)
  set(CMAKE_CXX_FLAGS &amp;quot;${CMAKE_CXX_FLAGS} /source-charset:utf-8 /execution-charset:gbk&amp;quot;)
endif()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhaolan.zhihu.com/p/146543940&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhaolan.zhihu.com/p/146543940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ペロシの台湾訪問</title>
        <link>https://ttf248.life/ja/p/pelosi-visits-taiwan/</link>
        <pubDate>Tue, 02 Aug 2022 22:57:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/pelosi-visits-taiwan/</guid>
        <description>&lt;p&gt;政治に無知であり、コメントはしない。このインターネット上の「狂騒」を記録する。&lt;/p&gt;
&lt;h2 id=&#34;随筆&#34;&gt;随筆
&lt;/h2&gt;&lt;p&gt;先日起きた&lt;strong&gt;唐山暴行事件&lt;/strong&gt;、&lt;strong&gt;人教小教材文化浸透事件&lt;/strong&gt;、もうすでに多くの人が覚えていないだろうか。ニュースで取り上げられるような話題は、すでに無関心になり、ほとんど感情が動かない。退社していつも通りドラマを観るだけだ。経済状況がすでにこのような状態であるにもかかわらず、戦争が勃発すれば、生活はより悪くならないだろう。政治のことを理解せず、意見を述べることもない。インターネット上での「狂騒」を記録するだけに留める。&lt;/p&gt;
&lt;h2 id=&#34;wiki-概要httpszhwikipediaorgwiki2022e5b9b4e58d97e8a5bfc2b7e8a3b4e6b49be8a5bfe8a8aae5958fe58fb0e781a3&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/2022%E5%B9%B4%E5%8D%97%E8%A5%BF%C2%B7%E8%A3%B4%E6%B4%9B%E8%A5%BF%E8%A8%AA%E5%95%8F%E5%8F%B0%E7%81%A3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wiki 概要&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;2022年南希·佩洛西访问台湾，又称佩洛西访台，是指美国第52任众议院议长南希·佩洛西于2022年访问亚洲国家之旅，其间，访问台湾的行程。&lt;/p&gt;
&lt;p&gt;由于美国众议院议长被视为美国第三号人物，并计划访问台湾，日期短期内接近8月1日的中国人民解放军建军纪念日，长期内接近中国共产党第二十次全国代表大会、2022年美国选举及2022年中华民国地方公职人员选举。中华人民共和国方面，其政府提出强烈抗议，派遣海军驱逐舰部队到达台海东北海域，动员山东舰与辽宁舰两个航空母舰战斗群，东部战区与南部战区分别在东海与南海开展大规模实兵实弹演习。美国方面，派遣罗纳德·里根号航空母舰战斗群抵达台海周边护卫佩洛西可能的访台行程，并调遣多批次侦察机与空中加油机至驻日美军嘉手纳空军基地待命。&lt;/p&gt;
&lt;p&gt;中国国家主席习近平与美国总统乔·拜登在访问前曾进行视频会晤，内容涉及台湾问题。台湾与国际媒体透露佩洛西议长及众院访问团将于2日抵达台北松山机场，过夜后将在3日会见中华民国总统蔡英文等政府高层。有观点认为此次佩洛西访问台湾有可能造成自1996年台湾海峡导弹危机，26年来新一次的台湾海峡危机。&lt;/p&gt;
&lt;h2 id=&#34;08-11&#34;&gt;08-11
&lt;/h2&gt;&lt;p&gt;本日ほぼ確定となり、この間の話題騒ぎはついに終息。様々な海軍演習や、知乎も熱意をもって毎日のようにランキングを更新していたが、語られていたのは全てこの一件だった。編集部の皆様、お疲れ様でした。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Windowsプラットフォームでフォルダのサイズを迅速にカウントする</title>
        <link>https://ttf248.life/ja/p/windows-platform-quick-folder-size-statistics/</link>
        <pubDate>Mon, 01 Aug 2022 19:54:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-platform-quick-folder-size-statistics/</guid>
        <description>&lt;p&gt;Linuxプラットフォームは非常にシンプルです。「du -sh *」という一行のコードで済みます。Windowsはどうでしょうか？ディスクが複数あり、クリーンアップしたいのですが、ファイル数が多くて、システム標準の「リソースマネージャー」でフォルダサイズを統計すると、速度が遅くて諦めそうになります。&lt;/p&gt;
&lt;h2 id=&#34;everything&#34;&gt;Everything
&lt;/h2&gt;&lt;p&gt;Windows 平台で開発をしている方で、Everything を実際に使ったことがない方もいるかもしれません。検索速度はシステム標準のファイルエクスプローラーを圧倒的に上回ります。システムレベルでファイルの高速インデックス作成がサポートされているので、同様のツールを見つけることができるはずです。ファイルサイズも同時に統計できます。&lt;/p&gt;
&lt;h2 id=&#34;wiztree&#34;&gt;WizTree
&lt;/h2&gt;&lt;p&gt;公式サイト：&lt;a class=&#34;link&#34; href=&#34;https://www.diskanalyzer.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.diskanalyzer.com/&lt;/a&gt;
通常のインストールモードまたはグリーン版を解凍して実行
高速、データ表示タイプが豊富で、左側はツリー状図モード、右側にはファイルの種類が表示され、もちろんグラフィカルな表示も、ソフトウェアの下欄にあります。&lt;/p&gt;
&lt;h2 id=&#34;spacesniffer-2023年不再维护更新&#34;&gt;SpaceSniffer (2023年不再维护更新)
&lt;/h2&gt;&lt;p&gt;ソフトウェア公式サイト：&lt;a class=&#34;link&#34; href=&#34;http://www.uderzo.it/main_products/space_sniffer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.uderzo.it/main_products/space_sniffer/&lt;/a&gt;
操作は非常に簡単です。対応するドライブを選択すると、ソフトウェアはグラフィカルな方法でフォルダのサイズを表示し、サイズが大きいほど画像内の対応する行列も大きくなります。その他の操作は、自分でクリックすれば理解できます。ファイル条件フィルタリングをサポートしています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルサイズのフィルタリング&lt;/li&gt;
&lt;li&gt;ファイルの日付フィルタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;space_sniffer.gif&#34; &gt;基本的な使い方&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;advance.gif&#34; &gt;高度な使い方&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://moe.best/software/spacesniffer.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://moe.best/software/spacesniffer.html&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>ウェブページのスタイルシート（CSS）をコピーする方法：要素の検証</title>
        <link>https://ttf248.life/ja/p/how-to-copy-webpage-css-element-inspect/</link>
        <pubDate>Sun, 31 Jul 2022 23:36:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/how-to-copy-webpage-css-element-inspect/</guid>
        <description>&lt;p&gt;静的ブログのテーマは、主流が海外製のテンプレートで、調整や修正を行うことが多く、中国語コンテンツのレイアウトにはあまり考慮されない。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;半月ほど前、ブログのスタイルシートを調整しました。長年バックエンドサービスの開発をしているのですが、フロントエンドは純粋な初心者です。前後とも半日かけて苦戦した結果、デザインがなかなか良くありませんでした。突然閃いて、よく読む技術ブログ（infoq、开源中国など）のデザインが良いなと思い、参考にしてみようと思いました。ソースコードを拝見し、関連する要素を特定しようとしましたが、霧だらけでした。&lt;/p&gt;
&lt;p&gt;フロントエンドの友人がこの部分を見ると笑ってしまうかもしれません。指定された要素を特定することも理解できません。理解する必要はありません。週末は時間があるから、立ち止まって考えればいいのです。以前、&lt;code&gt;python&lt;/code&gt; で爬虫（ウェブスクレイピング）を書いたときには、似たようなものを使っていたように思います。&lt;/p&gt;
&lt;h3 id=&#34;要素検査&#34;&gt;要素検査
&lt;/h3&gt;&lt;p&gt;そうです、ブラウザに標準搭載されている要素検査ツールを使って、スタイルシートをコピーしたり、指定した要素の位置を特定したりするのは、あっという間です。&lt;code&gt;selector&lt;/code&gt; で要素を特定したり、&lt;code&gt;hugo&lt;/code&gt; で &lt;code&gt;user define css&lt;/code&gt; を新規作成したりすることも可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素のコピー&lt;/li&gt;
&lt;li&gt;outerHTML のコピー&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;セレクタのコピー&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;JS パスのコピー&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;スタイルのコピー&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;XPath のコピー&lt;/li&gt;
&lt;li&gt;完整的 XPath のコピー&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Windowsプラットフォームで超大型ファイルを編集する：EmEditor (テキストエディタ)</title>
        <link>https://ttf248.life/ja/p/windows-platform-edit-large-files-emeditor-text-editor/</link>
        <pubDate>Sun, 31 Jul 2022 23:21:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-platform-edit-large-files-emeditor-text-editor/</guid>
        <description>&lt;p&gt;上海国安数据库事件、在黑客圈子内闹得沸沸扬扬，不知真假，过两年如果还记得，再回头看看。根据以往的经验，更新了一波本地的社工数据库资料，看到一个巨型SQL文件：17.9G，一般的文本编辑器，预览都是个问题，更别说打开了，和网友闲聊，提到了：EmEditor。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;公式サイト：&lt;a class=&#34;link&#34; href=&#34;https://www.emeditor.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.emeditor.com/&lt;/a&gt;
週末に時間を割いて試してみたところ、非常に便利で、デザイン面でも大ファイル編集をサポートしており、十分なメモリがあれば、ファイル全体をメモリ上に読み込んで検索や編集速度が非常に速く、分割機能も利用できます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>上海鴛鴦鍋封城 (Shànghǎi yuānyāng guō fēngchéng)

This is a direct translation, as &#34;Shanghai Yuanyang Guo Fengcheng&#34; refers to a specific historical event.  It literally means &#34;Shanghai Yuanyang Pot Siege.&#34;</title>
        <link>https://ttf248.life/ja/p/shanghai-yuanyang-pot-sealed/</link>
        <pubDate>Wed, 30 Mar 2022 23:03:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/shanghai-yuanyang-pot-sealed/</guid>
        <description>&lt;p&gt;リーダーシップチームは、先週2日間で上海が封鎖されることはないと死に際の尊厳を保ちながら主張していた。上海は重要だからだ。しかし、現状に屈し、あるいは自分の地位を守るために、対岸から隔てるような行動に出たのだ。まず黄浦江（ファンパール・カン）の対岸をしばらく閉鎖し、その後江（ガン）側も封鎖するという流れになった。&lt;/p&gt;
&lt;h2 id=&#34;封鎖&#34;&gt;封鎖
&lt;/h2&gt;&lt;p&gt;幼い頃にSARS（重症肺炎）を経験しており、あまり記憶に残っていません。その後、関連資料を見たことで、潜伏期間が短く、全国的な蔓延が起こる前に終息したことを知りました。小学校に通っていた頃、毎日授業が終わるのがとても早くて、教室には消毒液の匂いが漂っていました。&lt;/p&gt;
&lt;p&gt;20年末から現在まで、新型コロナウイルス感染症はほぼ3年になります。在外労働者も慣れており、マスクを着用すべき時はマスクを着用しています。上海での波及感染が繰り返され、当初は香港からの輸入型感染症で、その後、国境を越えたゲートを通じて深圳に拡散し、上海では香港の一波の輸入型感染症の影響によるものです。政府は最後に発表した通告で、隔離施設の保護対策が不十分であったために感染拡大につながったと説明しています。変異株のウイルス毒性は弱まりましたが、伝染速度は速くなりました。隔離施設の換気システムを通じて拡散しました。当初は症状が重くなく、制御することができました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人は自信を持つものだ。上海のリーダーたちも同じです。彼らは格画的な地域管理を私たちに選択し、精密な防控を行います。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;封鎖-1&#34;&gt;封鎖
&lt;/h2&gt;&lt;p&gt;ご覧のとおり、新たに発生した感染者数はすでに2万人を突破し、逼迫した状況から封鎖を実施せざるを得なくなりました。重要な点として、封鎖という言葉を使用せず、以前の記者会見で「封城」という言葉を使わなかったことが挙げられます。これは、最後の顔面（みかじめ）を守ろうとしたものと解釈できます。&lt;/p&gt;
&lt;h2 id=&#34;買い物&#34;&gt;買い物
&lt;/h2&gt;&lt;p&gt;外食産業は、インターネットが作り出した新興産業です。その核心は、誰かがあなたのために食材を配達する必要があること。しかし、パンデミックにより広範囲で都市封鎖が行われたことで、店舗が営業できるものの、誰もが配達を受け取ることができず、サプライチェーンの最後のリンクが欠けてしまいました。外の人には理解しにくいかもしれませんが、国際的な大都市である上海が、人々が集まって買い物に行くのは珍しいことではありません。考えてみると、多くの人は地方から仕事のために住んでいるだけで、賃貸アパートに住み、普段は会社の食堂で食事をしたり、外のレストランで食事をしたりすることがほとんどです。外出路が閉ざされた場合、条件を満たしている店舗は買い物を始めます。この都市封鎖に関する発表は事前に通知されておらず、人々は日常的に十分な食料や野菜を備蓄していませんでした。そのため、ビデオに登場するような一斉の買い物が発生し、その状況下での集団発生が、再び感染を拡大させました。&lt;/p&gt;
&lt;h2 id=&#34;業界&#34;&gt;業界
&lt;/h2&gt;&lt;p&gt;主な業務はIT業界に関連しており、今回のコロナ禍で自宅勤務を経験し、その影響について感じました。2019年の春には、自宅でほぼ1ヶ月間過ごし、往復で切符の変更手続きを10回以上行い、いつ深圳に戻れるのか全く見通しの立たない状況でした。飲食業界や観光業、あるいは多くのサービス業の人々が、この数年間にどのような経験をされたのか想像もできません。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>お金を稼ぎたいときに</title>
        <link>https://ttf248.life/ja/p/when-you-want-to-make-money/</link>
        <pubDate>Sun, 27 Mar 2022 03:23:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/when-you-want-to-make-money/</guid>
        <description>&lt;p&gt;一般人都是社交动物，没错，你是个人，也是一个直立行走的动物，附带很强的社交属性；有自卑心、虚荣心，社会一直在变化，也在一直侵蚀你的&lt;strong&gt;平淡感&lt;/strong&gt;。我们不讨论那些伟人，那些甘愿为了社会、为了国家燃烧自己。&lt;/p&gt;
&lt;h2 id=&#34;今の私&#34;&gt;今の私
&lt;/h2&gt;&lt;p&gt;平均賃金、あるいは故郷の賃金を見ると、今の私の収入は明らかに平均レベルを大きく上回っています。それにもかかわらず不満があると言えるのでしょうか？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一百万稼げたら次は一千万円、二千万円…と考えるのは常人のことです。人は自分の内なる声に耳を傾けるべきです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;今の私-1&#34;&gt;今の私
&lt;/h2&gt;&lt;p&gt;その赤い目元のものは、より楽に稼ぐ方法：ショート動画のことです。&lt;/p&gt;
&lt;p&gt;業界への入行は皆が知っていることではありません。あなたが目にするのはショート動画ですが、それには撮影や文章作成といった裏側の努力があります。しかし、人それぞれには天才的な夢があり、私はその業界に向いているし、生まれながらにしてそれが私の適性だと信じています。&lt;/p&gt;
&lt;h2 id=&#34;接触開始&#34;&gt;接触開始
&lt;/h2&gt;&lt;p&gt;たくさんの動画を見てきました。自分の頭で少しずつ多くのシーンを分析すると、明らかにプロの編集手法が使われており、強い映画的な色彩を持っています。つまり、彼らは皆、科目を学んだ出身です。もちろん、草根派が爆発的に人気が出るような論理もありますが、それは一般の人には当てはまりませんよね？
抖音上では、動画をどのように作るか教える動画もたくさんあります。その時、人間が清醒に目覚めるのです。もし本当に稼げるのなら、なぜ彼らは自分自身で作り、他の人に教えないのでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;反社会的なレコメンドアルゴリズム&#34;&gt;反社会的なレコメンドアルゴリズム
&lt;/h2&gt;&lt;p&gt;以前、抖音のアルゴリズムが映画のクリップやアニメのクリップを勧めてくる際に、見ているうちに面白いと感じることがありました。しかし、私が抖音がどのように稼ぐのかについて調べたとき、彼らは様々な教育ビデオをノンストップで勧めてきて、私のレコメンドストリーム全体を埋め尽くしました。自分自身もIT業界で働いているため、この状況に「アルゴリズムのオタクたちの大脳は本当に問題があるのではないか」「こんな風に勧めるのは、私達を愚かに見なしているのか、それともあなた自身が愚かに見なしているのか」という疑問を感じました。重要なのは、あなたが抖音で稼ぐ方法に関するビデオを、様々な角度から、あらゆるジャンルからノンストップで勧めてくることです。この稿は、凌晨3時に書いたものであり、本来書くつもりはありませんでしたが、このようなビジネスモデルがどれくらい持続できるのか、そしてあなた方はどれくらいの時間を奪い続けることができるのか疑問に感じました。&lt;/p&gt;
&lt;h2 id=&#34;活明白&#34;&gt;活明白
&lt;/h2&gt;&lt;p&gt;人に何かを教えるときは、一套一套のやり方を提示し、自分自身で行動するときは、どうしても制御できない。これがまさに笑話だ。純粋な技術ブログ執筆者ではないので、いくつかのことは国内に発信していなかったが、ここでは随意的つぶやきをする。もし有一天、封鎖されたとしたら、それは別の場所を探せばいいだろう。抖音を全く使っていないとは言えないだろう。少なくとも、現在ではリアルタイムニュースの伝達、国家の政策プロパガンダなど、積極的に協力している。毕竟、我国においては、党に反することのできないからだ、そうだね？
そうした時、昔の学生時代を思い出す。本当に人生の意味を見つけられなくなったとき、静かに一冊の本を読むだけで十分だ。今の時代には、心を落ち着けて静かに本を読むことができる人は、果たしてどれくらいいるのだろうか。&lt;/p&gt;
&lt;h2 id=&#34;付録&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;ここでは、科学技術の進歩にも感謝したいと思います。もしあなたがこの行を見ているなら、この記事全体が非常に口語的であることを発見することでしょう。そして私自身は、これを読みふけきながら書き続けていったのです。普段使っている入力法は、検索狗（すこごう）入力法で、8年以上も使ってきました。しかし、音声入力に関しては、専門的であるのは讯飞（しんぴー）です。&lt;/p&gt;
&lt;p&gt;2022年の記事の番号が002に変更された理由ですが、これは夢でした。今年の記事数を100本に超えるという目標を掲げたのです。もちろん、「記事」とは言い切れません。記録といったところでしょうか。吾日三省吾身（われひさんぜんごしん）ですね。あなたはきっと何かを思いつくことでしょう、そうですよね？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>単なる簡単なことに追加のコードコピーボタンを実装する</title>
        <link>https://ttf248.life/ja/p/add-copy-button-for-simple-task/</link>
        <pubDate>Fri, 25 Feb 2022 01:23:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/add-copy-button-for-simple-task/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;「ouuan」を４時間も調べて、その時この文章を見ていると、まだ面白がっていて、どうしてこんなに時間がかかったのか不思議だった。最後に時間を調べると３時間だった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは2022年の年初に書いた最初の記事で、扱うべきことは単純なもので、タイトル通り完全に同じ内容（当時としてはまだ若かった私）だと考えて、&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;作业&lt;/a&gt;をそのままコピーしてブックマークに入れて、しばらく放置していました。ようやくこの件を思い出したのです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hugo&lt;/code&gt;に移行する際、プラグインが少なすぎて、コードをコピーできず、多くのメモを印象派からブログに移行する際に、コードをコピーする作業が煩雑になり、私の水面下ブログのモチベーションを著しく低下させてしまいました。&lt;/p&gt;
&lt;h2 id=&#34;序章&#34;&gt;序章
&lt;/h2&gt;&lt;p&gt;まず、原作者の稿をじっくりと見直し、通読し、作者紹介も確認します。うわー、すごい大佬だ！清華大学で学んでいる学部生で、昔からコンピュータに触れているんだ。なるほど、クールなやつだ。まずはこのブログを確認し、自分が何をすべきか全く覚えていない。ついでに作者のGitHubリポジトリをチェックする。この修正された「even」テーマは今のよりずっと見栄えが良く、新しい機能もたくさんある。早速取り掛かり、関連コードをマージしよう。
&lt;img src=&#34;https://ttf248.life/p/add-copy-button-for-simple-task/2022-02-25-02-08-19.png&#34;
	width=&#34;215&#34;
	height=&#34;150&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;344px&#34;
	
&gt; &lt;img src=&#34;https://ttf248.life/p/add-copy-button-for-simple-task/2022-02-25-02-08-40.png&#34;
	width=&#34;217&#34;
	height=&#34;167&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;新機能記事の履歴表示関連提出記録の確認&#34;&gt;新機能：記事の履歴表示、関連提出記録の確認
&lt;/h3&gt;&lt;p&gt;効果はなかなか良く、記事末尾にスクロールすることで体験できます。
マージ前に作者の元のリポジトリの履歴を確認していなかったので、簡単なマージで済むと思っていましたが、最終的に大量のコードをマージし、その中に衝突やN回の巻き戻しが発生し、無脑覆盖（強制上書き）を行いました。それはすべてフロントエンドとレンダリングのテンプレートコードであり、私が使用するものに合わせました。
リポジトリ：&lt;a class=&#34;link&#34; href=&#34;https://github.com/TianlongXiang/hugo-theme-even&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/TianlongXiang/hugo-theme-even&lt;/a&gt;
中国語の罠です。&lt;code&gt;git&lt;/code&gt;でこのパラメータを調整しないと、生成される履歴リンクが現在の記事の&lt;code&gt;commit hash&lt;/code&gt;を取得できず、履歴リンクの生成に失敗します。完全な記事履歴を生成する際も、自動統合スクリプトを修正する必要があります。必ず現在のリポジトリ全体の履歴をプルしてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/TianlongXiang/TianlongXiang.github.io/commit/0d860154de9b335ed88a57d62eedd4b6e3ccbeee&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;feat: 完全に GitHub リポジトリをプルして、記事の最終更新履歴を動的に更新&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/TianlongXiang/TianlongXiang.github.io/commit/1b5d719966737f16a8c67880370dc2722adea0b3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;chore: パスに日本語が含まれているため、hugo GitInfo でこの設定を有効にする必要がある&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;name: Build Github
run: git config --global core.quotePath false &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;スタイル調整&#34;&gt;スタイル調整
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;サイトコンテンツの幅を調整します。以前のデザインはモバイルとPCの両方に対応していましたが、実際にスマートフォンでの閲覧はほとんどなく、私はPCで確認しています。&lt;/li&gt;
&lt;li&gt;目次バーを自動伸縮するように変更します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ouuan&lt;/code&gt;のコード記録を参考に半時間以上見てみても、コピーボタンの追加方法がよく分からなかった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;時光穿梭，一月之后，又想到这事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;今回この課題が理解できなかったため、別の課題をコピーし、必ずしも理解できるものにしました。検索で見つけた結果は、意外にも&lt;code&gt;hugo&lt;/code&gt;公式フォーラムにコードのコピーボタンを追加する方法についての投稿がありました。そこを拝見すると、論理が明確でわかりました。混乱していた状況でしたが、戻ってサイトを見ると&lt;code&gt;even&lt;/code&gt;レンダリング生成したコードブロックのスタイルと資料の説明が異なり、この部分は少し複雑です。簡単に記録しておきます。
基本的にはフロントエンド開発は理解していないため、わからない箇所はブラウザの「要素を検査」ツールを使ってコードを分析し、右側のスタイル情報に頼って徐々に論理を理解していきました。「JavaScript」についてはコンソールでログを出力しました。最初は多くのことがわからず、落ち着いて、少しずつ論理を整理・分割していき、必ずや解決策が見つかります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;ノードが複数存在し、ここでは個々のコードブロックを指します。テーマが自動的に行番号を表示しており、その結果コピーボタンが2つ表示される&lt;/li&gt;
&lt;li&gt;テーマの組み込みされたコードハイライト機能を無効化したいのですが、このテーマの設定はよくわかりません。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo&lt;/code&gt;公式ドキュメントで資料を参照し、半ば理解しながら、コードハイライトを制御できる「markup」設定があることを知りました。&lt;/li&gt;
&lt;li&gt;設定ファイルを調整してもなかなかうまくいかず、レンダリング結果と期待値が異なっていた&lt;/li&gt;
&lt;li&gt;このような設定の「pygmentsOptions」を発見し、さらに資料を調べて設定を調整しました。まず行番号を削除する&lt;/li&gt;
&lt;li&gt;カスタムCSSスタイルシートとカスタムJavaScriptスクリプトを設定しました。&lt;/li&gt;
&lt;li&gt;結局これだけの作業をしたので、この文を見つけたときには、なぜこんなに時間がかかったのか笑ってしまいました。実際には3時間でした。最後に時間をを見ると：3時間。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;参考リンク&#34;&gt;参考リンク
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ouuan.github.io/post/from-hexo-to-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/configuration-markup#highlight&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/configuration-markup#highlight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>私たちは人生の限り、何を追い求めていたのでしょうか。</title>
        <link>https://ttf248.life/ja/p/what-we-seek-throughout-life/</link>
        <pubDate>Tue, 31 Aug 2021 21:09:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/what-we-seek-throughout-life/</guid>
        <description>&lt;p&gt;王羲之は言う：「妻との交わりにおいては、上下の人々を思うように、あるいは自分の胸中に納め、世の理を悟る言葉を一つの部屋に集める。あるいは、彼女への信頼を託し、その形骸から離れて放浪する。 」&lt;/p&gt;
&lt;p&gt;人生の一生涯、如昙花一現。草木の春緑枯榮、曦月東升西落。
偏偏人生欲望却有很多。&lt;/p&gt;
&lt;p&gt;幼少の頃、溪頭で臥剥蓮蓬を忙しめ、東風に紙鸢を放ち、急ぎ追う黄蝶も追いかけ、傍桑影で瓜を種付け、帰ってきては飯が食い、黄昏時に蓑衣を脱ぐことなく月明かりの下で眠る。&lt;/p&gt;
&lt;p&gt;大人になったら、金榜題名することを願い、佳人との同伴を願う、財産が絶えず増えることを願う、地位が上がり続けることを願う、高朋の席に満ちることを願う、夜通し笙歌を奏でることを願う。&lt;/p&gt;
&lt;p&gt;老いては健康長寿を望み、童仆が歓迎され、稚子が門前に候い、一盤の棋、一知己、一壺の酒、一庭院を持ち、天倫に安らぐ。&lt;/p&gt;
&lt;p&gt;世人は慌ただしく、ただ碎銀几兩を得ようとするだけだ。しかし、その碎銀几兩こそが、世間の万種な惆悵を解くことができるのだ。&lt;/p&gt;
&lt;p&gt;多くの人々が生活のために苦闘し、人生の意味を追い求める時間があるのだろうか？&lt;/p&gt;
&lt;p&gt;実は人生は、草木や日月のように、欲望の輪廻を体験するほんの一瞬のことだ。&lt;/p&gt;
&lt;p&gt;意味を理解できずに「天地に蜉蝣（かぶつ）と、海に粟（あわ）の一つ」と感じたり、「生は一瞬、長江は無限」と嘆き悲しんだりすることもあるだろう。意味を理解すれば、出会うものに喜び、一時的に自分のもとに与えられたものを大切にし、快楽を知って自足し、老いの到来を悟ることなく生きることができる。&lt;/p&gt;
&lt;p&gt;金銭や名誉を追い求めることもできるし、詩酒花茶（しゅせいか ちゃ）を楽しむこともできる。江上の清風（こうじょうの せいふう）を求めたり、山間の明月（さんげんの めいづつ）を眺めたりすることもできるだろう。&lt;/p&gt;
&lt;p&gt;しかし、結果に過度に執着する必要はない。結果は必ず過ぎ去ってしまうからだ。&lt;/p&gt;
&lt;p&gt;人生の終わりに辿り着くとき、世の中の喜びや悲しみ、怒りや哀れみを最大限に経験し、生老病死（せいろうぼうし）を味わうことが大切だ。&lt;/p&gt;
&lt;p&gt;『大魚海棠』の言葉が好きだ。&lt;/p&gt;
&lt;p&gt;「我々の人生は短い。失われてしまうのだから、大胆に愛することもあるだろう。山を登ることもあるだろう。夢を追いかけることもあるだろう。答えのない多くのことに、大胆になることを。」&lt;/p&gt;
&lt;p&gt;私は『蘭亭集序』と『赤壁賦』を大変気に入っています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;過去の賢者の興亡に心を動かされることしばしば、もしそれが一つの契機となれば、未だ嘆き悲しむこともなく、そのことを心に留めることができたのに。しかし、結局は一生を死として笑い飛ばすことは虚偽であり、斉彭の犠牲はただの戯言に過ぎないことを知っている。後世が今の私を見れば、今の私が昔のあなたを見ているように思われるだろう。ああ、嘆かわしい！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>盈透证券株式コード特殊フォーマット説明 (Yingtousheng Guqu Code Tokubetsu Fomat Setsumei)</title>
        <link>https://ttf248.life/ja/p/interactive-brokers-stock-code-format-explanation/</link>
        <pubDate>Mon, 30 Aug 2021 17:35:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/interactive-brokers-stock-code-format-explanation/</guid>
        <description>&lt;p&gt;まれで、時間が経つと必ず遭遇するだろう。関連株式コード：ベアークシル (Berkshire)&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;一部株式コードの名称に &lt;code&gt;.&lt;/code&gt; やその他の特殊文字が含まれている場合、それを盈透 (IB) に報送する際に、株式コード名の変換が必要となります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BRK/B -&amp;gt; BRK B&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;本文-1&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;盈透証券の場合、分析が可能で、変換のルールは固定されているため、コード実装で実現できます。ルールが固定されていない場合は、通常システム内部で対応するマッピング関係を保存し、ビジネスオペレーション担当者が定期的に更新します。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ibkr.info/article/462&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Berkshire Hathaway Class B Shares のシンボルを TWS に入力する方法は？&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>困惑している / 悩んでいる / 迷っている</title>
        <link>https://ttf248.life/ja/p/lost-and-confused/</link>
        <pubDate>Thu, 26 Aug 2021 18:01:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/lost-and-confused/</guid>
        <description>&lt;p&gt;人生のある段階で、人は迷茫に陥ることがあります。自分が本当に何を求めているのか分からず、仕事の日常に埋もれ、仕事の意味を追究しなくなってしまうのです。卒業した頃を回想すると、胸には熱い憧憬が溢れていました。あの頃の私は、毫不犹豫にこう言いました。「コードを書くことを望んでいる。人々を驚かせる、超絶なコードを。」しかし、今の仕事では、より多くの時間をビジネスレベルの問題に取り組み、その多くは業界発展に伴う恩恵によるものです。&lt;/p&gt;
&lt;p&gt;生活観については、結婚や出産、家を持つのといったことを自分の考えに入れていません。頭の中にはほとんど何もありません。ただ今を楽しみます。週末になると、静かにゲームをするのが好きで、よく一日中家にこもり、自分の小さな世界に浸っています。&lt;/p&gt;
&lt;p&gt;人生は、結局は自分が愛し、全力を尽くせる何かが必要なのです。&lt;/p&gt;
&lt;h2 id=&#34;住宅購入&#34;&gt;住宅購入
&lt;/h2&gt;&lt;p&gt;前々年（まえまえねん）から、自分だけの家を買うために貯金を努力していました。毎日、その目標のために細かく計算をしていました。しかし、住宅価格が相変わらず上昇していくのを見て、最初は不安や不満でしたが、最終的には麻痺（まひ）してしまい、たとえ家を買っても、ただ自分に重い荷（かば）を背負うだけだと感じて、その考えを諦めました。&lt;/p&gt;
&lt;h2 id=&#34;貯金&#34;&gt;貯金
&lt;/h2&gt;&lt;p&gt;当初，存钱是为了实现一些小目标，比如组装一台性能强劲的台式机、购买一直心仪已久的相机，或是来一场说走就走的旅行。但现在，我以一种更随意的态度对待存钱这件事，在日常开销上不再有太多顾虑，看到想吃的东西就去吃，对新奇的事物也能大胆尝试。&lt;/p&gt;
&lt;p&gt;貯金は、当初はちょっとした目標のために行っていた（例えば、高性能なデスクトップPCを組んだり、ずっと欲しかったカメラを買ったり、気軽に旅行に行ったりすること）。しかし、今はもっとリラックスした態度で貯金をしている。日々の生活費には気を遣うことが少なくなり、食べたいものは思いついたら食べるし、面白いものを見つけたら遠慮なく試すことができるようになった。&lt;/p&gt;
&lt;h2 id=&#34;帰宅&#34;&gt;帰宅
&lt;/h2&gt;&lt;p&gt;ついに、自分の心の奥底で一番願っていたのは、ただ故乡へ帰って様子を見ることだった。特に何か特別なことをする必要もない。ただ、あの馴染みの場所に帰り、家という温かさや静けさを感じてみればいいのだ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>恒生期貨の基本概念 (Kōsekki kyūka no kihon ganongō)</title>
        <link>https://ttf248.life/ja/p/hong-kong-futures-basics/</link>
        <pubDate>Wed, 18 Aug 2021 10:54:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-futures-basics/</guid>
        <description>&lt;p&gt;金融市場が絶えず変化する中、投資家たちは投資収益を増やすために、より効果的な投資ツールを模索し始めています。投資家のニーズに応えるため、香港取引及決済所有限公司（香港交易所）は、香港証券取引所に上場している株式先物合約のシリーズを発表しました。これらの合約に代表される株式は、香港交易所の全資傘会社である香港聯交所（連教所）で流通量が高く、取引も活発です。株式先物を投資することで、個別企業の業績に加え、デリバティブ市場が提供するショートセリングやレバレッジ効果などの利便性も享受できます。&lt;/p&gt;
&lt;p&gt;株式先物が代表する株式は、その業界の主要企業であるため、投資家は特定の産業のパフォーマンスが全体的な株式市場よりも優れているか劣っていると判断した場合、それに対応して当該産業の株式先物を選択することができます。&lt;/p&gt;
&lt;h2 id=&#34;基本定義&#34;&gt;基本定義
&lt;/h2&gt;&lt;p&gt;先物契約は、将来の特定日に特定価格（清算値）で買いまたは売り、その価格に相当する一定数量（契約単位）の金融価値を取引する買売り合約です。
&lt;strong&gt;すべての株式先物契約は現金決済で行われ、満期時に株式の納品はありません。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;合約満了&#34;&gt;合約満了
&lt;/h3&gt;&lt;p&gt;契約満了時、受託価格と最終清算価格の差額に合約倍数を掛けた金額が、受託者の預金口座に控除されます。
最終清算価格とは、関連する株式が最終取引日の終値としてシンジカ所の公式発表した価格を指します。
株式 futures の投資家が契約満了前に建玉を決済したい場合、元々ショートポジションを取っていた投資家は、単に１枚の期货合约を購入すれば良いだけであり、ロングポジションを取っていた投資家は、１枚の期货合约を売却する必要があります。&lt;/p&gt;
&lt;h3 id=&#34;担保金&#34;&gt;担保金
&lt;/h3&gt;&lt;p&gt;先物取引を行う際、買い手と売り手双方には、契約履行の保証として、それぞれ一定額の基本保証金を納付する必要があります。決済所在は、各日の始末後、未決済の先物を市場価格で損益を計算し、投資家の保証金口座から控除する根拠とします。市場が悪化し、投資家が損失を被り、その結果保証金が指定水準を下回った場合、取引所は投資家に指定された期間内に追加資金を充当させ、保証金を元の基本保証金水準（つまり追加購入）に維持するように求めます。&lt;/p&gt;
&lt;h2 id=&#34;メリット&#34;&gt;メリット
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;取引手数料が安い：各株式先物契約は数千株に相当し、売買契約の委託手数料は枚数によって変動するため、相対的に契約価値に対するコストは非常に低い。&lt;/li&gt;
&lt;li&gt;空売りが容易：投資家は株式先物を簡単に空売りできるため、暴落時に空売りすることで利益を得ることができる。&lt;/li&gt;
&lt;li&gt;庄協議施：市場の流動性を確保するために、香港証券取引所は市場の庄家に対し、指定されたスプレッド範囲内で買い価格と売り価格を同時に提示させ、株式先物市場の流動性を維持する。&lt;/li&gt;
&lt;li&gt;レバレッジ効果：投資家は株式先物契約の売買に、契約価値の少部分のみの保証金を支払うことができるため、ヘッジや取引がコスト効率的に行える。&lt;/li&gt;
&lt;li&gt;海外投資家の為替リスクを軽減：株式先物は海外投資家が質の高い国内株式への投資手段を提供し、売買契約の保証金のみを支払うことで、海外投資家が負担する為替リスクを大幅に軽減する。&lt;/li&gt;
&lt;li&gt;電子取引システムによる取引：株式先物契約は、香港証交易所が所有する電子取引システムを通じて取引される。すべての注文は価格と時間の順で実行され、即座に買い値、売り値、成約価格が表示されるため、市場の透明度は最高水準にある。&lt;/li&gt;
&lt;li&gt;決済会社による履行保証：株式先物契約は、香港証券取引所が所有する香港期货结算有限公司（決済会社）によって登録、決済され、履行保証を提供する。決済会社がすべての未決済契約の相手方であるため、取引参加者間は相手方リスクを負う必要がない。ただし、決済参加者は顧客に対する財務責任を保証しないため、投資家は经纪人を通じて取引する際には注意が必要である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;庄家制度&#34;&gt;庄家制度
&lt;/h3&gt;&lt;p&gt;市場参加者または個別株式・商品先物の登録市場の庄家となり、指定された最大差金幅内で買い価格と売り価格を同時に提示します。取引所参加者およびその顧客は、個別株式・商品先物には市場庄家の登録による売買差金が提供されない場合があり、その売買が市場の取引単位に基づくことに注意する必要があります。&lt;strong&gt;投資家は、市場庄家が登録されていない株式・商品先物の売買には流動性リスクが伴う可能性があることを留意し、上場前に慎重に検討する必要があります。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;株式先物取引のリスク&#34;&gt;株式先物取引のリスク
&lt;/h2&gt;&lt;p&gt;株式先物はハイリスクな取引であり、株式先物を売買することによって生じる損失は、新規建倉時に納付した保証金を超える可能性があり、短期間にさらに保証金を支払う必要が生じる場合があります。支払いができず、保証金の差し押さえが行われた場合、貴方の持ち株やポジションは強制的に決済（平倉）され、その際の損失は全て貴方ご自身が負担することになります。したがって、株式先物取引のリスクを十分に理解し、ご自身の状況に合っているかどうかを慎重に判断する必要があります。取引を行う前に、ご自身の財政状況および投資目標を考慮し、ブローカーまたはファイナンシャルアドバイザーにご相談の上、株式先物およびオプション契約の購入が適しているか確認することをお勧めします。&lt;/p&gt;
&lt;h2 id=&#34;コメントの調整&#34;&gt;コメントの調整
&lt;/h2&gt;&lt;p&gt;倘正股公司以供股或派发红股等形式更改其股本结构，将会导致股价在除净权益时或生效日期时出现改变，而未平仓合约亦可以因而受到影响。
如果其他情况不变，股东持有的组合价值并不会再除净日改变，但对股票期货的买家或者持有人来说，情况则有所不同，除非期货合约中作出适当的调整。如果没有改变立约成价，而股票期货的合约乘数又保持不变，股价的调整将会对股票期货持仓的价值造成无理及不公平的影响。
结算所决定调整比率时，以维持期货合约的公平价值为原则，并只会在出现重大改变时作出调整。香港交易所会公布调整的详情，而交易所参与者需告知客户有关变化。&lt;/p&gt;
&lt;h2 id=&#34;株式先物契約概要&#34;&gt;株式先物契約概要
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hong-kong-futures-basics/%E8%82%A1%E7%A5%A8%E6%9C%9F%E8%B4%A7%E5%90%88%E7%BA%A6%E6%A6%82%E8%A6%81.png&#34;
	width=&#34;1416&#34;
	height=&#34;632&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;株式先物契約概要&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;537px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;情報提供者コード&#34;&gt;情報提供者コード
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hong-kong-futures-basics/%E8%B5%84%E8%AE%AF%E4%BE%9B%E5%BA%94%E5%95%86%E4%BB%A3%E7%A0%81.png&#34;
	width=&#34;1418&#34;
	height=&#34;820&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;情報提供者コード&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;415px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/products/listed-derivatives/single-stock/stock-futures?sc_lang=zh-cn#list_of_stock_futures&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;香港交易所 - 衍生产品/个股/股票期货&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/-/media/HKEX-Market/Products/Listed-Derivatives/Single-Stock/Stock-Futures/Stock-Futures-Information-Sheets/HKEX_Stock_Futures_SC.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKEX_Stock_Futures_SC.pdf&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>資本の独占とオンライン教育業界の終焉</title>
        <link>https://ttf248.life/ja/p/capital-monopoly-and-the-fall-of-online-education/</link>
        <pubDate>Wed, 28 Jul 2021 14:59:08 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/capital-monopoly-and-the-fall-of-online-education/</guid>
        <description>&lt;p&gt;最近の2日間で株式市場は大幅に下落し、最近参入した新規投資家たちが市場のリスクを目の当たりにしました。中国は高齢化が進みつつあり、出生率は著しく低迷しており、関連専門家の予測を大幅に上回る低下が見られ、出生率のボトルネックとなっている業界に対して、我が党は強力な打撃を加えることになります。&lt;/p&gt;
&lt;h2 id=&#34;生徒减负&#34;&gt;生徒减负
&lt;/h2&gt;&lt;p&gt;90年代生まれの私たちにとって、そうした多くの習い事や家庭教師のコース、放課後の自由な時間も制限されていませんでした。それは、まず家計の事情が許さないこと、そして当時の家庭教師がブランドイメージを確立していなかったことが理由です。親たちの信頼を得るためには、子供たちが自分の意思で選択し、自由に活動できる環境を提供することが重要でした。&lt;/p&gt;
&lt;p&gt;しかし、時を経て20年が経ち、2019年から始まったK12教育の資本化により、猿輔導などのオンライン家庭教師が次々と登場しました。資本の支援を受け、優秀なリソースを集めて様々なブランドの家庭教師コースが作られ、高額な費用も親たちの熱意を抑えきれませんでした。&lt;/p&gt;
&lt;p&gt;都市化の進展に伴い、多くの家長は学問を通じて貧しい出自から脱し、階級的な飛躍を実現してきました。自身が社畜として働く中で、子供たちに十分な時間を費やすことが難しく、自分自身もまた競争にさらされながら、子供たちが同世代に遅れを取ることを望めないのです。寒門出の貴子（高貴な出自の子）は存在しないため、適切な学歴を得ることができず、普通の家庭では、他の道で現在の階級を維持したり、再び階級を向上させたりすることは困難です。職業高校に進むことは、現在の社会環境において、階級の低下を許容できない多くの家長にとって受け入れがたい選択肢でした。&lt;/p&gt;
&lt;h2 id=&#34;学生負担軽減&#34;&gt;学生負担軽減
&lt;/h2&gt;&lt;p&gt;なぜ課外家庭教師が必要なのか、保護者がなぜ課外家庭教師を必要とするのか、過去を見直してみましょう。教科書の内容や例題は、見ればすぐに理解できます。多くの科目は範囲が広く、内容は表面的なものであり、深く掘り下げていません。才能の選抜メカニズムにはある程度の差別化が必要です。そのため、試験問題が単に教科書の内容から出されるだけでは、選別効果を達成できません。横方向への拡張と縦方向への拡張が必要になります。これらの内容は、教師が授業中にカバーできない領域であり、その存在が課外家庭教師の育成の土壌を育んでいます。&lt;/p&gt;
&lt;p&gt;ファイルには多くの内容が含まれており、30条の細則と規範が複数の側面を規定し、ガイドラインの概要は以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体的に宿題の量と時間を削減し、生徒の過剰な負担を軽減する&lt;/li&gt;
&lt;li&gt;学校の放課後サービスレベルを向上させ、生徒の多様なニーズに対応する&lt;/li&gt;
&lt;li&gt;厳格な管理を堅持し、校外トレーニング行為を全面的に規範化する&lt;/li&gt;
&lt;li&gt;教育・指導の質を大幅に向上させ、生徒が学校内で十分に学び、良い成績を取れるように保障する&lt;/li&gt;
&lt;li&gt;配達的な管理を強化し、支援・保障能力を高める&lt;/li&gt;
&lt;li&gt;注意深く組織的に実施し、実効性のある成果を達成することを確実にする&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;菁英教育&#34;&gt;菁英教育
&lt;/h2&gt;&lt;p&gt;教育業界において、近年、優秀な私立中学校が増加しており、公立学校の質の高いリソースが不足している（派生学区問題）という現象も見られます。様々な規模の教育グループが、高額な給与待遇で優秀な教師を惹きつけ、質の高い学習環境を構築し、徐々に独自のブランドを確立しています。中でも最も有名なのが&lt;strong&gt;衡水模式&lt;/strong&gt;です。地元の中小企業は平均3千人を超え、優れた私立小学校では学年費用が9千～1万ドルに達します。教育グループは健全なサイクルを形成しており、「高い学費だが教師が優秀で、生徒の成績が良いから学費を高め、親は依然として子供をここに送ってくる」という状況が続いています。公立学校のリソース（教師）も徐々に私立学校に引き寄せられ、最終的には劣悪な教育の代名詞となっています。&lt;/p&gt;
&lt;h2 id=&#34;算法搾取&#34;&gt;算法搾取
&lt;/h2&gt;&lt;p&gt;有データが示すように、美団に契約している配達員はほぼ400万人に達し、活発な配達員は約45万人です。多くの人々がこの仕事に依存して家族を養い生活しています。アルゴリズムによる絶え間ない搾取により、配送時間は限界を超えていき、人間は測定可能な単位に換算され、アルゴリズムの中で計算され、配達員の崩壊境界線を不断に探求されます。自分たちは非常に賢明だと考えていますが、&lt;strong&gt;人性にあたたまらず、資本のために奉仕する&lt;/strong&gt;。市場がここに存在し、皆で楽しく、持続可能な遊びをすれば良いのです。しかし、&lt;strong&gt;独占や特権、資本主義のやり方のように、無秩序かつ蛮横な成長は必ず終わりを迎える&lt;/strong&gt;でしょう。&lt;/p&gt;
&lt;h2 id=&#34;株式市場の変動&#34;&gt;株式市場の変動
&lt;/h2&gt;&lt;p&gt;2021年7月24日、新東方を代表する教育株が華麗なパフォーマンスを見せ、米国市場の前場好調な流れに続き、&lt;strong&gt;株価は半値まで暴落&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我国は徐々に高齢化が進み、様々な計画外出生を引き起こす社会現象は取り締まらなければならず、独占的・残業を繰り返すインターネット企業への罰金も科され、資本が集まる教育業界も規制の対象となった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;株価変動&#34;&gt;株価変動
&lt;/h2&gt;&lt;p&gt;教育業界が資本化されることを許されない。一票によって関連業界が上場資金調達を行うことが否定され、悲鳴が絶えない。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;腰斩的新东方 (腰斬の新東方)
&lt;img src=&#34;https://ttf248.life/p/capital-monopoly-and-the-fall-of-online-education/%E6%96%B0%E4%B8%9C%E6%96%B9%E8%82%A1%E4%BB%B7.png&#34;
	width=&#34;1840&#34;
	height=&#34;702&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;腰斩的新东方&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;629px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;暴跌的美团 (暴落の美団)
&lt;img src=&#34;https://ttf248.life/p/capital-monopoly-and-the-fall-of-online-education/%E6%96%B0%E4%B8%9C%E6%96%B9%E8%82%A1%E4%BB%B7.png&#34;
	width=&#34;1840&#34;
	height=&#34;702&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;暴跌的美团&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;629px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考リンク&#34;&gt;参考リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.infoq.cn/article/9Q1O2vWYNE8Mfhkzuyzs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;規制強化によるオンライン教育の急激な「減速」&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;http://www.moe.gov.cn/jyb_xxgk/moe_1777/moe_1778/202107/t20210724_546576.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;国务院办公厅が、義務教育段階における生徒の宿題負担と外部研修負担に関する意見を发布&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>混沌エンジニアリング</title>
        <link>https://ttf248.life/ja/p/chaos-engineering/</link>
        <pubDate>Wed, 28 Jul 2021 14:35:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chaos-engineering/</guid>
        <description>&lt;p&gt;システム安定性テストを行うための、システムを破壊するパターン。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;国内的互联网行业总是喜欢折腾点新东西出来，有时候听到个名词，一般人都想不到它是什么东西？&lt;/p&gt;
&lt;p&gt;看了部分文章，还是这段针对混沌工程初期的定义，较为容易接受：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;混沌工程的早期探索，其实在行业内一直有，曾经是以故障测试、容灾演练等身份存在。而随着微服务架构的不断发展，以及分布式系统的不断庞大，混沌工程开始崭露头角，越来越被重视。当 Netflix 正式提出混沌工程概念后，相关理论也开始飞快丰富。Netflix 的实践也证明了混沌工程在稳定性领域所带来的巨大意义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.infoq.cn/article/gsqtykoa3uvrtqi1kkmo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ByteDance 混沌工程実践まとめ&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>KubernetesでPodが停止しました。</title>
        <link>https://ttf248.life/ja/p/kubernetes-pause-pod/</link>
        <pubDate>Mon, 12 Jul 2021 11:23:09 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/kubernetes-pause-pod/</guid>
        <description>&lt;p&gt;デプロイメントコントローラは、Kubernetesクラスタにおいて非常に重要な機能であるPodの水平スケーリングと縮小を実現します。これは従来のクラウド時代プラットフォームが必須とする能力です。&lt;/p&gt;
&lt;p&gt;あるビジネスシーンで、データベース内のデータを修正する必要があり、修正後にPodノードを再起動します。しかし、Podが実行中に表のフィールドを継続的に変更する必要があるため、一時的にアプリケーションによるテーブルへの更新を停止し、データ修正後にPodを復旧する必要があります。&lt;/p&gt;
&lt;p&gt;削除以外の方法で、同様に一時停止の効果を実現する方法はありますか？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl scale --replicas=0 deployment/&amp;lt;your-deployment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;回答を見る前に、多くの人が直接プロセスを操作する時代に思い当たり、ビジネスプロセスの直接操作を考えてしまうかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/54821044/how-to-stop-pause-a-pod-in-kubernetes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kubernetesでポッドを停止/一時停止する方法&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ファンドと固定資産運用</title>
        <link>https://ttf248.life/ja/p/funds-and-fixed-income-wealth-management/</link>
        <pubDate>Fri, 09 Jul 2021 11:27:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/funds-and-fixed-income-wealth-management/</guid>
        <description>&lt;p&gt;90年代生まれの私たち世代にとって、08年の金融危機は、ほとんど感覚を伴わなかった。なぜなら、当時まだ若く、投資や資産運用といった理財の知識も身につけていなかったからだ。2015年に起きた牛市（うしじ）は、その勢いが凄まじく、終焉を迎える際にも大きな騒ぎとなった。最終的には国家が市場を救済に出たことで落ち着きを見せた。この頃に、基金という概念が一般の人々の目に触れるようになったのである。&lt;/p&gt;
&lt;h2 id=&#34;蚂蚁金服と支付宝&#34;&gt;蚂蚁金服と支付宝
&lt;/h2&gt;&lt;p&gt;支付宝は、その天然のトラフィックインポートとして、蟻（アンチ）グループの下位に生まれた時点で決済ツールとしての位置づけを確立しました。支付宝は、微信と同様に投資ファンドを購入し、ほとんどの人々が支付宝を選択しました。また、支付宝は投資ファンド販売を単なる買い物に変えることに成功しました。2019年以降始まった小牛市（ショーニイシ）において、基金マネージャーの集団暖房、結局のところ、それがパンデミックによる通貨の大規模放出によって引き起こされたものです。入場した人はすべて利益を得て、入場しなかった人は羨望の眼差しを向け、急いで入場しました。新ファンド規模が百億元を超える速度がますます加速しており、マザーズ世代が投資を開始するシーンにおいて、数兆円規模のファンドもすぐそこまで来ているでしょう。&lt;/p&gt;
&lt;p&gt;インターネット基金販売プラットフォームが蟻（アンチ）をコードとする形で爆発的な人気を博す以前、平明百姓が投資ファンドに触れるのは、銀行で貯金をする際に、ブースターが熱心にさまざまな金融商品を紹介してくれる場面でした。インターネットの包装やプロモーションページの情報ガイダンス、投資ファンド販売機関が提供する高額な広告費が、支付宝が提示した投資ファンド広告を完全に非合理的なものに変えました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通常の銀行定期預金利回り4％、以前は非常に過熱していたP2P投資で8％、クレジットカード還款利息12％です。当社の主人公である支付宝が宣伝する投資ファンドは150％、250％と市場を席巻し、市場内では誰もが喜びました。市場が下落した場合？それは支付宝が火遊びをしているに等しい&lt;/strong&gt;。提示されたリターンのデータには、最近3年間の収益グラフのみが表示され、伝統的な投資ファンドは年平均収益のみが表示されます。なぜ単独で毎年の平均収益を表示できないのでしょうか？それは計算が難しいからでしょうか？答えは否定です。なぜなら、そのデータは顧客の投資ファンド購入を誘導するのに適していないからです。&lt;/p&gt;
&lt;h2 id=&#34;固定收益理财&#34;&gt;固定收益理财
&lt;/h2&gt;&lt;p&gt;中国尚未步入负利率时代，银行存款、国债是最为稳妥的固定收益产品；纯债基金也是不错的选择。中国的平均工资多少，各位自行查阅各地统计局公布的数据即可。 笔者写个简单的场景：资产规模200万，年化收益4%折算，每年的收益都超过了大部分城市的平均工资。&lt;/p&gt;
&lt;h2 id=&#34;跋談&#34;&gt;跋談
&lt;/h2&gt;&lt;p&gt;これは個人的な経験に基づいたもので、書けることはたくさんある。もっと深く知りたい場合は、経済に関する書籍を色々読んでみることをおすすめする。盲信するようなことはしない方が良い。普通の家庭における資産形成の核心は保全であり、火事を起こして夢のような富を築こうとするのではない。&lt;/p&gt;
&lt;p&gt;曽我伯がいつも言う言葉がある：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;適切なタイミングで適切な行動をとれば、価値は最大になる；勉強しているときは真面目に勉強し、良い学位を得る方が、チラシ配いでアルバイト代を稼ぐよりもずっと良い；就職したら真面目に働くことで、給与の伸び幅が豊かな報酬をもたらしてくれる；家を持ったら、家を守ることを学ぶ必要がある。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;興味のある方は、ぜひこちらの講演原稿をご覧ください。「時の流れについて」というテーマで、多くの書籍を読み込むことの大切さを説いています。原文のテキストファイルは当サイトにてご用意しております。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>取引所インターフェースドキュメント集約</title>
        <link>https://ttf248.life/ja/p/exchange-interface-documentation/</link>
        <pubDate>Wed, 27 Jan 2021 14:35:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/exchange-interface-documentation/</guid>
        <description>&lt;p&gt;金融ソフトウェア開発の5年目であり、最も取引するものが交易所とのインターフェースドキュメントである。慣れ親しんでいるのは香港証取引所のドキュメントであり、最近では中国通業務を処理することになり、一部の中国通業務に関連して、深セン証取引所および上海証取引所の資料も参照した。&lt;/p&gt;
&lt;h2 id=&#34;香港交易所&#34;&gt;香港交易所
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式サイト&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;常用&#34;&gt;常用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Mutual-Market/Stock-Connect/Reference-Materials/Trading-Hour,-Trading-and-Settlement-Calendar?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;取引時間、取引および決済カレンダー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/Services/Trading/Securities/Overview/Trading-Mechanism?sc_lang=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;取引メカニズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/-/media/hkex-market/mutual-market/stock-connect/reference-materials/resources/glossary_c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中広金融用語対照表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;2021-Calendar_pdf_c.pdf&#34; &gt;滬港通および深港通取引カレンダー PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;2021-Calendar_csv_c.csv&#34; &gt;滬港通および深港通取引カレンダー CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;glossary_c.pdf&#34; &gt;中広金融用語対照表 PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/chi/vcm/vcmtriggersecurity_c.aspx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;市調メカニズム冷静期トリガー記録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/chi/services/trading/securities/securitieslists/ListOfSecurities_c.xlsx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;証券リスト：基本情報、証券分類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/Services/Trading/Securities/Securities-Lists/Closing-Auction-Session-%28CAS%29-Securities?sc_lang=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;閉会競売取引時間帯証券&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/Services/Trading/Securities/Securities-Lists/Volatility-Control-Mechanism-%28VCM%29-Securities?sc_lang=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;市場変動調整メカニズム（市調メカニズム）証券&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/Services/Trading/Securities/Securities-Lists/Designated-Securities-Eligible-for-Short-Selling?sc_lang=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;短売り対象指定証券&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;ListOfSecurities_c.xlsx&#34; &gt;証券リスト：基本情報、証券分類 XLSX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;行情インターフェースドキュメント香港株式--中華通&#34;&gt;行情インターフェースドキュメント：香港株式 + 中華通
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Market-Data-Services/Infrastructure/Overview?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;行情インターフェースドキュメント概要リンク&lt;/a&gt;
よくある質問と解答、開発マニュアルの参照、過去の行情インターフェースドキュメントは検索バーからダウンロードアドレスを取得できます。バージョン履歴を検索してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Market-Data-Services/Infrastructure/HKEX-Orion-Market-Data-Platform-Securities-Market-OMD-C?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;香港株式行情インターフェースドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Mutual-Market/Stock-Connect/Reference-Materials/Technical-Documents/OMD_CC-Specifications?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中華通行情インターフェースドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&#34; &gt;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Developers_Guide_1_11.pdf&#34; &gt;HKEX_OMDC_Developers_Guide_1_11.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMDC_Connectivity_Guide_Securities_Market-_Index_datafeed_%28v2_2%29.pdf&#34; &gt;OMDC_Connectivity_Guide_Securities_Market-&lt;em&gt;Index_datafeed&lt;/em&gt;(v2_2).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Interface_Specification_China_Connect_Securities-%28v1-3%29.pdf&#34; &gt;OMD_Interface_Specification_China_Connect_Securities-(v1-3).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Connectivity_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Connectivity_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Developers_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Developers_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;報盤インターフェースドキュメント港股--中華通&#34;&gt;報盤インターフェースドキュメント：港股 + 中華通
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Trading/Securities/Infrastructure/Overview?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;報盤インターフェースドキュメント集約リンク&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OCG_FIX_Trading_Interface_Specifications_v2_2-%28clean%29.pdf&#34; &gt;港股FIXプロトコルインターフェースドキュメント PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OCG_Binary_Trading_Interface_Specifications_v2_2-%28clean%29.pdf&#34; &gt;港股二級制プロトコルインターフェースドキュメント PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Reason_Text_List.xlsx&#34; &gt;港股取引所エラーコードリスト XLSX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEx_CCCG_FIX_Trading_Interface_Specifications_v1_3-%28clean%29.pdf&#34; &gt;中華通FIXプロトコルインターフェースドキュメント PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEx_CCCG_Binary_Trading_Interface_Specifications_v1_3-%28clean%29.pdf&#34; &gt;中華通二進制インターフェースドキュメント PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;上交所&#34;&gt;上交所
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.sse.com.cn/services/tradingservice/tradingtech/technical/data/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;行情報盤インタフェースドキュメント&lt;/a&gt;
エラーインターフェースドキュメントは、他のメニューで取得できます
&lt;a class=&#34;link&#34; href=&#34;SSE_IS111_ErrorCode_CV3.15.xlsx&#34; &gt;報盤エラーインターフェースドキュメント XLSX&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;深谷証券取引所&#34;&gt;深谷証券取引所
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.szse.cn/marketServices/technicalservice/interface/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;行情報盤インタフェースドキュメント&lt;/a&gt;
深谷証券取引所は、個別のエラーメッセージを提供していません。報盤インタフェースドキュメントの第6章に補足説明があります。
&lt;a class=&#34;link&#34; href=&#34;P020201229686784934466.pdf&#34; &gt;深圳证券交易所Binary取引データインターフェース規範（Ver1.18）PDF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ニューヨーク証券取引所&#34;&gt;ニューヨーク証券取引所
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nyse.com/markets/hours-calendars&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;休場スケジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nasdaq.com/market-activity/ipos?tab=upcoming&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;新規上場情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;終値&#34;&gt;終値
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://eoddata.com/stocklist/NASDAQ.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;グローバル市場の終値&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Dockerの基礎を理解するための３つのポイント (または、Dockerの基本を理解するための３つのこと)</title>
        <link>https://ttf248.life/ja/p/docker-two-three-things/</link>
        <pubDate>Thu, 21 Jan 2021 09:26:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/docker-two-three-things/</guid>
        <description>&lt;p&gt;長年携わってきたのは &lt;code&gt;CentOS&lt;/code&gt; オペレーティングシステムであり、&lt;code&gt;mac&lt;/code&gt; ユーザーや &lt;code&gt;Ubuntu&lt;/code&gt; ユーザーの場合、一部の内容は適用できない。
インストールに関する部分は、清華大学のドキュメントを参照するのが参考になる：&lt;a class=&#34;link&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール
&lt;/h2&gt;&lt;p&gt;未知の神秘的な力により、国内でのDockerのインストールには、クラウドプロバイダーが提供するレジストリのアドレスを設定することを推奨します。ここでは&lt;strong&gt;Alibaba Cloud&lt;/strong&gt;を使用することをお勧めします。&lt;/p&gt;
&lt;h3 id=&#34;リポジトリソースの設定&#34;&gt;リポジトリソースの設定
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install yum-utils device-mapper-persistent-data lvm2 &amp;amp;&amp;amp; \
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;最新版のインストール&#34;&gt;最新版のインストール
&lt;/h3&gt;&lt;p&gt;Dockerは一般的なバックエンドサービスとして、起動時に自動で開始されるように設定することを推奨します。以下のコマンドはCentOS 7向けです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install -y docker-ce docker-ce-cli containerd.io &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;指定バージョン展開&#34;&gt;指定バージョン展開
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;kubernetes&lt;/code&gt;および&lt;code&gt;docker&lt;/code&gt;のリリースは完全に同期されておらず、今後&lt;code&gt;kubernetes&lt;/code&gt;を展開する場合は、&lt;code&gt;kubernetes&lt;/code&gt;展開手順を参照し、指定バージョンの&lt;code&gt;docker&lt;/code&gt;をインストールしてください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum list docker-ce --showduplicates | sort -r
sudo yum install -y docker-ce-18.09.2-3.el7 docker-ce-cli-18.09.2-3.el7 containerd.io-18.09.2-3.el7 &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;通常ユーザーにdocker権限を追加する&#34;&gt;通常ユーザーにDocker権限を追加する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo usermod -aG docker ${USER}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;卸載&#34;&gt;卸載
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum remove -y docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日常使用-にちじょうしよう&#34;&gt;日常使用 (にちじょうしよう)
&lt;/h2&gt;&lt;h3 id=&#34;镜像加速&#34;&gt;镜像加速
&lt;/h3&gt;&lt;p&gt;未知の神秘的な力により、イメージの取得時に速度が低下することがあります。この問題を解決するために、国内のクラウドプロバイダーが多くの加速サービスを提供し、引き続き&lt;strong&gt;阿里云&lt;/strong&gt;を推奨します。&lt;/p&gt;
&lt;p&gt;加速用のURLは、ご自身の登録した阿里云アカウントで取得してください。このサービスは無料で利用でき、阿里云からは無料のイメージ構築サービスも提供されています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt;EOF
{
  &amp;quot;registry-mirrors&amp;quot;: [
    &amp;quot;https://docker.nju.edu.cn&amp;quot;,
    &amp;quot;https://mirror.baidubce.com&amp;quot;,
    &amp;quot;https://docker.m.daocloud.io&amp;quot;,
    &amp;quot;https://docker.mirrors.sjtug.sjtu.edu.cn&amp;quot;
  ]
}
EOF
systemctl daemon-reload &amp;amp;&amp;amp; \
systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;強く推奨されるコントロールパネル&#34;&gt;強く推奨されるコントロールパネル
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume create portainer_data &amp;amp;&amp;amp; \
docker run -d --name=portainer --restart=always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.20.3-alpine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常用イメージの取得集&#34;&gt;常用イメージの取得集
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull rancher/rancher:stable &amp;amp;&amp;amp; docker pull portainer/portainer-ce:2.0.1 &amp;amp;&amp;amp; \
docker pull centos:7 &amp;amp;&amp;amp; docker pull ubuntu:20.04 &amp;amp;&amp;amp; docker pull ubuntu:18.04 &amp;amp;&amp;amp; \
docker pull redis:5 &amp;amp;&amp;amp; docker pull redis:6 &amp;amp;&amp;amp; \
docker pull alpine:3.11 &amp;amp;&amp;amp; docker pull busybox:1.32 &amp;amp;&amp;amp; \
docker pull rabbitmq:3.7-management &amp;amp;&amp;amp; \
docker pull mariadb:10.2 &amp;amp;&amp;amp; \
docker pull nginx:1.18 &amp;amp;&amp;amp; docker pull nginx:1.19 &amp;amp;&amp;amp; \
docker pull mysql:5.6 &amp;amp;&amp;amp; docker pull mysql:8 &amp;amp;&amp;amp; \
docker pull elasticsearch:6.8.11 &amp;amp;&amp;amp; docker pull logstash:6.8.11 &amp;amp;&amp;amp; docker pull kibana:6.8.11 &amp;amp;&amp;amp; \
docker pull zookeeper:3.4 &amp;amp;&amp;amp; \
docker pull influxdb:1.7 &amp;amp;&amp;amp; docker pull grafana/grafana:7.3.1 &amp;amp;&amp;amp; \
docker pull percona:8 &amp;amp;&amp;amp; docker pull percona:5.6 &amp;amp;&amp;amp; \
docker pull cloverzrg/frps-docker:0.34.3 &amp;amp;&amp;amp; docker pull cloverzrg/frpc-docker:0.34.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常用コマンドの組み合わせ&#34;&gt;常用コマンドの組み合わせ
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/reference/commandline/docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/engine/reference/commandline/docker/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンテナの実行状態を確認し、&lt;code&gt;format&lt;/code&gt;パラメータを追加して詳細なコンテナ情報を取得（イメージ情報は無視）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker ps --format &amp;quot;{{.Names}}: {{.Ports}}: {{.Size}}&amp;quot;
#portainer: 0.0.0.0:8000-&amp;gt;8000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp: 0B (virtual 172MB)
#influxdb: 0.0.0.0:8086-&amp;gt;8086/tcp: 183B (virtual 311MB)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;すべてのコンテナをワンクリックで停止&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すべてのイメージをワンクリックで削除&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dokcer rmi $(docker images -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;イメージのエクスポート&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; &amp;gt; -o XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージをエクスポートして圧縮&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; | gzip &amp;gt; XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージをインポート&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker load -i XXX.tar
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>LinuxでJMeterの負荷テスト環境を構築する</title>
        <link>https://ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</link>
        <pubDate>Tue, 22 Dec 2020 10:12:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</guid>
        <description>&lt;p&gt;著者はハードウェアに強い関心を持ち、JMeterを用いて負荷テストを実施し、CentOS 7上にJMeter、InfluxDB、Grafanaをデプロイするプロセスを記録しました。JMeterのインストールとコマンドの使用方法、InfluxDBの特徴とDockerによるインストール方法、Grafanaの簡易的なデプロイと設定について共有しています。高性能プログラムモードに関する経験や参考資料をまとめました。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;広く知られているように&lt;/code&gt;、私にはハードウェアに対する強い関心が持っており、テストグループが &lt;code&gt;JMeter&lt;/code&gt; を使用して負荷テストを行っている際に、パフォーマンスが向上しないことを発見しました。好奇心旺盛な私は、会社の負荷テストの方法を試してみることに決意しました。また、ある頃合いにオープンソース中国で、より洗練された高性能のパフォーマンス測定グラフを作成する方法に関する投稿を読んだことがあります。&lt;code&gt;Windows&lt;/code&gt;版でのテスト実行時に、可視化された &lt;code&gt;TPS&lt;/code&gt; データの表示を実現しており、Webパネルを設定することでどのような効果があるのか疑問に思っていました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;頭の中で思いついたのは、当然のことばかりです。実際に試してみないとしかたないことを理解します。
負荷テストには GUI モードを使用しないでください！ テスト作成とデバッグのみに使用してください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景-1&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;公式推奨は、コマンドラインで負荷テストレポートを取得し、GUIで表示する方法ですが、データに誤差が含まれているという問題があります。JMeterの理解が十分ではないため、少なくとも&lt;code&gt;Linux&lt;/code&gt;版のコンソールパネルを弄り転げる理由を見つけたいと思います。&lt;/p&gt;
&lt;p&gt;開かれた中国（オープンチャイナ）の投稿では、コアコンポーネントのデプロイメント方法があまりにも友好的ではなく、インストールに必要なファイルは公众号を通じてダウンロードする必要があり、現代的な若者として、もちろん&lt;code&gt;Docker&lt;/code&gt;で代替します。要するに、サーバーは国内であり、国境を越えたソースアドレスへのアクセス速度が遅いため、少なくともイメージサービスとしては、阿里云には無料の加速があります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; のインストールとデプロイメントについては、ここでは詳細な説明を省略し、以前の記事を参照してください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;次の内容は、2つの主要な領域に分かれています：基本的なテスト環境コンポーネントの構築、および各コンポーネントの簡単な認識の説明&lt;/p&gt;
&lt;h2 id=&#34;jmeter&#34;&gt;JMeter
&lt;/h2&gt;&lt;p&gt;Apache JMeterはApache組織が開発したJavaベースの負荷テストツールです。ソフトウェアに対する負荷テストに使用され、当初はWebアプリケーションのテスト用に設計されましたが、その後、他のテスト分野にも拡張されています。静的および動的なリソース（静的ファイル、Java小型サービスプログラム、CGIスクリプト、Javaオブジェクト、データベース、FTPサーバーなど）をテストするために使用できます。JMeterは、さまざまな負荷カテゴリからの巨大な負荷をシミュレートして、それらの強度をテストし、全体的なパフォーマンスを分析するために使用できます。さらに、JMeterはアプリケーションの機能/回帰テストに使用でき、断言を含むスクリプトを作成することで、プログラムが期待どおりの結果を返していることを検証します。最大限の柔軟性のため、JMeterは正規表現を使用して断言を作成することを許可しています。&lt;/p&gt;
&lt;p&gt;Apache jmeter は、静的および動的なリソース（ファイル、Servlet、Perlスクリプト、Java オブジェクト、データベースとクエリ、FTPサーバーなど）のパフォーマンスをテストするために使用できます。 サーバー、ネットワーク、またはオブジェクトに過剰な負荷をシミュレートして、それらの強度をテストしたり、さまざまなストレスタイプの下での全体的なパフォーマンスを分析したりすることができます。 大規模な同時負荷テストでサーバー/スクリプト/オブジェクトのパフォーマンスを分析したり、グラフィカルなパフォーマンス分析を行ったりするために使用できます。&lt;/p&gt;
&lt;h3 id=&#34;jmeter-導入-centos7&#34;&gt;Jmeter 導入 CentOS7
&lt;/h3&gt;&lt;p&gt;JDK の実行環境をインストールし、JMeter のインストールパッケージをダウンロードします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install java-1.8.0-openjdk -y &amp;amp;&amp;amp; \
wget https://mirrors.bfsu.edu.cn/apache//jmeter/binaries/apache-jmeter-5.4.tgz &amp;amp;&amp;amp; tar -xf apache-jmeter-5.4.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;環境変数を設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export JMETER_HOME=$HOME/jmeter/apache-jmeter-5.4
export PATH=$JMETER_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;jmeter-コマンド&#34;&gt;JMeter コマンド
&lt;/h3&gt;&lt;p&gt;最後に &lt;code&gt;Grafana&lt;/code&gt; ダッシュボードに送信し、&lt;code&gt;-l&lt;/code&gt; パラメータを入力しなくても、&lt;code&gt;web&lt;/code&gt; コンソールでデータを観察できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jmeter -n -t /tmp/order-500-10s.jmx -l /tmp/jmeter-order-report-20200109/order-500-10s.jtl
# 通常、テスト結果とテストレポートは省略し、コマンドを簡略化します。
jmeter -n -t /tmp/order-500-10s.jmx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;influxdb&#34;&gt;InfluxDB
&lt;/h2&gt;&lt;p&gt;InfluxDBは、Go言語で記述されたオープンソースの分散型時系列、イベント、指標データベースです。外部依存なしで動作します。このデータベースは現在、大量の時間スタンプデータ（DevOpsモニタリングデータ、APPメトリクス、IoTセンサーデータ、リアルタイム分析データなど）を保存するために主に利用されています。&lt;/p&gt;
&lt;h3 id=&#34;influxdbの特徴&#34;&gt;InfluxDBの特徴
&lt;/h3&gt;&lt;p&gt;InfluxDBの特徴は、以下の9点にまとめられます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非構造化（非モデリング）：任意の数の列を含めることができます。&lt;/li&gt;
&lt;li&gt;メトリクスの保存期間を設定できます。&lt;/li&gt;
&lt;li&gt;時間に関連する関数（min、max、sum、count、mean、medianなど）をサポートし、統計分析が容易です。&lt;/li&gt;
&lt;li&gt;ストアポリシーのサポート：データの削除および変更に使用できます。（InfluxDBはデータの削除と変更の方法を提供していません。）&lt;/li&gt;
&lt;li&gt;連続クエリのサポート：データベース内で自動的にスケジュールされたステートメントのセットであり、ストアポリシーと組み合わせてInfluxDBのシステム使用量を削減できます。&lt;/li&gt;
&lt;li&gt;ネイティブなHTTPサポート、組み込みHTTP API。&lt;/li&gt;
&lt;li&gt;SQLライクな構文をサポート。&lt;/li&gt;
&lt;li&gt;クラスタ内のデータのレプリカ数を設定できます。&lt;/li&gt;
&lt;li&gt;定期的なサンプリングデータによる別の測定項目の書き込みをサポートし、粒度ごとのデータを保存できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;influxdb-docker-インストール&#34;&gt;InfluxDB Docker インストール
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir influxdb &amp;amp;&amp;amp; cd influxdb &amp;amp;&amp;amp; \
docker run -p 8086:8086 -d --name influxdb -v $PWD:/var/lib/influxdb influxdb:1.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;docker exec -it influxdb /bin/bash&lt;/code&gt; でコンテナに入り、コマンドを実行し、手動でデータベースを作成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@bce0a55bbc72:/# influx
http://localhost:8086 への接続、バージョン 1.7.10
InfluxDB シェル バージョン：1.7.10
&amp;gt; 対話式パネルでコマンドを実行
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;influxdbデータベースとユーザーの作成&#34;&gt;InfluxDBデータベースとユーザーの作成
&lt;/h3&gt;&lt;p&gt;データベースの作成: &lt;code&gt;create database jmeter_t2&lt;/code&gt;
データベースの表示: &lt;code&gt;show databases&lt;/code&gt;
データベースの切り替え: &lt;code&gt;use jmeter_t2&lt;/code&gt;
ユーザーの作成: &lt;code&gt;create user &amp;quot;admin&amp;quot; with password &#39;admin&#39; with all privileges&lt;/code&gt;
ユーザーの表示: &lt;code&gt;show users&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; show users
user  admin
----  -----
admin true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ユーザー権限が&lt;code&gt;admin&lt;/code&gt;で&lt;code&gt;true&lt;/code&gt;と表示されれば、データベースの準備は完了です。&lt;/p&gt;
&lt;h2 id=&#34;grafana&#34;&gt;Grafana
&lt;/h2&gt;&lt;p&gt;テストケースの作成時に、グラフによる表現はあまり必要ないことがわかりました。インターフェースの &lt;code&gt;tps&lt;/code&gt; データのコマンドライン実行で十分観測できます。むしろ、プログラム内部の処理時間を確認したいと考えています。&lt;/p&gt;
&lt;p&gt;Grafana の簡易的なコンソールパネルをデプロイし、InfluxDB と連携するための設定ファイルをインポートします。&lt;/p&gt;
&lt;p&gt;コンソールはラベルによるフィルタリングをサポートしており、通常は 1 つの InfluxDB データベースを設定するだけで済みます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーション名&lt;/li&gt;
&lt;li&gt;テストケース名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/linux-setup-jmeter-testing-environment/Snipaste_2021-03-09_19-44-22.png&#34;
	width=&#34;861&#34;
	height=&#34;357&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;grafana&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name=grafana -p 3000:3000 grafana/grafana:7.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ブラウザ版ではサンプリング間隔により、計算された &lt;code&gt;TPS&lt;/code&gt; や関連数値が JMeter の集計レポートと一致しないため、参照リンク：&lt;a class=&#34;link&#34; href=&#34;https://www.vinsguru.com/jmeter-real-time-results-influxdb-grafana/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vinsguru.com/jmeter-real-time-results-influxdb-grafana/&lt;/a&gt; を参考にしています。&lt;/p&gt;
&lt;p&gt;資料には、リスナーのカスタム設定方法も記載されています。&lt;/p&gt;
&lt;h2 id=&#34;付録&#34;&gt;付録
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;高性能のプログラムパターンは、必然的にone loop threadであるべきであり、ロック、入隊列、出隊列などのものは、不必要なパフォーマンス損失を引き起こす&lt;/li&gt;
&lt;li&gt;核心ビジネスロジックの実行時間が、他のコードを導入する時間よりも大きい場合のみ、並行処理が有効に効率を向上させることができ、コアな実行時間が十分に小さい場合は、慎重に他のコードを導入すべき&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://my.oschina.net/u/4617935/blog/4680856&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JMeterシリーズのJMeter+Grafana+InfluxDB リアルタイム監視&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/_/influxdb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;influxdb 公式イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/r/grafana/grafana&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;grafana 公式イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://jmeter.apache.org/download_jmeter.cgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JMeter 公式サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@jasonli.studio/to-install-apache-jmeter-in-centos7-294bc72a97ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CentOS7にApache JMeterをインストールする方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Red Hat と CentOS のライフサイクル</title>
        <link>https://ttf248.life/ja/p/redhat-centos-lifecycle/</link>
        <pubDate>Tue, 21 Jul 2020 20:02:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/redhat-centos-lifecycle/</guid>
        <description>&lt;p&gt;オンラインプロ덕ション環境のオペレーティングシステムとして、Red HatとCentOSが主流の選択肢です。2つのシステムのライフサイクルに関する公式サイトへのリンクを記録し、CentOS 8からCentOS 8 Streamへのアップグレード経験を共有しています。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;p&gt;オンプレミス（本番環境）のオペレーティングシステムですが、現在の国内環境においては、Red HatとCentOSが主流の選択肢です。2年前にはRed Hat 6のEOL（End of Life）を迎えたため、両システムのライフサイクルに関する公式ウェブサイトへのリンクを記録します。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://access.redhat.com/support/policy/updates/errata&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Red Hat Enterprise Linux 生命周期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wiki.centos.org/zh/About/Product&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CentOS 产品规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Red Hat Enterprise Linux（RHEL）および CentOS は、エンタープライズ向けの主要なサーバーオペレーティングシステムです。RHEL は安定したサポートと更新サイクルを提供し、エンタープライズアプリケーションに適しています。CentOS は RHEL のコミュニティ版であり、同様の機能と安定性を提供しますが、公式なサポートはありません。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;この記事を執筆した時点では、2年後に自分が更新することなど想像もしていませんでした。先日、普段使っている仮想マシンをCentOS 8からCentOS 8 Streamにアップグレードしました。本番環境で何を選ぶかは、お話するのが難しいので、ここでは触れません。ローカル環境は最新版を追求します。&lt;/p&gt;
&lt;p&gt;CentOS 8 Streamは、従来のCentOSよりも迅速なアップデートと新機能を提供する、継続的リリース版であり、開発やテスト環境での利用に適しています。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>米中貿易戦争 (Bei-Chū Bōgyō Sensō)</title>
        <link>https://ttf248.life/ja/p/us-china-trade-war/</link>
        <pubDate>Tue, 21 Jul 2020 19:52:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/us-china-trade-war/</guid>
        <description>&lt;p&gt;まず、少し話題を外しますが、中国特色社会主義と資本主義の違いについてです。先輩たちの口から「儲かるためにはまず道路を整備する」という言葉を聞いたことがあります。中国のインフラ建設は国家が資金を出しており、資本主義社会ではこれらのものが請負業者に委託され、偏遠な地域には利益がなく、企業が引き受ける気になれません。これは少し長くなりすぎて、現在の議論から逸脱してしまいますが、一般的には貿易戦争が生活に大きな影響を与えないと感じるかもしれませんが、実際には中国のハイエンド製造業は依然として脆弱です。私が従事しているIT業界では、メモリ、ハードディスク、CPU、グラフィックカードといった構成要素は、海外の工場からのものであり、これらの部品費用の分だけでも全体の価格の50%を占めています。ハイエンド製造業が不可欠であることは言うまでもありません。中国とアメリカの衝突は避けられないのです。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/zh-hans/2018%EF%BC%8D2020%E5%B9%B4%E4%B8%AD%E7%BE%8E%E8%B4%B8%E6%98%93%E6%88%98&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2018年中美贸易战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%88%B6%E9%80%A02025&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中国制造2025&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ウィキペディア&#34;&gt;ウィキペディア
&lt;/h2&gt;&lt;p&gt;2018～2020年中美貿易戦争（通称：米中貿易戦争、英語：China–United States trade war）は、中華人民共和国とアメリカ合衆国との間の貿易戦争であり、以下のような内容を含む。&lt;/p&gt;
&lt;p&gt;貿易争端は、2018年3月22日にトランプ大統領が覚書に署名した際に、「中国がアメリカの知的財産および商業秘密を盗み取っている」と主張し、1974年の貿易法第301条に基づき、中国からの輸入品に対する関税を課すことになった。対象となる商品の総額は600億ドルに達した。2018年7月6日には、340億ドルの中国製品に対して25%の追加関税が課せられた。中国側もこれに対し、340億ドルのアメリカ製品に対する25%の追加関税を課した。その中には、アメリカへの輸出額が最も多い大豆が含まれていた。&lt;/p&gt;
&lt;p&gt;中美双方は一時的に2018年5月に貿易戦争の停戦合意に達し、和解に向けた共同声明を発表した。しかし、アメリカ貿易代表オフィス（USTR）は6月16日に、500億ドル相当の中国製品に対する課税リストを公表し、既存の10%関税を25%に引き上げた。中国側はこれに対し、等価な報復措置として、反倒銷調査を開始した。7月6日には、トランプ政権が最初の課税リストに含まれる340億ドルの中国製品に対して25%の関税を正式に適用し、トランプ氏による対中関税政策の実施が開始された（残りの160億ドルの商品は8月23日に25%の関税が適用された）。中国側は声明で、「アメリカはWTOの規則に違反し、史上最大規模の貿易戦争を始めた」と非難した。中国海関総署は、中国側の反撃措置は、アメリカ側の追加関税措置が発動した後即座に実施されたと述べた。&lt;/p&gt;
&lt;p&gt;12月1日には、G20ブエノスアイレス峰会で、習近平国家主席とトランプ大統領が90日間の交渉合意を達成し、交渉期間中は新たな貿易措置を追加しないことに合意した。2019年3月1日の期限までに、アメリカ側は「大幅な進展」があったとして、停戦措置の延長を発表した。&lt;/p&gt;
&lt;p&gt;2019年5月5日、トランプ大統領は、約2000億ドルの中国製品に対して25%の関税を課すことを発表し、6月1日から適用されることになった。5月13日には、中国国务院関税税則委員会が、6月1日から原産地アメリカ製の600億ドル相当の輸入品に対する関税を5～25%に引き上げることを決定した。6月1日には、USTRが、アメリカ側の25%関税の適用を6月15日に延期し、中国側は6月1日に関税措置が実施されると発表した。&lt;/p&gt;
&lt;p&gt;6月29日には、習近平国家主席とトランプ大統領がG20大阪峰会で会談を行い、経済磋商を再開すること、アメリカが中国製品に対する新たな関税を課さないことに合意した。&lt;/p&gt;
&lt;p&gt;8月1日には、トランプ政権が中国政府によるアメリカ農産物の購入の遅延に不満を持ち、ツイッター上で、2019年9月1日から3000億ドルの中国製品に対して10%の関税を課すと発表した。8月5日には、人民元/ドル相場が7円の大台（7.00）を割り込んだ。同日、アメリカ財務省は、中国を為替操作国に指定した。その後、中国政府はアメリカ農産物の購入を一時停止し、8月24日に約750億ドルのアメリカ製品に対する10%または5%の関税、およびアメリカ自動車とその部品に対する関税の再導入を発表した。アメリカ側は次日、3000億ドルの中国製品に対する税率を15%に引き上げ、現在の2500億ドルの中国製品に対する25%の関税を30%に引き上げたが、その後、この措置は保留された。&lt;/p&gt;
&lt;p&gt;2020年1月16日には、中国とアメリカで第一段階の貿易合意が署名された。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PC自作のあれこれ</title>
        <link>https://ttf248.life/ja/p/computer-assembly/</link>
        <pubDate>Sat, 18 Jul 2020 14:33:46 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/computer-assembly/</guid>
        <description>&lt;p&gt;著者は幼い頃からPCの組み立てに興味を持ち、大学卒業後に本格的にハードウェアの組み立てを始めました。彼は、CPU、SSD（ソリッドステートドライブ）、HDD（ハードディスクドライブ）やメモリのクロック周波数など、各パーツの性能比較サイトを紹介し、購入に関するアドバイスも行いました。また、ハードウェア選びでの経験談や注意点なども共有しました。&lt;/p&gt;
&lt;h3 id=&#34;縁語り尽くせぬもの&#34;&gt;縁・語り尽くせぬもの
&lt;/h3&gt;&lt;p&gt;幼い頃から、自分だけのコンピュータを組み立てたいと考えていた。しかし、経済的な条件が許さなかった。ようやく大学に上ると、持ち運びやすいため、構成したのはノートパソコンだった。もし具体的な時期を挙げるとすれば、自分が組立てることを思い始めたのは、故郷の図書館でさえあっただろう。毕竟これは市区レベルの図書館であり、電子閲覧室（実際にはほとんど行ったことがなく、時間課金制だという）や雑誌閲覧室（まさにここで『大众软件』、『电脑报』のような雑誌を読み、コンピュータにあまり触れていなかった私にとって、神に近い科普資料だった）があったからだ。打副本の章节を見て自分もコンピュータを組んで、モンスターを倒し、主力として出力することを考えたし、黒科技を見て本の内容通りに再現できると夢を見た（ハッキングツールの使用について）。もちろん高校では勉強が忙しく、当時の私の認知能力では、読書も遊びも両方楽しむ必要があった。そうした「天真爛漫」な日々を過ごし、図書館へ行くという由縁を作った。特に何もすることがない時、小さな袋を提げてそこへ向かい、市区はそれほど大きくなく、ほとんどが徒歩で図書館へ行った。到着すると空調の効いた部屋で小説、漫画、ゲーム雑誌を見たり、時には真面目な本も読んだりした。&lt;/p&gt;
&lt;p&gt;年を取ると忘れっぽくなるのが普通だ。図書館で生まれたものが初めだったのかもしれない。中学校の頃には、親戚がコンピュータを組み立てていたが、当初その機械は何に使われたのか覚えていない。オペレーティングシステムはWindows 2003で、ゲームは標準搭載のカード＋帝国時代があった。様々な「斗智斗勇」な考えで鍵を盗み、甥っ子と一緒にゲームをした。&lt;/p&gt;
&lt;p&gt;初等学校に入ると学校でコンピュータの基礎的なトレーニングを受けた後、転校し、コンピュータ競技会についても少し知識を得た。そして高校ではNOIPに合格した。ここで言及するのは、校友たちの力だ。高校のコンピュータ棟は校友たちからの寄付によって建てられたもので、コンピュータ教育室と図書館が含まれていた。これは当時、国内インターネット浪潮の初期の波だった。校長もコンピュータ競技会への参加を支援し、前2学年の先輩たちが数名、コンピュータを通じて重点大学に合格していたからだ。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;これまでこのようなことを振り返ったことはなかった。そうはならないのは当然だろう。卒業後、私は自動化専攻を義無反顧的にコンピュータ業界に転身したが、種はすでに植えられていた。局中の人は自分の状況を知らないだけだった。幼い頃から多くのものに触れていたため、自分がとても優秀だと思っていたが、実際には表面的な知識しか持っていなかった。最大の強みは最初の情熱だった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;硬件组装&#34;&gt;硬件组装
&lt;/h3&gt;&lt;p&gt;PCバカ、chiphell、知乎のPC自作の板を逛逛し、萌新でも比較的簡単に自分に必要な機材リストを作成できます。2019年以降にCPUを選ぶ場合、経済的な条件が限られている場合は、より高い性能を得るためにAMDを優先的に選びます。
一般的なハードウェア性能比較サイトをご紹介します：&lt;a class=&#34;link&#34; href=&#34;https://cpu.userbenchmark.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cpu.userbenchmark.com/&lt;/a&gt;　価格に関しては、eBayの米版と咸鱼（中国版ヤフオク）で比較するのが良いでしょう。真の達人であれば、咸魚で中古品を探すことも可能です。大幅に安く購入できます。あまりPCに詳しくない場合は、咸魚は推奨しません。私は偽メモリを購入しましたが、現状使用しても問題がないようです。詳細は不明で、型番とパラメータが完全に一致していません。&lt;/p&gt;
&lt;h4 id=&#34;sn550-vs-sn750&#34;&gt;SN550 VS SN750
&lt;/h4&gt;&lt;p&gt;SN550とSN750の1TB容量の違いは、両者の継続的な読み書き速度が倍になることです。SN550では850MB、SN750では1.6GBですが、日常使用においては違いを感じられません。これは両者が4K性能において同じであるためです。もちろん、ここで言うSN550は1TB容量のものです。500Gや250Gの容量では、順応読み書き速度がより遅くなります。実際には、お金を惜しまないわけではない限り、日常使用であればSN550を購入するのが良いでしょう。私がこのモデルを選ばなかった主な理由は、その容量が最大1TBであることと、SN750が2TB容量を持つことです。私にとって、追加の拡張なしに、マザーボードのM.2 NVMeインターフェースの方がより価値があると感じたからです。&lt;/p&gt;
&lt;p&gt;総じて、ネットユーザーの結論として、B150のマザーボードでもM.2インターフェースに対応したSSDを導入することができます。&lt;/p&gt;
&lt;h4 id=&#34;机械硬盘選购&#34;&gt;机械硬盘選购
&lt;/h4&gt;&lt;p&gt;機械硬盘現在價格趨於穩定，對於有大量儲存需求的使用者，需要選購一款合適的機械硬盘，頻繁下載資源的使用者推薦企業級硬盘，常見的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;西數金盤&lt;/li&gt;
&lt;li&gt;希捷Exos
&lt;strong&gt;大容量的機械硬盘推薦進行分区，頻繁的下載操作固定在某个分区進行，日後出現壞道，可以集中在某个分区，廢棄當前分区即可，能有效延長機械硬盘寿命。&lt;/strong&gt;
希捷系列&lt;a class=&#34;link&#34; href=&#34;https://www.seagate.com/cn/zh/enterprise-storage/exos-drives/exos-e-drives/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方介紹&lt;/a&gt;
&lt;img src=&#34;https://ttf248.life/p/computer-assembly/%E5%B8%8C%E6%8D%B7exos1.png&#34;
	width=&#34;589&#34;
	height=&#34;659&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;希捷企業級硬盘概述&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;214px&#34;
	
&gt;
&lt;img src=&#34;https://ttf248.life/p/computer-assembly/%E5%B8%8C%E6%8D%B7exos2.png&#34;
	width=&#34;588&#34;
	height=&#34;661&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;希捷企業級硬盘概述&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;213px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;メモリ周波数&#34;&gt;メモリ周波数
&lt;/h4&gt;&lt;p&gt;日常業務の観点から見ると、周波数はパフォーマンスに大きな影響を与えません。
&lt;a class=&#34;link&#34; href=&#34;%e3%83%a1%e3%83%a2%e3%83%aa.png&#34; &gt;メモリ時系列画像&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;%e5%92%b8%e9%ad%9a%e3%83%a1%e3%83%a2%e3%83%aa.png&#34; &gt;咸鱼メモリ画像&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メモリ時系列（英語：Memory timingsまたはRAM timings）は、シリアル・ダイナミック・ランダム＝アクセスの記憶装置（SDRAM）のパフォーマンスを記述する4つのパラメータです。CL、TRCD、TRP、およびTRASで、クロックサイクル単位で測定されます。これらのパラメータは通常、破折号で区切られた4桁の数字として記述されます（例：7-8-8-24）。第4パラメータ（RAS）は頻繁に省略され、場合によっては5番目のパラメータであるコマンドレート（命令レート）が追加されることがあります。これは通常2Tまたは1Tで、2N、1Nと表記されます。これらのパラメータは、ランダムアクセスメモリの速度に影響を与える潜伏時間（遅延時間）を指定します。数字が低いほど、一般的にパフォーマンスは向上します。&lt;/p&gt;
&lt;p&gt;システム性能を決定する最終的な要素は、実際の遅延時間です。これは通常ナノ秒単位で測定されます。&lt;/p&gt;
&lt;p&gt;メモリ時系列を実際の遅延時間に変換する場合、クロックサイクル単位であることに注意することが重要です。クロックサイクルの時間を知らない場合、2つの数字のセットがどちらがより速いかを判断することはできません。&lt;/p&gt;
&lt;p&gt;たとえば、DDR3-2000 メモリのクロック周波数は1000 MHzで、そのクロック周期は1 nsです。この1 nsのクロックに基づいて、CL=7 が与えられた絶対遅延は7 ns です。より高速な DDR3-2666（クロック 1333 MHz、各サイクルあたり 0.75 ns）では、より大きな CL=9 を使用できますが、生成される絶対遅延は 6.75 ns となります。&lt;/p&gt;
&lt;p&gt;現代の DIMM には、自動構成を推奨するシリアル存在検出 (SPD) ROM チップが含まれています。PC の BIOS は、パフォーマンスを向上させるためにユーザーがメモリ時系列を調整できるように（安定性にリスクがある）、または特定の状況で安定性を高めるために（推奨された時系列を使用するなど）許可することがあります。&lt;/p&gt;
&lt;p&gt;注：メモリ帯域幅は、メモリの透過量（スループット）を測定し、通常は転送レートによって制限されます。複数の内部バンクに並行して SDRAM にアクセスすることで、ピークレートで連続的にデータを転送できます。潜伏時間を増やすことで帯域幅を増加させる可能性があります。具体的には、各新しい DDR メモリ世代には高い転送レートがありますが、絶対遅延はほとんど変化しません。特に市場に出回った最初の新世代製品では、前世代よりも遅延が長くなる傾向があります。&lt;/p&gt;
&lt;p&gt;メモリの遅延が増加しても、メモリ帯域幅を増やすことで、マルチプロセッサまたは複数の実行スレッドを持つコンピュータシステムのパフォーマンスを向上させることができます。より高い帯域幅は、専用ビデオメモリのない統合グラフィックス カードのパフォーマンスも向上させます。
&lt;a class=&#34;link&#34; href=&#34;%e3%83%a1%e3%83%a2%e3%83%aa%e6%99%82%e5%ba%8f%e5%8f%82%e6%95%b0%e8%af%b4%e6%98%8e.png&#34; &gt;メモリ時系列パラメータの説明画像&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E6%97%B6%E5%BA%8F&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;メモリ時系列パラメータに関する説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ウェブサイトの高速化とドメイン設定</title>
        <link>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</link>
        <pubDate>Sat, 20 Jun 2020 10:36:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</guid>
        <description>&lt;p&gt;境内アクセス時のGitHub Pagesの速度が遅いため、著者が個人ドメインを取得し、国内クラウドホスティングプロバイダーのCDN加速サービスを購入しました。設定中に、wwwサフィックスドメインへのアクセスができない問題が発生しましたが、最終的に汎用ドメインのDNS解析を削除し、セカンドレ벨ドメインを個別に設定することで解決しました。著者はまた、CDN加速の原理と設定経験、およびNginxを用いた逆プロキシの試みと教訓についても共有しています。&lt;/p&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景
&lt;/h3&gt;&lt;p&gt;ウェブサイトはGitHub Pagesにホストされており、周知のところ、GitHub Pagesへの国内アクセスが遅いことがありました。そこで個人ドメインを取得し、国内クラウドホスティングプロバイダーのCDN加速サービスを購入しました。加速サービスのセットアップ時に、開発マシンにもDocker、frp、k8sなどのサービスをデプロイしており、これらのサービスにはそれぞれダッシュボードが用意されていることを思い出し、無駄を省くという原則に基づき、複数のリバースプロキシを設定し、すべてサブドメインに付与しました。
その時、サブドメインであるwwwがアクセスできなくなったことに気づきました。阿里云でDNS設定を行い、www.xiangtianlong.comとxiangtianlong.comの両方を解析するように設定しましたが、CDN加速を有効にしていないときは両方のドメインが正常に使用できました。
CDN加速を設定した際、サブドメインが多数存在するため、汎用的なルールを有効にし、すべて開発マシンにルーティングしました。その結果、wwwというサブドメインもダウンしてしまいました。はい、正しく理解してくださいましたか？wwwプレフィックスはサブドメインです。実際にはウェブサイトはGitHub Pagesにデプロイされており、開発マシンにはウェブサイトのキャッシュ情報は一切ありません。
開発マシンにサイトをデプロイしなかったのは、静的ブログであり、GitHubが提供するActionで自動的に統合して公開されるため、本当に美味しかった（真香）からです。&lt;/p&gt;
&lt;h3 id=&#34;ドメイン&#34;&gt;ドメイン
&lt;/h3&gt;&lt;p&gt;非専門的なWeb開発において、ドメインの理解はSEOやクロスオリジン問題といった概念を含まない。ブログサイトとして、裸ドメインがブログ主のサイトを強調しやすく、特に私が漢数字でのローマ字表記をドメイン名としている場合や、現在のモバイルアクセスが多い状況では、入力する文字数を減らすことが望ましい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PC版ではキーボードショートカットでwwwとcomの入力を省略可能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN
&lt;/h3&gt;&lt;p&gt;阿里云和腾讯云都用过，初心者でも扱いやすく、腾讯云には動画で関連概念を解説しています。CDN加速の原理は、京东倉庫と似ています。新商品が出版される際、全国各地の倉庫にまとめて配送し、配送リクエストが発生した際に、最も近い倉庫から配信します。&lt;/p&gt;
&lt;p&gt;キャッシュサーバー（回源アドレス）：ウェブサイトのリソースが元の場所で保存されている場所
キャッシュファイルの設定：ブラウザのF12で管理コンソールを開き、静的リソースと動的リソースを分析する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全て0日有効期限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.php;.jsp;.asp;.aspx&lt;/code&gt; 0日有効期限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.jpg;.png;.js;.css;.woff2&lt;/code&gt; 1日有効期限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;腾讯云設定ルール：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャッシュ过期ルールは最大10件まで設定可能&lt;/li&gt;
&lt;li&gt;複数のキャッシュ过期ルール間の優先順位は、下から上にいくほど高い&lt;/li&gt;
&lt;li&gt;キャッシュ过期時間は最大365日まで設定可能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;悲惨自述&#34;&gt;悲惨自述
&lt;/h3&gt;&lt;p&gt;以前从未用过Nginx，以为网站随便搜索就能明白反向代理的配置，结果有点混乱，折腾半天连个302跳转也没弄明白，最终毫无用处。就想着笨办法解决一下，DNS解析删除*模式的泛域名解析，单个二级域名进行独立设置。这时突然注意到了阿里云DNS解析有一个叫做“显示URL跳转”的模式，尝试了一下，这不就是我想要的302跳转吗。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设置了第一个二级域名正常访问，等我设置第二个的时候，发现没用，都快怀疑人生了，等了一会突然就能用了，看来阿里云的DNS扩散偶尔也是会抽风的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/20414602&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;なぜ多くのウェブサイトのドメイン名に「www」プレフィックスが付加されないのか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudxns.net/Support/detail/id/918.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www付きとそうでないドメイン名の違いは何ですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gythialy.github.io/Docker-nginx-reverse-proxy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker nginx 反向プロキシ設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ブログIDE環境と雑感</title>
        <link>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;本記事では、Markdownの基本的な概念と、さまざまなソフトウェアでの利用について紹介しています。VSCodeをIDEとして推奨し、おすすめプラグインも列挙しています。作者はHexoからHugoへの移行経験を共有し、Hugoの柔軟性とカスタマイズ性を強調しています。最後に、新しい技術を迅速に習得するためのヒントや、Hugoテーマのスタイルが更新されない問題を解決する簡単なコツを紹介します。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;軽量マークアップ言語であり、人間が読み書きしやすいプレーンテキスト形式でドキュメントを作成することを可能にする。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;markdown-1&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;詳細なMarkdown構文については、本文で別途詳述しません。電子書籍を推奨します。&lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらをクリック&lt;/a&gt;
市場には多くのソフトウェアがMDを記述方法としてサポートしています。CSDNのブログシステムはMD構文に対応したオンラインエディターを導入しており、初回使用時にデフォルトでMD構文に関する紹介記事が表示されます。筆記者自身もそれなりに有用だと感じています。印象笔记では2018年にMDノートのサポートを追加し、ショートカットバーには様々なMDマークアップのオプションがあり、普通の文章を編集するのとほぼ同じように使えます。全体的なインタラクションフローは初心者にもフレンドリーです&lt;/p&gt;
&lt;h3 id=&#34;ide-推奨&#34;&gt;IDE 推奨
&lt;/h3&gt;&lt;p&gt;この記事を書いているのは2020年であり、VS Code は当然のことながら皆知っているでしょう。なぜなら、Git Page をブログシステムとして構築することを考える業界人は少なくないからです。数年前には、Sublime や Atom も優れた選択肢でした。オープンソースコミュニティの推進により 2 年間にわたって発展し、現在では VS Code が初心者にとっての最初の選択肢となっています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Microsoft の巨頭とオープンソースコミュニティの関係は、対立状態から成功裏に蜜月期に入りました：オープンソースを抱擁しています。筆者所在の会社も最近 2 年間にわたり積極的に Java エコシステムを取り入れており、ビジネス開発においては、現在国内で Java エコシステムはまさに「魅力的」です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vscodeプラグインのおすすめ&#34;&gt;VSCodeプラグインのおすすめ
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-07-17.png&#34;
	width=&#34;310&#34;
	height=&#34;306&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;プラグインリスト&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;プラグインにはそれぞれReadmeがあり、基本的な使い方や主要な機能が紹介されています。一部のプラグイン作者は、動的な効果を表示する画像も提供しています。
&lt;code&gt;Paste Image&lt;/code&gt;とhugoの画像プラグイン方式を組み合わせることで、非常に簡単に画像を挿入できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ショートカットキーを忘れてしまった場合、VSCodeのショートカットキー管理メニューを開き、「md」で検索して数回確認しましょう。Readmeをもう一度見直すのも良いでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo
&lt;/h2&gt;&lt;p&gt;筆者は&lt;code&gt;hexo&lt;/code&gt;から&lt;code&gt;hugo&lt;/code&gt;に切り替えた。愛折衝は私の天性であり、結局は忍耐強く静かに記事を書くことができないのだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugoは、個別のフォルダに画像とmdドキュメントを置くことをサポートする。&lt;/li&gt;
&lt;li&gt;Academicテーマのデザイン上では、様々な種類の文章スタイルをサポートしている。&lt;/li&gt;
&lt;li&gt;様々な便利なカスタム拡張機能がある。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学術&#34;&gt;学術
&lt;/h2&gt;&lt;p&gt;公式サイトではデフォルトで&lt;code&gt;exampleSite&lt;/code&gt;を使用し、メニューのインポートには&lt;code&gt;#component&lt;/code&gt;形式が推奨されます。URLのパターンは、ナビゲーションバーをクリックすることで単一ページのジャンプを実現し、ホームページでのスクロールを回避します（これは純粋な個人的な好みです）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタイル：ノート、講演、電子書籍&lt;/li&gt;
&lt;li&gt;柔軟性：全体的なスタイルのカスタマイズ、カスタムCSSスタイルの適用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このテーマは、中国語のサポートがまだ十分ではありません。主に視覚的な観点からすると、フォントサイズが中国語の読書習慣に合っていません。Hexoの開発者はほとんどが中国人であり、この点ではHugoよりも優れています。しかし、自分で手を加えて、ブラウザで要素を検証することで、要素を見つけ出し、変更するCSSスタイルの名前を知ることができます。サイドバーで&lt;strong&gt;Insert Style Rule Below&lt;/strong&gt;をクリックすると、ネストされた多層構造のCSSでも簡単にノード名を取得できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムCSSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/#add-scripts-js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムJSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テーマに組み込まれている構文強調表示の設定については、&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式ドキュメント&lt;/a&gt;を参照してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;子供たちがまた文句を言っているようだ。「最初から最後まで、曖昧で、細かいこと何も言ってない」と。&lt;/p&gt;
&lt;p&gt;私はこう言うつもりだ。以下のものがあれば十分だ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式マニュアル&lt;/li&gt;
&lt;li&gt;プラグインの説明書&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい技術をすぐに使いこなすには、まず公式サイトのドキュメントを読むことを推奨する。完璧に理解しようとする必要はないし、一度読んで理解する必要もない。少なくとも、ある程度の知識は持っておくべきだ。検索エンジンで見つかる結果が、必ずしも最新版と一致しない。誤解を招く可能性もある。新しい本も同様だ。まず目次を見て、著者が何を説明するのか把握する。場合によっては、序文を読むのが良い。特に海外の著作を翻訳した際に、翻訳者の序文は書籍と核心的な内容をカバーしていることがある。&lt;/p&gt;
&lt;h2 id=&#34;エッグ卵&#34;&gt;エッグ（卵）
&lt;/h2&gt;&lt;p&gt;Hugo Academicの組み込みスタイルを切り替え、サイトに公開後、アクセス時にスタイルが変更されない。賢い仲間たちはすでに解決策を見つけており、「ブラウザキャッシュをクリア」することで問題が解決する。私のような機転の利いた者：「F12開発者ツール」で&lt;code&gt;network&lt;/code&gt;タブを選択し、&lt;code&gt;disable cache&lt;/code&gt;オプションをチェックしてリフレッシュすれば、完璧！
&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>自動統合システム切り替え</title>
        <link>https://ttf248.life/ja/p/auto-integration-system-switch/</link>
        <pubDate>Sun, 29 Mar 2020 02:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/auto-integration-system-switch/</guid>
        <description>&lt;p&gt;GitHub Actions を使用して、Hugo ブログを GitHub Pages および Gitee に自動でデプロイします。&lt;/p&gt;
&lt;h4 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h4&gt;&lt;p&gt;昨日ブログを更新した際に、Travisサービスが利用できないことを発見しました。Travisのウェブサイトを確認すると、ソースコードの取得時に進捗が止まっていることがわかりました。そこで、GitHubが以前に発表していたActionサービスを思いつきました。
当時、業務が多忙であり、Actionを利用するには申請が必要だったため、現在は正式にリリースされ、週末に暇を持て余している間に、新しいおもちゃを試してみようかと思いました？
公式資料は、ご自身でウェブサイトをご確認ください。本記事では、より多くの転載を行いません。もしKubernetesをご利用経験がある場合、ActionのYAMLファイル設定がKubernetesと非常に似ていることに気づくでしょう。
入門チュートリアル、あるいは中国語の説明資料については、&lt;strong&gt;阮一峰のブログ&lt;/strong&gt;を検索することをお勧めします。2つの記事があり、1つ目は基本的な構文の紹介であり、もう1つは実際のケーススタディです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
正文
必要な知識点
- GitHub Secrets
- Action の構文
コアのジョブは既存のコンポーネントを使用して完了し、国内のGiteeにプッシュするにはコマンドを使用します。このコマンド部分は粗暴で、強制プッシュのみを実装しており、Travisを使用していた際のロジックを継承しています。

```yaml
name: github pages and gitee pages

on:
  push:
    branches:
      - hugo

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;
          extended: true

      - name: Build Github and Gitee ## 単独ステップには1つのrunコマンドしか書けない
        run: hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;gitee_public&amp;quot; &amp;amp;&amp;amp; ls

      - name: Deploy Github
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.BLOG_TOKEN }}
          publish_dir: ./github_public
          publish_branch: master
          cname: xiangtianlong.com

      - name: Deploy Gitee
        run: cd ./gitee_public &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git config user.name &amp;quot;TianlongXiang&amp;quot; &amp;amp;&amp;amp; git config user.email &amp;quot;tianlongxiang51@gmail.com&amp;quot; &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update TianlongXiang&#39;s Blog&amp;quot; &amp;amp;&amp;amp; git push --force &amp;quot;https://xiangtianlong:${{ secrets.GITEE_PASSWORD }}@gitee.com/xiangtianlong/xiangtianlong.git&amp;quot; master:master
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;付録&#34;&gt;付録
&lt;/h4&gt;&lt;p&gt;公式マーケットで提供されているactionを見ると、現在サポートされている遊び方があまりにも多い。Dockerイメージを構築すれば、Docker Hubから提供されるサービスへの依存関係もなくなります。&lt;/p&gt;
&lt;p&gt;Hugoのissueを調査すると、GitHub Actionを使ってgit pagesを自動デプロイする際に、最終的に公開されるウェブサイトがmasterブランチにある必要があることがわかります。もし他のブランチにデプロイする場合は、設定画面でGitHubはウェブサイトに構文エラーがあると警告します。&lt;/p&gt;
&lt;p&gt;これは単にHugoのソースファイルがmasterブランチにあるため、GitHubがjellyブログのソースコードとして検出し、構文チェックが通らない場合に発生するエラーです。&lt;/p&gt;
&lt;p&gt;解決策は簡単です。Hugoのソースファイルを他のブランチに配置し、静的ファイルをmasterブランチに公開します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>将来の中国は、きっと良いお爺さんやお婆さんがたくさんいる国になるだろう</title>
        <link>https://ttf248.life/ja/p/future-china-with-good-grandparents/</link>
        <pubDate>Sat, 15 Feb 2020 11:28:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/future-china-with-good-grandparents/</guid>
        <description>&lt;p&gt;二十年後に、可愛らしいおじいさんと、可愛らしいおばあさんのそばにいることを願っています。お金持ちや権力者になることにはこだわらないけれど、体が丈夫で、色々なところを旅することができるように。&lt;/p&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;Youku Search でお願いします。以降、リンクは提供されません。&lt;/p&gt;
&lt;h2 id=&#34;稿件&#34;&gt;稿件
&lt;/h2&gt;&lt;p&gt;私が10年後の素敵なご高齢者である自分を想像しています。そうありたいと努力します。未来は良いものでなければなりません。中国には、将来、多くの公民のように公民になる人、そして規則を理解し、活気のある若者が必要です。素晴らしい中国は、魅力的なご高齢者やご高齢婦人がいる国でなければなりません。私が10年後に60歳になったとしても、世界で最も若く、第三の国度に住んでいることになります。&lt;/p&gt;
&lt;p&gt;率直に言うと、皆さんが私の50歳の中国人の男性がこの体型であるなら素晴らしいと思いますが、これは私が信じていることです。越す自律（じりつ）すればするほど自由になる！雨が止むとすぐにランニングに行きます。明日の午後はサッカーをします。50歳になっても、まだ大きな試合でプレーできます。冗談ではありませんし、よくプロと一緒にプレイします。しかし、その裏には何がありますか？それは自律です。私は残りの日々をランニングに費やし、ランニングは多くの人が退屈だと感じるものです。越す自律（じりつ）すればするほど自由になるのです。私は自律することで自由に走ることができます。音楽は聴きません。なぜなら、自分の呼吸が最も美しい音楽だからです。&lt;/p&gt;
&lt;p&gt;また、私は基本的にトレッドミルを走ることがありません。北京の霧霾が非常に深刻であるにもかかわらず、私は週に5日間ランニングし、そのうち2日間は霧霾のために休むのです。そして、他の人と違う点を冗談っぽく言うと、「断続的に」走っているだけなのです。毎月、日記に自分のランニング体験を記録します。私の経験を1日ごとに描き出すもので、少なくとも18日は走り続け、ランニング中はメガネも外してしまいます。しかし、最も重要なのは、私は毎週サッカーをするということです。私の研究室の学生が最後に授業を受ける場所は、いつも私たちの家です。テーマは「楽しさ」であり、私は楽しさを非常に重要だと考えています。私は、何の楽しみや趣味もない人々と交流することはありません。&lt;/p&gt;
&lt;p&gt;敬うべき存在を遠ざけるべきです。そのような人はとても恐ろしいのです。楽しみがないと、何をしているのか分からず、私は本当に何もしていないように見えます。あなたはどんな仕事が好きですか？私の学生の一人が中国の新聞週刊紙に寄稿し、ある特集で「未来」というテーマについて書きました。10年後の私の学生が卒業するたびに、最後に彼らに課す課題は、10年後に自分自身を書いた文章を書いてもらうことです。そして、私はそれを残して、10年後に彼らに次々と提示します。私自身が50歳で60歳に書いたものを書き、60歳は私が今まで想像もしなかった遠い場所であり、地図上では存在しない場所ですが、それは私の次の20歳への道です。30歳の学生たちへの手紙は、春の情熱を伝えるものです。しかし、50歳で60歳に書くのは、秋末に独り言をつぶやくようなものです。今、私は10年後の自分に向けて、世界から少しずつ自分のベッド、食事、家族のそばを書いているのです。これは自然なことです。&lt;/p&gt;
&lt;p&gt;しかし、60歳になってどのような人になりたいか、私の目標は明確です。長い文章の中で、「快適な」序文を書いています。私が10年後の素敵なご高齢者である自分を想像しています。そうありたいと努力します。中国が魅力的になるためには、将来、多くの公民のように公民になる人、そして規則を理解し、活気のある若者が必要です。現在、60歳以上の人口はすでに2億3千万人を超えています。10年後には3億人を超えるでしょう。つまり、60歳以上の人々の人口だけで見れば、中国の人口は世界で5番目、あるいは3番目の国になる可能性があります。想像してみてください。恐ろしくないですか？&lt;/p&gt;
&lt;p&gt;私はそう思っていません。皆さんが今日オンラインで見た表が、中国の各省市直轄市の平均寿命です。上海と北京の両方が80歳を超えています。男女を合わせて平均寿命を計算しています。平均寿命は男性の方が女性よりも多いでしょう。つまり、私が10年後に60歳になったとしても、世界で最も若く、第三の国度に住んでいることになります。未来。女性が55歳で退職し、80歳まで平均寿命になる場合、退職後の25年間は活動を続けることができます。男性は60歳で退職し、80歳まで平均寿命になる場合、退職後の20年間は活動を続けることができます。ダンスだけをするのではなく、 私は60歳になったとき、最も若いチームの一員として参加しましたが、自分に何をしてほしいのか？中国画では60歳の耳は順じると言われ、信じていますが、あの頃は絶対に聞き入れないでしょう。何に喜ぶか、何に不満を感じるか、常に変化し、より重要なのは若者たちのために何ができるのか！
良いことのために何をすればいいのでしょうか？怠惰をせず、簡単に妥協せず、反対すべきことは反対し、若者が利益を損なう可能性がある場合、それを阻止することができるでしょうか？今、私はよく鏡を見つめています。私の親友である陶偉はすでに亡くなっていますが、あの頃は頻繁に集まり、私たちの家で会いました。彼は私に一度真実を語ってくれました。私たちは皆、悲しみに暮れ、陳老一代（陳老一代）のような人々は家に集まって物々交換をし、30個ものものを床下に隠してしまったり。彼らに自分の意見を伝えなければなりませんでした。「この服は500元で買ったんだ」「完了、供養のために使います」「毎日お香を焚きます」。だから、私たちの世代は親と知恵比べをする習慣があり、700元で買ったものはいくらになるでしょう？
220。しかし、それは危険です。陶偉は一度、彼の父親に400元以上のTシャツを買いました。そのTシャツは本当に良かったので、いくらでしたか？99元で買ったものを私も着ました。次の日には、夜帰ってきて陶偉に400元をあげて、私のために4枚買い直してもらうと褒められました。私はそのTシャツを着て出ると、張さんと李大爷（李大爷）たちは皆、そのTシャツが素晴らしいと思って、後に「このような嘘をつくリスクは非常に大きい」と言いました。将来、あなたはこのような老人でなくなるべきではありません。具体的な人物を挙げるわけではありませんが、病院の骨科で高齢者が骨折した原因は、地攤（地摊）で買った靴を履いたことであることが判明しました。もちろん、これは私が話している内容のほんの一部であり、年老いても精神的な生活を維持し、好奇心を持ち続け、若者たちを守るために自分自身を犠牲にすることを拒否しなければなりません。一日を楽しく過ごすことが大切です。
私は60歳になるのを待ち遠しく思っており、それは素晴らしい時が始まると思っており、感謝します。
ありがとうございました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>私は18歳で、あなた方とは少し違うかもしれません。</title>
        <link>https://ttf248.life/ja/p/my-18th-might-be-different/</link>
        <pubDate>Sat, 15 Feb 2020 11:19:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/my-18th-might-be-different/</guid>
        <description>&lt;p&gt;非常に一般的な用語である「情報断片化」。高校卒業以来、小説を読む時間を疎かにして以来、じっくり静かに一冊の本を読もうと思っていないのが長い。時々振り返ってみると、仕事をしてきた年月を感じて、自分が毎年何をしたのか覚えていられるだろうか？　多くの場合は、半年が終わる頃には、前半の出来事を忘れてしまっている。ブログを書くことは良い習慣であり、私が書く内容は多くが下品なものでも関係ない。本来は自分自身に向けて書いているものだ。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;私にとって最も忠実な読者は私自身だ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;Youku Search でお願いします。以降、リンクは提供されません。&lt;/p&gt;
&lt;h2 id=&#34;稿件&#34;&gt;稿件
&lt;/h2&gt;&lt;p&gt;それぞれの18歳は、期待と問いかけの眼差しのようなものであり、誰でも時々、自分の18歳の時に「自分は何者になりたかったのだろうか？」と自問自答します！今の時代、誰もがたくさんのSNSを持ち、友達がいなくて毎日チャットしたり、心を開く人がいなくて、知識は無限にあるけれど知恵には程遠い状況に陥っていること。人はそれぞれ自分の18歳の時に「人を騙しているのではないか？�tそれは本当に自分自身がなりたかったものなのか？」と自問自答すべきです。&lt;/p&gt;
&lt;p&gt;私は、それぞれの18歳が期待と問いかけの眼差しのようなものであると考えています。他人を騙せるかもしれませんが、自分の18歳の時の自分を騙すことはできません。今の自分が、18歳の時になりたかった姿ですか？　まあいいでしょう。物質的な成功や名声など、18歳の時よりもずっと多くのものを手に入れていますが、一方で常に「まだだ」と思っています。18歳の私は放送学院でジャーナリズムを学び、「ファラキのような最高のジャーナリストになる」という夢を持っていました。今もなおその道を歩み続けていますが、これがまさに多くの人が白先生に言っている「あなたはなぜCCTVに残っているのですか？」の理由です。ニュースは変わらず続いています。これは18歳の時の私の視点であり、だからこそ私は、誰でも時々自分の18歳の時に「当初自分は何者になりたかったのだろうか？」と自問自答すべきだと考えています。&lt;/p&gt;
&lt;p&gt;これは真に他人を騙すことはできません。これは18歳の時の私自身の姿です。あっという間に32年の歳月が流れました。北京大学に入学する学生たちには、必ずこの一枚の写真が残ります。あの時代、天門広場に身につけていた皺くちゃのスーツ、胸元には校章を付けていました。なぜなら、当時の大学生は少なくて校章を付ける必要がないからです。とても誇らしかったのです。その頃の髪は長く、18歳の時の自分自身をとても愛していました。長い年月が経ってから、私は18歳の時に直面したものを振り返り、感謝しています。なぜなら、それは静かに私を形作ってきたからです。1986年5月8日、王府井書店で朦胧詩集を購入しました。その年に国体（中国国家体育館）で崔健の「一无所有」を聴き、今、私は自分の文章スタイルが最も影響を受けたことを突然気づきました。包括的に、私の性格も朦胧詩、ロック音楽、古龍の武侠小説の影響を受けています。&lt;/p&gt;
&lt;p&gt;18歳の時、あなたはどんな経験をしましたか？ それらを持ち込んで道を歩むことができます。今日の18歳はどんな経験をしているのか、特に知りたいです。まるで刀で彫刻するように、一筋縄ではいかないのでしょうか？ 彼はどんな道具を使って、どんな姿にあなたを磨き上げているのでしょうか。今の18歳がたくさんのSNSを持ち、友達がいなくて毎日チャットしたり、心を開く人がいなくて、知識は無限にあるけれど知恵には程遠い状況に陥っていること。誰もが「個性」を語るように見えますが、私のような傍観者からすると、今の若者はとても似通っています。どうすればいいのでしょうか？ 18歳の時に彼らにどんな経験をさせればいいのでしょうか？ 私は1986年をとても好きです。なぜなら、1986年は1966年を解決するための最良の方法だからです。&lt;/p&gt;
&lt;p&gt;1966年の文化大革命は、76年に四人帮を打倒することで終わりました。それは偶然であり、1986年の啓蒙と人間の目覚め、そして個人の成長によってのみ、あなたが心配する根本的な問題を解消できるのです。中国社会が経済的にどれほど進歩し変化しても、人間性を理解するための「一刻」が補えない限り、人性をコントロールし悪の部分を抑制し善の部分を活性化することはできません。未来には依然として多くの懸念事項があるでしょう。だからこそ、私の18歳の時もこの時代の18歳でした。遠くまで行きましたが、当初の出発点に立ち返らずにはいられません。今は「初心」という4つの言葉に凝縮されています。&lt;/p&gt;
&lt;p&gt;だからこそ、どんなに遠くへ行っても、人はそれぞれ自分の18歳の時に自問自答すべきです。18歳の時の写真を撮っておき、定期的に見返すのは良いことです。他人の意見は関係ありません。人を騙すのは簡単ですが、自分自身を騙すのは非常に困難です。私が今20歳の人に言うことは、あなたは常に自分の18歳の時を観察する一&lt;/p&gt;</description>
        </item>
        <item>
        <title>この社会にはどのようなジャーナリストが必要でしょうか。</title>
        <link>https://ttf248.life/ja/p/what-kind-of-journalists-does-society-need/</link>
        <pubDate>Sat, 15 Feb 2020 11:08:38 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/what-kind-of-journalists-does-society-need/</guid>
        <description>&lt;p&gt;記者の職業に対する筆者の見解を述べ、記者には社会の良心、知識、そして長距離走のような粘り強さが必要だと強調している。また、50歳の時の自身の洞察も共有し、好奇心の維持、物質と精神のバランス、そして未来への考察について語っている。&lt;/p&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;Youku Search でお願いします。以降、リンクは提供されません。&lt;/p&gt;
&lt;h2 id=&#34;転写&#34;&gt;転写
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最好的记者首先要有社会良心，其次要有知识储备，第三是持久力。我不能只跑100米觉得不够瘾了，就跑了。我认为这三者结合，人们期待的是疫苗安全的问题彻底解决掉，就像当初的奶粉事件一样，总是先出了问题、再解决问题，彻底解决问题的这种逻辑循环中前进。否则记者要干什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;稿件&#34;&gt;稿件
&lt;/h2&gt;&lt;p&gt;まず、一番良いジャーナリストは社会良心を持っていることだと思われます。次に知識を蓄えていることが重要で、そして長距離走も、100メートル走るのに飽きたら、やってみなければなりません。これらの三つが組み合わさって今年50歳になったので、あなた方は私がニュース業界に合う理由を理解できたと思います。私は中国の改革40年と密接に結びついており、30歳の誕生日に松花江の岸辺で、40歳の時に2008年のオリンピック中に入り、オリンピック中に出ることができました。今年50歳になり、全国的に改革開放40周年を記念しているので、確かに対応があります。大時代が40歳、中国の改革40歳は惑っているのか、混乱しているのか？&lt;/p&gt;
&lt;p&gt;40年もの道のりを歩んできた中国は、物質面で多くの人々や国家に十分なものを与えてきました。しかし、不安や混乱が増え続けており、強大で豊かなだけでは良い結果が得られるとは限らないのです。アメリカもあなた方の高科技を攻めていますから、私たちは農産物を輸出する必要があります。この世界には「二番手は簡単ではない」という言葉があります。アメリカでは修理した2台がどれくらいあるでしょうか？したがって、私たちが長い年月を経て、二番手を超越する存在になる必要があります。私は全てを得られるわけではありません。&lt;/p&gt;
&lt;p&gt;幸運なことに、25歳の時にテレビに出始めたところ、まず人物インタビューから始めました。私は数百人、数千人の光環を持つ人物に接触し、若かりし頃は光環が彼女たちを幸せにするものだと考えていましたが、近づいてみるとno、光環と彼女たちの幸福には関係がないことや、むしろ逆の関係にあることもありました。最近、郭沫若の最後の29年を読んだのですが、郭沫若はほとんど苦労せず、国务院副副总理、什么政协副主席、副委员长などの地位に就いていたにもかかわらず、自分の息子が自殺し、もう一人は屋上から投げ落とされて死んだのです。彼は幸せだったでしょうか？&lt;/p&gt;
&lt;p&gt;幸福を測る基準は何ですか？67歳になった時に、連なるようにして二人の息子を失うことは、彼女にとって幸福と言えるのでしょうか。名画や安全な生活は幸福をもたらすことがあります。ですから、私は人を見るのが、最も良い鏡だと考えています。少し重点を置いて言うと、今の多くの人が不安を感じているのは、考えすぎ、読書が少ないからです。これは楊绛老人が若い人に答えた言葉です。読まなければ快餐しかありません。スマートフォンで大力丸を探すなんて、ありえません。私は本を読みながら、ゆっくりと賢くなることを学びました。減算は、本を読む量が増えるにつれて行われる減算です。&lt;/p&gt;
&lt;p&gt;ですから、私は全ての人に期待するわけではありませんが、その割合が増えることを願っています。より多くの中国人たちが読書を通して自分自身を向上させることを目指すべきだと考えています。それが最も重要です。誰も地上で星空を見上げて、全てのことを理解しようとするわけではありません。私は鏡を見て、数年前のBBCニュースの司会者が北京に来て、BBCで最も優れたニュースの司会者だと言われ、中国のニュースの司会者と対談しました。その人は対話の中で私に質問をしました。「あなたはBBCがCCTVから何を学ぶべきだと思いますか？」私はまず冗談を言いました。「もちろん、まず中国語を学ばなければなりません。」&lt;/p&gt;
&lt;p&gt;次に冗談を言うと、「BBCは世界に対する好奇心を持つことを学ぶべきです。」私たちはここ数年で急速に世界に行き、さまざまな報道局を設立しました。現在、私たちの学生が海外の新しいものを見ると、非常に興味を持ちます。私たちは大きな好奇心を持って世界を観察し、BBCはすでに英国自体を世界として考えています。彼らは拍子で言いました。「あなた方が不足しているのはこのことです。」2007年に日本を取材した作家が私にこう言いました。「日本の国は希望がない以外、残りのものはすべてあります。」後に理解しました。これは本当に深い言葉です。逆の角度から言うと、10年前には中国は希望がある以外、残りのものが不足していると思っていましたが、今は希望があります。誰も前方に進んでいることを感じています。&lt;/p&gt;
&lt;p&gt;しかし、いつか私たちが希望を失った富裕な国になってしまうのではないかと心配しますか？ 坦白地说，我非常担心中国走到一天是负的，什么都有的时候才觉得自己真穷，我50岁的时候就唯恐自己成为一个一切物质条件都可以得到满足，却成为一个非常贫穷的人。在我们的现实生活中，高学历的、没文化的人很多，存折上有无数个数字的穷人很多，这才是这个时代的问题。真穷是不可怕的，因为前面有奔头有希望。这就是我说道德赤字和人性亏损的原因所在，所以我觉得科学家之所以发明了很多的东西，不是说一开始就承载着伟大的什么使命等等，我觉得好奇。&lt;/p&gt;
&lt;p&gt;好奇我能弄出来他吗？所以我始终在50岁左右的时候就开始督促自己要更好奇，所以我都很开心，我现在很烦的一件事就是坚持，刚才聊天的时候在说您还在坚持，我说别我说一旦坚持离死不远了。过去我们都说坚持就是胜利，中国足球只要坚持黑色三分钟，坚持就咬牙了，没乐趣了就靠坚持了，坚持有的时候很重要，但是相当多的时候这句话要有AB面。我很怕我在做一件某件事情的时候是坚持，比如说这会跟大家聊天的时候，我就坚持把剩下说完，其实到现在我的时间都到了，可是我觉得好奇，跟大家的交流，我会说成什么样？&lt;/p&gt;
&lt;p&gt;给自己一个很小的关键词，但是你自己跟跟大家的互动去聊天，我觉得在50岁的时候，只要你还能保有很大的好奇，没问题，我喜欢所有好玩的东西，但不一定跟现在最好玩的东西，今天的时髦有可能一转眼。每年都有流行词，您还记着几个？今天的互联网某个媒体可能10年后是传统媒体想过吗？所以好玩的东西永远有它好玩的内在的东西，我尊重每一个大家的喜欢，那一定有他的道理，但是长期下来看，最后发现中国人最喜欢的还是打麻将，当你也喜欢吃快餐的时候，做大菜的饭馆自然会慢慢的倒闭。&lt;/p&gt;
&lt;p&gt;很多东西不仅仅是发个感慨就过了。您每天让在手机碎片化的阅读是多少？您长一点的阅读有多少？但是这也是一个过程，手机正在成为我们的手铐。所以我觉得看越短的东西多，慢慢人也会变得短视，但这也是一个过程，我从不担心内容为王。还会回来，您会每天娱乐至死，一直到自己的40岁，就像我看见十几岁的孩子喝可乐，你劝他少喝一点，但你知道他一定会喝，但是另一方面我又乐观，40岁他一定会回到茶的世界里来，这就是中国人的一生。&lt;/p&gt;
&lt;p&gt;很正常，但是我希望接下来的转变会更快一点。我们就是发个感慨，现在的调查记者这么少了，您不看调查了。
谢谢各位。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>20年後の中国サッカーはどうなるでしょうか？</title>
        <link>https://ttf248.life/ja/p/china-football-in-20-years/</link>
        <pubDate>Sat, 15 Feb 2020 10:59:32 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/china-football-in-20-years/</guid>
        <description>&lt;p&gt;以下是翻译后的日语文本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;読後感の補足は、ほとんどが2021年に随筆したものであり、白岩松先生の講演稿を文字に起こす作業は、ちょうどコロナ禍が始まった頃でした。二十年後のことや、一年後、二 χρόνια後のことなど、世界の変化は常に人々の予想を上回ります。現在、国内のコロナ禍は終息しつつありますが、海外の疫情は依然として騒がしいです。サッカーについては、数年前から中国代表がよくプレーしていました。コーチも積極的に攻撃を許容し、かつての無邪気な頃に比べると、老人に付き添って観戦することは少し意味がありました。ある国家チームの試合でさえ、おじいさんはチャンネルを変えたいほど飽きてしまうのです。それはどのような経験なのでしょうか？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;Youku Searchでお願いします。以降、リンクは提供されません。&lt;/p&gt;
&lt;h2 id=&#34;転写&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;あなたはまだ中国サッカーに興味がありますか？興味があります、非常に興味があり、さらにどうなることが可能でしょうか？だからこそ、中国サッカーが良くない理由がたくさんあることに気づき、その一つは、誰かがボールを落として自分のところに返ってくるのを恐れ、他の人にパスしてしまえばそれで終わりだということです。そのようなプレー法がないのです。&lt;/p&gt;
&lt;p&gt;もちろん、これはほんの小さな原因に過ぎません。20年のサッカー、20年後の中国サッカーはまるで遠い未来のように感じられます。最初の拡大で48チームになり、中国が参加する可能性も、参加しない可能性もあります。ある国の代表チームにとって最適な年齢は26～30歳ですが、20年後には現在6歳から10歳の子供たちがいます。20年後に楽観的に考えるのは当然ですが、20年後は必ず成功すると言っても、私が今日6歳から10歳の子供たちについて話すと、すぐに表情が厳しくなります。因果関係、種を蒔けば豆が育つように、私たちは今日何を育てているのでしょうか？今日、リーグ戦でプレーする代表選手を育てるためにほぼ種を植えているのと同じことを、私たちは何を生み出しているのでしょうか？誰かがその動きに出ると、すぐに退場処分になる準備をしなければなりません。これは規則に反するので、私はそれほど深く考えませんでした。&lt;/p&gt;
&lt;p&gt;しかし、真剣に考えるべきは、今日6歳から10歳の子供たちがサッカーをしているかどうかということです。あなたがそう思うように20年後の中国サッカーがどうなるかを知ることができます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>倫理的欠如、人性的喪失</title>
        <link>https://ttf248.life/ja/p/moral-deficit-humanity-loss/</link>
        <pubDate>Sat, 15 Feb 2020 01:20:34 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/moral-deficit-humanity-loss/</guid>
        <description>&lt;p&gt;まず、何かをすることにおいては、心が清々しくなければなりません。そうすれば、安心して眠りにつけ、些細な病気や根本的な問題について、誤った判断をする心配がありません。もし間違えてしまったとしても、それを隠蔽したり、忘れようとしたりするのではなく、できる限りの努力をして救おうとすべきです。記憶力が良い種族もいますが、心が安らかであることは、帰る場所であり、自分自身に問いかけても答えられるような、穏やかな生活を送る上で重要です。&lt;/p&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://v.youku.com/v_show/id_XNDI5MzA4NjQ4NA==.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;動画の元のリンクはこちらをクリック&lt;/a&gt; 、著作権侵害の場合は、ご連絡の上削除してください。この文書は単なる文字起こし翻訳のみを目的としています。&lt;/p&gt;
&lt;h2 id=&#34;稿件&#34;&gt;稿件
&lt;/h2&gt;&lt;p&gt;私は八つの字を言い、それが重いと感じています。今私たちは道徳的な赤字と人性的欠如に陥っており、時代は問題が発生するたびに解決策を見つけ出し、完全に解決するための論理的なサイクルの中で前進していく必要があります。あなたは忍耐を持ってその洗練を待つべきです。中国のような国にとって、多くのことはゆっくりとした洗練プロセスであり、絶望的にならず、洗練に専念する必要があります。&lt;/p&gt;
&lt;p&gt;ここ数日間、中国は二つの台風と戦っています。一つは形のないものであり、もう一つは形のあるものです。形のない台風はワクチンであり、それは私たちの内なる安全の堤防を打ち砕こうとしています。もう一つの台風は上海から上陸したことがほとんどなく、北京や天津が被害を受けることはありませんでした。これは脇の話です。次にあなたは、自分自身のために善を行うこと、そして大きな変化を起こし、多くの答えを持つことを考える必要があります。周囲の環境が変わらない場合、あなたは幸せですか？私は八つの字を言い、それが重いと感じています。今私たちは道徳的な赤字と人性的欠如に陥っており、これが現在最大の赤字と最大の欠如です。&lt;/p&gt;
&lt;p&gt;しかし人々はワクチンが安全上のリスクを完全に解決することを期待しています。これは当初の粉ミルク事件と同じであり、時には歴史を見ることが重要です。また、米国食薬局の設立と形成における包括的な法律も、当初の粉ミルクや乳製品の不安全に関連しています。三鹿粉ミルク事件は中国を乳製品分野で大きな変革に導き、ワクチンは次々と問題を引き起こしましたが、今回は中止されることを願っています。あなたは時代が問題が発生し、解決策を見つけ出し、完全に解決するための論理的なサイクルの中で前進していくことを知る必要があります。そうでなければ、ジャーナリストは何をするのですか？そうでなければ市民は何をするのですか？&lt;/p&gt;
&lt;p&gt;ですから、私は私たち一人ひとりができることは関心を持つことです。しかし中国の人々は簡単に忘れてしまいます。私が言ったように、誰かの車にぶつかってから走り去り、他の人は誰もそれを阻止しません。私たちの隣人や同僚の多くは、そのような人々です。ですから、ゆっくりと変化していく必要があります。そして私のような普通の市民ができることは、彼らに注意を払い、忘れないことです。私はそれが何かを欠いているのではなく、飢えや寒さの中で理想について毎日議論することではないと思います。説得力がないかもしれませんが、彼らが満たされたとき、世界で一番糖尿病患者が多く、高血圧患者が多い国になってしまうのです。そして中国人が走り始め、ダイエットを始めるのを見て、座っている各位の女性は、誰が一度も食事に困った経験をしたことがありますか？それは私です。少し変化があります。&lt;/p&gt;
&lt;p&gt;精神的な側面も同じ原理に従うべきです。満腹になったら走り始め、ダイエットをしなければならないとき、精神的なニーズもそれに伴って増大します。例えば、以前はタバコを吸っていました。しかし、ランニングを始めた後、突然20日以上タバコを吸っていませんでした。私はそれを完全にやめようとしなかったからです。それはあまりにも儀式感がありすぎます。年に数本吸うこともあります。生活習慣が変わるにつれて、多くのものが変わります。中国人の場合、忍耐を持ってその洗練を待つ必要があります。&lt;/p&gt;
&lt;p&gt;ますます多くの人が自分自身が幸せではないと感じています。抑うつ状態が増加していますが、一方で、より多くの人々が積極的に生きる方法を探しているという事実もあります。このとき精神的な側面は成長します。だから絶望しないでください。同じ出来事をどのように見るかによって異なります。私は通りで車を追い越し、落胆しますが、すぐに反対側に並んでいる人がもっと多いことに気づき、楽観的になります。これはまさにそのプロセスです。座っている各位が雨上がりの夜にこのような無駄なことを話すこと自体は楽しいことではありませんか？&lt;/p&gt;
&lt;p&gt;これはまた変化であり、多くのことを別の方法で考える必要があります。もちろん、将来的に成長するものはたくさんあります。例えば、起業について言えば、誰の人生も起業ではありませんか？蘇軾は起業しましたか？李白は起業しましたか？&lt;/p&gt;
&lt;p&gt;&amp;mdash; - 成功事例の創出（そうせいひれいのごうしゅつ）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深層学習（しんそう gakushū）&lt;/li&gt;
&lt;li&gt;ニューラルネットワーク（nyuraru nettowāku）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（以下、原文の内容を日本語に翻訳します。）&lt;/p&gt;
&lt;p&gt;人生にはたくさんの挫折があるだろうが、最終的に自分のブランドを生み出すことができたからこそ、ほとんどの挫折は関係ない。大切なのは、生きている間に十分な味わいを持ち、自分にとって価値のあるものだと感じることだ。今の私は、中国特有の欠如しているのが、良い失敗を別の成功として捉える価値観だと思っている。中国人たちは成功した結果だけを受け入れるが、反対に良い失敗も成功と見なさない。&lt;/p&gt;
&lt;p&gt;それが難しいと感じるからこそ、中国サッカーがうまく機能しない原因の一つは、誰もボールを失うことを恐れず、自分からパスをすることさえ避けるという点にある。そのような戦略がない限り、もちろんこれはほんの一つの要因に過ぎない。だから私は、30歳を超えてからは、序論でさえも透明な喜びや、すぐに実現できないことなどを書き記すことに焦りを感じるようになった。そして50歳になると、時間が過ぎ去っていくのが非常に早く、期待していたものがまだ現実にならないことを理解するようになった。しかし一方で、中国のような国にとって、多くのことはゆっくりと洗練されていくプロセスであることも理解している。親の世代の中には、赤や緑の信号が全く意味を持たないものもいるが、時折子供が父親を引っ張るのを目にする。変化し、洗練される。だからこそ、私は忍耐が必要だと考えている。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>時間の経過についてですが、答えを見つけるには多くの本を読む必要があります。</title>
        <link>https://ttf248.life/ja/p/about-time-and-books/</link>
        <pubDate>Fri, 14 Feb 2020 07:27:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/about-time-and-books/</guid>
        <description>&lt;p&gt;国家全体として、より良い方向へ、富強さを増していく傾向にある。もし人々の虚栄心がなければ、そうした変化を理解しやすくなるだろう。1990年代から現在にかけて私が見聞きしてきた家庭においては、皆さんの生活水準は以前に比べて格段に向上しており、同時に富裕層も増加している。市場経済の発展に伴い、避けられない貧富の差拡大も生じている。&lt;/p&gt;
&lt;p&gt;人々が言う「階級固化」「上昇通道の閉塞」といった現象は、現代社会における共通の問題である。中国共産党が人民の基本的な生活水準や社会保障に貢献してきたことは、皆さんが認識すべきだろう。子供たちの教育資源の不均衡問題や、より良い仕事機会や環境、あるいは家族との時間を優先するかという選択など、個人の考えを他者に押し付けるべきではない。特に子供や家族に対して。&lt;/p&gt;
&lt;p&gt;静かに話し合い、生活は着実に向上していく。&lt;/p&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://v.youku.com/v_show/id_XNDI5MzA4NjcyNA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;動画の元のリンクはこちらをクリック&lt;/a&gt; 、著作権侵害の場合は、ご連絡の上削除してください。本記事は単なる文字起こし翻訳のみです。&lt;/p&gt;
&lt;h2 id=&#34;三十歳&#34;&gt;三十歳
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/about-time-and-books/30%E5%B2%81.jpg&#34;
	width=&#34;896&#34;
	height=&#34;503&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;30歳&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;
今年、私を含めるとちょうど50歳です。過去は、自分にとって「老頭（おじいさん）」だと思っていたことがないのですが、今になって本当に老頭だと気づきました。これは30歳頃の自分です。30歳になると、自分が若く、とても良く見え、素敵だと思っていましたが、50歳になると振り返ってみると、それなりに良い方へ向いていると思います。30歳で人生で最も感じた最大のことは何でしょうか？　振り返ってみると、「減法（かんぽ）」だと感じます。キーワードは「減」です。ある意味では、「痛並快樂着（つねるなかれがくしゃつ）」も一種の「減」であり、色々なことを経験して、それを言葉にして残し、新しい白い紙やランニングに挑戦します。しかし私にとって30歳は、自分自身だけでなく、皆さんのためにしても、本当に「減法」をすることは非常に重要だと感じました。&lt;/p&gt;
&lt;p&gt;今、私は大学生のビッグプロジェクトを担当しており、彼らに30歳になる前には「加法（か）」を最大限に行い、様々なことに挑戦するように促しています。あなたは自分の可能性や運命がどのようなものなのか分からないので、思いっきり試すべきです。結果がどうなるかは分かりませんが、それでも多くの人は20代に必死に「加法」を積み重ねていきますが、いつまで経っても「減法」を忘れてしまうのです。30歳頃は人生において非常に重要な時期であり、「加法」と「乱走（らんそう）」をしてきた後に、「減法」を行うべき時期です。もし遅れれば、後悔することになります。なぜなら、全てがあなたに合っているわけではなく、合うものもたくさんあるからです。&lt;/p&gt;
&lt;p&gt;8本のロープがあなたを縛り付けている場合、どれだけ走り進めるでしょうか？　それは互いに牽制し合う可能性があります。
&lt;img src=&#34;https://ttf248.life/p/about-time-and-books/%E5%BB%89%E4%BB%B7.jpg&#34;
	width=&#34;896&#34;
	height=&#34;505&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;廉价&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;
30歳になると、私は「格上げ（かくあげ）」されたことになります。つまり、学術的には教授、「ジャーナリスト」としては高級ジャーナリストです。29歳の時に格上げされ、今でも稀なことです。しかし同時に大きな混乱も感じました。2000年のシドニーオリンピックの時の掌声はたくさんありました。私は突然「自分は何をすべきなのか？」と自問するようになりました。捨てるべきものは何か？　その年に私が行った最も重要な「減法」は、番組を打ち切ることでした。1年間出演せず、海外に出ることもなく、当時、「司会者」の仕事は、月に一度でも出鏡すれば十分だと言われました。半年以上出鏡しなければ誰も覚えてもらえないと告げられました。私は自分の顔が「廉価（けんか）」だと言いました。&lt;/p&gt;
&lt;p&gt;その年に番組を打ち切って、新しい番組を開発することにしました。これは「痛並快樂着」が終わった後、01年の1年間番組を打ち切ったことに繋がっています。今日私が歩んでいる道全ては、あの時の「減法」を感慨深く思っているからです。当時、私は多くのことができると思っていましたが、スポーツもできますし、E（インターネット）もできますし、色々な面白いことをしたり、制作人として活躍することもできました。しかし、「ニュース」をするのが一番だと考え、突然3つの番組の制作人を辞めて、今日のような自分になったのです。純粋な気持ちでした。先日、同僚と話している時に、「30歳頃に私が決めた非常に重要なことは、色々なことができるにも関わらず、私はニュースをすることを選んだことだ」と話しました。この決断は、副主任になる可能性のある普通の人よりも優れているものでした。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/about-time-and-books/%E6%9C%AC%E7%A7%91%E7%94%9F.jpg&#34;
	width=&#34;896&#34;
	height=&#34;502&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;本科生&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;428px&#34;
	
&gt;
今も中央电视台の幹部であり、必ずしも大学生出身ではありません。皆さんが私たちの体制を理解していることを知っていますが、私はそれを拒否しました。私は見てみたいと思っていました。大学生はどれくらい進めることができるのか？　大学生の学歴は、常に学習し、研究生に指導するまで、その可能性を追求できますか？　もちろん、今も研究生を指導しており、毎年11人を指導しています。これは「減法」の結果です。もちろん、これは振り返ったものです。若い頃には、奔波の中で、「全てにおいて私は得られるべきだ」と考えることがあり、もし何か一つでも欠けていることや、何か一つのことが完璧でなければ、とても不快に感じていました。&lt;/p&gt;
&lt;p&gt;皆さんも、ぜひ「減法」を学んでください。30歳になる前に、28歳の時に1996年のオリンピックを見て、「缺陷 月がまだ満ち欠けしていない時ほど素晴らしいけれど、常人から見ればそれは欠陥であり、完璧でなく、究極に達していないとしか思えない。人の人生を台無しにする最も効果的な方法は、彼に完璧を求めさせ、究極を目指させることだ。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;%e8%8a%b1%e3%81%8c%e5%ae%8c%e5%85%a8%e3%81%ab%e5%92%b2%e3%81%8b%e3%81%aa%e3%81%84.jpg&#34; &gt;花が完全に咲かない&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この世界はそうではない。花が完全に咲く前こそ最高だ。満ちた花には、すぐに散りゆく運命が待っている。月もまた同様で、満月に近づくと、次第に薄れていく残月へと変わるのだ。だからこそ、私はこれが30歳の私にとって非常に重要な推進力と啓示だと感じている。40歳はあの頃ほど美しくない。しかし、リラックスし、自由になれたと感じたからだ。なぜ、またスーツや革の着こなしに戻らず、幸福を問うべきではないのだろうか？&lt;/p&gt;
&lt;h2 id=&#34;四十岁&#34;&gt;四十岁
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/about-time-and-books/40%E5%B2%81.jpg&#34;
	width=&#34;894&#34;
	height=&#34;499&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;40岁&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;
中国人有一句话说40不惑，30岁是减法，40岁是困惑，不是不惑。我觉得现在这个时代40岁恐怕困惑的是最多的。我的中年危机来的还偏偏很早，到三十六七岁的时候就开始纠结，我干的这一切有价值吗？
有意义吗？我到底要什么幸福了吗？这本书就是在这个困惑的基础上诞生出来了，在30岁的时候你会发现你的很多幸福目标是与物质挂钩的。三十而立力指的是学历得立。你得有车有房，要不丈母娘都不打算把你媳妇许配给你，很物质，但是40不惑很难。我觉得古人可能是平均预期寿命比现在长，因此它要浓缩40，他就不惑了。我觉得我40正困惑了，&lt;strong&gt;物质没有给我带来，我以为会带给我的幸福&lt;/strong&gt;。同样在40岁的时候，之所以很多人问我，你幸福吗？
我那书名是幸福浪吗？是问号，代表的是我内心的困惑。中年危机的诞生，40岁你要去回答自己很多的问号，40岁左右要多跟自己聊聊天，要去读很多的东西，给自己一些答案。我很庆幸在我三十六七的时候走进了《道德经》的世界，我在《白说》里头已经谈到，在40岁的时候还要去思考的时候，如果周边的环境不发生改变，尤其是软环境，您心情舒畅的走出家门，到处是乱闯红绿灯的，你买个东西都是假的，打个疫苗。
我说这两天中国都在跟台风两个台风做斗争，一个台风是无形的，一个台风是有形的，无形的台风就是疫苗，它冲击的是我们内心安全的堤坝。 另一个台风，中国很少有从上海登陆的台风，这是题外话，接下来你就要去思考的是，你独善其身，你发生了很大的变化，你拥有了很多的答案，周围的环境不变化，你会幸福吗？&lt;strong&gt;我有八个字说得比较重，我觉得我们现在是道德赤字人性亏损，这才是目前最大的赤字和最大的亏损&lt;/strong&gt;。前些天就在离这不远，我亲眼见到了两个车相撞，其实撞的没那么严重，该负责任的，因为他撞了另一个车，跟人家说咱停到路边，人家好也慢慢说准备停到路边了，前面的车撒丫子跑了，一车人也没有拦着他的。
这会是一个负责任的父亲吗？这会是一个负责任的儿子吗？更不要说他怎么会是一个负责任的公民，而他可能是您的同事，这就是道德赤字和人性亏损也，必然会影响到你。你不管自己是多么一个大写的人，除非你足不出户，但问题是，足不出户也不妨碍您的孩子要打疫苗，您送外卖，那外卖也有可能有问题！
所以中国人如何学会由一个小老百姓变成一个公民，这可能是在我40岁的时候，既问给自己这个人，也问给社会的一个重要的命题。
如果说30岁是减法，40岁是困惑，我觉得50岁应该是我送给自己的词是好奇，50岁很尴尬，前不着村后不着店，进、可攻；退、要混，也可以。在自己取得的某种东西上躺10年，混到退休也似乎可以。
最近看一本书，其中一本书上写得非常有意思，说在硅谷里真正成功的创业者，五六十岁的偏多，这跟我们的概念是不同的。中国如何什么时候能够不把创业全部当成年轻的事业，就跟中国不该把志愿者都当成青年志愿者一样。上一周我做了一期节目，是中国马上要招募退休的中小学教师，每年有二三万块钱的补助，然后去乡村当老师，而且必须是优秀的。我说这正是开启了退休后再就业的先河，当然不光是慈善了，但是回到50，离那块还有点距离，你怎么去向前走？&lt;/p&gt;
&lt;h2 id=&#34;五十歳&#34;&gt;五十歳
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/50%e6%ad%b3.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;50歳&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;50歳の人にとって、最大の課題は2つあります。1つ目は自分自身です。まだ色々なことに興味があるでしょうか？ 人生観はどのようなものですか？ 私自身の50歳の最大の収穫、あるいは今私が生きるやり方は、&lt;strong&gt;今日を大切にするということです。20歳の頃は未来ばかりを考えてしまいがちですが、50歳になると過去ばかり思い出すことがあります。しかし、私は自分を抑え込み、未来も過去も気にせず、今日を大切に生きています。50歳の人には、いつも「明日になったら…」とか「昔は良かった…」と言わないように。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今日なら蔡琴のCDを聴くのが良いだろうと思います。蔡琴が言った言葉の一つがとても良いものです。「写真を見るたびに、2年前の自分の方が綺麗だったと思うけど、2年前の一日も、自分が綺麗だと思っていたことは一度もない。」本当に味がありますね。30歳の頃はそう思っていませんでした。あの頃は自分の欠点ばかり気にしていたけれど、今振り返ってみると…。&lt;/p&gt;
&lt;p&gt;「私も若いんだ」「髪が多かったな」と、過去を振り返ることで、今日を大切に生きる意味が見えてきます。2年後に今の自分を見返して考えるのは、きっと良いことだと思います。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;史铁生さんが言った言葉のように、私の足が動かなくなった時、私は輪椅子いて毎日、走ったりバスケットボールをしたりした日々を懐かしみました。毎日、懐かしむことでとても苦痛でした。
それから数年後、輪椅子いて褥瘡（ろくそう）になって全身に痛みがありました。その時は、以前何も痛わなかった静かな輪椅子いて過ごす時間を懐かえました。
さらに数年経って、私は尿毒症（にょうどくしょう）になり、透析（とうせき）を受けていました。その時、私は褥瘡だけだった輪椅子の時間に戻りたいと思いました。もし、今日を大切に生きることができなければ、残りの50年は無駄になってしまうだろうと。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;五十歳-1&#34;&gt;五十歳
&lt;/h2&gt;&lt;p&gt;実は50歳になってからこの道理を理解するのではなく、30代、40代で理解するのが良いと思います。旅行の一食も、食べなければ30年後に食べることになるでしょう。味もわからないかもしれません。だからこそ、今日という日を大切にすることを知ったのは、50歳になった時のことです。&lt;/p&gt;
&lt;p&gt;2つ目は好奇心です。私は、見すぎて、経験してしまって、多くのことに興味を持つのをやめることはできません。むしろ、自分自身で好奇心を刺激するようにしています。今取り組んでいることにも、常に好奇心を持って取り組んでいます。例えば、携帯電話を立てて写真を撮ってもいいのか、会議に参加してもいいのか、オンライン接続はスムーズに行えるのか、もっと面白く、より印象的なものにしたいと考えています。そして、新メディアを使って発信することも可能です。好奇心こそが、人類の進歩を促す最も重要な原動力です。なぜ、個人を促す最重要動力にはなりえないのでしょうか？ある民族が好奇心を失うと、その民族は衰退します。&lt;/p&gt;
&lt;p&gt;さらに大きな視点として、50歳は重要な試練です。40代、50代になると、中国で「既得利益者」とは何でしょうか。私自身を取り巻く多くの人が、若いうちに夢を追いかけるのは素晴らしいことですが、夢を実現したら「既得利益者」になり、他の人が夢を叶えるのを妨げるようになった場合を考えると心配です。以前は嫌っていたやり方で若い人たちや物事に対処するようになります。&lt;/p&gt;
&lt;p&gt;だからこそ、数年前からボランティアとして毎年11人の大学院生を受け入れ、2年ほど育成してきました。現在、5期目となり、すでに55名の純粋な大学院生が卒業しました。既得利益者になることは素晴らしいことです。ある経験や能力を活かして若い人たちを導き、授業の後に食事をご馳走したり、少額のお金を使えば十分です。しかし、これは良い既得利益者がすべきことです。既得利益者は、2つの側面から存在します。一つは、新たな人材に道を切り開く役割です。「私を助けてくれた人に感謝を言うのはいいけれど、感謝の言葉で阻むべきではない」と私は以前から言っています。もう一つの側面は、他の人のために道を切り開くことです。中国において、物質的、経済的、思想的、文化的など、あらゆる分野の既得利益者がなったとき、どのように行動すべきか考える必要があります。昨日、押し車を引いていた人が、今度は列車を止める立場になるかもしれません。中国の歴史には、このようなことが何度も繰り返されてきました。しかし、そうではありません。時には、もっと多くなることもあります。だからこそ、すべての既得利益者が、若い頃のように希望を持って行動するよう呼びかけています。私が十分に良いことをできなかったとしても、考えて、行動し、発言することを心がけています。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>標準ライブラリコンテナのメモリ割り当て子：allocator</title>
        <link>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</link>
        <pubDate>Mon, 30 Dec 2019 13:26:19 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</guid>
        <description>&lt;p&gt;カスタムディストリビューターは、パフォーマンスを向上させ、メモリ使用効率を高め、頻繁な少量のメモリ割り当ての問題を解決できます。&lt;/p&gt;
&lt;h4 id=&#34;前因&#34;&gt;前因
&lt;/h4&gt;&lt;p&gt;近頃、ネットワークパケットの開発に携わり、頻繁に小さなメモリ領域を申請し解放する必要があり、当初はメモリプールを使用することを検討していました。いくつかの既存のメモリプールを確認したところ、この
&lt;a class=&#34;link&#34; href=&#34;https://github.com/cacay/MemoryPool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cacay/MemoryPool&lt;/a&gt;
を見つけました。インターフェースを見たとき、このメモリプールの実装が少し奇妙だと疑問に思いました。「MemoryPool」の実装ロジックは、固定サイズのメモリ領域を申請することです。boostのメモリプールインターフェースを見てみると、テンプレートを提供し、使用時にインスタンス化します。ちょうどこのライブラリには、&lt;code&gt;allocator&lt;/code&gt;という概念について言及した記事があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;#### [wiki](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))

C++プログラミングにおいて、割り当て子（英語：allocator）はC++標準ライブラリの重要な構成要素です。C++のライブラリには、リスト、集合などのように、さまざまな「コンテナ」と呼ばれるデータ構造が定義されており、これらのコンテナの共通の特徴は、プログラムの実行時にサイズを変更できることです。この機能を実装するために、動的メモリ割り当てが必要となります。割り当て子は、これらのコンテナがメモリへの割り当てと解放のリクエストを処理するために使用されます。言い換えれば、割り当て子は、標準テンプレートライブラリ（STL）コンテナのメモリ管理に関する低レベルの詳細をカプセル化します。

割り当て子は、アレクサンドル・ステパノフによってC++標準テンプレートライブラリ（STL）の一部として最初に発明されました。その目的は、「ライブラリをより柔軟にし、低レベルのデータモデルに独立した方法で利用できるようにする」ことであり、プログラマがライブラリ内でカスタムポインタや参照型を使用することを可能にするものでした。ただし、標準テンプレートライブラリをC++標準に組み込む際、C++標準委員会は、完全なデータモデル抽象化処理が不可受容なパフォーマンス低下をもたらすことを認識しました。そのため、妥協策として、割り当て子の制限がより厳しくなり、ステパノフの当初の構想と比較して、現在の標準で記述されている割り当て子のカスタマイズ性は大幅に制限されています。

割り当て子のカスタマイズは制限されていますが、多くの状況ではカスタム割り当て子が必要となります。これは通常、異なる種類のメモリ空間（共有メモリと回収されたメモリなど）へのアクセス方法をカプセル化したり、メモリプールを使用したメモリ割り当てのパフォーマンスを向上させたりするために行われます。さらに、メモリ使用量と実行時間から見ると、頻繁に少量のメモリを割り当てるプログラムでは、専用の割り当て子を作成することで利益を得ることができます。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;#### [使用需求](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))

カスタムアロケータの主な理由は性能向上です。専用のアロケータを使用することで、プログラムのパフォーマンスを向上させたり、メモリ使用量を削減したり、あるいは両方を組み合わせることも可能です[4][8]。デフォルトのアロケータは`new`演算子を使用してストレージスペースを割り当てるため、これは通常C言語のヒープ割り当て関数（`malloc()`）によって実装されます[9]。ヒープ割り当て関数は、偶発的な大量メモリ割り当てを最適化するように設計されているため、ベクトルや双端キューなどの、一度に大量のメモリを必要とするコンテナにメモリを割り当てる場合は、デフォルトのアロケータは通常効率的です[8]。しかし、連想コンテナと双方向リストのような、頻繁に少量メモリを割り当てて解除するコンテナの場合、デフォルトのアロケータを使用すると、通常効率が低下します[4][9]。さらに、`malloc()`に基づくデフォルトのアロケータには、より悪い参照局所性や、メモリの断片化を引き起こす可能性があるなど、多くの問題があります[4][9]。

要するに、このセクション（……）（まるで）は、この標準におけるアロケータに関する「夢を見た」のスピーチです。夢が実現する前に、移植性を重視するプログラマーは、ステートレスなカスタムアロケータを使用することになります。
——スコット・メイエス，《Effective STL》

上記を踏まえ、メモリ割り当ての頻度が多い場合に、メモリプールベースのアロケータを使用して問題を解決することがよくあります[8]。オンデマンド割り当てとは異なり、メモリプールベースのアロケータを使用する場合、プログラムは事前に大きなブロックのメモリ（つまり「メモリプール」）を割り当て、次にメモリを割り当てる必要がある場合、カスタムアロケータは、リクエスト元にプール内のメモリへのポインタを返します。オブジェクトが破棄される際には、実際の割り当て解除を行うのではなく、メモリプールのライフサイクルが終了するまで遅延させます[注 1][8]。

「カスタムアロケータ」というトピックに関しては、多くのC++専門家や著者がこの分野で議論しており、スコット・メイエス著の《Effective STL》やアンデル・アレクサンドレスク著の《Modern C++ Design》に言及しています。メイエスは、特定の型`T`のアロケータのすべてのインスタンスが等しいという要件を満たす移植可能なアロケータのインスタンスにはステートを含めない必要があると洞察しており、ステートレスなアロケータの使用を推奨しています。C++標準はライブラリの実装者が状態を含むアロケータをサポートするように奨励していますが、メイエスは「このセクションは、（まるで）素晴らしい見方ですが、ほとんど空言であり」、アロケータの制約は「過度に厳格」であると述べています[4]。たとえば、STLの`list`は`splice`メソッドをサポートしており、これは1つのリストオブジェクト`A`のノードが別のリストオブジェクト`B`に直接挿入されることを意味し、`A`のアロケータによって割り当てられたメモリが`B`のアロケータによって解放される必要があるため、`A`と`B`のアロケータインスタンスは等しいことが導き出されます。メイセスの結論は、アロケータはステートレスな静的メソッドの型として定義するのが最善であるということです。たとえば、C++標準では、アロケータは`rebind`メソッドを実装するその他のクラステンプレートを持つ必要があります。

さらに、ヤン・ストローストルップ著『C++プログラミング言語』では、「割り当てを厳密に制限し、各オブジェクトの情報を異なるようにすることについては、明らかに問題ありません」（大意）と述べており、ほとんどのアロケータはステートを持たず、ステートを持たない場合でもパフォーマンスが向上するという意見を示しています。彼は、メモリプール型アロケータ、共有メモリ型アロケータ、ガベージコレクション型アロケータの3種類のカスタムアロケータを提案し、内部メモリプールを使用して少量メモリを高速に割り当て/解除するアロケータの実装を示しました[3]。ただし、このような最適化は、彼の提供したサンプルアロケータで既に実現されている可能性があると彼は指摘しています。

カスタムアロケータのもう1つの用途は&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
