<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 向叔の手帳</title>
        <link>https://ttf248.life/ja/post/</link>
        <description>Recent content in Posts on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git 子モジュール提交記録の消失</title>
        <link>https://ttf248.life/ja/p/git-submodule-merge-history-lost/</link>
        <pubDate>Mon, 02 Jun 2025 16:44:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-submodule-merge-history-lost/</guid>
        <description>&lt;p&gt;ローカルにGitリポジトリがあり、そのサブモジュールがプル時に一時ブランチになっている。私はその一時ブランチでいくつかのコードをコミットし、その後サブモジュールを&lt;code&gt;main&lt;/code&gt;ブランチに戻した。しかし、これらのコミットされたコードが見つからず、&lt;code&gt;main&lt;/code&gt;ブランチで見つけることができない。また、その一時ブランチの履歴も見つけられない。&lt;/p&gt;
&lt;h2 id=&#34;ソリューション&#34;&gt;ソリューション
&lt;/h2&gt;&lt;p&gt;Git サブモジュールで一時的なブランチにコミットし、&lt;code&gt;main&lt;/code&gt; ブランチに戻った後にこれらのコミットが見つからない場合。この状況を解決するには、以下の手順を実行してください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;コミット履歴の確認&lt;/strong&gt;: サブモジュールディレクトリに移動し、reflog を使用して失われたコミットを見つけます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新しいブランチを作成してコミットを保存&lt;/strong&gt;: 失われたコミットに基づいて新しいブランチを作成します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;/code&gt; ブランチへのマージまたは cherry-pick&lt;/strong&gt;: コードをメインブランチに統合します。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下は具体的な操作手順です：&lt;/p&gt;
&lt;h2 id=&#34;ソリューション-1&#34;&gt;ソリューション
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# サブモジュールディレクトリに移動
cd path/to/your/submodule

# HEADの変更履歴を確認 (未マージされたブランチのコミットも含む)
git reflog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ソリューション-2&#34;&gt;ソリューション
&lt;/h2&gt;&lt;p&gt;PS F:\dev\notebook\scripts\hugo-content-suite&amp;gt; git reflog
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{0}: checkout: c8d070651310e90d283cb64d98da088c5fe05e73 から main へ移動
c8d0706 HEAD@{1}: commit: feat: Markdown記法の使用方法ドキュメントを追加、詳細な構文例と効果のデモンストレーションを提供
48250f5 HEAD@{2}: commit: feat: 記事翻訳プレビュー機能を削除し、翻訳プロセスを簡素化
b8280b6 HEAD@{3}: commit: feat: 絶対パスを取得する機能を追加し、相対パスを絶対パスに変換することをサポート
92c354b HEAD@{4}: commit: fix: 記事スキャンロジックの修正、絶対パスでのスキャンを保証&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;92c354b HEAD@{4}: commit: fix: 文章スキャンロジックの修正、絶対パスでのスキャンを保証
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{5}: checkout: main から de05175d4ec0828e3ae95d726b09dfff18f67a23 に移動
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{6}: clone: &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite.git&lt;/a&gt; から&lt;/p&gt;
&lt;h2 id=&#34;ソリューション-3&#34;&gt;ソリューション
&lt;/h2&gt;&lt;h1 id=&#34;破損したコミットからの新しいブランチの作成例456defを使用&#34;&gt;破損したコミットからの新しいブランチの作成（例：456defを使用）
&lt;/h1&gt;&lt;p&gt;git checkout -b saved-work 456def&lt;/p&gt;
&lt;h1 id=&#34;メインブランチに戻る&#34;&gt;メインブランチに戻る
&lt;/h1&gt;&lt;p&gt;git checkout main&lt;/p&gt;
&lt;h1 id=&#34;保存された作業をメインにマージするまたはcherry-pickを使用して特定のコミットを選択&#34;&gt;保存された作業をメインにマージする（またはcherry-pickを使用して特定のコミットを選択）
&lt;/h1&gt;&lt;p&gt;git merge saved-work&lt;/p&gt;
&lt;h1 id=&#34;または&#34;&gt;または
&lt;/h1&gt;&lt;p&gt;git cherry-pick 456def&lt;/p&gt;
&lt;h1 id=&#34;プロジェクトのルートディレクトリに戻りサブモジュールの更新をコミットする&#34;&gt;プロジェクトのルートディレクトリに戻り、サブモジュールの更新をコミットする
&lt;/h1&gt;&lt;p&gt;cd ..
git add path/to/your/submodule
git commit -m &amp;ldquo;Update submodule to include new changes&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;主要操作手順&#34;&gt;主要操作手順
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git reflog&lt;/strong&gt;: HEADのすべての履歴を表示し、ブランチに関連付けられていないコミットも含む&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git checkout -b&lt;/strong&gt;: 任意のコミットから新しいブランチを作成し、作業を保存する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git merge/cherry-pick&lt;/strong&gt;: 保存されたコミットをターゲットブランチに統合する
reflogで記録が見つからない場合は、&lt;code&gt;git fsck --lost-found&lt;/code&gt;を使用して孤立したコミットを探す必要があるかもしれませんが、これは非常にまれなケースです。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>GitHub Pages の Easter Egg：複数の Pages をデプロイ</title>
        <link>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;最近、体内時計が少し乱れていて、夜２時過ぎまでGithub Pagesのデプロイに苦戦していました。
仕事が終わってからやっと食事に行き、我慢できずに食べたらすぐに寝たい気分になり、食べ終わって帰宅して８時半頃に戻り、眠くてフラフラしていました。目を閉じるとすぐに眠くなってしまい、目が覚めるともう夜２時過ぎでした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;まだ起動もしていないうちに消滅した分類：AI 研習所&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;フラグフラッグ&#34;&gt;フラグ（フラッグ）
&lt;/h2&gt;&lt;p&gt;昨日、話していた「未熟な」フロントエンドではなくなったと言っていたのに、今日はフロントエンドではなくUI/UXの体験を追求している。&lt;/p&gt;
&lt;h2 id=&#34;プロジェクト&#34;&gt;プロジェクト
&lt;/h2&gt;&lt;p&gt;弊社の古くからの友人、&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt; がご参加ください。
そうです、以前の選定株プロジェクトを、プロジェクト全体の構造を再構築し、その後のAIプログラミング関連の内容はこのプロジェクト下に集約されます。&lt;/p&gt;
&lt;h2 id=&#34;複数の-pages-をデプロイする&#34;&gt;複数の Pages をデプロイする
&lt;/h2&gt;&lt;p&gt;プロジェクトは国内で &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/ai-coding-demo&lt;/a&gt; にホストされていますが、周知の通り、国内では Pages の公開をサポートしていません。そのため、海外の GitHub 上に公開する必要があります。&lt;/p&gt;
&lt;p&gt;ブログは海外の GitHub 上で公開されます。まだ試したことがありませんが、複数のプロジェクトを Pages でデプロイする場合、また、現在取り組んでいるプロジェクトが従来のブログサイトではなく、単に多くのドキュメントといくつかの静的な HTML デザイン稿で構成されているという点も考慮する必要があります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;その通りです。これは私が初めてクリックしたところを発見し、複数のプロジェクトを Pages でデプロイすると、ブログの公開に影響を与えないことに気づきました。また、ブログのドメインの下に新しいパスが追加されます。&lt;/p&gt;
&lt;p&gt;[https://ttf248.life/ai-coding-demo/](https://ttf248.&lt;/p&gt;
&lt;h2 id=&#34;ai-研習社&#34;&gt;AI 研習社
&lt;/h2&gt;&lt;p&gt;昨日、新たに作成した分類について、AI を活用して多くのコンピュータ科目の学習を進めようと考えました。例えば、アルゴリズムや LeetCode の問題を解くなどです。&lt;/p&gt;
&lt;p&gt;毎回の学習記録をブログに公開し、知識ベースを形成します。新たに「AI 研習社」という分類を作成しました。&lt;/p&gt;
&lt;p&gt;現在みると、異なるコースごとに新しいプロジェクトを作成して進めるのが良いようです。学習ノートはすべてプロジェクトの Readme.md に記述しています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>旧習（こくしゅう）、華やかなりど（かやかなれど）</title>
        <link>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</link>
        <pubDate>Mon, 26 May 2025 23:54:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</guid>
        <description>&lt;p&gt;長年にわたりバックエンド開発に注力してきましたが、最近は &lt;code&gt;AI&lt;/code&gt; プログラミングを試したり、少しフロントエンド関連のことも取り組むようになりました。しかし、この間の苦労の中で、自分には昔からある古傷—「繁華なものに目を奪われる」—に気づきました。&lt;code&gt;AI&lt;/code&gt; を使ってフロントエンドインターフェースを実現しようとするのですが、実際にはそのような試みが現在の仕事に大きな実用的な助けにはなりかず、むしろ時間を浪費してしまいます。&lt;/p&gt;
&lt;h2 id=&#34;ai-の適用シナリオ&#34;&gt;AI の適用シナリオ
&lt;/h2&gt;&lt;p&gt;小規模なプロジェクトにおいては、AI ツールが大きな役割を果たすことができ、特に独立性が高く、システムとの結合度が低く、ビジネスロジックが単純な関数を作成する際に非常に役立ちます。このようなタスクは通常、明確な入力と出力があり、文脈依存が少ないため、現在の AI 支援プログラミングの能力範囲に最適です。&lt;/p&gt;
&lt;p&gt;しかしながら、複雑なシステムアーキテクチャや深いビジネスロジックに対処する場合、AI の限界が現れ始めます。それは、プロジェクトの実際のニーズから乖離した、見かけ上は合理的だが実際には機能しないコードを生成したり、デバッグが困難な潜在的な問題を導入したりする可能性があります。これらのシナリオにおいては、AI は補助ツールとして、完全に依存できるコード生成器としては適していません。生成されたコードに対して厳格なレビューとテストを実施し、実際の要件を満たしていることを確認する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;誤りとその学習の代償&#34;&gt;誤りとその学習の代償
&lt;/h2&gt;&lt;p&gt;AI を使ってフロントエンドコードを生成しようと試みた際、多くの課題に直面しました。フロントエンドは私の馴染みのない分野であるため、問題の原因を特定するプロセスは時間と労力を要しました。プロンプトを調整して AI にコードを書き直しても、どうしても些細なエラーが発生してしまうのです。このような試行錯誤は時間を浪費するだけでなく、現在の私のエネルギーはバックエンドのビジネスロジックに集中すべきだと気づかせてくれました。&lt;/p&gt;
&lt;p&gt;週末に完成させたプロジェクトを振り返ってみると、バックエンド開発とユーザーインタラクションロジックに焦点を当て、コンソールを通じて機能を実装することが、現状で最も効率的な選択であるという確信が持てます。より多くの時間とエネルギーを得られるようになったときには、フロントエンドの知識を体系的に学ぶ方が良いかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;フロントエンド学習の計画&#34;&gt;フロントエンド学習の計画
&lt;/h2&gt;&lt;p&gt;フロントエンド技術スタックは複雑で多様であり、短期間で習得するのは現実的ではありません。まずは、Vue.jsやReact.jsなどのフレームワークを選択し、そのコアな概念と使用方法を深く学ぶことを計画しています。基礎知識を習得した後で、AIを活用してフロントエンドコードを生成することで、不慣れによるエラーや時間の浪費を防ぐことができます。&lt;/p&gt;
&lt;p&gt;まとめると、現在の段階ではバックエンド開発に重点を置き、着実にコアスキルを向上させることに注力します。その時が来るまで、フロントエンドとAIの組み合わせを探求することは控え、より大きな成果が得られる可能性があります。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Claude4のリリース、開発を試す：hugoタグ、超リンク翻訳アシスタント</title>
        <link>https://ttf248.life/ja/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;本サイトはHugoで開発されていますが、筆者自身は常に中国語のタイトルを使用しており、その結果、生成される記事の超リンクが使いにくい状態でした。つまり、送信する際に、中国語の文字が超リンク内で%E4%BD%A0%E5%A5%BDのような形式にエスケープされてしまうため、見た目が良くありません。設定でslugを設定することで解決できますが、毎回手動で設定する必要があり、非常に面倒でした。&lt;/p&gt;
&lt;p&gt;そこで、Claude4を使って翻訳アシスタントを開発し、中国語のタイトルを自動的に英語のslugに変換し、記事の中に超リンクを追加することを試みました。これにより、手動での設定を回避できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claude4はマジで最高！文脈理解能力が大幅に向上し、複雑なタスクの処理効率も飛躍的に向上しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;プロジェクトアドレス&#34;&gt;プロジェクトアドレス
&lt;/h2&gt;&lt;p&gt;国内プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
国外プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;コードの実装&#34;&gt;コードの実装
&lt;/h2&gt;&lt;p&gt;まず、実装の思路について説明します。すべての文章をスキャンし、タグ情報と記事タイトルを抽出した後、ローカルの大規模言語モデル（例：gemma-3-12b-it）を呼び出して翻訳します。&lt;/p&gt;
&lt;p&gt;実際の開発においては、前世代の大規模言語モデルと比較して、&lt;code&gt;Claude4&lt;/code&gt; はいくつかの顕著な点を発揮しました。機能要件が多いため、&lt;code&gt;Claude4&lt;/code&gt; はインタラクティブメニューを自動的に設計し、さまざまな使用シナリオを考慮しました。例えば、タグ処理に関しては、&lt;code&gt;Claude4&lt;/code&gt; はタグの統計と分析だけでなく、分類統計もサポートし、さらに&lt;strong&gt;ラベルなしの記事&lt;/strong&gt;を検出することも可能です。また、プレビュー機能やタグページ生成機能も提供しています。&lt;/p&gt;
&lt;p&gt;ローカルの大規模言語モデルとの連携、翻訳キャッシュの追加、大規模なコードのリファクタリングなど、&lt;code&gt;Claude4&lt;/code&gt; はすべて一度に完了し、ほとんど問題が発生しませんでした。 プロジェクトの規模は小さいものの、多くの小さな機能を含んでいます。これまで開発プロセスにおいて、大規模モデルはしばしば前の内容を忘れてしまうことがありましたが、今回の &lt;code&gt;Claude4&lt;/code&gt; は非常に優れたパフォーマンスを示し、&lt;strong&gt;文脈の消失がほとんど見られませんでした&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要するに、知能レベルが向上しており、今後の開発作業では &lt;code&gt;Claude4&lt;/code&gt; をより多く利用し、日常的なコーディングの主力モデルとして活用していく予定です。&lt;/p&gt;
&lt;h2 id=&#34;翻訳キャッシュ&#34;&gt;翻訳キャッシュ
&lt;/h2&gt;&lt;p&gt;この注文に関する説明では、大規模モデルの呼び出し回数を減らすだけでなく、実際に12Bモデルをローカルで実行すると効率が良く、時間ロスもありません。しかし、毎回大規模モデルを呼び出すと、やはり少し遅くなります。また、文章のリンクを固定するために、全量更新を実行した場合、文章のタイトルが非常に長い場合があり、稀に2回の翻訳結果が異なり、リンクが変わってしまうという状況が発生します。これは非常に困ります。&lt;/p&gt;
&lt;h2 id=&#34;機能最適化&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;プロジェクト全体を &lt;code&gt;Claude4&lt;/code&gt; に委ね、最適化の余地を分析し、以下の提案を得ました：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;外部化の設定 - 可保守性と柔軟性の向上
構造化ログ - 問題の特定と監視の容易化
パフォーマンスモニタリング - システムの状態把握
ユーザーエクスペリエンス - プログレスバーなどの視覚的フィードバック
エラー処理 - より洗練された例外処理メカニズム
コード整理 - 明確なモジュール分割
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードをレビューし、問題点は一切ありませんでした。例えば、設定ファイルは、既存のコードからデフォルト設定に変換され、設定ファイルを読み込む際に、対応する設定ファイルが存在しない場合に自動的にデフォルト設定ファイルが生成されるため、ユーザーのエラーを防いでいます。 要件：原文を翻訳する際に、現在の翻訳効率を動的に計算し、残りの時間を予測し、関連情報をコンソールに出力します。現在、文章の文字数を取得し、各行の翻訳時に現在の翻訳文字数、時間、100文字あたりの翻訳時間の適合計算を行い、同時に文章全体の残りの翻訳推定時間を計算します。&lt;/p&gt;
&lt;p&gt;コードが完了しましたが、効果はそれほど良くありません。そこで、AIに新しい設計案を提案してもらいます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の効率計算方法を提供：リアルタイム効率、平均効率、スライディングウィンドウ効率&lt;/li&gt;
&lt;li&gt;表示方法の改善：プログレスバー、セクションごとの統計、動的更新&lt;/li&gt;
&lt;li&gt;より役立つ指標を追加：API呼び出し回数、成功率など&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードが完了した後、翻訳効率の統計情報がリアルタイムで大量に表示されることを見つけましたが、スクロールを無効にする機能はありませんでした。&lt;/p&gt;
&lt;h2 id=&#34;機能最適化-1&#34;&gt;機能最適化
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;原文を英語に翻訳（合計7163文字）...
53行の翻訳が必要と検出
  [1/53] Stage1/6 [░░░░░░░░░░░░░░░░░░░░░░░░░] 1.9% 354文字を翻訳中...
    ✅完了 (3.1s) | API呼び出し #1
    ✅完了 (1.5s) | API呼び出し #2
    ✅完了 (0.9s) | API呼び出し #3
    ✅完了 (0.2s) | API呼び出し #4
    ✅完了 (1.0s) | API呼び出し #5
    ✅完了 (1.0s) | API呼び出し #6
    ✅完了 (0.2s) | API呼び出し #7
    📊進捗: 行 13.2% (7/53) | 文字 12.9% (925/7163) 114.6文字/秒 📊
    ⚡効率: リアルタイム76.4 | 平均117.9 | 最近109.0 | フェーズ113.6文字/秒 📊
    🎯成功率: 100.0% (7/7) | 残り: 46行7秒] 9.4% 110文字を翻訳中...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;機能最適化-2&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;🎯 成功率: 100.0% (7/7) | 残り: 46行7 7s] 9.4% 翻訳 110 文字…
⏱️  推定残り時間: 55秒 | 予想完了時間: 00:10:19 8s] 11.3% 翻訳 114 文字…
💾 处理速度: 3211.3 行/分 | 総処理時間: 8秒] 13.2% 翻訳 16 文字…
[8/53] Stage1/6 [███░░░░░░░░░░░░░░░░░░░░░░] 15.1% 翻訳 166 文字…&lt;/p&gt;
&lt;h2 id=&#34;機能最適化-3&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;以前制御プログラムの記述はあまり多くなく、どのように実装されているのか気になったので、コードを拝見しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// 画面クリアと再表示（動的更新効果）
if translationCount &amp;gt; 1 {
    fmt.Print(&amp;quot;\033[6A\033[K&amp;quot;) // 上方向に6行移動し、内容をクリア
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;性能統計メニュー&#34;&gt;性能統計メニュー
&lt;/h3&gt;&lt;p&gt;新たに作成された&lt;strong&gt;性能統計メニュー&lt;/strong&gt;は、私自身で設計したものでも、これほど完璧とは言い難い。&lt;/p&gt;
&lt;p&gt;📊 性能統計：
🔄 翻訳回数：360
⚡ キャッシュヒット率：1.4% (5/365)
⏱️ 平均翻訳時間：315.927234ms
📁 ファイル操作：73
❌ エラー回数：0&lt;/p&gt;
&lt;h3 id=&#34;プログレスバーの表示&#34;&gt;プログレスバーの表示
&lt;/h3&gt;&lt;p&gt;新增の&lt;strong&gt;プログレスバーの表示&lt;/strong&gt;、詳細な進捗状況、経過時間、残り時間の推定
機能を選択してください (0-13): 10
🔍 翻訳対象を収集中&amp;hellip;
📄 キャッシュファイルが読み込まれました。翻訳記録は 0 件含まれます
📊 翻訳キャッシュ統計:
🏷️ ラベル総数: 229 個
📝 文章総数: 131 篇
✅ キャッシュ済み: 0 件
🔄 翻訳が必要: 360 件&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;p&gt;完全な翻訳キャッシュを確認しますか？(y/n): y
🚀 完全な翻訳キャッシュの生成中&amp;hellip;
📄 キャッシュファイルが読み込まれ、0 件の翻訳記録が含まれています。
🔍 キャッシュ内の翻訳をチェック中&amp;hellip;
🔄 360 件の新ラベルを翻訳する必要があります
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - 時間: 3秒 - 残り時間: 約3分8秒
💾 キャッシュファイルが保存され、5 件の翻訳記録が含まれています。
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2. 8% - 実行時間：6秒 - 残り予想時間：3分28秒💾 キャッシュファイルが保存されました（翻訳記録10件を含む）
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - 実行時間：9秒 - 残り予想時間：3分30秒💾 キャッシュファイルが保存されました（翻訳記録15件を含む）&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示-1&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;p&gt;[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - 経過時間: 13秒 - 残り時間予測: 3分36秒💾 キャッシュファイル（翻訳記録20件）を保存
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - 経過時間: 16秒 - 残り時間予測: 3分33秒💾 キャッシュファイル（翻訳記録25件）を保存
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8. 3% - 実行時間：19秒 - 残り推定時間：3分30秒💾 キャッシュファイルが保存されました（30件の翻訳記録を含む）
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - 実行時間：22秒 - 残り推定時間：3分25秒💾 キャッシュファイルが保存されました（35件の翻訳記録を含む）&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示-2&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;=== Hugo ブログ管理ツール ===

🚀 核心機能
  1. 一括処理 (フルブログの処理フロー)

📝 コンテンツ管理
  2. タグページを生成
  3. アーティクルスラグを生成
  4. 文章を多言語バージョンに翻訳

💾 キャッシュ管理
  5. キャッシュの状態を確認
  6. 全量翻訳キャッシュを生成
  7. 翻訳キャッシュをクリア

  0. プログラム終了
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>計画生育政策の多面的な影響：社会構造から経済政治への深い変革</title>
        <link>https://ttf248.life/ja/p/china-family-planning-policy-impacts/</link>
        <pubDate>Sat, 24 May 2025 02:36:49 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/china-family-planning-policy-impacts/</guid>
        <description>&lt;p&gt;中国の計画的な人口抑制政策は、人口増加を制限すると同時に、大家族主義的な発展を抑え込み、伝統的な社会構造を揺るがし、家族企業や政壇の有力な家族勢力を抑制しました。これは、韓国の財閥やインドの家族壟断と比較してその独自性を際立たせています。現在、出産制限が緩和されたものの、低出生率といった課題に直面していますが、同時に新たな垄断リスクにも警戒する必要があります。多方面からのバランスを模索していく必要があります。&lt;/p&gt;
&lt;h4 id=&#34;一人口制御と家族式発展の好対照&#34;&gt;一、人口制御と家族式発展の好対照
&lt;/h4&gt;&lt;p&gt;計画生育政策は、中国が近40年以上にわたって実施してきた基本国策であり、その直接的な成果は顕著である。データによると、1978年から2007年にかけて、中国の人口自然増加率は12‰から5.2‰に低下し、少生4億人余りを実現した。また、人口占める世界の割合は22.2%から20.1%へと減少した。このような人口成長率の急激な減退は、中国社会における家族構造を根底から変えた。家族企業を例にとると、計画生育政策の実施後、企業家が子供を産む数も著しく低下した：政策前では3児以上の割合が40.63%であったが、政策後には18.46%に激減し、独生子が女子として生まれる割合は6.25%から32.31%へと上昇した。このような構造的な変化は、家族企業が選択できる内部の後継者層の範囲を大幅に縮小させ、客観的に家族企業の世代交代能力を抑制している。&lt;/p&gt;
&lt;h4 id=&#34;一人口控制と家族式発展の消長&#34;&gt;一、人口控制と家族式発展の消長
&lt;/h4&gt;&lt;p&gt;韓国とインドの状況を比較すると、その差は顕著である。韓国は厳格な計画生育を実施していなかったものの、出生率は長年にわたり低迷しており（2023年には0.7）、しかし、財閥グループがクロス株持ちや相続税回避などの手段によって、依然として国家経済の命脈を握っている。五大財閥の総売上高は韓国GDPの50%を超える水準にあり、サムスングループ単独で全国GDPの20%を占める。一方、インドでは異なった様相が見られる：79%の経済産出は家族企業が貢献しており、六大財団が通信や鉄鋼などの重要な分野を支配し、上位20社の企業が全国企業の利益の80%を獲得している。この差の核心は、中国の計画生育政策が家庭規模を制限することで、家族企業拡大の人材基盤を源泉的に弱体化させたことと、韓国およびインドが異なる政策環境の中で、家族勢力が経済領域に継続的に浸透したことに起因する。&lt;/p&gt;
&lt;h2 id=&#34;二寡占抑制と社会構造転換&#34;&gt;二、寡占抑制と社会構造転換
&lt;/h2&gt;&lt;p&gt;計画生育政策が経済分野に与えた影響は、特に寡占現象の抑制という点において顕著である。中国の家族企業は、娘の数減少により、韓国・印（韓印）式の財閥集団を形成することが困難であった。韓国の例では、財閥は「循環出資」を通じて家族による支配権を維持し、三星グループの家族はグループ全体の2%の株式しか保有しておらず、複雑な股权構造によって全体を掌握していた。一方、中国においては、計画生育後に家族企業は一般的に「子承父業」（次世代に事業を引き継ぐ）という困境に直面し、職業经理人や株式の多様化改革を余儀なくされた。澎湃新聞の研究によると、計画生育後、家族企業の女性後継者比率は13.85%から34.21%へと上昇し、また、後継者の学歴は著しく向上しており、学士以上の学位を持つ割合は43.75%から98.46%へと増加した。 この転換は、家族統制を完全に排除したわけではありませんが、単一の家族による市場支配の可能性を大幅に低下させました。&lt;/p&gt;
&lt;p&gt;社会構造レベルにおいては、計画生育政策が伝統的な家族核モデルの崩壊を加速しました。中国における世帯あたりの平均人数は、1982年の4.41人から2020年には2.62人に減少し、小型化する世帯が、経済、教育、社会支援などの面で家族の機能を弱体化させました。対照的にインドでは、世帯規模が約4人程度に維持され、カースト制度と家族勢力が深く結びついているため、社会流動性が低下しています。中国における家庭構造の転換は、個人主義の発達を促進する空間を作り出し、2023年には中国の独身成人人口が2億4千万人に達し、「一人経済」の台頭という消費市場のトレンドを生み出しました。この変革はさらに家族経済の影響力を希薄化させました。&lt;/p&gt;
&lt;h4 id=&#34;iii政治領域における権力分散化&#34;&gt;III、政治領域における権力分散化
&lt;/h4&gt;&lt;p&gt;計画生育政策が政治生態に及ぼす影響は深遠である。伝統的に、家族勢力は血縁や姻親関係を通じて地方政治に浸透してきた。例えば、河南省新野県において161の政治家族がほぼすべての政府部門を支配し、副科級以上の幹部の中で20%が「官二代」（官僚の子）であった。しかし計画生育政策の実施により、家庭規模が縮小したことで家族ネットワークの拡大が制限された。北京大学の研究では、計画生育後、官员子女（公務員の子）の数が減少し、家族政治ネットワークの複雑さが著しく低下したことが示されている。さらに、政策を推進した教育普及（1982年の一人当たり受教育年限5.2年から2023年には10.9年に向上）が社会流動を促進し、家族勢力が政治資源に持つ独占力を弱めた。 韓国とインドを比較すると、韓国の財閥と政治の深い結びつき（サムスングループ幹部と政府の金権取引など）や、インドのカースト制度下での家族による世襲政治は、中国政策の独自性を浮き彫りにする。中国は計画生育政策により、権力世襲の可能性を客観的に減少させた。地方レベルの政治においては依然として家族現象が存在するものの、全体的な傾向としては権力構造の分散化が進んでいる。2025年の全国人民代表大会（全会）期間中、全国人民代表会議委員会（政協）委員の一人が「人口と計画生育法」を「人口と生育法」に改名し、完全な出産を許可するよう提案した。この措置は、将来の政治生態の変化にさらなる影響を与える可能性がある。&lt;/p&gt;
&lt;h4 id=&#34;四政策調整後の課題と機会&#34;&gt;四、政策調整後の課題と機会
&lt;/h4&gt;&lt;p&gt;2016年の全面二胎政策、2021年の三胎政策の実施は、中国の生育政策における重大な転換点を意味する。しかし、政策の効果は限定的であり、2022年の出生率はわずか1.18で、世代交代水準（2.1）を大幅に下回っている。出産規制の緩和は、家族企業への影響において二面性を示している。一方、一部の経営者は多胎児を通じて家族传承能力を高める可能性があり、例えば浙江省の娃哈哈グループの宗慶後氏の娘である宗馥莉が独身女として後継者となるケースなどが挙げられる。他方、高額な育児費用（一线都市で子供を18歳まで育てると平均100万元かかる）と職業女性の生育意欲の低下により、家庭規模の拡大は制限されている。&lt;/p&gt;
&lt;p&gt;経済分野においては、出産規制の緩和が新たな寡占形態を生み出す可能性がある。三胎政策は母婴、托育（保育）などの業界における集中度を高め、2025年の乳幼児保育市場規模は1621億元と予測される。 3億元、大手企業はM&amp;amp;Aを通じて中小メーカーを統合し、CR5が55%を超えています。このような集中度の向上は効率をもたらす可能性がありますが、新たな独占リスクにも注意する必要があります。政府は出産促進と市場集中抑制のバランスを探る必要があります。例えば、反垄断法を強化し、育児補助金（杭州三孩家庭など毎月3000元ミルク補助金）を提供することで、家庭の負担を軽減することができます。&lt;/p&gt;
&lt;p&gt;政治分野においては、出生制限の緩和が家族勢力に微妙な影響を与える可能性があります。短期的に従来の家族政治ネットワークを回復することは困難ですが、長期的な視点で見れば、多子世帯は地方政治の中盤で新たな影響力を形成する可能性があります。したがって、幹部の選抜メカニズムを改善し、監督（例えば、幹部と親族の職務回避制度を構築するなど）を強化することが、権力の世襲を防ぐための鍵となります。&lt;/p&gt;
&lt;h4 id=&#34;五国際鏡鑑と未来展望&#34;&gt;五、国際鏡鑑と未来展望
&lt;/h4&gt;&lt;p&gt;韓国およびインドの経験は、家族勢力の親和性・敵対性と政策的指向性が密接に関連していることを示唆する。韓国は財閥育成を通じて経済発展を遂げたが、同時に社会公平の歪みを招いた。一方、インドでは効果的な政策による家族壟断の抑制が欠如したため、貧富格差が拡大した。中国の計画生育政策は人口コントロールを達成したが、同時に家族勢力の拡大を抑制しつつ、高齢化と労働力不足といった問題を引き起こした。&lt;/p&gt;
&lt;p&gt;未来、中国においては、人口政策と社会経済発展との間で新たなバランスを見出す必要がある。一方的に生育支援策（出産休暇の延長、共立托育施設の建設など）を実施することで出生率を高めるべきである。他方で、反垄断取締りを強化し、家族企業が資本的手法を通じて新たな独占を形成するのを防ぐ必要がある。 政治分野においては、地方民主主義の建設をさらに推進し、監督メカニズムを整備することで、権力の行使の透明性を確保する必要があります。&lt;/p&gt;
&lt;p&gt;要約すると、計画生育政策は中国社会の変革における重要な推進力であり、その影響は人口を超えて広範囲に及んでいます。それは家族構造、経済モデル、政治生態を再構築し、中国が韓印式の家族独占的陥穸に陥ることを回避するための道筋を提供しました。政策の調整に伴い、新たな人口構成下で効率と公平、自由と秩序をどのようにバランスさせるかという課題は、中国が直面する長期的な挑戦となります。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AIを使いすぎると、後遺症のようなものがある。</title>
        <link>https://ttf248.life/ja/p/ai-overuse-side-effects/</link>
        <pubDate>Wed, 14 May 2025 19:39:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-overuse-side-effects/</guid>
        <description>&lt;p&gt;新しい「AI 灵感碰撞坊」を立ち上げたことで、様々なものが溢れてきて、AIを使って記録したり、発信したりするものが増え続けていますが、静かに自分自身で考え込むようなものは減ってきているようです。今後はこの欄の出力をある程度コントロールし、月刊形式にまとめるのが良いかもしれません。毎月1本の内容を公開すればよいでしょう。&lt;/p&gt;
&lt;p&gt;これは一種の副作用、あるいは後遺症のようなものであり、効率は上がっていますが、思考の深さや幅は低下しているように感じます。&lt;/p&gt;
&lt;h2 id=&#34;効率向上否定できない&#34;&gt;効率向上：否定できない
&lt;/h2&gt;&lt;p&gt;以前、ブログのコーナー「魚の七秒鐘見聞」はメンテナンスされておらず、いくつかの話題事件について、怠惰な状態でのインターネット検索や記録整理が不足していました。しかし、様々なAIツールが登場し、大枠を整理するだけで、AIが自動的に関連するイベントをインターネットで検索・記録し、必要な文章を生成したり、簡単なフォーマット調整を行って公開したりすることが可能になりました。&lt;/p&gt;
&lt;p&gt;これはまさに怠け者にとっての福音であり、効率は大幅に向上しました。さらには、執筆やコーディングの場合も同様に、効率は実証されています。以前はAPIインターフェースドキュメントの詳細な読み込みが必要でしたが、現在は直接スキップできるようになり、このスキップは非常に重要です。APIを熟知することは「肉体労働」であり、「知的労働」ではありません。AIがこの部分を処理することで、まさに完璧です。&lt;/p&gt;
&lt;h2 id=&#34;垃圾コンテンツ&#34;&gt;垃圾コンテンツ
&lt;/h2&gt;&lt;p&gt;多くの稿子で、内容の質が低いと言わざるを得ません。読み応えがなく、煙火の息吹がないという点で、以前私が好まなかったスタイルです。まるで蝋を噛むような無駄感があります。&lt;/p&gt;
&lt;p&gt;別の角度から言えば、AI生成コンテンツは、まさに流水線のように生産されたものであり、魂が欠けていると言えるでしょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新時代のインターネットのゴミ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;忘却性&#34;&gt;忘却性
&lt;/h2&gt;&lt;p&gt;このタイプの稿子は、読者の状況が不明確であり、時間が経つにつれて、私の記憶も曖昧になり、つい忘れかけてしまうことがあります。&lt;/p&gt;
&lt;p&gt;同様の問題は、コードを書く際にも発生します。コードの提交記録を振り返らずに、自分がどのように考え、なぜそう書いたのか全く思い出せないのです。特に、コードとAIが繰り返しコミュニケーションを通じて生成されたコードは、当初のアイデアとは大きく異なり、場合によっては全く異なるものになってしまうことがあります。&lt;/p&gt;
&lt;h2 id=&#34;検索&#34;&gt;検索
&lt;/h2&gt;&lt;p&gt;最近、Googleや百度を開く回数が明らかに減りました。多くの問題はAIを使って検索したり、インタラクティブな部分も検索結果も、従来の検索エンジンよりもずっと良いからです。
現在では、まだ生きているかどうか分からない&lt;code&gt;bing ai&lt;/code&gt;を追悼しましょう。これは大手企業の中で最初にリリースされた、インターネットに接続して検索できるAIツールです。
Googleの使用頻度が減り、&lt;code&gt;stackoverflow&lt;/code&gt;へのアクセス回数も減りました。多くの問題は直接AIに質問するだけで済みます。このサイトも時代の淘汰にさらされるでしょう。&lt;/p&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに
&lt;/h2&gt;&lt;p&gt;筆記がメンテナンスしているブログですが、元々アクセス数はほとんどなく、今ではさらに期待していません。よりは多くの記録場所であり、自分に向けて書くためのものです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>貿易戦が突然一時停止した。 (Keihōsen ga sainen ichijo shita.)</title>
        <link>https://ttf248.life/ja/p/trade-war-pauses/</link>
        <pubDate>Mon, 12 May 2025 19:07:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/trade-war-pauses/</guid>
        <description>&lt;p&gt;2025年の貿易戦争における関税の変動は、「段階的エスカレーション—制圧—協議」というサイクルを示し、米中対立が関税対峙からルール競争へと移行した。短期的な緩和により市場への圧力は軽減されたものの、長期的な不確実性は依然として存在し、WTO（世界貿易機関）の判決、サプライチェーンの見直し、地政学的な変化がグローバル経済に及ぼす持続的な影響を注視する必要がある。&lt;/p&gt;
&lt;p&gt;人々は自身の認識を超えた利益を得ることができず、今年始まった貿易戦争によって引き起こされた株式暴落は、現在ではほとんど失われた地を取り戻している。散々な状態に陥った多くの個人投資家（散戶）が、その間にはどれほどの損失を被ったのか想像もできない。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2025年、貿易戦争における関税のタイムラインの整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下は、2025年の貿易戦争関税タイムラインの概要であり、米中およびその他の国の主要な出来事を組み合わせて、関税政策の動的な進化を示しています。&lt;/p&gt;
&lt;h3 id=&#34;一2025年4月関税全面アップグレードと対抗措置&#34;&gt;一、2025年4月：関税全面アップグレードと対抗措置
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;アメリカの対中関税措置&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;4月2日&lt;/strong&gt;: トランプ政権は第14257号行政令に署名し、米国への輸出品に対する34%の「報復関税」を課すことを発表。香港およびマカオからの商品も対象となる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4月8日&lt;/strong&gt;: アメリカは対中「報復関税」の税率を34%から84%に引き上げ、第14259号および第14266号行政令に署名し、さらに多くの商品に対する関税を課す。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4月10日&lt;/strong&gt;: ホワイトハウスは行政令を修正し、対中関税総額を145%に引き上げ、小口包装物（800ドル以下の商品の税率は90%から120%へ）に対する関税も引き上げる。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中国の対抗措置&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;4月4日&lt;/strong&gt;: 中国は米国産すべての商品に対する34%の関税を課すことを発表。農産物、自動車、エネルギーなどの分野が含まれる。 - 4月10日：中国は報復関税率を34％から84％に引き上げ、米国側と連携して段階的に強化する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4月12日：中国は米国商品に対する追加関税91%の適用を解除（米国側が解除した一部に対応）し、24%関税の90日間実施を停止し、10%を維持する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一2025年4月関税全面アップグレードと反制&#34;&gt;一、2025年4月：関税全面アップグレードと反制
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;その他の国の関税博弈&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;米加貿易戦&lt;/strong&gt;：米国がカナダの鋼鉄・アルミニウム製品に25%の関税を課し、カナダは298億カナダドルの米国製品に報復して課税し、WTOにも異議申し立てを行った。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欧州連合と日本&lt;/strong&gt;：EUは米国商品に最高25%の関税を課し、日本は米国自動車関税について懸念を示し、「貿易戦は損人害己」と称賛した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二2025年5月日内瓦会談と関税緩和&#34;&gt;二、2025年5月：日内瓦会談と関税緩和
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;中美経貿高層会談&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5月10日～11日&lt;/strong&gt;：米国と中国はスイスの日内瓦で16時間の会談を行い，《中美日内瓦経貿会談聯合声明》に合意。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5月12日&lt;/strong&gt;：両国は一部の関税を停止を発表：
&lt;ul&gt;
&lt;li&gt;米国は対中24%の関税（90日間）を一時停止し、10%と維持し、4月8日および9日の追加課税を取り消す。&lt;/li&gt;
&lt;li&gt;中国はそれに伴い24%の反制関税を一時停止し、10%と維持し、非関税措置も取り消す。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;協議メカニズムの構築&lt;/strong&gt;：両国は中国、米国、または第三国で定期的に経済・貿易協議を開催し、関税削減とルール策定に焦点を当てることに合意。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;経済影響と政策調整&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;米国内圧力&lt;/strong&gt;：高関税により中小企業が倒産（例：アマゾン販売者らが関税急騰により閉店）、インフレ期待が高まる（コアPCEは3.…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iii-その他の重要な出来事と長期的な影響&#34;&gt;III. その他の重要な出来事と長期的な影響
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;WTOと多国間反応&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;カナダと中国はそれぞれ、米国鋼アルミ関税および「報復関税」をWTO紛争解決手続きに提起し、米国の非差別原則違反を主張した。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WTO事務総長イビラ氏は、米国の関税が2025年の世界貿易量を1%縮小させ、発展途上国への困難を深刻化させる可能性があると警告した。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;免除リストと産業への影響&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;米国免除商品&lt;/strong&gt;: 37ページのリストには、レアアース、石墨、医療用CT球管などの戦略物資が含まれ、サプライチェーンの脆弱性が露呈した。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自動車関税&lt;/strong&gt;: 米国は輸入自動車に25%の関税を課し、世界の自動車生産量は約2%減少し、北米では9%の減少が見込まれた。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;政治と戦略的駆け引き&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;トランプ政権は「報復関税」を通じて国際貿易秩序を再構築しようとしたが、単独行動によるものであり、盟友からの反発（例：欧州連合、日本）を引き起こした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;４タイムラインまとめ&#34;&gt;４．タイムラインまとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;時期&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;出来事&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2025年4月2日&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;米国が対中34％の「逆輸入関税」を課税し、香港・マカオ製品を含む。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;４タイムラインまとめ-1&#34;&gt;４．タイムラインまとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;時期&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;出来事&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4月8日&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;米国が対中関税を引き上げ84%に、さらに新たな課税命令を追加。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;４タイムラインまとめ-2&#34;&gt;４．タイムラインまとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;時期&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;出来事&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4月10日&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;中国が報復措置として関税を34％に引き上げ、その後84％に増額。米国も関税を145％に修正。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;４タイムラインまとめ-3&#34;&gt;４．タイムラインまとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;時期&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;出来事&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4月12日&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;米国免除の一部商品（例：技術製品）、中国が91％の報復関税を撤回。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;４タイムラインまとめ-4&#34;&gt;４．タイムラインまとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;時期&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;出来事&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5月10-11日&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;米中日　ジュネーブ会談、24%関税一時停止（90日間）に関する共同声明合意。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第四タイムラインまとめ&#34;&gt;第四、タイムラインまとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;時期&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;出来事&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5月12日&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;両者が関税の停止と協議メカニズムを発表し、貿易緊張を緩和しました。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第五トレンドと課題&#34;&gt;第五、トレンドと課題
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短期的な緩和と長期的な競争:&lt;/strong&gt; 米中関税の暂停がポジティブな信号を発信したが、構造的な矛盾（高科技、エネルギーなど）は依然として存在し、中間選挙やそれが政策の一貫性に与える影響も考慮する必要がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;グローバルサプライチェーンの再構築:&lt;/strong&gt; 企業はサプライチェーンを加速的に調整しており、メキシコ、東南アジアが「近岸外包」によって恩恵を受けているが、コスト上昇が回復を抑制する可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多角的メカニズムの困窮:&lt;/strong&gt; WTO紛争解決メカニズムに制約があり、地域貿易協定（米英協定など）が代替オプションとして登場しているが、さらなる分断を招く可能性がある。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>2020年～2025年の江西省特岗・国編入教員採用データ：トレンドと変革に関する洞察</title>
        <link>https://ttf248.life/ja/p/jiangxi-specialist-and-national-teacher-recruitment-trends-2020-2025/</link>
        <pubDate>Mon, 12 May 2025 18:59:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/jiangxi-specialist-and-national-teacher-recruitment-trends-2020-2025/</guid>
        <description>&lt;p&gt;2020年から2025年の江西省教員採用は大幅な縮小傾向を示しています。特に、専門職教員採用の選考人数は、6,617人から32人（99.5%減）に激減し、一般教員採用も11,324人から2,146人（81.1%減）となりました。主科（語数英）の割合は安定していますが、総数は縮小しており、音体美などの学科は比例が上昇しましたが、絶対的な数は限られていました（例：2025年には各学科で2名のみ採用）。政策面では「退一補一」編組の緊縮により、教員資源は職校および遠隔地域に傾斜し、伝統的な小学校・中学校のポジションは大幅に縮小され、2025年には一部学科の選考人数がゼロとなる予定です。&lt;/p&gt;
&lt;p&gt;→ 江西省における過去数年間の専門職教員採用人数を、学科別に統計し、表形式で整理&lt;/p&gt;
&lt;p&gt;——————&lt;/p&gt;
&lt;p&gt;江西省教育庁、人力資源和社会保障厅などの公式発表による採用公告および公開データに基づき、2020年～2025年の特任教師と国編教師の採用状況を以下にまとめます。注記として、&lt;strong&gt;2025年のデータは計画採用数&lt;/strong&gt;であり、一部の年には学科細分情報が完全に公開されていないため、表中の「未分」と記載されている学科は総計またはデータ欠損となります。&lt;/p&gt;
&lt;h3 id=&#34;一2020-2025年江西省特岗教师招聘データ&#34;&gt;一、2020-2025年江西省特岗教师招聘データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;6,617&lt;/td&gt;
&lt;td&gt;1,200&lt;/td&gt;
&lt;td&gt;1,100&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;317&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一2020年2025年の江西省特岗教員採用データ&#34;&gt;一、2020年～2025年の江西省特岗教員採用データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;国語&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;6,020&lt;/td&gt;
&lt;td&gt;1,100&lt;/td&gt;
&lt;td&gt;1,000&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;450&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一2020年2025年の江西省特岗教师採用データ&#34;&gt;一、2020年～2025年の江西省特岗教师採用データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;合計採用人数&lt;/th&gt;
&lt;th&gt;国語&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分類&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;3,835&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一2020-2025年江西省特岗教师招聘データ-1&#34;&gt;一、2020-2025年江西省特岗教师招聘データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;3,146&lt;/td&gt;
&lt;td&gt;650&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一2020-2025年江西省特岗教师招聘数据&#34;&gt;一、2020-2025年江西省特岗教师招聘数据
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;国語&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2024&lt;/td&gt;
&lt;td&gt;2,008&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一2020-2025年江西省特岗教师招聘データ-2&#34;&gt;一、2020-2025年江西省特岗教师招聘データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;国語&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2025&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二2020-2025年江西省国編教师招聘数据&#34;&gt;二、2020-2025年江西省国編教师招聘数据
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;总招聘人数&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道德与法治&lt;/th&gt;
&lt;th&gt;历史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音乐&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美术&lt;/th&gt;
&lt;th&gt;信息技术&lt;/th&gt;
&lt;th&gt;未细分&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;11,324&lt;/td&gt;
&lt;td&gt;2,200&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;1,800&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;524&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二2020年2025年の江西省国編纂教師採用データ&#34;&gt;二、2020年～2025年の江西省国編纂教師採用データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;13,324&lt;/td&gt;
&lt;td&gt;2,500&lt;/td&gt;
&lt;td&gt;2,300&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;624&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二2020-2025年江西省国編教师招聘数据-1&#34;&gt;二、2020-2025年江西省国編教师招聘数据
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;总招聘人数&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道德与法治&lt;/th&gt;
&lt;th&gt;历史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音乐&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美术&lt;/th&gt;
&lt;th&gt;信息技术&lt;/th&gt;
&lt;th&gt;未细分&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;10,200&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;1,800&lt;/td&gt;
&lt;td&gt;1,500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二2020-2025年江西省国編教师招聘数据-2&#34;&gt;二、2020-2025年江西省国編教师招聘数据
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英语&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道德与法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;7,821&lt;/td&gt;
&lt;td&gt;1,500&lt;/td&gt;
&lt;td&gt;1,400&lt;/td&gt;
&lt;td&gt;1,200&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;421&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二2020-2025年江西省国編教师招聘数据-3&#34;&gt;二、2020-2025年江西省国編教师招聘数据
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳与法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2024&lt;/td&gt;
&lt;td&gt;3,957&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;257&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二2020-2025年江西省国編教师招聘数据-4&#34;&gt;二、2020-2025年江西省国編教师招聘数据
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年份&lt;/th&gt;
&lt;th&gt;総採用人数&lt;/th&gt;
&lt;th&gt;语文&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治/道徳与法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;未分化&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2025&lt;/td&gt;
&lt;td&gt;2,146&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;iii-データに関する説明&#34;&gt;III. データに関する説明
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;データソース&lt;/strong&gt;: 江西省教育委員会および人事資源社会保障委員会が発表した過去の採用公告と公式統計 (2020年から2024年は実際の採用数、2025年は計画数)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学科分類&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;特岗教師は農村義務教育段階の科目を中心に、2025年には少量のみ主科のポジションを維持。&lt;/li&gt;
&lt;li&gt;国編教師は全学段をカバーし、学科設定がより包括的で、幼児教育や特別支援教育なども含まれる (データが細分化されていないため、個別に列出されていません)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;トレンド分析&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;総数の大幅な減少&lt;/strong&gt;: 2025年の特岗教師採用数は2020年と比較して99.5%減少し、国編教師は81.1%減少。人口構造の変化と教育資源の調整を反映しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学科のホット/クール&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;主科（中国語、数学、英語）の割合は安定していますが、採用量は年々縮小しています。 - 音体美学科、情報技術等分野の割合が増加している一方、絶対的な数は依然として限られている（例：2025年に音体美学科は各1人のみ採用）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一部の学科（例：英語）は生徒数の減少により停年となるケースがある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;政策背景&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;編制の厳格化&lt;/strong&gt;：退職者を補うための「退一補一」政策を実施し、新規採用を厳しく統制しており、2024年には編制外の業務割合が68.6%に達している。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;構造的な調整&lt;/strong&gt;：教員リソースは職業教育や僻遠地域に重点的に配分され、伝統的な小学校・中学校への採用は大幅に縮小されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;四完全なデータ取得に関する推奨事項&#34;&gt;四、完全なデータ取得に関する推奨事項
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;公式チャネル&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;江西省教育庁ウェブサイト (&lt;a class=&#34;link&#34; href=&#34;http://jyt.jiangxi.gov.cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jyt.jiangxi.gov.cn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;江西省人力資源和社会保障庁ウェブサイト (&lt;a class=&#34;link&#34; href=&#34;http://rst.jiangxi.gov.cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://rst.jiangxi.gov.cn&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ツール推奨&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;江西人事試験網 (&lt;a class=&#34;link&#34; href=&#34;http://www.jxpta.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.jxpta.com&lt;/a&gt;): 過去の職種表ダウンロード。&lt;/li&gt;
&lt;li&gt;江西智慧教育プラットフォーム (&lt;a class=&#34;link&#34; href=&#34;http://www.jxedu.gov.cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.jxedu.gov.cn&lt;/a&gt;): 特岗教師专项データ。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意事項&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;2025年の一部科目（情報技術など）の採用枠は0、実際の採用は調整を通じて補充される可能性があります。&lt;/li&gt;
&lt;li&gt;科目分類には年度によって差異がある場合があります（「道徳と法治」と「思想政治」が統合されるなど）、当年発表を確認してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>フォークのレポジトリにプルリクエストをマージする</title>
        <link>https://ttf248.life/ja/p/merge-pullrequest-to-forked-repo/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/merge-pullrequest-to-forked-repo/</guid>
        <description>&lt;p&gt;&lt;code&gt;github-readme-stats&lt;/code&gt; は、GitHub の個人プロフィールに関する統計情報を生成するツールです。ユーザーの GitHub 個人プロフィールの様々な統計情報やグラフの表示を可能にします。多様なカスタマイズオプションを提供し、ユーザーのニーズに合わせて調整できます。&lt;/p&gt;
&lt;p&gt;筆者はリポジトリ管理の習慣として、プロジェクトごとにグループ化を行っていますが、GitHub はリポジトリのグループ化をサポートしていないため、異なる組織に分割することで実現しています。&lt;code&gt;github-readme-stats&lt;/code&gt; の最新ブランチでは、異なる組織のリポジトリの統計情報のクロスオーバーに対応していません。そこで、対応するコードをマージしたブランチをフォークしました。&lt;/p&gt;
&lt;h2 id=&#34;最終結果&#34;&gt;最終結果
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;プルリクエスト-元のurl&#34;&gt;プルリクエスト 元のURL
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;組織のリポジトリからのデータを含める機能を追加&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;上流のプルリクエストをフォークのリポジトリにマージする&#34;&gt;上流のプルリクエストをフォークのリポジトリにマージする
&lt;/h2&gt;&lt;p&gt;ある &lt;strong&gt;プルリクエスト (PR)&lt;/strong&gt; をあなたの &lt;strong&gt;フォークしたリポジトリ&lt;/strong&gt; にマージするには、いくつかの方法があり、あなたが以下のいずれかを達成したいかによって異なります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;上流（upstream）リポジトリ&lt;/strong&gt; から PR をあなたのフォークにマージするか、&lt;/li&gt;
&lt;li&gt;他の人のフォークから PR をあなたのフォークにマージするか、&lt;/li&gt;
&lt;li&gt;あなたのフォークで作成された PR (例えば、他の人があなたにフォークして PR を提起した場合) をマージする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;まず、最も一般的なシナリオを説明します。&lt;strong&gt;あなたがリポジトリをフォークし、上流の PR をあなたのフォークにマージしたい場合&lt;/strong&gt;です。操作手順は以下のとおりです👇&lt;/p&gt;
&lt;h3 id=&#34;-方法１コマンドライン方式最も汎用的&#34;&gt;✅ 方法１：コマンドライン方式（最も汎用的）
&lt;/h3&gt;&lt;h4 id=&#34;ステップ-1自分のフォークをクローンする&#34;&gt;ステップ 1：自分のフォークをクローンする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/あなたのユーザー名/リポジトリ名.git
cd リポジトリ名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-2upstream-元のリポジトリのurl-を追加&#34;&gt;ステップ 2：upstream (元のリポジトリのURL) を追加
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/原作者のユーザー名/リポジトリ名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ３上流のprブランチをリポジトリに取得する&#34;&gt;ステップ３：上流のPRブランチをリポジトリに取得する
&lt;/h4&gt;&lt;p&gt;マージしたいPRの番号（例：PR #123）を見つけます。&lt;/p&gt;
&lt;p&gt;以下のコマンドでそのPRのコードをリポジトリに取得できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ4ブランチを切り替えマージする&#34;&gt;ステップ4：ブランチを切り替え、マージする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # またはあなたのターゲットブランチ
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すべて正常であれば、GitHub リポジトリにフォークした場所にプッシュできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;-方法二github-ウェブインターフェースシンプルだが限定的&#34;&gt;✅ 方法二：GitHub ウェブインターフェース（シンプルだが限定的）
&lt;/h3&gt;&lt;p&gt;GitHub のウェブ上で特定のプルリクエスト (PR) が上位のレポジトリに対するものである場合、以下の手順を実行できます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;その PR ページにアクセスします。&lt;/li&gt;
&lt;li&gt;右上部の「&lt;strong&gt;Commits&lt;/strong&gt;」または「&lt;strong&gt;Files changed&lt;/strong&gt;」をクリックし、この PR がどのブランチに基づいて作成されているかを確認します。&lt;/li&gt;
&lt;li&gt;あなたのフォークページで新しいブランチを作成し、手動で PR のコミットを cherry-pick します (Git に関する知識が必要です)。&lt;/li&gt;
&lt;li&gt;または、「&lt;strong&gt;Open in GitHub Desktop&lt;/strong&gt;」をクリックして、GUI ツールを使用してマージします。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;-他人があなたのフォークに対してプルリクエストを送信した場合&#34;&gt;🚀 他人があなたのフォークに対してプルリクエストを送信した場合
&lt;/h3&gt;&lt;p&gt;プルリクエストのページに直接移動し、「&lt;strong&gt;Merge pull request&lt;/strong&gt;」ボタンをクリックするだけです。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;具体的な状況（例えば、PRリンク、ウェブインターフェースを使用しているかコマンドラインを使用しているか）に応じて、ステップバイステップでデモンストレーションが必要ですか？ または、具体的なリンクを提供していただければ、最も簡単な方法を分析します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git での履歴記録におけるコミット情報 (または、コミットメッセージ)</title>
        <link>https://ttf248.life/ja/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;スクリプトは、Git の履歴コミットの作者情報をまとめて変更し、&lt;code&gt;git filter-branch&lt;/code&gt; を使用して履歴コミット記録を書き換えます。&lt;/p&gt;
&lt;p&gt;ご提供いただいたスクリプトは、Git リポジトリの履歴コミット中の作者情報をまとめて修正するものであり、全体的な考え方は正しいですが、&lt;code&gt;git filter-branch&lt;/code&gt; の &lt;code&gt;--env-filter&lt;/code&gt; に配列（例：&lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;）を使用すると、互換性の問題が発生する可能性があります。これは、一部のシェル環境（例：&lt;code&gt;/bin/sh&lt;/code&gt;）が配列構文をサポートしていないためです。
互換性を高めるために、配列をスペースで区切られた文字列に置き換え、&lt;code&gt;for&lt;/code&gt; ループを使用して各古いメールアドレスを反復処理することを推奨します。以下は修正後のスクリプトの例です：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;git filter-branch &amp;ndash;env-filter &#39;
OLD_EMAILS=&amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;mailto:TianlongXiang51@gmail.com&#34; &gt;TianlongXiang51@gmail.com&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;mailto:nick@qq.com&#34; &gt;nick@qq.com&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;mailto:tianlongxiang51@gmail.com&#34; &gt;tianlongxiang51@gmail.com&lt;/a&gt;&amp;rdquo;
CORRECT_NAME=&amp;ldquo;tianlong.xiang&amp;rdquo;
CORRECT_EMAIL=&amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;mailto:tianlong.xiang@foxmail.com&#34; &gt;tianlong.xiang@foxmail.com&lt;/a&gt;&amp;rdquo;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for OLD_EMAIL in $OLD_EMAILS
do
  if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
  then
    export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
    export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
  fi
  if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
  then
    export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
    export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
  fi
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このスクリプトを実行する前に、予期せぬ事態を防ぐため、必ずリポジトリをバックアップしてください。&lt;/li&gt;
&lt;li&gt;この操作はGitの履歴を書き換えるため、コミットの作成者情報を変更し、ハッシュ値が変化する可能性があります。&lt;/li&gt;
&lt;li&gt;既に変更をリモートリポジトリにプッシュしている場合は、強制プッシュが必要です。
強制プッシュの使用には十分注意し、特に複数人での共同開発プロジェクトでは、他者に影響を与えないようにしてください。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;リポジトリ内のすべてのユニークな作成者メールアドレスの統計&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>医学教育における天宮と董襲莹事件のバタフライ効果</title>
        <link>https://ttf248.life/ja/p/medical-education-and-the-butterfly-effect-of-dong-xiying-incident/</link>
        <pubDate>Wed, 07 May 2025 01:08:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/medical-education-and-the-butterfly-effect-of-dong-xiying-incident/</guid>
        <description>&lt;p&gt;北京协和“4+4”プロジェクト（4年非医学本科 + 4年医学博士）は、学際的なエリート育成を主軸とし、2025年に董袭莹氏の事件がその家庭背景（医学/研究世帯）を利用してプロジェクトに参入した事実、学位の曖昧さ、論文の剽窃疑惑などが表面化し、この模式がエリート採用と公平性との矛盾、学制の圧縮および課外研修（規培）に関する論争を抱えている。&lt;/p&gt;
&lt;h2 id=&#34;プロンプト&#34;&gt;プロンプト
&lt;/h2&gt;&lt;p&gt;ブログの作成：協和 4+4 の来歴と背景、核となるポイントは：天宮の一角、凡人の目に見えるもの、董小姐のご家族構成、通常の医学博士が8年で卒業することはない、董小姐のご家族構成および学歴構成&lt;/p&gt;
&lt;h2 id=&#34;四協和44解体された医学教育の天宮&#34;&gt;四協和4+4：解体された医学教育の「天宮」
&lt;/h2&gt;&lt;p&gt;北京协和医学院の「4+4」プロジェクトは、2018年の開始以来、中国の医学教育における「天宮」と見なされてきました。アメリカの医学教育体系を模倣したこのプロジェクトは、「ナド・学科背景者、ナド・愛医者、ナド・天下賢才」という理念のもと、伝統的な医学教育体系に亀裂を開こうとしています。その核心的論理は以下の通り：&lt;strong&gt;4年間の非医学本科教育+4年間の医学博士育成で、従来の5+3+3（本科5年+修士3年+博士3年）モデルを代替し、多岐にわたる学問分野の医学リーダーを育成する&lt;/strong&gt;ことです。&lt;/p&gt;
&lt;p&gt;この模式の「天宮」属性は、以下の3つの次元に現れています：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;入学門槛の精英化&lt;/strong&gt;: 早期には、QS/Times/US Newsランキング上位50校またはUS News文理学院上位10（バナード学院など）からの申請者を要求し、その後、上位100校まで緩和されましたが、GPAは3.6以上、あるいは年級トップ30%に限定されています。 &lt;strong&gt;カリキュラム設計の国際化:&lt;/strong&gt; アメリカ式の器官-システム統合型コース、PBL（問題解決学習法）を採用し、学生は4年以内に人体解剖学、病理学などのコア科目を受講し、臨床実習に参加する必要がある。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;輸出品質に関する議論:&lt;/strong&gt; 医師免許取得試験の合格率（95.2%）は従来の8年制（98.5%）を下回っているものの、卒業生は多く協和系病院に進み、職業発展は伝統的な経路と著しく異なることはない。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;董袭莹事件凡人が垣間見た天宮の裂け目&#34;&gt;董袭莹事件：凡人が垣間見た「天宮」の裂け目
&lt;/h2&gt;&lt;p&gt;2025年4月、中国日友好医院胸外科医員の肖飛氏が婚内不倫疑惑で報道された件を受け、协和4+4プロジェクトの“謎めいた側面”が明らかになった。問題の中心人物である董袭莹氏の経歴は、以下の3点において疑念を招いた：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;学歴の曖昧性&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本科院校の論争&lt;/strong&gt;：董袭莹氏はコロンビア大学卒業と主張しているが、実際にはバナード学院（2025年US News文理学院ランキング第14位）で学んでいた。同校は協和の“文理学院前20”要件を満たしているものの、卒業証書に「バナード学院」と「コロンビア大学」の両方の記載があり、国内の採用市場においてコロンビア大学本部と誤認される可能性があった。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;専門分野の論争&lt;/strong&gt;：経済学を専攻した本科から臨床医学博士を取得するルートは、4+4プロジェクトにおける“多学科背景”という要件に合致しているものの、医学基礎科目の不足が指摘された。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;董襲莹事件凡人が垣間見た天宮の裂痕&#34;&gt;董襲莹事件：凡人が垣間見た「天宮」の裂痕
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;家庭背景の特殊性&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;学術資源の独占&lt;/strong&gt;：父は中冶建研院書記、母は北科大工学技術研究院副院長、祖父は協和影像分野院士、外公は材料分野外籍院士、姑姑姑父は北科大博導。この「医学＋科研＋高校」の複合家庭背景は、推薦状（2名の生物医学副教授推薦が必要）や研究協力（北科大特許など）といった隠れた資源を提供した。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;職業パスの跳躍&lt;/strong&gt;：規培段階で胸外科から泌尿外科へ転換し、研究分野は骨科、消化内科、画像学など多岐にわたるため、「資源の鋪積」と疑念を抱かせた。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;学制争論の拡大&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;時間圧縮の妥当性&lt;/strong&gt;：伝統的な医学博士には11年（5+3+3）が必要だが、4+4プロジェクトでは時間を8年に圧縮した。 協和は「コース統合」と「早期臨床」を強調しているが、一部の医師からは、その臨床研修期間（12ヶ月）が伝統的な8年間制（18ヶ月）に短く、技能の蓄積に影響を与える可能性があると指摘されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;規培減免の争议&lt;/strong&gt;：一部の規培基地が4+4卒業生に対して1年の規培を減免することを認めていることが、業界の公平性を損なうのではないかという疑問を投げかけている。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;医学教育の現状と論争の背景&#34;&gt;医学教育の現状と論争の背景
&lt;/h2&gt;&lt;p&gt;董袭莹事件は、中国医学教育における深層的な矛盾を浮き彫りにしました：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;精英化と公平性の衝突&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;4+4プロジェクトの「申請・審査制」は、アメリカ医学院モデルの移植ですが、中国にはMCATのような標準化試験が存在せず、推薦状や研究経験といった主観的な評価が、家庭環境の影響を受けやすい。&lt;/li&gt;
&lt;li&gt;2023届の4+4卒業生の30%が清北復交（清華大学、北京大学、復旦大学、上海交通大学）出身、25%が海外名校出身であり、家庭背景が申請に与える影響は著しい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;学制改革の現実的困境&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;時間短縮の代償&lt;/strong&gt;：4+4学生の研究成果（論文数など）は、従来の8年制と比較して大幅に低く、「臨床を重視しすぎ、研究を軽視している」と批判されている。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;業界での認知度の分化&lt;/strong&gt;：三甲病院は協和大学のブランドを重視する一方、地方医院では4+4卒業生の臨床能力に対して慎重な姿勢を示している。 - &lt;strong&gt;医学教育の国際接轨の惑&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;アメリカの4+4模式は、MCAT試験を通過し、3～7年の研修プログラムを受ける必要があり、中国の4+4プロジェクトでは、入学と研修のプロセスが簡略化され、「形似神不似」という状況を生み出している。&lt;/li&gt;
&lt;li&gt;教育省のデータによると、2024年の全国医学博士採用において、4+4プロジェクトの割合は5%未満であり、その規模拡大は依然として抵抗に直面している。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論天宮秩序の再構築---医学教育への挑戦&#34;&gt;結論：「天宮」秩序の再構築 - 医学教育への挑戦
&lt;/h2&gt;&lt;p&gt;協和4+4プロジェクトにおける論争は、本質的にエリート教育と大衆期待との間の衝突を露呈させた。 “天宮”の一角が凡人の目に触れたことで明らかになったのは、個別の事例の欠陥だけでなく、医学教育システム全体に潜む深層的な矛盾である。今後の改革は、以下の3つの側面から力を入れる必要がある：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;選抜メカニズムの透明化&lt;/strong&gt;：標準化試験（中国版MCATなど）を導入し、推薦状などの主観的な要素の影響を減らす。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;研修期間の延長&lt;/strong&gt;：4+4卒業生の研修期間を3年に回復させ、臨床能力の基準を満たすことを保証する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;プロセスにおける厳格な監督&lt;/strong&gt;：学術的不正行為審査メカニズムを構築し、異分野研究に対して厳格な独創性検証を行う。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;医学教育の「天宮」は、少数者の特権ではなく、真に医学のエリートを育む揺籃地となるべきである。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>関税嵐、株価暴落</title>
        <link>https://ttf248.life/ja/p/tariff-storm-stock-market-crash/</link>
        <pubDate>Tue, 08 Apr 2025 03:49:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/tariff-storm-stock-market-crash/</guid>
        <description>&lt;p&gt;近頃、世界的な株式市場は激しい変動を経験し、主な原因は、トランプ大統領が発表した新たな全面関税措置であり、市場は世界貿易戦争と景気後退への懸念を引き起こした。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;関税政策による市場のパニック&lt;/strong&gt;
トランプ大統領は先週、すべての輸入品に高額な関税を課すことを発表し、特に中国からの輸入商品には最大50%の関税を科すことで、彼が主張する不公平なグローバル貿易システムを修正しようとした。この措置により、世界市場でパニック売りが発生し、投資家は貿易緊張の高まりが世界の経済成長を抑制するのではないかと懸念した。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;世界的な株式市場の大幅下落&lt;/strong&gt;
米国では、主要な株価指数が大きな打撃を受けた。ダウ工業株平均指数は1,200ポイント以上下落し、ナショナル・デマンド指数は4%下落、S&amp;amp;P 500指数は3.8%下落し、ベアマーケット圏に突入した。 アジアおよびヨーロッパ市場も同様に影響を受け、日経平均株価は9%近く下落し、主要な欧州株式市場も6%近く下落しました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;投資家は安全資産を求めて&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;市場の混乱を受け、投資家は債券や円といった安全資産へと資金を移動させました。しかし、ボラティリティ指数（VIX）は60以上に急騰し、市場におけるパニックの兆候を示しています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;エコノミストはデフレーションリスクを警告&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;エコノミストたちは、関税政策が米国経済を「デフレーション」状態に陥れる可能性があると警告しています。これは、経済成長の停滞、インフレ率の上昇、そして高失業率が同時に発生する状況です。ゴールドマン・ Sachsは、2025年の米国の景気後退可能性を60%に引き上げています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各国政府および企業の対応&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;各国政府纷纷表示将采取报复措施。例如，欧盟贸易负责人表示，将于4月15日开始对美国商品实施反制关税。企业界也表达了担忧，华尔街公司如高盛将美国经济衰退的概率提高到45%。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前，全球市场正面临前所未有的挑战，投资者需密切关注贸易政策动向和市场变化，做好风险管理和资产配置。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>暇を持て余し、中国の水墨画風のテーマでデザインをしたい。</title>
        <link>https://ttf248.life/ja/p/designing-a-chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/designing-a-chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;鮮やかな色彩のホームページに飽きてしまい、急に極簡なスタイルで中国水墨画風のテーマをデザインしたいと思いました。&lt;/p&gt;
&lt;p&gt;現在のスタイルシートは、様々な要素に対して特定のスタイルを設定し、テーマのデフォルトスタイルを上書きしているため、カスタマイズされています。&lt;/p&gt;
&lt;p&gt;リファクタリングを行わずにAIを使って新しいテーマを生成してみましたが、結果は不安定でした。
さらに、trae claudeの大規模言語モデルがキューに並んでおり、vscode agentモードに切り替えた場合、その差は顕著で、修正したものが全くデザイン感のあるものとは言えませんでした。&lt;/p&gt;
&lt;p&gt;結局のところ、自分自身のフロントエンドに関する理解が不足しており、AIに効果的にタスクを分解して委託することができないことが原因です。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>広基指数型積立投資：証券会社ETF、恒生テクノロジー指数</title>
        <link>https://ttf248.life/ja/p/broad-based-index-etf-investing/</link>
        <pubDate>Thu, 27 Mar 2025 21:58:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/broad-based-index-etf-investing/</guid>
        <description>&lt;p&gt;以前一直想做的事情，买个合适的蓝筹，然后就放着不管，等到跌了看情况不补仓，涨了就卖掉，结果一直没能做到。
找合适的蓝筹股票麻烦，不如选个宽基指数，买个ETF就行了。目前的计划是：券商ETF、恒生科技指数。
上面这种操作手法，有个专业的名词：左侧下跌补仓。
&lt;strong&gt;后续呢计划选择一个宽基指数来彻底的实践一下，能跑赢定期存款的收益率就行&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;券商etf&#34;&gt;券商ETF
&lt;/h2&gt;&lt;p&gt;券商ETFとは、中国の証券会社を主要な投資対象とする上場取引基金（ETF）であり、主に中国株式市場に上場している証券会社の株式に投資します。券商ETFは通常、特定の証券会社指数、例えば中证证券公司指数などを追跡します。&lt;/p&gt;
&lt;p&gt;以前購入しましたが、その際に高騰を追いかけ、最終的に損失を出して清算しました。中国の市場では、各々が牛市（急上昇相場）を迎えるたびに、券商は必ず上昇する傾向にあります。その上昇幅は、投資家の感情によって左右されます。&lt;/p&gt;
&lt;h2 id=&#34;恒生科技指数&#34;&gt;恒生科技指数
&lt;/h2&gt;&lt;p&gt;恒生科技指数は、香港証券取引所が発表した株式指数であり、香港市場におけるテクノロジー業界全体のパフォーマンスを反映することを目的としています。この指数には、香港に上場している主要なテクノロジー企業が含まれており、インターネット、電子商取引、クラウドコンピューティング、人工知能など、幅広い分野をカバーしています。&lt;/p&gt;
&lt;p&gt;2025年5月20日時点での恒生科技指数（コード：800700）のトップ10構成銘柄とその構成比率は以下の通りです（データは複数の権威ある情報源から総合的に収集）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;小米グループ-W&lt;/strong&gt; (&lt;a class=&#34;link&#34; href=&#34;http://01810.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;01810.HK&lt;/a&gt;): 約8.82%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;腾讯控股&lt;/strong&gt; (&lt;a class=&#34;link&#34; href=&#34;http://00700.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;00700.HK&lt;/a&gt;): 約8.14%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阿里巴巴-W&lt;/strong&gt; (&lt;a class=&#34;link&#34; href=&#34;http://09988.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;09988.HK&lt;/a&gt;): 約7.72%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;京东集团-SW&lt;/strong&gt; (&lt;a class=&#34;link&#34; href=&#34;http://09618.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;09618.HK&lt;/a&gt;): 約7.60%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;美团-W&lt;/strong&gt; (&lt;a class=&#34;link&#34; href=&#34;http://03690.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;03690.HK&lt;/a&gt;): 約7.35%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快手-W&lt;/strong&gt; ([01024.HK](http://01024.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;香港恒生科技指数&#34;&gt;香港恒生科技指数
&lt;/h2&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;&lt;strong&gt;中芯国际&lt;/strong&gt; (&lt;a class=&#34;link&#34; href=&#34;http://00981.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;00981.HK&lt;/a&gt;): 約5.70%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网易-S&lt;/strong&gt; (&lt;a class=&#34;link&#34; href=&#34;http://09999.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;09999.HK&lt;/a&gt;): 約4.59%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;携程集团-S&lt;/strong&gt; (&lt;a class=&#34;link&#34; href=&#34;http://09961.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;09961.HK&lt;/a&gt;): 約4.48%
&lt;strong&gt;合計割合&lt;/strong&gt;: 約66.6%（一部情報源では、上位10社の合計割合が68%-69%と表示されており、統計時点の違いによる差異があります。）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;重要な注意点&#34;&gt;重要な注意点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ウェイト上限メカニズム&lt;/strong&gt;: ハンガ・スウェイ指数において、単一株式のウェイトは8%の上限が設定されています。例えば、中芯国際の2025年3月調整前のウェイトが8%を超えたものの、その後被動的に減持され合規範囲内に収められました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;構成銘柄調整&lt;/strong&gt;: 2025年5月16日、ハンガ・スウェイ指数会社は比亚迪股份（&lt;a class=&#34;link&#34; href=&#34;http://01211.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;01211.HK&lt;/a&gt;）の指数への組み入れと阅文集团（&lt;a class=&#34;link&#34; href=&#34;http://00772.HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;00772.HK&lt;/a&gt;）の除外を発表しました。調整は6月6日に施行されます。したがって、現在（5月20日）構成銘柄は調整前のリストに基づいています。比亚迪はまだ計上されていません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;産業構成&lt;/strong&gt;: 上位10社の構成銘柄の中で、インターネットテクノロジー企業（テンセント、アリババ、美団など）が主導的であり、新エネルギー自動車（小米、理想など）と半導体（中芯国際など）のウェイトは顕著です。これは指数がテクノロジーと新経済の両方をカバーしていることを反映しています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;データタイムスタンプ:&lt;/strong&gt; 異なる情報源のデータの主な差異は、統計的な時間点に起因します。例えば、2025年3月のデータでは上位10社の合計が約69.4%を占めていましたが、5月14日のデータでは68.82%となり、市場変動がその重み付けの動的影響を反映していることを示しています。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;左侧下落補매-left-side-drop-cover&#34;&gt;左侧下落補매 (Left Side Drop Cover)
&lt;/h2&gt;&lt;p&gt;“左侧下落补仓法”是一种投资策略，指在股票价格持续下跌的过程中，投资者预期股价接近底部区域，主动分批买入以降低持仓成本，等待未来价格回升获利。&lt;/p&gt;
&lt;p&gt;该方法属于“左侧交易”的范畴，即在市场尚未明确见底前进行逆势操作。具体操作中，投资者通常采用“金字塔式”加仓策略，即随着股价下跌，逐步增加买入数量，以摊薄平均持仓成本。例如，初次买入一定数量的股票，若股价继续下跌，则在更低价位加大买入力度，以此类推。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;降低持仓成本：&lt;/strong&gt; 通过在下跌过程中分批买入，摊薄平均持股成本，为未来盈利创造条件。 - &lt;strong&gt;先発投資：&lt;/strong&gt; 市場が転換する前にポジションを構築し、判断が正しかった場合、好調な市場回復時により大きな利益を得る。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;リスクが高い：&lt;/strong&gt; 株価が継続的に下落した場合、より大きな損失につながる可能性がある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;資金の占有：&lt;/strong&gt; 継続的な追加買いをサポートするために十分な資金が必要であり、資金が長期間にわたってロックされる可能性もある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相対的には、「右側取引」は市場トレンドが明確で株価が上昇する兆候が明確になった後に買いを入れる操作であり、リスクは比較的低いが、反転初期の利益を逃す可能性がある。したがって、投資家は自身のリスク許容度、資金状況、および市場判断に基づいて、適切な取引戦略を選択する必要がある。&lt;/p&gt;
&lt;h2 id=&#34;評価理論&#34;&gt;評価理論
&lt;/h2&gt;&lt;p&gt;評価理論は、金融学における中心的な概念であり、資産または企業の内在価値を評価することを目的としています。投資判断の根拠となるためです。評価を通じて、投資家は資産の現在の市場価格が妥当かどうかを判断し、それに応じた投資戦略を策定することができます。
&lt;strong&gt;主な評価方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;割引キャッシュフロー法（DCF）：&lt;/strong&gt; この方法は、資産が将来予想されるキャッシュフローを生み出すことを前提とし、これらのキャッシュフローを適切な割引率で現在価値に換算します。DCF法は、企業の内在価値を重視し、収益性が安定しており予測可能な企業評価に適しています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;相対評価法：&lt;/strong&gt; この方法は、対象となる企業と類似業界の他の企業の評価指標（株価収益率（P/E）、株価純資産倍率（P/B）、株価売上倍率（P/S）など）を比較することで、企業の相対的な価値を評価します。 相対評価法は操作が容易で、迅速な評価や同業他社との比較に広く用いられます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;資産基礎法:&lt;/strong&gt; この方法は、会社の純資産価値（資産合計から負債を差し引いた額）を評価することで、その価値を決定します。資産基礎法は、資産主導型の企業、例えば不動産会社や資本集約型企業に適しています。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;評価理論の応用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;投資判断:&lt;/strong&gt; 評価を通じて、投資家は割安または割高な資産を特定し、買い付けまたは売却の戦略を策定できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;企業買収:&lt;/strong&gt; 買収取引において、評価は取引価格を決定する上で不可欠であり、取引の成否に影響を与えます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;評価理論-1&#34;&gt;評価理論
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;財務報告:&lt;/strong&gt; 会社は資産と負債の公允価値を評価し、財務諸表の正確性と透明性を確保する必要があります。
留意点として、評価結果は市場環境、会社の経営状況、マクロ経済指標など、さまざまな要因の影響を受けます。したがって、評価を行う際には、これらの要素を総合的に考慮し、定性的および定量的な分析を組み合わせることで、より正確な評価を得ることが重要です。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>コードを記述せず、カスタム株式選定モジュールを設計・開発する。</title>
        <link>https://ttf248.life/ja/p/design-develop-custom-stock-module-no-code/</link>
        <pubDate>Thu, 27 Feb 2025 23:20:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/design-develop-custom-stock-module-no-code/</guid>
        <description>&lt;p&gt;先月の当社では、cursorを試用しましたが、無料枠の制限により、複雑な機能開発は行わず、簡単なテストにとどまりました。その際に見つけたのは、Byte社も同様の製品を発表しており、両者は底層で呼び出している大規模言語モデルがClaude-3.5である点でした。
Byte社の製品はTraeといい、最初にリリースされたmac版は今年2月にWindows版もリリースされました。大手企業のものは良いもので、無料で利用でき、Claude-3.5を無制限に使用できるため、このモデルの性能は非常に優れています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最終的にはK線チャートの開発に詰まりました。Reactの知識がほとんどないため、諦めざるを得ませんでした。もし継続的に開発を進めるのであれば、筆者がフロントエンドの基礎知識を補強し、タスクをより細かく分割して、直接「K線チャートの開発」という大きなタスクを与えるのではなく行うべきです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;発見された問題点&#34;&gt;発見された問題点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;外国製のAIモデルを使用していたため、Vue3 + Element-Plusの学習データが不足しており、Reactをフロントエンドフレームワークとして採用しました。&lt;/li&gt;
&lt;li&gt;偶発的な構文エラーが存在する可能性があり、手動での修正が必要です。&lt;/li&gt;
&lt;li&gt;一部の複雑な問題に対する解決策は、人的指導が必要となります。&lt;/li&gt;
&lt;li&gt;コード構造の最適化には、人的指導が必要です。&lt;/li&gt;
&lt;li&gt;最も時間がかかったのは、フロントエンドコードをコンテナにパッケージングすることでした。筆者は環境が全く理解されておらず、&lt;code&gt;.env.production&lt;/code&gt;や&lt;code&gt;tsconfig.json&lt;/code&gt;といった概念自体を知らなかったため、途中で助けを求める豆包（ネットでの質問サイトのユーザー）に頼らざるを得ませんでした。フロントエンドの開発 devモードとbuildモードでは、コードチェックや差異が大きく異なりました。バックエンドのデータベースおよびサービスのコンテナスクリプトは、合計5分で完了しました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AIは現状では開発効率を向上させる主な役割であり、基礎があることは最適です。AIがすべての問題を解決してくれるわけではありません&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;リポジトリアドレス&#34;&gt;リポジトリアドレス
&lt;/h2&gt;&lt;p&gt;タイトル通り、今回は手を動かさず、AIと雑談して、自選株モジュールを設計・開発してみます。最終的に何ができるのかを見てみたいと思います。&lt;/p&gt;
&lt;p&gt;リポジトリアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/trae-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/trae-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;詳細な使用方法は、リポジトリのREADME.mdファイルをご覧ください。&lt;/p&gt;
&lt;p&gt;このリポジトリには多数の提出記録が含まれており、ほとんどが私とTraeとの会話記録、およびTraeの機能に対する私のテストです。対応する機能を実装するために人工干渉を行ったかどうかを備考に記載しています。&lt;/p&gt;
&lt;h2 id=&#34;プロンプト&#34;&gt;プロンプト
&lt;/h2&gt;&lt;p&gt;プロジェクトは、ゼロから作成するものですが、以下はそのプロンプトです：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;プロジェクトのプロトタイプ図に基づいて、以下の機能を開発してください：株式の選定（ウォッチリスト）、新規追加、削除、修正、照会機能。選定株インターフェースには、基本的な市場データを表示する必要があります。複数の異なる市場への切り替えをサポートする必要があります。

フロントエンド：React
バックエンド：Golang Gin GORM
データベース：PostgreSQL

サーバーサイドは、クロスオリジンリクエストをサポートする必要があり、データの検証とエラー処理も考慮する必要があります。バックエンドサービスが利用できない場合、フロントエンドはアラートを表示する必要があります。

バックエンドは、リクエストとレスポンスのログを表示し、フロントエンドも通信ログを出力して問題のトラブルシューティングに役立てます。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;uiとインタラクションの最適化&#34;&gt;UIとインタラクションの最適化
&lt;/h2&gt;&lt;p&gt;フロントエンドインターフェースのデザインは完全にGrokに依存しています。まず、Trae内で成果物のプロトタイプを作成しましたが、美観が欠けていました。使用していたモデルはコード能力は非常に高いものの、他の能力は弱いため、Grokを使用してフロントエンドのUIを最適化する必要があります。&lt;/p&gt;
&lt;p&gt;現在のインターフェースのスクリーンショットを撮影し、それをGrokにアップロードして、UIの最適化を依頼します。これにより、一度に多くの最適化提案を得ることができ、それらを人工的に評価し、Traeにコピーして実行し、最適化の効果を確認します。&lt;/p&gt;
&lt;h3 id=&#34;技術スタック&#34;&gt;技術スタック
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;フロントエンド：React + TypeScript&lt;/li&gt;
&lt;li&gt;バックエンド：Golang + Gin + GORM&lt;/li&gt;
&lt;li&gt;データベース：PostgreSQL 17&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;システムアーキテクチャ&#34;&gt;システムアーキテクチャ
&lt;/h2&gt;&lt;h2 id=&#34;后端アーキテクチャ&#34;&gt;后端アーキテクチャ
&lt;/h2&gt;&lt;p&gt;后端は Golang の Gin フレームワークを用いて RESTful API を実装しており、主なモジュールには以下が含まれます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;データベースモジュール&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;GORM を ORM フレームワークとして使用&lt;/li&gt;
&lt;li&gt;環境変数でデータベース接続を設定可能&lt;/li&gt;
&lt;li&gt;データベーススキーマの自動移行機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ルーティングモジュール&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RESTful API 設計&lt;/li&gt;
&lt;li&gt;一貫したエラーハンドリング機構&lt;/li&gt;
&lt;li&gt;内蔵のリクエストログ記録&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;クロスオリジン処理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ローカル開発環境でのクロスオリジンをサポート&lt;/li&gt;
&lt;li&gt;設定可能な CORS ポリシー&lt;/li&gt;
&lt;li&gt;Cookie によるクロスオリジンをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;フロントエンドアーキテクチャ&#34;&gt;フロントエンドアーキテクチャ
&lt;/h2&gt;&lt;p&gt;フロントエンドはReact + TypeScriptで構築され、以下の機能を実装しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;株価リストの表示&lt;/li&gt;
&lt;li&gt;お気に入り銘柄の管理&lt;/li&gt;
&lt;li&gt;相場データ表示&lt;/li&gt;
&lt;li&gt;エラー通知メカニズム&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>AI開発2年：ドッカーのリリース前の状態に似ている</title>
        <link>https://ttf248.life/ja/p/ai-development-two-years-like-docker-pre-release/</link>
        <pubDate>Thu, 20 Feb 2025 18:16:37 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-development-two-years-like-docker-pre-release/</guid>
        <description>&lt;p&gt;人工知能（AI）は近年、技術分野で最も議論を呼ぶトピックの一つであり、特に過去2年間でその進歩は目覚ましいものがありました。深層学習、自然言語処理、コンピュータビジョン、自動化意思決定システムなど、AIの応用範囲は多岐にわたります。しかしながら、技術が着実に進化を続けているにもかかわらず、AIはDockerのリリース前のボトルネックに似た状況にあります――つまり、市場を本格的に引き出す「ゲームチェンジャー」となる主要なアプリケーションが存在しないのです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プロンプト：記事を作成してください：AIは2年間の発展を経ており、Dockerのリリース前のボトルネックに似ています。既存技術に基づいて、完璧で実現可能なシナリオを作り出し、Dockerはあまり新しい技術を使用していませんが、全体的なソリューションは合理的に機能し、運用および開発ワークフローを変革します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;aiの現状技術は成熟しているが応用には突破が必要&#34;&gt;AIの現状：技術は成熟しているが、応用には突破が必要
&lt;/h2&gt;&lt;p&gt;技術的な側面から見ると、AIは過去2年間で相当な進歩を遂げました。OpenAIが発表したGPTシリーズモデルや、GoogleのBERT、DeepMindのAlphaシリーズなど、AIの処理能力は以前の予測を大きく上回っています。特に自然言語処理分野では、GPT-4などのモデルが強力な生成能力に加えて、理解と推論においても驚くべきパフォーマンスを発揮しています。&lt;/p&gt;
&lt;p&gt;しかしながら、技術革新は日進月歩であるにもかかわらず、AIの実用的な応用においてはいくつかの課題が残されています。Dockerのリリース前の状況に似ており、AIの潜在力は巨大ですが、現状では広く普及し、産業を変革するようなゲームチェンジャーとなるアプリケーションはまだ出現していません。人々はAIの将来について議論していますが、必ずしも革命的な変化をもたらすことができる直接的な応用シナリオを見つけるとは限りません。&lt;/p&gt;
&lt;h2 id=&#34;dockerとaiの類似性技術は必ずしも革新ではなく解決策が重要&#34;&gt;DockerとAIの類似性：技術は必ずしも革新ではなく、解決策が重要
&lt;/h2&gt;&lt;p&gt;Dockerリリース前の歴史を振り返ると、技術環境とAIの現状には多くの類似点が見られることに気づきます。Dockerリリース前にコンテナ技術自体が新しいものではありませんでした。初期のLXC（Linux Containers）や仮想化技術もコンテナ化の基本的な能力を持っていました。しかし、Dockerは既存技術の巧みな統合と最適化を通じて、よりシンプルで直感的かつ効率的な解決策を提示しました。この解決策は、画期的な技術を導入したわけではありませんが、運用・開発プロセスにおける多くの課題を解決し、ソフトウェアのデプロイ、拡張、管理プロセスの大幅な簡素化を実現しました。&lt;/p&gt;
&lt;p&gt;同様に、AI分野も類似の状況に直面しています。 現在のAI技術は「新鮮なもの」ではなくなったとはいえ、本格的な大規模展開を実現するには、完璧な実現シナリオが必要であり、Dockerのように既存の技術を統合し最適化して、合理的なアプリケーションソリューションを形成することが求められます。AIの殺手級アプリケーションは、画期的な技術的ブレークスルーに依存するのではなく、既存の技術を組み合わせて、実際のビジネスにおける課題やニーズを解決することにあるかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;aiのdocker-momentを見つけるには&#34;&gt;AIの「Docker Moment」を見つけるには？
&lt;/h2&gt;&lt;p&gt;AI技術が広く普及するためには、いくつかの側面から取り組む必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;実用的なシナリオの深掘り&lt;/strong&gt;
現在、多くのAIアプリケーションは実験的な性質を持ち、大規模な実用化に乏しいです。例えば、AIチャットボットやレコメンデーションシステムなどの分野は広く利用されていますが、その機能にはまだ多くの制約があり、業界のボトルネックを打破していません。真のブレイクスルーは、従来のやり方に困っている業界、例えば医療、製造業、物流などの分野から来る可能性があります。AIは、より効率的なデータ処理と予測分析を通じて、これらの複雑なシナリオにおいて企業が効率を高め、コストを削減するのを支援できます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;製品化と使いやすさ&lt;/strong&gt;
Dockerのようにコンテナ化プロセスを簡素化し運用効率を向上させるのと同様に、AI製品の使いやすさは非常に重要です。 AIの普及は、技術の普及だけではなく、その製品化の普及でもある。AIを日常業務フローに統合し、ユーザーが技術を深く理解する必要なく、これらのツールを簡単に利用できるようにすることは、AIの実落地における重要な一歩である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;エコシステムの構築と標準化&lt;/strong&gt;
新しい技術の広範な応用には、エコシステムの構築が不可欠である。Dockerが急速に台頭したのも、そのオープン性と互換性により、開発者がさまざまなクラウドプラットフォーム、ツール、サービスと容易に連携できたためである。同様に、AIの未来もエコシステムの構築に依存する。AIの標準化、モデルの共有、データのオープン、技術の統合可能性などが、AIが広範な産業応用を形成できるかどうかを左右するだろう。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;結論aiの未来は可能性に満ちているが更なる完成された落とし場所が必要である&#34;&gt;結論：AIの未来は可能性に満ちているが、更なる完成された落とし場所が必要である
&lt;/h2&gt;&lt;p&gt;過去2年間にわたり、AI技術は目覚ましい進歩を遂げているものの、現状では「決定的な応用例」が存在しない段階にある。Dockerリリース前のコンテナ化技術と似ているところもあるだろう。AIには、既存の技術をビジネスニーズと深く融合させる合理的な適用シナリオが必要であり、初めて大規模な応用と普及を実現できる。技術革新は重要であることはもちろんだが、業務プロセスを簡素化し、効率を高めるソリューションこそが、技術の普及と発展を促進するだろう。&lt;/p&gt;
&lt;p&gt;未来において、AIはDockerのように、画期的な技術的ブレークスルーではなく、既存技術を統合し、完璧な適用シナリオを構築することで、私たちの仕事や生活様式を変革していく可能性がある。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Protobufのゼロ値問題：デフォルト値が暗黙のビジネスロジックの致命的な脅威となる</title>
        <link>https://ttf248.life/ja/p/protobuf-zero-value-trap/</link>
        <pubDate>Thu, 20 Feb 2025 15:26:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/protobuf-zero-value-trap/</guid>
        <description>&lt;p&gt;米国株式市場には、プレマーケット、正盤、クロス盤の3つの取引時間があります。データ配信は、バッファーストリーム形式か数値増分のロジック（可能な限り帯域幅を節約）を採用し、初回送信のみ全量データを送るようにします。その後はすべて増分推送となります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なぜ最適解を用いないのか？複数のプロジェクトグループが関わっており、一部はすでに数年ローンチされているためです。弊社は新規の連携であるため、できる限り互換性を保つようにしています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;いくつかの問題点&#34;&gt;いくつかの問題点
&lt;/h2&gt;&lt;p&gt;概要だけでは、特に問題がないように見えるかもしれないが、社内システムアーキテクチャに組み込まれた問題や、それらを引き起こす一連の問題が発生する。直前に問題を解決したにもかかわらず、新たな問題が発生し、これは以前の問題によって引き起こされたものである。&lt;/p&gt;
&lt;h3 id=&#34;取引時間帯の認識エラー&#34;&gt;取引時間帯の認識エラー
&lt;/h3&gt;&lt;p&gt;盤中ステージを &lt;code&gt;protobuf&lt;/code&gt; で定義されている 0 と認識していますが、増分配信のため、業務側ではこの 0 がデフォルト値なのか、それとも実際の取引値なのかを明確に判断できません。&lt;/p&gt;
&lt;p&gt;分かりやすく言うと、0 を受信した際に、それが新行情設定の値なのか、&lt;code&gt;protobuf&lt;/code&gt; のデフォルト値なのかを判断できないということです。&lt;/p&gt;
&lt;h3 id=&#34;オプショナルについて&#34;&gt;オプショナルについて
&lt;/h3&gt;&lt;p&gt;protobuf 3.15 以降、proto3 では (proto2 と同様に) オプショナルキーワードを使用することで、スカラーフィールドの存在情報を指定できるようになりました。&lt;/p&gt;
&lt;p&gt;グループ内の通信プロトコルは &lt;code&gt;protobuf&lt;/code&gt; をベースにしていますが、歴史的な理由により選択されたバージョンが古く、&lt;code&gt;optional&lt;/code&gt; キーワードをサポートしていません。理解は自明で、低レベルから &lt;code&gt;protobuf&lt;/code&gt; を導入したため、プロジェクトのローエンドでは静的ライブラリとして &lt;code&gt;protobuf&lt;/code&gt; を公開しており、その結果、コンパイルチェーン全体をアップグレードする必要があり、このコストは非常に高くなっています。&lt;/p&gt;
&lt;h3 id=&#34;gcc-のバージョン問題&#34;&gt;GCC のバージョン問題
&lt;/h3&gt;&lt;p&gt;ようやく解決策を思いついたのだが、底层で異なるバージョンのリリースをするという方法を試みた。可能な限り &lt;code&gt;protobuf&lt;/code&gt; の新しいバージョンのコンパイル依存関係の伝播を制御しようとした。しかし、コンパイル時に &lt;code&gt;gcc&lt;/code&gt; のバージョンが低すぎて、&lt;code&gt;protobuf&lt;/code&gt; の新機能に対応していないことが判明した。
グループ内でよく使われるサーバーの種類：CentOS7、CentOS8。CentOS7 のデフォルトの &lt;code&gt;gcc&lt;/code&gt; バージョンは 4.8 であり、CentOS8 のデフォルトの &lt;code&gt;gcc&lt;/code&gt; バージョンは 8.3 である。&lt;code&gt;protobuf&lt;/code&gt; の新機能は &lt;code&gt;gcc&lt;/code&gt; のバージョンが 7.4 以上であることを必要とするため、CentOS7 はサポートできない。
&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bug 82461 - [7 Regression] Temporary required for brace-initializing (non-literal-type) member variable&lt;/a&gt;。
結局、関連サービスのデプロイやコンパイルサーバーを CentOS8 に移動することで問題を解決した。&lt;/p&gt;
&lt;h2 id=&#34;理論的な列挙&#34;&gt;理論的な列挙
&lt;/h2&gt;&lt;p&gt;問題を全体的に見直すと、よりシンプルで効率的な解決策があります。それは、列挙の定義を調整し、1から番号付けするようにすることです。これにより、デフォルト値とビジネス値を明確に区別でき、上記のような問題を防ぐことができます。&lt;/p&gt;
&lt;h3 id=&#34;なぜ-1-から始める方が合理的なのか&#34;&gt;なぜ 1 から始める方が合理的なのか？
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;protobuf&lt;/code&gt; において、enum 型のデフォルト値は固定で 0 に設定されています。もし、有意義なビジネス値を 0 (例えば「市場中」) に定義した場合、増量プッシュ時にビジネス側では受信した 0 がビジネス値なのか、未設定のデフォルト値なのか判断できません。一方、enum を 1 から定義すれば、0 は無意味なデフォルト値または「未知」の状態として保持でき、問題が解決されます。&lt;/p&gt;
&lt;p&gt;推奨される実践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protobuf の enum を設計する際には、常に 0 を無意味なデフォルト値 (例: &lt;code&gt;UNKNOWN&lt;/code&gt; または &lt;code&gt;RESERVED&lt;/code&gt;) として定義すること。&lt;/li&gt;
&lt;li&gt;実際のビジネス値を 1 から割り当て、デフォルト値 0 と区別できるようにすること。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この小さな調整により、取引時間帯の識別の問題を解決するだけでなく、将来のプロトコル設計にも貴重な教訓を提供しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>国慶節前後の株式市場における「氷火両重天」（寒暖差）現象：急騰と急落の劇的な転換</title>
        <link>https://ttf248.life/ja/p/stock-market-rollercoaster-ahead-of-national-day/</link>
        <pubDate>Sat, 15 Feb 2025 03:42:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/stock-market-rollercoaster-ahead-of-national-day/</guid>
        <description>&lt;p&gt;2024年の国慶前に、中国株式市場は注目すべき急騰相場を経験したが、休暇後には劇的な暴落へと転換した。この株式市場の「氷火両重天」（冷暖差）は、投資家たちにジェットコースターのような心境をもたらすと同時に、政策、経済、そして市場の規律に対する深い考察を引き起こした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;昨年国慶前の株価暴騰をテーマにブログを作成し、最後に国慶後の株価暴落を含める。文章スタイル：ニュース記事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;国慶前の株式市場の大暴落政策主導の狂騒&#34;&gt;国慶前の株式市場の大暴落：政策主導の狂騒
&lt;/h2&gt;&lt;p&gt;2024年の国慶前に5営業日に及び、中国株式市場は低迷から一転、「沸騰モード（煮えたぎる状態）」へと急上昇した。9月30日、A株市場全般に放出し買いが集中し、主要指数は歴史新高を更新した。上證指数は8.06%の大幅な上昇、深証成指は10.67%、創業板指は15.36%の大暴騰、北证50指数は史上最大の一日株価上昇記録を更新し、22.84%も急騰した。市場のセンチメントは極度に高揚し、沪深北三市（上證、深証、創業板）の当日の取引額は26115億元に達し、前営業日と比較して11559億元も増加した。大盤には超5300隻（株式）の銘柄が上昇を続け、「一片紅（一面真っ赤）」という状況となった。&lt;/p&gt;
&lt;p&gt;この相場を牽引した主な要因は、政府による一連の予想を上回る政策発表と、それによって引き起こされた市場期待の変化である。 9月24日、中国人民銀行宣布降準降息，降低存量房貸利率，並統一房貸的最低首付比例。9月26日的中央政治局會議強調，要加大財政貨幣政策逆周期調節力度，努力提振資本市場，大力引導中長期資金入市。9月30日、四項房地產支持政策密集出台。這些政策措施向市場傳遞了政府全力穩市場、穩增長的決心。&lt;/p&gt;
&lt;h2 id=&#34;国慶後の株式市場の大幅暴落歓喜後の冷静と調整&#34;&gt;国慶後の株式市場の大幅暴落：歓喜後の冷静と調整
&lt;/h2&gt;&lt;p&gt;しかし、国慶節（国慶の日）の後、市場のセンチメントは急激に下落した。10月8日、A株はほぼストップ高の水準で強気にオープンしたが、大幅な上昇後、市場は激しい変動を迎え、最終的に高値から低値へと大きく落ちてクローズした。それ以来、市場の中心重力は継続的に低下し、10月16日時点で上海総合指数（沪指）の振幅は15%を超え、累計470点以上下落した。10月8日から10日までの期間、A株の主要指数は全線で低迷し、特に新業期指数（创业板指）は6.21%下落した。&lt;/p&gt;
&lt;p&gt;この暴落の原因の一つは、前期の急速な上昇によって蓄積されたリスクの消化である点に加え、市場が政策に対する期待を調整したこととも関連している。一部の投資家は、政策の効果が短期的に現れていると見ているものの、長期的な効果については引き続き注視する必要があると主張している。さらに、外部市場の変動もA株に影響を与えた。10月9日、恒生指数（恆生指数）は9.41%暴落し、A50先物（A50期货）は10%以上暴落した。&lt;/p&gt;
&lt;h2 id=&#34;市場の反省と展望&#34;&gt;市場の反省と展望
&lt;/h2&gt;&lt;p&gt;国慶節前後の株式市場における劇的な変動は、政策、経済、市場の規則に対する深刻な反省を市場に引き起こした。一方、政策の効果的な短期刺激は顕著であったが、その長期的な効果については引き続き注視する必要がある。他方、市場の急速な上昇と下落は、投資家が合理性を保ち、感情的な投資を避けるように促している。&lt;/p&gt;
&lt;p&gt;将来、A株市場が真の「長牛」（長期的な上昇トレンド）となることができるかどうかは、政策が実体経済に効果的に伝達され、最終的に経済基本面を改善させる能力にかかっている。投資家は政策の実践状況と経済データの変化に注意を払い、投資戦略を適切に調整する必要がある。&lt;/p&gt;
&lt;p&gt;国慶節前後における株式市場の暴騰と暴落は、政策と市場との駆け引きであり、投資家の心構えを試すものとなった。&lt;/p&gt;</description>
        </item>
        <item>
        <title>春節檔 哪吒出圈 (Chūnjié dǎng Nǎzhā chūkǒu) - This is a direct translation, preserving the original phrasing.  It&#39;s commonly understood in Japanese as is.</title>
        <link>https://ttf248.life/ja/p/ne-zha-breaks-through-during-spring-festival/</link>
        <pubDate>Sat, 15 Feb 2025 03:40:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ne-zha-breaks-through-during-spring-festival/</guid>
        <description>&lt;p&gt;私たちが中国人だというのに、旧正月を迎えるたびに家族みんなで団らんをして映画を見るのは、なくてはならない娯楽の一つです。今年の旧正月公開作品『哪吒』は、一言で言うと大ヒットし、話題になり尽くしました。街中や商店では皆が話し合っていて、この勢いは、以前の『戦狼』を彷彿とさせます。どこか懐かしい愛国心に満ちた雰囲気があり、自然と国民的誇りを感じさせてくれます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プロンプト：記事を作成し、テーマは旧正月公開作品『哪吒』の大ヒットと、それに伴う不思議な民族的な自豪感、以前の映画『戦狼』のような愛国的主題。否定できない進歩があるものの、これほど良いレベルには達していません。ゲーム党としては、多くの面が油っぽい印象を与え、格闘の場面はオンラインゲームの影響を強く受けています。すでに、『哪吒』の興行収入のために映画チケットを購入したが実際には見に行かない人たちも多くいます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;戰闘シーンの質感が足りない&#34;&gt;戰闘シーンの質感が足りない
&lt;/h2&gt;&lt;p&gt;私はゲーム党として、普段は色々なオンラインゲームの世界に没頭しているので、映画にはあまり期待していませんでした。しかし、この『哪吒』の話題が非常に高かったので、周りの人たちが口々に褒めてくるうちに、「まあ、見てみるか」と思って映画館へ行きました。映像が流れ始めた瞬間、私の心の中で「バサッ」と音がしました。確かに以前に比べて画面制作は進んでいるものの、いくつかのシーンでは少し油ぎった感じがあり、特に戦いの場面は…どう表現すればいいのか。オンラインゲームの雰囲気が強すぎました。私は長年ゲームをプレイしてきたので、この映像スタイルとゲームの中のいくつかのシーンが非常に似ていて、映画であるべきものが持つ質感が欠けていました。&lt;/p&gt;
&lt;h2 id=&#34;狂気のシャドウミステリー&#34;&gt;狂気のシャドウ・ミステリー
&lt;/h2&gt;&lt;p&gt;映画を観終わって外に出てみると、うわー！ネット上には、この『哪吒』の興行収入のためにチケットを買ったのに映画を見なかったという人が結構いるらしい。その行動も私も感服するよ。みんながこの映画を支持する情熱は本当に高く、何かしてくれるために尽力しているんだね。&lt;/p&gt;
&lt;h2 id=&#34;物語のあらすじ&#34;&gt;物語のあらすじ
&lt;/h2&gt;&lt;p&gt;以前の『戦狼』で呉京が「私を侮辱すれば、遠くからでも必ず討つ」と叫んだとき、多くの人が熱狂し、『中国軍隊は本当にすごい！ 中国は本当に強い！』と感じていた。本作『哪吒』には、それほど直接的な愛国口調はないものの、中国の伝統文化を鮮やかに描き出している。哪吒や敖丙といった神話上の人物たちは、幼い頃から彼らの物語を聞いて育ってきた私たちにとって、映画は彼らの因縁、成長の過程を血肉のように描いている。まさにこれが中国文化の魅力なのである。&lt;/p&gt;
&lt;p&gt;例えば哪吒だ。『哪吒』は幼い頃から誤解され、白い目で見られ、それでも屈しない。自らを「私の運命は私自身で決める」と叫ぶその精神は、中国人たちの骨子に宿る強靭な精神性と非常に似ている。どんな困難にも屈することなく、自分の努力によって運命を変えていくのだ。&lt;/p&gt;
&lt;h2 id=&#34;アニメ映画の進歩&#34;&gt;アニメ映画の進歩
&lt;/h2&gt;&lt;p&gt;『哪吒』がどこかでは完璧とは言えないものの、中国伝統文化と現代映画技術を巧みに融合させた点が高く評価され、中国アニメ映画の進歩を目の当たりにさせました。まるで『戦狼』が中国映画をアクション映画分野で飛躍させるきっかけになったようにです。このような進歩により、中国映画が国際舞台でその存在感を示し、外国人にも中国文化の魅力を感じてもらえるようになりました。&lt;/p&gt;
&lt;p&gt;中国人として、どこへ行っても自国の国と文化を大切に思っています。『哪吒』や『戦狼』のような作品は、まるで鍵のように、私たちの内なる民族誇りの扉を開きました。喜びにあふれた中で、国家の強さや文化の魅力を感じ、それぞれの立場で努力し、国家の繁栄に貢献しようという意欲を掻き立てます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>バックエンドサービス TCP 通信異常トラブルシューティング</title>
        <link>https://ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</link>
        <pubDate>Fri, 14 Feb 2025 22:54:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</guid>
        <description>&lt;p&gt;ビジネスモデル：バックエンドサービスがTCPを通じてグループの行情ゲートウェイと接続します。接続ごとに、最初に権限リクエストを送信し、その後継続的にハニーポットパケットを送信して接続状態を維持します。&lt;/p&gt;
&lt;p&gt;しかし、ある日、サービス切断警告の情報を受け取りました。詳細なログ調査の結果、バックエンドサービスは継続的にハニーポットパケットを送信していたにもかかわらず、相手からの応答はなく、接続が常に切断されませんでした。&lt;/p&gt;
&lt;h2 id=&#34;現場要約&#34;&gt;現場要約
&lt;/h2&gt;&lt;p&gt;原本在会社でプロジェクトの進捗を推進していたところ、業務チャットに警報情報がポップアップされました。初めは、以前からのトラブルだと思っていましたが、おそらくネットワークタイムアウトにより心拍送信が失敗し、サービスが切断されたのだと推測しました。しかし、ログの詳細な調査の結果、実際にはそうではありませんでした。バックエンドから認証ログインメッセージを送信しましたが、応答を受信しませんでした。同時に、心拍パケットは継続的に送信され続けていましたが、相手側からは決して応答がありませんでした。ログの徹底的な分析により、以下の重要な問題が明らかになりました：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;認証メッセージへの応答なし：おそらく相手側のシステムが再起動しており、認証メッセージが適切に処理されていない可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;認証失敗中に心拍パケットを送信：調査の結果、これはプログラムロジック上の脆弱性であることが判明しました。 心拍送信関数の判断ロジックに欠陥があり、接続状態のみを検証するだけで、権限状態の検証が抜け落ちていました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;サービス未断開接続：サービスが断開可能であれば、再接続メカニズムをトリガーして、改めて認証メッセージを送信できます。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現在、解決すべき最後の課題は、なぜサービスが断開できないのかという点です。この問題の解決には、より詳細かつ綿密な調査が必要です。&lt;/p&gt;
&lt;h2 id=&#34;ネットワークパケットの分析&#34;&gt;ネットワークパケットの分析
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;tcpdump&lt;/code&gt; は非常に強力なネットワークパケットキャプチャツールであり、ネットワークパケットを捕捉するために使用できます。ネットワークパケットを分析することで、通信の詳細をより直感的に理解することができます。ここでは、&lt;code&gt;tcpdump&lt;/code&gt; を使用してネットワークパケットをキャプチャし、さらに分析します。
&lt;img src=&#34;https://ttf248.life/p/backend-service-tcp-communication-troubleshooting/20250220151952.png&#34;
	width=&#34;1126&#34;
	height=&#34;202&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcpdump&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;557&#34;
		data-flex-basis=&#34;1337px&#34;
	
&gt;
分析図のデータから、心拍は正常に送信され続けており、相手側のサーバーからはデータが返ってきていませんが、&lt;code&gt;ACK&lt;/code&gt; が送られていたため、接続は積極的に切断されませんでした。&lt;/p&gt;
&lt;h2 id=&#34;共通フラグの説明&#34;&gt;共通フラグの説明
&lt;/h2&gt;&lt;p&gt;TCP プロトコルにおいて、&lt;code&gt;PSH&lt;/code&gt; (Push) と &lt;code&gt;ACK&lt;/code&gt; (Acknowledgment) は重要なフラグであり、それぞれデータ転送の制御とフロー制御に使用されます。その機能は以下のとおりです。&lt;/p&gt;
&lt;h3 id=&#34;1-pshpush-flag&#34;&gt;&lt;strong&gt;1. PSH（Push Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;機能:&lt;/strong&gt;
&lt;code&gt;PSH&lt;/code&gt; フラグは、受信側がバッファ内のデータを上位のアプリケーションに&lt;strong&gt;即時送信するよう要求する&lt;/strong&gt;ものです。（バッファが満杯で待つのではなく）。 つまり、&lt;code&gt;PSH&lt;/code&gt; フラグが付いたデータ段を受信すると、受信側はできるだけ早く処理してアプリケーションに渡すのではなく、バッファー内に一時的に保存することなく、すぐに伝送します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型的なシナリオ:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP/HTTPS リクエスト:&lt;/strong&gt; クライアントがリクエストを送信する際（例: &lt;code&gt;GET /index.html&lt;/code&gt;）には &lt;code&gt;PSH&lt;/code&gt; が設定され、サーバーから即時の応答を希望します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH プロトコル:&lt;/strong&gt; 毎回キーボード入力が発生すると &lt;code&gt;PSH&lt;/code&gt; がトリガーされ、入力された文字をリアルタイムで転送することを保証します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;リアルタイム通信:&lt;/strong&gt; ビデオストリームやオンラインゲームなど、低遅延のシナリオでは &lt;code&gt;PSH&lt;/code&gt; を使用して遅延を減らす可能性があります。 - &lt;strong&gt;注意&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PSH&lt;/code&gt; は必須ではありません。受信側はフラグを無視することもできます（ただし、データは正常に処理する必要があります）。&lt;/li&gt;
&lt;li&gt;送信側が &lt;code&gt;PSH&lt;/code&gt; を設定しない場合、受信側は自身のバッファリングポリシーに基づいてデータの送信タイミングを決定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-ackacknowledgment-flag&#34;&gt;&lt;strong&gt;2. ACK（Acknowledgment Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;機能&lt;/strong&gt;: &lt;br&gt;
&lt;code&gt;ACK&lt;/code&gt; 标志位は、&lt;strong&gt;前序データ段が正しく受信されたことを示す&lt;/strong&gt;。各 &lt;code&gt;ACK&lt;/code&gt; には確認番号（&lt;code&gt;Acknowledgment Number&lt;/code&gt;）が含まれており、これは期待される次のバイトのシーケンス番号を表します。TCP の信頼性のある転送の中核メカニズムです。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;動作原理&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;送信側がデータ段を送信する際、期待される受信側の &lt;code&gt;ACK&lt;/code&gt; 値（例えば &lt;code&gt;ACK = シーケンス番号 + データ長&lt;/code&gt;）を付与します。&lt;/li&gt;
&lt;li&gt;受信側がデータを受信すると、受信したデータのシーケンス番号を確認するための &lt;code&gt;ACK&lt;/code&gt; 報文段を生成します。&lt;/li&gt;
&lt;li&gt;送信側は、対応する &lt;code&gt;ACK&lt;/code&gt; を受信するまで再送しません。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;例&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;送信側が &lt;code&gt;100~199&lt;/code&gt; のシーケンス番号のデータ段を送信した場合、期待される受信側の &lt;code&gt;ACK&lt;/code&gt; は &lt;code&gt;200&lt;/code&gt; になります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-psh-と-ack-の組み合わせ&#34;&gt;&lt;strong&gt;3. PSH と ACK の組み合わせ&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;TCP 報文において、&lt;code&gt;PSH&lt;/code&gt; (Push) と &lt;code&gt;ACK&lt;/code&gt; (確認応答) は同時に出現することがあり、以下のような状況でよく見られます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HTTP リクエスト応答&lt;/strong&gt;：&lt;br&gt;
クライアントが &lt;code&gt;POST&lt;/code&gt; リクエスト（データを含む）を送信する際、&lt;code&gt;PSH&lt;/code&gt; と &lt;code&gt;ACK&lt;/code&gt; を設定し、前の応答の確認を行います。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH ハンドシェイク後のコマンド転送&lt;/strong&gt;：&lt;br&gt;
クライアントがコマンドを入力した後、&lt;code&gt;PSH&lt;/code&gt; と &lt;code&gt;ACK&lt;/code&gt; が付いたデータ段を送信することで、コマンドが即座にサーバーで処理されるようにします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-その他の関連を示すフラグ&#34;&gt;&lt;strong&gt;4. その他の関連を示すフラグ&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フラグ&lt;/th&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SYN&lt;/td&gt;
&lt;td&gt;シーケンス&lt;/td&gt;
&lt;td&gt;接続の初期化 (3ウェイハンドシェイク)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-その他の重要な関連&#34;&gt;&lt;strong&gt;4. その他の重要な関連&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;標識&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FIN&lt;/td&gt;
&lt;td&gt;終了&lt;/td&gt;
&lt;td&gt;エレガントな接続のクローズ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-その他の関連を示すフラグ-1&#34;&gt;&lt;strong&gt;4. その他の関連を示すフラグ&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フラグ&lt;/th&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td&gt;リセット&lt;/td&gt;
&lt;td&gt;接続の強制終了 (異常状態)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-その他の重要な関連-1&#34;&gt;&lt;strong&gt;4. その他の重要な関連&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;標識&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;概要&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;URG&lt;/td&gt;
&lt;td&gt;緊急&lt;/td&gt;
&lt;td&gt;緊急ポインタのマーキング（ほとんど使用されない）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4-その他の関連要素&#34;&gt;&lt;strong&gt;4. その他の関連要素&lt;/strong&gt;
&lt;/h3&gt;&lt;h3 id=&#34;まとめ&#34;&gt;&lt;strong&gt;まとめ&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PSH&lt;/strong&gt; は、&lt;strong&gt;データのアプリケーション層への迅速な到達&lt;/strong&gt; と低遅延に焦点を当てています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK&lt;/strong&gt; は、&lt;strong&gt;データの信頼性の高い伝送&lt;/strong&gt; とパケットロスや乱数（順不同）の回避に焦点を当てています。
両者は連携して、TCP プロトコルの効率性と信頼性をバランスしています。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>投資して儲けるというのは、急がないと意味がない。焦っても無駄だ。</title>
        <link>https://ttf248.life/ja/p/investing-takes-time/</link>
        <pubDate>Fri, 14 Feb 2025 20:30:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/investing-takes-time/</guid>
        <description>&lt;p&gt;数年間の株式投資の経験を振り返ると、大金を稼げなかったものの、大きな損失も出なかった。最大の課題は資金流計画の不合理さと、不安定なメンタルのみだりにあった。現在の段階では、主な収入源は仕事であり、毎日労働によって固定給を得ている。お金の流れに対する耐性は、債券や銀行預金といった変動に乏しいものにとどまっている。しかし、人は皆欲張りで、少しくらい買えば株価が上がれば利益を得られるはずだが、多すぎると株価が下落すれば損失を被る。このような状況では、メンタルの安定性が非常に重要となり、富を保ち続けるための助けとなる。&lt;/p&gt;
&lt;h2 id=&#34;過去の損失事例&#34;&gt;過去の損失事例
&lt;/h2&gt;&lt;p&gt;新規参入時を除けば、小盤株や次新株に触れて以来、その後は主に大型株や主要指数ファンドに投資してきました：工商銀行、中国通信、恒生電子、中興通信など。&lt;/p&gt;
&lt;p&gt;「期待した年平均リターンを掲げて銀行3年定期預金と同等であることを口では主張したが」、実際には貪欲でさらに多くの利益を求めており、当初からポジションを積極的に拡大し、その後キャッシュフローが枯渇してしまった。保険の購入、住宅ローン、結婚など、資金の流れの大半は、全体的な計画において十分な資金流を確保できておらず、その結果、後期の資金不足につながった。 大手株を握るということは、つまり「老資金」と肩を組むということだ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;恒大の問題が出たとき、銀行株がそれに伴って暴落し、洗練された取引帯を把握することに欠陥があることが明らかになった。不動産は国家経済の中で過剰に占める割合が高く、関連する問題は「硬着陸」を避ける必要があり、その後の株式市場の継続的な下落により、&lt;strong&gt;工商銀行&lt;/strong&gt;のような優良株が2年ほど上昇した。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;貿易戦が始まった初期段階で、&lt;strong&gt;中興電訊&lt;/strong&gt;が深刻な打撃を受け、株価も大幅に下落したが、その後徐々に回復した。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;恒生電子&lt;/strong&gt;は旧株であり、アリババの金融サービス事業が撤退した後、株価も大幅に下落したが、この株式には庄家による操縦があり、毎年何度か急騰することができた。適切なポジション管理を行うことで、大きな損失を被ることはなかった。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;貪欲吞噬理性的怪獸&#34;&gt;貪欲：吞噬理性的「怪獸」
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;貪欲是炒股心态中最为常見的問題&lt;/strong&gt;。當股票行情一路飄紅，投資者帳面盈利不斷攀升時，貪欲便悄然滋生。許多人在股價已經處於高位時，仍幻想其能繼續上漲，渴望獲得更多收益，從而不舍得止盈。他們被貪慾蒙蔽了雙眼，忘記了市場規律和風險的存在。例如，在某些熱門題材股炒作過程中，部分投資者看到股價短期內翻倍甚至數倍上漲，便深陷其中，不斷加倉，期望成為最後的贏家。然而，市場不會一直瘋狂，當泡沫破裂，股價斷崖式下跌時，這些被貪慾驅使的投資者往往損失慘重。&lt;/p&gt;
&lt;h2 id=&#34;恐怖足枷となる鎖&#34;&gt;恐怖：足枷となる「鎖」
&lt;/h2&gt;&lt;p&gt;貪欲に対立するものは恐怖である。恐怖は株式市場においても同様に強力な破壊力を持つ。市場行情が急激に下落し、株価が大幅に暴落した場合、投資家はパニックに陥りやすい。恐怖によって彼らは市場に対する信頼を失い、手元にある株式の基本面が良好であっても、さらなる損失を恐れて慌てて売却してしまうのだ。例えば、世界的な金融危機が発生した期間中、多くの優良なブルーチップ株の株価も連動して大幅に下落した。一部の投資家は恐怖に覆われ、これらの企業の長期的な価値を見過ごし、極めて低い価格で株式を抛売りし、その後の市場反騰と企業の業績成長による莫大なリターンを逃すことになった。恐怖は投資家に短期的な損失をもたらすだけでなく、股市に対する長期的な心理的陰影を生み出し、再び入ることを恐れ、投資機会との決別を招き、結果として投資のチャンスを失ってしまう可能性がある。&lt;/p&gt;
&lt;h2 id=&#34;盲目追随迷失方向的霧&#34;&gt;盲目追随：迷失方向的「霧」
&lt;/h2&gt;&lt;p&gt;株式投資や資産運用において、盲目追随は投資家が陥りやすいもう一つの心理的な問題です。情報過多の時代において、様々な投資アドバイス、市場の噂話、そしてホットなニュースが溢れかえっています。多くの投資家は、独立した思考と判断能力に欠け、他人の操作を盲目的に追うことになります。周りの人がある株式を買い上げて利益を得ているのを見て、彼らは疑うことなく追随して買い始めます。また、「内部情報」と呼ばれるものを聞いただけで、躊躇なく投資します。このような盲目追随は、株式そのものに対する研究や分析を無視させ、投資家が霧の中に迷い込んだ船のように、自らの方向性を失ってしまいます。 例えば、一部の概念株が市場で過熱炒めされる初期段階では、追随者たちが短期的に利益を得ることができたものの、その熱気が冷めると株価は一気に暴落します。その知識や理解が不足し、無分別に追随した投資家たちは、「受け皿」と呼ばれるようになります。彼らは、すべての投資家のリスク許容度、投資目標、および投資期間が異なることを認識していないのです。他者にとって適切な投資戦略が必ずしも自分に適しているとは限りません。&lt;/p&gt;
&lt;h2 id=&#34;過度自信隠された暗礁&#34;&gt;過度自信：隠された「暗礁」
&lt;/h2&gt;&lt;p&gt;過度自信は、株式投資や資産形成における心理的な問題であり、軽視することはできません。一部の投資家が数回の投資成功を収めた後、自己を過大評価し始め、「市場のルールを完全に理解しており、株価の変動を正確に予測できる」と信じ始めることがあります。彼らは市場の複雑さと不確実性を無視し、過剰な取引を行い、無謀に投資規模を拡大したり、高レバレッジを利用して投機的な行為を行うことがあります。しかし、市場は常に変化しており、過度自信を持つ投資家は、予期せぬ市場変動の中で大きな損失を被ることがあります。例えば、経験が浅いものの初戦で勝利した投資家が、「専門的な投資能力を持っている」と信じ込み、頻繁に株式を売買し、投資額を増やします。市場にシステム性リスクや個別の株の悪材料が出現した場合、過度自信からくる判断ミスにより、損失を最小限に抑えられず、資金が大幅に減少してしまうのです。&lt;/p&gt;
&lt;h2 id=&#34;心構えを整えて堅実な資産形成をするには&#34;&gt;心構えを整えて、堅実な資産形成をするには
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;正しい投資理念を確立する：投資家は株式投資による資産形成が、一夜にして大儲けすることではなく、長期的な安定した資本増強を実現するためのものであることを明確にするべきです。投資に関する知識を学び、市場のルールを理解し、バリュー投資や長期投資といった理念を確立することで、短期的な利益や市場心理に左右されるのを防ぎます。例えば、企業の基本面を深く研究し、その収益性、業界での地位、経営チームなどの要素に注目して、長期的に投資価値のある株式を選び、盲目的に短期的なトレンドを追いかけるのではなく、持続させるようにしましょう。&lt;/li&gt;
&lt;li&gt;合理的な投資計画を立てる：自身の財政状況、リスク許容度、投資目標に基づいて、科学的で合理的な投資計画を策定します。投資金額、投資期間、期待リターン、損切りポイントなどの重要な要素を明確にし、計画に厳密に従って実行することが重要です。 これにより、投資プロセスにおける感情的な変動による衝動的な意思決定を回避できます。たとえば、各株式への投資比率が総資産の一定割合を超えないように設定し、株価が予想収益に達したら早めに利益確定したり、株価が損失許容範囲に達したら果断に損切りをするなどの対策を講じます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;市場変動に対しては、感情をコントロールし冷静さを保つことが重要です。分散的な注意の振り付け、運動などによるストレス解消、他者とのコミュニケーションなどを通じて投資へのプレッシャーを軽減し、感情が投資判断に悪影響を与えるのを防ぎましょう。市場が大幅に変動した場合は、まず冷静に原因を分析し、自身の投資戦略と株式の基本面を考慮して合理的な判断を下すことが重要です。盲目的に追随したり、恐怖で売りに出たりするのではなく、冷静な姿勢を保ちましょう。&lt;/p&gt;
&lt;h2 id=&#34;心構えを整えて堅実な資産形成&#34;&gt;心構えを整えて、堅実な資産形成
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;継続的な学習と反省：株式市場は常に変化し続けるため、投資家は新しい投資知識やスキルを継続的に学び、マクロ経済の動向、業界のトレンド、企業情報などを注視し、自身の投資レベルを向上させる必要があります。同時に、自身の投資行動を定期的に振り返り、経験から教訓を得て、心構えや意思決定における問題点を発見し、適切に修正していくことが重要です。例えば、投資後には毎回、投資プロセス全体を見直し、成功と失敗の原因を分析し、今後の投資で同様のミスを防ぐ方法を検討します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;株式投資は長期にわたり、多くの課題が伴う旅です。心構えは、その中で非常に重要な役割を果たします。冷静沈着で、謙虚な姿勢を持ち、独立した思考を保つことができれば、株式市場の変動の中で堅実に前進し、資産価値の維持と増加を実現できます。 ## 心構えを整えて、堅実な資産形成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;継続的な学習と反省：株式市場は常に変化し続けるため、投資家は新しい投資知識やスキルを継続的に学び、マクロ経済の動向、業界のトレンド、企業情報などを注視し、自身の投資レベルを向上させる必要があります。同時に、自身の投資行動を定期的に振り返り、経験から教訓を得て、心構えや意思決定における問題点を発見し、適切に修正していくことが重要です。例えば、投資後には毎回、投資プロセス全体を見直し、成功と失敗の原因を分析し、今後の投資で同様のミスを防ぐ方法を検討します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;株式投資は長期にわたり、多くの課題が伴う旅です。心構えは、その中で非常に重要な役割を果たします。冷静沈着で、謙虚な姿勢を持ち、独立した思考を保つことができれば、株式市場の変動の中で堅実に前進し、資産価値の維持と増加を実現できます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>時の流れに沿った異端な幻想と感情の拠り所</title>
        <link>https://ttf248.life/ja/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</link>
        <pubDate>Thu, 13 Feb 2025 22:12:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</guid>
        <description>&lt;p&gt;最も初期のネット文学読者が中年になってくると、彼らに向けた爽快感あふれる作品も変化してくる。主人公は父親、師匠、あるいは高齢者といった存在が多く登場し、中年の読者のライフスタイルや感情に関する多様なニーズに応えるようにした。このような作品は、レベルアップや逆転劇を追求するだけでなく、感情的な共鳴や人生の感悟に重点を置くようになった。&lt;/p&gt;
&lt;h2 id=&#34;ターゲットユーザー歳月を重ねる読者層の変遷&#34;&gt;ターゲットユーザー：歳月を重ねる読者層の変遷
&lt;/h2&gt;&lt;p&gt;かつてのネット文学（ウェブ小説）の読者は、現在ほとんどが中年へと年齢を重ねています。彼らは人生経験を通して心の鍛錬を受け、価値観や考え方が変化しています。若き頃に熱狂的に支持した熱血（情熱）、冒険といった要素が唯一の追求ではなくなったのです。彼らは読書を通じて、自分自身の現在の生活状況と感情的な共鳴、そして過去の歳月への追憶や未来への希望を見出したいと考えています。中年爽文は、まさにこのような心理的ニーズに基づき生まれたものであり、より中年人の生活や考え方に寄り添ったプロット設定によって、この特定の読者層を惹きつけています。&lt;/p&gt;
&lt;h2 id=&#34;役割の変遷少年英雄から中年担当&#34;&gt;役割の変遷：少年英雄から中年担当
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;私の弟子は皆大悪役&lt;/strong&gt;：主人公陸州が師匠となることで、直面するのは個性豊かで実力も卓越した弟子たち。彼らは正義と邪悪の間で揺れ動き、陸州は彼らを正しい道へと導く必要がある。この小説は、主人公と弟子の間の相互作用を通して、中年人が後輩を教え導く際に直面する課題や葛藤を描き出している。また、弟子たちの成長と変遷は読者に希望と未来を示唆し、自分自身が子供や若者たちに抱く期待を反映しているかのようだ。&lt;/p&gt;
&lt;h2 id=&#34;感情共鳴人生感悟と家庭責任&#34;&gt;感情共鳴：人生感悟と家庭責任
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;六十歳の誕生日システム&lt;/strong&gt;：主人公は六十歳の誕生日にシステムを入手し、新たな人生の旅路を歩み始めます。この設定により、中年読者は「まだ間に合う」という希望と励ましを感じることができます。すでに晩年を迎えていますが、主人公はシステムを通して自身の価値や夢を実現することができます。このプロットは読者に、人生で失った機会や未達成の夢を想起させながら、積極的な生き方の態度を伝え、いつでも夢を追いかけることを奨励します。&lt;/p&gt;
&lt;h2 id=&#34;プロット設計中年生活のリズムと趣味に合わせたもの&#34;&gt;プロット設計：中年生活のリズムと趣味に合わせたもの
&lt;/h2&gt;&lt;p&gt;中年爽文のプロット設計は、より生活の詳細や感情の繊細な表現に重点を置く傾向があります。若い頃の爽文のように、急速なレベルアップや冒険を追求するのではなく、登場人物間の関係性と感情的な葛藤に焦点を当てます。例えば、『史上最强师傅』では、主人公と弟子との師弟情谊、同門との兄弟情など、細やかに描写されています。このようなプロット設計は、中年読者に温かさや親しみを感じさせ、自分自身の家族愛、友情、恋愛といった生活を想起させるような感覚を与えます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>春節檔電影票價の謎：オンラインとオフラインの価格差</title>
        <link>https://ttf248.life/ja/p/chinese-new-year-movie-ticket-price-mystery/</link>
        <pubDate>Tue, 11 Feb 2025 00:02:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chinese-new-year-movie-ticket-price-mystery/</guid>
        <description>&lt;p&gt;春節期間、家族（七八人）で映画を見に行きたいと考えていました。最初は淘票票や猫眼でチケットを購入しようとしましたが、価格が60元でした。ちょうど手元に映画館の充值カードがあり、前台で購入する必要があるため、何か割引がないか尋ねてみました。しかし、同じ上映時間の前台で購入すると35元だったのです。この価格差は本当に驚きでした。&lt;/p&gt;
&lt;h2 id=&#34;平台サービスの見えない付加価値&#34;&gt;平台サービスの「見えない付加価値」
&lt;/h2&gt;&lt;p&gt;オンラインチケットプラットフォームは便利ですが、プラットフォーム手数料を無視することはできません。ユーザーに便利なチケット購入体験を提供するために、正確な座席選択や購入履歴の確認などが必要であり、これらに投資を行う必要があります。これらのコストは、プラットフォーム手数料という形でチケット価格に上乗せされ、オンラインチケット価格の上昇につながっています。&lt;/p&gt;
&lt;h2 id=&#34;映画館の差別化戦略&#34;&gt;映画館の差別化戦略
&lt;/h2&gt;&lt;p&gt;春節檔票房爆棚，電影院為了最大化收益，採用差異化定價策略。線上平台流量大，很多人習慣提前在網上購票，電影院就把線上票價定得高些；而前台直接面對的是現場購票的散客，為了吸引這部分人群，給出較低價格。&lt;/p&gt;
&lt;h2 id=&#34;共同配当の裏にある価格論理&#34;&gt;共同配当の裏にある価格論理
&lt;/h2&gt;&lt;p&gt;オンラインプラットフォームと映画館の共同配当モデルは、チケット価格に影響を与えます。オンラインプラットフォームが興行収入から一部を確保し、収益性を維持するためには、チケット価格を引き上げます。一方、映画館の前売所では中間マージンがないため、コストが低減され、チケット価格は親しみやすくなります。&lt;/p&gt;
&lt;h2 id=&#34;映画購入のコツ&#34;&gt;映画購入のコツ
&lt;/h2&gt;&lt;p&gt;映画を買いに行く際は、オンラインプラットフォームだけでなく、映画館のフロントに電話して料金を確認したり、直接フロントに行って相談してみたりするのも良いかもしれません。よく映画を見ている場合は、映画会員カードを発行し、会員割引でお得にお金を節約することもできます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>2025年春節檔電影における政治的要素の分析</title>
        <link>https://ttf248.life/ja/p/political-elements-in-chinese-films-spring-festival-2025/</link>
        <pubDate>Mon, 10 Feb 2025 23:49:42 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/political-elements-in-chinese-films-spring-festival-2025/</guid>
        <description>&lt;p&gt;以前很久没去春节档凑热闹了，这次去看了两部电影，感觉有点不一样。&lt;/p&gt;
&lt;p&gt;本文探讨2025年春节档电影的新变化，重点关注《唐人街探案1900》和《哪吒之魔童闹海》。前者以1900年的美国旧金山唐人街为背景，展现华人遭受种族歧视与压迫，映射社会政治环境；后者作为动画电影，通过丰富的隐喻元素暗讽现实国际政治格局，例如玉虚宫类似五角大楼影射美国政治体系、天元鼎上美元符号象征美元霸权、仙人玉牌像美国绿卡暗示身份等级、灭魂丹似生化武器暗指恶意行径等。两部电影带来全新的观影体验，引发对电影艺术与政治表达关系的思考。&lt;/p&gt;
&lt;h2 id=&#34;春節檔電影風格的革新&#34;&gt;春節檔電影風格的革新
&lt;/h2&gt;&lt;p&gt;以往春節檔電影多是輕鬆娛樂、闔家歡的風格，旨在讓觀眾在節日中放鬆身心，很少觸碰敏感政治話題。但2025年春節檔打破慣例，《唐人街探案1900》和《哪吒之魔童鬧海》融入豐富政治元素，引發觀眾廣泛討論，為春節檔電影帶來全新氣象。&lt;/p&gt;
&lt;h2 id=&#34;唐人街探案1900時代政治の生きた写し絵&#34;&gt;『唐人街探案1900』：時代政治の生きた写し絵
&lt;/h2&gt;&lt;p&gt;『唐人街探案1900』は、1900年を舞台にアメリカ旧金山唐人街を舞台に物語が展開されます。当時、華人は海外で深刻な人種差別と抑圧に直面していました。主人公たちが事件の捜査を進める中で、単に事件の謎を解き明かすだけでなく、社会各方面からの差別や不公平な扱いにも対処しなければなりません。映画は、人種差別と権力闘争を描き出し、当時の社会政治環境をリアルに反映しており、私たちに混乱した時代における中国系移民が生存と尊厳のために行った困難な抵抗、そしてその裏にある政治的な問題を深く考えさせます。&lt;/p&gt;
&lt;p&gt;このような歴史的背景は、現代の海外で活躍する中国人が商業分野で直面している問題、例えばTikTokや周受資事件を連想させます。 現地時間2024年12月6日、米国コロラド州デンバー特別区連邦巡回裁判所がTikTokの訴えを却下し、国会が国家安全保障を理由に制定した強制売却法が憲法審査に耐えたと判断しました。TikTok CEOの周受資氏は従業員向けのメモの中で、「今後は差し止め請求を行い、米国最高裁判所の審理を待つ」と述べました。この事態の根源は、米国で施行された「米国民を守るための外国敵対勢力によるアプリケーション侵害対策法」であり、規定により、バイト跳動（字节跳动）は法案が可決後270日以内に米国TikTok事業を剥離・売却しなければならず、強制売却の最終期限は2025年1月19日となっています。&lt;/p&gt;
&lt;h2 id=&#34;チャイナタウン探偵1900時代の政治を鮮やかに描き出す&#34;&gt;『チャイナタウン探偵1900』：時代の政治を鮮やかに描き出す
&lt;/h2&gt;&lt;p&gt;これまでの様々な聴聞会で、周受資は数々の難問に直面してきた。現地時間2024年1月31日、米国議会上院司法委員会が「大企業とネット上の児童性搾取危機」に関する聴聞会を開催し、著名な反中議員トム・コッ頓は周受資に対し、国籍に関する8つの質問を次々と投げかけ、彼がどの国人であるか、中国国籍の申請歴があるか、アメリカ国籍であるか、さらには妻や子供たちの国籍についても触れさせた。聴聞会のテーマが「ネット上の児童性搾取」であったにも関わらず、議員はTikTokが中国企業であるバイト跳動（ByteDance）によって所有されているという点に話題を転換させ、周受資に主題とは無関係な質問に答えてもらうことになった。 『唐人街探案1900』のように、華人が海外で無端的差別を受ける状況を如実に示したように、周受資も商業界において、TikTokの背景から不当な扱いと疑問を浴びせられています。この一連の事件は、時代を超えて、海外華人が自身の発展と権利を守る上で、外部からの重苦しい障壁に直面してきたことを反映しており、百年前の種族差別や現代における商業分野での政治的駆け引きなど、すべてを深く反省すべき点です。&lt;/p&gt;
&lt;h2 id=&#34;哪吒之魔童闹海神話の裏に潜む政治的暗示を分析&#34;&gt;『哪吒之魔童闹海』：神話の裏に潜む政治的暗示を分析
&lt;/h2&gt;&lt;p&gt;『哪吒之魔童闹海』は一見すると普通の漫画映画だが、その多くの設定やプロットには政治的な暗示が込められている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;権力体系の映射&lt;/strong&gt;：玉虚宮は仙界における至高の権力拠点として構築され、建築様式はアメリカ五角大楼に酷似しており、内部は白色を基調としている点が、西側諸国が「普遍的価値」という名目のもとで覇権主義を展開することを象徴している。無量仙翁率いる「除妖隊」の鹿男や鶴女は、アメリカの同盟国体系である日韓に対応すると解釈されている。玉虚宮における「オンライン会議」の場面では、十二金仙が「封神大战」について議論しており、これはアメリカ主導の北約会議に酷似している。秩序を維持するという旗印の下で他国の抑圧を行うのだ。 - &lt;strong&gt;経済覇権の暗示&lt;/strong&gt;: 玉虚宮で丹を練る際に使用される天元鼎に、入口付近に米ドルが配置されており、これはアメリカが経済覇権を用いて他国の資源を「精錬」する様子を象徴しています。無量仙翁は、「替天行道」の名の下で龍族を鼎に入れ精錬しており、これは国際ルールを利用して利益を得る一部の国家を暗示しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身份と階級の比喩&lt;/strong&gt;: 哪吒が手に入れた仙人を示す玉牌の色や模様が、アメリカのグリーンカードに酷似しており、仙界における「異族」への排斥と階級区分を象徴し、現実世界における異なる国家やグループ間のアイデンティティの違いと不平等な扱いを示唆しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;悪意ある行為の暗喩&lt;/strong&gt;: 無量仙翁が哪吒に飲ませる滅魂丹の外観は生化学兵器に酷似しており、これは「救世」の名の下で他国の破壊や滅亡を行う一部の国家を暗喩しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哪吒之魔童闹海神話の裏に潜む政治的暗示を分析-1&#34;&gt;『哪吒之魔童闹海』：神話の裏に潜む政治的暗示を分析
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;資源と発展の象徴&lt;/strong&gt;：七色の宝蓮が、哪吒と敖丙の肉体を再構築するための鍵となるものであり、国家による独占されたエネルギーや技術の要衝を象徴している。その「琼漿玉液」は、玉虚宮における「成仙試験」を通じて獲得する必要があり、これは発展途上国が核心資源への依存と、覇権体制下での「規則性による搾取」を反映している。宝蓮の短期間での失效（無効化）と回復条件は、エネルギー危機下における小国の生存困窮を暗示する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;映画芸術と政治表現の深層的考察&#34;&gt;映画芸術と政治表現の深層的考察
&lt;/h2&gt;&lt;p&gt;これらの映画は、春節檔における国民的な観影熱潮の中で政治的要素を盛り込み、観客に新たな鑑賞体験をもたらしました。単なる娯楽作品ではなく、歴史と現実の問題を映し出す鏡となり、私たちに映画芸術と政治表現の関係について深く考えるきっかけを与えました。今後、映画制作において監督は、映画を通して社会政治的な見解をより多く伝達するようになるでしょうか？映画は強力な文化伝播媒介として、芸術的表現の一方で、社会現実への関心や考察をより多く担うことができるのでしょうか？これらの問題について、映画鑑賞の際に深く探求し、映画業界が芸術と現実の表現融合においてさらに多くの素晴らしい作品を生み出すことを期待します。&lt;/p&gt;
&lt;h2 id=&#34;エッグ-egg&#34;&gt;エッグ (Egg)
&lt;/h2&gt;&lt;p&gt;豆包大モデルが、今日はあまり力を発揮できず、途中で詰まることが何度かありました。文章が半分で途絶え、続きが書けなくなり、会話を再開するしかありませんでした。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>アメリカ合衆国の主要な二大政党は、民主党と共和党です。</title>
        <link>https://ttf248.life/ja/p/us-two-major-parties-democrats-republicans/</link>
        <pubDate>Mon, 10 Feb 2025 23:40:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/us-two-major-parties-democrats-republicans/</guid>
        <description>&lt;p&gt;民主党と共和党は、政治理念、政策主張、および社会規範において顕著な違いがあります。&lt;/p&gt;
&lt;h2 id=&#34;政治理念と政策主張&#34;&gt;政治理念と政策主張
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;民主党&lt;/strong&gt;：自由主義を志向し、経済および社会問題において政府の積極的な役割を重視する。社会福祉、環境保護、多元文化を支持する。税制においては、中低所得者層への減税を支持しながら、高所得者や企業に対する税率を引き上げる。社会問題に関しては、堕胎権、同性婚を支持し、厳格な銃規制を提唱する。外交政策においては、多国間主義と外交手段を重視し、国際協力による地球規模の問題解決に傾倒する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共和党&lt;/strong&gt;：保守主義を志向し、政府の介入を制限し、個人自由および市場経済を強調する。税制においては、減税を支持し、所得に関わらず全ての人々に対して適用されるべきだと考える。社会問題に関しては、堕胎および同性婚に反対し、銃擁権を支持する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;トランプ氏の就任の意味&#34;&gt;トランプ氏の就任の意味
&lt;/h2&gt;&lt;p&gt;2024年に唐納ド・トランプ氏が再びアメリカ合衆国大統領に選出されたことは、共和党がアメリカ政治における主導地位を確立することを意味する。トランプ氏の政策主張は以下の通りである：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;経済政策&lt;/strong&gt;：トランプ氏は減税と規制緩和を通じて経済成長を促進することを主張し、特に伝統的な製造業およびエネルギー産業の発展を支援した。また、保護主義的な貿易政策を採用し、既存の貿易協定を再交渉または撤退することで、アメリカの経済的利益を守ろうとした。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移民政策&lt;/strong&gt;：トランプ氏は国境警備の強化、不法移民の制限、合法移民に対するより厳格な審査と制限を実施することを計画した。また、難民および庇護申請への制限を通じて国家安全保障を維持することにも賛成であった。 - &lt;strong&gt;外交政策&lt;/strong&gt;：トランプ氏は一辺倒の姿勢を重視し、「アメリカ優先」を強調することで、国際機関への依存度を下回り、同盟国との関係を見直すと同時に、必要に応じてより強硬な外交手段をとることを目指しています。また、化石燃料の生産・使用拡大や環境保護規制緩和も計画しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トランプ氏の再選は、アメリカ国内政策の大幅な転換を招き、世界政治および経済に大きな影響を与える可能性があります。彼の政策は国際社会からの注目と反応を引き起こし、特に貿易、環境、人権などの分野で関心が高まるでしょう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ollama ローカル実行 deepseek-R1</title>
        <link>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</link>
        <pubDate>Fri, 07 Feb 2025 22:41:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</guid>
        <description>&lt;p&gt;Ollamaは、大規模言語モデル (LLM) をローカルで実行およびデプロイできるように設計されたオープンソースのAIツールです。クラウドサービスへの依存を減らし、開発者がローカルマシン上でGPTのようなモデルを使用するための便利な効率的な方法を提供することを目的としています。Ollamaは複数のモデルをサポートし、パフォーマンスを最適化することに重点を置いており、リソースが限られたデバイスでもこれらのモデルをスムーズに実行できるようにします。&lt;/p&gt;
&lt;p&gt;Ollamaを通じて、テキストベースのAIアプリケーションを使用でき、ローカルでデプロイされたモデルとインタラクションできます。データプライバシーやAPIの使用料金に関する懸念なくです。コマンドラインインターフェース (CLI) を使用してさまざまなモデルを呼び出し、自然言語処理、質問応答などのタスクを実行できます。 &amp;gt; ollama は様々なモデルを試すのに適しており、Windows 版でテストしたところ、ハードウェアの性能を十分に発揮することができませんでした。これは Windows 版の問題である可能性があり、Linux 版の方が良いかもしれません。32b パラメータのモデルをデプロイする際、メモリや GPU の負荷が低い状況でも、応答速度が遅い。&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア概要&#34;&gt;ハードウェア概要
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;オペレーティングシステム: Windows 11&lt;/li&gt;
&lt;li&gt;CPU: i7-10700K&lt;/li&gt;
&lt;li&gt;メモリ: 40GB&lt;/li&gt;
&lt;li&gt;グラフィックカード: RTX 3060 12GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;環境準備&#34;&gt;環境準備
&lt;/h2&gt;&lt;p&gt;以下のシステム環境変数を設定し、後続の使用を容易にします：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_MODELS=E:\ollama&lt;/code&gt;&lt;/strong&gt;
この変数で Ollama モデルの保存パスを指定します。 &lt;code&gt;E:\ollama&lt;/code&gt; はフォルダパスであり、ダウンロードまたはデプロイしたローカルモデルファイルをすべてここに格納します。Ollama はこのパスに基づいてモデルをロードおよび使用します。モデルファイルの場所を変更する場合は、このパスを更新してください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_HOST=127.0.0.1:8000&lt;/code&gt;&lt;/strong&gt;
この環境変数は Ollama サービスのホストとポートを設定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt; はローカルアドレス（localhost）であり、Ollama サービスは本機からのリクエストのみを待ち受けます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8000&lt;/code&gt; は指定するポート番号であり、Ollama サービスが 8000 ポートでリクエストを受信および処理します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;環境準備-1&#34;&gt;環境準備
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_ORIGINS=*&lt;/code&gt;&lt;/strong&gt;
この環境変数によって、Ollama サービスにアクセスできるリクエストのソースを制御します。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; はすべてのソース（つまり、すべてのドメインと IP アドレス）が Ollama サービスにアクセスできるようにすることを意味します。これは通常、開発およびデバッグ環境で使用され、本番環境では、セキュリティを高めるために特定のドメインまたは IP アドレスのみがサービスへのアクセスを許可するようにより厳格なソース制御を指定することが一般的です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deepseek-r1-モデルのデプロイ&#34;&gt;DeepSeek-R1 モデルのデプロイ
&lt;/h2&gt;&lt;p&gt;ollama のインストールは、初心者向けで簡単なため、詳細は省略します。
インストール後の検証：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core&amp;gt;ollama -v
ollama version is 0.5.11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モデルのデプロイについては、公式ウェブサイトのモデルページを参照し、対応するパラメータのモデルを選択してください: &lt;code&gt;ollama run deepseek-r1:14b&lt;/code&gt;
14b パラメータは会話コンテキストを効果的に記憶でき、より小さなパラメータバージョンではコンテキストを記憶できません。32b パラメータバージョンは、ローカルでのデプロイ時に非常に遅延するため、詳細なテストは行っていません。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ollama.com/library/deepseek-r1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ollama.com/library/deepseek-r1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/x18990027/article/details/145368094&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/x18990027/article/details/145368094&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>PowerShell 7 と Persistence 設定 コマンドライン予測ビュー</title>
        <link>https://ttf248.life/ja/p/powershell-7-persisting-settings-commandline-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/powershell-7-persisting-settings-commandline-prediction-view/</guid>
        <description>&lt;p&gt;Linux で zsh の習慣がついていたところ、先日ブログを書いている最中に、PowerShell 7 もセッション保持の設定でコマンド履歴予測ビューをサポートしているのを発見しました。それで試してみたら、意外と便利だったんです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;何が原因かはわからないのですが、この機能を有効にしたところ、なんと機能が追加されました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現在多様化するオペレーティング環境において、システム管理者や開発者は、プラットフォーム間での互換性、効率性、そして強力な機能を備えたツールを求めています。PowerShell 7 はまさにそのニーズに応える注目を集めているツールです。強力なスクリプト作成能力に加え、Windows、Linux、macOS など様々なオペレーティングシステム上で動作するため、ユーザーに前例のない利便性をもたらします。&lt;/p&gt;
&lt;h2 id=&#34;powershell-7クロスプラットフォームな強力なツール&#34;&gt;PowerShell 7：クロスプラットフォームな強力なツール
&lt;/h2&gt;&lt;h3 id=&#34;クロスプラットフォーム特性&#34;&gt;クロスプラットフォーム特性
&lt;/h3&gt;&lt;p&gt;PowerShell 7は、プラットフォームの制限を打破し、Windowsシステムでのエンタープライズレベルのサーバー管理、Linux環境でのシステム運用、macOSでの日常開発タスクなど、あらゆる環境で一貫してPowerShell 7ツールを使用できます。これにより、作業効率が大幅に向上し、プラットフォームの違いによる学習コストや操作複雑性の問題を軽減します。&lt;/p&gt;
&lt;h3 id=&#34;強力な機能&#34;&gt;強力な機能
&lt;/h3&gt;&lt;p&gt;強力なスクリプト作成能力を備え、オブジェクト指向プログラミング、関数、モジュールなどの高度なプログラミング特性をサポートします。PowerShell 7 を通じて、ユーザーはファイルシステムを簡単に操作し、ファイルやフォルダの作成、削除、コピー、移動などの操作を実行できます。レジストリにアクセスして変更することで、システムの構成を深く調整することも可能です。プロセスとサービスを管理し、システムの状態を効果的に監視および制御することもできます。さらに、PowerShell 7 は、Active Directory におけるユーザーと権限の管理や、Azure クラウドプラットフォームにおけるリソースの配分と管理など、さまざまな Windows および非 Windows 技術との相互作用も可能です。&lt;/p&gt;
&lt;h3 id=&#34;オープンソースエコシステム&#34;&gt;オープンソースエコシステム
&lt;/h3&gt;&lt;p&gt;PowerShell 7はオープンソースであり、この特性により、世界中の開発者や愛好家がその開発と改善に積極的に参加できるようになっています。大量のオープンソースモジュールやツールが継続的に登場し、PowerShell 7 の機能と応用シナリオを豊かにしています。ユーザーは自身のニーズに応じて、オープンソースコミュニティで適切なモジュールを見つけて PowerShell 7 の機能を拡張したり、コードを貢献してコミュニティ全体の発展を推進したりすることができます。&lt;/p&gt;
&lt;h3 id=&#34;互換性と安定性&#34;&gt;互換性と安定性
&lt;/h3&gt;&lt;p&gt;PowerShell 7は、旧バージョンのPowerShellとの互換性を維持しながら、多くの新機能と改善を導入しました。これらの改善により、パフォーマンスが向上し、安定性が強化され、ユーザーはさまざまなタスクをよりスムーズに実行でき、ソフトウェアの故障による作業中断を減らすことができます。&lt;/p&gt;
&lt;h2 id=&#34;コマンドレット予測ビューの起動&#34;&gt;コマンドレット予測ビューの起動
&lt;/h2&gt;&lt;p&gt;PowerShell 7 の多くの便利な機能の中で、&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; コマンドは、ユーザーのコマンドライン入力体験を向上させるための実用的なツールです。&lt;/p&gt;
&lt;p&gt;コマンドを実行しなくても自動補完を実現できますが、これは行内での補完に限定されます。この機能を有効にすると、リスト形式で可能なすべての補完オプションを表示する予測ビューが利用できるようになり、ユーザーは上下キーを使用して必要なオプションを選択することで、コマンド入力の正確性と効率を大幅に向上させることができます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/powershell-7-persisting-settings-commandline-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;コマンドを永続化する方法&#34;&gt;コマンドを永続化する方法
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; のようなコマンドを、PowerShellの起動時に常に有効にするには、それを PowerShell の設定ファイルに追加します。PowerShellの設定ファイルは、PowerShell が起動される際に自動的に実行する命令を含む特別なスクリプトです。&lt;/p&gt;
&lt;h3 id=&#34;設定ファイルのパスを特定する&#34;&gt;設定ファイルのパスを特定する
&lt;/h3&gt;&lt;p&gt;PowerShell では、&lt;code&gt;$PROFILE&lt;/code&gt; 変数を使用して設定ファイルのパスを確認できます。もしこのパスにファイルが存在しない場合は、ユーザーは手動で作成することができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;設定ファイルのオープン&#34;&gt;設定ファイルのオープン
&lt;/h3&gt;&lt;p&gt;テキストエディタ（例えば、高機能な Notepad++ や軽量の Visual Studio Code）を使用して、$PROFILE 変数で取得した設定ファイルパスに対応するファイルを開きます。&lt;/p&gt;
&lt;h3 id=&#34;コマンドの追加&#34;&gt;コマンドの追加
&lt;/h3&gt;&lt;p&gt;開いている構成ファイルに、&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; コマンドを追加します。コマンドの記述が正確であることを確認し、構成ファイルを実行する際に正しく有効になるようにしてください。&lt;/p&gt;
&lt;h3 id=&#34;構成ファイルへの保存&#34;&gt;構成ファイルへの保存
&lt;/h3&gt;&lt;p&gt;コマンドの追加が完了したら、構成ファイルを保存しテキストエディタを閉じます。これにより、構成ファイルには、PowerShell起動時に実行したいと希望するコマンドが含まれるようになります。&lt;/p&gt;
&lt;h3 id=&#34;検証設定&#34;&gt;検証設定
&lt;/h3&gt;&lt;p&gt;現在の PowerShell ウィンドウを閉じ、PowerShell を再起動します。 新しく起動した PowerShell でコマンドを入力する際、コマンドラインでの予測ビュースタイルの表示が、当方の設定に従いリスト形式で表示されることを確認します。 これにより、当方の設定が正常に適用されたことを示します。
上記の手順を実行することで、PowerShell 7 の強力な機能と特性について深く理解するとともに、コマンドラインでの予測ビュースタイルの設定方法を習得し、これらの設定を永続的に適用する方法も学ぶことができます。 これらの知識が、PowerShell 7 を使用する際に、よりスムーズかつ効率的に様々なシステム管理および自動化タスクを完了できるようになることを願っています。&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>DeepSeek（ディープシーク）が旧正月前に急激に人気を博し、NVIDIAの株価が暴落した：その裏にある機関投資家の動きと大規模言語モデルの思考連鎖</title>
        <link>https://ttf248.life/ja/p/deepseek-explodes-before-chinese-new-year-nvidia-stock-plummets-behind-the-scenes-and-large-language-model-reasoning/</link>
        <pubDate>Fri, 07 Feb 2025 20:36:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/deepseek-explodes-before-chinese-new-year-nvidia-stock-plummets-behind-the-scenes-and-large-language-model-reasoning/</guid>
        <description>&lt;p&gt;旧正月前夕，DeepSeek 一度成为热门话题，短短几天内便在社交媒体上引起了广泛关注。这种突然的爆火，不仅让人惊讶，还带动了市场的连锁反应。与此同时，英伟达的股票却迎来了暴跌，许多投资者对其前景产生了疑虑，部分机构在此期间进行了大规模的做空操作，似乎一切都指向了一个“精心策划”的局面。&lt;/p&gt;
&lt;h3 id=&#34;deepseek-の爆発的な人気短期間で急速に注目を集める&#34;&gt;&lt;strong&gt;DeepSeek の爆発的な人気：短期間で急速に注目を集める&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;DeepSeek は、AI を活用したツールであり、特に自然言語処理（NLP）および画像生成分野における深層学習モデルの最適化に焦点を当てています。旧正月前の数日間、このプロジェクトは投資家や技術者から急増するほどの関心を集めました。その背後にあるチームのパフォーマンスと展示された技術成果が、多くの人々を強く惹きつけました。開発者コミュニティやソーシャルメディアプラットフォームにおいて、DeepSeek に関する議論は技術界全体のあらゆる話題を占めています。&lt;/p&gt;
&lt;p&gt;しかし、DeepSeek の突然爆発的な人気は偶然ではありませんでした。分析の結果、何らかの組織による操作の可能性が疑われるようになり始めました。&lt;/p&gt;
&lt;h3 id=&#34;nvidia-株価暴落ショート売り戦略の裏黒幕&#34;&gt;&lt;strong&gt;NVIDIA 株価暴落：ショート売り戦略の裏黒幕&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;NVIDIA（エヌビディア）、世界をリードするグラフィックス処理ユニット（GPU）メーカーは、長年にわたり、多くの大規模言語モデルやAI計算における重要なハードウェアサプライヤーとして存在感を示してきました。AI市場の急速な発展に伴い、NVIDIA の株価は長期にわたって堅調で、投資家の注目を集めてきました。しかし、DeepSeek の爆発的な人気と市場におけるその技術への高い関心により、NVIDIA の株価は急落しました。
この現象の裏には、機関投資家によるショート売り戦略が潜んでいる可能性があります。過去数年間、AI 技術の普及に伴い、NVIDIA の株価は過度に高騰しており、多くの投資家がその株価に過剰な期待を抱いていると認識していました。特に DeepSeek などの技術が爆発的に人気を集めた後、一部の機関投資家が NVIDIA の株式をショートすることで、かなりの利益を得た可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;大規模言語モデルの推論チェーンへの接触結果からプロセスへ&#34;&gt;&lt;strong&gt;大規模言語モデルの推論チェーンへの接触：結果からプロセスへ&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;従来の人工知能アプリケーションにおいて、多くの実務者や投資家は、AI モデルの「結果」—生成された画像、テキストなどの直接的なアウトプットに多く注目してきました。一方、DeepSeekに関連する議論の中で、ますます多くの人が、大規模言語モデルの背後に隠された推論チェーンこそがより注目すべき核心内容であることに気づき始めています。これまで、私たちはモデルが出力した結果しか見ることができませんでしたが、今では、その背後にあるロジック、アルゴリズム、そしてこれらの要素を調整することでモデルのパフォーマンスを最適化する方法を理解する必要があります。&lt;/p&gt;
&lt;p&gt;この思考様式の転換は、AI 研究およびアプリケーションに対する深い考察であることを意味します。 単純なブラックボックス操作から、モデル内部の動作メカニズムを真正に理解する変革へと移行し、多くの技術者や投資家が人工知能の将来的な発展方向を再考し始めた。DeepSeek の爆発的な人気は、まさにこの思考連鎖の画期的な応用であり、人々が単なる最終的な出力結果ではなく、全体のモデル構築と最適化プロセスに注目し始めるきっかけとなった。&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;&lt;strong&gt;まとめ&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;DeepSeekの突然的な爆発、英偉達株の大暴落、そして市場の裏で機関がショートしたという事実は、すべてが緻密に設計された罠であるかのようだ。大規模言語モデルの思考連鎖を深く理解することで、AI技術の応用は表面的な現象の積み重ねではなく、モデル内部ロジックの深い掘り起こしと最適化であることを認識できる。技術の進歩とともに、今後もDeepSeekのような革新的なツールが登場し、AI研究・応用がより高度なレベルへと発展していく可能性がある。&lt;/p&gt;
&lt;p&gt;この現象は、AI技術の巨大な潜在能力を私たちに示すだけでなく、技術背後にあるビジネスの駆け引きや資本の動きについても考えさせ始めるきっかけとなった。今後の市場の動向は、技術と資本の博弈という継続的な焦点となるだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>現代貨幣理論は、世界の経済体の未来なのでしょうか？</title>
        <link>https://ttf248.life/ja/p/modern-monetary-theory-future-global-economy/</link>
        <pubDate>Thu, 06 Feb 2025 23:16:34 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/modern-monetary-theory-future-global-economy/</guid>
        <description>&lt;p&gt;米国の株式市場が継続した上昇トレンドにあること、アメリカ本国の「硬直的な強み」を無視して、ドル資金の大量供給によるものとなっていること。&lt;/p&gt;
&lt;p&gt;現代貨幣体系は&lt;strong&gt;2008年の金融危機&lt;/strong&gt;の後、世界中の複数の経済体にとって、重要な理論的基盤として、政府が市場への介入において主観的な積極性を重視し、財政赤字を活用して市場における完全雇用とインフレの安定を実現するという原則を共有するようになった。 &amp;ndash;more&amp;ndash;&amp;gt;&lt;/p&gt;
&lt;p&gt;大政府で最も馴染み深いのは&lt;strong&gt;ケインズ主義&lt;/strong&gt;であり、景気変動における政府の&lt;strong&gt;ピーク分削谷&lt;/strong&gt;（過熱時に抑制し、収縮時に刺激する）の役割を強調します。具体的には、同じ金額の政府支出がどれだけ消費倍率を拡大させるか（消費倍率効果）に注目し、政府支出1単位あたり企業や個人の所得を1単位増加させ、企業が生産を拡大して雇用を創出し、個人が消費を拡大することで景気後退を抑制するという考え方です。また、財政赤字上限や持続可能性に対しては比較的保守的な立場を取り、&lt;strong&gt;消費倍率&lt;/strong&gt;が市場の回復を促し、政府の収入を増加させるという点に重点を置いています。特に経済過熱期においては、下期の刺激のための準備資金として、政府債務の潜在力や金利水準を活用することができます。&lt;/p&gt;
&lt;p&gt;現代貨幣体系は、極端なケインズ主義の延伸であるものの、その違いとして最大の特徴は、政府債務の制限という点にあります。中央銀行は独立性を持ち続けず、主な目標は&lt;strong&gt;インフレーションと完全雇用の両方&lt;/strong&gt;を達成することです。つまり、政府は技術革新による生産性向上に伴い、無限に財政赤字を拡大することで市場に購買力を供給し、理想的な完全雇用と生産性のボトルネックに到達するまで、継続的にその規模を増やすことになります。この時点でインフレーションが発生すると、中央銀行は財政赤字の上限を設定し、市場に余剰生産要素が存在する限り、政府は赤字を拡大し続けることになります。&lt;/p&gt;
&lt;h2 id=&#34;金融危機後&#34;&gt;金融危機後
&lt;/h2&gt;&lt;p&gt;もちろん現実には理想の世界ではない。各段階の実行は人に関与しており、ケインズ主義も選択的に適用されるため、その結果は景気の下振れを刺激するものが多く、景気の過熱を抑制するものが少ない。経済格差を刺激することで政党が評価され、景気の過熱もまた政党が評価されるため、根本的に抑制することが難しく、それによって生じる多くの経済問題や、新たな金融危機が従来の生産能力過剰による経済的衝撃に劣らないほどのものである。 2008年の世界的な金融危機は、極端なケインズ主義の下で市場が自己増殖的に強化され、結果として多くの「傍系」構造の金融投資商品（例えば不動産や不動産を基盤とする金融投資商品）が生み出されたものです。危機発生以前から、学界、政界、市場レベルにおいてリスク認識が不足しており、債務で支えられた繁栄を政績と捉え、より多くの利益を得ていました。例えば、巨大な金融システムは、損失はあなたの責任であり、配当は私たちのものだという構図でした。最終的には破綻に至り、大量の参加者が先行者の収益を負担したことになります。お金は吐き出すことができないため、結局は多くの人が投資し、先行者の利益を負った結果です。&lt;/p&gt;
&lt;h2 id=&#34;金融危機の後の状況&#34;&gt;金融危機の後の状況
&lt;/h2&gt;&lt;p&gt;この時期、現代貨幣体系の影は金融危機後に現れ、その典型的な特徴は、急速な&lt;strong&gt;財政赤字の通貨化と中央銀行による無限量の量的緩和&lt;/strong&gt;、そしていわゆる緊急中央銀行貸付政策である。中央銀行が最終的な貸し手として無限に弾を供給し、政府も継続的に債務を抱えることができる。中央銀行と財政政策が協調配合し、中央銀行は国債の購入などを通じて政府の財政赤字支出を支援することで、政策目標の一致性を確保する。これが現代の金融政策と財政政策の境界線がますます曖昧になっている理由である。基礎貨幣の投放においては、中央銀行が直接国債の買い手に参加することが非常に多く、左手で紙幣を印刷し右手で花を散らす状態だ。
ユーロ圏と米国にも同様の状況が見られる。2008年には、欧州連合の政府債務は約6… 7兆ユーロ、政府債務は約66％で、一般的に認識されている警戒線である60％をやや上回っています。2014年、つまり救済期間5年間において、債務規模は9.5兆ユーロとなり、その杠率は93%に達しました。米国はさらに誇張されており、2008年の米政府債務は約10兆ドルで、2014年には約18兆ユーロ程度にまで増加しました。最近では再度政府債務上限が引き上げられていますが、毎回起こる騒動は政府機能停止を口実に、毎回限度額を突破しており、現在では36兆ユーロを超える水準に達しています。2008年の金融危機と比較すると、26兆ユーロ増加しており、GDP成長要因も考慮すると、政府債務は約60%から120%以上に拡大しました。連邦準備制度理事会（FRB）は最終的な融資者として、何度も救済活動において重要な役割を果たし、政府債務の主要な購入者の一方です。&lt;/p&gt;
&lt;h2 id=&#34;現代貨幣体系の弊端と限界&#34;&gt;現代貨幣体系の弊端と限界
&lt;/h2&gt;&lt;p&gt;この政府主導の経済刺激策は、計画経済とは言えないものの、直面する問題は一貫しており、市場の全知全能性とあらゆる环节参与者の無私無畏をどのように保証できるのか？ 最もシンプルな例として、政府部門が特定の方向に予算100万ドルを追加した場合、それは上司の小甥に与えられるのか、それともよりコスト効率の高いオークションに参加させるのか？ もちろん現実には、より複雑な形で利益の送還が生じ、結果として政府は負債と支出を拡大させながらも、完全に制御不能な方向に流れる。最近アメリカで騒がれている政府効率部門の設立は、まさに此类の問題の延伸である。もちろんこれらの問題は、異なる腐敗指数経済体において、その表现は一様ではない。私たちが議論すべきは、より普遍的な問題である。&lt;/p&gt;
&lt;h3 id=&#34;1-インフレーションの問題&#34;&gt;1. インフレーションの問題
&lt;/h3&gt;&lt;p&gt;現代の情報ネットワークの発展に伴い、政府が市場情報の掌握度合いは過去に比べて著しく高まっているものの、全知全能ではないため、市場自体には変動があり、市場は常に期待によって変化し、ループ構造に入りやすくなっている。私はあなたの予測を予測する。実証的な結果を例にとれば、2008年～2020年の間に、現代貨幣理論の実践的成果は一定程度良好で、短期的に経済の回復とインフレーションの安定を実現した。ユーロ圏では段階的なデフレ問題も発生し、アメリカでもインフレーションは概ね1～3%という予測範囲内に維持されたため、人々は過去のようにケインズ主義を信じるように、より極端なツールを信じ始めた。 振り返ってみると、これは主に開発途上国の製造業が2008年以降も高い成長傾向を維持したことによるものです。例えば、この期間中に徐々に世界の生産地位を確立してきた我が国や、その後の東南アジアおよびインドといった経済主体が、依然として高い製造業の付加価値を維持し、現代貨幣理論における最大の制約である資源供給制約を打ち消す役割を果たしたためです。その結果、欧米諸国においても、産業の衰退と過剰な金融化の下で、政府債務と通貨供給の急増にもかかわらず、比較的安定したインフレを維持することが可能となりました。&lt;/p&gt;
&lt;h3 id=&#34;1-インフレーション問題&#34;&gt;1. インフレーション問題
&lt;/h3&gt;&lt;p&gt;しかし、2020年以降、大規模な景気刺激策の使用により、ユーロ圏と米国でそれぞれ顕著なインフレが発生し、最高水準では10%程度に達しました。今日に至るまで、利上げはほぼ3年でありながら、米国の雇用市場は依然として異常に過熱しており、金融市場は貨幣的なサポートを受けて経済成長から乖離した過剰な繁栄を示しています。基数効果が消失するにつれて、米国のインフレは再び3%に向かって奔走しており、この利上げ中の過熱状態は、財政赤字と密接に関連しています。利上げは金融政策上の引き締めであり、一方、財政政策では依然として拡大しており、2020年の超大規模な貨幣流動性によって米国のインフレが異常に頑固になっているのです。現代貨幣理論の最大の制約の一つが、高位のインフレーションです。&lt;/p&gt;
&lt;h3 id=&#34;2-政府債務問題&#34;&gt;2. 政府債務問題
&lt;/h3&gt;&lt;p&gt;原則上、政府は無制限に債務で財政を賄う（以債養債）ことが可能ですが、その前提は&lt;strong&gt;中央銀行が完全に傀儡となること&lt;/strong&gt;であり、すなわち現代貨幣体系における&lt;strong&gt;財政政策と金融政策の目標一致性&lt;/strong&gt;です。これは、連邦準備制度（FRB）が政府に完全な権限を委譲する用意がないという事実に照らし合わせると、長年にわたる政府債務残高、特に利息支出の高額さが、徐々に財政の大きな負担となっているのです。&lt;/p&gt;
&lt;p&gt;2023会計年度：米国は2023会計年度において4,4390億ドル（約65兆円）の歳入を計上しました。その際の債務利息支出は歳入の約15%を占めました。2024年においても高金利の状態が続き、米国財務省が発表したデータによると…&lt;/p&gt;
&lt;p&gt;2024会計年度：米国連邦政府の財政赤字は1兆8,330億ドル（約265兆円）に達し、債務利息支出は8,820億ドル（約132兆円）となり、米国の総収入の約18%を占めました。これは社会保障支出を上回る額です。&lt;/p&gt;
&lt;h3 id=&#34;2-政府債務の問題&#34;&gt;2. 政府債務の問題
&lt;/h3&gt;&lt;p&gt;これは財政の持続可能性に関する問題であり、長期的には低金利、低インフレ、高債務（例えば日本）を維持する場合、準現代貨幣理論的应用を形成しうる。72則に基づき、金利が十分に低い限り、財政が債務で自己資金を賄う場合、その増え方は非常に緩やかである。資金コストが1%の場合、債務を単に自己資金で賄うことで、72年で債務が倍になる可能性がある。インフレによってこの微妙なバランスが崩れると、債務の利息の支払いと蓄積により、複利によって将来の債務状況が制御不能になる。金利と本金はどちらも重要ではなくなるだろう。中央銀行が政権党の目標と一致しない場合、このような問題はさらに深刻化する。 トランプ政権の政策姿勢は、現在のFRB（連邦準備制度理事会）の強気な姿勢とは対照的に鮮明な違いを呈しており、これがこの任期中の米政府とFRBの関係が激化した重要な要因でもあります。注目されているのは、現職議長が予定通り任期を終えることができるかどうかという点です。&lt;/p&gt;
&lt;h3 id=&#34;3-金融バブルと貨幣信用問題&#34;&gt;3. 金融バブルと貨幣信用問題
&lt;/h3&gt;&lt;p&gt;理想的には、政府が拡大した支出が住民および企業部門に流入し、皆が支出を拡大することで有効需要が増加しますが、人々は2000年以降の多くの金融バブルの親身の経験者であるため、投資と消費の選択において、大きな投資価値上昇の傾向が現れ、特に1つまたは複数の投資価値が非常に高い商品が存在する場合、人々は群衆のように金融市場でより高い価値上昇を求めてしまい、生活水準の圧縮やレバレッジをかけて乗っ取ることにも躊躇しません。これは、日本、アメリカ、そして我が国の不動産高成長期における類似の現象です。政策刺激と、業者の自己利益最大化への追求が組み合わさることで、サブプライムローンなどの問題が頻発し、多くの「救済措置」は実際には借金を奨励することに他なりません。 歴史的表现出奇的一致：当货币政策和财政政策大规模发力的时候，往往是&lt;strong&gt;资产泡沫和财富再分配的狂欢&lt;/strong&gt;。资产泡沫在前，财富再分配在后，这导致了另一个问题，即极致凯恩斯主义、或者现代货币理论长期使用都会出现的经济庞氏化问题（明斯基时刻）。只要还有热钱，则资产价格继续上涨；只要继续上涨，就能吸引后来者持币前来。而衡量基本生活开支变化的CPI，反而变化并不显著，钱流入特定领域空转，后来者钱无以为继。&lt;strong&gt;狂欢之后就是崩溃&lt;/strong&gt;，也就是明斯基时刻的审判，屡试不爽。&lt;/p&gt;
&lt;p&gt;金融バブルと貨幣信用問題&lt;/p&gt;
&lt;p&gt;さらに、貨幣自体にも需給関係があり、市場供給過多となった場合、従来の投資資産が容納できなくなる、あるいは資金調達が困難になる（例えば、何度も崩盤を繰り返す不動産バブルのように、日本人は長年不動産投資に足を踏み入れない）、税制などの抑制措置、不動産保有税を導入して投機需要を抑制することなども金融投機のコストを高め、貨幣供給過剰という状況下では、市場は&lt;strong&gt;免税で資金を集められる投資資産&lt;/strong&gt;を急需となり、各種仮想投資商品が次々と登場。アメリカ大統領夫妻もその一環として参入し、一種の「ドル掘り」と称されることになったが、実際には世界的な通貨過剰と金融空転下における法貨幣信用毀損の必然的な結果であり、現代貨幣理論が最も依存する国家独占的権利に基づく信用貨幣地位さえも、その地位が脅かされうる。土壌となる状況によって、様々な金融ゲームが展開されるのである。&lt;/p&gt;
&lt;p&gt;金融バブルと貨幣信用問題&lt;/p&gt;
&lt;p&gt;要点をまとめると、現代貨幣理論とケインズ主義は、より政府の積極的な市場介入を重視し、財政赤字や中央銀行の独立性に対する姿勢がより過激であるため、漸進的かつ代替の関係にあると言えます。ケインズ主義の過剰な使用は、スタグフレーション（景気停滞と物価上昇並行）や金融危機を引き起こしましたが、その対応として、現代貨幣理論は2008年以降、徐々にその役割を担うようになり、経済グローバル化下での生産性向上により、短期的に急速な成長とインフレ率の維持を実現しました。しかしながら、大量の政府債務や金融バブルが蓄積され、インフレが反騰し、中央銀行と政府の目標が一致しない状況で、金利高騰と過剰なレバレッジ（借入）が共存することで、政府の金利負担が極度に悪化し、財政持続可能性が大幅に低下しました。さらに、過剰な政府介入による基礎的貨幣供給は金融バブルを助長し、無限に紙幣を発行することで通貨自体の信用を弱体化させました。結果として、ドルが強そうに見えるのは、他国からの相対的な評価であり、巨額の投資需要によって様々な新しい金融投資投機ツールが生み出され、伝統的な金融投資品に対する課税制限から逃れることもありました。これは世界の経済の縮図と言えます。 現代貨幣理論が未来である可能性は低いか、むしろ2008年以降から使われ始めた過去形であり、逆経済グローバリゼーションと相まって、過去の金融バブルが大きくなるほど政府債務の累積が高まり、金融投機的ツールがより狂化し、富の歪んだ分配を達成する効率が高まるほど、将来的なハードランディングのリスクは増大する。それは、経済的リスクだけでなく社会的リスクも含む。ケインズ主義であれ、現代貨幣理論であれ、通貨供給をどれだけ増やしても、富の構造的問題を根本的に解決することはできず、むしろ資産バブルと傍証化（パラドックス）を激化させ、リスクを増大させるだけだ。人々は常に同じ穴に落とされるだけで、何も学ばないのだ。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>atopツールでLinuxシステム指標を監視する：インストール、設定、および使用方法の完全ガイド</title>
        <link>https://ttf248.life/ja/p/atop-linux-system-monitoring-guide/</link>
        <pubDate>Thu, 06 Feb 2025 22:48:55 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/atop-linux-system-monitoring-guide/</guid>
        <description>&lt;p&gt;Linuxシステム運用において、リアルタイムかつ包括的にシステムリソースとプロセス状態を監視することは非常に重要です。atopは強力なモニタリングツールとして、この目標を簡単に達成するのに役立ちます。本稿では、Linuxインスタンスでatopモニタリングツールをインストール、設定、使用する方法について詳細に説明します。&lt;/p&gt;
&lt;h2 id=&#34;一atopツールの紹介&#34;&gt;一、atopツールの紹介
&lt;/h2&gt;&lt;p&gt;atopは、Linuxシステムの資源とプロセスを監視するために専門的に設計されたツールです。システムおよびプロセスの活動を記録し、すべてのプロセスの実行状況を報告します。このツールが収集するデータには、CPU、メモリ、ディスク、ネットワークなどのリソース使用量、およびプロセス状態が含まれます。さらに、データをログファイル形式でディスクに保存することも可能です。各プロセスについて、CPU使用率、メモリ増加量、ディスク使用量、優先度、ユーザー名、ステータス、および終了コードなど、重要な情報を取得できます。加えて、atopの設定ファイルを通じて、ログ収集頻度、ログファイル保存パス、ローテーションポリシーなどのパラメータをカスタマイズすることも可能です。&lt;/p&gt;
&lt;h2 id=&#34;二atopツールのインストール&#34;&gt;二、atopツールのインストール
&lt;/h2&gt;&lt;p&gt;異なるLinuxディストリビューションでのatopのインストール方法は若干異なります。以下に一般的なオペレーティングシステムを例としてご紹介します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Alibaba Cloud Linux 3/2、CentOS 7/8、Fedora、Rocky Linux 9&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;インストールコマンドを実行: &lt;code&gt;sudo yum install -y atop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始: &lt;code&gt;sudo systemctl start atop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu / Debian&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;パッケージリストを更新: &lt;code&gt;sudo apt update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;インストールコマンドを実行: &lt;code&gt;sudo apt install -y atop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始: &lt;code&gt;sudo systemctl start atop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CentOS Stream 9&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;ダウンロードしてインストール: &lt;code&gt;sudo wget https://www.atoptool.nl/download/atop-2.11.0-1.el9.x86_64.rpm &amp;amp;&amp;amp; sudo rpm -i atop-2.11.0-1.el9.x86_64.rpm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始: &lt;code&gt;sudo systemctl start atop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二atopツールのインストール-1&#34;&gt;二、atopツールのインストール
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;openSUSE&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;インストールコマンドを実行: &lt;code&gt;sudo zypper install -y atop atop-daemon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを起動: &lt;code&gt;sudo systemctl start atop&lt;/code&gt;
もし上記で挙げたディストリビューションに含まれない場合は、atop公式ウェブサイトでインストール情報を参照してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-モニタリング周期とログ保持期間の設定&#34;&gt;3. モニタリング周期とログ保持期間の設定
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;設定ファイル位置:&lt;/strong&gt; Alibaba Cloud Linux 3/2、CentOS 7/8 および Fedora システムでは、atop の設定ファイルは &lt;code&gt;/etc/sysconfig/atop&lt;/code&gt; にあります。Ubuntu、Debian および openSUSE システムでは、設定ファイルは &lt;code&gt;/etc/default/atop&lt;/code&gt; にあります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;デフォルト設定パラメータの説明&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LOGOPTS&lt;/code&gt;: 日志ファイルの記録オプションを制御するために使用され、デフォルトでは空です。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOGINTERVAL&lt;/code&gt;: モニタリング周期で、デフォルトは 600 秒です。過去のログ追跡の問題を解決するためには、実際の要件に応じて調整することをお勧めします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOGGENERATIONS&lt;/code&gt;: ログ保持期間で、デフォルトは 28 日です。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOGPATH&lt;/code&gt;: 日志ファイルの保存パスで、デフォルトは &lt;code&gt;/var/log/atop&lt;/code&gt; です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iii-モニタリング周期の設定とログ保持期間&#34;&gt;III. モニタリング周期の設定とログ保持期間
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;設定手順&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;コマンドを実行して構成ファイルを開きます：
&lt;ul&gt;
&lt;li&gt;Alibaba Cloud Linux 3/2、CentOS 7/8、Fedora システムの場合: &lt;code&gt;sudo vim /etc/sysconfig/atop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ubuntu、Debian、openSUSE、CentOS Stream 9、Rocky Linux 9 システムの場合: &lt;code&gt;sudo vim /etc/default/atop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; キーを押して編集モードに入り、必要に応じて設定パラメータを調整します。例えば、モニタリング周期を30秒に、ログ保持期間を7日間、ログパスをデフォルトのまま変更するなど。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Esc&lt;/code&gt; キーを押して &lt;code&gt;:wq&lt;/code&gt; と入力し、保存して編集モードから退出します。&lt;/li&gt;
&lt;li&gt;atop サービスを再起動して設定を有効にします: &lt;code&gt;sudo systemctl restart atop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LOGOPTS=&amp;quot;&amp;quot;
LOGINTERVAL=30
LOGGENERATIONS=7
LOGPATH=/var/log/atop
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四atopツールの使用&#34;&gt;四、atopツールの使用
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;常用コマンドの紹介&lt;/strong&gt;: インタラクティブコマンドモード下では、以下のコマンドがよく使われます。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt;: デフォルトの総合出力ビューに戻ります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;: プロセスの完全なコマンドラインを表示します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt;: メモリ使用率でプロセスを降順にソートします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt;: ディスク使用率でプロセスを降順にソートします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: 総合的なリソース使用率でプロセスを降順にソートします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;: ネットワーク使用率でプロセスを降順にソートします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt;: 次のモニタリング収集点へジャンプします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;: 前のモニタリング収集点へジャンプします。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;: 時間点を指定します（形式: YYYYMMDDhhmm）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四atop-ツールを使用&#34;&gt;四、atop ツールを使用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;リソース監視フィールドの意味解説&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ATOP&lt;/strong&gt;: ホスト名、情報サンプリングの日時。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PRC&lt;/strong&gt;: プロセスの全体的な実行状況（カーネルモードとユーザモードの実行時間、プロセス総数、異なる状態のプロセスの数など）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: CPU全体の利用状況。各フィールドの数字を合計した結果が &lt;code&gt;N*100%&lt;/code&gt; (NはCPUコア数) であり、カーネルモード、ユーザモード、割り込み、アイドル、ディスクI/O待ちなどの時間比例を含みます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPL&lt;/strong&gt;: CPU負荷状況。過去1分、5分、および15分間の実行キュー内の平均プロセス数、コンテキストスイッチ回数、割り込み発生回数など。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MEM&lt;/strong&gt;: メモリの使用状況。物理メモリ総量、空きメモリ、ページキャッシュメモリ、ファイルキャッシュメモリ、カーネル占有メモリなどを含みます。 - &lt;strong&gt;SWP:&lt;/strong&gt; 交换領域の使用状況（交換区の総量と空き交換領域のサイズを含む）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PAG:&lt;/strong&gt; 仮想メモリのページング状況（入ったページ数と出たページ数）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DSK:&lt;/strong&gt; ディスクの使用状況。各ディスクデバイスに対応する列があり、デバイス識別子、繁忙状態の時間比例、読み書きリクエストの数を表示します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NET:&lt;/strong&gt; ネットワークの状態。TCPおよびUDPのトランスポート層、IP層、および各アクティブなネットワークインターフェースでの受信および送信パケットサイズを表示します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四atopツールの使用-1&#34;&gt;四、atopツールの使用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;リアルタイムシステム指標の確認&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5秒ごとにシステム指標を確認：&lt;code&gt;atop 5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;現在時刻から5分間（合計30回、10秒間隔）のシステム指標を確認：&lt;code&gt;atop -M 10 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;現在時刻から10分間（10回、60秒間隔）のシステム指標を収集し、結果をファイルに書き出す：&lt;code&gt;atop -M 60 10 &amp;gt; /log/atop.mem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;履歴指標ログの確認&lt;/strong&gt;：atop起動後、記録された内容はデフォルトで&lt;code&gt;/var/log/atop&lt;/code&gt;ディレクトリに保存されます。確認する際は、日付を指定したログファイルが存在することを確認してください。存在しない場合、エラーが発生します。 - その日の履歴指標ログの確認: &lt;code&gt;atop -r&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前日の履歴指標ログの確認: &lt;code&gt;atop -r y&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定日内の履歴指標ログの確認 (例: 2024年11月6日): &lt;code&gt;atop -r 20241106&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定日から指定時間までの履歴指標ログの確認 (例: 2024年11月6日14:00から): &lt;code&gt;atop -r 20241106 -b 14:00&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定日期間と指定時間の履歴指標ログの確認 (例: 2024年11月5日00:04から00:08まで): &lt;code&gt;atop -r 20241105 -b 00:04 -e 00:08&lt;/code&gt; ## 四、atopツールの使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;リアルタイムシステム指標の確認&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5秒ごとにシステム指標を確認：&lt;code&gt;atop 5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;現在時刻から5分間（合計30回、10秒間隔）のシステム指標を確認：&lt;code&gt;atop -M 10 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;現在時刻から10分間（10回、60秒間隔）のシステム指標を収集し、結果をファイルに書き出す：&lt;code&gt;atop -M 60 10 &amp;gt; /log/atop.mem&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;履歴指標ログの確認&lt;/strong&gt;：atop起動後、記録された内容はデフォルトで&lt;code&gt;/var/log/atop&lt;/code&gt;ディレクトリに保存されます。確認する際は、日付を指定したログファイルが存在することを確認してください。存在しない場合、エラーが発生します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四atopツールの使用-2&#34;&gt;四、atopツールの使用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;システムアクティビティレポートの確認&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;現在のシステムにおける1分間（12回、5秒間隔）のCPU利用率レポートを確認：&lt;code&gt;atopsar -c 5 12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定した時間帯（例：18:00～18:01）のメモリ指標レポートを当日確認：&lt;code&gt;atopsar -m -b 18:00 -e 18:01&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定した日付の時間帯（例：2024年11月5日18:00～18:01）のメモリ指標レポートを確認：&lt;code&gt;atopsar -m -r 20241105 -b 18:00 -e 18:01&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5その他の操作&#34;&gt;5．その他の操作
&lt;/h2&gt;&lt;p&gt;1．&lt;strong&gt;天级别ログローテーションポリシーの設定&lt;/strong&gt;：毎日atop指標ログファイルを作成したい場合は、以下の手順を実行してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（オプション）必要に応じて監視周期、ログ保持時間、およびログ保存パスを調整します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo systemctl enable --now atop atopacct atop-rotate.timer&lt;/code&gt;コマンドを実行して、日次ログローテーション関連サービスを起動時に自動起動し、サービスを開始します。&lt;/li&gt;
&lt;li&gt;ビジネスがログ処理に対してより複雑な要件を持つ場合は、logrotateやカスタムスクリプトと組み合わせてログ管理を実現できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;五その他の操作&#34;&gt;五、その他の操作
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;オプションのnetatopカーネルモジュールをロードする&lt;/strong&gt;: 网络使用率を監視する必要がある場合は、atopにはデフォルトでインストールされていないため、netatopモジュールをインストールします（Alibaba Cloud Linux 3システムの場合）。
&lt;ul&gt;
&lt;li&gt;カーネル開発パッケージおよびコンパイルに必要なソフトウェア環境をインストール: &lt;code&gt;sudo yum install -y kernel-devel dkms elfutils-libelf-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最新バージョンのnetatopソースコードを指定ディレクトリにダウンロード: &lt;code&gt;cd /usr/src/ &amp;amp;&amp;amp; sudo wget https://www.atoptool.nl/download/netatop-3.2.2.tar.gz --no-check-certificate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ソースコードを解凍し、ソースコードディレクトリに移動: &lt;code&gt;sudo tar -zxvf netatop-3.2.2.tar.gz &amp;amp;&amp;amp; cd netatop-3.2.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ソースコードに基づいてモジュールとデーモンをビルドおよびインストール: &lt;code&gt;sudo make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;netatopサービスを開始: &lt;code&gt;sudo systemctl start netatop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-その他の操作&#34;&gt;5. その他の操作
&lt;/h2&gt;&lt;p&gt;atopツールは強力で柔軟な機能を持っており、適切にインストール、設定、および使用することで、Linuxシステムの稼働状況をより深く理解し、潜在的な問題を迅速に発見して解決することができます。この記事が皆さんのLinuxシステム監視のレベルアップに役立つことを願っています。&lt;/p&gt;
&lt;h2 id=&#34;6参考链接&#34;&gt;6．参考链接
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.atoptool.nl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;atop公式サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://help.aliyun.com/zh/ecs/use-cases/use-the-atop-tool-to-monitor-linux-system-metrics#99e53d0198euu&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;atopモニタリングツールのインストール、設定、および使用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>為替レートにおける「買直定価」と「売直定価」の理解</title>
        <link>https://ttf248.life/ja/p/understanding-buy-and-sell-exchange-rates/</link>
        <pubDate>Thu, 06 Feb 2025 22:32:10 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/understanding-buy-and-sell-exchange-rates/</guid>
        <description>&lt;p&gt;外国為替市場、特に銀行や両替所で「買入換率」と「売出換率」といった用語をよく目にするでしょう。これらの概念について、多くの人は理解できていないか、あるいは混同しているかもしれません。そこで、ここでは簡単な例を通して、この2つの換率の意味と、それらがどのように機能するのかを解説します。&lt;/p&gt;
&lt;h2 id=&#34;1-買入相場と売出相場とは何か&#34;&gt;1. 「買入相場」と「売出相場」とは何か？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;買入相場&lt;/strong&gt;：銀行や外貨交換機関がこのレートで外国為替を購入する意思があるという意味です。つまり、あなたが外国為替（例えば米ドル）を銀行に売ると、銀行はあなたの元気を「買入相場」のレートで支払ってくれます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;売出相場&lt;/strong&gt;：銀行や外貨交換機関がこのレートで外国為替を販売する意思があるという意味です。つまり、あなたが円を使って外国為替を購入すると、銀行は「売出相場」のレートであなたに外国為替を売ります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡単に言うと：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;買入相場&lt;/strong&gt;：銀行があなたの手から外国為替を買う価格。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;売出相場&lt;/strong&gt;：銀行が外国為替をあなたに売る価格。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意点として、銀行の買入相場と売出相場は通常異なり、「売出相場」は「買入相場」よりも高い傾向があります。この差額が銀行の利益源です。&lt;/p&gt;
&lt;h2 id=&#34;2-具体事例分析&#34;&gt;2. 具体事例分析
&lt;/h2&gt;&lt;p&gt;両方の為替レートの実用例をより明確に理解するために、具体的な事例を見ていきましょう。
例えば、銀行でドルを両替する場合、銀行が提示する為替レートは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;買いレート&lt;/strong&gt;：1ドル = 7.0元&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;売りレート&lt;/strong&gt;：1ドル = 7.2元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;シナリオ１あなたはドルを銀行に売る&#34;&gt;シナリオ１：あなたはドルを銀行に売る
&lt;/h3&gt;&lt;p&gt;あなたが持っている1000ドルのことを想像してください。これらのドルを銀行に売りたいと考えています。銀行は購入レートに基づいて計算を行います。
&lt;/p&gt;
\[
1000 \, \text{ドル} \times 7.0 \, \text{元/ドル} = 7000 \, \text{元}
\]
&lt;p&gt;
つまり、銀行はあなたに7000元を支払うことになります。この為替レートは&lt;strong&gt;購入レート&lt;/strong&gt;であり、あなたはドルを銀行に売っているためです。&lt;/p&gt;
&lt;h3 id=&#34;シナリオ２お札をドルで買う&#34;&gt;シナリオ２：お札をドルで買う
&lt;/h3&gt;&lt;p&gt;あなたが手元に7000元（人民元）があり、それをドルに換算したいとします。銀行は売却レートに基づいて計算を行います。&lt;/p&gt;
\[
7000 \, \text{元} \div 7.2 \, \text{元/ドル} = 972.22 \, \text{ドル}
\]
&lt;p&gt;この場合、7000元で約972.22ドルを手に入れることができます。ここでいう為替レートは&lt;strong&gt;売方向の為替レート&lt;/strong&gt;であり、あなたは銀行からドルを買っているためです。&lt;/p&gt;
&lt;h2 id=&#34;3-円安円高の理由とは&#34;&gt;3. 円安・円高の理由とは？
&lt;/h2&gt;&lt;p&gt;あなたは、銀行の買いレート（7.0元/ドル）が売りレート（7.2元/ドル）よりも低いことに気づいただろう。これは、銀行が外貨取引を行う際、このレート差を利用して利益を得るためである。つまり、より高い売りレートで円を売却し、より低い買いレートで円を購入することで、その差額を利益とするのだ。&lt;/p&gt;
&lt;p&gt;例えば、上記のケースでは、以下のようになっている：&lt;/p&gt;
\[
\text{売りレート}（7.2） - \text{買いレート}（7.0） = 0.2 \, \text{元}
\]
&lt;p&gt;このレート差が銀行の利益源となっている。&lt;/p&gt;
&lt;h2 id=&#34;4-まとめ&#34;&gt;4. まとめ
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;買入相場（かいゆうまえが）&lt;/strong&gt;：銀行はこのレートであなたから外国為替（あなたがお売りする際のレートと同じ）を買います。（あなたがお買いする際のレート）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;売出相場（うつしょうば）&lt;/strong&gt;：銀行はこのレートであなたに外国為替（あなたがお買いする際のレートと同じ）を売ります。（あなたがお売りする際のレート）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相場差（そうばさ）&lt;/strong&gt;：買入相場と売出相場との間の差額が銀行の利益源です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この2つのレートの概念を理解したら、外貨両替をする際に自分がどれだけの外国為替を受け取れるか、あるいはどれだけの人民元で外国為替を買えるかをより明確に知ることができます。この簡単な例が皆さんが外貨レートの基本的な原理をより良く理解するのに役立つことを願っています！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Visual Studio が「不整合な」PDB ファイルを読み込みません。</title>
        <link>https://ttf248.life/ja/p/visual-studio-load-unmatched-pdb/</link>
        <pubDate>Thu, 23 Jan 2025 20:04:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/visual-studio-load-unmatched-pdb/</guid>
        <description>&lt;p&gt;WindowsでVisual Studioを使ってプログラムをデバッグする場合、PDBファイルと実行可能ファイルが一致しない場合、Visual Studioは「シンボルファイルを読み込めません」というエラーを表示します。プログラムの実行中にクラッシュが発生し、ダンプファイルが生成された場合、不一致なPDBファイルの場合、Visual Studioはクラッシュ現場にスムーズに入ることができません。&lt;/p&gt;
&lt;h2 id=&#34;pdb-ファイルとは&#34;&gt;PDB ファイルとは
&lt;/h2&gt;&lt;p&gt;PDB ファイルは、Microsoft が提供するデバッグ情報ファイルで、プログラムのデバッグに使用されます。PDB ファイルには、シンボルテーブル、ソースコードファイル名、行番号などの情報が含まれています。プログラムをコンパイルするときに生成され、プログラムのデバッグに使用されます。&lt;/p&gt;
&lt;h2 id=&#34;windbg-デバッグ&#34;&gt;WinDbg デバッグ
&lt;/h2&gt;&lt;p&gt;WinDbg は Microsoft 製のデバッガで、Windows プログラムをデバッグするために使用されます。WinDbg は不一致な PDB ファイルをロードできますが、手動でロードする必要があります。.reload /f /i コマンドを使用して、強制的に不一致な PDB ファイルをロードできます。
しかし、WinDbg の使い勝手は Visual Studio ほど簡単ではないため、Visual Studio も不一致な PDB ファイルをロードできるようにしたいと考えています。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-が-pdb-ファイルを読み込めない&#34;&gt;Visual Studio が PDB ファイルを読み込めない
&lt;/h2&gt;&lt;p&gt;ソースコードは現在、Git などのバージョン管理システムで管理されることが一般的であり、対応するバージョンのコードを再コンパイルして、対応する PDB ファイルを生成できます。なぜ読み込めないのでしょうか？主な原因は、メタデータの不一致です。&lt;/p&gt;
&lt;p&gt;元データを修正し、EXE ファイルの情報に基づいて新しい PDB ファイルを生成することで、Visual Studio がファイルを読み込めるようになります。&lt;/p&gt;
&lt;p&gt;chkmatch ダウンロード先: &lt;a class=&#34;link&#34; href=&#34;https://www.debuginfo.com/tools/chkmatch.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.debuginfo.com/tools/chkmatch.html&lt;/a&gt;
サイトのキャッシュアドレス: &lt;a class=&#34;link&#34; href=&#34;chkmatch.zip&#34; &gt;chkmatch.zip&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-での-pdb-ファイルの不一致&#34;&gt;Visual Studio での PDB ファイルの不一致
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ChkMatch&lt;/code&gt; ユーティリティを使用して、実行可能ファイルとデバッグ情報ファイルの互換性を確認できます。また、互換性のある実行可能ファイルとデバッグ情報ファイルを強制的に一致させることも可能です。&lt;/p&gt;
&lt;p&gt;デバッグ情報ファイルの互換性と関連する問題に関する詳細については、こちらの記事を参照してください。&lt;/p&gt;
&lt;p&gt;サポートされているデバッグ情報形式: DBG, PDB 2.0, PDB 7.0&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-が-pdb-ファイルを読み込めない-1&#34;&gt;Visual Studio が PDB ファイルを読み込めない
&lt;/h2&gt;&lt;p&gt;サポートされているデバッグ情報形式: DBG, PDB 2.0, PDB 7.0。&lt;/p&gt;
&lt;p&gt;chkmatch [-c ExeFile DebugInfoFile ] |
[-m ExeFile DebugInfoFile]&lt;/p&gt;
&lt;p&gt;-c
実行ファイルとデバッグ情報ファイルの間のマッチングを確認します。
-m
実行ファイルとデバッグ情報ファイルをマッチングさせます。
ExeFile
実行ファイルの名前。
DebugInfoFile
デバッグ情報ファイルの名前。&lt;/p&gt;
&lt;h2 id=&#34;chkmatch-の使用&#34;&gt;chkmatch の使用
&lt;/h2&gt;&lt;p&gt;まず、照合操作を実行し、不一致の原因を分析して、署名が一致しないことを示します。&lt;/p&gt;
&lt;h2 id=&#34;chkmatch&#34;&gt;chkmatch
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -c &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chkmatch-の使用-1&#34;&gt;chkmatch の使用
&lt;/h2&gt;&lt;p&gt;実行可能ファイル：
TimeDateStamp：c26d9be3
デバッグ情報：2 ( CodeView )
TimeStamp：f86b0a4f　特性：0  MajorVer：0  MinorVer：0
サイズ：122  RVA：001cdc44  ファイルオフセット：001cbe44
CodeView 形式：RSDS
署名：{428c9b95-39a3-4a8d-a8e5-7be453684757}　年齢：1
PdbFile：D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
デバッグ情報：16 ( Unknown )
TimeStamp：00000000　特性：0  MajorVer：0  MinorVer：0
サイズ：0  RVA：00000000  ファイルオフセット：00000000&lt;/p&gt;
&lt;h2 id=&#34;chkmatch-の使用-2&#34;&gt;chkmatch の使用
&lt;/h2&gt;&lt;p&gt;デバッグ情報ファイル：
形式：PDB 7.00
署名：{06fae08e-c0a2-4f3d-9c7c-dfc684445dd1}  バージョン：1&lt;/p&gt;
&lt;p&gt;結果：マッチングなし (理由：署名の不一致)&lt;/p&gt;
&lt;h2 id=&#34;chkmatch-の使用-3&#34;&gt;chkmatch の使用
&lt;/h2&gt;&lt;p&gt;その後、pdb ファイルと exe ファイルを一致するように修正操作を実行します。&lt;/p&gt;
&lt;h2 id=&#34;chkmatch-1&#34;&gt;chkmatch
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -m &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chkmatch-の使用-4&#34;&gt;chkmatch の使用
&lt;/h2&gt;&lt;p&gt;実行可能ファイル：
TimeDateStamp：c26d9be3
デバッグ情報：2 ( CodeView )
TimeStamp：f86b0a4f　特性：0  MajorVer：0  MinorVer：0
サイズ：122  RVA：001cdc44  ファイルオフセット：001cbe44
CodeView 形式：RSDS
署名：{428c9b95-39a3-4a8d-a8e5-7be453684757}　年齢：1
PdbFile：D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
デバッグ情報：16 ( Unknown )
TimeStamp：00000000　特性：0  MajorVer：0  MinorVer：0
サイズ：0  RVA：00000000  ファイルオフセット：00000000&lt;/p&gt;
&lt;h2 id=&#34;chkmatch-の使用-5&#34;&gt;chkmatch の使用
&lt;/h2&gt;&lt;p&gt;デバッグ情報ファイル：
形式：PDB 7.00
署名：{06fae08e-c0a2-4f3d-9c7c-dfc684445dd1} 年齢：1&lt;/p&gt;
&lt;p&gt;デバッグ情報ファイルへの書き込み…
結果：成功。&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/38147487/forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Cursor AI プログラミングIDE のトライアル</title>
        <link>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</link>
        <pubDate>Thu, 23 Jan 2025 19:30:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</guid>
        <description>&lt;p&gt;一年又转眼即逝之际，在工作中最大的变化莫过于AI参与度显著提升了。相较于以往，不同开发语言之间的切换，需要开发者熟悉各种语言不同的API接口，现在这些基础代码都可以通过AI生成代码了，对于开发者来说，无疑是一个巨大的福音。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;23年の時点で、簡単な入門紹介を既に2本作成していましたが、今では25年となり、どう表現しようか…顕著な進歩を感じ取ることはなく、自律的な認知能力を発展させ、タスクを合理的に分割できること、そして何よりもAIが生成したコードにバグがないかを識別することが重要です。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;Github Copilot
&lt;/h2&gt;&lt;p&gt;いつの日か忘れましたが、情報を見てみるとシンガポールでサーバーがデプロイされ、国内で使用されているとのことです。これからは長期間VPNに接続する必要はなくなります。ただし、ログイン時にはやはりVPNを接続する必要があります。しかし、このVPNはログイン時のみ使用し、その後はオフにしてしまえば良いのです。&lt;/p&gt;
&lt;p&gt;普段使いではGithub Copilotの方がより多く利用されます。この拡張機能は、VS CodeやVisual Studioで直接使用できます。2つのソフトウェア間の切り替えが不要です。ChatGPTと比較して、Github Copilotはプロジェクトに対するサポートが優れており、インタラクションも友好的です。また、一部のローカルファイルをAIに「学習」させることで、生成されるコードをあなたのプロジェクトに合わせてより適切に調整することができます。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;最近、Cursor AI という新しいAIプログラミングIDEを見つけました。このIDEもGithub Copilotをベースにしているのですが、よりスマートで、直接ファイルを作成するのを手伝ってくれます。&lt;/p&gt;
&lt;p&gt;簡単な使い心地を試したところ、なかなか良いと感じましたが、既存プロジェクトの理解はまだ十分ではなく、ローカルプロジェクトファイルの多さによっては、大規模なリファクタリングや最適化、調整には&lt;strong&gt;開発者がタスクを分割&lt;/strong&gt;する必要があります。&lt;/p&gt;
&lt;p&gt;例として、cursoにエンジニアモードを切り替えて、以下の内容を入力してみましょう。「複数の異なるスタイルで切り替え可能な個人用履歴書ウェブページの作成、データ表示のために個人情報を埋めることを忘れないで」&lt;/p&gt;
&lt;p&gt;何度かやり取りするうちに、以下のようなウェブページが得られました。もちろん、このウェブページは比較的シンプルですが、初心者にとっては非常に良いでしょう。 ## Cursor AI&lt;/p&gt;
&lt;p&gt;最近、Cursor AI という新しいAIプログラミングIDEを試してみました。これはGithub Copilotにも基づいているもので、このIDEはさらに賢く、直接ファイルを作成するのを手伝ってくれます。&lt;/p&gt;
&lt;p&gt;簡単な使い心地ですが、全体的に良い印象を受けました。しかし、既存のプロジェクトの理解はまだ十分ではなく、ローカルプロジェクトのファイルが多い場合は、大規模なリファクタリングや最適化、調整には&lt;strong&gt;開発者がタスクを分割&lt;/strong&gt;する必要があります。&lt;/p&gt;
&lt;p&gt;例として、curso のエンジニアモードに切り替えて、以下の内容を入力しました：「複数の異なるスタイルで切り替え可能な個人用履歴書ウェブページの作成、データ表示のためにいくつかの個人情報を埋めることを忘れないで」&lt;/p&gt;
&lt;p&gt;何度かやり取りするうちに、以下のようなウェブページが得られました。もちろん、このウェブページは比較的シンプルですが、初心者にとっては非常に良いものと言えるでしょう。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai-1&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cursor/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;履歴書&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43; ビット演算の基礎：ビットごとのANDとフラグ設定</title>
        <link>https://ttf248.life/ja/p/cpp-bitwise-operations-flags/</link>
        <pubDate>Fri, 17 Jan 2025 02:23:56 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-bitwise-operations-flags/</guid>
        <description>&lt;p&gt;実際のC++開発において、ビット演算は一般的な技術であり、特にシステムの状態、フラグビット、または制御ビットを扱う際に、非常に効率的な解決策を提供します。本稿では、例を通して、ビット演算を使用して特定のフラグビットを取得および設定する方法について解説します。&lt;/p&gt;
&lt;h3 id=&#34;ビット演算の基礎概念&#34;&gt;ビット演算の基礎概念
&lt;/h3&gt;&lt;p&gt;コンピュータでは、データは2進数（0と1）のビットで格納されます。ビット演算とは、これらのビットに対して操作を行うことです。C++には、いくつかの一般的なビット演算演算子が用意されています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;論理積（&amp;amp;）&lt;/strong&gt;：特定のビットが1かどうかを確認します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論理和（|）&lt;/strong&gt;：特定のビットを1に設定します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排他的論理和（^）&lt;/strong&gt;：特定のビットを反転させます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビット反転（~）&lt;/strong&gt;：すべてのビットを反転させます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左シフト（&amp;laquo;）&lt;/strong&gt;：すべてのビットを左に指定した数だけシフトします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右シフト（&amp;raquo;）&lt;/strong&gt;：すべてのビットを右に指定した数だけシフトします。
本例では、&lt;code&gt;unsigned short&lt;/code&gt; 型の変数 &lt;code&gt;wInfo&lt;/code&gt; に対して、さまざまなビット演算を実行し、異なるフラグを使用して状態を表す必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ビット演算の基礎概念-1&#34;&gt;ビット演算の基礎概念
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR
    A[元の数値: 00010000] --&amp;gt; B[左シフト: 00010000 &amp;lt;&amp;lt; 1]
    B --&amp;gt; C[結果: 00100000]
    C --&amp;gt; D[右シフト: 00100000 &amp;gt;&amp;gt; 1]
    D --&amp;gt; E[結果: 00010000]

    subgraph 左シフト操作
        direction LR
        A --&amp;gt; B --&amp;gt; C
    end

    subgraph 右シフト操作
        direction LR
        C --&amp;gt; D --&amp;gt; E
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;要求分析&#34;&gt;要求分析
&lt;/h3&gt;&lt;p&gt;問題文の記述に基づき、16ビットのフラグビットがあり、これを用いて様々な状態を表します。これらの状態は、個々のバイナリビットによって表現され、各バイナリビットは特定の意味に対応しています。例えば：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bit0&lt;/strong&gt; が失敗かどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit1&lt;/strong&gt; が圧縮されているかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit2&lt;/strong&gt; が増量であるかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit3&lt;/strong&gt; が後続のパケットがあるかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit5&lt;/strong&gt; が正常なリクエストまたは注销かどうか&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;位演算による実装&#34;&gt;位演算による実装
&lt;/h3&gt;&lt;p&gt;ビット演算を用いてこれらのフラグを設定および取得します。具体的には：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ビットごとの抽出 (Bitwise Extraction)&lt;/strong&gt;: 特定のビットの値（0または1）を取得します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビットごとの設定 (Bitwise Setting)&lt;/strong&gt;: 特定のビットを1に設定します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビットごとのクリア (Bitwise Clearing)&lt;/strong&gt;: 特定のビットを0に設定します。
最初に &lt;code&gt;unsigned short&lt;/code&gt; 型の変数 &lt;code&gt;wInfo&lt;/code&gt; を定義し、これらのフラグを保存するために使用します。その後、ビット演算を用いて対応するフラグを確認および設定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c-のサンプルコード&#34;&gt;C++ のサンプルコード
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;bitset&amp;gt;

// フラグ位定数定義
const unsigned short BIT_0_FAIL = 1 &amp;lt;&amp;lt; 0;    // bit0 が失敗したかどうか
const unsigned short BIT_1_COMPRESSED = 1 &amp;lt;&amp;lt; 1; // bit1 が圧縮されたかどうか
const unsigned short BIT_2_INCREMENT = 1 &amp;lt;&amp;lt; 2;  // bit2 が増量されたかどうか
const unsigned short BIT_3_HAS_MORE = 1 &amp;lt;&amp;lt; 3;   // bit3 に後続のパケットがあるかどうか
const unsigned short BIT_5_CANCEL = 1 &amp;lt;&amp;lt; 5;     // bit5 は正常なリクエスト(0)か、注销(1)か

// あるビットがセットされているか確認する
bool isBitSet(unsigned short wInfo, unsigned short bitMask) {
    return (wInfo &amp;amp; bitMask) != 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;### C++ のサンプルコード
// ビットを設定する
void setBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo |= bitMask;
}

// ビットをクリアする（0に設定）
void clearBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo &amp;amp;= ~bitMask;
}

int main() {
    // wInfo の初期値を 0 と仮定
    unsigned short wInfo = 0;

    // ビット 0 (失敗フラグ) を設定
    setBit(wInfo, BIT_0_FAIL);

    // ビット 1 (圧縮フラグ) を設定
    setBit(wInfo, BIT_1_COMPRESSED);

    // wInfo の二進数値を表示
    std::cout &amp;lt;&amp;lt; &amp;quot;wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// 各ビットフラグの確認
    std::cout &amp;lt;&amp;lt; &amp;quot;bit0 (失敗フラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_0_FAIL) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit1 (圧縮フラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_1_COMPRESSED) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit2 (インクリメントフラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_2_INCREMENT) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit3 (続き包フラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_3_HAS_MORE) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit5 (キャンセルフラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_5_CANCEL) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;### C++ のサンプルコード
// ビット1（圧縮フラグ）をクリアする
    clearBit(wInfo, BIT_1_COMPRESSED);

    // 更新された wInfo を出力
    std::cout &amp;lt;&amp;lt; &amp;quot;Updated wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c-サンプルコード&#34;&gt;C++ サンプルコード
&lt;/h3&gt;&lt;p&gt;コードを実行するには、旧友を推奨：&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wInfo (バイナリ): 0000000000000011
bit0 (エラーか): はい
bit1 (圧縮するか): はい
bit2 (増分か): いいえ
bit3 (後続包があるか): いいえ
bit5 (注销するか): いいえ
Updated wInfo (バイナリ): 0000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;コード解説&#34;&gt;コード解説
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;フラグの定義&lt;/strong&gt;: ビットシフト演算 (&lt;code&gt;1 &amp;lt;&amp;lt; n&lt;/code&gt;) を使用して、各フラグを定義します。例えば、&lt;code&gt;1 &amp;lt;&amp;lt; 0&lt;/code&gt; は &lt;code&gt;bit0&lt;/code&gt; に対応し、&lt;code&gt;1 &amp;lt;&amp;lt; 1&lt;/code&gt; は &lt;code&gt;bit1&lt;/code&gt; に対応するなど、同様に推測されます。このようにして、各フラグには一意のバイナリ位置が割り当てられます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットの確認&lt;/strong&gt;: &lt;code&gt;isBitSet&lt;/code&gt; 関数は、指定されたフラグが1になっているかどうかを確認するために、ビットマスクとのAND演算 (&lt;code&gt;wInfo &amp;amp; bitMask&lt;/code&gt;) を使用します。もしそのビットが1であれば、関数は &lt;code&gt;true&lt;/code&gt; を返し、そうでなければ &lt;code&gt;false&lt;/code&gt; を返します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットの設定&lt;/strong&gt;: &lt;code&gt;setBit&lt;/code&gt; 関数は、指定されたフラグを1にするために、ビットマスクとのOR演算 (&lt;code&gt;wInfo |= bitMask&lt;/code&gt;) を使用します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットのクリア&lt;/strong&gt;: &lt;code&gt;clearBit&lt;/code&gt; 関数は、指定されたフラグを0にするために、ビットマスクとのAND演算 (&lt;code&gt;wInfo &amp;amp;= ~bitMask&lt;/code&gt;) を使用します。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h3&gt;&lt;p&gt;ビット演算（ビット操作）を用いることで、複数の状態フラグを効率的に処理できます。実際の開発においては、この技術が特に有用です。例えば、組み込み開発、ネットワークプロトコル、システムステート管理などの場面で、複数のバイナリ状態を表すためにビットフラグが頻繁に使用されます。スペースの節約と効率の向上が両立します。
この記事が、C++ でビット演算を用いてビットごとの取得と設定を行う方法を理解するのに役立つことを願っています。これらのスキルを習得することは、効率的で保守しやすいコードを書く上で非常に役立ちます！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>デスクトップPCを2.5G網カードにアップグレードし、ローカルエリアネットワークの接続を高速化します。</title>
        <link>https://ttf248.life/ja/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</guid>
        <description>&lt;p&gt;デスクトップPCのハードウェア三連発！前回の記事では、SSD PCIeアダプタについて触れたが、古いSSDはどこへ行ったのか？もちろん無駄にはせず、壊れてしまっていたか、分解して新しい購入した「メカシシャ・クリエーター Mini-3765H」（一年前のモデル）にインストールした。&lt;/p&gt;
&lt;p&gt;この新マシンは、ハードウェアスペックも十分に強力で、2.5GデュアルLAN、PCIe4.0、Wi-Fi 6を搭載している。&lt;/p&gt;
&lt;p&gt;最近引っ越しをして、部屋にルーターを個別に設置してネットワークを構築できず、すべてのPCが無線ネットワークで接続されている。ASUSのマザーボードデスクトップPCの無線LANカード性能があまり良くなく、ルーターの無線アクセスポイント、ローカルエリア間のアップロード速度が遅いこともあり、PC同士の通信速度が不安定だった。そこで、2.5G NIC（ネットワークインターフェースカード）を購入し、デスクトップPCにインストールした。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これでマザーボードのスロットは全て埋まった：グラフィックカード、無線LANカード、2.5G NIC、SSD PCIeアダプタ。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ネットワークの説明&#34;&gt;ネットワークの説明
&lt;/h2&gt;&lt;p&gt;両台の機器が元の無線LANに接続されているが、両台間をケーブルで直結し、両端に2.5G網カードを装着する。ケーブルで両台を直結する方法については、詳細は省略する（インターネット上には多くのチュートリアルがある）。ファイアウォールを必ず解放することに注意する。どちらか一方をゲートウェイとして使用すればよい。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[マシン1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;サブネットマスク: 255.255.255.0&amp;lt;br&amp;gt;デフォルトゲートウェイ: - &amp;lt;br&amp;gt;自動取得DNS] --&amp;gt;|ケーブル直結（2.5G）| B[マシン2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;サブネットマスク: 255.255.255.0&amp;lt;br&amp;gt;デフォルトゲートウェイ: 192.168.4.1&amp;lt;br&amp;gt;自動取得DNS];
    A --&amp;gt;|無線LANカード| Internet;
    B --&amp;gt;|無線LANカード| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二重網段測速&#34;&gt;二重網段測速
&lt;/h2&gt;&lt;h3 id=&#34;ルーティング局域網&#34;&gt;ルーティング局域網
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
接続先ホスト 192.168.3.237、ポート 5201 に接続
[  4] ローカル 192.168.3.122 ポート 1656 が 192.168.3.237 のポート 5201 に接続
[ ID] インターバル           転送     帯域幅
[  4]   0.00-1.00   秒  9.17 MB  76.7 Mbps
[  4]   1.00-2.00   秒  9.91 MB  83.2 Mbps
[  4]   2.00-3.00   秒  8.74 MB  73.3 Mbps
[  4]   3.00-4.00   秒 10.2 MB  85.2 Mbps
[  4]   4.00-5.00   秒  9.23 MB  77.1 Mbps

### ルーター局域網
[ 4 ] 4.00-5.00 sec 9.23 MB 77.1 Mbps
[ 4 ] 5.00-6.00 sec 8.80 MB 73.9 Mbps
[ 4 ] 6.00-7.01 sec 8.00 MB 66.8 Mbps
[ 4 ] 7.01-8.00 sec 7.69 MB 64.9 Mbps
[ 4 ] 8.00-9.01 sec 9.72 MB 81.1 Mbps
[ 4 ] 9.01-10.01 sec 7.63 MB 63.6 Mbps
--- --- --- --- --- --- --- --- ---
[ ID] 間隔           転送量     帯域幅
[ 4 ] 0.00-10.01 sec 89.0 MB 74.6 Mbps                  送信元

### 局域網
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  送信元
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  宛先

### ルーターローカルエリアネットワーク
iperf Done.

### 直接接続局所ネットワーク
```shell
C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
接続先ホスト 192.168.4.1、ポート 5201 に接続
[  4] ローカルアドレス 192.168.4.2 ポート 1524 が 192.168.4.1 のポート 5201 に接続
[ ID] インターバル           転送     帯域幅
[  4]   0.00-1.01   秒   178 MB   1.48 Gbps
[  4]   1.01-2.00   秒   204 MB   1.72 Gbps
[  4]   2.00-3.00   秒   214 MB   1.80 Gbps
[  4]   3.00-4.00   秒   229 MB   1.92 Gbps
[  4]   4.00-5.00   秒   202 MB   1.69 Gbps

### 直接局域網
[ 4 ] 4.00-5.00 sec 202 MB 1.69 GBits/sec
[ 4 ] 5.00-6.00 sec 213 MB 1.79 GBits/sec
[ 4 ] 6.00-7.00 sec 230 MB 1.93 GBits/sec
[ 4 ] 7.00-8.00 sec 192 MB 1.61 GBits/sec
[ 4 ] 8.00-9.00 sec 220 MB 1.84 GBits/sec
[ 4 ] 9.00-10.00 sec 230 MB 1.93 GBits/sec
--- --- --- --- --- --- --- --- ---
[ ID] 間隔           転送量     帯域幅
[ 4 ] 0.00-10.00 sec 2.06 GBytes 1.77 GBits/sec　送信元

### 直連局域網
[ 4 ] 0.00-10.00 秒 2.06 GB 1.77 Gbps　送信元
[ 4 ] 0.00-10.00 秒 2.06 GB 1.77 Gbps　受信側

### 直接接続局所網
iperf Done.

## 参考資料
- [HugoにMermaidを導入する方法](https://wutongsuimeng.github.io/post/%E7%BB%99hugo%E6%B7%BB%E5%8A%A0mermaid%E6%94%AF%E6%8C%81/)&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>ASUS マザーボード Z490 のディスクが多すぎ、ランダムなディスクが認識されない。</title>
        <link>https://ttf248.life/ja/p/asus-z490-motherboard-disk-recognition-issues/</link>
        <pubDate>Fri, 10 Jan 2025 00:08:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/asus-z490-motherboard-disk-recognition-issues/</guid>
        <description>&lt;p&gt;前の文脈を踏まえ、突然無線LANアダプターが認識できなくなった問題が発生しました。パーティションを再構築する前に、インターネット上でも他の解決策を探しておりました。例えば、マザーボードのバッテリーアンロードや、電源を切って15分間待つなどの方法がありました。また、最新版のBOISドライバーへのアップデートも試しましたが、いずれもうまくいきませんでした。&lt;/p&gt;
&lt;p&gt;他に処理すべきことがあり、ファイナルネットワークに切り替えて、リビングから部屋へケーブルを引っ張ってみると、また問題が発生しました。有線LANも認識されなくなりました。最終手段としてシステムを再インストールしたところ、パーティションのガイダンスが失われました。もし常にこの問題が発生していたら、これほど長く悩まないはずです。華碩のマザーボードにおけるディスク競合は、偶発的なものであり、システムの再起動時に不安定な状態がトリガーとなるようです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先週、台式机に新しい长江存储の2TB SSD（M.2インターフェース）を追加したところ、マシンは電源が入らず、昨日までシャットダウンすることができませんでした。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/asus-z490-motherboard-disk-recognition-issues/20250110002801.png&#34;
	width=&#34;553&#34;
	height=&#34;322&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ディスクフルハウス&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;システムの再インストール&#34;&gt;システムの再インストール
&lt;/h2&gt;&lt;p&gt;時間を作って、もう2年もシステムを再インストールしていない。Cドライブが足りなくなってきた。Windows の古い問題や、日常的に使用するソフトウェアが Cドライブに何かを保存しようとする。そこで、システムを再インストールすることを決定した。システムを再インストールした後、ネットワークカードの問題はすべて正常になった。翌日には、開発環境を回復させることができ、システムのバックアップを作成しようとしたところ、新たな問題が発生した。システムを再起動すると、ブートパーティションが失われた。
前回の記事の手順に従い、ブートパーティションを再構築したが、不安定で、再起動するとブートパーティションが読み込まれなくなる可能性がある。折詰機箱を分解するのではないかと疑うことになったが、何度か確認しても問題はなかった。&lt;/p&gt;
&lt;h2 id=&#34;記憶の想起&#34;&gt;記憶の想起
&lt;/h2&gt;&lt;p&gt;数年前、この機械はSSDを一度増設した際、PCIe変換器（グラフィックカードのポートに接続）を使用していました。これは、直接マザーボードに取り付けるのではなく、変換器を通してHDDを取り付ける方法でした。今回、直接マザーボードに取り付けたのは、おそらくマザーボードの問題である可能性があります。
&lt;img src=&#34;https://ttf248.life/p/asus-z490-motherboard-disk-recognition-issues/20250110002148.png&#34;
	width=&#34;325&#34;
	height=&#34;545&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SSD変換器&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;59&#34;
		data-flex-basis=&#34;143px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;マザーボードマニュアル&#34;&gt;マザーボードマニュアル
&lt;/h2&gt;&lt;p&gt;マザーボードマニュアルに問題があり、記載されているSATAポートの位置と実際の位置が異なっております。ディスクの多さから、ポートにはすべてハードドライブが取り付けられており、古いSSDはSATAポートを使用しています。マニュアルでは、これらのポート間に競合が存在すると記載されています。しかし、実際にテストを行ったところ、この競合は不安定に発生し、発生すると対応するディスクを読み込めなくなります。これはちょうどシステムディスクであり、ブートローダーも同じディスク上に存在するため、システム起動時にブートローダーの読み込みに失敗します。
&lt;img src=&#34;https://ttf248.life/p/asus-z490-motherboard-disk-recognition-issues/20250110002401.png&#34;
	width=&#34;807&#34;
	height=&#34;847&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Z490&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;228px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;SSDをPCIe変換器に再インストールすることで、この問題を解決できます。その結果、マザーボード上のSATAポートとの競合が解消され、システム起動が正常に行われます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ESPセグメントの探求、GPTセグメントテーブルとWindowsオペレーティングシステムの協調性に関する深掘り</title>
        <link>https://ttf248.life/ja/p/esp-partitioning-gpt-windows-cooperation/</link>
        <pubDate>Thu, 09 Jan 2025 23:58:20 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/esp-partitioning-gpt-windows-cooperation/</guid>
        <description>&lt;p&gt;昨日の退勤後、慣例どおりデスクトップPCを起動し、システムが正常に起動したが無線LANアダプターの読み込みに失敗した。ルーターが外れてしまったのではないかと推測し、分解して無線LANアダプターを再インストールしたが、問題はさらに深刻化した。システムが直接起動できなくなり、ブートローダーのロードに失敗した。&lt;/p&gt;
&lt;p&gt;長らくPCをメンテナンスしていなかったため、パーティションの分割とブートローダーの構築が少し戸惑った。DisGeniusで空きパーティションを再作成（通常はディスクの前部へ分割）し、ESPパーティション（デフォルト300MB）として割り当て、PEシステムを使用してブートローダーを再構築した。関連情報はインターネット上で見つけることができた。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/esp-partitioning-gpt-windows-cooperation/20250110000433.png&#34;
	width=&#34;330&#34;
	height=&#34;269&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;新規ESPパーティション&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;
&lt;img src=&#34;https://ttf248.life/p/esp-partitioning-gpt-windows-cooperation/20250110000509.png&#34;
	width=&#34;433&#34;
	height=&#34;355&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;MSRパーティションを削除しても良い&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;121&#34;
		data-flex-basis=&#34;292px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンピュータのストレージの世界では、ESPパーティション、GPTパーティション表、そしてWindowsオペレーティングシステムは密接に関連し、それぞれが独自の役割を果たし、システムの安定した動作と効率的な管理を支えている。 しかし、それらを深く理解する前に、コンピュータパーティションの歴史の流れにおける「先駆者」であるMBR（マスターブートレコード）形式を言及せざるを得ない。それは後の技術と相互に照らし合い、技術進化の脈絡をより一層際立たせる。今日こそ、その内在的な関連性と精妙さを深く分析しよう。&lt;/p&gt;
&lt;h2 id=&#34;1-mbrパーティションテーブル従来のハードディスクのパーティショニングにおける基礎&#34;&gt;1. MBRパーティションテーブル—従来のハードディスクのパーティショニングにおける「基礎」
&lt;/h2&gt;&lt;p&gt;MBR（Master Boot Record）は、個人コンピュータが誕生当初から存在し、数十年にもわたってハードディスクのパーティショニング領域を支配してきた。&lt;/p&gt;
&lt;h3 id=&#34;1-基本構造&#34;&gt;1. 基本構造
&lt;/h3&gt;&lt;p&gt;これはハードディスクの最初のセクタ、つまり0号セクタに位置し、512バイトの領域を占有しています。この512バイトは主に3つの部分に分けられています。第一にブートプログラムコードで、コンピュータ起動時にオペレーティングシステムのブートローダーをロードする役割を担い、通常446バイトを占めます。第二にディスクパーティション表で、64バイトを占め、最大4つのメインパーティションに関する情報を記述します。各パーティションは16バイトを占め、セクタ、トラック、パーティションの開始位置などの重要なパラメータを記録し、パーティションの種類とサイズなどを記録します。最後に2バイトがMBR終端マーク“55 AA”で、このセクタが有効なMBRであることを示します。&lt;/p&gt;
&lt;h3 id=&#34;2-功績と限界&#34;&gt;2. 功績と限界
&lt;/h3&gt;&lt;p&gt;初期においては、MBRパーティション表は個人向けコンピュータの比較的単純なストレージニーズを完全に満たしていました。これにより、オペレーティングシステムはハードディスクのパーティションをスムーズに認識し、データの整理された保存と読み取りを実現しました。しかし、時代とともにその限界がますます顕著になっていきました。第一に、64バイトのパーティション表領域に限定されるため、最大で4つのプライマリパーティションしか作成できず、より多くのパーティションを作成するには、拡張パーティションや論理パーティションといったやや複雑な方法を用いる必要があり、ディスク管理を煩雑にしました。第二に、最大容量が2TBに制限されており、現代では数TB、場合によっては数十TBという大容量のハードディスクに対しては力不足であり、これはストレージ技術のさらなる発展を阻害するボトルネックとなりました。&lt;/p&gt;
&lt;h2 id=&#34;2-espパーティション系統的な隠れた起動の鍵&#34;&gt;2. ESPパーティション—系統的な「隠れた起動の鍵」
&lt;/h2&gt;&lt;p&gt;ESP (EFI System Partition) は、EFI システムパーティションの略称です。これは、UEFI (Unified Extensible Firmware Interface) 標準に基づくコンピュータに必要な特別なパーティションです。&lt;/p&gt;
&lt;h3 id=&#34;1-機能特性&#34;&gt;1. 機能特性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;起動ブート&lt;/strong&gt;：コンピュータが通電して起動する際、UEFIファームウェアはまずハードディスク上のESPパーティションを検索し、そこに保存されている起動ロードプログラム（例：Windows Boot Manager）を読み込み、オペレーティングシステムを開始します。これは精密な鍵であり、システムの起動の扉を開けるもので、これがないと、コンピュータが起動時に混乱し、どこへ向かうべきか分からなくなります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ストレージドライバ&lt;/strong&gt;：ESPパーティションには、システムの起動中に必要なドライバも保存されており、早期起動段階でハードウェアデバイス（例：ハードディスクコントローラ、グラフィックカードなど）が正常に動作するようにし、オペレーティングシステムがスムーズに接管するための基盤を築きます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-空間要請とフォーマット&#34;&gt;2. 空間要請とフォーマット
&lt;/h3&gt;&lt;p&gt;通常、ESP 分割領域の推奨サイズは 100MB ～ 500MB であり、一般的には 200MB 程度を割り当てれば基本的な要件を満たします。ファイルシステム形式は FAT32 である必要があり、これは UEFI ファームウェアが FAT32 形式で起動ファイルを読み取ることができるため、互換性とクロスプラットフォーム性を保証するためです。&lt;/p&gt;
&lt;h2 id=&#34;3-gptパーティションテーブルハードディスクのスマートマネージャー&#34;&gt;3. GPTパーティションテーブル—ハードディスクの「スマートマネージャー」
&lt;/h2&gt;&lt;p&gt;GPT（GUID Partition Table）は、グローバルユニーク識別パーティションテーブルの略で、従来のMBRパーティションテーブルを代替する新しいパーティション方式です。&lt;/p&gt;
&lt;h3 id=&#34;1-メリットの顕著化&#34;&gt;1. メリットの顕著化
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大容量サポート&lt;/strong&gt;: 現在のようなデータ爆発の時代において、大容量ハードディスクが続々と登場しています。GPTパーティションテーブルはMBRの2TBの容量制限を突破し、理論上では9.4ZB（ゼタバイト、1ZB=1024EB、1EB=1024PB、1PB=1024TB）という超大容量ストレージスペースをサポートすることができ、大量データ保存の可能性を開きます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;パーティション数が多い&lt;/strong&gt;: MBRでは最大で4つのパーティションしか区別できないのに対し、GPTは最大128個のパーティションを作成できます。これはユーザーとシステム管理者にとって極めて柔軟性を提供し、複数のシステムパーティション、データパーティションの分割、または特殊な用途のためのパーティションの割り当てなど、あらゆる状況に対応できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;信頼性が高い&lt;/strong&gt;: GPTパーティションテーブルは冗長バックアップメカニズムを採用しており、ハードディスクの頭と尾にそれぞれパーティションテーブルの情報が保存されています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-構造解析&#34;&gt;2. 構造解析
&lt;/h3&gt;&lt;p&gt;GPT 分区表は、保護 MBR (これは従来の BIOS との互換性を保つために保持されている小さな MBR 構造であり、実際のパーティション管理には使用されません)、GPT ヘッダー (GPT パーティション表の基本的な情報（パーティションテーブルのバージョン、パーティション数、パーティションテーブルサイズなど）を格納します) およびパーティション項目配列 (各パーティション項目は、開始セクタ、終了セクタ、パーティションタイプ GUID、パーティションの一意な識別子などの重要な情報を詳細に記録します) など、複数の部分で構成されています。これらの構造が相互に連携し、ハードディスクのスペースを正確に計画および管理します。&lt;/p&gt;
&lt;h2 id=&#34;4-windows-オペレーティングシステム---ユーザーのデジタル相互天地&#34;&gt;4. Windows オペレーティングシステム - ユーザーの「デジタル相互天地」
&lt;/h2&gt;&lt;p&gt;Windows は世界的に広く使用されているオペレーティングシステムであり、人々とコンピューターハードウェア間の親しみやすい橋を築いています。&lt;/p&gt;
&lt;h3 id=&#34;1-espパーティションとgptパーティションテーブルの融合&#34;&gt;1. ESPパーティションとGPTパーティションテーブルの融合
&lt;/h3&gt;&lt;p&gt;UEFIベースで起動するWindowsシステムのインストール中に、インストーラは自動的にESP（EFIシステムパーティション）を作成し、起動ファイルをそこに展開します。同時に、ハードディスクをGPTパーティションテーブル形式で初期化し、システム保留領域（システムキーファイルなどを保存するエリアであり、従来のBIOS下でのブートローダー領域に類似）、Windowsシステムパーティション（Windowsのコアファイルを格納する場所）、およびその他のユーザーが作成したデータパーティションなどを作成します。WindowsはGPTパーティションテーブルを使用して各パーティションを正確に識別し、ESPパーティションとのスムーズな連携により起動し、シームレスなブートと使用体験を提供します。&lt;/p&gt;
&lt;h3 id=&#34;2-システム管理と最適化の活用&#34;&gt;2. システム管理と最適化の活用
&lt;/h3&gt;&lt;p&gt;Windows が実行中に発生する際のディスク管理において、GPT パーティション表の利点を最大限に活用します。例えば、ディスク管理ツールで GPT パーティションを簡単に認識し、ユーザーがパーティションを作成、削除、フォーマット、サイズを変更するなど、さまざまな段階でのデータストレージ要件を満たすことができます。また、システムアップデートやソフトウェアインストールなどのプロセスもパーティション構成と密接に関連しており、適切なパーティション計画はシステムのパフォーマンスと安定性を向上させ、ディスク容量不足やパーティションの混乱によって引き起こされる問題を軽減するのに役立ちます。&lt;/p&gt;
&lt;h2 id=&#34;5-実戦小貼示維持と故障診断&#34;&gt;5. 実戦小貼示：維持と故障診断
&lt;/h2&gt;&lt;p&gt;それらの密接な関係を理解した上で、日々の維持管理と故障診断は、手順に沿って進めることができます。&lt;/p&gt;
&lt;h3 id=&#34;1-ディスクスペース管理&#34;&gt;1. ディスクスペース管理
&lt;/h3&gt;&lt;p&gt;ESPパーティションの空き容量を定期的に確認し、起動項目のソフトウェアを過剰にインストールすることで空き容量が不足するのを防ぎ、システムの起動に影響を与えないようにします。GPTパーティション下のデータパーティションについては、適切なストレージ計画を立て、不要なファイルを適時削除し、単一パーティションが満杯になることでシステム動作に影響がないようにします。&lt;/p&gt;
&lt;h3 id=&#34;2-起動時のトラブルシューティング&#34;&gt;2. 起動時のトラブルシューティング
&lt;/h3&gt;&lt;p&gt;システムが起動しない場合、まずESP（ブートパーティション）が破損しているかファイルが失われているかを確認します。UEFIファームウェアに搭載されている起動オプション修復ツールを使用するか、Windowsのインストールメディアから修復環境に入り、ESPパーティションの起動ファイルを再構築することができます。GPTパーティションテーブルの故障を疑う場合は、DiskGeniusなどの専門的なディスクツールを使用してパーティションテーブルの整合性をチェックし、バックアップされたパーティションテーブル情報を復元して失われたパーティションを見つけ出すことができます。&lt;/p&gt;
&lt;p&gt;ESPパーティション、GPTパーティションテーブル、そしてWindowsオペレーティングシステムは、互いに連携し合う精密なチームのように機能しており、それぞれが独自の専門分野を活かして、私たちが安定した効率的なコンピューター環境を構築するのに貢献しています。これらの仕組みを深く理解することは、システムインストールやメンテナンスにおいて的確に対応できるだけでなく、コンピュータの根本的な動作原理を把握し、デジタル世界を自由に探索するための鍵となります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>GCC、GLIBC および C&#43;&#43; プログラムの互換性に関する深い理解</title>
        <link>https://ttf248.life/ja/p/gcc-glibc-cpp-compatibility/</link>
        <pubDate>Mon, 06 Jan 2025 19:51:16 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/gcc-glibc-cpp-compatibility/</guid>
        <description>&lt;p&gt;C++の開発分野において、GCCとGLIBCは避けて通れない重要な要素であり、プログラムのリリース後の互換性問題も開発者を悩ませる常 occurrenceである。本稿では、その本質を深く分析し、互換性問題の原因と対策を探求する。&lt;/p&gt;
&lt;h2 id=&#34;一gcc強力なコンパイラ基盤&#34;&gt;一、GCC：強力なコンパイラ基盤
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定義と機能&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GCC（GNU Compiler Collection）は、GNUプロジェクトが開発したオープンソースのコンパイラセットです。単なるコンパイラではありません。C、C++、Objective - C、Fortran、Ada、Goなど、主要な言語を幅広くサポートしており、複数の言語を使用したクロスプログラミングのためのワンストップソリューションを提供します。&lt;/li&gt;
&lt;li&gt;C++ を例にとると、クラス、テンプレート、関数オーバーロードなど、複雑な特性を持つソースファイルを記述した際に、GCC は C++ の厳格な構文と意味規則に基づいて、高度な C++ コードを低レベルの機械が理解し実行できる命令列に変換します。このプロセスには、トークン解析、構文解析、意味解析、最適化、コード生成など、複数の詳細な段階が含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一gcc強力なコンパイラ基盤-1&#34;&gt;一、GCC：強力なコンパイラ基盤
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;コンパイル処理の詳細&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前処理段階&lt;/strong&gt;: GCC はまずソースファイルを前処理操作を行います。この過程で、すべての &lt;code&gt;#&lt;/code&gt; で始まるプレフィックスコマンドを処理します。例えば、&lt;code&gt;#include&lt;/code&gt; コマンドは指定されたヘッダーファイル（例：C++ の &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; は入力出力ストリーム操作用）の内容をソースファイルの対応する位置に埋め込みます。これにより、プログラムはヘッダーファイルで宣言されている関数やクラスなどのリソースを使用できるようになります。また、&lt;code&gt;#define&lt;/code&gt; コマンドで定義されたマクロもこの段階で展開して置換されます（例：&lt;code&gt;#define PI 3.14159&lt;/code&gt;）。ソースファイル内のすべての &lt;code&gt;PI&lt;/code&gt; の箇所が &lt;code&gt;3.14159&lt;/code&gt; に置き換えられます。前処理後、ソースファイルは初期的に「拡張」されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;コンパイル段階&lt;/strong&gt;: 前処理されたファイルをコンパイル段階に入れます。GCC はこの段階で C++ 言語標準に基づいて、ソースコードをアセンブリ言語コードに変換します。 コード構造を注意深く検査し、クラスの継承、ポリモーフィズムの実装が正しく行われているか、関数呼び出しの引数パラメータが一致しているかなどを確認します。構文の意味的な誤りを発見すると、直ちにエラーを報告し、コンパイルプロセスを停止します。例えば、関数宣言と定義された引数のリストが一致しない場合、GCC は問題箇所を正確に特定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一gcc強力なコンパイラ基盤-2&#34;&gt;一、GCC：強力なコンパイラ基盤
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;アセンブル段階&lt;/strong&gt;：アセンブラは、前工程で生成されたアセンブリコードを機械語に変換し、&lt;code&gt;.o&lt;/code&gt;という拡張子を持つオブジェクトファイルを作成します。これらのオブジェクトファイルには、マシンが直接実行できるバイナリ命令が含まれていますが、それらは独立して動作するものではなく、通常、完全なプログラムは複数のモジュールで構成され、各モジュール間の関数や変数への参照関係が解決されていないためです。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;リンク段階&lt;/strong&gt;：これは、実行可能ファイルを作成するための最終的なフェーズです。リンカは、複数のオブジェクトファイルと必要なライブラリ（静的ライブラリまたは動的ライブラリ）を統合します。たとえば、C++標準テンプレートライブラリのコンテナクラスを使用する場合、リンク時には対応するライブラリの実装コードを見つけて、&lt;code&gt;vector&lt;/code&gt;、&lt;code&gt;list&lt;/code&gt;などのコンテナの機能を正しく呼び出せるようにする必要があります。これにより、プログラムが実行時に完全な実行可能ファイルが生成されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二glibccプログラム実行の幕後ろ支柱&#34;&gt;二、GLIBC：C++プログラム実行の幕後ろ支柱
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;本質と作用&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;GLIBC（GNU C Library）は、C標準ライブラリのGNUエコシステムにおける具体的な実装です。名前がCを強調していますが、C++プログラムも高度に依存しており、これはC++がCの基礎部分を受け継いでいるためです。大量の基本的な関数を提供し、動的メモリ管理のための&lt;code&gt;malloc&lt;/code&gt;（動的メモリ割り当て）、&lt;code&gt;free&lt;/code&gt;（メモリ解放）といった関数は、C++で動的な配列やオブジェクトを作成する際に不可欠です。また、文字列処理関数である&lt;code&gt;strcpy&lt;/code&gt;（文字列コピー）、&lt;code&gt;strcat&lt;/code&gt;（文字列連結）も、C++にはより高度な&lt;code&gt;string&lt;/code&gt;クラスが存在しても、低レベルでのCコードとのインタフェースや、最大限のパフォーマンスを追求する場合に頻繁に使用されます。さらに、標準入出力関数である&lt;code&gt;printf&lt;/code&gt;、&lt;code&gt;scanf&lt;/code&gt;なども、C++初期の開発や、パフォーマンスに敏感で簡潔さを重視する場面でよく見られます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二glibccプログラム実行の裏側を支える基盤&#34;&gt;二、GLIBC：C++プログラム実行の裏側を支える基盤
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;オペレーティングシステムとの連携&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;GLIBCは、オペレーティングシステムとアプリケーション間の重要な橋渡し役を果たします。Linuxシステムにおいて、C++プログラムがシステムコールを発行する（例えば、ファイルを開く&lt;code&gt;open&lt;/code&gt;関数を使用し、その裏側でGLIBCの実装に依存する場合）、GLIBCはプログラムの要求を、オペレーティングシステムカーネルが定めた方法でラッピングし、カーネルに渡します。カーネルが処理を完了すると、GLIBCは結果をアプリケーションに戻します。これにより、アプリケーションはオペレーティングシステムの低レベルな複雑なシステムコールインターフェースの詳細を理解する必要なく、ファイルシステム、ネットワーク、プロセス管理などのさまざまなシステムリソースを簡単に利用できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3cプログラム公開後の互換性問題の分析&#34;&gt;3、C++プログラム公開後の互換性問題の分析
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;GLIBCバージョンの差異が引き起こす互換性の苦境&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;様々なLinuxディストリビューションは、それぞれ異なるバージョンのGLIBCを搭載しています。 C++プログラムが高バージョンGLIBC環境下でコンパイルされた場合、無意識にそのバージョンで新しく追加された関数特性を利用したり、より最適化された関数実装に依存したりすることがあります。例えば、新しいGLIBCバージョンではメモリ割り当てアルゴリズムが改善されており、プログラムが実行時に頻繁にこの新しいアルゴリズムを活用して性能を向上させているとします。このようなプログラムを低バージョンGLIBCシステムに移植した場合、対応する関数が見つからなくなる（低バージョンでその関数が導入されていないため）か、関数の動作が異常になる（古いバージョンの関数実装のロジックと新しいバージョンでずれがあるため）、といった問題が発生し、プログラムがクラッシュしたり、結果が誤ったりすることがあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;iii-c-プログラム公開後の互換性問題の分析&#34;&gt;III. C++ プログラム公開後の互換性問題の分析
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;コンパイラの違いによる互換性の脆弱性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;同じ GCC コンパイラを使用しても、異なるバージョンの GCC はコード生成、標準ライブラリのサポート、C++ 特性の実装の詳細において差異があります。より新しい GCC バージョンは C++ 最新規格（例：C++20 の新機能モジュール、コルーチンなど）を完全にサポートし、プログラムがこれらの最先端特性を使用し、古いバージョンの GCC でコンパイルすると、コンパイラはこれらの新構文構造を認識できずエラーが発生します。構文エラーがない場合でも、異なる GCC バージョン間の最適化戦略の違いにより、生成される機械コードの実行効率やメモリ使用量において大きな違いが生じることがあり、特にパフォーマンスが重要な環境では、プログラムが異なる環境で異なった動作をする可能性があります。 - &lt;strong&gt;システムアーキテクチャの違いがもたらす課題&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;C++プログラムは、x86、ARM、PowerPCなどの異なるハードウェアシステムアーキテクチャ上で実行する必要がある可能性がある。異なるアーキテクチャにはそれぞれ独自の命令セット、メモリレイアウト、およびデータアライメント要件が存在する。データアライメントの例を挙げると、x86アーキテクチャで正常に動作する構造体データのストレージレイアウトは、ARMアーキテクチャでは、アライメント規則の違いによりメモリアクセス例外が発生し、プログラムエラーにつながる可能性がある。さらに、GCCが異なるアーキテクチャ向けにコンパイルを行う際に生成される機械コードの差異が大きく、プログラム中にハードコーディングされたアーキテクチャ固有の命令や仮定がある場合、クロスアーキテクチャ実行時に故障が頻発する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四互換性問題への対処戦略&#34;&gt;四、互換性問題への対処戦略
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;静的リンクライブラリの活用&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;GLIBCなどのプログラムが依存するライブラリコードを、実行ファイルに直接組み込む静的リンクライブラリの使用を検討してください。これにより、プログラムは実行時に特定のターゲットシステムのGLIBCバージョンに依存しなくなり、GLIBCバージョンの不一致による問題を効果的に回避できます。ただし、静的リンクは実行ファイルのサイズを大幅に増加させるため、ストレージリソースが限られた環境では利点と欠点を比較検討する必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;コンテナ化デプロイメント&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Dockerなどのコンテナ技術を利用して、C++プログラムとその必要な実行環境（特定のバージョンのGCC、GLIBCなど）を独立したコンテナ内にカプセル化します。どのようなベースOSにデプロイする場合でも、コンテナ内部の環境はプログラム開発時の一貫性を維持し、プログラムが期待どおりに動作することを保証することで、クロス環境デプロイの複雑さを大幅に軽減します。 - &lt;strong&gt;互換性テストと継続的統合&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;包括の互換性テスト体系を構築し、GLIBC の異なるバージョン、GCC の異なるバージョン、および一般的なシステムアーキテクチャを網羅する。開発プロセスにおいて、継続的統合ツールを用いて定期的に複数の環境で自動テストを実施し、互換性の問題が発見された場合は迅速に修正することで、潜在的な問題をその発生初期段階で排除し、プログラムのリリース後の安定性を保証する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四互換性問題への対処戦略-1&#34;&gt;四、互換性問題への対処戦略
&lt;/h2&gt;&lt;p&gt;上記をまとめると、GCC と GLIBC の仕組みを深く理解し、C++ プログラムの互換性問題の本質を見抜き、柔軟な対応策を用いることは、すべての C++ 開発者が堅牢かつクロスプラットフォームなアプリケーションを構築するための必須スキルです。そうすることで、私たちの C++ 作品が多様な技術環境において無障害に展開されます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Windowsに付属のディスククリーンアップツール：ストレージ</title>
        <link>https://ttf248.life/ja/p/windows-disk-cleanup-storage/</link>
        <pubDate>Mon, 06 Jan 2025 19:29:45 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-disk-cleanup-storage/</guid>
        <description>&lt;p&gt;元のバージョンがいつからなのかは不明ですが、Windows 11 ではディスククリーンアップツールが大幅に改善され、よりスマートになっています。&lt;/p&gt;
&lt;p&gt;主な理由は、これが公式のツールであり、ファイルを誤って削除したり、広告が表示されたり、ポップアップが現れたり、バックグラウンドプロセスが実行されたり、不要なものが一切含まれていないことです。&lt;/p&gt;
&lt;p&gt;Windows 11 では、「設定」-「システム」-「ストレージ」-「一時ファイル」からディスククリーンアップツールを開くことができます。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;20250106194453.png&#34; &gt;ストレージインターフェースの画像&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一般的なユーザーは「推奨のクリーニング」を選択するだけで、システムは使用状況に基づいていくつかの提案を行います。&lt;/p&gt;
&lt;p&gt;筆者である私のような開発者は、ディスク上に多くの一時ファイルがあるため、「一時ファイル」を選択し、Visual Studio や Windows Update などの一時ファイルを多く含んでいます。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;Snipaste_2024-12-19_13-39-51.png&#34; &gt;一時ファイルの画像&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Docker 国内イメージプロキシが失敗しました。</title>
        <link>https://ttf248.life/ja/p/docker-domestic-image-proxy-failure/</link>
        <pubDate>Sat, 04 Jan 2025 18:29:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/docker-domestic-image-proxy-failure/</guid>
        <description>&lt;p&gt;国内サーバーへのDockerデプロイで、会社がレジストリを提供していない場合、開発者が最初にやるべきことは、国内のレジストリミラーを設定することです。&lt;/p&gt;
&lt;p&gt;幸いにも今日、サーバー1台にミラー設定を完了しましたが、イメージの取得中に常に取得できないという問題が発生しました。&lt;/p&gt;
&lt;p&gt;エラーメッセージ：&lt;code&gt;Error response from daemon: Get &amp;quot;https://registry-1.docker.io/v2/&amp;quot;: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2025年1月6日、隔日のうちにすべてのサーバーが復旧しました。この件は全く話題になりませんでした。国内のすべてのレジストリミラーがダウンしていました&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;障害の切り分けと修復試行&#34;&gt;障害の切り分けと修復試行
&lt;/h2&gt;&lt;p&gt;当初、別のミラー加速アドレスに切り替えて問題を解決することを期待しましたが、結果は عكسになりました。
その後、ローカルDNS設定を修正し、ネットワーク解析の側面から突破口を探るべく試みましたが、結局、デバッグを行った結果、障害は依然として存在しました。
この時点で、ローカルネットワークの安定性は疑念を抱き始め、そこで断行したのは、可能性のあるローカルネットワーク障害点を回避するために携帯電話のテザリングに切り替えることでした。しかし、その結果も落胆するものであり、問題の改善の兆候は見られませんでした。&lt;/p&gt;
&lt;h2 id=&#34;問題の蔓延&#34;&gt;問題の蔓延
&lt;/h2&gt;&lt;p&gt;現在、国内に&lt;strong&gt;数台のサーバーがデプロイされており、すべてDocker環境がインストールされています&lt;/strong&gt;。これらのサーバーからイメージをプルすることを試みましたが、例外なく失敗し、返ってくるエラーメッセージも一様です。これは問題が特定のデバイスに限定されていないことを示唆しています。&lt;/p&gt;
&lt;p&gt;さらに調査したところ、イメージレジストリエージェントが瞬く間に停止していることが判明しました。この緊迫した状況で、迅速に海外のサーバーを使用して試みましたが、幸いにもイメージのプルはここで正常に戻りました。これは問題が国内のネットワークリンクまたは関連設定にある可能性が高いことを意味します。&lt;/p&gt;
&lt;h2 id=&#34;戦略修正迂回戦術&#34;&gt;戦略修正：迂回戦術
&lt;/h2&gt;&lt;p&gt;国内での直接リポジトリ取得の経路が重く制限される中、海外のリポジトリは正常にアクセスできる状況を鑑み、プロジェクトを迅速に進めるため、迂回戦術を採用することを決定しました。まず、国外サーバーに切り替えて必要なイメージを取得し、その後、国内イメージレジストリにプッシュすることで、「データブリッジ」を構築します。
同時に、Dockerfileファイルの内容を修正し、イメージのURLを国内環境に適したアドレスに変更した後、再度イメージをビルドして、最終的に成功裏にデプロイしました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>野蛮資本時代の終焉：英雄聯盟eスポーツ時代終了</title>
        <link>https://ttf248.life/ja/p/end-of-league-of-legends-era/</link>
        <pubDate>Tue, 31 Dec 2024 07:19:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/end-of-league-of-legends-era/</guid>
        <description>&lt;p&gt;eスポーツ産業は、過去10年以上で急速な発展を遂げ、世界的に無視できない文化現象となっています。特に「League of Legends」（英雄伝説）（以下LOL）を代表するMOBAジャンルのゲームは、プレイヤーに競技の楽しさを提供するだけでなく、資本に強力な推進力を与え、一連のエスポーツプラットフォームやイベントの活発な発展を促進しました。しかし、これらすべてが資本の流入とエンターテイメント産業全体の台頭に伴い、徐々に衰退へと向かっています。パンダTVの隆盛と崩壊、斗鱼（ドウユー）と虎牙（ホア）の競争は、「ワイルドキャピタル時代」の終焉を象徴し、eスポーツ業界の天時地利人和の変化も始まっています。&lt;/p&gt;
&lt;h2 id=&#34;第1章eスポーツの台頭と資本の注入&#34;&gt;第1章：eスポーツの台頭と資本の注入
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 初期eスポーツ：草根からプロ化へ&lt;/strong&gt;
初期のeスポーツ産業は、特に中国市場において比較的草根的なスタートを切りました。多くのプレイヤーがゲームへの情熱を活かして、『星の衝突』やDotaなどのゲームで競技に参加しました。しかし、eスポーツの実質的な台頭は、League of Legends（英雄聯盟）のリリースとプロモーションによって始まりました。2011年にLeague of Legendsが中国市場に正式に参入した後、eスポーツはニッチなコミュニティから大衆文化の一部へと徐々に発展していきました。特に2013年以降、LPL（中国プロリーグ）が段階的に形成され、『英雄聯盟』が中国eスポーツ産業の柱となりました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2 資本の疯狂な流入：熊猫TVとeスポーツライブ配信プラットフォームの台頭&lt;/strong&gt;
2015年は、中国eスポーツ業界における分岐点となりました。資本の流入により、eスポーツは単なる競技大会からより巨大な産業チェーンへと進化しました。 パンダTVを代表的な例として、資本過剰の産物となった。王思聰（熊猫ライブの創業者の一人）が投資したパンダTVは、革新的なコンテンツと巨額の投資により、大量の視聴者やユーザーを引き付け、急速に台頭した。しかし、これはまさに資本の「蛮横」流入の典型例であり、資本が市場を追い求める際に、忍耐力や長期的な視点が欠如することがある。パンダTVの資金と人的資源への投資は、短期的に一定の成果を上げたものの、管理問題と過度な資本依存による高熱により、2019年に破産宣告を迎えた。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3 直播プラットフォーム競争：斗鱼と虎牙の「資本戦争」&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;第壹章eスポーツの台頭と資本の流入&#34;&gt;第壹章：eスポーツの台頭と資本の流入
&lt;/h2&gt;&lt;p&gt;熊猫TVの衰退は、eスポーツライブ配信業界の衰退を引き起こさなかった。むしろ、斗鱼（ドウユ）や虎牙（コウガ）といったプラットフォームの台頭を促した。斗魚と虎牙という二大ライブ配信プラットフォームは急速にeスポーツ業界のリーダーとなり、互いの競争も激化の一途を辿っている。斗魚は当初、『英雄聯盟』（ヨウシンリョウゲイル：League of Legends）プロリーグの放送や、トップレベルのストリーマーへの契約を通じて、eスポーツライブ配信の基準となった。一方、虎牙はeスポーツイベントへの投資を拡大し、自社のプラットフォームにおける多角的な展開を進めることで、斗魚との差を徐々に縮小していった。&lt;/p&gt;
&lt;p&gt;この過程において、資本が再び大きな役割を果たした。斗魚は2018年に上場に成功し、虎牙も同年にIPO（株式公開）を行った。資本の急速な流れは業界の高集中を引き起こし、プラットフォーム間におけるストリーマーや著作権といった分野での激しい競争を生み出し、「資本戦争」と呼ばれる状況が形成された。&lt;/p&gt;
&lt;h2 id=&#34;第2章汎娯化とeスポーツの融合&#34;&gt;第2章：汎娯化とeスポーツの融合
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;2.1 汎娯化潮流：資金の流れが多様なエンターテイメントプロジェクトへ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;資本がeスポーツ業界に注力するにつれて、eスポーツプラットフォームの内容は汎娯化を遂げている。eスポーツ配信者たちは、試合解説や大会生放送だけでなく、歌唱、ダンス、ライブインタラクションなど、さまざまなエンターテイメント形式へと展開している。プラットフォーム上のコンテンツはより豊富になり、eスポーツを核としつつ、多様なエンタメ要素を含むエコシステムが徐々に形成されている。&lt;/p&gt;
&lt;p&gt;しかし、汎娯化は問題も引き起こしている——eスポーツ本来のゲーム文化は徐々に後退し、エンターテイメント至上主義の流れに取って代わられている。この傾向により、かつてeスポーツを深く愛してきた観客たちは離脱する感情を抱き、資本もより多くの目を他のエンタメ分野へと向け始めている。 資本の過剰流入と利潤性がeスポーツ産業の本質を徐々に曖昧にし、本来競技を核とした価値理念が弱体化している。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 汎娯楽業界の台頭：資本の撤退と転換&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ショート動画プラットフォーム、ライブ配信プラットフォーム、娱乐圈などの汎娯楽産業の台頭に伴い、資本はeスポーツからより広範なエンターテイメントコンテンツへと資金をシフトさせている。この過程で、テンセント、アリババ、バイト跳動などの巨大企業も、eスポーツプロジェクトを単なる収益源としてではなく、映画、音楽、ショート動画などの分野への投資を拡大している。特にバイト跳動の台頭は、抖音などのショート動画プラットフォームの爆発的な成長により、eスポーツが他のエンターテイメントコンテンツに覆い隠されることになった。&lt;/p&gt;
&lt;h2 id=&#34;第３章英雄聯盟の青黄不接時代紅利の衰退&#34;&gt;第３章：英雄聯盟の「青黄不接」：時代紅利の衰退
&lt;/h2&gt;&lt;p&gt;2011年に《英雄聯盟》（League of Legends）が中国市場に参入以来、それは中国eスポーツ業界における代名詞となり、数多くのプロゲーマー、チーム、大会を成就させ、巨大なeスポーツ産業を生み出した。しかし、十数年を経て，《英雄聯盟》は中国eスポーツのリーダー的存在として、「青黄不接」（黄昏の兆し）の段階に入っている。特に近年では，《英雄聯盟》の影響力は徐々に低下し、顕著な衰退の兆候が見られる。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 プレイヤー群の「断層」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最も顕著な変化はプレイヤー群の断層である。当初、eスポーツの急速な発展は大量の青少年プレイヤーによる支持に依存しており、その多くが《英雄聯盟》を通じてプロゲーマーや観客となった。 その世代のネット依存少年は、ほぼ「時代紅利」の下で育ってきた。彼らはLoLがもたらす競技魅力に没頭し、それが業界全体の急速な拡大を促した。しかし、時間の経過とともに、これらのプレイヤーたちは徐々に成長し、社会へと入り、他の生活や職業へと転向していった。同時に、新世代の若手プレイヤーは、かつてのようなLoLへの熱意はなく、eスポーツの視聴者層には明確な年齢偏差と興味の低下が見られた。&lt;/p&gt;
&lt;h2 id=&#34;第3章英雄聯盟の青黄不接夕陽紅時代的紅利が衰退&#34;&gt;第3章：英雄聯盟の「青黄不接」（夕陽紅”）：時代的紅利が衰退
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;3.2 ゲームコンテンツの「疲労」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《英雄聯盟》は、何度もアップデートと改版を経て、依然として一定の競技魅力を保っているものの、ゲーム自体のコンテンツイノベーションはやや力不足に感じられる。毎年発表されるバージョン更新、ヒーローバランス調整、新ファビールの導入などが、根本的にプレイヤーが求める新鮮さへの欲求を解消することができていない。同時に、MOBAジャンルの市場は飽和状態となり、他のタイプのゲーム（《王者荣耀》や《和平精英》など）が急速に台頭し、かつて《英雄聯盟》の顧客層であったプレイヤーを奪い取っている。このような競争状況下で，《英雄聯盟》は常に「追随者」という立場に置かれている。&lt;/p&gt;
&lt;h2 id=&#34;結論eスポーツ産業の未来はどこへ向かうのか&#34;&gt;結論：eスポーツ産業の未来はどこへ向かうのか？
&lt;/h2&gt;&lt;p&gt;eスポーツ産業はまるで空にそびえ立つ高楼のように、インターネット業界における過剰な資金が新たなトレンドを求めてさまよう中で生まれたものだ。そして、eスポーツ産業はそのターゲットの一つとなった。国内の人口ボーナスを背景に、eスポーツ産業は短期間で目覚ましい成功を収めたものの、それは確固たる基盤の上に築かれたものではない。資本過多、人材不足、ゲームコンテンツの衰退といった問題が、eスポーツ産業の健全な発展を阻害している。 大学時代以前は、ゲームをプレイする機会があまりなく、LoL（リーグ・オブ・レジェンド）を盟主として一世代の人々の成長を共に見てきたと言えるだろう。決勝戦を何本も見たが、傍観者として見ているだけでは、中国と韓国の選手、特にFakerのようなトッププレイヤーと比較すると、国内の選手は大会期間中常に緊張感に包まれているように感じた。私も選手の心理的なプレッシャーが大きいことは理解しているが、この業界は10年以上も発展してきたにもかかわらず、選手の心理的な問題はチームによって十分に重視されておらず、その点は残念だった。結局のところ、国内の戦略や戦術は依然として選手自身の才能に依存していると言えるだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ゲームから家庭へ：私たちは大人になっていくにつれて仮想世界から徐々に離れてしまう理由</title>
        <link>https://ttf248.life/ja/p/from-games-to-family-why-we-leave-virtual-worlds-as-we-grow-up/</link>
        <pubDate>Tue, 31 Dec 2024 07:11:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/from-games-to-family-why-we-leave-virtual-worlds-as-we-grow-up/</guid>
        <description>&lt;p&gt;ゲームを一番楽しかったのはいつだろうか。子供の頃、家にあるテレビで隠れて戦車戦やスーパーマリオ、魂斗羅をプレイしたり、親戚の甥っ子と家にあるパソコンで帝国時代をプレイしたり…大学に進学してからも、友人と一緒に鬼泣やリーグ・オブ・レジェンドをプレイしたことなど。&lt;/p&gt;
&lt;p&gt;子供の頃は、生活に煩わしさがないから、ゲームをしている時は本当に全身全霊で没頭する。その没入感は、大人になってからもう二度と見つけられないものだ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;時代とともに社会が発展するにつれて、かつて仮想世界で活躍していた我々は徐々に気づき、かつて私たちを歓びと競争に満たしてくれたゲームプラットフォームが私たちの生活から遠ざかっていることに気づいた。ゲームのソーシャルリンクが断絶され、プレイヤーたちが徐々に脱落していくのは、技術の進歩やゲーム自体の交代だけでなく、私達のライフスタイルの変化も伴うのだ。&lt;/p&gt;
&lt;h2 id=&#34;ゲームソーシャルの消失仮想世界と現実世界の拉锯戦&#34;&gt;ゲームソーシャルの消失：仮想世界と現実世界の拉锯戦
&lt;/h2&gt;&lt;p&gt;多くの人の青春時代において、ゲームは単なる娯楽ではなく、一種の社交手段であった。人気のあるマルチプレイヤーオンラインゲームは、ゲーム内での挑戦や競争を提供するだけでなく、世界中のプレイヤーを結びつけ、個々の仮想的なソーシャルグループを構築した。その時代においては、友達と一緒に出廃合したり、チームを組んでPK（Player vs Player）したりすることが生活の一部となっていた。深夜のボイスチャットで互いに日常を共有する時間は、私たちの記憶の中に刻まれていた。&lt;/p&gt;
&lt;p&gt;しかし、時間の経過とともに、ます来越多くのプレイヤーが、このような仮想社交体験に永続的な魅力がないことに気づき始めた。ゲームのアップデートやプラットフォームの多様化に伴い、プレイヤーたちはゲーム外のソーシャルグループでより多くのインタラクションを見つけるようになった。&lt;/p&gt;
&lt;h2 id=&#34;遊びと責任成年後のライフスタイルの変化&#34;&gt;遊びと責任：成年後のライフスタイルの変化
&lt;/h2&gt;&lt;p&gt;成人を迎えると、生活における責任は徐々に増えていく。かつて多くの若者がゲームに時間を費やしていたが、キャリアの開始やパートナーとの共同生活、家族の形成などにつれて、以前は不可欠に見えた娯楽活動は、現実生活の責任によって押し出されていく。結婚、出産、さらには親の介護といった重大な責任を抱えながら、人々は時間とエネルギーについて選択を迫られる。&lt;/p&gt;
&lt;p&gt;ゲームは過去のものとなり、その代わりに家庭生活の優先度が置かれるようになる。かつてゲームの中で「戦い」をしていた若者たちは、次第に現実での生活こそが最も重要な課題であることに気づく。特に子供を持つようになると、生活の中心は完全に家庭へと偏り、ゲームは生活の端っこに押し込められていく。&lt;/p&gt;
&lt;h2 id=&#34;家庭から暮らしへ生活の変化が私たちの娯楽にどのような影響を与えているのか&#34;&gt;家庭から暮らしへ：生活の変化が私たちの娯楽にどのような影響を与えているのか
&lt;/h2&gt;&lt;p&gt;私たちの人生経験において、家庭は最も重要な要素の一つです。そして、家庭生活に入ると、時間とエネルギーの配分はより具体的かつ限られたものになります。子供を世話したり、パートナーと過ごしたりするために、多くの若い保護者は、以前熱心に取り組んでいたゲームに十分な時間を費やすことができなくなっていることに気づきます。場合によっては、彼らはゲームのアップデートや新しさにも関心を失うことがあります。徐々に、ソーシャルプラットフォームやオフラインでの友人との交流が、より多くの人々のコミュニケーションの選択肢として選ばれるようになりました。&lt;/p&gt;
&lt;p&gt;これは、私たちが完全に娯楽活動を放棄したという意味ではなく、現在の生活段階に合った方法を選択したことを意味します。&lt;/p&gt;
&lt;h2 id=&#34;バーチャル世界の別れ私たちがこの変化をどのように捉えるのか&#34;&gt;バーチャル世界の別れ：私たちがこの変化をどのように捉えるのか？
&lt;/h2&gt;&lt;p&gt;かつてゲームに没頭していた人にとって、ゲームとの交流の終焉は決して容易ではありません。かつて私たちに喜びと達成感をもたらした仮想世界は、すでに私たちの記憶の一部となっているからです。しかし、別れは完全に断ち切ることを意味するのではなく、生活の変化に伴い、私たちは異なる選択をし、現実生活における自分の役割を調整していくのです。年齢とともに、私たちは青年の頃から成熟した大人へと成長し、ゲームは依然として価値があるものの、もう生活の主旋律にはなり得ません。&lt;/p&gt;
&lt;p&gt;実際、この変化は、人間の適応力の側面を示すものです——私たちが異なる段階に応じて、注意点やライフスタイルを調整できるということを示しています。&lt;/p&gt;
&lt;h2 id=&#34;将来のゲームもしかしたら帰属意識の新たな波が到来するかもしれない&#34;&gt;将来のゲーム：もしかしたら「帰属意識」の新たな波が到来するかもしれない
&lt;/h2&gt;&lt;p&gt;もちろん、社会の発展と技術の進歩に伴い、ゲームの形式や内容は絶えず進化しています。例えば、現在のオンラインマルチプレイヤーゲームは、よりリラックスした形へと進化しつつあり、家族や親子関係を重視したデザインのものも登場しています。未来には、家庭生活にうまく組み込み、プレイヤーに健康でバランスのとれたソーシャル体験を提供できる、さまざまなゲーム形式が登場するかもしれません。&lt;/p&gt;
&lt;p&gt;多くの人が「子供の頃のゲーム」について語るように、将来もまた、ふとした瞬間に過去のゲームを拾い上げ、新たな理解と洞察をもって仮想世界へと再び入り込むのではないかと想像できます。&lt;/p&gt;
&lt;h2 id=&#34;変化を続けながらも愛は変わらない&#34;&gt;変化を続けながらも、愛は変わらない
&lt;/h2&gt;&lt;p&gt;ゲームであろう家であろう、人生の移り変わりは常に私たちと共に成長を遂げてきました。その過程で、仮想世界が私たちに与えてくれる無限の喜びと刺激に気づきつつも、最終的には現実へと戻り、最も温かい場所——家庭へと帰っていくことを認識します。ゲームから離れることへの後悔はありません。なぜなら、人生のあらゆる段階には独自の意義があるからです。そしてこれらの変化こそが、私たちをより豊かな人間の一部たらしめているのです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>香港証券取引所、仮想通貨の発展史</title>
        <link>https://ttf248.life/ja/p/hong-kong-exchange-virtual-currency-history/</link>
        <pubDate>Tue, 31 Dec 2024 07:00:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-exchange-virtual-currency-history/</guid>
        <description>&lt;p&gt;王様再びがアメリカ大統領に選出され、仮想通貨も再び大衆の目に晒されることになった。香港証取引所（HKEX）は、関連業務の積極的な展開を行っており、ここではその概要を簡単に記録する。&lt;/p&gt;
&lt;p&gt;関連契約リストの詳細を確認すると、当初導入されたのは現物ではなく先物を意味しており、これは妥当である。なぜなら、先物の流動性が優れており、機関投資家の参入を容易にするためだ。その後導入された現物ETFも、ETFがより受け入れられやすい投資ツールであることから、妥当な選択だった。&lt;/p&gt;
&lt;h2 id=&#34;仮想通貨リスト&#34;&gt;仮想通貨リスト
&lt;/h2&gt;&lt;p&gt;香港証取引所の市場データには、契約が仮想通貨であるかどうかを示す識別子が提供されていません。しかし、契約名から判断することができます。公式の取引リストには、対応するサブカテゴリ&lt;code&gt;virtualasset&lt;/code&gt;が提供されています。
&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2022年12月16日&#34;&gt;2022年12月16日
&lt;/h2&gt;&lt;h3 id=&#34;香港证券交易所推出亚洲首批加密资产etf&#34;&gt;香港证券交易所推出亚洲首批加密资产ETF
&lt;/h3&gt;&lt;p&gt;香港证券交易和结算所有限公司（香港交易所）今日（星期五）宣布，亚洲首批加密资产ETF上市，进一步扩大其产品生态圈，为香港及国际投资者提供更多选择。&lt;/p&gt;
&lt;p&gt;今天上市的两只新ETF——南方东英比特币期权ETF（股份代号：3066）和南方东英以太坊期权ETF（股份代号：3068）由南方东英资产管理有限公司管理，分别追踪在芝加哥商品交易所（芝商所）交易的标准化、现金结算的比特币期权合约及以太坊期权合约。&lt;/p&gt;
&lt;p&gt;香港交易所首席运营总监兼市场联席主管姚嘉仁表示：“今天上市的两只加密资产ETF，为香港日益丰富多元的交易所买卖产品生态圈锦上添花。” これらの新製品は、投資家がデジタル資産への投資に参加する機会を初めてアジアで提供し、デジタル経済に対する当社の関心と市場の需要を反映しています。「今後数か月で、テーマ型ETFやデジタル資産の新商品がさらに登場することを楽しみにしています。」&lt;/p&gt;
&lt;p&gt;ETFは香港証取引所の市場開発において最も急速に成長している事業部門であり、製品の種類は2022年に継続的に拡大し、多様化しており、その中でも今年中に初のメタバースETF、初のカーボン・オプションETF、初のブロックチェーンETFを発売するとともに、初めてETFを滬深港通に組み込みました。&lt;/p&gt;
&lt;h3 id=&#34;香港交易所はアジア初の暗号資産etf上場を歓迎&#34;&gt;香港交易所はアジア初の暗号資産ETF上場を歓迎
&lt;/h3&gt;&lt;p&gt;また、香港証券取引所における買売り製品（ETP：ETFおよびレバレッジ型・インバース型製品を含む）の今年1月から11月の平均日次取引額は118億元で、前年同期比50%の大幅増加を記録し、ETPの人気がますます高まっていることを反映しています。2022年11月時点で、香港証券取引所に上場しているETPの総数は168隻で、時価総額は3,735億元に達しています。&lt;/p&gt;
&lt;h2 id=&#34;2024年4月30日&#34;&gt;2024年4月30日
&lt;/h2&gt;&lt;h3 id=&#34;香港交易所が初の仮想資産現物etf上場を歓迎&#34;&gt;香港交易所が初の仮想資産現物ETF上場を歓迎
&lt;/h3&gt;&lt;p&gt;香港取引結算有限公司（香港証券取引所）は本日（火曜日）、アジア初の仮想資産現物ETFの上場を歓迎しました。これにより、香港市場の製品の種類が増加し、投資家にとってより豊富な選択肢を提供するとともに、香港をアジア有数のETF市場としての地位を確固たるものにしています。&lt;/p&gt;
&lt;p&gt;香港証券取引所の証券プロダクト開発責任者であるロバート・イン氏は、「本日上場された仮想資産現物ETFは、香港証券取引所の多様かつ活発なETF市場生態圏を豊かにし、投資家にとって新たな資産クラスへの投資機会を提供します。1年前の成功に続き、アジア初の仮想資産現物ETFは、香港証券取引所の売買製品の種類と流動性をさらに向上させます。国際的な市場において、より多くの新製品を紹介するために、市場関係者との緊密な連携を期待しています。」と述べています。 「初の仮想資産先物ETFが2022年に上場後、投資家の関心を集め、活発な取引が行われました。香港で上場している3つの仮想資産先物ETFの日平均取引量は、2023年の8,900万から、2024年第1四半期には5億1,300万へと増加し、同時に5.29億元の資金流入も引き寄せました。&lt;/p&gt;
&lt;p&gt;香港証券取引所における商品売買（ETF、レバレッジ製品、逆レバレッジ製品を含む）は、香港証券取引所の成長最速の市場の一つであり、過去1年で製品の種類が着実に増加しています。2023年と2024年第1四半期に上場された16隻のETFには、アジア太平洋地域の初のサウジアラビアETF、香港における初のデリバティブ付有証券（ETF）などが含まれており、現在、香港で上場しているETFは合計179隻となっています。」&lt;/p&gt;
&lt;h2 id=&#34;2024年10月28日&#34;&gt;2024年10月28日
&lt;/h2&gt;&lt;h3 id=&#34;香港交易所が仮想資産指数シリーズを導入&#34;&gt;香港交易所が仮想資産指数シリーズを導入
&lt;/h3&gt;&lt;p&gt;香港取引及結算有限公司（香港交易所）は本日（月曜日）、2024年11月15日に香港証券取引所仮想資産指数シリーズ（以下、「指数シリーズ」という）を導入することを発表しました。これは、急速に成長している仮想資産のカテゴリーに対し、信頼できる基準価格を提供し、香港がアジアにおける主要なデジタル資産センターとしての発展を支援します。&lt;/p&gt;
&lt;p&gt;この指数シリーズは、アジア時間におけるビットコインとイーサリアムの定価に関する透明性と信頼性の高い基準を提供することを目指しており、仮想資産に対する統一された参照価格を提供することで、グローバル取引所間の価格変動を解消することに貢献します。&lt;/p&gt;
&lt;p&gt;香港交易所グループ最高経営責任者陳翊庭氏は、「地域内におけるこの急速に成長している資産カテゴリーへの需要に応えることを嬉しく思います。」と述べました。 透明かつ信頼性の高いリアルタイム指標を提供することで、投資家が賢明な投資判断を下せるよう支援し、仮想資産の生態系の健全な発展を支え、香港を国際金融の中心としての地位を確固たるものにしたいと考えております。&lt;/p&gt;
&lt;p&gt;この指数シリーズは、香港証券取引所が新興分野を探求する一環であり、一方では香港金融技術（フィンテック）の発展を支援すると同時に、投資家が常に変化する市場環境において重要な基準ツールと解決策を提供します。&lt;/p&gt;
&lt;p&gt;指数シリーズには、ビットコインおよびイーサリアムのレファレンス指数、および為替レートを参照するものを含みます。&lt;/p&gt;
&lt;h3 id=&#34;香港交易所將推出虛擬資產指數系列&#34;&gt;香港交易所將推出虛擬資產指數系列
&lt;/h3&gt;&lt;p&gt;基準指数以比特币或以太币的24小时交易量加权平均的现货价格为基础，并依据多家主要虚拟资产交易所的汇总市场价格计算，且即时以美元计价。而参考汇率是为金融产品结算而设计，于香港时间每日下午4:00计算。&lt;/p&gt;
&lt;p&gt;该指数系列将成为香港开发的第一個符合欧盟标准法规（BMR）的虚拟资产指数系列，由位于英国注册的基准管理机构与虚拟资产数据及指数提供商 CCData 共同管理和计算。&lt;/p&gt;
&lt;p&gt;香港特别行政区政府于2022年发布了关于虚拟资产发展的政策声明，希望在香港培育一个充满活力的虚拟资产产业和生态圈。 香港証券取引所の仮想資産指数シリーズの発表は、リアルタイムデータとアジア時間における日次参考価格を提供することで、一般の人々が仮想資産投資トレンドをより深く理解するのに役立ちます。&lt;/p&gt;
&lt;p&gt;この指数シリーズのデザインおよび計算方法に関する詳細については、必要に応じて公開されます。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>価格が下がった、価格が下がった、国内の超大型ETFが大量に価格調整を行った。</title>
        <link>https://ttf248.life/ja/p/etf-fees-cut-china/</link>
        <pubDate>Thu, 21 Nov 2024 03:08:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/etf-fees-cut-china/</guid>
        <description>&lt;p&gt;華泰柏瑞沪深300ETFなどに関する公告で、総合手数料を同業他社最低档に引き下げました。&lt;/p&gt;
&lt;p&gt;2024年11月19日、華泰柏瑞基金は、投資家および資産管理ニーズに応えるため、&lt;code&gt;11月22日から&lt;/code&gt;、華泰柏瑞沪深300ETFとその関連ファンドの運用管理手数料および信託手数料を調整し、関連する基金契約の内容を修正しました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;調整後、華泰柏瑞沪深300ETFとその関連ファンドの年間運用管理手数料は0.15%に、年間信託手数料は0.05%にそれぞれ引き下げられ、すべて指数連動型ファンドの最低档手数料と同等となりました。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ほぼ同時期、業界規模上位の華夏沪深300ETF、華夏上證50ETF、南方中证500ETF、嘉实沪深300ETF、易方达创业板ETFなども管理手数料および信託手数料を引き下げ、手数料はすべて0.15%と0.05%に設定されました。 これまでの多くのETFの減価金政策とは異なり、今回は市場で規模優位を誇る品種が主体的に動き出したことで、業界への影響は大きいと予想されます。証券取引所によると、2023年11月18日時点で、華泰柏瑞沪深300ETFの資産額は3700億元を超え、現在市場で最も規模が大きいETFとなっています。&lt;/p&gt;
&lt;p&gt;規模が最大なスーパーETFが最初に減価金政策を実施したことは、投資家への利益還元という積極的な意思を示すとともに、人気があり流動性の高いファンドをより高い性价比で投資できることを意味します。&lt;/p&gt;
&lt;p&gt;業界の観点からは、規模メリットを持つETFの低コスト化は、一 দিকে、オープンエンドファンドの普恵金融サービス機能を发挥し、投資家に保有コストをより広範囲に削減し、収益スペースと投資満足度を高めることに貢献します。&lt;/p&gt;
&lt;p&gt;他方で、低コスト率も製品自体の競争力をさらに高め、流動性虹吸効果とコスト運営上の優位性を加えることで、製品はより多くの中長期増額資金の流入を惹きつけ、「長投・長益」という良好な生態系を構築する可能性があります。&lt;/p&gt;
&lt;p&gt;近年、取引の柔軟性、透明性の高さ、流動性の強さ、投資ハードルが低いなど、独自の強みにより、ブロードベースETFは資金の低位流入と「長投・長益」の主要なチャネルとなっています。&lt;/p&gt;
&lt;p&gt;今回のコスト引き下げは、ある程度、「加速器」となり、A株市場における長期資金の流入をより円滑にする可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;跋談&#34;&gt;跋談
&lt;/h2&gt;&lt;p&gt;筆者が定投している天弘ファンドはまだ公告が出ていませんが、追跡されるべきです。もし更新されない場合は、他のファンドへの変更を検討する必要があります。
元の手数料：0.5%、委託手数料：0.1%。新手数料：0.15%、委託手数料：0.05%。この割引幅はかなり大きいです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>三者上場投資顧問の規制が強化され、「抖音（ティックトック）株取引」の裏側の受益者が取り締まりに直面するとの報道？</title>
        <link>https://ttf248.life/ja/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</link>
        <pubDate>Thu, 21 Nov 2024 02:59:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;ハンマーが落下する。&lt;/li&gt;
&lt;li&gt;投資顧問サービスがショート動画の風を追い風に、または加速車道に乗ろうとしている。&lt;/li&gt;
&lt;li&gt;今年9月の下旬、A株市場は熱狂的な情勢を示した後、抖音の荐股（推奨投資）が各方面から注目を集めた。&lt;/li&gt;
&lt;li&gt;「大藍」をはじめとする複数の财经主播（金融解説者）が抖音で人気を博し、間接的に資本市場に一定の変動をもたらした。&lt;/li&gt;
&lt;li&gt;しかし、急速に人気を集めた财经主播たちの裏にある力は無視できない—それはサードパーティ型投資顧問サービス会社である。&lt;/li&gt;
&lt;li&gt;情報によると、多くのサードパーティ型投資顧問サービス会社がショート動画運営で複数のアカウントを運用し、投流を通じてユーザーが投資教育ビデオを見るように促し、関連する投資顧問製品の購入熱意を高めている。&lt;/li&gt;
&lt;li&gt;さらに、あるサードパーティ型投資顧問会社は今年10月だけでも10億元（約16.5億円）の収益を上げ、今年の上半期の収益を上回ったという噂もある。&lt;/li&gt;
&lt;li&gt;しかし、「好日」はより多くの不確実性に向き合っている。 2023年11月以来，多部门先后发文，要求证券服务机构加强自媒体账号的合规管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2023年11月15日晚间，同花顺（300033.SZ）公告称其子公司因直播业务涉嫌暗示推荐个股等行为而被证监局处罚。&lt;/p&gt;
&lt;p&gt;这或许都在向市场释放监管从严的信号。&lt;/p&gt;
&lt;p&gt;九方智投（9636.HK）等一批第三方投资顾问服务机构的拓展业务也将面临更多压力。&lt;/p&gt;
&lt;h2 id=&#34;厳格な監督が注目されている&#34;&gt;厳格な監督が注目されている
&lt;/h2&gt;&lt;p&gt;TikTokなどの短動画プラットフォームの台頭により、感情的な意見が放大化され、間接的に取引行動に影響を与えている。
巨量算数によると、9月27日から10月8日の成交額が創高を記録した際に、抖音（TikTok）のA株キーワード検索指数は423.84万から1277.86万へと倍以上に膨張した。
このような状況下で、サードパーティの投資アドバイザー機関が「波を起こし助長」する行為が、規制当局の注目を集めている。
投資アドバイザーの職員がライブ配信を通じて様々な方法で個別の株式を推奨することは、高頻度の違反行為である。
11月8日、広東証券局は、ある企業のライブ配信中に「個別株式の暗示的推奨」などの状況が存在することに対し、新規顧客の追加を一時停止する規制措置を実施した。 11月14日晚、広東証券期貨业协会は、「ライブ配信の管理体制が不十分で、一部の機関が業務停止措置を受けた」と発表しました。これは、一部の有証券コンサルティング資格を持つ機関がライブ配信での事業展開において、管理体制が不十分であったことや、ライブ配信中に個株式を推奨する行為があったことを指摘したものです。&lt;/p&gt;
&lt;p&gt;「ライブ配信における株式推奨行為は厳禁です。ライブ配信は公共メディアとしての性質があるため、ライブ配信者（登録された投資アドバイザーの有無にかかわらず）は、ライブ配信中に株式を推奨してはなりません。」広東証券期貨业协会が強調しました。&lt;/p&gt;
&lt;p&gt;これは単独の事例ではありません。&lt;/p&gt;
&lt;p&gt;11月7日に上海証券監理局が公開した罰金通知には、また社交メディアプラットフォームで違法に株式を推奨する行為に関する事例も含まれていました。&lt;/p&gt;
&lt;p&gt;規制当局による調査の結果、海順証券投資顧問有限公司上海分社のアドバイザーである王永は、微信動画号を通じて誤解を招く内容の動画を公開し、これは専門家の規範に反していました。&lt;/p&gt;
&lt;h2 id=&#34;厳重な規制が監視対象となっている&#34;&gt;厳重な規制が監視対象となっている
&lt;/h2&gt;&lt;p&gt;信風（ID:TradeWind01）によると、資格のないアドバイザー機関が、代理商を通じて抖音で株式を推奨していたことが判明し、現在は配信が停止されています。&lt;/p&gt;
&lt;p&gt;「業界内で有人は抖音のライブ配信を行っており、実際には券商いの下で代理を務めており、これにより投資アドバイザーの資格を得ていました。その後、オンラインでのライブ配信を通じて顧客を引き付け、オフラインで投資アドバイザー製品を販売していました。」華南の一人のアドバイザー業界関係者は信風（ID:TradeWind01）に語りました。「しかし、ライブ配信中に株式を推奨したことが発覚し、配信が停止されました。正当な券商いは、ライブ配信を通じてセクターの状況について説明しますが、個別の株式については言及しません。」&lt;/p&gt;
&lt;p&gt;現在、規制当局はソーシャルメディアにおける違法な勧誘行為に対して、高い注意を払っています。 例えば、深圳証券監理局は最近、業界内で一部の機関や個人が自媒体による違法な推奨投資などの違法行為を行っていることを通知しました。これは、管轄区域の証券投資コンサルティング機関における自媒体運営管理をさらに規範化するために、各機関が自媒体の運営管理をさらに強化する必要性を示しています。&lt;/p&gt;
&lt;p&gt;これにより、一連のサードパーティ型投資アドバイザーサービス機関の事業展開に更なる課題が生じる可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;トラフィックビジネスは非&#34;&gt;「トラフィックビジネス」は非
&lt;/h2&gt;&lt;p&gt;短編動画に惹かれて参入した投資家たちが儲かるのかどうかは定かだが、水売りとしての第三者投顧サービス会社が二級市場での評価はすでに高まっている。&lt;/p&gt;
&lt;p&gt;「オンライン投教第一の株式」として上場してきた九方智投の時価総額は、今年9月初めの28.78亿元から11月13日の終値で124.64亿元に急騰し、49営業日間にわたり333.08%の大幅上昇となった。&lt;/p&gt;
&lt;p&gt;半期報によると、今年上半期の九方智投は、抖音（ドウイン）、小紅書（シャオホンשו）などのソーシャルメディアプラットフォームでブランド露出を行い、6月末時点で既に488のアカウントと0.46億人のフォロワーを獲得している。&lt;/p&gt;
&lt;p&gt;例えば、九方智投の首席投資顧問である「洪帮主（ホン・ハンズ）」の抖音（ドウイン）上のフォロワー数は226万人を誇る。&lt;/p&gt;
&lt;p&gt;「MCN運営に深く取り組むとともに、ユーザー中心で、トラフィック、ブランド、製品の包括的な発展を促進する。」 「玖方智投指出，「通过深度融合直播、短视频等新媒体工具，借助AI技术，构建起粉丝网络，并积极探索电商模式，有效实现流量的高效转化。」&lt;/p&gt;
&lt;p&gt;玖方智投的投资顾问课程包覆盖了从几十元到十余万元的不同价格区间。其中最贵的课程包系超级投资者，定价为13.96万元/半年，内含独家观点、投资顾问私享服务等。&lt;/p&gt;
&lt;p&gt;不过，玖方智投的投资顾问产品退款率在10%以上。&lt;/p&gt;
&lt;p&gt;2024年上半年，玖方智投旗舰系列、九方智投擒龙系列的退款率分别达到14.7%、18.5%。&lt;/p&gt;
&lt;p&gt;但在监管风暴下，玖方智投的展业是否会受到影响，仍待进一步关注。&lt;/p&gt;
&lt;h2 id=&#34;トラフィックビジネスは非-1&#34;&gt;「トラフィックビジネス」は非
&lt;/h2&gt;&lt;p&gt;近頃、いくつかのメディアが、九方智投などのサードパーティ・アドバイザリー企業旗下の口座が影響を受けていることを報道している。&lt;/p&gt;
&lt;p&gt;11月7日、あるメディアが「洪帮主（ホンバンシュー）」のライブ配信が一時停止されたと報じた。&lt;/p&gt;
&lt;p&gt;しかし、11月15日の午後、信風（ID:TradeWind01）が当該アカウントを検索したところ、「洪帮主」のライブ画面には依然として11月18日のライブ予約が可能であった。&lt;/p&gt;
&lt;p&gt;同時に、市場消息によると、関係省庁が九方智投を検査に入ったという情報も出ている。&lt;/p&gt;
&lt;p&gt;しかし、接近する九方智投の関係者は信風（ID:TradeWind01）に、「当該検査は通常の検査であり、すでに完了している」と答えた。&lt;/p&gt;
&lt;p&gt;これまでにこの一波の規制嵐に巻き込まれた唯一の企業ではない。&lt;/p&gt;
&lt;p&gt;ある情報によると、同花順（トンホアシュン）が違法な株式推奨行為で立案されたか、営業を一時停止される可能性があるという。&lt;/p&gt;
&lt;p&gt;对此、同花順は11月15日に「違法な株式推奨行為は存在せず、立案調査を受けていない」と回答した。 以下是翻译后的日语文本：&lt;/p&gt;
&lt;p&gt;「しかし、その夜、同花顺は、子会社である浙江同花順雲ソフトウェア有限公司が、ライブビジネスのプロモーション中にコンプライアンス管理が不十分であったこと、および銘柄の暗示的推奨などの状況が存在したため、浙江証券監理局から3ヶ月間の新規顧客追加停止などの制裁を受けたことを発表しました。&lt;/p&gt;
&lt;p&gt;これは、抖音ライブなどのソーシャルメディアプラットフォームにおける投資推奨コンテンツに対する規制当局の関心がさらに強化されていることを意味するかもしれません。&lt;/p&gt;
&lt;p&gt;実際、ショートビデオ市場も多くの証券会社を引き付けていますが、コンプライアンス要件に起因して、現在、証券会社はこれに対して比較的慎重な姿勢を維持しています。」&lt;/p&gt;
&lt;h2 id=&#34;トラフィックビジネスは違います&#34;&gt;「トラフィックビジネス」は違います
&lt;/h2&gt;&lt;p&gt;ある証券会社関係者によると、信風（ID:TradeWind01）は、同社がショート動画の運営や流入方法を探求しており、人員を短動画プラットフォーム企業に派遣して学習を行っていると報告しています。しかし、コンプライアンス要件に縛られるため、現在は探索段階にとどまっています。&lt;/p&gt;
&lt;p&gt;実際には、規制当局による様々なコンプライアンス要件の背景には、ショート動画プラットフォームの内容が明確な感情的色彩を持っていることがあり、投資家はより理性的に市場を評価する必要があります。この二つは天然の対立関係にあります。&lt;/p&gt;
&lt;p&gt;もし感情的な力が資本市場に影響を与えれば、市場は激しい変動を引き起こし、資本市場の長期的な健全な発展に反します。&lt;/p&gt;
&lt;p&gt;証券免許を持つ機関が、ショート動画時代の到来をどのように受け止め、レッドライン（規制線）を「踏む」ことを避けることができるのか、各方面にとって解けない難問となっています。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>CentOS 8 Stream EOL</title>
        <link>https://ttf248.life/ja/p/centos-8-stream-eol/</link>
        <pubDate>Sat, 16 Nov 2024 23:24:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/centos-8-stream-eol/</guid>
        <description>&lt;p&gt;&lt;code&gt;CentOS Stream&lt;/code&gt;は、レッドハットのエンタープライズ向け&lt;code&gt;Linux&lt;/code&gt;ディストリビューションの前段のオープンソース開発プラットフォームです。&lt;/p&gt;
&lt;p&gt;初めてオープンオペレーティングシステムのライフサイクル&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/redhat-centos-lifecycle/&#34; &gt;redhat and centos life cycle&lt;/a&gt;に注目したのが、この時期でした。&lt;/p&gt;
&lt;p&gt;期限が切れ、何か問題があるのでしょうか？セキュリティの問題以外にも、dnf が使えなくなってしまい、最近ツールをインストールする際に dnf で失敗し、リポジトリを確認したところ、&lt;code&gt;CentOS 8 Stream&lt;/code&gt; が期限切れだったことがわかりました。&lt;/p&gt;
&lt;h2 id=&#34;centos-stream-の紹介&#34;&gt;CentOS Stream の紹介
&lt;/h2&gt;&lt;h3 id=&#34;位置と役割&#34;&gt;位置と役割
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、Fedora Linux（上流開発）とRHEL（Red Hat Enterprise Linux、下流開発）の中間に位置し、その橋渡し役を担っています。
最新のRed Hat系Linuxの機能を試すためのバージョンとして利用でき、新しい技術を体験するのに適しています。&lt;/p&gt;
&lt;h3 id=&#34;出身と背景&#34;&gt;出身と背景
&lt;/h3&gt;&lt;p&gt;時間の経過とともに、Red Hat社はエンタープライズ向けLinuxプラットフォームの発展方法についてより効果的な方法を模索し始め、CentOS Streamを発表しました。
‌CentOS 8が2021年末にメンテナンスを終了した後、CentOS Streamはその後継者として更新され続け、CentOSプロジェクトの将来的な開発方向となりました。&lt;/p&gt;
&lt;h3 id=&#34;特徴と利点&#34;&gt;特徴と利点
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、継続的リリース（ローリングリリース）のLinuxディストリビューションであり、より迅速なアップデートを提供します。コミュニティ、パートナー、顧客への参加を促進し、透明性を高め、ユーザーがRed Hat Enterprise Linux (RHEL) に貢献するための機会を増やします。
CentOS Streamの内容は、Red Hatが次期安定版RHELに含める予定のソフトウェアであるため、コミュニティメンバーが開発およびテストのために安定したABI/APIを使用できることを保証します。&lt;/p&gt;
&lt;h3 id=&#34;利用シーンとターゲットユーザー&#34;&gt;利用シーンとターゲットユーザー
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、最新のLinux機能アップデートを継続的に取得したいCentOSユーザーや、Red Hat Enterprise Linuxの開発に参加する開発者およびパートナーに適しています。&lt;/p&gt;
&lt;p&gt;また、コミュニティメンバー、Red Hat パートナー、その他の人が、より安定かつ予測可能なLinuxエコシステムで革新的なオープンソースプログラムを最大限に活用できるよう支援することを目的としています。&lt;/p&gt;
&lt;h2 id=&#34;最終期限httpsendoflifedatecentos-stream&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://endoflife.date/centos-stream&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最終期限&lt;/a&gt;
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;リリース&lt;/th&gt;
&lt;th&gt;公開日&lt;/th&gt;
&lt;th&gt;サポート期間&lt;/th&gt;
&lt;th&gt;セキュリティサポート&lt;/th&gt;
&lt;th&gt;最新&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3年前 (2021年9月15日)&lt;/td&gt;
&lt;td&gt;2年6ヶ月後 (2027年5月31日)&lt;/td&gt;
&lt;td&gt;2年6ヶ月後 (2027年5月31日)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;最終期限httpsendoflifedatecentos-stream-1&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://endoflife.date/centos-stream&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最終期限&lt;/a&gt;
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;リリース&lt;/th&gt;
&lt;th&gt;公開日&lt;/th&gt;
&lt;th&gt;アクティブサポート&lt;/th&gt;
&lt;th&gt;セキュリティサポート&lt;/th&gt;
&lt;th&gt;最新&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5年前 (2019年9月24日)&lt;/td&gt;
&lt;td&gt;5ヶ月3週間前 (2024年5月31日) に終了&lt;/td&gt;
&lt;td&gt;5ヶ月3週間前に終了 (2024年5月31日)&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ソリューション&#34;&gt;ソリューション
&lt;/h2&gt;&lt;p&gt;アップグレードの手間を省き、長期サポート版の &lt;code&gt;Ubuntu 24.04&lt;/code&gt; を採用しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hugo モジュールカスタム修正テーマ：考え方解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を調べてみると、サイトが何度もテーマを変更してきたことがわかります。毎回テーマを変更するたびにいくつかのカスタム設定が変更されていたため、ここではそのカスタム設定の思路を記録します。私のGitHubには「even」というテーマがありましたが、強迫症でHugoコンパイラを最新バージョンにアップグレードしようとせず、それが原因でevenテーマが互換性を失い、最終的にStackテーマに切り替えてしまいました。&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化について言及する際、NginxモジュールやIDEAプラグインなどを思い浮かべる人が多いでしょう。私は、独自のニーズを満たすために、いくつかのモジュールをアップロードすることで対応することがよくあります。 モジュールが広く受け入れられている理由は、十分に柔軟で、大きな労力をかけずに自身のニーズに応えられるためです。 多くの場合は、大まκάζ的には同じでも、細部には違いがあるからです。 これはソフトウェアの複雑さを物語っており、技術的な複雑さだけでなく、ビジネス上の複雑さも含まれていることを示しています。 大多数の場合、私たちが直面しているのはビジネスの複雑さです。 そしてこれは、ソフトウェア業界において「隔行如隔山」という俗語を最もよく表すものです。 現代では、インターネット業界だけでなく、金融業界、さらには伝統的な製造業においても、企業の生産と管理を支援するために情報化システムが導入されています。 同じ休暇システムでも、同じ業界であっても、企業によって異なる点があります。
そして&lt;code&gt;Hugo&lt;/code&gt;のモジュールと皆さんがイメージするモジュールには違いがあり、機能単位で差異に対応しているわけではありません。代わりにディレクトリ構造を主軸に、共通の構造を認識します。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo架构 — Hugo的模块&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化-1&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; 方式も引き続き利用可能ですが、本記事では推奨されません。テーマが更新された場合、個別の Git リポジトリで管理する必要があるため、メンテナンスが煩雑になる可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;テーマの変更ロジックhttpsstackjimmycaicomguidemodify-theme&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;テーマの変更ロジック&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;前面モジュール化の基本的な概念を理解した上で、カスタムテーマを理解すると、それほど難しくありません。Hugo の現在のテーマも、複数の異なるモジュールを組み合わせて構成されています。 したがって、あるモジュールを変更したい場合は、対応するテンプレートファイルを検索し、修正すれば済みます。&lt;/p&gt;
&lt;p&gt;stack 公式ドキュメントからの抜粋：&lt;/p&gt;
&lt;p&gt;この方法を使用すると、&lt;code&gt;themes&lt;/code&gt; ディレクトリの下にファイルは存在しません。 テーマを変更するには、変更したいファイルを同じディレクトリにある &lt;code&gt;layouts&lt;/code&gt; ディレクトリの下にコピーする必要があります。&lt;/p&gt;
&lt;h2 id=&#34;テーマの変更ロジック-httpsstackjimmycaicomguidemodify-themehttpsstackjimmycaicomguidemodify-theme&#34;&gt;テーマの変更ロジック (&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stack.jimmycai.com/guide/modify-theme&lt;/a&gt;)
&lt;/h2&gt;&lt;p&gt;たとえば、&lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; ファイルを修正するには、それを &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; にコピーして、そこから編集する必要があります（テーマのリポジトリからコードをコピーします）。&lt;code&gt;assets&lt;/code&gt; と &lt;code&gt;static&lt;/code&gt; ディレクトリについても同様です。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルの場所を見つける方法&#34;&gt;テンプレートファイルの場所を見つける方法
&lt;/h2&gt;&lt;h3 id=&#34;従来の思路&#34;&gt;従来の思路
&lt;/h3&gt;&lt;p&gt;テーマのソースファイルを確認し、テーマのデザイン思想を理解し、対応するテンプレートファイルを修正します。&lt;/p&gt;
&lt;h3 id=&#34;蛮力的なアプローチ&#34;&gt;蛮力的なアプローチ
&lt;/h3&gt;&lt;p&gt;私はフロントエンドのコードがあまり理解していないため、時々、ブラウザで対応するページを開いて、修正したい箇所を見つけ、&lt;code&gt;要素を検査&lt;/code&gt;を使ってCSS名などを特定し、ソースコードから該当ファイルを検索してコピーし、サイトディレクトリに貼り付けて修正するというような、手動的な方法をとることがあります。&lt;/p&gt;
&lt;h2 id=&#34;スニppets&#34;&gt;スニppets
&lt;/h2&gt;&lt;p&gt;公式で用意されているファイルは、スタイルをカスタマイズするためのものですが、変更が必要な箇所がある場合は、複数のファイルに分割し、&lt;code&gt;custom.scss&lt;/code&gt; ファイルを他のファイルにインポートすることで、よりスタイルの管理が容易になります。
&lt;img src=&#34;https://ttf248.life/p/hugo-module-customizing-themes-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;修正内容まとめ-6時間&#34;&gt;修正内容まとめ (6時間)
&lt;/h2&gt;&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な修正点を以下に列挙します。本サイトにおける変更点としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定など、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを継承し、中国語に最適化&lt;/li&gt;
&lt;li&gt;首页：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;首页：記事に概要プレビュー（手間のかかる部分を、工夫で実現）を追加&lt;/li&gt;
&lt;li&gt;滚动栏：スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;代码块：&lt;code&gt;highlight.js&lt;/code&gt; を導入 - JavaScriptコードハイライトプラグイン、コードブロックのスタイルを美化する&lt;/li&gt;
&lt;li&gt;内容詳細：一部コンテンツが転載であり、新規に原作者情報を表示し、元のリンクを表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：トップ部のカテゴリ画像、テーマ自带の色マスクを削除し、元の画像を表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：年単位での分類統計表示パネルを追加&lt;/li&gt;
&lt;li&gt;アーカイブページ：2カラム表示レイアウト ## 修正内容まとめ (6時間)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な変更点を以下に列挙します。本サイトにおける修正点としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定など、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを引き継ぎ、中国語に親切&lt;/li&gt;
&lt;li&gt;首页: 右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;首页: 記事に概要プレビュー（手間のかかる部分を、工夫で実現）を追加&lt;/li&gt;
&lt;li&gt;滚动栏: スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;代码块: `highlight.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;修正内容まとめ6時間&#34;&gt;修正内容まとめ（6時間）
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; テーマのコンポーネントの再利用性が高く、それがホームページの記事の新摘要プレビューにかかる時間を増やす原因となっていました。対応するコンポーネントを変更したことで、記事の詳細ページも変更され、正文が重複して表示される問題が発生しました。&lt;code&gt;golang テンプレート&lt;/code&gt;の構文も十分に理解できていなかったため、多くの時間を費やし、コンポーネント間のパラメータ伝達を解決することができませんでした。最終的には、ショートカットの方法として、ホームページに個別に&lt;code&gt;JavaScript&lt;/code&gt;スクリプトを導入し、カスタムの特殊変数を通じて摘要プレビューを実現しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コードの再利用性が高すぎることも問題となることがあります。一つの場所を変更すると、他の場所にも影響が及ぶ可能性があるため、テーマを修正する際には注意が必要です。既存のロジックを破壊しないようにしてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;このイケメンさんの修正はより洗練されています：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;
&lt;del&gt;本サイトではシンプルな形で &lt;code&gt;Waline&lt;/code&gt; コメントシステムを導入しており、&lt;code&gt;stack&lt;/code&gt; テーマがデフォルトで &lt;code&gt;Waline&lt;/code&gt; をサポートしています。&lt;code&gt;config.toml&lt;/code&gt; に設定するだけです。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首页のメールでの連絡を推奨し、本サイトではコメント欄は開放していません&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>県庁の婆羅門：地方における「大物」</title>
        <link>https://ttf248.life/ja/p/county-brahmins-big-shots-in-small-towns/</link>
        <pubDate>Wed, 13 Nov 2024 23:02:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/county-brahmins-big-shots-in-small-towns/</guid>
        <description>&lt;p&gt;最近抖音上の大氷老師（だいひょうし）さんが非常に人気があり、よく動画の切り抜きアカウントを見かける。これらは主にライブ配信の内容だ。あるリスナーがボイスチャットで質問した。「大氷先生、西安の家を売って、故郷に戻って静かに暮らしたいのですが？」大氷先生は答えた。「あなたの年齢なら、30代半ばなので、静かに暮らすことは難しいでしょう。ご両親は年老いていかれ、お子さんはまだ独立していません。故郷に戻れば、小県城（しょうけんじょう）の婆羅門（ばろもん）に対しても対応しなければなりません。」&lt;/p&gt;
&lt;p&gt;先ほど述べたように、意見が正しくないとしても、&lt;code&gt;婆羅門&lt;/code&gt;という言葉の意味は何でしょうか？&lt;/p&gt;
&lt;h1 id=&#34;県都の婆羅門地方における大物&#34;&gt;&lt;strong&gt;県都の婆羅門：地方における「大物」&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;多くの小県城（けんじょう）では、人々はしばしば「県都の婆羅門」（けんとのはらもん）と呼ばれる人物について語る。「婆羅門」たちは、地方社会の一種シンボルのように存在し、必ずしも真の宗教家でも、「高大上」（こうだいじょう）な称号を持つ者でもなく、むしろ一見普通だが重要な役割を担う人々である。彼らは小地方における「権力、地位、そして発言力」を代表し、その県城（けんじょう）内のある階層の象徴となっている。&lt;/p&gt;
&lt;h2 id=&#34;県都婆羅門とは何か&#34;&gt;&lt;strong&gt;「県都婆羅門」とは何か？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;まず、最初に「婆羅門」は本来、インド社会における最高階層を指し、知恵、権威、精神的な至高を表していました。しかし、中国の県城（けんじょう）の中では、「県城婆羅門」という言葉にはそれほど複雑な宗教的背景はなく、むしろ社会現象の一種を比喩的に表現したものです。&lt;/p&gt;
&lt;p&gt;簡単に言うと、「県城婆羅門」とは、県城の中で「文化的な権威」と呼ばれる存在であり、例えば教師、医師、地元の著名な商人や役人などが該当します。彼らの職位は一見平凡に見えますが、県城という比較的閉鎖的な環境においては、相対的に高い社会地位を占めているか、あるいは、彼らの意見や行動が地元で無視できない影響力を持つことがありました。&lt;/p&gt;
&lt;h2 id=&#34;県城の婆羅門とは&#34;&gt;&lt;strong&gt;「県城の婆羅門」とは？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;県城（かせがくれ）に住むほとんどの業界で、そうした「婆羅門」（バラモン）が存在する。彼らは以下のような存在かもしれない：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;教育者&lt;/strong&gt;: 特に地方で長年教えた教師たち。必ずしも名校出身ではないかもしれないが、知識を通して威信を築き上げ、広く尊敬されている。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地方政府職員&lt;/strong&gt;: かすがい（かせがくれ）の副県長や科級干部など、ある程度の資源と権力を握る官僚。その職位が低くても、権限範囲が限定されているため、「婆羅門」として地方に影響力を持つ。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地元「企業家」&lt;/strong&gt;: かすがい（かせがくれ）の商店主たち。規模はそれほど大きくないものの、ある程度の富を握り、地方における発言力を持ち合わせている。彼らは、県城の中で一定の影響力を持つ小規模な知名度のある企業を経営しているかもしれない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;県城婆羅門の地位は社会にどのように影響するか&#34;&gt;「県城婆羅門」の地位は社会にどのように影響するか？
&lt;/h2&gt;&lt;p&gt;「県城婆羅門」の真の意味を理解するためには、県城という特殊な環境を考慮しなければなりません。この場所では、大都市ほど情報流通が速くなく、社会階層の流動も比較的固定化されています。ここにいる「婆羅門」たちは、長年にわたり地元で深く耕作し、名声、知識、人脈を蓄積した結果です。彼らは地方の政治、経済、文化などあらゆる側面で影響力を行使します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文化的影響力&lt;/strong&gt;：地方では、特に教育システムが発達していない場合や、一般の人々にとって選択肢が限られている場合があります。「婆羅門」たちは、授業での知識伝達、メディアの説明、さらには社交的な場での言動を通じて、静かに地域の文化雰囲気を形成します。 &lt;strong&gt;社会的資源の集中:&lt;/strong&gt; 郡市の人口と資源が限られているため、これらの「婆羅門」は地方の主要な資源を掌握する存在の一人であることが多かった。社会福祉、政策の実行、あるいは特定のプロジェクトの承認など、あらゆる面で彼らの影響力は欠かせないものだった。彼らの発言権と決定権が、地方社会において一定の影響力を確立させたのである。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;人間関係の網状構造:&lt;/strong&gt; 比較的閉鎖的な小社会においては、人脈が非常に重要となる。これらの「県城婆羅門」は強力な社交ネットワークを構築することで、情報流通と資源配分をコントロールし、重要な局面で決定的な役割を果たした。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;県城婆羅門の裏に潜む比喩&#34;&gt;&lt;strong&gt;「県城婆羅門」の裏に潜む比喩&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;「県城婆羅門」はしばしば尊敬と崇拝の対象となるが、その「高位」たる地位にも問題はないわけではない。現代社会において、多くの県城における「婆羅門」が、真の能力や革新精神を持たないまま、世襲関係や資源独占といった手法によって地位を維持していることは容易に発見できるだろう。情報化の発展とともに、これらの「婆羅門」の権力は徐々に打破され、新たな社会流動性が小県城の面貌に影響を及ぼし始めている。&lt;/p&gt;
&lt;p&gt;総じて、「県城婆羅門」は非常に興味深い社会現象であり、地方社会における権力と文化構造を反映している。彼らの「権力」が国家の統治を直接脅かすわけではないかもしれないが、地方においては疑いもなく重要な存在であると言えるだろう。&lt;/p&gt;
&lt;h1 id=&#34;結論&#34;&gt;&lt;strong&gt;結論&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;本来如果没有这篇稿子，只是好奇“婆羅門”是什么意思，然后把它给“kimi”丢了，结果还挺搞笑的。 我能看到网页端已经搜索出来了结果，但是瞬间就变成了相关内容无法显示，于是我就想，这个词是不是有什么特别的意义，然后就把它给扔给了“ChatGPT”， 也就有了这篇文章。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linuxバックエンドサービスの大量文字列データの処理 - 効率が悪い</title>
        <link>https://ttf248.life/ja/p/linux-backend-slow-string-processing/</link>
        <pubDate>Wed, 13 Nov 2024 19:42:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-backend-slow-string-processing/</guid>
        <description>&lt;p&gt;C++開発の歴史的なプロジェクトにおいて、カスタムプロトコルを使用して通信を行っており、そのプロトコルは2次元配列のパターンを採用していました。大量データを処理する際に、プロトコル内部では配列を遍历し、シリアライズ操作を実行してログを生成しており、このため効率が低く、システムが高負荷時に顕著なフレーム落ち（カドゥ）を引き起こしました。事業部門からは、システムのフレーム落ちに関するフィードバックがありました。&lt;/p&gt;
&lt;h2 id=&#34;問題の特定&#34;&gt;問題の特定
&lt;/h2&gt;&lt;p&gt;問題のトラブルシューティングにおいて、まずシステムに対してパフォーマンス分析を実施し、大量データを処理する際にCPU使用率が著しく増加し、システムの応答時間が長くなっていることを発見しました。ログを分析した結果、多数のシリアライズ操作が見られ、これらの操作は2次元配列を処理する際の効率が低いことが原因でシステムのパフォーマンス低下につながっていました。
&lt;code&gt;pstack&lt;/code&gt;ツールを使用してサービスのスレッド情報を取得し、ログスレッドが文字列の連結に大部分の時間を使用していることを特定しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今日は重点的に取り組むべき点です。異なる累積方式では、その効率の違いは非常に大きいです。過去のコードでは &amp;lsquo;+&amp;rsquo; 演算子を使用しており、この方法は頻繁に一時オブジェクトを作成するため、非常に非効率的でした。それは、その非効率がどの程度であるかを知らない状況にあるようなものです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;デモ検証&#34;&gt;デモ検証
&lt;/h2&gt;&lt;p&gt;プロジェクトコードに基づいて、ビジネスロジックを抽出し、文字列連結の効率に関する問題を検証するためのシンプルなデモを作成しました。Windows環境ではVisual Studio 2022コンパイラ、Linux環境ではgcc8.5コンパイラを使用し、Releaseモードでビルドして実行し、効率を比較します。&lt;/p&gt;
&lt;h3 id=&#34;主要ポイント&#34;&gt;主要ポイント
&lt;/h3&gt;&lt;p&gt;このプロジェクトでは、方法四を使用し、テストデータを入手する前に、どの方法が最も効率的で、最も非効率かを読者に考えてもらうようにしました。結果を見たときは、自分でも驚きました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;方法 1 (&lt;code&gt;+=&lt;/code&gt; 連結)&lt;/strong&gt;：各フィールドを &lt;code&gt;+=&lt;/code&gt; を使って文字列に直接連結します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法 2 (&lt;code&gt;std::ostringstream&lt;/code&gt; 連結)&lt;/strong&gt;：ストリーム（&lt;code&gt;std::ostringstream&lt;/code&gt;）を使用して各フィールドを連結する方法で、特に大量のデータを連結する場合に効率的です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法 3（事前割り当てメモリの &lt;code&gt;+=&lt;/code&gt; 連結）&lt;/strong&gt;：&lt;code&gt;reserve&lt;/code&gt; を使って文字列に十分なメモリを事前に割り当てることで、メモリ再割り当てのオーバーヘッドを減らし、パフォーマンスを向上させます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法4 (&lt;code&gt;bodys = bodys + body + &amp;quot;\n&amp;quot;&lt;/code&gt;)&lt;/strong&gt;: 各回の連結で新しい一時的な文字列オブジェクトが作成されるため、大規模な連結においてはパフォーマンスの低下を引き起こします。これは、各連結において新たなメモリ割り当てとコピーが必要となるためです。
参照結果から、この方法が最も効率の悪いものとして選ばれていることがわかります。
さらに詳しく分析すると、異なるプラットフォームコンパイラの最適化効率に違いが見られます。Microsoft の &lt;code&gt;Visual Studio&lt;/code&gt; は一如既往に優れており、文字列の最適化効率は非常に高い一方、&lt;code&gt;gcc&lt;/code&gt; コンパイラはその最適化効率がやや劣ります。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;主要ポイント-1&#34;&gt;主要ポイント
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;コードを異なるマシンで実行した場合、2つのデータ間で直接的な比較の意味がないため、異なるパッチング方法間の差分を比較することができます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;主要ポイント-2&#34;&gt;主要ポイント
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Windowsプラットフォーム下でのVisual Studio 2022コンパイラ

----------------------------------------
データ生成時間: 0.054秒
----------------------------------------

----------------------------------------
データマージパフォーマンス:
----------------------------------------
+ データマージ (+=) にかかった時間: 0.053秒
+ ostringstream データマージにかかった時間: 0.054秒
+ 事前予約済みデータマージにかかった時間: 0.045秒
+ データマージ (bodys = bodys + body + &amp;quot;\n&amp;quot;) にかかった時間: 16.108秒

----------------------------------------
データマージ完了。
----------------------------------------

プログラム終了。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;主要ポイント-3&#34;&gt;主要ポイント
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Linuxプラットフォーム下 GCC8.5コンパイラ
----------------------------------------
データ生成時間：0.108秒。
----------------------------------------

----------------------------------------
データマージパフォーマンス：
----------------------------------------
+ データマージ (+=) にかかった時間：0.100秒。
+ ostringstream データマージにかかった時間：0.083秒。
+ 事前予約済みデータマージにかかった時間：0.057秒。
+ データマージ (bodys = bodys + body + &amp;quot;\n&amp;quot;) にかかった時間：29.298秒。

----------------------------------------
データマージ完了。
----------------------------------------

プログラム終了。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完全なコード&#34;&gt;完全なコード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;random&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

typedef std::vector&amp;lt;std::string&amp;gt; DataRow;
typedef std::vector&amp;lt;DataRow&amp;gt; DataGroup;

struct ResponsePackage
{
    std::string ErrorInfo;
    DataRow Head;
    std::string ClientId;
    std::string UUID;
    std::string MsgID;
    std::string SessionID;
    std::string ExtraInfo1;
    std::string ExtraInfo2;
    DataGroup DataBody;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## 完整コード
// 指定された長さのランダム文字列を生成する
std::string generateRandomString(size_t length)
{
    const char charset[] = &amp;quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;quot;;
    const size_t max_index = sizeof(charset) - 1;
    std::string random_string;
    random_string.reserve(length);

    std::random_device rd;
    std::mt19937 generator(rd());
    std::uniform_int_distribution&amp;lt;&amp;gt; distribution(0, max_index);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;// ランダム文字列を生成します。
// 文字列の文字セットは、小文字と大文字のアルファベット、数字です。
// 指定された長さのランダムな文字列を生成するために、乱数ジェネレータを使用して、文字セットからランダムに文字を選択します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
**注釈:**

*   上記は日本語での完全な翻訳です。
*   コードコメントも日本語で記述されています。
*   Markdown形式を維持しています。

## 完全なコード
for (size_t i = 0; i &amp;lt; length; ++i)
{
    random_string += charset[distribution(generator)];
}

return random_string;
}

void create_large_string()
{
    // 例：50フィールドを含むリクエストパッケージ
    ResponsePackage requestPackage;

## 完整コード
requestPackage.Head = {
    &amp;quot;Field1&amp;quot;, &amp;quot;Field2&amp;quot;, &amp;quot;Field3&amp;quot;, &amp;quot;Field4&amp;quot;, &amp;quot;Field5&amp;quot;,
    &amp;quot;Field6&amp;quot;, &amp;quot;Field7&amp;quot;, &amp;quot;Field8&amp;quot;, &amp;quot;Field9&amp;quot;, &amp;quot;Field10&amp;quot;,
    &amp;quot;Field11&amp;quot;, &amp;quot;Field12&amp;quot;, &amp;quot;Field13&amp;quot;, &amp;quot;Field14&amp;quot;, &amp;quot;Field15&amp;quot;,
    &amp;quot;Field16&amp;quot;, &amp;quot;Field17&amp;quot;, &amp;quot;Field18&amp;quot;, &amp;quot;Field19&amp;quot;, &amp;quot;Field20&amp;quot;,
    &amp;quot;Field21&amp;quot;, &amp;quot;Field22&amp;quot;, &amp;quot;Field23&amp;quot;, &amp;quot;Field24&amp;quot;, &amp;quot;Field25&amp;quot;,
    &amp;quot;Field26&amp;quot;, &amp;quot;Field27&amp;quot;, &amp;quot;Field28&amp;quot;, &amp;quot;Field29&amp;quot;, &amp;quot;Field30&amp;quot;,
    &amp;quot;Field31&amp;quot;, &amp;quot;Field32&amp;quot;, &amp;quot;Field33&amp;quot;, &amp;quot;Field34&amp;quot;, &amp;quot;Field35&amp;quot;
};

## 完整コード
```json
{
  &amp;quot;Field31&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field32&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field33&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field34&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field35&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field36&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field37&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field38&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field39&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field40&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field41&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field42&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field43&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field44&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field45&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field46&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field47&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field48&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field49&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Field50&amp;quot;: &amp;quot;&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完全なコード-1&#34;&gt;完全なコード
&lt;/h2&gt;&lt;p&gt;requestPackage.ClientId = &amp;ldquo;ClientID&amp;rdquo;;
requestPackage.UUID = &amp;ldquo;UUID&amp;rdquo;;
requestPackage.MsgID = &amp;ldquo;MsgID&amp;rdquo;;
requestPackage.SessionID = &amp;ldquo;SessionID&amp;rdquo;;
requestPackage.ExtraInfo1 = &amp;ldquo;ExtraInfo1&amp;rdquo;;
requestPackage.ExtraInfo2 = &amp;ldquo;ExtraInfo2&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;// データ生成の開始タイミングを記録
auto start_gen = std::chrono::high_resolution_clock::now();&lt;/p&gt;
&lt;h2 id=&#34;完全なコード-2&#34;&gt;完全なコード
&lt;/h2&gt;&lt;p&gt;// 50フィールドを持つ1万行のデータを生成する
for (size_t i = 0; i &amp;lt; 10000; ++i)
{
DataRow dataRow(50, &amp;ldquo;This is a test string&amp;rdquo;);
requestPackage.DataBody.push_back(dataRow);
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// データ生成のタイミング終了
auto end_gen = std::chrono::high_resolution_clock::now();
std::chrono::duration&amp;lt;double&amp;gt; duration_gen = end_gen - start_gen;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整コード&#34;&gt;完整コード
&lt;/h2&gt;&lt;p&gt;// 結果生成時間表示
std::cout &amp;laquo; &amp;ldquo;\n&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-\n&amp;rdquo;;
std::cout &amp;laquo; &amp;ldquo;データ生成時間: &amp;quot; &amp;laquo; std::fixed &amp;laquo; std::setprecision(3) &amp;laquo; duration_gen.count() &amp;laquo; &amp;quot; 秒.\n&amp;rdquo;;
std::cout &amp;laquo; &amp;ldquo;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-\n&amp;rdquo;;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 異なる方法でデータマージのパフォーマンス
std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
std::cout &amp;lt;&amp;lt; &amp;quot;データマージ性能:\n&amp;quot;;
std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整コード-1&#34;&gt;完整コード
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;// Method 1: Using &#39;+=&#39; string concatenation
auto start_merge = std::chrono::high_resolution_clock::now();
std::string bodys(&amp;quot;&amp;quot;);
for (auto&amp;amp; vec : requestPackage.DataBody)
{
    std::string body(&amp;quot;This is a test string&amp;quot;);
    for (auto&amp;amp; item : vec)
    {
        body += item + &amp;quot; &amp;quot;;
    }
    bodys += body + &amp;quot;\n&amp;quot;;
}
auto end_merge = std::chrono::high_resolution_clock::now();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;// 方法1：使用&amp;rsquo;+=&amp;lsquo;文字列連結
auto start_merge = std::chrono::high_resolution_clock::now();
std::string bodys(&amp;quot;&amp;quot;);
for (auto&amp;amp; vec : requestPackage.DataBody)
{
std::string body(&amp;ldquo;This is a test string&amp;rdquo;);
for (auto&amp;amp; item : vec)
{
body += item + &amp;quot; &amp;ldquo;;
}
bodys += body + &amp;ldquo;\n&amp;rdquo;;
}
auto end_merge = std::chrono::high_resolution_clock::now();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
```markdown
## 完整コード
}
    auto end_merge = std::chrono::high_resolution_clock::now();
    std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
    std::cout &amp;lt;&amp;lt; &amp;quot;+ データマージ (+=) にかかりました: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; 秒。&amp;quot; &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整コード-2&#34;&gt;完整コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Method 2: Using ostringstream
auto start_merge = std::chrono::high_resolution_clock::now();
std::ostringstream bodys;
for (auto&amp;amp; vec : requestPackage.DataBody)
{
    std::ostringstream body;
    body &amp;lt;&amp;lt; &amp;quot;This is a test string&amp;quot;;
    for (auto&amp;amp; item : vec)
    {
        body &amp;lt;&amp;lt; item &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
    }
    bodys &amp;lt;&amp;lt; body.str() &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
}
auto end_merge = std::chrono::high_resolution_clock::now();
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;## 完整コード
}
    auto end_merge = std::chrono::high_resolution_clock::now();
    std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
    std::cout &amp;lt;&amp;lt; &amp;quot;+ ostringstream Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整コード-3&#34;&gt;完整コード
&lt;/h2&gt;&lt;p&gt;}
auto end_merge = std::chrono::high_resolution_clock::now();
std::chrono::duration&lt;double&gt; duration_merge = end_merge - start_merge;
std::cout &amp;laquo; &amp;ldquo;+ ostringstream データマージに要した時間: &amp;quot; &amp;laquo; std::fixed &amp;laquo; std::setprecision(3) &amp;laquo; duration_merge.count() &amp;laquo; &amp;quot; 秒。&amp;rdquo; &amp;laquo; std::endl;&lt;/p&gt;
&lt;h2 id=&#34;完全なコード-3&#34;&gt;完全なコード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;// Method 3: Pre-allocated memory
auto start_merge = std::chrono::high_resolution_clock::now();
std::string bodys;
bodys.reserve(1000 * 50 * 20); // Pre-allocate enough memory
for (auto&amp;amp; vec : requestPackage.DataBody)
{
    std::string body(&amp;quot;This is a test string&amp;quot;);
    body.reserve(50 * 20); // Pre-allocate memory for each row
    for (auto&amp;amp; item : vec)
    {
        body += item + &amp;quot; &amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完全なコード-4&#34;&gt;完全なコード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for (auto&amp;amp; item : vec)
{
    body += item + &amp;quot; &amp;quot;;
}
bodys += body + &amp;quot;\n&amp;quot;;
}
auto end_merge = std::chrono::high_resolution_clock::now();
std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
std::cout &amp;lt;&amp;lt; &amp;quot;+ Pre-reserved Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完整コード-4&#34;&gt;完整コード
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;        // Method 4: Using &#39;bodys = bodys + body + &amp;quot;\n&amp;quot;&#39;
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys(&amp;quot;&amp;quot;);
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            for (auto&amp;amp; item : vec)
            {
                body = body + item + &amp;quot; &amp;quot;; // Note the use of &#39;body = body + item&#39;
            }
            bodys = bodys + body + &amp;quot;\n&amp;quot;; // Again, using &#39;bodys = bodys + body&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## 完整コード
}
            bodys = bodys + body + &amp;quot;\n&amp;quot;; // Again, using &#39;bodys = bodys + body&#39;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ データマージ (bodys = bodys + body + \&amp;quot;\\n\&amp;quot;) にかかりました: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; 秒。&amp;quot; &amp;lt;&amp;lt; std::endl;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完全なコード-5&#34;&gt;完全なコード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;

void create_large_string() {
  std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
  std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Complete.\n&amp;quot;;
  std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;
}

int main()
{
    try
    {
        create_large_string();
    }
    catch (const std::exception&amp;amp; e)
    {
        std::cerr &amp;lt;&amp;lt; &amp;quot;Caught exception: &amp;quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\nProgram finished.\n&amp;quot;;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43;におけるラムダ式のパラメータのライフタイムについて</title>
        <link>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</link>
        <pubDate>Wed, 13 Nov 2024 19:23:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</guid>
        <description>&lt;p&gt;C++において、ラムダ式は便利な匿名関数であり、外部変数をキャプチャして内部で使用することができます。これにより、ラムダ式は柔軟なプログラミングツールとなります。しかし、ラムダ式のパラメータのライフサイクルは特に注意すべき点であり、特にキャプチャおよびパラメータを渡す際に重要です。&lt;/p&gt;
&lt;h3 id=&#34;1-ラムダ式のパラメータのライフサイクル&#34;&gt;1. ラムダ式のパラメータのライフサイクル
&lt;/h3&gt;&lt;p&gt;ラムダ式のパラメータのライフサイクルは、通常他のC++関数と同様です。関数の引数は関数呼び出し時に存在し、関数呼び出しが終了すると引数のライフサイクルも終了します。ただし、ラムダ式が外部変数をキャプチャする場合、そのキャプチャ方法によって引数のライフサイクルに影響を受ける可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;2-パラメータのライフサイクルとの関係を捉える&#34;&gt;2. パラメータのライフサイクルとの関係を捉える
&lt;/h3&gt;&lt;h4 id=&#34;21-外部変数のキャプチャ&#34;&gt;2.1 外部変数のキャプチャ
&lt;/h4&gt;&lt;p&gt;C++のラムダ式では、以下の2つの方法で外部変数 キャプチャできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;値によるキャプチャ:&lt;/strong&gt; 値によるキャプチャでは、外部変数の値がラムダ内部にコピーされます。ラムダ内のコピーのライフサイクルは、ラムダ自身のライフサイクルによって制御されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参照によるキャプチャ:&lt;/strong&gt; 参照によるキャプチャでは、外部変数の参照が保持され、ラムダ内の参照は元の外部変数に指向します。ライフサイクルは外部変数のライフサイクルに依存します。 ```cpp
int x = 10;
auto lambda_by_value = &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;x&lt;/a&gt; { std::cout &amp;laquo; x &amp;laquo; std::endl; };  // x のコピーをキャプチャ
auto lambda_by_reference = &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&amp;amp;x&lt;/a&gt; { std::cout &amp;laquo; x &amp;laquo; std::endl; };  // x を参照でキャプチャ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lambda_by_value();  // 10 と出力
lambda_by_reference();  // 10 と出力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
**捕獲された変数について、ライフサイクルは以下のとおりです。**
- **値によるキャプチャ:** lambda が生きている間、外部変数の値をコピーして lambda 内で保持します。lambda のライフサイクルが終了すると、このコピーが破棄されます。

#### 2.1 外部変数の捕捉
- **参照による捕捉**: lambdaは外部変数の参照を保持し、**外部変数はlambdaの使用前に有効でなければならない。そうでない場合、未定義の動作を引き起こす可能性があります**。

#### 2.2 ラムダパラメータ

ラムダのパラメータは、通常の関数パラメータと同様に、そのライフサイクルはラムダ関数体内のみに限られます。つまり、ラムダパラメータはラムダが呼び出されたときに作成され、ラムダが呼び出された後にパラメータのライフサイクルも終了します。

```cpp
auto lambda = [](int a, int b) {
    std::cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; std::endl;
};
lambda(5, 10); // ここでaとbはラムダのパラメータ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; はラムダ式（ラムダ表現）のパラメータであり、ラムダが呼び出されたときに作成され、ラムダが実行後に破棄されます。&lt;/p&gt;
&lt;h3 id=&#34;3-外部変数を捕捉する際のライフサイクルに関する問題&#34;&gt;3. 外部変数を捕捉する際のライフサイクルに関する問題
&lt;/h3&gt;&lt;h4 id=&#34;31-捕捉した変数が-lambda-外部で有効か&#34;&gt;3.1 捕捉した変数が lambda 外部で有効か
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;値によるキャプチャ&lt;/strong&gt;: 外部変数（lambda が呼び出された後に破棄されても）が lambda 内部で参照されるコピーを保持するため、lambda 内部で安全に使用できます。外部変数が存在しなくなっても問題ありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x は lambda が呼び出された後に変更される
lambda();  // 10 を出力する。これは x のコピーを参照しているため
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;参照によるキャプチャ&lt;/strong&gt;: 外部変数の参照をキャプチャする場合、lambda 内部で参照が使用される場合、外部変数のライフサイクルに依存します。外部変数が lambda が実行される前に破棄された場合、 dangling reference (空の参照) の問題が発生し、未定義動作を引き起こります。 ```cpp
int x = 10;
auto lambda = &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&amp;amp;x&lt;/a&gt; { std::cout &amp;laquo; x &amp;laquo; std::endl; };
x = 20;  // x 在 lambda 调用前修改
lambda();  // 打印 20，捕获的是 x 的引用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
&amp;gt; ラムダ関数の実行順序が不定である場合、キャプチャされた外部変数がラムダ関数実行時に有効であることを保証することが非常に重要です。&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Win11 Logitech G431 ヘッドホン ドライバー インストール</title>
        <link>https://ttf248.life/ja/p/win11-logitech-g431-headphone-driver-installation/</link>
        <pubDate>Wed, 05 Jun 2024 07:20:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/win11-logitech-g431-headphone-driver-installation/</guid>
        <description>&lt;p&gt;前回の続きですが、戻ってみたらGhubにアップデートがあったので少し嬉しい。カスタマーサポートが言っていた、ドライバが正常に読み込まれない問題が解決したとのことだった。ところが色々試して、再インストールもやっても、やはり正常には動かない。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;引き続きカスタマーサポートに問い合わせて解決策を相談したが、エンジニアによるリモート支援が可能であると伝えられたが、エンジニアの勤務時間と自身の勤務時間が完全に一致しないため、結局諦めざるを得なかった。最後にトラブルシューティングのために残された資料を確認し、手動でドライバーをインストールすることを試みることにした。&lt;/p&gt;
&lt;h2 id=&#34;驱动安装包の入手方法&#34;&gt;驱动安装包の入手方法
&lt;/h2&gt;&lt;p&gt;ロジック社の公式には、個別のデバイスのドライバインストールパッケージが提供されていません。どのようにしてドライバファイルを入手すれば良いでしょうか？
最後にシステムを再構築した際のシステムイメージパッケージと組み合わせて、ローカル仮想マシンでシステムをクリーンに再構築し、そこでGhubを単独で展開します。その際、ヘッドホンデバイスを仮想マシンに導入し、ドライバのパスを見つけてコピーアウトします。
関連するパス：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\ProgramData\LGHUB&lt;/li&gt;
&lt;li&gt;C:\Windows\System32\DriverStore\FileRepository\logi_audio.inf_amd64_010b035044e24be4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;デバイスマネージャー&#34;&gt;デバイスマネージャー
&lt;/h2&gt;&lt;p&gt;重点は2番目のパスを見つける方法です。まず、Windows 11 システムでドライバーファイルをどのように手動で管理するかを簡単に整理します。この内容は、&lt;strong&gt;因果関係の制御法を用いて識別し、デバイスの抜き差しを繰り返すことで、仮想マシン内でデバイスマネージャーの情報とデバイス情報を分析し、ヘッドセットが3つのドライバーを処理する必要があることを特定する&lt;/strong&gt;ものです。そのうち2つのドライバーはシステムに組み込まれており、1つはLogitechから提供されています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;20240605073331.png&#34; &gt;ドライバーマネージャー&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上記の画像にある2番目のドライバーは、Logitechから提供されており、現在のデバイスのドライバープログラムを分析し、仮想マシン内のすべてのドライバーパスを検索します。もちろん、最初に“logi”で始まるファイルを見つける必要があります。その後、ファイルの比較を行うことで、ドライバーのファイルを確認し、そのフォルダ全体をコピーすることで、ドライバーのインストールパッケージを入手できます。&lt;/p&gt;
&lt;h2 id=&#34;驅動のインストール&#34;&gt;驅動のインストール
&lt;/h2&gt;&lt;p&gt;デバイスマネージャーのインターフェースで、以下の手順を実行します：&lt;/p&gt;
&lt;p&gt;「ドライバーの更新」をクリックし、「コンピューター上のドライブを検索」をクリックすると、以下の画面が表示されます：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605074130.png&#34;
	width=&#34;528&#34;
	height=&#34;381&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ドライバーインストール&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;332px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;通常起動すると、USBドライバのみが表示されます。ディスクからインストールを選択し、事前にコピーしてきたフォルダのパスを指定します。インストール後、「ドロップダウンリスト」からロジック特有のドライバを選択することで、デバイスドライバーを新しいドライバに切り替えることができます。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605074208.png&#34;
	width=&#34;593&#34;
	height=&#34;423&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ディスクインストール&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;人体工学デバイス駆動&#34;&gt;人体工学デバイス駆動
&lt;/h2&gt;&lt;p&gt;このドライブファイルはすべてシステムが提供するものですが、デバイスのドライバの前に感嘆符 (!) があるかどうかを確認してください。もし感嘆符があれば、ドライバ選択インターフェースに移動し、ランダムな他の種類のドライバを選択してから、再度元のドライバに戻すことで正常に復元できます。&lt;/p&gt;
&lt;h2 id=&#34;修了&#34;&gt;修了
&lt;/h2&gt;&lt;p&gt;ヘッドホンマイクの音量が正常に回復し、馴染みのあるエコーキャンセル機能も復帰しました。
&lt;a class=&#34;link&#34; href=&#34;20240605074823.png&#34; &gt;サイドノイズ画像&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ロジック(レイザー) ヘッドホン ドライバーのインストールに失敗しました。 (Rōjiku (Reizā) heddohon dᱨīvā no insutora ni himitsu shimaimashita.)

**Note:** I&#39;ve provided the romanized version for pronunciation.  A more natural Japanese phrasing would be:

ロジック(レイザー) ヘッドホンドライバーのインストールが失敗しました。 (Rōjiku (Reizā) heddohon dᱨīvā no insutora ga himitsu shimaimashita.)</title>
        <link>https://ttf248.life/ja/p/logitech-headphone-driver-installation-failure/</link>
        <pubDate>Fri, 31 May 2024 21:46:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/logitech-headphone-driver-installation-failure/</guid>
        <description>&lt;p&gt;これらのことを全く理解していない場合は、すぐに公式のカスタマーサポートに連絡すれば、何時間も悩むことがなくなるだろう。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headphone-driver-installation-failure/20240531220709.png&#34;
	width=&#34;693&#34;
	height=&#34;489&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GHUB&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最近，我家里用于开发的台式电脑C盘空间不够用了，特意拿出了一块256GB的半退役固态硬盘单独给C盘使用，现在经常瞎折腾。自从搬到上海后一直忙于各种事务，终于在上周抽空重装了系统。&lt;/p&gt;
&lt;p&gt;重装系统过程很顺利，日常软件的安装和开发环境的部署也都没有出现问题。几天后，我打算放松一下，玩几局游戏，这时才想起鼠标和耳机的驱动还没有安装。这两个设备都是罗技的，所以我下载了GHUB软件，它可以自动识别硬件并安装驱动。&lt;/p&gt;
&lt;p&gt;然而，意外发生了。鼠标的驱动安装顺利，但耳机的驱动一直显示“正在加载中”。 最新版Windows 11システムとロジクスのドライバーの互換性の問題でインストールが失敗したのではないかと疑っています。そこで、資料を調べ、手動でドライバーをインストールしてみましたが、問題は解決しませんでした。&lt;/p&gt;
&lt;p&gt;簡単に説明すると、これらのデバイスのドライバーはそれぞれどのような役割を果たしているのかを解説します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マウスのドライバーは主にマウスの移動速度などの調整機能を使用します。マクロ機能はあまり使用しないため、以前覚えていた設定に戻すだけで十分です。&lt;/li&gt;
&lt;li&gt;ヘッドホンのドライバーは主にヘッドホンミラー機能に使用され、チームでの音声通話中に自分の話し声を聞くのに役立ちます。システムのマイク設定にも同様のモニタリング機能がありますが、ドライバーで実現されているものに比べて効果が劣ります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本文-1&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;何度も試行錯誤を重ねても、ヘッドホンのドライバーが正常に読み込まれることはありませんでした。今日になって、カスタマーサポートに問い合わせてみることにしました。解決策があるか確認するためです。カスタマーサポートからは、最近サーバーの問題が発生しており、ドライバーのダウンロードが異常になっていることを伝えられました。現在、問題の修正に取り組んでおり、落ち着いて待つように指示されました。更新後には問題が解決すると言われています。&lt;/p&gt;
&lt;p&gt;まだヘッドホンドライバーの問題は解決していませんが、少なくとも原因は特定できたので、早急に解決することを願っています。&lt;/p&gt;
&lt;h2 id=&#34;マウスドライバ設定&#34;&gt;マウスドライバ設定
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headphone-driver-installation-failure/20240531220930.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;img src=&#34;https://ttf248.life/p/logitech-headphone-driver-installation-failure/20240531220903.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>不動産を促進するための中央銀行の4つの施策</title>
        <link>https://ttf248.life/ja/p/promoting-real-estate-and-central-bank-four-measures/</link>
        <pubDate>Fri, 17 May 2024 20:42:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/promoting-real-estate-and-central-bank-four-measures/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;unsold housing interest rate lower limit&lt;/li&gt;
&lt;li&gt;From tomorrow, the savings rate will be reduced by 0.25%&lt;/li&gt;
&lt;li&gt;First-time homebuyers down payment ratio lowered to 15%&lt;/li&gt;
&lt;li&gt;300 billion yuan of guaranteed mortgage reloan&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;全国規模における初の住宅ローンおよび二級住宅ローンの商業性個人住宅ローン金利の下限の廃止&#34;&gt;全国規模における初の住宅ローンおよび二級住宅ローンの商業性個人住宅ローン金利の下限の廃止
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省、自治区、直轄市及び計画特別市の分行；各国有商業銀行、中国郵政貯蓄銀行、各股份制商業銀行：&lt;/p&gt;
&lt;p&gt;党中央、国务院の決定部署を確実に実行し、我が国の不動産市場における需給関係の変化、国民の質の高い住宅に対する新たな期待に応え、不動産市場の安定かつ健全な発展を促進するため、以下の通り商業性個人住宅ローン金利政策に関する事項について通知します。&lt;/p&gt;
&lt;p&gt;第一条 全国規模における初の住宅ローンおよび二級住宅ローンの商業性個人住宅ローン金利の下限を廃止します。 第二、中国人民银行各省级分行按照因城施策原则，指导各省级市场利率定价自律机制，根据辖区内各城市房地产市场形势及当地政府调控要求，自主确定是否设定辖区内各城市商业性个人住房贷款利率下限及下限水平（如有）。&lt;/p&gt;
&lt;p&gt;第三、银行业金融机构应根据各省级市场利率定价自律机制确定的利率下限（如有），结合本机构经营状况、客户风险状况等因素，合理确定每笔贷款的具体利率水平。&lt;/p&gt;
&lt;h2 id=&#34;henkilökohtaisen-asuntopääomarakkaisse-lainan-korkoa-alennetaan-025-prosenttiyksiköllä&#34;&gt;henkilökohtaisen asuntopääomarakkaisse lainan korkoa alennetaan 0,25 prosenttiyksiköllä
&lt;/h2&gt;&lt;p&gt;Kiinan kansallisen pankin Shanghai-päämaja, maakunnat, autonomiset alueet ja suoraan hallinnoidut kaupungit sekä suunnitelman yksittäisten osavaltioiden sivukonttorit; Kiinan politiikkapankit, valtion kauppabankt ja Kiinan postiverkoston pankki sekä kaikki osakepohjaiset kauppabankt:&lt;/p&gt;
&lt;p&gt;Kiinan kansallinen pankki päättää, että henkilökohtaisten asuntopääomarakkaisse lainan korko alennetaan 0,25 prosenttiyksiköllä 18. toukokuuta 2024 alkumääräisesti, ja 5 vuoden alle (mukaan lukien) ja yli 5 vuoden ensiasunnon henkilökohtaisten asuntopääomarakkaisse lainan korot säädetään vastaavasti 2,35 %:ksi ja 2,85 %, kun taas 5 vuoden alle (mukaan lukien) ja yli 5 vuoden toissijaisen asunnon henkilökohtaisten asuntopääomarakkaisse lainan korot säädetään vastaavasti vähintään 2,775 %:ksi ja 3,325 %:ksi.&lt;/p&gt;
&lt;h2 id=&#34;べき頭金比率の調整について&#34;&gt;べき頭金比率の調整について
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省・自治区・直轄市及び計画単列市分行；国家金融監督管理総局各規制局；各国有商業銀行、中国郵政貯蓄銀行、各股份制商業銀行：&lt;/p&gt;
&lt;p&gt;党中央、国务院の決定部署を確実に実行し、我が国の不動産市場における需給関係の変化と国民の質の高い住宅に対する新たな期待に応え、不動産市場の安定かつ健全な発展を促進するため、個人住宅ローンに関する以下の事項について通知いたします。&lt;/p&gt;
&lt;p&gt;個人住宅ローンで商品住宅を購入する居住者に対し、最初の住宅として利用する場合の商業性個人住宅ローンの最低頭金比率を15%未満から不低に15%に調整し、二番目の住宅として利用する場合の商業性個人住宅ローンの最低頭金比率を25%未満から不低に25%に調整します。 この前提を踏まえ、中国人民銀行の各省级支行および国家金融監督管理総局の派出機関は、都市政府の調整要請に基づき、市況に応じて独自の政策を決定し、管轄区域内の各都市における新築住宅および再建築住宅の個人向け融資における最低初期支払い割合の下限を自主的に設定します。&lt;/p&gt;
&lt;h2 id=&#34;中央銀行は3000億元を保証型住宅再融資枠として設立&#34;&gt;中央銀行は3000億元を保証型住宅再融資枠として設立
&lt;/h2&gt;&lt;p&gt;下午4時、住宅及び都市建設部は、自然資源部、中国人民銀行、国家金融監督管理総局の４部門が国务院政策例行吹風会に集まり、切实做好保交房工作（保障性住房交割工作的配套政策）に関する状況を説明しました。&lt;/p&gt;
&lt;p&gt;会上、中国人民銀行副行長陶玲は、中央銀行が3000億元を保証型住宅再融資枠として設立することを発表し、地方国有企業が合理的な価格で未販売の完成済みの不動産を購入し、配售型または配租型保障性住宅として使用することを支援します。これにより、銀行の貸付額は5000亿元（約817億ドル）に及ぶと予想されます。&lt;/p&gt;
&lt;p&gt;据央行介绍，保障性住房再融資枠の期間は一年可展期4次（最大4回まで延長可能）、利率は1.75％で、21家全国性の銀行に対し、城市政府が選定した地方国有企業への融資を促し、未販売の完成済みの不動産を購入して保障性住宅として使用することを奨励します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>銀行マーケティング戦略と個人資産管理の調和の取れた芸術</title>
        <link>https://ttf248.life/ja/p/bank-marketing-personal-finance-balance/</link>
        <pubDate>Sun, 31 Mar 2024 01:33:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bank-marketing-personal-finance-balance/</guid>
        <description>&lt;p&gt;最近、家の装修プロジェクトにより日々の支出が急増しました。普段もクレジットカードを使っており、請求周期内にお金を返済していますが、手元に十分な現金があるにもかかわらず、それらをマネーファンドに預けて、追加の利息収入を得ることを好んでいます。また、財産の安定性を確保するため、自動引き落とし機能を設定し、期日までにクレジットカードの請求をきちんと返済できるようにしています。&lt;/p&gt;
&lt;h2 id=&#34;銀行の現状預金増加貸出減少&#34;&gt;銀行の現状：預金増加、貸出減少
&lt;/h2&gt;&lt;p&gt;経済の不確実性が高まる中、人々は消費や投資よりも貯蓄を優先する傾向にあります。これにより、銀行の預金残高が増加しますが、同時に銀行は預金者により多くの利息を支払う必要が生じます。一方、消費と投資活動の低迷により、貸出需要が低下し、銀行は貸出を通じて利息収入を得ることが難しくなります。&lt;/p&gt;
&lt;p&gt;顧客を獲得・維持するため、銀行は競争力のある預金金利を提供せざるを得ず、さらに銀行の収益率を圧迫します。同時に、経済成長と消費を刺激するために、中央銀行が基軸利率を引き下げる政策をとれば、銀行の貸出金利にも影響を与え、その結果、銀行の収益性に影響を与える可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;銀行マーケティング戦略ユーザー習慣の育成&#34;&gt;銀行マーケティング戦略：ユーザー習慣の育成
&lt;/h2&gt;&lt;p&gt;最近、返済日が近づいてきました。まず、中国建設銀行は私に連絡し、1年間の無料分割払いサービスを提供してくれました（金利は一切発生しません）。続いて、招商銀行も2.5割引で分割利息のオファーを提供し、年換算利率はわずか1.9%となりました。このような優遇措置に対し、私は両行の分割払いを採用しました。&lt;/p&gt;
&lt;p&gt;私は、銀行がユーザー習慣を育成するために本当にコスト惜しまないことを認識しました。銀行の流動的な定義によれば、私は銀行にとって質の高い顧客であるべきです。現在の銀行における資金の貸し出し難い状況下において、分割意識を育むことは、将来私が起こりうる資金繰りの困難な状況への備えであり、その際に彼らは私からより多くの利息収入を得ることができるのです。毕竟、クレジットカード請求分析の金利は決して低くありません。 銀行は、無料の分割払いサービスと低金利の分割払いオファーを提供することで、クレジットカードの使用頻度や利用額を増やし、顧客にポジティブなイメージを確立しました。この戦略の転換は、市場の変化への迅速な対応と顧客ニーズに対する深い理解を示すものです。このようにして銀行は、資金放貸の難しさを解決するだけでなく、将来的な収益を確保するための基盤を築き、&lt;strong&gt;利益は今だけ見れば立たず、未来を見据えることが長続きの秘訣である&lt;/strong&gt;という考え方を体現しています。&lt;/p&gt;
&lt;h2 id=&#34;個人の財務管理の重要性&#34;&gt;個人の財務管理の重要性
&lt;/h2&gt;&lt;p&gt;銀行の分割払いのような魅力的なオファーは魅力的かもしれませんが、ユーザーとして、過度なクレジットカードの分割払いに依存することによるリスクを認識する必要があります。自身の返済能力と将来の資金需要を十分に考慮し、短期的な金融的便利さのために長期的な債務問題に陥ることを避けるべきです。個人財務管理の鍵は、現在のニーズと将来の計画とのバランスをとることです。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;image.png&#34; &gt;招商分割払い請求書&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ゲームの多面性：心理発達とソーシャルエンターテインメントの交差点</title>
        <link>https://ttf248.life/ja/p/games-multidimensionality-psychological-development-social-entertainment/</link>
        <pubDate>Sat, 30 Mar 2024 15:07:45 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/games-multidimensionality-psychological-development-social-entertainment/</guid>
        <description>&lt;p&gt;現代のデジタル時代において、ゲームは単なる娯楽という枠を超え、人々の日常生活に欠かせない一部となっています。心理学的な観点から見ると、ゲームは異なる年齢層の人々心理の発達においてそれぞれ異なる役割を果たし、また、ソーシャルエンターテインメントとの密接な繋がりも持ち合わせています。&lt;/p&gt;
&lt;h2 id=&#34;心理状態&#34;&gt;心理状態
&lt;/h2&gt;&lt;p&gt;若者たちは自己探求とアイデンティティ形成の段階にあり、&lt;strong&gt;ゲームは彼らに低コストで試行錯誤できる環境を提供します&lt;/strong&gt;。ゲームを通じて、彼らはさまざまな役割やライフスタイルを試し、好奇心や探求心を満たすことができます。一方、年齢が成長するにつれて、個人の興味や価値観は徐々に安定し、ゲームが生活目標や興味関心に合わなくなる可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;社交属性&#34;&gt;社交属性
&lt;/h2&gt;&lt;p&gt;同時に、ゲームも社交活動の一部となり、特に若年層にとって重要な役割を果たしています。彼らはゲームを通じて友人を作り、ソーシャルネットワークを構築し、ゲームが社交の架け橋となるのです。しかし、年齢とともに社交圈が安定するにつれて、社交ニーズはより成熟した方法で満たされるようになり、ゲームにおける社交的な役割は相対的に低下していきます。&lt;/p&gt;
&lt;h2 id=&#34;社交属性带妹&#34;&gt;社交属性：带妹
&lt;/h2&gt;&lt;p&gt;国内においては、恋愛教育の不足により、幼少期には子供たちに「しっかり勉強すればいい」とだけ教えられていたため、卒業後すぐに恋愛をさせられることが一般的な現象でした。学業や仕事が忙しかったり、コミュニケーションスキルが不足していたりして、現実生活で安定した感情的な関係を築けず、孤独感や注目されたいという欲求を感じてしまうのです。&lt;strong&gt;ゲームにおける「带妹（妹を伴う）」行為は、彼らがこのような欲求を満たす出口を提供します。&lt;/strong&gt; 女性プレイヤーを助け、守ることで、自分が必要とされ、尊重されていると感じ、感情的な満足を得ることができます。&lt;/p&gt;
&lt;p&gt;同時に、ゲーム内のインタラクションルールが明確で、環境がコントロール可能であるため、現実生活の複雑さや不確実性とは異なり、ゲームは確実性と安全感を提供し、現実の交流における不確定性に恐怖する気持ちを軽減します。 ## 社交属性：带妹&lt;/p&gt;
&lt;p&gt;国内においては、恋愛教育の不足により、幼少期には子供たちに「しっかり勉強すればいい」とだけ教えられていたため、卒業後すぐに恋愛を強要されることがよく見られました。学業や仕事が忙しかったり、コミュニケーションスキルが不足していたりして、現実生活で安定した感情的な関係を築けず、孤独感や注目されたいという欲求を感じてしまうのです。&lt;strong&gt;ゲームにおける「带妹（妹を伴う）」行為は、彼らがこのような欲求を満たす出口を提供します。&lt;/strong&gt; 女性プレイヤーを助け、守ることで、自分が必要とされ、尊重されていると感じ、感情的な満足を得ることができます。&lt;/p&gt;
&lt;p&gt;同時に、ゲーム内のインタラクションルールが明確で、環境がコントロール可能であるため、現実生活の複雑さや不確実性とは対照的に、ゲームは確実性と安全感を提供し、現実の交流における不確定性に恐怖する気持ちを軽減します。&lt;/p&gt;
&lt;h2 id=&#34;現実のプレッシャー&#34;&gt;現実のプレッシャー
&lt;/h2&gt;&lt;p&gt;ゲームは、プレイヤーが一時的に現実世界でのストレスや課題、あるいは不快な感情から逃避するための仮想の世界を提供します。特に学業のプレッシャー、家庭の問題、人間関係の課題に直面している若者にとって、ゲームは慰めとリラックスを得るための手段となる可能性があります。&lt;/p&gt;
&lt;p&gt;ゲームは通常、ミッションをクリアしたり、レベルを上げたり、敵を倒したりする際に達成感や承認を得られるように設計されています。若者はこのようなゲームに没頭することがあり、それは彼らがゲームの中で賞賛され認められているという感覚を得られるためです。この感覚は、現実生活で得ることが難しいかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;年齢を重ねるとゲームをするのが好きになれなくなった&#34;&gt;年齢を重ねるとゲームをするのが好きになれなくなった
&lt;/h2&gt;&lt;p&gt;若い頃は、個人的な社会的な責任やプレッシャーが比較的少なく、ゲームに時間とエネルギーを費やす余裕がありました。仕事に入り、家庭を築くなど、社会的な責任が増えるにつれて、時間とエネルギーはより貴重になり、ゲームは時間の浪費としてではなく、優先順位の低いレジャー活動とはなりにくいものです。&lt;/p&gt;
&lt;p&gt;年齢を重ねるにつれて、人々の認知能力や興味関心も変化します。若い頃には、アクションが早く、グラフィックが美しいゲームに興味を持つかもしれませんが、経験を積むにつれて、戦略性、ストーリー性が強い、あるいは奥深いゲームを好むようになるかもしれません。もし市場に出回っているゲームがこれらの変化のニーズに応えられない場合、興味は自然と薄れてしまいます。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>人民元の為替レートは顕著な変動を示し、7.26を突破しました。</title>
        <link>https://ttf248.life/ja/p/renminbi-exchange-rate-volatility/</link>
        <pubDate>Sat, 23 Mar 2024 00:31:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/renminbi-exchange-rate-volatility/</guid>
        <description>&lt;p&gt;人民元の為替レートの変動と上海総合指数の下落は、主要中央銀行の動向、スイス国立銀行の予期せぬ利下げ、米国の経済指標の結果、および市場がインフレと利下げに対する期待を修正したことに起因すると考えられます。これらの要因が外환 시장と株式市場に複合的に作用し、人民元の変動とA株市場の下落を引き起こしました。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2024年3月22日のご提供いただいたリンク内容に基づき、人民元の為替レートは顕著な変動を示しました。以下に詳細をまとめます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ドル/離岸人民元相場が7.24水準を突破&lt;/strong&gt;：当日は人民元が下落し、ドル/離岸人民元相場が中盤で7.24から7.24926まで上昇し、ドル/中国オンショア人民元相場が中盤で7.22から7.22360まで上昇し、両方とも2023年11月17日以来の新たな高値を記録しました。記事執筆時点では、ドル/離岸人民元は7.26水準を突破し、最低価格は7.2639で、そのトレンドは依然として継続していました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;の中央銀行中間価格調整:&lt;/strong&gt; 3月22日、中央銀行は人民元対ドル中間価格を7.1004と発表し、62ベーシックポイントの下落を実施しました。調整幅が拡大しています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A株市場の反応:&lt;/strong&gt; 多様な要因の影響を受け、当日はA株の三大指数が低開高値を下回り、いずれも1%を超える水準で下落しました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外為市場変動の原因:&lt;/strong&gt; 香港の一つの投資機関のベテランFXトレーダーは、外為市場の変動は、スイス国立銀行が予想外に金利を引き下げたことがドルを押し上げたと指摘し、さらに米国経済の強さが堅調なインフレを抑制し、利下げを遅らせる可能性があり、ドル指数が上昇したことによるものです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;グローバル中央銀行動向&lt;/strong&gt;：本週は世界市場における「スーパー中央銀行週」であり、米国、日本、英国、オーストラリアなど複数の中央銀行が本週中に政策金利決定を発表する予定です。スイス国立銀行は予想外に金利を引き下げたことで、パンデミック勃発以来初の降息措置となり、これはG10通貨圏の中央銀行における最初の降息となりました。これにより市場のバランスが崩れました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;人民元相場予測&lt;/strong&gt;：光大銀行金融市場部研究員である周茂華氏は、最近の人民元の変動はありますが、全体としてはドルなどの主要通貨と比較して幅が小さく、短期的な変動は年内の人民元の「慎重な上昇」トレンドを変えることはないと予想しています。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Python辞書におけるカスタムオブジェクトの保存：参照と深いコピーの重要性</title>
        <link>https://ttf248.life/ja/p/python-dictionary-custom-objects-reference-vs-deepcopy/</link>
        <pubDate>Fri, 22 Mar 2024 01:08:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/python-dictionary-custom-objects-reference-vs-deepcopy/</guid>
        <description>&lt;p&gt;Python プログラミングにおいて、辞書は非常に強力なデータ構造であり、キーと値のペアを関連付け、効率的にデータを検索および操作することを可能にします。カスタムオブジェクトを辞書に格納しようとすると、通常、重要な概念である「Python におけるオブジェクトの代入は参照代入であり、オブジェクト自体の深いコピーではない」という点が重要になります。つまり、カスタムオブジェクトを辞書に入れる場合、辞書が格納しているのはそのオブジェクトへの参照であり、オブジェクトの新しいコピーではありません。&lt;/p&gt;
&lt;h2 id=&#34;カスタムオブジェクトの基本的な例&#34;&gt;カスタムオブジェクトの基本的な例
&lt;/h2&gt;&lt;p&gt;以下の簡単な &lt;code&gt;Person&lt;/code&gt; クラスを想定してください:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Person オブジェクトを作成
p1 = Person(&amp;quot;Alice&amp;quot;, 30)

# オブジェクトを辞書に保存
people_dict = {}
people_dict[&amp;quot;alice&amp;quot;] = p1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;code&gt;people_dict&lt;/code&gt; 辞書が &lt;code&gt;&amp;quot;alice&amp;quot;&lt;/code&gt; というキーを持つ項目を含み、その値は &lt;code&gt;Person&lt;/code&gt; 型の &lt;code&gt;p1&lt;/code&gt; オブジェクトへの参照です。  &lt;code&gt;p1&lt;/code&gt; の属性を変更すると:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1.age = 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;辞書からオブジェクトにアクセスする際に、その年齢も更新されていることに気づきます:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(people_dict[&amp;quot;alice&amp;quot;].age)  # 出力: 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは、辞書が &lt;code&gt;Person&lt;/code&gt; オブジェクトの独立したコピーを保存するのではなく、同じメモリ位置への参照を保持しているためです。&lt;/p&gt;
&lt;h2 id=&#34;深拷贝と浅拷贝の違い&#34;&gt;深拷贝と浅拷贝の違い
&lt;/h2&gt;&lt;p&gt;ネストされたデータ構造やカスタムオブジェクトを扱う場合、このような参照挙動は予期せぬ結果を引き起こす可能性があります。例えば、カスタムオブジェクトが可変型の属性（リストや別のカスタムオブジェクトなど）を含む場合、辞書に直接格納し変更すると、辞書から取得したオブジェクトにも影響が及ぶことがあります。&lt;/p&gt;
&lt;h2 id=&#34;深復元と浅復元の違い&#34;&gt;深復元と浅復元の違い
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Address:
    def __init__(self, street, city):
        self.street = street
        self.city = city

class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

address = Address(&amp;quot;Main St.&amp;quot;, &amp;quot;Springfield&amp;quot;)
p1 = Person(&amp;quot;Bob&amp;quot;, 40, address)
people_dict[&amp;quot;bob&amp;quot;] = p1

# 原始アドレスオブジェクトを修正
address.city = &amp;quot;Shelbyville&amp;quot;

# 辞書内の人のアドレスも変更される
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 出力：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解決策：深復元&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;深復元と浅復元の違い-1&#34;&gt;深復元と浅復元の違い
&lt;/h2&gt;&lt;p&gt;共有状態の問題を回避するために、辞書がオブジェクトの完全なコピーを格納するようにする必要がある場合があります（参照ではなく）。Python は &lt;code&gt;copy&lt;/code&gt; モジュール内の &lt;code&gt;deepcopy&lt;/code&gt; 関数を使用してこれを実現します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import copy

# オブジェクトを深復元で保存
people_dict[&amp;quot;bob_deepcopy&amp;quot;] = copy.deepcopy(p1)

# すると、元のアドレスオブジェクトを変更しても、深復元されたオブジェクトには影響しません
address.city = &amp;quot;Capital City&amp;quot;
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 出力：Capital City
print(people_dict[&amp;quot;bob_deepcopy&amp;quot;].address.city)  # 出力：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要するに、Python で辞書を使用してカスタムオブジェクトを保存する場合は、デフォルトでオブジェクト参照が格納されることに注意してください。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>澱粉腸と路端の屋台：資本のニュースへの影響力 (Dōhin&#39;garu to rukan no yatai: Capita no nyūsu e no eikyoku)</title>
        <link>https://ttf248.life/ja/p/sausages-and-street-vendors-capital-news-influence/</link>
        <pubDate>Mon, 18 Mar 2024 00:31:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/sausages-and-street-vendors-capital-news-influence/</guid>
        <description>&lt;p&gt;315 は実際には鶏骨泥の報道はなかった。この問題自体が、中央テレビ 3・15 晩会の公式暴露と同時期に発生した他の食品安全ホットスポット事件を混乱させている。&lt;/p&gt;
&lt;h2 id=&#34;知乎回答新闻学httpswwwzhihucomquestion648967411answer3433834122&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/648967411/answer/3433834122&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;知乎回答：新闻学&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;315晚会一共提出了九个厂家，里面并没有淀粉肠，而现在搞得那些被提名的大品牌完全没热度，倒是把淀粉肠这种国民级（全国各地小吃街基本都会有并且摊位量应该也是第一）的小吃拉出来说事，感觉淀粉肠完全就是被拉出来背锅的。我找了网上的新闻来源，一个央广网在3.… 15日にハムの調査記事を配信しましたが、製法メーカーをいくつかリストアップするに留まり、主要な澱粉腸メーカーではなかったことや、成分分析からは異常は見出せませんでした。その後、ある工場関係者から「鶏ガラ泥を鶏肉の代わりに使用しているという噂がある」と聞き、彼女は淘宝でペットフード店が販売している鶏ガラ泥について、「人間が食べられるか？」と問い合わせました。これは明らかに突飛な質問ではありませんか？ペットフードメーカーが人間食用を謳うものがあるのに、なぜこんなことを？ その後、この情報が拡散され、澱粉腸に含まれているという噂が広まりました。これにより、多くの工場が閉鎖される可能性があり、全国各地の数十万人の小売業者も、在庫が売り切れずに困窮する状況に陥っています。&lt;/p&gt;
&lt;h2 id=&#34;人間の真実&#34;&gt;人間の真実
&lt;/h2&gt;&lt;p&gt;潇湘報によると3月16日、河南三門峡で「淀粉腸の崩落」の2日後、あるおばさんが淀粉腸を販売する出店を始めたが、2時間経っても全く人が現れず、最終的に彼女自身が黙々と淀粉腸を食べた。撮影者は、「自分は普段1回4～5本なら食べられる淀粉腸だが、鶏骨と泥が入っていることを知り、食べるのを拒否した」と語る。当日、彼は自分が暴露されると誰かが淀粉腸を買うのだろうかと好奇心を持って見守っていたが、2時間も売れずに1本も売れなかったのを見て愕然とした。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;おばさんは何があったのか全く知らなかった。彼女はただ今日の突然の売り上げ不振を知っただけだ。&lt;/li&gt;
&lt;li&gt;おばさんの間違いではない。彼女はただ生活のために生きる方法を模索しているだけで、製品に問題があることや合格であるかどうかがわからず、骨泥とは何かも知らない。彼女たちはインターネットを知らず、底辺の人々として生きるために工夫をしているのだ。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;知乎回答規制不利httpswwwzhihucomquestion648967411answer3433978475&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/648967411/answer/3433978475&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;知乎回答：規制不利&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;数年前の一度の午後、私は北漂の同僚とランチを食べに行き、ある肉まんや鉄板焼きのお店を通りかかった。
私は「今のこのようなブラックテクノロジーのちり腸や里脊肉を食べるのか？」と言った。なぜなら、私の考えでは、最後にちり腸を食べたのは大体10年以上前だったからだ。
同僚はしばらく躊躇し、そして「おそらくあなたは都会で暮らしているからでしょう。実は私たちの故郷のような小さな町では、塩漬けキャベツ、インスタントラーメン、ハムが毎日の生活です。」と言った。
私は学生時代に成績優秀だった時だけ、父が私を学校の途中で焼き肉を食べるようにさせた。衛生面の問題ではなく、焼き肉は結局1.5元で2キロの野菜を買えるからだ。 「カップラーメンや炭酸飲料、辛棒を「ジャンクフード」と呼ぶ言い方を聞いたのは、北京で学始めた頃だった。」
自分の無心な言葉遣いに対する傲慢さを悟り、黙って言葉を止めました。しかし、この一件は深く印象に残っています。
実際には、これが中国の大半の人々の日常なのです。
彼らの生活には、高尚な「地中海式食事」や「有機野菜」、「遺伝子組み換えでない大豆」といったものは存在しません。彼らが気にするのは、安くて美味しい野菜や肉、お菓子を手に入れることだけです。
家族全員で、わずかな幸せを分かち合うのです。
そして、スーパーに並んだ商品は、どのような成分から作られているのか、健康を害する可能性はないのか、奇妙な化学物質が含まれていないのかなど、それを気にすることになるのです。
本来、彼らが気付けることでも理解できることでもありません。&lt;/p&gt;
&lt;h2 id=&#34;知乎回答規制不利httpswwwzhihucomquestion648967411answer3433978475-1&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/648967411/answer/3433978475&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;知乎回答：規制不利&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;しかし、315に見たことによって、そうではないことがわかった。
市場に出回る電子秤やガソリンスタンドの給油機には、高度な技術で改造された基板が隠されており、UP主が挨打のリスクを冒して動画を撮影する必要があったり、規制当局が「ようやく気づいた」ように調査・摘発したりする状況だった。
&lt;strong&gt;ライブ配信での梅菜肉や、露店で売られている魚漿（およぎょう）は、腐った肉と骨粉を使っていたことが判明し、央視の記者らが臥底（わどち）になって調査撮影する必要があったため、それが検証され、出所を特定されることになった。&lt;/strong&gt;
テレビ番組や空港広告などで大々的に宣伝されていた「健康酒」も、誰かが動画で暴露したことで一夜にして緊急撤去され、市民の前から姿を消した。
年に一度の315は、毎回同じように数社を摘発するだけで十分なのか？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>新規に設置した10Gbps光回線なのに、なぜ速度が1Gbpsしか出ないのか？</title>
        <link>https://ttf248.life/ja/p/gigabit-fiber-slow-speed/</link>
        <pubDate>Mon, 18 Mar 2024 00:29:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/gigabit-fiber-slow-speed/</guid>
        <description>&lt;p&gt;自宅のネットワークを驚くほど高速にしたいですか？鍵はケーブルの種類、光猫、ルーターの設定、そして些細なディテールを理解することです。この記事では、6種類のケーブルを使ってテラビット級のネットワークを構築する方法と、簡単なデバイスチェックと設定で、あなたのネットワーク速度が制限されないようにする方法について、簡単に解説します。さあ、一緒に探求して、自宅のネットワークを高速化しましょう！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/gigabit-fiber-slow-speed/image.png&#34;
	width=&#34;1001&#34;
	height=&#34;590&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;手動修復&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;407px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第1章ネットワーク伝送媒体の徹底分析&#34;&gt;第1章：ネットワーク伝送媒体の徹底分析
&lt;/h2&gt;&lt;p&gt;千Gb級ネットワーク接続を実現する際、情報を高速に伝送するための担い手であるケーブルが極めて重要な役割を果たします。以下では、カテゴリ5、カテゴリ6、カテゴリ7ケーブルについて詳細な解説を行います。&lt;/p&gt;
&lt;h3 id=&#34;1-五類ケーブルcat5&#34;&gt;1. &lt;strong&gt;五類ケーブル（CAT5）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;五類ケーブル、別名CAT5は、最も普及した初期のツイストペアケーブルの一種であり、各対線芯を精密ならせん構造で設計することで、クロスプレーク（串扰）を低減します。主に10/100Mbpsの高速以太ネットで使用され、最大伝送周波数約100MHzですが、現在の千ギガビット級、さらにはそれ以上の速度を求めるニーズにおいては、物理的な制限から五類ケーブルは要求を満たせません。&lt;/p&gt;
&lt;h3 id=&#34;2-六類ケーブルcat6&#34;&gt;2. &lt;strong&gt;六類ケーブル（CAT6）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;技術の発展に伴い、六類ケーブルが登場しました。五類ケーブルと比較して、六類ケーブルはより厳格な製造基準と先進的な構造設計を採用しており、干渉耐性を大幅に向上させ、伝送効率を高めています。1Gbpsまでの伝送速度をサポートし、理想的な条件下では伝送距離が100メートルにも達するため、千兆ネットワークへの接続要件を満たすのに適しています。&lt;/p&gt;
&lt;h3 id=&#34;3-七類ケーブルcat7&#34;&gt;3. &lt;strong&gt;七類ケーブル（CAT7）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;七類ケーブルは、現在のツイストペアケーブル技術における最先端の水準を代表しています。伝送速度において飛躍的な向上を実現し、理論上では最大10Gbpsの超高速率をサポートするだけでなく、設計段階で完全なシールドシステムを採用しており、各配線対間のシールドに加え、全体の外層シールドも含まれています。これにより、外部電磁干渉や近傍串波を大幅に低減し、データ伝送の安定性と正確性を保証します。ただし、七類ケーブルは主に将来の10Gbイーサネットまたは特定の要件の高い環境向けです。&lt;/p&gt;
&lt;p&gt;千兆家庭ネットワーク環境の構築において、千兆光ファイバーの潜在能力を最大限に引き出すためには、六類ケーブルが最も経済的かつ効率的な選択肢となります。また、すべての接続ケーブルの品質が合格していることを確認し、標準に従った接線方法で作業を行うことも、ネットワーク性能を確保するための重要な要素です。&lt;/p&gt;
&lt;h2 id=&#34;第2章深層ウェブの中枢デバイスの調査---光猫ルーターlanポート帯域幅の影響&#34;&gt;第2章：深層ウェブの中枢デバイスの調査 - 光猫、ルーターLANポート帯域幅の影響
&lt;/h2&gt;&lt;h3 id=&#34;光猫とそのlanポート帯域幅の重要性&#34;&gt;光猫とそのLANポート帯域幅の重要性
&lt;/h3&gt;&lt;p&gt;光猫（光ファイバーモジュレーター・デコーダー）は、家庭用ブロードバンド接続における主要な機器であり、その機能は光ファイバー内の光信号をデジタル信号に変換し、家庭内ネットワークデバイスで使用するために供与するものです。千兆光回線ユーザーの場合、光猫が千兆伝送をサポートしているかどうかが特に重要になります。もし光猫のWANポートが10Gb（百兆）のみをサポートする場合、入宅光ファイバーの速度が高くても、このボトルネックによって10Gb以内に制限されてしまう可能性があります。同様に、光猫のLANポートも千兆出力能力を備えている必要があり、それ以外に接続されるルーターやその他のデバイスが、その真の千兆レートを取得できないのです。&lt;/p&gt;
&lt;h3 id=&#34;ルーターのlanポート帯域幅の役割&#34;&gt;ルーターのLANポート帯域幅の役割
&lt;/h3&gt;&lt;p&gt;ルーターのLANポートは、受信したデータを各ターミナルデバイスに分派する役割を担います。ルーターのLANポートが単に10Gbps（百兆）の場合、他のデバイスの設定がどれほど優れていても、局所網通信は10Gbpsの速度でしか実現できません。したがって、千兆家庭ネットワークを構築する場合、ルーターのWANポートが千兆データを受信し、LANポートも千兆レベルのデータ出力能力を提供できるようにすることが重要です。これにより、ご自宅のすべてのスマートデバイスが高速ネットワークによるスムーズな体験を楽しむことができます。&lt;/p&gt;
&lt;p&gt;さらに、一部の古いまたは低端のルーターには、LANポートの帯域幅自動交渉メカニズムが存在する場合があります。これは、ルーター自体が千兆をサポートしていても、ケーブルやデバイスの互換性などの理由により、10Gbpsモードに降格してしまう可能性があることを意味します。 したがって、ルーターパラメータを正しく設定し、強制1ギガビットモードを有効化し、1ギガビットスイッチまたは直結デバイスと組み合わせることは、全1ギガビットネットワークを実現するための重要なステップの1つです。&lt;/p&gt;
&lt;p&gt;1ギガビット光ファイバーにアップグレードした場合は、必ず1ギガビットオプト（光猫）および1ギガビットルーターに交換し、すべてのポートが1ギガビットレベルになっていることを確認してください。&lt;/p&gt;
&lt;h2 id=&#34;第3章隠された謎--一本の断線したサブラインがテラバイト級ネットワークの速度にどのように影響するか&#34;&gt;第3章：隠された謎 – 一本の断線したサブラインがテラバイト級ネットワークの速度にどのように影響するか
&lt;/h2&gt;&lt;h3 id=&#34;子線故障とネットワーク性能の低下&#34;&gt;子線故障とネットワーク性能の低下
&lt;/h3&gt;&lt;p&gt;測定期間中にネットワークが常に接続を維持し、明らかな切断状態は発生しませんでした。これは新入戸でのブロードバンド導入であり、弱電箱内に配線が散らかっており、光猫のケーブルや電源インターフェース、延長コードの位置を時々調整していたため、偶発的に測定速度が千兆に達することがありました。&lt;/p&gt;
&lt;p&gt;上記の資料に基づき、ケーブルの種類、光猫のLANポート速度などを分析・調査しましたが、最終的には原因はケーブル内部の一本の茶色の子線が断裂していることが判明しました。&lt;/p&gt;
&lt;p&gt;断裂の原因：作業員が水晶頭を設置する際に、このケーブルを少し強く引っ張ったため、子線が半分ほど断ち切られ、完全に切り離されずにいました。その後、光猫の位置を調整する際に、繰り返し移動させることで、最終的に完全に断裂してしまいました。&lt;/p&gt;
&lt;h3 id=&#34;ケーブルの種類8本の機能解析&#34;&gt;ケーブルの種類8本の機能解析
&lt;/h3&gt;&lt;p&gt;六類網線はTIA/EIA-568-B規格に準拠し、8本の双絞り線を含みます。以下のカラーコードに従っています：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;白橙 / 橙 (しろおげ / おげ)&lt;/li&gt;
&lt;li&gt;白緑 / 緑 (しろりょく / りょく)&lt;/li&gt;
&lt;li&gt;白藍 / 藍 (しろらん / らん)&lt;/li&gt;
&lt;li&gt;白棕 / 棕 (しろしゅん / しゅん)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;千兆イーサネット（1000BASE-T）の規格下では、これらの8本の線の中から4対の線が同時に動作します。具体的な分担は以下の通りです：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白橙と橙のペア (1&amp;amp;2) は、送信データ (Tx+/-) 用です；&lt;/li&gt;
&lt;li&gt;白緑と緑のペア (3&amp;amp;6) は、受信データ (Rx+/-) 用です；&lt;/li&gt;
&lt;li&gt;白藍と藍のペア (4&amp;amp;5) および白棕と棕のペア (7&amp;amp;8) は、千兆イーサネットでは当初主用途ではありませんが、高度なアプリケーション（例えば、一部PoE給電や将来の技術拡張など）で有効化されることがあります。従来の10ギガビットネットワークでは、1, 2, 3, 6 の4本の線を使用するだけで十分です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;断裂子線がネットワーク速度に与える影響&#34;&gt;断裂子線がネットワーク速度に与える影響
&lt;/h3&gt;&lt;p&gt;上記の場合において、もし褐色の子線（すなわち棕線または棕白線）が断裂した場合、理論上は千兆ネットワーク環境下で速度低下を引き起こす可能性があります。なぜなら、千兆ネットワークではすべての４対の線が同時に双方向で伝送することで満速を実現するからです。しかし、家庭用ネットワーク機器には自動ネゴシエーション機能が搭載されており、ケーブルに問題があることを検知すると、正常に動作可能な低いレートモード（すなわち百兆モード）に回帰するため、これが百兆モードでも一根子線が断裂しても接続を維持し、百兆速度で動作することが可能である理由を説明しています。&lt;/p&gt;
&lt;p&gt;要するに、一根棕色子線が断裂しても百兆ネットワークの基本的な動作には影響しませんが、千兆ネットワーク環境下では、それがネットワーク速度を制限する重要な要因となる可能性があります。 徹底的な診断と修復を行うまでには、千兆光ファイバーの全 potensi を引き出すことはできません。これは、同様の問題に遭遇した場合には、潜在的なネットワークインフラストラクチャの問題を無視してはならないことを示唆しています。たとえ基本的な接続に影響を与えないように見える小さな故障であっても、高速なネットワーク体験における隠れた障害となる可能性があります。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>WPFにおけるUIスレッドとフリーズ問題とその解決策</title>
        <link>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-solutions/</guid>
        <description>&lt;p&gt;デスクトップアプリケーションの開発、特にWindows Presentation Foundation (WPF) などのフレームワークを使用してリッチクライアントアプリケーションを構築する際には、ユーザーインターフェース（UI）スレッドの適切な処理が、アプリケーションの応答性およびスムーズな動作を保証するために非常に重要です。UIスレッド、またはメインスレッドは、ウィンドウやコントロールのイベント、レイアウト計算、およびUIの描画を担当するコアのスレッドです。UI要素とやり取りするすべての操作は、UIスレッド上で実行する必要があります。これは、WPFを含むほとんどのGUIフレームワークが遵守する基本的な原則です。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドとは&#34;&gt;UIスレッドとは？
&lt;/h2&gt;&lt;p&gt;UIスレッドは、WPFアプリケーションが起動される際にオペレーティングシステムによって作成され、初期化されるアプリケーションのメインウィンドウです。これは、アプリケーション内でUIコンポーネントの状態を直接アクセスし、変更できる唯一のスレッドです。つまり、ボタンのクリック、テキストボックスへの入力、ウィンドウサイズの変更など、すべてのユーザーインタラクションが発生したイベントは、このスレッドコンテキストで処理されます。さらに、WPFの依存性プロパティシステム、データバインディングメカニズム、レイアウトロジックもすべてUIスレッド上で同期的に実行されます。&lt;/p&gt;
&lt;h2 id=&#34;uiフリーズとその原因&#34;&gt;UIフリーズとその原因
&lt;/h2&gt;&lt;p&gt;UIスレッドが長時間占有またはブロックされると、例えば、時間のかかる計算、大量のデータ読み込み、データベースクエリ、その他のI/O密度の高いタスクを実行する場合、UIスレッドがユーザーからのインタラクションリクエストにタイムリーに対応できなくなり、結果として画面がフリーズ（Freeze）、つまり私たちがよく言う「カドト」が発生します。このような状況下では、ユーザーはアプリケーションの遅延や不自然さを明確に感じ、最悪の場合、「Application Not Responding」（ANR）警告が表示されます。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドの基本ルール２つ&#34;&gt;UIスレッドの基本ルール２つ
&lt;/h2&gt;&lt;p&gt;上記のような状況を回避するため、WPF開発者は以下の２つの重要なルールに従う必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UIスレッドで時間がかかる処理を実行しない&lt;/strong&gt;: UIスレッドがブロックされる可能性のある操作は、可能な限りバックグラウンドスレッドで実行し、UIスレッドがユーザーの入力や画面の変化に迅速に対応できるようにする必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非UIスレッドから直接UI要素を更新しない&lt;/strong&gt;: WPFのセキュリティメカニズムにより、UIスレッドのみがUI要素の変更を行う権限を持っています。別のスレッドから直接UIの状態を変更しようとすると例外が発生します。したがって、バックグラウンドスレッドで計算やデータ準備が完了した場合でも、適切なクロススレッド通信メカニズムを使用して結果をUIに表示する必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解決策非同期プログラミングとスレッドセーフなアップデート&#34;&gt;解決策：非同期プログラミングとスレッドセーフなアップデート
&lt;/h2&gt;&lt;p&gt;UIのフリーズを防ぎつつ、時間のかかるタスクを実行するために、WPFは開発者がこの目標を達成するための様々な非同期プログラミングモデルやツールを提供しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dispatcherオブジェクト&lt;/strong&gt;: WPFのDispatcherクラスを使用すると、タスクをUIスレッドのキューに配置して実行できます。&lt;code&gt;Dispatcher.Invoke&lt;/code&gt;または&lt;code&gt;Dispatcher.BeginInvoke&lt;/code&gt;メソッドを使用して、バックグラウンドスレッドからUIを安全に更新できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;async/awaitキーワード&lt;/strong&gt;: C#言語の非同期特性を活用し、&lt;code&gt;await&lt;/code&gt;キーワードを使用してバックグラウンドタスクが完了するのを待機し、完了後にUI更新コードを実行する非同期メソッドを作成できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ケース-ケース--例-れい&#34;&gt;ケース (ケース) / 例 (れい)
&lt;/h2&gt;&lt;h3 id=&#34;dispatcherinvokeメソッドを使用してuiを更新する&#34;&gt;&lt;code&gt;Dispatcher.Invoke&lt;/code&gt;メソッドを使用してUIを更新する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // これは時間のかかる操作であると仮定します
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // ここは時間のかかる計算メソッドのシミュレーションです

        // 時間のかかる操作が完了したら、UIスレッドでUIを更新します
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;結果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 時間のかかる操作をシミュレーションします
    Thread.Sleep(5000);
    return &amp;quot;完了&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;asyncawaitキーワードとtaskrunの組み合わせ&#34;&gt;&lt;code&gt;async/await&lt;/code&gt;キーワードと&lt;code&gt;Task.Run&lt;/code&gt;の組み合わせ
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // ユーザーが繰り返しクリックするのを防ぐ

    try
    {
        // バックグラウンドタスクを開始
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // バックグラウンドタスクが完了したら、UIスレッドに自動的に切り替えてUIを更新
        LabelStatus.Text = $&amp;quot;計算結果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;エラーが発生しました: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // ボタンを再度有効にする
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>GCCバージョンをアップグレードした結果、プログラムがクラッシュしました。コードの記述ルールの欠如による問題点です。</title>
        <link>https://ttf248.life/ja/p/gcc-upgrade-causes-program-crash-code-irregularities/</link>
        <pubDate>Sun, 10 Mar 2024 23:19:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/gcc-upgrade-causes-program-crash-code-irregularities/</guid>
        <description>&lt;p&gt;同一段業務コードにおいて、プログラムは CentOS 7 環境下で正常にコンパイルおよび実行されていたが、CentOS 8 に切り替えて更新版の GCC でコンパイルを行った際に、プログラムがクラッシュするようになった。注目すべき点は、問題が &lt;strong&gt;Release モード&lt;/strong&gt; 下でのみ発生し、&lt;strong&gt;Debug モード&lt;/strong&gt; では完全に問題が発生しない点である。これは初めて遭遇するケースであり、3日間の調査を経て、問題の原因を特定することができた。&lt;/p&gt;
&lt;h3 id=&#34;問題の特定&#34;&gt;問題の特定
&lt;/h3&gt;&lt;p&gt;一番の原因究明の結果、問題の本質は &lt;strong&gt;関数に返り値がないこと&lt;/strong&gt; にあります。リリースモードにおいて、GCCの新バージョンではより多くの最適化が行われるため、本来返り値のない関数が実行中に未知のロジックが発生し、クラッシュを引き起こしました。結論として、&lt;strong&gt;コンパイラの警告を無視することは許されません。特に、古いプロジェクトにおいては、一部の警告が無視される可能性がありますが、すべての警告を無効にすることは避けるべきです&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;環境説明&#34;&gt;環境説明
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CentOS 7 GCCバージョン:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CentOS 8 GCCバージョン:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;クラッシュ現象&#34;&gt;クラッシュ現象
&lt;/h3&gt;&lt;p&gt;プログラムのクラッシュに関するスタックを分析した結果、以下のスタック情報が得られました：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[New LWP 1385902]
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib64/libthread_db.so.1&amp;quot;.
Core was generated by `./pstack_main`.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007ffe894b4420 in ?? ()
(gdb) bt
#0  0x00007ffe894b4420 in ?? ()
#1  0x00000000004008e9 in main ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このスタックは直感的ではありません。クラッシュ関数のスタック情報が &lt;code&gt;??&lt;/code&gt; と表示されるため、問題の特定がさらに複雑になります。&lt;/p&gt;
&lt;h3 id=&#34;コード例&#34;&gt;コード例
&lt;/h3&gt;&lt;p&gt;問題をより良く理解するために、クラッシュを再現するための最小コード例を示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int test() {
    std::cout &amp;lt;&amp;lt; &amp;quot;1&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    test();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このコード内の &lt;code&gt;test()&lt;/code&gt; 関数は明らかに値を明示的に返していません。また、その戻り値の型は &lt;code&gt;int&lt;/code&gt; です。C++ 仕様によると、関数が &lt;code&gt;int&lt;/code&gt; 型で宣言されている場合、必ず戻り値を持つ必要があります。そうしないと、未定義動作を引き起こす可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;コンパイル警告&#34;&gt;コンパイル警告
&lt;/h3&gt;&lt;p&gt;当方のプロジェクトにおいて、CMake スクリプトが多くのコンパイル時の警告を抑制しており、その中に以下の警告情報が含まれています：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/root/pstack/main.cpp: In function ‘int test()’:
/root/pstack/main.cpp:7:1: warning: no return statement in function returning non-void [-Wreturn-type]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この警告は、&lt;code&gt;test()&lt;/code&gt; 関数が戻り値を持たないことを示しており、これがまさに問題の原因です。GCC の高バージョン（例：8.5.0）では、コードを最適化する際にこのような未定義の動作に対して不安定な最適化を行う可能性があり、プログラムがクラッシュする原因となる可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;어셈블리-코드-차이점&#34;&gt;어셈블리 코드 차이점
&lt;/h3&gt;&lt;p&gt;GCC 컴파일러 최적화 동작의 차이를 설명하기 위해, 서로 다른 버전의 GCC가 생성한 어셈블리 코드를 비교했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GCC 4.8.5 생성된 어셈블리 코드:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;어셈블리 코드가 다소 길고 표준 출력 스트림(예: &lt;code&gt;std::cout&lt;/code&gt;) 처리 로직을 포함하고 있습니다. 이는 컴파일러가 &lt;code&gt;test()&lt;/code&gt; 함수에서 누락된 반환 값 문제에 대해 과도하게 최적화하지 않았음을 나타내며, 이로 인해 잠재적으로 충돌을 피했을 수 있음을 시사합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GCC 8.5.0 생성된 어셈블리 코드:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;새로운 버전의 GCC는 더 많은 최적화를 수행하여 코드 양을 줄였습니다. 그러나 이러한 최적화가 누락된 반환 값을 갖는 함수의 실행 동작이 불확실하게 만들 수 있으며, 이는 프로그램 충돌로 이어질 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論
&lt;/h3&gt;&lt;p&gt;今回の問題解決を通して、C++において&lt;strong&gt;関数が返す値は明確に定義されるべきである&lt;/strong&gt;という点を深く認識しました。特に、関数を&lt;code&gt;int&lt;/code&gt;型として宣言する場合、必ず戻り値を提示する必要があります。旧バージョンのコンパイラを使用しているプロジェクトでGCCの新しいバージョンにアップグレードした場合、より多くの最適化や厳格な警告メカニズムが導入される可能性があります。そのため、コンパイル時に&lt;strong&gt;すべての警告を無効化しない&lt;/strong&gt;ことを推奨します。代わりに、関数が返す値、型の一致など、一般的な問題に対して選択的に対処する必要があります。
最終的に、&lt;code&gt;test()&lt;/code&gt;関数に戻り値を付与することで問題は解決し、プログラムは正常に動作するようになりました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>VMware仮想マシンのCPUリソース使用量異常</title>
        <link>https://ttf248.life/ja/p/vmware-virtual-machine-cpu-usage-anomaly/</link>
        <pubDate>Sun, 10 Mar 2024 22:14:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/vmware-virtual-machine-cpu-usage-anomaly/</guid>
        <description>&lt;p&gt;背景：ローカルマシンにデプロイされたWindows版の業務システムで、CPU使用率が約5％です。VMwareにインストールしたCentOS8上にLinux版の業務システムをデプロイし、リソース使用量に異常が見られます。&lt;/p&gt;
&lt;h2 id=&#34;問題の説明&#34;&gt;問題の説明
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ホストマシン：Windows 10 エディション&lt;/li&gt;
&lt;li&gt;VMware：17.5&lt;/li&gt;
&lt;li&gt;仮想マシン：CentOS8
仮想マシンのリソース配分は&lt;code&gt;4C8GB&lt;/code&gt;で、ビジネスシステムを起動します。ビジネスシステムが仮想マシンLinuxシステムにデプロイされており、仮想マシン内部のtopコマンドでシステムのリソース使用率を確認すると、CPU使用率は高くありません。外側のWindowsシステムでタスクマネージャーで確認したCPUリソース使用率は非常に高く、プロセスを確認すると、VMware プロセスがCPUリソースを大量に使用していることがわかります。
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+
|         Windows           |
|                           |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|   |      VMware        |  |
|   |      Program       |  |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|                           |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;知識点&#34;&gt;知識点
&lt;/h2&gt;&lt;p&gt;この問題のトラブルシューティングは、スムーズに進まず、原因はビジネスシステム自体ではなく、仮想マシンの問題にある。通常のビジネスコードからの思考を、システム負荷に転換し、さらに負荷データの異常から、スワップ中断へと追跡し、最終的に重要なポイントにたどり着くには、VMwareのスワップ中断のパフォーマンスに影響を与えるものは何か？ 本稿ではまず各知識点を解説し、最後に解決策を示す。&lt;/p&gt;
&lt;h3 id=&#34;hyper-v&#34;&gt;Hyper-V
&lt;/h3&gt;&lt;p&gt;Windowsオペレーティングシステムの仮想化技術において、大きな変革がありました。Microsoftが最初にWSL（Windows Subsystem for Linux）をリリースした際、Hyper-Vサービスを有効にすると、VMware仮想マシンの同時使用ができなくなっていました。その後、バージョンアップにより、VMwareはHyper-Vサービスと互換性を持つようになりました。&lt;/p&gt;
&lt;h3 id=&#34;システム負荷&#34;&gt;システム負荷
&lt;/h3&gt;&lt;p&gt;Linuxシステムにおいて、「負荷」（load）とは、実行中または実行を待っているプロセスの数を指します。負荷は通常、1分間、5分間、および15分間の実行キュー内の平均プロセス数という3つの数字で表されます。これらの数字は、「uptime」コマンドまたは「top」コマンドを実行することで確認できます。&lt;/p&gt;
&lt;p&gt;具体的には、この3つの数字はそれぞれ以下の意味を持ちます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;1分負荷&lt;/strong&gt;: システムが過去1分間に実行キュー内に存在していた平均プロセス数です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5分負荷&lt;/strong&gt;: システムが過去5分間に実行キュー内に存在していた平均プロセス数です。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;15分負荷&lt;/strong&gt;: システムが過去15分間に実行キュー内に存在していた平均プロセス数です。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;負荷の意味は、システム内で待っているプロセスの数です。 もしこの数値がシステムのロジックCPU数よりも高い場合、システム負荷が高いことを示し、多くのプロセスがプロセッサーリソースを待っている状態であることを意味します。これにより、システムが遅くなるか応答しない原因となる可能性があります。これは、負荷の高さとシステムの構成および性能によって異なります。&lt;/p&gt;
&lt;p&gt;理想的には、負荷はシステムのロジックCPU数内に保たれるべきで、そのようにすればシステムの性能を最適化できます。負荷が継続してCPU数を超過する場合は、システム内のプロセスをさらに分析し、負荷の原因を特定し、適切な対策としてリソースの割り当てを調整するか、プロセスの実行方法を最適化する必要があります。&lt;/p&gt;
&lt;h3 id=&#34;負荷分析---mpstat&#34;&gt;負荷分析 - mpstat
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;mpstat&lt;/code&gt; コマンドは、個々のプロセッサまたは複数のプロセッサに関するさまざまな情報を報告します。これには、平均負荷、CPU使用率、割り込み、コンテキストスイッチングなどが含まれます。 &lt;code&gt;sysstat&lt;/code&gt; パッケージに含まれる &lt;code&gt;mpstat&lt;/code&gt; は、システムの負荷状況を分析するための非常に便利なツールです。以下に、&lt;code&gt;mpstat&lt;/code&gt; を使用した負荷分析の手順を示します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sysstat のインストール:&lt;/strong&gt;
システムに &lt;code&gt;sysstat&lt;/code&gt; がインストールされていない場合は、お使いのシステムに適したパッケージマネージャを使用してインストールしてください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;mpstat の実行:&lt;/strong&gt;
&lt;code&gt;mpstat&lt;/code&gt; コマンドを実行して、CPUの使用状況と負荷を確認します。デフォルトでは、&lt;code&gt;mpstat&lt;/code&gt; は1秒ごとにCPU使用率の平均値を表示します。出力頻度を調整するには、時間間隔を指定できます。 例：毎秒1回で &lt;code&gt;mpstat&lt;/code&gt; を実行するには、次のコマンドを使用します: &lt;code&gt;mpstat -P ALL 2&lt;/code&gt;、&lt;code&gt;irq&lt;/code&gt; はリソース使用率を示します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;出力の分析&lt;/strong&gt;：
&lt;code&gt;mpstat&lt;/code&gt; の出力には、各 CPU の利用率とシステム全体の平均負荷が含まれます。特に平均負荷と各 CPU の利用率に注目することで、システムの負荷状況を把握できます。負荷が高い場合は、どのプロセスが原因となっているか、パフォーマンスボトルネックがないかなどをさらに分析する必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;負荷の分析-mpstat&#34;&gt;負荷の分析 mpstat
&lt;/h3&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;他のツールとの組み合わせ&lt;/strong&gt;：
&lt;code&gt;mpstat&lt;/code&gt; 以外にも、&lt;code&gt;sar&lt;/code&gt;、&lt;code&gt;pidstat&lt;/code&gt;、&lt;code&gt;iostat&lt;/code&gt;などのツールを組み合わせて、システムパフォーマンスを総合的に分析できます。複数のツールの出力を組み合わせることで、より詳細にシステムの負荷状況を把握し、問題の原因を特定することができます。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;割り込み&#34;&gt;割り込み
&lt;/h3&gt;&lt;p&gt;内容を過度に詳細に説明することは避け、
推奨: &lt;a class=&#34;link&#34; href=&#34;https://www.codedump.info/post/20200522-sgfap-softirq/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;アプリケーション開発者向けシステムガイド CPU編 - ソフトウェア割り込み&lt;/a&gt;
頻繁にソフトウェア割り込みをトリガーすると、システム負荷にも反映されます。&lt;/p&gt;
&lt;h2 id=&#34;問題のトラブルシューティング&#34;&gt;問題のトラブルシューティング
&lt;/h2&gt;&lt;p&gt;CPUのみから分析するだけでは問題の原因を特定できないため、システムに異常が発生していないか疑うべきでしょうか？ 可能性がありますそれは、Linuxオペレーティングシステムの負荷が高すぎることで、VMwareが過剰なCPUリソースを使用していることです。 &lt;code&gt;mpstat&lt;/code&gt;を使用してローカル仮想マシンを分析したところ、&lt;code&gt;irq&lt;/code&gt;の使用量が異常で、1つのコアが約25%に達しており、正常時にはビジネスプロセスを開始する際に空転する場合、&lt;code&gt;irq&lt;/code&gt;の割合は約5%であるはずでした。&lt;/p&gt;
&lt;p&gt;グループ内の同僚の開発環境では、彼のCentOS 7がVMware上でデプロイされており、リソース使用量は正常です。 一方、上海の開発環境では、VMware上にありますが、ホストマシンのCPUリソース状況を直接観察することはできません。 このとき、当社は複数の変数に直面しています：VMware仮想マシン、Linuxオペレーティングシステム、およびGCCバージョン。 - テスト環境の分析に切り替わり、深圳のテスト環境は物理マシン上に低バージョンのGCCコンパイルサービスを実行しており、CentOS 8上で動作している。興味深いことに、深圳環境では&lt;code&gt;irq&lt;/code&gt;占有率は正常だった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GCCバージョンによる問題の特定のため、高バージョンのGCCでコンパイルされたプログラムを深圳環境にデプロイしてテストを実施したが、結果も同様に正常であった。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;問題がより明確になり始め、オペレーティングシステムに問題があるのではないかと疑念が生じた。毕竟、CentOS 8はすでに公式サポートを受けていないためである。しかし、純粋なCentOS 7とCentOS 8を再デプロイしても問題は解決しなかった。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;問題のトラブルシューティング-1&#34;&gt;問題のトラブルシューティング
&lt;/h2&gt;&lt;p&gt;この時、我々は唯一の不確実な要素、すなわちVMware仮想マシンのソフトウェアに疑念を抱く。突然、閃きを得て、Hyper-V技術のことを思いついた。以前にHyper-Vが有効になっていたものの、完全にシャットダウンしていなかったために、これが原因である可能性はないか？毕竟、ソフト中断も仮想マシンソフトウェアを通じて実現されているからだ。異なる仮想マシンの仮想化技術にはバグが存在する可能性があるのか。これらの問題は深く考える価値があるし、調査する必要がある。&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;マイクロソフト公式のマニュアルに従い、本機のHyper-Vサービスを完全に停止した後、VMwareがホストマシン上で正常に動作することが確認されました。これで問題はついに解決に至りました。当初述べたように、この経験は曲折で困難なものであり、包括的な分析と判断が必要でした。また、今回初めて問題の特定と仮想マシンへの定位を行いました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor
bcdedit /set hypervisorlaunchtype off
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43;プログラミングにおける罠：`std::map`の誤用がプログラムをクラッシュさせることの詳細な解説</title>
        <link>https://ttf248.life/ja/p/cpp-programming-traps-std-map-crash-details/</link>
        <pubDate>Sun, 10 Mar 2024 22:03:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-programming-traps-std-map-crash-details/</guid>
        <description>e&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;C++標準ライブラリにおいて、&lt;code&gt;std::map&lt;/code&gt;は連想コンテナであり、キー（key）の昇順に要素を格納し、効率的なキーワード検索機能を提供します。しかし、初心者開発者は、&lt;code&gt;std::map&lt;/code&gt;における角括弧演算子 &lt;code&gt;[]&lt;/code&gt; の動作について理解不足なために苦慮することがあります。実際には、&lt;code&gt;[]&lt;/code&gt; を使用して存在しないキーにアクセスした場合、&lt;code&gt;std::map&lt;/code&gt; は新しいキー値ペアを挿入し、デフォルトコンストラクタを使用してそのキーに対応する値の型を初期化します。 ```cpp
#include &lt;iostream&gt;
#include &lt;map&gt;&lt;/p&gt;
&lt;p&gt;int main() {
std::map&amp;lt;std::string, int&amp;gt; myMap;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 誤った使い方：キーが存在しないと仮定し、値が0になることを期待する
std::cout &amp;lt;&amp;lt; &amp;quot;Value for &#39;nonexistent_key&#39;: &amp;quot; &amp;lt;&amp;lt; myMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;

// 実際には、上記の行のコードは新しいキーと値のペアを作成し、その値はintのデフォルト値（通常は0）で初期化される
return 0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-##&#34;&gt;C++標準ライブラリにおいて、`std::map`は連想コンテナであり、キー（key）の昇順に要素を格納し、効率的なキーワード検索機能を提供します。しかし、初心者開発者は、`std::map`における角括弧演算子 `[]` の動作について理解不足なために、困惑することがあります。実際には、`[]` を使用して存在しないキーにアクセスした場合、`std::map` は新しいキー値ペアを挿入し、デフォルトコンストラクタを使用してそのキーに対応するの値タイプが初期化されます。

## 本文
上記のコードは直接プログラムをクラッシュさせるわけではありませんが、このような暗黙的な挿入行為は、特定の状況下で予期せぬ副作用を引き起こす可能性があります。例えば、リソースリークや想定外の状態変化などが挙げられます。さらに悪化する場合には、マルチスレッド環境において初期化されていないメモリ領域への同時アクセスにより、プログラムがクラッシュすることさえあります。

上記のような問題を防止するためには、`std::map::find()` または `std::map::count()` メソッドを使用してキーの存在を確認するか、`std::map::insert()` を使用して明示的に要素を挿入することを推奨します：

```cpp
std::map&amp;lt;std::string, int&amp;gt; safeMap;
if (safeMap.count(&amp;quot;nonexistent_key&amp;quot;) == 0) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Key does not exist.&amp;quot; &amp;lt;&amp;lt; std::endl;
} else {
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for existing key: &amp;quot; &amp;lt;&amp;lt; safeMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;
}

// または、キーと値のペアを明示的に挿入し、初期値を指定する
safeMap.insert(std::make_pair(&amp;quot;nonexistent_key&amp;quot;, 0));
``` ## 本文
上記のコードは直接プログラムをクラッシュさせるわけではありませんが、このような暗黙的な挿入行為は、特定の状況下で予期せぬ副作用を引き起こす可能性があります。例えば、リソースリークや想定外の状態変化などが挙げられます。さらに悪化する場合には、マルチスレッド環境において初期化されていないメモリ領域への同時アクセスにより、プログラムがクラッシュすることさえあります。

上記のような問題を回避するために、`std::map::find()` または `std::map::count()` メソッドを使用してキーの存在を確認するか、`std::map::insert()` を使用して明示的に要素を挿入することを推奨します：

```cpp
std::map&amp;lt;std::string, int&amp;gt; safeMap;
if (safeMap.count(&amp;quot;nonexistent_key&amp;quot;) == 0) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Key does not exist.&amp;quot; &amp;lt;&amp;lt; std::endl;
} else {
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for existing key: &amp;quot; &amp;lt;&amp;lt; safeMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;
}

// または、キーと値のペアを明示的に挿入し、初期値を指定する
safeMap.insert(std::make_pair(&amp;quot;nonexistent_key&amp;quot;, 0));
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;マップコンテナ内のオブジェクトがポインタ型の場合、自動挿入の動作は初期化されていないポインタを保存し、そのポインタへの呼び出しはプログラムのクラッシュを引き起こします。&lt;/p&gt;</description>
        </item>
        <item>
        <title>pstackでプロセスの一時停止（フリーズ）の調査</title>
        <link>https://ttf248.life/ja/p/pstack-troubleshooting-process-hangs/</link>
        <pubDate>Sat, 24 Feb 2024 23:55:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/pstack-troubleshooting-process-hangs/</guid>
        <description>&lt;p&gt;ソフトウェア開発および運用において、プロセスがフリーズしてしまう状況は頻繁に発生します。この状態はシステム性能の低下やサービスの停止を引き起こす可能性があります。本稿では、pstackツールを使用してプロセスフリーズの問題を診断する方法について解説します。プロセスのスタック情報を分析することで、問題の原因を特定し解決策を見つけ出すことができます。&lt;/p&gt;
&lt;p&gt;背景：リスク管理システムの子サービスでフリーズが発生し、リスク管理サービスが利用不可となりました。可用性監視の欠如により、プロセスフリーズの状態が早期に発見できず、システム全体が停止するという事態が発生しました。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;プロセスのフォジー（ゾンビプロセス）とは、プロセスが応答を停止しているにもかかわらず、終了していない状態を指します。この状況は、デッドロック、リソースの枯渇、例外など、さまざまな原因によって引き起こされる可能性があります。このような問題を解決するために、pstack ツールを使用してプロセスのスタック情報を分析し、問題の原因を特定することができます。&lt;/p&gt;
&lt;h2 id=&#34;ステップ&#34;&gt;ステップ
&lt;/h2&gt;&lt;p&gt;pstack は一般的なツールで、通常 gdb（GNU デバッガ）と一緒に提供されます。以下のコマンドでインストールできます：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install gdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プロセスのIDを取得する：まず、スタックされたプロセスのプロセスID (PID) を取得する必要があります。ps コマンドを使用してすべてのプロセスをリストし、調査対象のプロセスIDを見つけます。&lt;/p&gt;
&lt;p&gt;pstack ツールを使ってプロセスのスタックを分析します。プロセスIDを取得したら、以下のコマンドで pstack ツールを使用してそのプロセスのスタック情報を取得できます：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pstack &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これにより、現在の呼び出しシーケンスを実行している関数を含む、そのプロセスのスタック情報が出力されます。これらの情報を使って分析することで、プロセスが停止した場所を特定し、問題の解決に役立てることができます。&lt;/p&gt;
&lt;p&gt;スタック情報を分析する：スタック情報を調べて、プロセスがスタックされた原因を特定します。&lt;/p&gt;
&lt;h2 id=&#34;ケース&#34;&gt;ケース
&lt;/h2&gt;&lt;p&gt;簡単なデモで、main関数が起動した後、新しい子スレッドを作成し、実際の関数を実行することで死ループが発生し、プログラムが正常に終了できず、偽りの停止状態になります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake_minimum_required(VERSION 3.0.0)
project(pstack_main VERSION 0.1.0 LANGUAGES C CXX)

include(CTest)
enable_testing()

# スレッドライブラリを検索
find_package(Threads REQUIRED)

add_executable(pstack_main main.cpp)

# スレッドライブラリをリンク
target_link_libraries(pstack_main PRIVATE Threads::Threads)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ケース-1&#34;&gt;ケース
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;
#include &amp;lt;chrono&amp;gt;

void infiniteLoop() {
    while (true) {
        // メインスレッドが無限ループに入る
    }
}

int main() {
    std::thread thread(infiniteLoop); // スレッドを作成し、死ループ関数を実行する
    thread.join(); // スレッドの終了を待つ
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プログラムを開始して、pstack 結果を実行します：&lt;/p&gt;
&lt;h2 id=&#34;ケース-2&#34;&gt;ケース
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;スレッド2 (スレッド 0x7eff3619b700 (LWP 1315017)):
#0 無限ループ () at /root/pstack/main.cpp:6
#1 0x0000000000402ca9 in std::__invoke_impl&amp;lt;void, void (*)()&amp;gt; (__f=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:60
#2 0x0000000000402b02 in std::__invoke&amp;lt;void (*)()&amp;gt; (__fn=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:95
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;実行例&#34;&gt;実行例
&lt;/h2&gt;&lt;p&gt;#3  0x0000000000403150 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (&lt;em&gt;)()&amp;gt; &amp;gt;::_M_invoke&amp;lt;0ul&amp;gt; (this=0x2260eb8) at /usr/include/c++/8/thread:244
#4  0x0000000000403126 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (&lt;/em&gt;)()&amp;gt; &amp;gt;::operator() (this=0x2260eb8) at /usr/include/c++/8/thread:253
#5  0x000000000040310a in std::thread::_State_impl&amp;lt;std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt; &amp;gt;::_M_run (this=0x2260eb0) at /usr/include/c++/8/thread:196&lt;/p&gt;
&lt;h2 id=&#34;実行例-1&#34;&gt;実行例
&lt;/h2&gt;&lt;p&gt;#6  0x00007eff36bceb23 in execute_native_thread_routine () from /lib64/libstdc++.so.6
#7  0x00007eff36ea91ca in start_thread () from /lib64/libpthread.so.0
#8  0x00007eff361d58d3 in clone () from /lib64/libc.so.6
スレッド 1 (スレッド 0x7eff372e1740 (LWP 1315016)):
#0  0x00007eff36eaa6cd in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
#1  0x00007eff36bceda7 in std::thread::join() () from /lib64/libstdc++.so.6
#2  0x00000000004029d2 in main () at /root/pstack/main.cpp:13&lt;/p&gt;
&lt;h2 id=&#34;ケース-3&#34;&gt;ケース
&lt;/h2&gt;&lt;p&gt;上記のように、プロセスのフリーズの原因は無限ループであり、メインスレッドが無限ループに入り、サブレースが終了できず、プロセスがフリーズする状態を引き起こします。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>おしゃべりする時間を作るのは良いことです。 (Oshaberi suru jikan o tsukuru no wa ii koto desu.)

Alternatively, a more casual translation could be:

話せば話すほど良いことばかりだよ。(Hasedeba haseba doko ka yoi koto bakari da yo.)</title>
        <link>https://ttf248.life/ja/p/come-out-for-a-walk-is-good/</link>
        <pubDate>Thu, 08 Feb 2024 10:30:43 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/come-out-for-a-walk-is-good/</guid>
        <description>&lt;p&gt;もしあの頃、ご家庭の計画に従って、誠実に電力網を学んでいたら、プログラミングに出会わずに、普通の良い子になっていただろうに。
記憶の中の埃を払い、きっかけは近年の旧正月とルームメイトとの会話で、これまでの経歴を整理してみたのだ。&lt;/p&gt;
&lt;h2 id=&#34;第1章&#34;&gt;第1章
&lt;/h2&gt;&lt;p&gt;高考の成績を良くも悪くもなく、混んで211大学を卒業し、当初お父様が計画していたように、電気網を専攻して故郷市内の電力局で働くはずでした。前に述べたように、どのようにIT業界に進むのかについては、金銭観や自制心といった点について、少しばかり忘れてしまっていました。&lt;/p&gt;
&lt;p&gt;初等学校は村の学校に通い、中学校では家が転校させてくれて市区に住むことになり、まるで劉姥姥が大観園に訪れたように、多少都会の繁華さに馴染めずにいました。映画館に行ったことはありませんでしたが、正確には、お父様やお母様と一緒に行ったことはありませんでした。親戚の方に連れられて数回行かせてもらっていました。&lt;/p&gt;
&lt;p&gt;天は人にしてくださり、その時にいくつかの気の合う仲間たちに出会うことができました。後から連絡が途絶えてしまいましたが、あの子供時代は今振り返ってみても素晴らしいものだったのです。 週末の家庭教師の後、教室に残ったプラスチックボトルを片付け、一発でつついて袋に詰め込み、お母さんに預けるために持って帰りました。少しずつ貯めていくうちに、ゴミ拾い業者に処理してもらうようになりました。一緒に将棋やバドミントンをしたり、トランプをしたり、負けたときは腕立て伏せを数回するのを罰として受けました。あの頃はほんの少し救いがありましたが、お父さんは小さい頃から色々な運動をしてくれました。この頃からお金に対する認識が少しおかしくなり、少し自信を失うこともありましたが、これらの小さな不幸はすぐに過ぎ去りました。家には決して困窮していませんでしたし、本当にたくさんのお小遣いは与えられませんでしたが、周りの友達といつも一緒に遊べないことがありました。特に週末は、両親の努力は目に見えており、私たちは村から都会に引っ越してきました。この時、種を植えるように、静かに芽を出るのを待っていました。&lt;/p&gt;
&lt;h2 id=&#34;第1章-1&#34;&gt;第1章
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;頭が簡単な私にとって、大学時代は全体的にとても楽しいものでした。多くの人が卒業後に初めて理解できるような、本当に難しいことではなく、努力と成果の変換は比較的容易でした。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第1章-2&#34;&gt;第1章
&lt;/h2&gt;&lt;p&gt;幼年期の帝国时代時代の記憶を重ね合わせ、大学時代にノートパソコンに触れることで、まるでパンデモスの箱を開けたかのようにゲームに接触し、ゲーム商人という役割との繋がりが生じた。当初は底辺の営業担当者として、上流からの仕入れを行い、自身のコミュニティのチャネルを通じて商品を販売し、わずかな利益を得ていた。その後、全体の链路の運轉ロジックを徐々に理解していった。私たちが販売していた商品は、上流のプログラムによる大量繁殖によって生まれたものであり、そのコストはほぼゼロに近づいていた。 その時、道は少し傾き始めていた。専門分野内でも細分化が進んでおり、左側には電力系統、右側には自動化（非常に複雑で、チッププログラミングや工場電気自動化など）があった。プログラムが稼げるのは理解できたけれど、それは小さな金額に過ぎない。上流の渠道では確かに多くの利益を得ていたし、以前からプログラミングの基礎があり、色々と手を広げ、少しお金を稼いだ。専門分野が決まる頃には、自然と自動化を選択することになった。大三の専門科目をほとんど取らなかったが、毎日コードを書くことで金を稼ぎたいと考えていた。&lt;/p&gt;
&lt;p&gt;去年の論文に触発され、ハッカーに対する憧れを持って始めたプログラミングは、正規校での訓練を受けていないIT技術者が、慈悲心に基づいてアセンブリ言語、侵入テスト、ゲーム外挂、DLL劫持、個人情報窃取などを学び、様々な悪意のあるソフトウェアやグレーゾーンの知識を習得した。両親から人として生きる道徳観を教わったおかげで、法律によって完全に軌道を変えることはなかった。&lt;/p&gt;
&lt;h2 id=&#34;第1章-3&#34;&gt;第1章
&lt;/h2&gt;&lt;p&gt;前文リンク：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/that-boy-talent-maybe-but-not-much/&#34; &gt;那时少年&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大学の頃にも一度恋愛の話がありましたが、振り返ってみると、もっともっぱらドラマの中のロマンスへの憧れでした。未熟な心持ちでいた私は、あの頃こそいかに人を愛するのかさえ理解できず、ましてや「家を持ち、仕事をする」といったことには到底たどり着けませんでした。&lt;/p&gt;
&lt;h2 id=&#34;第2章&#34;&gt;第2章
&lt;/h2&gt;&lt;p&gt;時代の波の中で、私は幸いにも、大学での数々の騒動を経て、研究院院を出た後、当然ながら進学するわけにはいかず、卒業と同時に就職し、ITブームを追い風に順調な日々を送った。既に8年間の勤務経験を持つ今、業界の熱狂的な投資（ホットマネー）が消え去り、終焉に向かっている。時折、当初の選択が間違っていたのではないかと疑ってしまうこともあった。祖父の言うように電力会社に入ればよかったかもしれない。もしも仕事の最初の5年間であれば、このような考えもある程度理解できたかもしれないが、その後は徐々に薄れていったのだろう。恒生銀行への校内採用（校招）で入社してから5年を経た今、企業を変えることなく、技術的な知識、業界の認識、そして自身の能力に対する認識にそれぞれ欠落があることは否定できない。 杭州本部の方針に従い、深圳支社へ異動し、職場の争い（事後でようやく状況を整理できたが、双方ともに敗北し、最終的に勝利したのは取締役会）、技術への情熱を胸に、再び杭州へと戻った。若さゆえの無自覚さを持ちながら、杭州から上海へと飛び出した。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元々、杭州に落ち着き、定住し、家を購入する計画だったが、金利最高点と不動産価格が高騰していたため、入場時に住宅ローンで手痛い打撃を受ける可能性があり、経済基盤が脆弱なため、住宅ローンを抱えながら結婚するというプレッシャーを背負うことはできず、さらに業界の低迷も重なり、精神的に不安定になりやすかった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第3章&#34;&gt;第3章
&lt;/h2&gt;&lt;p&gt;長年をかけて、多くのことを見てきたこともあり、自分自身も愚かだったり浪費したりしたことがあった。しかし、今のところ順風満帆だ。色々な経験をし、色々な人と出会ううちに、人は少しずつ成長していく。もし家に閉じこもっていたら、性格の欠点がいかにして現れるのか分からないだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C&#43;&#43;関数呼び出しのオーバーヘッド時間 / 関数呼び出し時のパフォーマンスに関する問題</title>
        <link>https://ttf248.life/ja/p/cpp-function-call-timing/</link>
        <pubDate>Wed, 24 Jan 2024 14:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-function-call-timing/</guid>
        <description>&lt;p&gt;設計行情 SDK、針對不同的回呼函數實現方式，進行了一次耗時的測試。近期在看 C++ 函數編程，當函數變成了一等公民，在程式內部流轉，耗時有什么不同？&lt;/p&gt;
&lt;p&gt;前文連結：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/compiler-callback-performance-testing/&#34; &gt;编译器、回调函数、性能测试&lt;/a&gt;
&lt;code&gt;leimao&lt;/code&gt; 大佬刚好也做了类似的測試，借代码一用。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;実行プラットフォームは引き続き、当社の旧友である &lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt; です。&lt;/p&gt;
&lt;h2 id=&#34;本文-1&#34;&gt;本文
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cassert&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

int add_one(int input) { return input + 1; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;本文-2&#34;&gt;本文
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int add_one(int input) { return input + 1; }

bool validate_vector_add_one(std::vector&amp;lt;int&amp;gt; const&amp;amp; input_vector,
                             std::vector&amp;lt;int&amp;gt; const&amp;amp; output_vector)
{
    bool is_valid{true};
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        if (output_vector.at(i) != input_vector.at(i) + 1)
        {
            is_valid = false;
            break;
        }
    }
    return is_valid;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;検証関数 validate_vector_add_one の説明:&lt;/p&gt;
&lt;p&gt;この関数は、入力ベクトルと出力ベクトルの両方を引数として受け取り、入力ベクトルの各要素に1を加算したものが、出力ベクトルに対応する要素と等しいかどうかを検証します。  もし等しくない場合は &lt;code&gt;false&lt;/code&gt; を返し、そうでなければ &lt;code&gt;true&lt;/code&gt; を返します。&lt;/p&gt;
&lt;p&gt;入力ベクトル: 整数値のベクタ
出力ベクトル: 整数値のベクタ&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;void reset_vector(std::vector&amp;lt;int&amp;gt;&amp;amp; input_vector)
{
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        input_vector.at(i) = 0;
    }
}

template &amp;lt;typename T, typename Func&amp;gt;
void unitary_function_pass_by_lambda_function(T&amp;amp; output, T const&amp;amp; input,
                                              Func const func)
{
    output = func(input);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;関数 reset_vector(std::vector&lt;int&gt;&amp;amp; input_vector)
{
for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
{
input_vector.at(i) = 0;
}
}&lt;/p&gt;
&lt;p&gt;テンプレート&amp;lt;typename T, typename Func&amp;gt;
void unitary_function_pass_by_lambda_function(T&amp;amp; output, T const&amp;amp; input,
Func const func)
{
output = func(input);
}&lt;/p&gt;
&lt;h2 id=&#34;本文-3&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;template &lt;typename T&gt;
void unitary_function_pass_by_std_function_value(T&amp;amp; output, T const&amp;amp; input,
std::function&amp;lt;T(T)&amp;gt; const func)
{
output = func(input);
}&lt;/p&gt;
&lt;p&gt;template &lt;typename T&gt;
void unitary_function_pass_by_std_function_reference(
T&amp;amp; output, T const&amp;amp; input, std::function&amp;lt;T(T)&amp;gt; const&amp;amp; func)
{
output = func(input);
}&lt;/p&gt;
&lt;h2 id=&#34;本文-4&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;template &lt;typename T&gt;
void unitary_function_pass_by_function_pointer(T&amp;amp; output, T const&amp;amp; input,
T (*func)(T))
{
output = func(input);
}&lt;/p&gt;
&lt;p&gt;int main()
{
// 浮動小数点形式 std::cout を 3 桁の精度で設定します。
std::cout.precision(3);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;size_t const num_elements{10000000};
std::vector&amp;lt;int&amp;gt; input_vector(num_elements, 0);
std::vector&amp;lt;int&amp;gt; output_vector(num_elements, 0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&#34;本文-5&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;auto lambda_function_add_one = [](int const&amp;amp; input) -&amp;gt; int
{
return input + 1;
};
std::function&amp;lt;int(int)&amp;gt; const std_function_add_one(lambda_function_add_one);&lt;/p&gt;
&lt;h2 id=&#34;正文-1&#34;&gt;正文
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;std::cout &amp;lt;&amp;lt; &amp;quot;関数ポインタのサイズ: &amp;quot; &amp;lt;&amp;lt; sizeof(&amp;amp;add_one)
              &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;std::functionポインタのサイズ: &amp;quot;
              &amp;lt;&amp;lt; sizeof(&amp;amp;std_function_add_one) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;std::functionオブジェクトのサイズ: &amp;quot; &amp;lt;&amp;lt; sizeof(std_function_add_one)
              &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;正文-2&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;// 関数を頻繁に簡単に呼び出す。
// コンパイラはコンパイル時にどの関数を呼び出せばよいかを知っており、
// コードを最適化できる。
// これが最も良いパフォーマンスである。
std::chrono::steady_clock::time_point const time_start_vanilla{
std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
output_vector.at(i) = add_one(input_vector.at(i));
}
std::chrono::steady_clock::time_point const time_end_vanilla{&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## 正文
}
    std::chrono::steady_clock::time_point const time_end_vanilla{
        std::chrono::steady_clock::now()};
    auto const time_elapsed_vanilla{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(time_end_vanilla -
                                                             time_start_vanilla)
            .count()};
    float const latency_vanilla{time_elapsed_vanilla /
                                static_cast&amp;lt;float&amp;gt;(num_elements)};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;機械学習&lt;/p&gt;
&lt;h2 id=&#34;本文-6&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;static_cast&lt;float&gt;(num_elements)};
std::cout &amp;laquo; &amp;ldquo;Latency Pass Vanilla: &amp;quot; &amp;laquo; latency_vanilla &amp;laquo; &amp;quot; ns&amp;rdquo;
&amp;laquo; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);&lt;/p&gt;
&lt;h2 id=&#34;正文-3&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;// 時々、コンパイル時に呼び出す関数を知らないことがあります。
// std::function を使用して、関数を引数として渡すことができます。
// この場合は、std::function を値で渡します。
// std::function のサイズが 32 バイトであるため、値で渡すと
// 多くのコピーが発生し、パフォーマンスが悪くなります。
std::chrono::steady_clock::time_point const
time_start_pass_by_std_function_value{std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)&lt;/p&gt;
&lt;h2 id=&#34;本文-7&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
unitary_function_pass_by_std_function_value(
output_vector.at(i), input_vector.at(i), std_function_add_one);
}
std::chrono::steady_clock::time_point const
time_end_pass_by_std_function_value{std::chrono::steady_clock::now()};
auto const time_elapsed_pass_by_std_function_value{
std::chrono::duration_cast&lt;a class=&#34;link&#34; href=&#34;std::chrono::nanoseconds&#34; &gt;std::chrono::nanoseconds&lt;/a&gt;(
time_end_pass_by_std_function_value -&lt;/p&gt;
&lt;h2 id=&#34;正文-4&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;time_end_pass_by_std_function_value - time_start_pass_by_std_function_value)
.count()};
float const latency_pass_by_std_function_value{
time_elapsed_pass_by_std_function_value /
static_cast&lt;float&gt;(num_elements)};
std::cout &amp;laquo; &amp;ldquo;Latency Pass By Std Function Value: &amp;quot;
&amp;laquo; latency_pass_by_std_function_value &amp;laquo; &amp;quot; ns&amp;rdquo; &amp;laquo; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);&lt;/p&gt;
&lt;h2 id=&#34;本文-8&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;// std::function を値渡しする代わりに、参照（ポインタ）で渡すことができます。この場合、オブジェクトのコピーは排除されます。 値渡しする std::function よりもパフォーマンスが優れています。ただし、依然として通常のやり方ほど高速ではありません。
std::chrono::steady_clock::time_point const
time_start_pass_by_std_function_reference{
std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)&lt;/p&gt;
&lt;h2 id=&#34;正文-5&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::chrono::steady_clock::now()&lt;/code&gt;};
for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
unitary_function_pass_by_std_function_reference(
output_vector.at(i), input_vector.at(i), std_function_add_one);
}
std::chrono::steady_clock::time_point const
time_end_pass_by_std_function_reference{
std::chrono::steady_clock::now()};
auto const time_elapsed_pass_by_std_function_reference{
std::chrono::duration_cast&lt;a class=&#34;link&#34; href=&#34;std::chrono::nanoseconds&#34; &gt;std::chrono::nanoseconds&lt;/a&gt;(&lt;/p&gt;
&lt;h2 id=&#34;正文-6&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;( time_end_pass_by_std_function_reference - time_start_pass_by_std_function_reference)&lt;/code&gt;
.count()};
float const latency_pass_by_std_function_reference{
time_elapsed_pass_by_std_function_reference /
static_cast&lt;float&gt;(num_elements)};
std::cout &amp;laquo; &amp;ldquo;Latency Pass By Std Function Reference: &amp;quot;
&amp;laquo; latency_pass_by_std_function_reference &amp;laquo; &amp;quot; ns&amp;rdquo; &amp;laquo; std::endl;&lt;/p&gt;
&lt;h2 id=&#34;本文-9&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;&amp;laquo; latency_pass_by_std_function_reference &amp;laquo; &amp;quot; ns&amp;quot; &amp;laquo; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);&lt;/p&gt;
&lt;h2 id=&#34;正文-7&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;// &lt;code&gt;std::function&lt;/code&gt; は、関数ポインタ、呼び出し可能オブジェクト、ラムダ関数をラップするための汎用的なものです。
// 汎用性があるため、関数ポインタほど効率的ではありません。この場合は、関数ポインタを関数に渡します。
// &lt;code&gt;std::function&lt;/code&gt; を参照で渡すよりもパフォーマンスが向上します。
std::chrono::steady_clock::time_point const
time_start_pass_by_function_pointer{std::chrono::steady_clock::now()};&lt;/p&gt;
&lt;h2 id=&#34;本文-10&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;time_start_pass_by_function_pointer{std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
unitary_function_pass_by_function_pointer(output_vector.at(i),
input_vector.at(i), &amp;amp;add_one);
}
std::chrono::steady_clock::time_point const
time_end_pass_by_function_pointer{std::chrono::steady_clock::now()};
auto const time_elapsed_pass_by_function_pointer{&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;## 正文
auto const time_elapsed_pass_by_function_pointer{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_function_pointer -
            time_start_pass_by_function_pointer)
            .count()}；
    float const latency_pass_by_function_pointer{
        time_elapsed_pass_by_function_pointer /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Function Pointer: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_function_pointer &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;本文-11&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;&amp;laquo; latency_pass_by_function_pointer &amp;laquo; &amp;quot; ns&amp;quot; &amp;laquo; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);&lt;/p&gt;
&lt;h2 id=&#34;本文-12&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;// ラムダ関数を関数に渡すことも可能です。
// コンパイラはコンパイル時に呼び出す関数を知り、
// コードを最適化できます。std::functionを参照渡しするよりもパフォーマンスも優れています。
std::chrono::steady_clock::time_point const
time_start_pass_by_lambda_function{std::chrono::steady_clock::now()};
for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
unitary_function_pass_by_lambda_function(&lt;/p&gt;
&lt;h2 id=&#34;本文-13&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;for (size_t i{0}; i &amp;lt; num_elements; ++i)
{
unitary_function_pass_by_lambda_function(
output_vector.at(i), input_vector.at(i), lambda_function_add_one);
}
std::chrono::steady_clock::time_point const
time_end_pass_by_lambda_function{std::chrono::steady_clock::now()};
auto const time_elapsed_pass_by_lambda_function{
std::chrono::duration_cast&lt;a class=&#34;link&#34; href=&#34;std::chrono::nanoseconds&#34; &gt;std::chrono::nanoseconds&lt;/a&gt;(
time_end_pass_by_lambda_function -&lt;/p&gt;
&lt;h2 id=&#34;正文-8&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;time_end_pass_by_lambda_function - time_start_pass_by_lambda_function)
.count()};
float const latency_pass_by_lambda_function{
time_elapsed_pass_by_lambda_function /
static_cast&lt;float&gt;(num_elements)};
std::cout &amp;laquo; &amp;ldquo;Latency Pass By Lambda Function: &amp;quot;
&amp;laquo; latency_pass_by_lambda_function &amp;laquo; &amp;quot; ns&amp;rdquo; &amp;laquo; std::endl;
assert(validate_vector_add_one(input_vector, output_vector));
reset_vector(output_vector);&lt;/p&gt;
&lt;h2 id=&#34;本文-14&#34;&gt;本文
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# チーム全体の最適化 (O2) を有効にし、コンパイルには gcc13 を選択しました。gcc のバージョンが異なる場合、性能と時間の違いはわずかに異なりますが、バージョンが高いほど lambda の効果が良いです。
関数のポインタのサイズ: 8 バイト
std::function ポインタのサイズ: 8 バイト
std::function オブジェクトのサイズ: 32 バイト
Vanilla パスのレイテンシ: 0.418 ns
std::function 値でパスするレイテンシ: 3.47 ns
std::function リファレンスでパスするレイテンシ: 1.36 ns
ポインタで関数をパスするレイテンシ: 0.396 ns
ラムダ関数でパスするレイテンシ: 0.44 ns
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://leimao.github.io/blog/CPP-Function-Call-Performance/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://leimao.github.io/blog/CPP-Function-Call-Performance/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>コンピュータがなぜ一般的にlittle-endian形式のストレージを採用するのか？</title>
        <link>https://ttf248.life/ja/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;バイアスの解説 &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/host-network-byte-order-debugger/&#34; &gt;ホスト序、ネットワーク序、デバッガで直接観察&lt;/a&gt;
コンピュータ分野における歴史的な理由による特定の設計習慣は、お尻の幅がロケットエンジンの幅を決定する道理と同じです。中身の「利点」や「欠点」を分析する必要はなく、単なる歴史的習慣に過ぎません。&lt;/p&gt;
&lt;h2 id=&#34;元文章リンク&#34;&gt;元文章リンク
&lt;/h2&gt;&lt;p&gt;著: 北極
リンク: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
出典: 知乎
著作権は著作者に帰属します。商業目的での複製をご希望の場合は、著者にご連絡ください。非営利目的の複製の場合は、出所を明記してください。&lt;/p&gt;
&lt;h2 id=&#34;正文转载&#34;&gt;正文转载
&lt;/h2&gt;&lt;p&gt;現代における様々なデバイスの状況は、歴史的慣習と商業化の結果であり、技術そのものではなく、大きな要因です。ARM は大端でも小端でも設定できます。TCP/IP ヘッダも現在もビッグエンディアン（ネットワークバイトオーダー）に固定されています。ストレージ分野にも、多くのストレージプロトコル／仕様が大端方式でデータを保存しています。&lt;/p&gt;
&lt;p&gt;したがって、質問者の3つの問題は、今日の視点から見ると：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンピュータが一般的に小端形式での保存を採用するのはなぜ？ → 間違いです。&lt;/li&gt;
&lt;li&gt;低バイトデータが低アドレスの小端形式で大端形式よりも効率が良いのはなぜですか？ → 効率は向上しません。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;現在の技術を用いてこれらの問題を論証するものは、すべて「矢を射ってから的を描く」行為に過ぎません。&lt;/p&gt;
&lt;h2 id=&#34;正文转载-1&#34;&gt;正文转载
&lt;/h2&gt;&lt;p&gt;しかし、大端または小端の選択について言えば、コンピュータ開発史において、客観的な要因も存在したことは事実です。ホストバイトオーダー（小端）の利点として、小端の加算器が比較的容易に作れること、8ビット×4の加算器であれば、1つの8ビット加算器で順番にすべてのバイトを加算すれば良いからです。また、進み方の回路も非常にシンプルであり、大端では一度32ビットをロードする必要があるため、計算ができなくなってしまいます。現在では、1回のロードが8ビットか32ビットの差は小さいですが、数十年前にはメモリ価格が高価であったため、よりシンプルな方が有利でした。そのため、ホストバイトオーダーを選択したのは、コストを考慮した結果です。 ネットワークバイトオーダー（ビッグエンディアン）の利点：初期デバイスのキャッシュは小さく、最初に高バイトを受信することで、メッセージ情報を迅速に判断できる：パケット長（どの程度のキャッシュを準備するか）、アドレス範囲（IPアドレスは前から後ろでマッチングされる）。初期のネットワークデバイスのキャッシュはバイト単位であり、高バイトを先に取得することは実際に少し速い。したがって、ネットワークデバイスがビッグエンディアンを使用することも、コストを考慮した結果である。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;そのため、バイトオーダーの選択は、歴史的に見て、アプリケーションシナリオとコストをより重視していた（例えば、PPC/MIPSはネットワークデバイスに適している）。その後、技術発展の中で、互換性のために、エンディアンの設定が現在も引き継がれている。今日の視点で見れば、これらの利点は完全に存在しないだけであり、単なる歴史的習慣に過ぎない。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>プログラムのデバッグを防止する方法</title>
        <link>https://ttf248.life/ja/p/program-anti-debug/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-anti-debug/</guid>
        <description>&lt;p&gt;心血を注ぎ、新しい壁紙を探し求めた。習慣は黒系の壁紙だが、一部の領域には色を入れるだけで十分だ。デスクトップにはアイコンを配置する必要がある。他のカラー系で壁紙を設定すると、アイコンが不明瞭になってしまう。&lt;/p&gt;
&lt;p&gt;上記のコードを睨めっこして考え込んだが、理解できなかった。AIに投げかけて説明したが、状況は説明されなかった。それはおそらく特定の状況下で使用される指示であり、通常のコードではこのような形ではないのだろう。&lt;/p&gt;
&lt;p&gt;AIは今や検索エンジンには及ばない。アセンブリの知識不足である。&lt;/p&gt;
&lt;h2 id=&#34;壁紙&#34;&gt;壁紙
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/program-anti-debug/Snipaste_2024-01-23_19-50-53.png&#34;
	width=&#34;1020&#34;
	height=&#34;470&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;黒色のアセンブル壁紙&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;彙集コード&#34;&gt;彙集コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実用例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;彙編コード&#34;&gt;彙編コード
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;PUSHFD&lt;/code&gt; および &lt;code&gt;POPFD&lt;/code&gt; は、フラグレジスタの値をスタックにプッシュおよびポップする命令です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MOV DWORD PTR [ESP], 0X100&lt;/code&gt; は、スタックポインタ (&lt;code&gt;ESP&lt;/code&gt;) が指すメモリ位置に &lt;code&gt;0x100&lt;/code&gt; のDWORD値を移動する命令です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nop&lt;/code&gt; は、何もしない命令です。デバッグやテストのために使用されることがあります。&lt;/p&gt;
&lt;h3 id=&#34;実用例&#34;&gt;実用例
&lt;/h3&gt;&lt;p&gt;このコードは、デバッグモードでプログラムが実行されているかどうかを判断します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__try&lt;/code&gt; ブロック内でアセンブリコードを実行し、例外が発生した場合に &lt;code&gt;__except&lt;/code&gt; ブロックが実行されます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GetExceptionCode() == EXCEPTION_SINGLE_STEP&lt;/code&gt; は、プログラムがシングルステップモードで実行されているかどうかを確認します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXCEPTION_EXECUTE_HANDLER&lt;/code&gt; および &lt;code&gt;EXCEPTION_CONTINUE_EXECUTION&lt;/code&gt; は、それぞれハンドラを実行するか、実行の継続を許可する例外コードです。&lt;/p&gt;
&lt;p&gt;この例では、プログラムがシングルステップモードで実行されている場合、&lt;code&gt;true&lt;/code&gt; が返されます。それ以外の場合は、&lt;code&gt;false&lt;/code&gt; が返されます。&lt;/p&gt;
&lt;h2 id=&#34;説明&#34;&gt;説明
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TrapFlag&lt;/code&gt;はレジスタフラグ領域内のフラグであり、このフラグが設定されると、&lt;code&gt;SINGLE_STEP&lt;/code&gt;例外が発生します。なぜなら、デバッガによってこのフラグがリセットされるため、コードをトレースしてもこの例外を見ることができないからです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;実際のテストで発見したのは、直接ステップオーバーしてデバッグ対象の関数を実行した場合、デバッグは検出されないということです。例外は、その関数にエントリしたときにのみ検出されます（資料調査中、未検証）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;p&gt;中国語の関連資料は、ウェブサイトの英文稿を翻訳したものです。站点科普了很多种反调试的技术。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/techniques/assembly.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>焦点访談/CCTV動画ファイルのダウンロード方法</title>
        <link>https://ttf248.life/ja/p/how-to-download-focus-interview-cctv-videos/</link>
        <pubDate>Tue, 23 Jan 2024 19:23:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/how-to-download-focus-interview-cctv-videos/</guid>
        <description>&lt;p&gt;最近、有人から焦点インタビューの動画をダウンロードする方法について問い合わせてきました。頭の中で考えていたのは、おそらくまた &lt;code&gt;m3u8&lt;/code&gt; 形式で暗号化されているだろうというものでした。水を流すようなもので、簡単に処理してしまおうと思いました。&lt;/p&gt;
&lt;h2 id=&#34;ダウンローダー&#34;&gt;ダウンローダー
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/nilaoda/N_m3u8DL-CLI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/nilaoda/N_m3u8DL-CLI&lt;/a&gt;
&lt;code&gt;m3u8 downloader&lt;/code&gt; のオープンソース 命令行 m3u8/HLS/dash ダウンローダーです。普通 AES-128-CBC 解密、マルチスレッド、カスタムリクエストヘッダなどをサポートしています。简体中文、繁体中文、英語に対応しています。English Supported.&lt;/p&gt;
&lt;h2 id=&#34;ブラウザ拡張機能&#34;&gt;ブラウザ拡張機能
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://microsoftedge.microsoft.com/addons/detail/ngjclnbcdbahekojpkhancmiobdahemb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Live Stream Downloader&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;蜜汁自信&#34;&gt;蜜汁自信
&lt;/h2&gt;&lt;p&gt;アドレスを取得し、これで片付くと思ったが、結果は何もかも無駄だった。正常にセグメント内容を解析できず、資料を検索することもできなかった。調査の結果、公式がダウンロードアドレスを処理しており、ある程度の置換を手動で行う必要があることが判明した。プラグインで解析された &lt;code&gt;key&lt;/code&gt; を以下のリンクに手動でコピー＆置き換えよう。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;https://newcntv.qcloudcdn.com/asp/hls/2000/0303000a/3/default/***********************/2000.m3u8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2024年1月時点でのアドレスは有効だが、今後変更がある場合は、ウェブページを分析してご自身で判断してください。
過去のアドレスのバックアップ：&lt;code&gt;https://hlswx.cntv.kcdnvip.com/asp/hls/main/0303000a/3/default/一串字符/main.m3u8?maxbr=2000&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://jln.cn/post/517.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jln.cn/post/517.html&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SQL Serverデータベースのディスクファイルの権限を一括で変更する</title>
        <link>https://ttf248.life/ja/p/bulk-modify-sqlserver-database-disk-permissions/</link>
        <pubDate>Tue, 23 Jan 2024 19:06:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-modify-sqlserver-database-disk-permissions/</guid>
        <description>&lt;p&gt;会社のセキュリティポリシーの調整により、&lt;code&gt;機械師 mini&lt;/code&gt;は最終的に自宅に転送され、予備サーバーとして使用されることになりました。同時にマシンシステムを再インストールし、&lt;code&gt;ubuntu&lt;/code&gt;が&lt;code&gt;windows server&lt;/code&gt;に切り替えられました。アクティベーション手段が不正であったため、自宅で使用しても問題ないように見えましたが、実際にはアクティベーションができなかったようです。&lt;/p&gt;
&lt;p&gt;非正規のアクティベーション方法により、マイクロソフトの検出がトリガーされ、正常に動作していた半月後にサーバーが起動1時間で自動シャットダウンしました。システムログを調査した結果、盗版が原因であることが判明しました。&lt;/p&gt;
&lt;p&gt;どうすることもできず、再度システムを再インストールし、&lt;code&gt;SqlServer&lt;/code&gt;も再インストールする必要がありました。ファイル権限管理が厳格であるため、データベースへの正常な追加ができなくなってしまいました。&lt;/p&gt;
&lt;h2 id=&#34;エラーメッセージ&#34;&gt;エラーメッセージ
&lt;/h2&gt;&lt;p&gt;システムを再インストールした後、&lt;code&gt;SqlServer&lt;/code&gt;がデータベースに接続しようとすると、オペレーティングシステムのアクセス拒否エラー5120が発生することがあります。&lt;/p&gt;
&lt;h2 id=&#34;処理スクリプト&#34;&gt;処理スクリプト
&lt;/h2&gt;&lt;p&gt;前文リンク：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/bulk-update-local-git-and-legacy-permissions/&#34; &gt;ローカルGitリポジトリの一括更新&lt;/a&gt;、またしてもこの馴染み深いスクリプトですね。改造して、フォルダをトラバースしながらファイルの権限を変更し、現在のところフル編集権限を持つユーザーに設定します。
ネット上のチュートリアルはほとんどが手動で修正する方法を提示しており、毎回数個のファイルだけ修正するのでしょうか？ 私は毎回多数のファイルを処理する必要があり、すべてを手作業で処理すると、精神的に限界を迎えます。&lt;/p&gt;
&lt;h2 id=&#34;処理スクリプト-1&#34;&gt;処理スクリプト
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$rootDirectory = &amp;quot;D:\data\2013_RujiaInfo&amp;quot;

Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;処理スクリプト-2&#34;&gt;処理スクリプト
&lt;/h2&gt;&lt;p&gt;if ($_ -is [System.IO.DirectoryInfo]) {
$icaclsResult = icacls $itemPath /setowner &amp;ldquo;$currentUserName&amp;rdquo; 2&amp;gt;&amp;amp;1
if ($LASTEXITCODE -eq 0) {
Write-Host &amp;ldquo;フォルダ $itemPath の所有者を $currentUserName に変更しました&amp;rdquo;
# 現在のユーザーに書き込み権限を付与
Invoke-Expression &amp;ldquo;icacls &lt;code&gt;&amp;quot;$itemPath&lt;/code&gt;&amp;rdquo; /grant &lt;code&gt;&amp;quot;$($currentUserName):(OI)(CI)F&lt;/code&gt;&amp;quot;&amp;quot;
Write-Host &amp;ldquo;$currentUserName がフォルダを編集するための権限が付与されました&amp;rdquo;
} else {
Write-Host &amp;ldquo;フォルダ $itemPath の所有者を変更できません。エラー情報: $icaclsResult&amp;rdquo;
}
} else {&lt;/p&gt;
&lt;h2 id=&#34;処理スクリプト-3&#34;&gt;処理スクリプト
&lt;/h2&gt;&lt;p&gt;Write-Host &amp;ldquo;フォルダー &amp;lsquo;$itemPath&amp;rsquo; の所有権を変更できません。エラー情報: $icaclsResult&amp;rdquo;
} else {
$takeownResult = icacls $itemPath /setowner &amp;ldquo;$currentUserName&amp;rdquo; 2&amp;gt;&amp;amp;1
if ($LASTEXITCODE -eq 0) {
# 現在のユーザーに書き込み権限を付与
Invoke-Expression &amp;ldquo;icacls &lt;code&gt;&amp;quot;$itemPath&lt;/code&gt;&amp;rdquo; /grant &lt;code&gt;&amp;quot;$($currentUserName):(F)&lt;/code&gt;&amp;quot;&amp;quot;
Write-Host &amp;ldquo;現在のユーザー &amp;lsquo;$currentUserName&amp;rsquo; にファイルの編集権限が付与されました&amp;rdquo;
} else {
Write-Host &amp;ldquo;フォルダー &amp;lsquo;$itemPath&amp;rsquo; の所有権を変更できません。エラー情報: $takeownResult&amp;rdquo;
}
}&lt;/p&gt;
&lt;h2 id=&#34;スクリプト&#34;&gt;スクリプト
&lt;/h2&gt;</description>
        </item>
        <item>
        <title>Linuxシステムベンチマークテスト</title>
        <link>https://ttf248.life/ja/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;Windows 平台上有鲁大师（娱乐大师），不能说数据很准，但总归有个参考，当然也有其他的专业跑分软件。到了 Linux 系统，好像一直没遇到特别合适的跑分软件。&lt;/p&gt;
&lt;p&gt;Sysbench 是一款多功能的基准测试工具，可用于测试 CPU、内存、文件 I/O、线程性能等。您可以使用 Sysbench 来执行各种性能测试任务。&lt;/p&gt;
&lt;p&gt;手头上刚好有三台机器用于测试：机械师 mini 本地小主机、阿里云 dev 开发云服务器、华为云开发服务器。&lt;/p&gt;
&lt;h2 id=&#34;sysbench-のインストール&#34;&gt;Sysbench のインストール
&lt;/h2&gt;&lt;p&gt;ほとんどの Linux ディストリビューションでは、パッケージマネージャを使用して Sysbench をインストールできます。例えば、CentOS 8 では、次のコマンドを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbenchの使用例&#34;&gt;Sysbenchの使用例
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU性能のテスト：&lt;code&gt;sysbench --test=cpu run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;メモリ読み込み性能のテスト：&lt;code&gt;sysbench --test=memory run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ファイルI/O性能のテスト：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッド性能のテスト：&lt;code&gt;sysbench --test=threads --num-threads=4 run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MySQLデータベース性能のテスト（最大接続数を調整する必要あり）：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sysbenchの使用例-1&#34;&gt;Sysbenchの使用例
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ランニングデータレポート&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;h2 id=&#34;採点データレポート&#34;&gt;採点データレポート
&lt;/h2&gt;&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34;
&lt;h2 id=&#34;ランニングスコアレポート&#34;&gt;ランニングスコアレポート
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&#34;s0&#34;&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ランニングデータレポート-1&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;row-header-wrapper&amp;rdquo; style=&amp;ldquo;line-height: 20px&amp;rdquo;&amp;gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;ローカルメカニスト&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;ファーウェイクラウド&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム構成&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  オペレーティングシステム              Ubuntu 23.04&lt;br&gt;  カーネル                        Linux&lt;/p&gt;
&lt;h2 id=&#34;ランダムアクセスメモリramレポート&#34;&gt;ランダムアクセスメモリ（RAM）レポート
&lt;/h2&gt;&lt;p&gt;情報
オペレーティングシステム Ubuntu 23.04
カーネル Linux 6.2.0-36-generic x86_64
モデル Machenike Machenike DT Computer
マザーボード Machenike Machenike DT Computer
BIOS American Megatrends International, LLC.
DB19V012&lt;/p&gt;
&lt;p&gt;CPU情報
名前 Intel Core i7-12650H
トポロジー 1 プロセッサ、10 コア、16 スレッド
識別子&lt;/p&gt;
&lt;h2 id=&#34;ランダムアクセスデータレポート&#34;&gt;ランダムアクセスデータレポート
&lt;/h2&gt;&lt;p&gt;i7-12650H
Topology                      1 プロセッサ、10 コア、16 スレッド
Identifier                    GenuineIntel Family 6 Model 154 Stepping 3
Base Frequency                4.60 GHz
L1 Instruction Cache          32.0 KB x 8
L1 Data Cache                 48.0 KB x 8
L2 Cache                      1.25 MB x 2
L3 Cache                      24.0 MB&lt;/p&gt;
&lt;p&gt;メモリ情報
サイズ                          62.6 GB&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-2&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;サイズ                         62.6 GB&lt;/p&gt;
&lt;p&gt;システム情報
オペレーティングシステム      CentOS Stream 8
カーネル                    Linux 4.18.0-513.el8.x86_64 x86_64
モデル                       Alibaba Cloud Alibaba Cloud ECS
マザーボード                 N/A
BIOS                        SeaBIOS 449e491&lt;/p&gt;
&lt;p&gt;CPU情報
名前                          Intel(R) Xeon(R) Platinum
トポロジー                    1 プロセッサ、1 コア、2&lt;/p&gt;
&lt;h2 id=&#34;実行成績データレポート&#34;&gt;実行成績データレポート
&lt;/h2&gt;&lt;p&gt;Intel(R) Xeon(R) Platinum
Topology                      1 Processor, 1 Core, 2 Threads
Identifier                    GenuineIntel Family 6 Model 85 Stepping 4
Base Frequency                2.50 GHz
L1 Instruction Cache          32.0 KB
L1 Data Cache                 32.0 KB
L2 Cache                      1.00 MB
L3 Cache                      33.0 MB&lt;/p&gt;
&lt;p&gt;メモリ情報
Size                          1.65 GB&lt;/p&gt;
&lt;h2 id=&#34;実行結果データレポート&#34;&gt;実行結果データレポート
&lt;/h2&gt;&lt;p&gt;情報
サイズ　1.65 GB&lt;/p&gt;
&lt;p&gt;システム情報
オペレーティングシステム Ubuntu 22.04.1 LTS
カーネル Linux 5.15.0-60-generic x86_64
モデル OpenStack Foundation OpenStack Nova
マザーボード N/A
BIOS SeaBIOS
rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000&lt;/p&gt;
&lt;p&gt;CPU情報
名前 Intel(R) Xeon(R) Gold&lt;/p&gt;
&lt;h2 id=&#34;実行結果データレポート-1&#34;&gt;実行結果データレポート
&lt;/h2&gt;&lt;p&gt;情報
名前                          Intel(R) Xeon(R) Gold 6278C CPU @ 2.60GHz
Topology                      1 Processor, 1 Core, 2 Threads
識別子                    GenuineIntel Family 6 Model 85 Stepping 7
ベース周波数                2.60 GHz
L1 命令キャッシュ          32.0 KB
L1 データキャッシュ         32.0 KB
L2 キャッシュ              1.00 MB
L3 キャッシュ              35.8 MB&lt;/p&gt;
&lt;p&gt;メモリ情報
サイズ&lt;/p&gt;
&lt;h2 id=&#34;ランダムデータレポート&#34;&gt;ランダムデータレポート
&lt;/h2&gt;&lt;p&gt;L3 キャッシュ                      35.8 MB&lt;br&gt;&lt;br&gt; メモリ情報&lt;br&gt; サイズ                          3.64 GB&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R2&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;3&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;CPU&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行:&lt;br&gt;スレッド数: 1&lt;br&gt;乱数生成器の初期化:&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;スレッド数: 1
現在の時刻から乱数生成器を初期化
素数上限: 10000
ワーカースレッドの初期化&amp;hellip;
スレッド起動！
CPU速度:
イベント数/秒: 4032.48
総統計:
合計時間: 10.0004s
合計イベント数: 40330
レイテンシ (ms):
最小: 0.25
平均:&lt;/p&gt;
&lt;h2 id=&#34;ランニング結果データレポート&#34;&gt;ランニング結果データレポート
&lt;/h2&gt;&lt;p&gt;min:                                    0.25&lt;br&gt;         avg:                                    0.25&lt;br&gt;         max:                                    0.73&lt;br&gt;         95th percentile:                        0.25&lt;br&gt;         sum:                                 9997.55&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           40330.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   9.9975/0.00&lt;/p&gt;
&lt;p&gt;sysbench 1.0.20 (system LuaJIT 2.1.0-beta3) を使用
テスト実行中&lt;/p&gt;
&lt;h2 id=&#34;実行結果データレポート-2&#34;&gt;実行結果データレポート
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;sysbench 1.0.20 (system LuaJIT 2.1.0-beta3) を使用してテストを実行し、以下のオプションを指定しました：&lt;br&gt;&lt;br&gt;スレッド数: 1&lt;br&gt;乱数生成器を現在の時刻から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数上限: 10000&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化中&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    イベント数/秒: 1062.51&lt;br&gt;&lt;br&gt;全体統計:&lt;br&gt;    合計時間: 10.0008s&lt;br&gt;    合計イベント数: 10628&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;/p&gt;
&lt;h2 id=&#34;実行測定データレポート&#34;&gt;実行測定データレポート
&lt;/h2&gt;&lt;p&gt;10.0008s &lt;br&gt;
イベント総数:              10628 &lt;br&gt;&lt;br&gt;
レイテンシー (ms):&lt;br&gt;
最小:                                    0.91&lt;br&gt;
平均:                                    0.94&lt;br&gt;
最大:                                   22.84&lt;br&gt;
95パーセンタイル:                        1.06&lt;br&gt;
合計:                                 9993.46&lt;br&gt;&lt;br&gt;
スレッド公平性:&lt;br&gt;
イベント (平均/標準偏差):           10628.0000/0.00 &lt;br&gt;
実行時間 (平均/標準偏差):&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-3&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;イベント（平均/標準偏差）： 10628.0000 / 0.00&lt;br&gt;実行時間（平均/標準偏差）： 9.9935 / 0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行中:&lt;br&gt;スレッド数： 1&lt;br&gt;乱数生成器を現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限： 10000&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数： 1125.56&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間：&lt;/p&gt;
&lt;h2 id=&#34;実行速度レポート&#34;&gt;実行速度レポート
&lt;/h2&gt;&lt;p&gt;速度：
イベント数/秒：1125.56
一般統計：
合計時間：10.0005s
総イベント数：11258
遅延（ms）：
最小：0.86
平均：0.89
最大：1.70
95パーセンタイル：0.99
合計：9995.40
スレッド公平性：&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-4&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;0.99&lt;br&gt;         合計:                                 9995.40&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           11258.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   9.9954/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R3&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;4&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;メモリ&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;以下のオプションでテストを実行:&lt;br&gt;スレッド数: 1&lt;br&gt;乱数初期化&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;以下のオプションでテストを実行しました：&lt;br&gt;スレッド数：1&lt;br&gt;現在の時刻から乱数生成器を初期化する&lt;br&gt;&lt;br&gt;&lt;br&gt;以下のオプションでメモリ速度テストを実行します：&lt;br&gt;  ブロックサイズ：1KiB&lt;br&gt;  合計サイズ：102400MiB&lt;br&gt;  操作：書き込み&lt;br&gt;  範囲：グローバル&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化中&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました！&lt;br&gt;&lt;br&gt;総操作数：101993199 (10198146.52/秒)&lt;br&gt;&lt;br&gt;99602.73 MiB転送 (9959.13 MiB/秒)&lt;br&gt;&lt;br&gt;&lt;br&gt;一般統計：&lt;br&gt;    合計時間：&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート-1&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;転送されたMiB数 (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;全体統計:&lt;br&gt;    合計時間:                          10.0001秒&lt;br&gt;    イベント総数:              1,019,931,99件&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小値:                                    0.00&lt;br&gt;         平均値:                                    0.00&lt;br&gt;         最大値:                                    0.03&lt;br&gt;         95パーセンタイル:                        0.00&lt;br&gt;         合計:                                 4059.50&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-5&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;0.00&lt;br&gt;         合計:                                 4059.50&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           101993199.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   4.0595/0.00&lt;/p&gt;
&lt;p&gt;テストを以下のオプションで実行しました：
スレッド数: 1
現在の時刻から乱数ジェネレータを初期化
&lt;br&gt;&lt;br&gt;&lt;br&gt;メモリ速度テストを実行し、以下のオプションを使用しました：
ブロックサイズ: 1KiB
合計サイズ: 102400MiB
操作: 書き込み
範囲:&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート-2&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;オプション：
ブロックサイズ：1KiB
合計サイズ：102400MiB
操作：書き込み
範囲：グローバル&lt;/p&gt;
&lt;p&gt;ワーカースレッドの初期化中&amp;hellip;
スレッド開始！
総操作数：48418803 (秒あたり4841004.79)
転送されたデータ量：47283.99 MiB (秒あたり4727.54 MiB)&lt;/p&gt;
&lt;p&gt;一般統計：
合計時間：10.0001s
総イベント数：48418803&lt;/p&gt;
&lt;p&gt;レイテンシ（ms）：
最小：0.00
平均：&lt;/p&gt;
&lt;h2 id=&#34;実行結果データレポート-3&#34;&gt;実行結果データレポート
&lt;/h2&gt;&lt;p&gt;(ms):&lt;br&gt;         最小値:                                    0.00&lt;br&gt;         平均値:                                    0.00&lt;br&gt;         最大値:                                   25.26&lt;br&gt;         95パーセンタイル:                        0.00&lt;br&gt;         合計:                                 4578.95&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント数 (平均/標準偏差):           48418803.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;以下のオプションでテストを実行:&lt;br&gt;数&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-6&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;以下のオプションでテストを実行:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数ジェネレータを初期化する&lt;br&gt;&lt;br&gt;&lt;br&gt;以下のオプションでメモリ速度テストを実行:&lt;br&gt;  ブロックサイズ: 1KiB&lt;br&gt;  合計サイズ: 102400MiB&lt;br&gt;  操作: 書き込み&lt;br&gt;  範囲: グローバル&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドを開始!&lt;br&gt;&lt;br&gt;総演算数: 57056904 (5704765.11 per second)&lt;br&gt;&lt;br&gt;55719.63 MiB転送 (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;一般&lt;/p&gt;
&lt;h2 id=&#34;実行測定データレポート-1&#34;&gt;実行測定データレポート
&lt;/h2&gt;&lt;p&gt;(5704765.11 per second)&lt;br&gt;&lt;br&gt;
55719.63 MiB転送 (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;
一般統計：&lt;br&gt;
合計時間:                                10.0001s&lt;br&gt;
イベント総数:                             57056904&lt;br&gt;&lt;br&gt;
レイテンシ (ms):&lt;br&gt;
最小:                                    0.00&lt;br&gt;
平均:                                    0.00&lt;br&gt;
最大:                                    0.06&lt;br&gt;
95パーセンタイル:                        0.00&lt;br&gt;
合計:&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-7&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;95パーセンタイル:                        0.00&lt;br&gt;         合計:                                 4556.06&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           57056904.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   4.5561/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R4&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;5&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;ハードディスク&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 バイトを 1.81 秒で書き込み&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-1&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;ハードディスク&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 バイトを 1.81 秒で書き込みました (1129.59 MiB/秒)。&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行しました:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数生成器を初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ: (なし)&lt;br&gt;128 ファイル、各 16MiB&lt;br&gt;合計ファイルサイズ 2GiB&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IO リクエスト数: 0&lt;br&gt;組み合わせてランダム IO テストの読み取り/書き込み比率: 1.50&lt;br&gt;定期的な FSYNC を有効にし、各 100 リクエストごとに fsync() を呼び出します。&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-2&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;ランダムIOテスト: 1.50&lt;br&gt;定期的なFSYNCを有効化、各100リクエストごとにfsync()を呼び出す。&lt;br&gt;テストの終了時にfsync()を呼び出し、有効化。&lt;br&gt;同期I/Oモードを使用中&lt;br&gt;ランダムな読み書きテストを実施中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:                      3373.41&lt;br&gt;    書き込み/秒:                     2248.94&lt;br&gt;    fsync/秒:                     7201.80&lt;br&gt;&lt;br&gt;スループット:&lt;br&gt;    読み込み, MiB/s:                  52.71&lt;br&gt;    書き込み, MiB/s:&lt;/p&gt;
&lt;h2 id=&#34;実行測定データレポート-2&#34;&gt;実行測定データレポート
&lt;/h2&gt;&lt;p&gt;read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:               35.14&lt;br&gt;&lt;br&gt;全体統計:&lt;br&gt;    合計時間:                          10.0127秒&lt;br&gt;    イベント総数:              128288&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小値:                                    0.00&lt;br&gt;         平均値:                                    0.08&lt;br&gt;         最大値:                                    5.14&lt;br&gt;         95パーセンタイル:                        0.34&lt;br&gt;         合計:&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-8&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;95パーセンタイル:                        0.34&lt;br&gt;         合計:                                 9977.78&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント（平均/標準偏差）:           128288.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）:   9.9778/0.00&lt;/p&gt;
&lt;p&gt;2147483648 バイトを 19.29 秒で書き込みました (106.16 MiB/秒)。&lt;br&gt;&lt;br&gt;次のオプションでテストを実行しました:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数ジェネレータを初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ: (なし)&lt;br&gt;128 ファイル、&lt;/p&gt;
&lt;h2 id=&#34;ランダム実行データレポート&#34;&gt;ランダム実行データレポート
&lt;/h2&gt;&lt;p&gt;現在の時刻からの乱数生成器&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ：(なし)&lt;br&gt;128ファイル、各16MiB&lt;br&gt;合計ファイルサイズ 2GiB&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IOリクエスト数: 0&lt;br&gt;組み合わせての乱数IOテストの読み書き比率: 1.50&lt;br&gt;定期的なFSYNCを有効化、各100リクエストごとにfsync()を呼び出す。&lt;br&gt;テストの最後にfsync()を呼び出し、有効化。&lt;br&gt;同期I/Oモードを使用&lt;br&gt;乱数読み書きテストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドを開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:&lt;/p&gt;
&lt;h2 id=&#34;実行測定データレポート-3&#34;&gt;実行測定データレポート
&lt;/h2&gt;&lt;p&gt;ワーカースレッド&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:                      1593.12&lt;br&gt;    書き込み/秒:                     1062.08&lt;br&gt;    fsync/秒:                       3406.64&lt;br&gt;&lt;br&gt;スループット:&lt;br&gt;    読み込み, MiB/秒:                  24.89&lt;br&gt;    書き込み, MiB/秒:               16.60&lt;br&gt;&lt;br&gt;全体統計:&lt;br&gt;    合計時間:                          10.0164秒&lt;br&gt;    イベント総数:                      60600&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-9&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;イベント: 60600&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小: 0.00&lt;br&gt;         平均: 0.16&lt;br&gt;         最大: 31.32&lt;br&gt;         95パーセンタイル: 0.54&lt;br&gt;         合計: 9956.30&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差): 60600.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9563/0.00&lt;/p&gt;
&lt;td&gt;2147483648 バイト
&lt;h2 id=&#34;実行結果レポート-3&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;平均実行時間 (stddev): 9.9563 / 0.00&lt;/p&gt;
&lt;p&gt;2147483648 バイトが 18.29 秒で書き出されました (111.98 MiB/sec)。&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行しました:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数ジェネレータを初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ: (なし)&lt;br&gt;128 ファイル、各 16MiB&lt;br&gt;合計ファイルサイズ: 2GiB&lt;br&gt;ブロックサイズ: 16KiB&lt;br&gt;IO リクエスト数: 0&lt;br&gt;組み合わせてランダム IO テストの読み取り/書き込み比率: 1.50&lt;br&gt;定期的な FSYNC を有効にし、各 100 で fsync() を呼び出しました&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-4&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;結合ランダムIOテストの比率：1.50&lt;br&gt;
定期的なFSYNCを有効化、各100リクエストごとにfsync()を呼び出し。&lt;br&gt;
テスト終了時にfsync()を呼び出す。有効化。&lt;br&gt;
同期I/Oモードを使用中&lt;br&gt;
ランダムR/Wテストを実行中&lt;br&gt;
ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;
スレッドを開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;
読み込み/秒:                      1665.88&lt;br&gt;
書き込み/秒:                     1110.59&lt;br&gt;
fsync/秒:                     3563.77&lt;br&gt;&lt;br&gt;帯域幅:&lt;br&gt;
読み込み、MiB/s:                  26.03&lt;br&gt;
書き込み、MiB/s:&lt;/p&gt;
&lt;h2 id=&#34;実行速度レポート-1&#34;&gt;実行速度レポート
&lt;/h2&gt;&lt;p&gt;3563.77&lt;/p&gt;
&lt;p&gt;スループット：
読み込み: MiB/s:                  26.03
書き込み: MiB/s:               17.35&lt;/p&gt;
&lt;p&gt;全体統計：
合計時間:                          10.0112秒
イベント総数:              63355&lt;/p&gt;
&lt;p&gt;レイテンシ (ms):
最小:                                    0.00
平均:                                    0.16
最大:                                  205.01
95パーセンタイル:                        0.78&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-10&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;205.01&lt;br&gt;         パーセンタイル95：                        0.78&lt;br&gt;         合計：                                 9972.64&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント（平均/標準偏差）：           63355.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   9.9726/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R5&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;マルチスレッド&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;実行中&lt;/td&gt;&lt;/tr&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-5&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px&amp;quot;&amp;gt;6&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td class=&amp;quot;s0&amp;quot; dir=&amp;quot;ltr&amp;quot;&amp;gt;マルチスレッド&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;s0&amp;quot; dir=&amp;quot;ltr&amp;quot;&amp;gt;以下のオプションでテストを実行:&amp;lt;br&amp;gt;スレッド数: 4&amp;lt;br&amp;gt;現在の時刻から乱数ジェネレータを初期化する&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;ワーカースレッドの初期化...&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;スレッドが開始されました!&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;一般統計:&amp;lt;br&amp;gt;    合計時間:                          10.0002秒&amp;lt;br&amp;gt;    総イベント数:              197956件&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;レイテンシ (ms):&amp;lt;br&amp;gt;         最小:                                    0.16&amp;lt;br&amp;gt;         平均:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;実行結果レポート-6&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;以下のオプションでテストを実行しました：
スレッド数：4
現在の時刻から乱数ジェネレータを初期化
ワーカースレッドの初期化&amp;hellip;
スレッドが開始されました！
一般統計：
合計時間：10.0002秒
総イベント数：197956件
レイテンシ（ms）：
最小：0.16
平均：&lt;/p&gt;
&lt;h2 id=&#34;走査データレポート&#34;&gt;走査データレポート
&lt;/h2&gt;&lt;p&gt;(ms):&lt;br&gt;         最小値:                                    0.16&lt;br&gt;         平均値:                                    0.20&lt;br&gt;         最大値:                                    0.34&lt;br&gt;         95パーセンタイル:                        0.21&lt;br&gt;         合計:                                39970.47&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           49489.0000/5.70&lt;br&gt;    実行時間 (平均/標準偏差):   9.9926/0.00&lt;/p&gt;
&lt;p&gt;テストを実行したオプション:
スレッド数:&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート-3&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;以下のオプションでテストを実行します:&lt;br&gt;スレッド数: 4&lt;br&gt;現在の時刻から乱数生成器を初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化中&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;&lt;br&gt;一般統計:&lt;br&gt;    合計時間:                          10.0174秒&lt;br&gt;    総イベント数:              18360件&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.57&lt;br&gt;         平均:                                    2.18&lt;br&gt;         最大:&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-11&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:                                   32.77&lt;br&gt;         95th percentile:                        2.61&lt;br&gt;         sum:                                40050.41&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (avg/stddev):           4590.0000/94.36&lt;br&gt;    実行時間 (avg/stddev):   10.0126/0.00&lt;/p&gt;
&lt;p&gt;テストを以下のオプションで実行しました：&lt;br&gt;スレッド数: 4&lt;br&gt;乱数ジェネレータの初期化&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-7&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;以下のオプションでテストを実行:&lt;br&gt;スレッド数: 4&lt;br&gt;乱数生成器を現在時刻から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化中&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド起動!&lt;br&gt;&lt;br&gt;&lt;br&gt;総合統計:&lt;br&gt;    合計時間:                          10.0004秒&lt;br&gt;    総イベント数:              28536件&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.23&lt;br&gt;         平均:                                    1.40&lt;br&gt;         最大:                                    3.56&lt;/p&gt;
&lt;h2 id=&#34;走行データレポート&#34;&gt;走行データレポート
&lt;/h2&gt;&lt;p&gt;1.40 &lt;br&gt;
最大値:                                    3.56 &lt;br&gt;
パーセンタイル95:                        1.47 &lt;br&gt;
合計:                                39975.16 &lt;br&gt;&lt;br&gt;
スレッド公平性:&lt;br&gt;
イベント (平均/標準偏差):           7134.0000/39.87 &lt;br&gt;
実行時間 (平均/標準偏差):   9.9938/0.01&lt;/p&gt;
&lt;h2 id=&#34;付録&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ChatGPT&lt;/code&gt; は依然として優れたものですが、以前習得していた &lt;code&gt;Markdown&lt;/code&gt; で完全にテーブルを作成できず、表示効果が著しく低下します。カスタムテーマによってページの最大幅が制限されるため、幅をパーセンテージ制に調整しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡単な方法としては、TablesGeneratorなどのオンラインツールを使用してHTMLテーブルを生成（内容が複雑だと不向き）&lt;/li&gt;
&lt;li&gt;または、Googleドキュメントで作成し、HTML形式でダウンロードして保存し、ブログに直接コピーする（シンプルかつ直接的で、最終的に採用）
config設定でunsafeオプションを有効にする。ページごとの幅の設定を個別に指定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugoでは、ページごとに幅を設定できます。これは、ページのFront Matterにカスタムパラメータを追加することで実現できます。以下はその例です： あなたの Markdown の Front Matter セクション（通常はファイルの冒頭部分）に、カスタムパラメータを追加してください。例えば &lt;code&gt;custom_width&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;私のページ&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 幅を 800 ピクセルに設定
---

本文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;付録-1&#34;&gt;付録
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;あなたの Hugo テーマで、対応するシングルページテンプレートファイル（例：&lt;code&gt;layouts/_default/single.html&lt;/code&gt;）を見つけてください。&lt;/li&gt;
&lt;li&gt;シングルページテンプレート内で、ページの Front Matter に &lt;code&gt;custom_width&lt;/code&gt; パラメータが存在するか確認し、それを該当する HTML 要素（例：&lt;code&gt;div&lt;/code&gt;）に適用してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、内联スタイル（&lt;code&gt;style&lt;/code&gt;属性）を使用して &lt;code&gt;div&lt;/code&gt; 要素の &lt;code&gt;max-width&lt;/code&gt; 属性を設定し、&lt;code&gt;custom_width&lt;/code&gt; パラメータが指定されていない場合に幅をデフォルトで100%にしています。&lt;code&gt;margin: 0 auto;&lt;/code&gt; は &lt;code&gt;div&lt;/code&gt; 要素を中央揃えにします。&lt;/p&gt;
&lt;h2 id=&#34;付録-2&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;上記はあくまで例であり、実際のアプリケーションでは、テーマの構造とCSSスタイルの詳細に合わせて調整が必要となる場合があります。スタイルを調整する際は、テーマの一貫性と可読性を維持するようにしてください。
また、有効化されたテーマが若干異なるため、最後にサイトカスタムの&lt;code&gt;CSS&lt;/code&gt;設定を調整しました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git で HTTP リポジトリを無効にする</title>
        <link>https://ttf248.life/ja/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;習慣更新ソフトウェアバージョンです。Gitのどのバージョンの場合にHTTPリポジトリからのコード取得が許可されないか不明ですが、以下のエラーが表示されるため、HTTPSを使用するようにリポジトリリモートURLを確認してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h2&gt;&lt;p&gt;環境：Windows 平台、これまで小烏龟を使ってgitを操作しており、鍵の認証も小烏龜で処理していました。以前、ローカルリポジトリを一括更新するスクリプトを作成したこともあります。&lt;/p&gt;
&lt;p&gt;前回の記事へのリンク：[ローカルGitリポジトリの一括更新](&amp;lt;{{ relref &amp;ldquo;/post/2023/10-19-批量更新本地git仓库&amp;rdquo; &amp;gt;})&lt;/p&gt;
&lt;p&gt;今日、帰宅してコードの更新を実行しようとしたところ、上記のエラーが発生し、リポジトリが正常に更新されなくなりました。&lt;code&gt;Git&lt;/code&gt;には設定があるのだろうかと思い、&lt;code&gt;http&lt;/code&gt;プロトコルを使った更新を試みましたが、対応する設定項目は見つかりませんでした。&lt;/p&gt;
&lt;p&gt;最も簡単な解決策は、&lt;code&gt;ssh&lt;/code&gt;プロトコルに変更してリポジトリを更新することです。会社で設定されている&lt;code&gt;gitlab&lt;/code&gt;は短期的に&lt;code&gt;https&lt;/code&gt;プロトコルを提供しません。&lt;/p&gt;
&lt;h2 id=&#34;既存の問題&#34;&gt;既存の問題
&lt;/h2&gt;&lt;p&gt;以前、ローカルリポジトリをまとめて更新するスクリプトを作成する際に、&lt;code&gt;ssh&lt;/code&gt; を使ってリポジトリを取得することを検討していたが、詳細を確認しなかった。小烏龜（TortoiseGit）で設定した &lt;code&gt;git&lt;/code&gt; の設定情報を config に同期していないため、コマンドラインから &lt;code&gt;git pull&lt;/code&gt; を実行したところ&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull # 権限がない旨が表示され、正常にリポジトリを更新できない
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コマンドで鍵の構成を確認しても正しい：&lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;
Git小烏龜（TortoiseGit）でコードを正常に取得できるが、コマンドラインで &lt;code&gt;git pull&lt;/code&gt; コマンドを使用すると、鍵が正しくない旨が表示される場合、Git小烏龜は PuTTY の SSH 鍵を使用しているのに対し、コマンドラインは OpenSSH の SSH 鍵を使用している可能性がある。
小烏亀の鍵構成はシステム . から同期されない。 SSH フォルダの読み込みで秘密鍵ファイルの情報を使用するのではなく、インターフェースのレポジトリ設定時に個別に秘密鍵ファイルのパスを設定する方法について：最初のレポジトリをクローンし、その設定で秘密鍵を設定すれば、他のレポジトリも同じ秘密鍵ファイルを再利用できます。PuTTY が秘密鍵をロードした後、すぐに終了せず、代理サービスを開始します。&lt;/p&gt;
&lt;h2 id=&#34;既存の問題-1&#34;&gt;既存の問題
&lt;/h2&gt;&lt;p&gt;グローバル設定を調整することで、システムデフォルトの &lt;code&gt;ssh&lt;/code&gt; 設定を使用せず、TortoisePlink を使用して SSH 操作を行うように構成します。この設定は、TortoiseGit に含まれる PuTTY ツールを使用する場合に適しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の実行ファイルのパスを、ご自身の TortoiseGit のパスに合わせて変更してください。設定の完全なパスを使用するため、システム環境変数にパスを追加する必要はありません。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AIプログラミングとタスク分解</title>
        <link>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;2年前、サイトにコード領域のコピー機能を追加するために、半日ほど試行錯誤した結果、レンダリング効果があまり理想的ではなかった。半ば無能なフロントエンド開発者として、改善することも思わずに、動けばそれで十分と考えていた。今年、&lt;code&gt;AI&lt;/code&gt;を使って小程序を開発し、フロントエンドの開発もより慣れてきた。そして、リファクタリングを行った（&lt;code&gt;AI&lt;/code&gt;が再設計）。&lt;/p&gt;
&lt;p&gt;悟り：タスク分解をして、多くの小さなタスクは&lt;code&gt;AI&lt;/code&gt;で開発すると手馴れた。すでに閉鎖された小程序において、&lt;code&gt;75%&lt;/code&gt;のコードを&lt;code&gt;AI&lt;/code&gt;が提供し、複数のタスクを分割して引き渡すことで、人工によってプロジェクトコードが&lt;code&gt;組み立て&lt;/code&gt;られた。&lt;/p&gt;
&lt;h2 id=&#34;前文&#34;&gt;前文
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.github.io/post/2022/001/%E4%BB%A5%E4%B8%BA%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E6%83%85%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%A4%8D%E5%88%B6%E6%8C%89%E9%92%AE/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;簡単なことだと考えたこと、コードのコピーボタンを追加&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;promot&lt;/strong&gt;: CSSとJavaScriptコードを設計し、class=&amp;ldquo;highlight&amp;quot;のクラスを持つWebページの要素とそのコンテナ内にコピーボタンを追加して、コードをコピーできるようにする。最初のドラフトは一見問題があるため、基本的には使用可能なものを生成し、コピーされた内容が不正確で冗長な文字が含まれているため、再度最適化を誘導し、コアとなる色のデザインを指定し、エフェクトを含める。
お客様がボタンのサイズと色に関して特定の要件をお持ちであることを理解しましたので、これらの要件に合わせてボタンのスタイルを再設計できます。以下に、ご提供いただいたカラーパレットを使用し、ボタンのサイズを最適化したCSSスタイルの例を示します。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* 位置の調整 */
  right: 2px;
  padding: 3px 6px; /* サイズ縮小 */
  font-size: 12px; /* フォントサイズの変更 */
  background-color: #8FD1E1; /* ボタンの背景色 */
  color: #272822; /* 文字の色 */
  border: 1px solid #272822; /* ボーダーの色 */
  border-radius: 3px; /* 角丸 */
  cursor: pointer;
  opacity: 0.7; /* デフォルトの透明度 */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* 平滑なトランジション効果 */
}

.copy-btn:hover {
  opacity: 1; /* マウスオーバー時の透明度 */
  background-color: #A3D4E5; /* マウスオーバー時の背景色 */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;正文-1&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;このスタイルでは、ボタンのサイズとフォントサイズを小さくし、より洗練された印象にしました。また、ボタンのデフォルト状態を半透明にし、マウスをホバーすると不透明になり、背景色がわずかに明るくなることで視覚的なフィードバックを提供します。これにより、お客様のご希望の色合いも反映させつつ、モダンでユーザーフレンドリーな特徴を維持しています。
対応するよりシンプルな &lt;code&gt;JavaScript&lt;/code&gt; を以下に示します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // すべての .highlight 要素を検索します
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // コピーボタンを作成します
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;コピー&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // ボタンを各 .highlight 要素に追加します
    highlight.appendChild(copyBtn);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;本文-1&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;// 各 .highlight 要素にボタンを追加します。
highlight.appendChild(copyBtn);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// クリックイベントリスナーを追加します。
copyBtn.addEventListener(&#39;click&#39;, function() {
  // .highlight の最初の &amp;lt;code&amp;gt; 要素がコピーするコードを含むと仮定します。
  const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## 正文
navigator.clipboard.writeText(code).then(() =&amp;gt; {
    // 複製成功メッセージを表示
    copyBtn.textContent = &#39;已コピー！&#39;;
    setTimeout(() =&amp;gt; {
      copyBtn.textContent = &#39;コピー&#39;;
    }, 2000);
  }).catch(err =&amp;gt; {
    console.error(&#39;複製失敗: &#39;, err);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;コード領域の右上隅、トップエリアにコピーボタンを追加することを望んでいたが、フロントエンドに関する知識が不足しており、キーワードに基づいて機能を正確に記述することができなかったため、AIとやり取りを繰り返すだけで期待された結果には至らなかった。&lt;/p&gt;
&lt;p&gt;しかし、時間の経過とともにAIがソフトウェア開発にどの程度影響を与えるのかはまだわからない。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>東方甄選の小作文騒動：文化と商業の衝突</title>
        <link>https://ttf248.life/ja/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</link>
        <pubDate>Wed, 20 Dec 2023 18:57:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</guid>
        <description>&lt;p&gt;東方甄選小作文事件是一起由於东方甄选官方账号否认主播董宇辉是所有小作文的作者而引發的網路風波。到底真相如何，已經無從考證，公司權謀的鬥爭將這個事情推上了風口浪尖。&lt;/p&gt;
&lt;p&gt;魚的七秒鐘記憶，以後都交付給&lt;code&gt;AI&lt;/code&gt;撰寫，嘗試了&lt;code&gt;Bing AI&lt;/code&gt;和&lt;code&gt;ChatGPT plus&lt;/code&gt;，前者給的資料更加完整，搜尋引擎的獲取的資料還是更多一些，輸出的博文內容不夠完整，格式比較僵硬；後者透過關鍵字獲取內容，生成的內容不是那麼完整，但是能獲得完整的博文內容，如果給出參考資料的網址，就能優化生成的稿子。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;東方甄選小作文事件は、著作権と創作帰属を巡る論争であり、2023年12月5日以降、主播の董宇輝と东方甄選が関わる一連のインタラクションによって引き起こされました。この騒動は、商業運営の複雑さを示すだけでなく、現代の商業文化やインターネット社会に対する深い反省を促しました。&lt;/p&gt;
&lt;h4 id=&#34;2023年12月5日事件の起点&#34;&gt;2023年12月5日：事件の起点
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Oriental Fortune（东方甄选）は、ホストである董宇輝が朗読した「短い文章」（小作文）の動画を公開し、それが急速に人気を集めた。&lt;/li&gt;
&lt;li&gt;Oriental Fortuneは動画のコメント欄で、これらの小作文は多くがコピーライターチームによって作成されたものであり、すべて董宇輝が書いたものとは限らないと声明を発表した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月13日董宇辉の回答&#34;&gt;2023年12月13日：董宇辉の回答
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;董宇辉は長文を投稿し、「ファンダム」という名目で誰かを中傷することに反対し、自身の立場を表明した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月14日経営陣の回答&#34;&gt;2023年12月14日：経営陣の回答
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;东方甄选CEOの孫東旭、謝罪動画を公開し、会社運営における手口の欠如を認めた。&lt;/li&gt;
&lt;li&gt;东方甄选の董事长である俞敏洪も事件についてコメントし、董宇輝に謝罪した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月16日重大決定&#34;&gt;2023年12月16日：重大決定
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;东方甄选官方宣布免去孙东旭的CEO职务，俞敏洪兼任。&lt;/li&gt;
&lt;li&gt;同日，俞敏洪发表致歉信，表示将解除直播间拉黑的网友。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月18日董宇辉的新角色&#34;&gt;2023年12月18日：董宇辉的新角色
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新東方教育科技集團任命董宇輝為新東方教育科技集團董事長文化助理，兼任新東方文旅集團副總裁。&lt;/li&gt;
&lt;li&gt;俞敏洪透露，將與董宇輝成立工作室，開闢新的直播帳號和直播間。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論と反省&#34;&gt;結論と反省
&lt;/h2&gt;&lt;p&gt;この騒動は、著作権と創作の帰属に関する争いであるだけでなく、文化とビジネスの衝突をより深く反映している。デジタル化され、断片化された時代背景の下において、コンテンツ制作の著作権帰属は、深く考えるべきテーマとなっている。東方甄選小作文事件は、単なるメディア騒動ではなく、現代における商業文化とインターネット社会に対する深刻な反省でもある。&lt;/p&gt;
&lt;p&gt;観察者として、私たちはこのような文化とビジネスの衝突をどのように捉えるべきか？商業的利益を追求する一方で、創造者の労務成果をどのように保護し尊重すべきか？これらの問題は、私たち一人ひとりが深く考えるべき点である。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ゲーム心理学：eスポーツ (げーむしんりよく：えスポーツ)</title>
        <link>https://ttf248.life/ja/p/game-psychology-competitive-gaming/</link>
        <pubDate>Mon, 11 Dec 2023 10:26:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/game-psychology-competitive-gaming/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;課金型ゲーム（かきんがたげーむ）について議論はしない。ゲーム業界内での通称である「人民幣戦士」（にほんびせんし）と呼ばれるもので、ゲーム設定を理解する必要なく、潤沢な資金を持っていることが前提となる。彼らが享受する喜びは、周囲の小弟たちの構図（かぶどり）や「城を襲う」（じょうをあらう）ことへの快感にある。
広範なプレイヤー層を持つ競技型ゲーム、例えば：League of Legends（リーグ・オブ・レジェンド）、DOTA2（ドータ2）、王者荣耀（ワンチャオロン）、Battle Royale（バトルロワイヤル）といったゲームは、完結した世界観と健全な状態に突入した大会開催状況を持つ。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;ゲームデザインにおいて、心理学は重要な分野であり、特にソーシャルサイコロジーが重要である。人々の行動、ニーズ、動機を理解することで、より魅力的なゲーム体験を設計することができる。「装飾」（そうてつ）とソーシャルサイコロジーの関係について、以下の角度から考察できる：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;社会的认同感：&lt;/strong&gt; 人们往往寻求在社交群体中建立认同感。 在游戏中，如果设计能够让玩家感到自己在某方面很出色，并引起其他玩家的注意，这可能会提高他们的社会认同感。 这可能表现为炫耀技能、展示获得的奖励等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;社交竞争：&lt;/strong&gt; 一些游戏采用了社交竞争的元素，鼓励玩家在社交网络中展示他们的成就。 这可以通过排行榜、成就系统或多人对战等方式来实现。 这样的设计激发了玩家间的竞争心理，可能会导致一些玩家表现得更为出色以获得社会认可。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;自己表現：&lt;/strong&gt; ρισμόςは、プレイヤーがキャラクターのカスタマイズや仮想アイテムなどを通じて自分自身を表現することを可能にします。この自己表現は、誇示するだけでなく、個性やソーシャルな交流の方法としても機能します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;チームワーク：&lt;/strong&gt; 一部のゲームでは、チームワークを重視し、ソーシャルインタラクションを通じてゲーム目標を達成します。このような状況においては、装飾行為が奨励されることはなく、チーム協調と相互サポートが強調されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;心理的報酬システム：&lt;/strong&gt; ゲームデザインは、心理的報酬システムを採用することで、プレイヤーの積極的なソーシャル行動を刺激することができます。たとえば、プレイヤーに報酬や特権を与えることで、積極的にソーシャルインタラクションに参加するように促すことができます。
全体として、ゲームデザインにおけるソーシャルサイコロジーは、プレイヤー間の相互作用とソーシャルエクスペリエンスを形成するために使用できます。 装いは特定の状況においては存在する可能性があるが、ゲームデザイナーは通常、そのような行為をバランスさせるよう努め、すべてのプレイヤーにとってポジティブで楽しいゲーム体験を確保する。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;思いついたことを思いつくままに書いているため、全体的なアウトラインがない状態で少し散らかっている。&lt;/p&gt;
&lt;p&gt;作者がよく遊んでいたリーグ・オブ・レジェンドは、私達の世代にとって青春の記憶であり、ほとんどの保護者が子供たちがゲームをプレイすることを好まない。それは彼らがこのジャンルのゲームを深く理解し、体験したことがなかったこと、そしてゲームの設定にも関係しているからだ。毎回ゲームは新たな始まりであり、多くの子供たちにとっては、プレイ中に過度な思考を抱かずに、自分自身で探索するスタイルである。このような状況下では、ゲームの勝敗は子供自身のゲームの才能に大きく左右される。筆者の実際の経験に基づくと、相当数のプレイヤーがこのタイプに該当し、彼らにとっては…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最大のコストは金銭ではなく時間だ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ゲーム内にはエンターテイメントモードがあり、娯楽を求めるプレイヤーのニーズを満たしています。&lt;/p&gt;
&lt;p&gt;英雄聯盟のような競技性の高いゲームは、筆者にとって「三国志」の世界を体験する機会でした。序盤は手持ちが空っぽで、自分の理解と判断力で、キルやファームを行い、お金を費やし、敵の位置を監視し、戦略を立てて待ち伏せするなど、より思考力を駆使してゲームを楽しめます。優れたゲームの才能がなくても、十分に楽しく遊べます。全体を統括する「コントロール感」や、不利な状況から逆転勝利を掴む達成感、そして多くの人が語る「クラウドプレイヤー」も存在します。彼らはすでにゲームをプレイしていませんが、世界大会期間中は試合を観戦し続けます。&lt;/p&gt;
&lt;p&gt;ここで触れておきたいのが、「ゲーム時間」です。 これは単局のゲームの時間ではなく、あなたがログインする時間のことです。週末の下半分の午後、毎日仕事曜日の夜7時から10時の間であれば、ほとんどの場合、チームメイトと正常にコミュニケーションが取れます。送信した信号を彼らが理解し、返信を受け取ります。しかし、例えば徹夜でプレイした場合、多くは「ネット依存の少年」や「有利な状況」、何も起こらないことや逆風の場合には、彼らはあなたの家族を慰めるでしょう。画面越しではその「悪意」を感じることができます。&lt;/p&gt;
&lt;p&gt;私は元々IT業界に携わっており、ゲームも多く触れ、様々な種類をプレイしてきました。競技ゲームにおいては、常に思考に基づいてプレイし、瞬発力や才能が優先されるのではなく、プロや若手と比較すると反応が遅いことを意識しています。習慣的にチームでプレイし、チームの指揮権を握ることに慣れています。&lt;/p&gt;
&lt;p&gt;現在のゲームの環境はどう言えるかというと、全体的に落ち着きがなく、以前のような純粋なものがなくなってしまったと言えるだろう。&lt;/p&gt;
&lt;p&gt;卒業リーグをプレイした後、高段位の対局をプレイすると本当に疲れます。常に高度集中し、相手の謀略を考え、相手の定石を回避するという、終わった後も続けたくない状態です。&lt;/p&gt;
&lt;p&gt;正直に言って、あなたが非常に上手いので、プロの大会に出場しなければ、人生の軌跡にはほとんど影響しません。社交の手段としては有効ですが、生計を立てることはできませんし、社会で立ち上がることにもなりません。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;シングルプレイゲームとオンラインゲームは、異なる種類のゲームであり、遊び方、体験、技術において顕著な違いがあります。以下は、シングルプレイゲームとオンラインゲームの違いを理解するための重要な側面です：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;接続方法:&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;シングルプレイゲーム（オフライン/シングルプレイヤー）：このゲームは、ローカルデバイスで単独でプレイされ、インターネット接続が不要です。プレイヤーはネットワーク接続なしでゲーム体験を楽しむことができます。 - &lt;strong&gt;オンラインゲーム（マルチプレイヤー）:&lt;/strong&gt; これらのゲームは通常、インターネット接続を必要とし、プレイヤーが他のプレイヤーとリアルタイムでインタラクトするためです。オンラインゲームは協力型または対戦型のものが多く、オンラインのソーシャル性や競技性が含まれます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;プレイヤーインタラクション:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;シングルプレイゲーム:&lt;/strong&gt; プレイヤーは主にゲーム内にある人工知能、あらかじめ設定されたタスクや敵対的な要素と相互作用します。ゲーム体験は通常、よりパーソナライズされ、ゲーム内デザインやストーリーの影響を受けます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインゲーム:&lt;/strong&gt; プレイヤーは世界中の他のリアルなプレイヤーとインタラクトできます。これには、ミッションの共同完了、対戦、競技大会、チャットやギルドシステムなどのソーシャル要素が含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ゲームデザインとコンテンツ:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;シングルプレイゲーム:&lt;/strong&gt; ゲームデザインは、完全で独立したストーリーとゲーム体験を提供するのに重点を置きます。ゲーム内容は通常、あらかじめ設計されており、プレイヤーはゲーム内で探索、パズルを解いたり、戦闘したりします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインゲーム:&lt;/strong&gt; ゲームデザインは、リアルタイムインタラクションとプレイヤー間の競争または協力を考慮する必要があります。 ゲームの内容は、定期的なアップデート、オンラインイベント、ソーシャルインタラクションなどにより、よりダイナミックになる可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;技術要件:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;シングルプレイゲーム:&lt;/strong&gt; 通常はオフラインで動作し、デバイス性能およびインターネット接続の要件が比較的低くなります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;マルチプレイヤーゲーム:&lt;/strong&gt; 安定した高速なインターネット接続が必要であり、サーバーとネットワーク性能に対する高い要求があります。これにより、スムーズなリアルタイムインタラクションを保証します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ビジネスモデル:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;単機ゲーム:&lt;/strong&gt; 通常采用一次性購入またはダウンロードの商業模式で、プレイヤーはゲームを購入することで、ローカルデバイス上でゲームを完全にプレイできます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;オンラインゲーム:&lt;/strong&gt; 免费プレイ、広告、アイテム購入、サブスクリプションなど、さまざまな商業模式を採用し、サーバー運営とゲームコンテンツの継続的な更新を維持します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの違いを理解することは、プレイヤーが自分の好みを明確にし、ゲームデザイナーがプレイヤーの期待に応えるのに役立ちます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>クラウドサーバーとスクリプトキッド</title>
        <link>https://ttf248.life/ja/p/cloud-servers-and-script-kids/</link>
        <pubDate>Mon, 20 Nov 2023 15:08:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cloud-servers-and-script-kids/</guid>
        <description>&lt;p&gt;双十一にセールで、阿里云で新しいサーバーを導入しました：エントリーモデルで月99元、構成は高くなく、一時的なホップ機として家のサービスを代理するのに十分です。セールは2026年まで続きます。&lt;/p&gt;
&lt;p&gt;特に上海地域のサーバーを選びました。低遅延で家のマシンを代理し、Windows 11とWindows Server 2022を導入しました。Server版は後から展開するために選択しましたが、使用中に突然アクセス拒否のメッセージを受け取りました。当初はサーバーのアップデートによるものだと考え、すぐに回復すると期待していました。5分後に再度試みると、やはりログインが拒否されます。関連するエラーメッセージを検索したところ、「誰かがログインを試行している」という内容で、パスワードエラー回数が多すぎるため、現在ではログインできなくなっていると表示されました。 以前も防衛攻撃のスクリプトに触れていたことが頭をよぎり、これらのログインはほとんどが正常な行動ではないと判断しました。誰かがサービスを攻撃し、暴力的な方法でログインサーバーを試行している可能性が高いです。サーバーのファイアウォール設定は簡素化されており、ホワイトリストを設定せず、2台のマシンに対して3389ポートをプロキシしていました。これにより、パブリックなネットワーク上でポートが公開され、まるで池の中の魚に餌を与えるような状態でした。攻撃者がスクリプト小子であると分かれば、今後の対応は単純になります。ファイアウォールのホワイトリストを設定し、会社のIPアドレスと自宅のIPアドレスのみがプロキシサービスへのアクセスを許可します。&lt;/p&gt;
&lt;p&gt;frps 代理服务端以前从未配置运行日志，开启日志后，真是太棒了，全国各地的代理 IP 都尝试登录我家服务器，还好有一台是 server 版本，让我意识到了问题，否则 win11 那台机器，迟早会被攻破，密码设置的比较简单。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(Here&amp;rsquo;s a slightly more polished version, aiming for natural Japanese phrasing):&lt;/p&gt;
&lt;p&gt;frps 代理サーバーは以前、ログ設定がされておらず、ログを有効にすると本当に驚きでした。全国各地のプロキシIPアドレスが、私の自宅サーバーにログインを試みている！幸いにもserver版が1台あり、問題の本質に気づくことができました。そうでなければ、win11 のマシンは間違いなく攻撃され、設定されたパスワードが簡単なので、すぐに突破されることになっていました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [101.43.98.211:50486]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [218.93.202.63:56970]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [222.179.106.174:60812]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [58.16.204.238:2839]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [124.223.47.24:50274]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [43.248.128.22:55883]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [43.143.53.138:56955]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [43.228.7.250:61550]&lt;/p&gt;
&lt;p&gt;2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [125.76.228.9:55842]
2023/11/17 16:51:17 [I] [proxy.go:204] [4dfcc2259937dcb9] [winserver-remote] get a user connection [91.240.118.187:49326]
2023/11/17 16:51:17 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [91.240.118.187:49324]
2023/11/17 16:51:17 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [89.248.163.79:51712]&lt;/p&gt;
&lt;p&gt;2023/11/17 16:51:18 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [218.63.75.24:62387]
2023/11/17 16:51:19 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [103.186.109.227:51396]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [116.233.234.104:51567]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] ユーザー接続の取得 [222.187.193.202:51585]&lt;/p&gt;
&lt;p&gt;2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [59.48.98.42:57489]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [146.56.241.134:53558]
2023/11/17 16:51:21 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.179.106.174:30620]
2023/11/17 16:51:23 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [183.14.214.51:62128]&lt;/p&gt;
&lt;p&gt;以下是翻译后的日语内容：&lt;/p&gt;
&lt;p&gt;ついでに、Linuxサービスのログインログを調べてみた。阿里云のこのマシン以外に、友人の一台の华为云のマシンもある。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo grep &amp;quot;Failed password&amp;quot; /var/log/secure  centos系
sudo grep &amp;quot;Failed password&amp;quot; /var/log/auth.log  ubuntu系
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2023年11月16日 04:46:34 aliyun-sh sshd[156625]: rootユーザーからの認証失敗 (120.55.164.64, ポート53410) ssh2
2023年11月16日 04:46:34 aliyun-sh sshd[156623]: rootユーザーからの認証失敗 (111.16.215.122, ポート36548) ssh2
2023年11月16日 04:46:58 aliyun-sh sshd[156630]: 無効なユーザーshareからの認証失敗 (139.9.233.78, ポート53872) ssh2
2023年11月16日 04:47:23 aliyun-sh sshd[156634]: 無効なユーザーsparkからの認証失敗 (139.9.233.78, ポート36134) ssh2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nov 16 04:47:26 aliyun-sh sshd[156636]: Failed password for root from 120.55.164.64 port 46142 ssh2
Nov 16 04:47:47 aliyun-sh sshd[156640]: Failed password for root from 111.16.215.122 port 42962 ssh2
Nov 16 04:48:24 aliyun-sh sshd[156652]: Failed password for root from 120.55.164.64 port 38868 ssh2
Nov 16 04:48:25 aliyun-sh sshd[156654]: Failed password for root from 111.16.215.122 port 46164 ssh2&lt;/p&gt;
&lt;p&gt;2023/11/16 04:48:25 aliyun-sh sshd[156654]: Failed password for root from 111.16.215.122 port 46164 ssh2
2023/11/16 04:48:39 aliyun-sh sshd[156657]: Failed password for invalid user test from 139.9.233.78 port 39386 ssh2
2023/11/16 04:48:50 aliyun-sh sshd[156659]: Failed password for root from 111.16.215.122 port 38892 ssh2
2023/11/16 04:48:53 aliyun-sh sshd[156662]: Failed password for root from 120.55.164.64 port 49348 ssh2&lt;/p&gt;
&lt;p&gt;Nov 16 04:48:53 aliyun-sh sshd[156662]: パスワードが root から 120.55.164.64:49348 の ssh2 で失敗しました。
Nov 16 04:48:53 aliyun-sh sshd[156664]: パスワードが invalid user test から 139.9.233.78:49864 の ssh2 で失敗しました。
Nov 16 04:50:02 aliyun-sh sshd[156672]: パスワードが root から 111.16.215.122:45294 の ssh2 で失敗しました。
Nov 16 04:50:30 aliyun-sh sshd[156680]: パスワードが invalid user zabbix から 139.9.233.78:52206 の ssh2 で失敗しました。&lt;/p&gt;
&lt;p&gt;Nov 16 04:50:50 aliyun-sh sshd[156683]: rootユーザーからの120.55.164.64ポート34820のssh2での認証失敗
Nov 16 04:50:51 aliyun-sh sshd[156685]: rootユーザーからの111.16.215.122ポート58978のssh2での認証失敗
Nov 16 04:51:18 aliyun-sh sshd[156689]: rootユーザーからの120.55.164.64ポート45306のssh2での認証失敗
Nov 16 04:51:25 aliyun-sh sshd[156692]: rootユーザーからの111.16.215.122ポート33938のssh2での認証失敗&lt;/p&gt;
&lt;p&gt;Huawei Cloudのこのマシンは、起動してからかなり時間が経ち、辞書爆破（じしょばくほ）の中期に入っており、様々な奇妙なユーザーがظهر始めた。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2023年11月16日 20時30分35秒 hecs-411458 sshd[182965]: 無効なユーザーoehからの39.129.9.180ポート26459のssh2での認証に失敗
2023年11月16日 20時32分17秒 hecs-411458 sshd[182967]: 無効なユーザーdnuからの39.129.9.180ポート27079のssh2での認証に失敗
2023年11月16日 20時34分12秒 hecs-411458 sshd[182971]: 無効なユーザーrqからの39.129.9.180ポート27742のssh2での認証に失敗
2023年11月16日 20時36分07秒 hecs-411458 sshd[182979]: 無効なユーザーzwからの39.129.9.180ポート28415のssh2での認証に失敗
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nov 16 20:37:59 hecs-411458 sshd[182981]: Invalid user egi password failure for connection from 39.129.9.180 port 29068 ssh2
Nov 16 20:39:52 hecs-411458 sshd[182984]: Invalid user bjb password failure for connection from 39.129.9.180 port 29723 ssh2
Nov 16 20:41:53 hecs-411458 sshd[182988]: Invalid user hna password failure for connection from 39.129.9.180 port 30375 ssh2
Nov 16 20:43:46 hecs-411458 sshd[182994]: Invalid user gar password failure for connection from 39.129.9.180 port 31036 ssh2&lt;/p&gt;
&lt;p&gt;Nov 16 20:45:40 hecs-411458 sshd[183003]: 無効なユーザー mze から 39.129.9.180 のポート 31703 を経由した ssh2 でパスワード認証に失敗
Nov 16 20:47:35 hecs-411458 sshd[183007]: 無効なユーザー tmh から 39.129.9.180 のポート 32381 を経由した ssh2 でパスワード認証に失敗
Nov 16 21:23:01 hecs-411458 sshd[183047]: 無効なユーザー amax から 112.4.65.118 のポート 41188 を経由した ssh2 でパスワード認証に失敗
Nov 16 22:31:20 hecs-411458 sshd[183116]: root ユーザーから 211.228.203.123 のポート 60213 を経由した ssh2 でパスワード認証に失敗&lt;/p&gt;
&lt;p&gt;2023年11月16日 22:53:44 hecs-411458 sshd[183162]: rootユーザーからの認証失敗 (112.132.249.164, ポート39272) ssh2
2023年11月17日 11:44:26 hecs-411458 sshd[184811]: 無効なユーザーjshからの認証失敗 (43.157.103.27, ポート54608) ssh2
2023年11月17日 11:47:23 hecs-411458 sshd[184818]: 無効なユーザーmrunalからの認証失敗 (43.157.103.27, ポート50448) ssh2
2023年11月17日 11:48:46 hecs-411458 sshd[184820]: 無効なユーザーrobertsheenからの認証失敗 (43.157.103.27, ポート50560) ssh2&lt;/p&gt;
&lt;h2 id=&#34;付録&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;独自のサーバーを構築する場合、Windows のパブリックアクセスにはホワイトリストの設定が必要です。Linux では、パスワードログインの無効化と、キーファイルによるログインの有効化をお勧めします。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ローカルのGitリポジトリと履歴上の遺留権限の問題の一括更新</title>
        <link>https://ttf248.life/ja/p/bulk-update-local-git-and-legacy-permissions/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-update-local-git-and-legacy-permissions/</guid>
        <description>&lt;p&gt;チームのプロジェクト間に依存関係が存在し、歴史的な理由により &lt;code&gt;submodule&lt;/code&gt; を使用せずにプロジェクトの依存を管理していたため、日常の開発ではリポジトリコードを順番に更新する必要があり、そうでないと様々な奇妙な問題が発生する可能性がある。&lt;/p&gt;
&lt;p&gt;オンラインの情報源を参照して、構造は基本的に同じである。ローカルで git_list.txt というディレクトリを維持し、スクリプトを使用してディレクトリを反復処理し、一度に更新を実行し、その後始業前にこのスクリプトを実行する。&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux
&lt;/h2&gt;&lt;p&gt;新しいファイルを作成：batch_pull.sh&lt;/p&gt;
&lt;h2 id=&#34;linux-1&#34;&gt;Linux
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ リポジトリの更新 ===================&amp;quot;

# git_list.txt ファイルが存在するか確認
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt が存在しません！ git を取得したいリポジトリ URL を作成し、追加してください。&amp;quot;
  exit 1
else
  echo &amp;quot;============ git リポジトリリストを検出しました ====&amp;quot;
fi

# git_list.txt から URL を一行ずつ読み込み、pull 操作を実行
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url が完了しました！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;ディレクトリ $url は存在しません。スキップします。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows
&lt;/h2&gt;&lt;p&gt;新しいファイルを作成する：batch_pull.bat&lt;/p&gt;
&lt;h2 id=&#34;windows-1&#34;&gt;Windows
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem スクリプトの存在するディレクトリへ移動
cd /d &amp;quot;%~dp0&amp;quot;

rem git_list.txt が存在するか確認
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt ファイルが見つかりません！ git 仓库 URL を作成し、追加してください。
  exit /b 1
) else (
  echo ============ git 仓库リストファイルが検出されました =========
)

rem git_list.txt 内の URL を一行ずつ読み込み、pull 操作を実行
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo %%i の Pull が完了しました！
    echo ========================================
  ) else (
    echo ディレクトリ %%i は存在しません。スキップします。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;過去の遺留問題&#34;&gt;過去の遺留問題
&lt;/h3&gt;&lt;p&gt;再装システム後に発生した &lt;code&gt;git&lt;/code&gt; フォルダの権限ファイルに関する問題を解消します：&lt;strong&gt;致命的なエラー「unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)」&lt;/strong&gt;
オンライン上の推奨される解決策は、主に &lt;code&gt;stack overflow&lt;/code&gt; から提供されています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リポジトリディレクトリに信頼を追加: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitconfig&lt;/code&gt; ファイルを手動で修正し、ディレクトリへの信頼を指定&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の方法により、リポジトリの更新は正常になりましたが、毎回 &lt;code&gt;git pull&lt;/code&gt; を実行する際にコンソールに多数の警告メッセージが表示され、所有者に関するエラーを示唆しています。&lt;/p&gt;
&lt;h3 id=&#34;デスクトップ環境のシステム再インストール&#34;&gt;デスクトップ環境のシステム再インストール
&lt;/h3&gt;&lt;p&gt;長らくシステムを再インストールしていなかったマシンで、システムイメージ内のゴミファイルが爆発的に増加し、手動で再インストールせざるを得なくなった。空き時間を利用してシステムを再構築し、再びこの権限の問題に遭遇した。以前のスクリプトは動作せず、修正した権限が不完全だった。&lt;/p&gt;
&lt;p&gt;新しい解決策を採用し、&lt;code&gt;*&lt;/code&gt;を追加することで &lt;code&gt;git&lt;/code&gt; がすべてのディレクトリを自動的に信頼するように設定した。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;これはユーザー権限の問題なのか、それとも皆さんが Windows 平台に慣れていないのかは不明である。Windows には &lt;code&gt;chown&lt;/code&gt; のようなコマンドが存在し、フォルダの所有者を変更できる。もちろん、ディレクトリが少ない場合は手動で所有者も変更可能だが、このワークステーションにはドメイン情報が付加されており、会社によってデプロイされたドメインに異常があるか、あるいはローカルシステム設定に異常があるのか、ユーザーリスト内でログインに使用するユーザーが見つからないという問題が発生した。最終的にはコマンドラインから問題を解決した。&lt;/p&gt;
&lt;h3 id=&#34;デスクトップ再インストールシステム&#34;&gt;デスクトップ再インストールシステム
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 現在のユーザー名を取得
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# PowerShell の文字エンコーディングを UTF-8 に設定
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 所有者のルートディレクトリパスを変更する
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 実際のパスに置き換えてください

# ディレクトリを再帰的にトラバースし、ファイルとフォルダの所有者を変更
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;### デスクトップのシステム再インストール

# ファイルまたはフォルダを確認する
    if ($_ -is [System.IO.DirectoryInfo]) {
        # フォルダの場合、icacls を使用して所有権を変更する
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;フォルダ $itemPath の所有者を $currentUserName に変更しました&amp;quot;
        } else {
            Write-Host &amp;quot;フォルダ $itemPath の所有者変更に失敗しました。エラー情報: $icaclsResult&amp;quot;
        }
    } else {
        # ファイルの場合、icacls を使用して所有権を変更する
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;### システムの再インストール（デスクトップ）
$takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
if ($LASTEXITCODE -eq 0) {
    # Write-Host &amp;quot;ファイル $itemPath の所有者を $currentUserName に変更しました&amp;quot;
} else {
    Write-Host &amp;quot;ファイル $itemPath の所有者の変更に失敗しました。エラー情報: $takeownResult&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;デスクトップosの再インストール&#34;&gt;デスクトップOSの再インストール
&lt;/h3&gt;&lt;p&gt;予想外の問題が発生し、スクリプト実行時の出力された中国語の情報が乱れていました。コンソール文字エンコーディングの設定やスクリプトエンコーディングの調整を試みましたが、すべて文字化けしました。おそらく頭がおかしくなっているのでしょう。コントロールパネル - 領域 - 言語設定のベータ機能を有効にし、グローバルにUnicodeエンコーディングを有効にしたところ、スクリプト実行は正常になりました。しかし、いくつかの開発ソフトウェアが正常に動作しませんでした。後で資料を見直したところ、スクリプトファイルのエンコードを&lt;code&gt;gbk&lt;/code&gt;に変更する必要があることがわかりました。&lt;/p&gt;
&lt;h2 id=&#34;资料&#34;&gt;资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>WPF学習資料</title>
        <link>https://ttf248.life/ja/p/wpf-learning-resources/</link>
        <pubDate>Tue, 17 Oct 2023 10:49:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-learning-resources/</guid>
        <description>&lt;p&gt;小プログラム開発の設計上の課題がまだ解消されておらず、新たに&lt;strong&gt;WPF&lt;/strong&gt;を立ち上げました。最近会社も動揺しており、遠隔地の協働での業務コミュニケーションは依然として効率が十分ではありません。そこで、クライアント側のUI開発を受注することになりました。&lt;/p&gt;
&lt;h2 id=&#34;wpf&#34;&gt;WPF
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8&amp;amp;preserve-view=true&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 微软官网学習資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zh7791/p/11502696.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 基本まとめ(学習のヒント)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.wpfsoft.com/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 中文網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/638815741&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 个人まとめと学習のおすすめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;WPF&lt;/code&gt;のインターフェースデザインで使われる多くの概念は、ウェブページフロントエンドのデザインに似ています。可能な限りUIデザインとビジネスロジックを分離し、UIデザインが独立して存在できるようにすることも、インターネット企業が期待する分業方法です。今年ちょうどミニプログラムを折腾したところ、多くの概念的なものは共通しており、慣れるまで比較的簡単でした。これらのものは現代のUIデザインにおける「道」であり、基本的なフレームワークの概念を習得すれば、その後の道が曲がりにくくなります。&lt;/p&gt;
&lt;h2 id=&#34;wpf-1&#34;&gt;WPF
&lt;/h2&gt;&lt;p&gt;以前WinForm開発経験のある読者は、以下の資料を参考にすることをお勧めします：&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zh7791/p/11502696.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 基礎まとめ（学習提案）&lt;/a&gt;。内容が短く、経験豊富な読者が学習ルートを計画するのに適しています。&lt;/p&gt;
&lt;p&gt;初心者の方は、以下の中文ウェブサイトを参照することをお勧めします：&lt;a class=&#34;link&#34; href=&#34;http://www.wpfsoft.com/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 中文網&lt;/a&gt;。基礎概念、発展の歴史、低レベルクラスの認知ロジックについてゼロから説明されています。このウェブサイトは偶然にもタイミングが良く、今年8月にリリースされたばかりで、読者を惹きつけコースを購入させることを目的としています。私の資料とほぼ同時期であるため、もしもう少し遅れると、おそらく機会はないでしょう。&lt;/p&gt;
&lt;p&gt;最も本格的な学習資料は、もちろんMicrosoftの公式ドキュメントです。少し退屈かもしれませんが、新参者の方は根気強く学ぶ必要があります。 古典的な電子書籍もたくさんありますが、あまりおすすめできません。日々の仕事で忙しく、静めて本を読む時間があまりなく、なかなか読書に集中することが難しいです。プロジェクトの練習に取り組む方が適しているでしょう。&lt;/p&gt;
&lt;h2 id=&#34;c-と-net-のリリース履歴&#34;&gt;C# と .NET のリリース履歴
&lt;/h2&gt;&lt;p&gt;以前学習した言語について、最近数年間の新機能のリリースが少し多いため、文法のバージョンが毎年更新されています。
&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&lt;/a&gt;
公式学習資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/csharp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/csharp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>金融汚職の幕開け (Kin&#39;yū okujo no bakakake)</title>
        <link>https://ttf248.life/ja/p/financial-anti-corruption-curtain-rise/</link>
        <pubDate>Mon, 09 Oct 2023 14:53:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/financial-anti-corruption-curtain-rise/</guid>
        <description>&lt;p&gt;中国共中央政治局：要加大国有企业、金融领域的反腐败力度，深入纠治“四风”。&lt;/p&gt;
&lt;h2 id=&#34;中共中央政治局&#34;&gt;中共中央政治局
&lt;/h2&gt;&lt;p&gt;中共中央政治局は9月27日に会議を開き，《第20回全国党代表大会第1輪巡視状況に関する総合報告》を審議しました。習近平総書記が会議を主導しました。会議では、巡視・整えを契機として、党の全面的な指導をさらに強化し、巡視対象となる党組織に政治的立場を高め、党中央から委託された責任と使命を誠実に履行させ、国有企業の核心機能と競争力を高め、中国特色社会主義の重要な物質的基盤と政治的基盤を夯け、金融企業が実体経済と国家戦略にサービスを提供する力度を拡大し、質の高い発展を推進することの重要性が強調されました。また、発展と安全を統籌し、底線思考と限界思考を確立し、重大なリスクを防止・軽減するための有効な措置を講じ、安全の底線をしっかりと守ることを強調しました。 全力を挙げて厳格な党規律建設をさらに深めるため、党の書記（党組書記）の第一責任者としての責任と、幹部団体のメンバーの「二つの職務を負う」責任、紀検監察機構の監督責任を強化し、各レベルの「主要責任者」に対する監視を強化するとともに、国有企業や金融分野における腐敗撲滅を強化し、悪風を徹底的に是正し、事例を基にした改めと治政を進め、腐敗しないこと、腐敗することを恐れないこと、腐敗したくないという意識を一体的に克服しなければならない。新時代の党組織路線を厳格に守り、幹部団体の建設、人材育成、地方党組織の建設を強化しなければならない。巡視成果を総合的に活用し、改革を深化させ制度を改善し、源頭からの治理を進め、事例と結果を兼ね備えた治療を促進しなければならない。（新華社）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重大な金融リスクを引き起こす！中国銀行の党委書記・董事长である劉連舸が党籍から除名された&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;中国共中央政治局&#34;&gt;中国共中央政治局
&lt;/h2&gt;&lt;p&gt;中央紀委國家監委のウェブサイトによると、中国共産党中央の承認に基づき、中央紀委国家監委は、中国銀行股份有限公司元党委書記・会長である劉連舸氏の重大な不正行為と違法行為について立案調査を実施しました。 劉連舸について調査した結果、理想と信念を喪失し、初心と使命を背き、党中央の決定指示を堅決せず、折扣（割引）して実行し、金融リスク防範の責任を放棄し、違法な信貸プロジェクトに介入し、違法な融資を行い、重大な金融リスクを引き起こしました。全面から厳格な党規律を遵守する主体責任を果たせず、所在組織の政治生態を严重に破壊し、禁書を持ち込み、組織の审查（査閲）に抵抗しました。中央八項規定精神を無視し、礼品や金銭を受け取り、私人会所に立ち入り、スキーや旅行の接待を受け、長期的に管理対象者の車両を利用しました。組織からの問い合わせに対して個人に関する事項を報告せず、説明を怠り、不正な採用・昇進を行いました。違反して商業活動を行い、資金の融資やプロジェクトの協力において違法に介入し、秘密情報を私的に保管しました。道徳が堕落し、家風が正しくなく、親族を管理・教育できませんでした。紀律と法律の底線がなく、権限を濫用し、「金融で金融を食べる」ことを通じて、职务便利（職務上の便宜）を利用して他人の融資やプロジェクト協力などを通じて利益を得ました。違法に巨額の財物を収受しました。&lt;/p&gt;
&lt;h2 id=&#34;中国共中央政治局-1&#34;&gt;中国共中央政治局
&lt;/h2&gt;&lt;p&gt;劉連舸嚴重違反黨的政治紀律、組織紀律、廉潔紀律、工作紀律和生活紀律，構成嚴重職務違法並涉嫌受賄、非法放貸款犯罪，且在黨的十八大後不收斂、不收手，性質嚴重，影響惡劣，應予嚴肅處理。根據《中國共產黨紀律處分條例》《中華人民共和國監察法》《中華人民共和國公職人員政務處分法》等有關規定，經中央紀委常委會會議研究並報中共中央批准，決定給予劉連舸開除黨籍處分；按規定取消其享受的待遇；終止其黨二十大代表資格；收繳其違紀非法所得；將其涉嫌犯罪問題移送檢察機關依法審查起訴，所涉財物一併移送。 - 中国光大集团原党委书记、董事长李晓鹏严重违纪违法被开除党籍和公职。（央视新闻）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中央纪委国家监委网站通報，据貴州省紀委監委消息：貴州銀行原党委书记、董事长李志明涉嫌嚴重違紀违法，目前正接受貴州省紀委監委紀律审查和監察調查。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;昨年8年ぶりに匯金が四大行を買い注ぎ&#34;&gt;昨年8年ぶりに、匯金が四大行を買い注ぎ
&lt;/h2&gt;&lt;p&gt;2024年10月11日、工商銀行、農業銀行、中国銀行、建設銀行の四大国有商業銀行はそれぞれ公告を発表され、匯金公司による買い注色が、2761万株、3727万株、2489万株、1838万株となりました。 匯金公司は今後6ヶ月以内に二级市場で引き続き四大行を買い注ぎ続ける予定です。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>トラフィック収益化のビジネスモデル：くじ引き</title>
        <link>https://ttf248.life/ja/p/traffic-monetization-business-model-raffle/</link>
        <pubDate>Tue, 19 Sep 2023 07:04:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/traffic-monetization-business-model-raffle/</guid>
        <description>&lt;p&gt;配信者からのiPhone？ミニプログラムランキングの報酬？様々なライブプラットフォームでのギフト抽選会？&lt;/p&gt;
&lt;p&gt;上記の3つは、あまり関連性のないものに見えますが、実際には無料トラフィックによる収益化の異なるパターンであり、少し金融ゲームのようなものです。&lt;/p&gt;
&lt;h2 id=&#34;プラットフォームでのラッキープリズ獲得&#34;&gt;プラットフォームでのラッキープリズ獲得
&lt;/h2&gt;&lt;p&gt;一般的な状況では、ユーザーがリセットしてプラットフォーム通貨を獲得した後、心怡の配信者へギフトを購入したり、各プラットフォームには別の遊び方があります。ユーザーがプラットフォーム通貨を獲得した後、直接ギフトを送るのではなく、一定量の通貨を使って抽選イベントに参加し、限定の高いギフトを獲得することができます。&lt;/p&gt;
&lt;p&gt;この時点で問題が発生しています。オンライン抽選は、簡単に言うとプラットフォームがカジノを開いて、参加人数が多いほど確実に利益を出すということです。**一般人（屌丝）**ユーザーが、スマホで一か八かの精神で、大当たりを期待してギフトを送ることで、面子を得て、大哥（リーダー）になる！&lt;/p&gt;
&lt;h2 id=&#34;ホストからのギフト実物&#34;&gt;ホストからのギフト（実物）
&lt;/h2&gt;&lt;p&gt;前述のプラットフォーム抽選は、ユーザー自身の投稿内容を対象としています。ホストは毎月流水ミッションや人気ミッションを実施しており、ギフト抽選の玩法を开启すると、ファンが指定されたギフトを贈ったり、指定金額のギフトを贈ったりすることで抽選に参加するチャンスがあり、そのギフトにはハイエンドスマートフォンや現金ハッピーバッグなどが含まれます。
人気のあるホストにとっては、この活動は非常に収益性が高く、一時的なゼロコスト購入とほぼ同じで、参加者が十分にあれば、ホストも利益を得ることができます。ここではホストの運営能力が試されます。
もちろん、報酬が高い玩法もあります（現金価値）。多くの屋外ホストはこの玩法を利用しており、間接的にオンラインギャンブルを行っていることになります。視聴内容には誰も関心がなく、ユーザーは当選できるかどうかだけに関心があります。 ステージタイプ以外のホスト配信者、PK形式を通じてファンを誘導して課金させ、普通のゲーム実況者はプレイヤーの消費意欲を高めることが難しく、ゲームをプレイしたりライブを見たりすることは、娯楽の一形態であり、追加の費用支出を望まない。特に&lt;strong&gt;競技性の高いゲーム&lt;/strong&gt;、くじ引きのような形式は、ユーザーの課金習慣や消費習慣を育み、時折衝動買い（大量に送る、当選したい）を引き起こす可能性がある。&lt;/p&gt;
&lt;h2 id=&#34;ミニプログラムランキング報酬&#34;&gt;ミニプログラムランキング報酬
&lt;/h2&gt;&lt;p&gt;ミニプログラムを設計し、役に立たないワークフローを作成したり、一部のゲームに関連する補助サービスを提供したりします。これらはすべて、騰訊（テンセント）の審査に通るための掩護措置です。ミニプログラム内の遊び方は、ランキングメカニズムを追加して、ユーザーが閲覧したインセンティブ広告やタスクを完了することでポイントを獲得し、ポイントに基づいてランキングを設定し、上位のランキングのユーザーに指定された報酬を与えます。&lt;/p&gt;
&lt;p&gt;コアロジック：広告収入 &amp;gt; 運営コスト + 報酬費用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ミニプログラムには、適切なサービスを提供し、適度な広告を通じて収益を得る正常な稼働方法もあります。得られる金額は多くないかもしれませんが、わずかな流れでもあり、持続可能な方法です。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>ゼロティア・ローカルエリアネットワーク</title>
        <link>https://ttf248.life/ja/p/zero-tier-remote-lan/</link>
        <pubDate>Tue, 19 Sep 2023 04:58:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/zero-tier-remote-lan/</guid>
        <description>&lt;p&gt;オフィスに新たにミニPCを入手し、環境構築を兼ねて便利に考えたのですが、自宅でも時折アクセスする必要があるため、一時的に社内ネットワークのトンネリングを実施することになりました。これまでの経験から、&lt;code&gt;frp&lt;/code&gt;サービスをデプロイしてポートフォワーディングを設定する方法を選びましたが、その品質は公開サーバーの帯域幅に依存します。少しばかり新鮮な&lt;code&gt;Zerotier&lt;/code&gt;仮想マシンによるローカルエリアネットワーク（LAN）を試してみることにしました。これは&lt;code&gt;VPN&lt;/code&gt;と似ており、ローカルで仮想ネットワークインターフェースを作成し、すべてのマシンを1つの仮想ネットワークに参加させます。&lt;/p&gt;
&lt;h2 id=&#34;zerotierとは&#34;&gt;Zerotierとは
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ZeroTier&lt;/code&gt;は、ソフトウェア定義の広域ネットワーク（SD-WAN）ソリューションであり、異なる地理的な場所にあるデバイス間で安全な仮想ネットワークを作成することを可能にします。&lt;code&gt;ZeroTier&lt;/code&gt;を使用すると、複数のコンピューター、サーバー、およびデバイスを、まるで同じローカルネットワーク上にいるかのように、一元的に暗号化された仮想ネットワークに接続できます。これにより、開発者やIT専門家は、複雑なネットワーク設定やVPN構成なしで、異なる場所間で安全にデータを共有し、リソースを共有することができます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Zerotierネットワーク&lt;/strong&gt;: Zerotierネットワークは、異なるデバイスがインターネット経由でつながることを可能にする、仮想的かつグローバルなローカルネットワークです。このネットワークには複数のサブネットを含めることができ、すべてのデバイスはZeroTierの技術を使用して互いに接続されます。 &lt;strong&gt;惑星サーバー:&lt;/strong&gt; 惑星サーバーはZerotierネットワークの重要なコンポーネントの一つです。グローバルなもので、Zerotierネットワーク全体のトポロジー、ルーティング情報、およびネットワークの状態を維持・管理します。惑星サーバーはグローバルなネットワーク制御センターとして機能しますが、直接データ転送は行いません。ユーザーのデバイスは少なくとも1つの惑星サーバーに接続してZerotierネットワークに参加する必要があります。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;zerotierとは-1&#34;&gt;Zerotierとは
&lt;/h2&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;転送サーバー&lt;/strong&gt;: 転送サーバーはZerotierネットワークにおける補助ノードであり、デバイス間の直接接続を確立するのを支援します。デバイス間で直接接続できない場合、これらを通じてデータを送信できます。これにより、ネットワークの到達性およびパフォーマンスが向上します。転送サーバーは通常、世界中に配置され、データ転送の中継点として機能します。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;総じて、Zerotierは惑星サーバーと転送サーバーの協力を通じて、デバイスがグローバルな範囲で仮想的なローカルネットワークを作成し、安全かつ高速なデバイス間の通信を実現します。惑星サーバーはグローバルネットワーク管理を担当し、転送サーバーは必要に応じて接続を確立するのに役立ちます。&lt;/p&gt;
&lt;h2 id=&#34;インストールと展開&#34;&gt;インストールと展開
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zerotier.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zerotier.com/&lt;/a&gt; の公式ウェブサイトにアクセスし、インストールファイルとドキュメントを入手してください。&lt;/li&gt;
&lt;li&gt;お使いのオペレーティングシステムに合わせて、ZeroTier One クライアントをダウンロードしてインストールします。Windows、macOS、Linux などの多くのプラットフォームに対応しています。&lt;/li&gt;
&lt;li&gt;インストールが完了したら、ZeroTier One クライアントを起動します。&lt;/li&gt;
&lt;li&gt;まだアカウントをお持ちでない場合は、ZeroTier アカウントを作成します。クライアント内でアカウントを作成できます。&lt;/li&gt;
&lt;li&gt;ZeroTier アカウントにログインし、新しいネットワークを作成します。ネットワークには一意の16桁IDが割り当てられ、これを覚えておく必要があります。&lt;/li&gt;
&lt;li&gt;デバイスをこのネットワークに参加させます。クライアント内でネットワークIDを入力するか、QRコードスキャン機能を使用します。&lt;/li&gt;
&lt;li&gt;ZeroTier クライアントで設定されたデバイスはすべて同じ仮想ネットワークに接続されます。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;moon-のインストールとデプロイ&#34;&gt;Moon のインストールとデプロイ
&lt;/h2&gt;&lt;p&gt;国内の多くの通信キャリアが UDP 穿通を禁止しているため、frp サービスは安定しており、TCP プロトコルを使用するため、Zerotier 中継サーバーも同様の効果を実現できます。ファイアウォールで UDP 9993 を開放する必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -s https://install.zerotier.com/ | sudo bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールが成功したか確認します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ローカルネットワークへの参加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli join network-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moon の作成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /var/lib/zerotier-one &amp;amp;&amp;amp; sudo zerotier-idtool initmoon identity.public &amp;gt; moon.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stableEndpoints ノードを調整するために設定ファイルを編集し、&amp;ldquo;サーバーのパブリックIPアドレス/9993&amp;rdquo; に設定します。&lt;/p&gt;
&lt;p&gt;署名構成を生成し、moons.d フォルダを作成し、既存のファイルをこのフォルダに移動してサービスを再起動します。&lt;/p&gt;
&lt;h2 id=&#34;インストールとデプロイ-moon&#34;&gt;インストールとデプロイ (moon)
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo zerotier-idtool genmoon moon.json
mkdir moons.d &amp;amp;&amp;amp; mv 000000eb444ec0d8.moon moons.d/
systemctl restart zerotier-one.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クライアントノードが moon サーバーに参加し、ID は前の JSON 設定ファイル内の id フィールドから取得されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli.bat orbit ztaddr ztaddr
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;インストールデプロイメント-moon&#34;&gt;インストール・デプロイメント moon
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 新しい mooon ノードが出現するか確認し、IDと情報がサーバー構成と同じであることを観察する。
[root@idv-36f9d5 ~]# zerotier-cli listpeers
200 listpeers &amp;lt;ztaddr&amp;gt; &amp;lt;path&amp;gt; &amp;lt;latency&amp;gt; &amp;lt;version&amp;gt; &amp;lt;role&amp;gt;
200 listpeers 0cccb***** 35.236.*.*/64393;110;10726 327 1.6.3 LEAF
200 listpeers 3a46f***** 185.180.*.*/9993;110;757 -1 - PLANET
200 listpeers 3ed7c***** 39.97.*.*/9993;172;79 32 1.6.3 MOON
200 listpeers 4f838***** - -1 - LEAF
200 listpeers 62f86***** 50.7.*.*/9993;110;4796 351 - PLANET
200 listpeers 778cd***** 103.195.*.*/9993;5148;4887 253 - PLANET
200 listpeers 992fc***** 195.181.*.*/9993;10161;4921 226 - PLANET
200 listpeers 9d2b5***** - -1 - LEAF
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;インストールとデプロイmoon&#34;&gt;インストールとデプロイ（Moon）
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Windowsプラットフォームでは、管理者権限でターミナルを起動し、zerotier-cli.batコマンドラインを使用して操作します。Linuxプラットフォームでは、zerotier-cliコマンドを使用して操作します。 peersサブコマンドは接続状況を確認し、listpeersサブコマンドはすべてのノードを表示します。正常に &lt;code&gt;moon&lt;/code&gt; ノードが表示されることは、正常に参加していることを示します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;卸载方法&#34;&gt;卸载方法
&lt;/h2&gt;&lt;p&gt;Windowsプラットフォームの卸載方法は後述します。一般的な操作で、コントロールパネルから削除すれば問題ありません。ここではUbuntuについて詳しく説明します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dpkgコマンドを使用してzerotier-oneサービスを削除する&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dpkg -P zerotier-one
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;zerotier-oneフォルダを削除する。このフォルダにはaddressアドレスが保存されており、削除後に再インストールすると新しいaddressアドレスを取得します。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo rm -rf /var/lib/zerotier-one/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;跋談&#34;&gt;跋談
&lt;/h2&gt;&lt;p&gt;元々は既にアンインストールされていたものが、サーバーが到着し、適切なプロキシノードが存在せず、阿里云が営業活動を行い、開発用特供サーバーを提供しました。構成は低く、1999年、価格も手頃で、2年間運用しました。主な理由はサーバーから提供される帯域幅でした。&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.wnark.com/archives/152.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.wnark.com/archives/152.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Yogile/p/12642423.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/Yogile/p/12642423.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>VMware 仮想マシンのディスクスペース最適化</title>
        <link>https://ttf248.life/ja/p/vmware-virtual-machine-disk-space-optimization/</link>
        <pubDate>Wed, 21 Jun 2023 18:35:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/vmware-virtual-machine-disk-space-optimization/</guid>
        <description>&lt;p&gt;VMWareの仮想マシンをインストールして開発を行う際、一般的にはディスク容量を多めに確保します。使用していくうちに、ホスト側のディスク使用量は仮想マシンの実際のファイルサイズを大幅に上回ることがあります。&lt;/p&gt;
&lt;h2 id=&#34;シナリオの説明&#34;&gt;シナリオの説明
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;df -h&lt;/code&gt;コマンドを実行し、現在のマシンのディスク情報を確認したところ、実際に使用されているのは60GBであり、すべてのシャットアウトとクローンイメージを削除しても、ローカル仮想マシンが占有するディスクスペースは依然として60GBよりも大幅に大きい。これにより、すでに限られたハードドライブの状態が悪化している。&lt;/p&gt;
&lt;h2 id=&#34;前提条件&#34;&gt;前提条件
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;仮想マシンのインストール時に、ディスクの事前割り当てをチェックしなかった&lt;/li&gt;
&lt;li&gt;ローカルに保存された仮想マシンのハードドライブが、現在使用されている容量よりも十分な空き容量を持っていること
空き容量が不足している場合は、一時的に仮想マシンをポータブルHDDに移動してディスクを最適化した後、再度移行することを検討してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ツール&#34;&gt;ツール
&lt;/h2&gt;&lt;p&gt;公式から &lt;code&gt;open-vm-tools&lt;/code&gt; パッケージを提供されており、yum でインストールするか、vmware-tools イメージパッケージでインストールできます。&lt;/p&gt;
&lt;h2 id=&#34;命令&#34;&gt;命令
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vmware-toolbox-cmd disk shrink /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを実行すると、仮想マシンは自動的にシャットダウンされ、VMware ホストプログラムがディスクの縮小を実行します。 実行時間は仮想マシンのサイズとディスクへのアクセス速度によって異なります。
実行効果は非常に良く、仮想マシンのディスク使用量が &lt;code&gt;df -h&lt;/code&gt; のディスク情報とほぼ一致します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Stable-diffusion - そのインストールにおける喜びと苦しみ (安定拡散 - そのインストールにおける喜びと苦しみ)</title>
        <link>https://ttf248.life/ja/p/stable-diffusion-zero-install-story/</link>
        <pubDate>Thu, 13 Apr 2023 00:23:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/stable-diffusion-zero-install-story/</guid>
        <description>&lt;p&gt;国内の資料は、基本的には&lt;strong&gt;秋葉&lt;/strong&gt;さんのワンクリックデプロイパッケージが推奨されています。Pythonをベースにしたオープンソースプロジェクトなので、デプロイもそれほど複雑ではないだろうと考え、ゼロから試してみることにしました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI生成画像に苦労したため、意図的にグラフィックカードを変更し、3060 12GBの入門版を使用しました。7年間の勤務の後、960は名誉な退役を遂げました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;コアの &lt;code&gt;pytorch cuda&lt;/code&gt; のインストールですが、以前 &lt;code&gt;python&lt;/code&gt; ゲーム補助スクリプトを書いた際にローカルにインストールしたことがありましたが、やはり問題が発生しました。&lt;code&gt;cuda&lt;/code&gt; の暗号化が常に有効にならないという問題です。&lt;/p&gt;
&lt;h2 id=&#34;待処理&#34;&gt;待処理
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;文章構造を再計画し、まず PyTorch を紹介する。バージョン対応関係とバージョン確認方法&lt;/li&gt;
&lt;li&gt;ローカル環境から PyTorch をゼロから新規に作成・デプロイする方法&lt;/li&gt;
&lt;li&gt;翻訳稿を作成する。Stable Diffusion のインストール手順（Windows版）: &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考資料の整理&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ステップ&#34;&gt;ステップ
&lt;/h2&gt;&lt;p&gt;中国語で検索すると、手順を追ったインストール方法が見つかりにくい可能性があります。&lt;code&gt;Google&lt;/code&gt; で英語で検索すると、多くの類似の手順が掲載されています。ゼロから解説されているものもあります。まず、&lt;code&gt;git&lt;/code&gt; のインストールについて説明し、次に &lt;code&gt;python&lt;/code&gt; のインストールについても説明します。その後、リポジトリをダウンロードして、直接スクリプトを実行すれば完了です。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;
詳細な使用方法や疑問点については、&lt;code&gt;issues&lt;/code&gt; を参照してください。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&lt;/a&gt;
このリポジトリが何をするものなのかも、なぜか誰も説明していないように思います。名前からして、これはインターフェース制御台であり、より簡単に使えるように設計されていることがわかります。&lt;/p&gt;
&lt;h2 id=&#34;ステップ-1&#34;&gt;ステップ
&lt;/h2&gt;&lt;p&gt;リポジトリでは、同時にインストール・起動スクリプトも作成しています。これにより、現在のフォルダが自動的に認識され、&lt;code&gt;Python&lt;/code&gt;仮想環境が存在するかどうかを確認します。存在する場合は、現在のパスの&lt;code&gt;python&lt;/code&gt;を使用します。&lt;/p&gt;
&lt;p&gt;初心者の方については、&lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;PyTorch
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pytorch.org/get-started/locally/&lt;/a&gt;
ここでは今日私が話したい内容です。まず、彼らの手順をそのまま実行しないでください。Pythonはrequirementファイルを使って依存ライブラリをインストールします。これは小さな問題です。重要なのはあなたのGPUのバージョンとドライバーのバージョンがPyTorchに対応していることです。これは多くの人が関連性について説明していますが、インターネットで検索するとわかります。
参考：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_40660408/article/details/129896700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_40660408/article/details/129896700&lt;/a&gt;
仮想環境を作成することは、空の仮想環境を作成し、その中で最初に公式のスクリプトを実行してPyTorchをインストールすることです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.version.cuda)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.__version__, torch.cuda.is_available())&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pytorch-1&#34;&gt;PyTorch
&lt;/h2&gt;&lt;p&gt;上記の2つのスクリプトで、必要なCUDAのバージョンを確認したり、インストールが成功したかどうかを確認したりできます。
ここでは、派手な操作は推奨しません。まずは公式ページのロジックに従ってコピーし、そのままインストールするのがおすすめです。直接pipでインストールすると、PyTorchが失敗する可能性や、CUDAがアクティブにならない可能性があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; フォルダのパスに不要な文字が含まれていると、PyTorchが使用できない場合がありますのでご注意ください。
インストールを何度も試みたり、公式のインストールファイルをダウンロードして手動でインストールしたりしましたが、2.0バージョンへのアップグレードを試みました。公式ドキュメントでは、2.0は速度が速いと記載されています。 しかし、それまであまり使っていなかったため、Pythonのバージョンやそれが影響するかどうか分からなかった。中には公式のマニュアルも確認し、3.8版を使用することを推奨されていると書かれていた。そこで若干の衝突が発生し、以前はワンクリックインストールパッケージを使っており、その中に3.10版が含まれていた。最終的には、最初から新しいフォルダを作成し、仮想環境を構築して、torchが正しくインストールされていることを確認した。&lt;/p&gt;
&lt;h2 id=&#34;pytorch-2&#34;&gt;PyTorch
&lt;/h2&gt;&lt;p&gt;そして、この仮想環境をWeb UIのフォルダ内に移動します。その状態でスクリプトを実行して依存関係をインストールすると、他の依存関係の問題は解消されるでしょう。
移動後には、&lt;code&gt;python -m pip install --upgrade --force-reinstall pip&lt;/code&gt; を実行し、pipを修復する必要があります。
少し奇妙に見えるかもしれませんが、この場所でかなり時間をかけて試行錯誤しました。なぜなら、常にPyTorchを正しく認識できなかったからです。すべての干渉要因を除外するために、まずPyTorchをインストールしてから、他の依存ライブラリをインストールするという方法に思いついたのです。&lt;/p&gt;
&lt;h2 id=&#34;xformers&#34;&gt;Xformers
&lt;/h2&gt;&lt;p&gt;有効化することを推奨します。画像生成を高速化し、既存の占有量を削減できますが、副作用として、同じパラメータセットで&lt;strong&gt;生成される画像は比較的安定しません&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stable-diffusion-webui:Xformers&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/diffusers/optimization/xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huggingface optimization&lt;/a&gt;
| 100.00% | 2分57秒33 | 7440MiB / 10058MiB | 12288MiB / 12288MiB (100.0%) |&lt;/p&gt;
&lt;h2 id=&#34;xformers-1&#34;&gt;Xformers
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;最適化比率&lt;/th&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;Torch 活性/予約メモリ&lt;/th&gt;
&lt;th&gt;システムVRAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;51.02%&lt;/td&gt;
&lt;td&gt;1分29秒21&lt;/td&gt;
&lt;td&gt;4547/7164 MiB&lt;/td&gt;
&lt;td&gt;9298/12288 MiB (75.67%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;xformers-2&#34;&gt;Xformers
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;(傑作),(最佳品質),(高詳細),(寫實,)
工業時代城市，中部的深邃峽谷，中國建築風格的街道、集市、橋樑、(雨天:1.2)、(蒸汽龐克:0.8)、中國建築

## Xformers
ネガティブプロンプト: nsfw,((カウボーイ)),(((陰毛))), ((((陰毛の髪の毛))))スケッチ、重複、醜い、大きな目、テキスト、ロゴ、モノクローム、最悪の顔、(悪いおよび変異した手:1.3)、(最悪の品質:2.0)、(低品質:2.0)、(ぼやけ:2.0)、ホラー、ジオメトリ、bad_prompt、(悪い手)、(指が足りない)、複数の肢体、悪い解剖学、(絡み合った指:1.2)、醜い指、(追加の指と手が足と腕:1.4)、王冠の編み込み、((2girl)), (変形した指:1.2)、(長い指:1.2)、魔女の翼、角、魔女

## Xformers
冠髪、((2人娘))、(変形した指:1.2)、(長い指:1.2)、悪魔の翼、角、悪魔の角、悪魔のような髪型、(下手なアニメ風)、下手な絵手、下手な手、借りたキャラクター、テキスト fokus、ウォーターマーク、サンプルウォーターマーク、キャラクターウォーターマーク、Lofterユーザー名、写真の日付ウォーターマーク、映画ポスター、雑誌表紙、ジャーナル、表紙、表紙ページ、同人表紙、アルバム表紙、漫画表紙、ブランド名の模倣、EasyNegative、タイツ、シルクストッキング、ショートパンツ

## Xformers
ステップ数：35、サンプラー：DPM adaptive、CFGスケール：5.5、シード：2223996555、サイズ：1088x1088、モデルハッシュ：543bcbc212、モデル：base_Anything-V3.0-pruned、Clipスキップ：2、ENSD：31337

## 終わりに

なぜデプロイメントパッケージを推奨しなかったのかというと、そのパッケージには作者が個人的にカスタマイズした設定が含まれており、公式のオリジナルのものとは異なっているためです。もしあなたが初心者であれば、なぜそれらのパラメータが最適なのか分からないかもしれません。しかし、使用していくうちに公式のマニュアルを参照することで、どのパラメータを調整する必要があるかを知ることができます。

## グラフィックボードの選択

データ通貨鉱難の後、グラフィックボード（GPU）の価格は相対的に高くなりません。一般的なエントリーレベルのプレイヤーが `3060` と `3060Ti` の間を選ぶ場合、一般的には大容量版である `12G` 以上の `3060` が推奨されます。なぜなら、より高い解像度の画像を生成できるからです。なぜ高解像度が必要なのでしょうか？それは、生成時に解像度を上げることによって、生成される画像がより鮮明で繊細になるためです。もしあなたが小さな画像を生成したいのであれば、`8G` の VRAM でも十分です。

さらに、**超解像（ハイレゾアップスケーリング）** オプションも存在します。これは詳細を強調し、画面のディテールを豊かにすることで、より多くの VRAM が必要になります。 以下は、NVIDIA GeForce GTX 970、GeForce RTX 3060 Ti、GeForce RTX 3060、GeForce RTX 3080およびGeForce RTX 3080 Ti の単精度（FP32）、半精度（FP16）および双精度（FP64）浮動小数点演算能力の仕様集計表です。

| GeForce GTX 970 | 2014 | 3.49 | 87.2 | 0.109 |

## グラフィックボードの選択

| グラフィックボードモデル | リリース年 | 単精度浮動小数点演算能力 (TFLOPS) | 半精度浮動小数点演算能力 (TFLOPS) | 双精度浮動小数点演算能力 (TFLOPS) |
| --- | --- | --- | --- | --- |
| GeForce RTX 3060 Ti | 2020 | 16.2 | 32.4 | 0.51 |

## グラフィックボードの選択

| グラフィックボードモデル | リリース年 | 単精度浮動小数点演算能力 (TFLOPS) | 半精度浮動小数点演算能力 (TFLOPS) | 双精度浮動小数点演算能力 (TFLOPS) |
| --- | --- | --- | --- | --- |
| GeForce RTX 3060 | 2021 | 12.7 | 25.4 | 0.39 |

## グラフィックボードの選択

| グラフィックボードモデル | リリース年 | 単精度浮動小数点演算能力 (TFLOPS) | 半精度浮動小数点演算能力 (TFLOPS) | 双精度浮動小数点演算能力 (TFLOPS) |
| --- | --- | --- | --- | --- |
| GeForce RTX 3080 | 2020 | 29.8 | 58.9 | 0.93 |

## グラフィックボードの選択

| グラフィックボードモデル | リリース年 | 単精度浮動小数点演算能力 (TFLOPS) | 半精度浮動小数点演算能力 (TFLOPS) | 双精度浮動小数点演算能力 (TFLOPS) |
| --- | --- | --- | --- | --- |
| GeForce RTX 3080 Ti | 2021 | 34.8 | 68.7 | 1.36 |

## グラフィックボードの選択
[各種グラフィックボード性能テストデータ](https://docs.google.com/spreadsheets/d/1Zlv4UFiciSgmJZncCujuXKHwc4BcxbjbSBg71-SdeNk/edit#gid=0)

## 更新
半年ごとに、改めてインストール手順を整理したり、基礎概念を解説したりする予定でしたが、一般的にAIイラストを生成する場合、結局はベテランユーザーが提供した画像パラメータを調整したり、既存の画像をフォーマットして再レンダリングしたりすることになるという事実に気づきました。

以前、AIを使ってミニプログラムのUI素材を描画するというプロジェクトがありましたが、半日かけても期待通りの結果が得られず、結局公式のミニプログラムからリソース画像を直接ダウンロードする方が良いという結論に至りました。&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>プログラムの最適化は、ハードウェアと戦おうとするべきではありません。</title>
        <link>https://ttf248.life/ja/p/program-optimization-dont-fight-hardware/</link>
        <pubDate>Fri, 07 Apr 2023 16:30:15 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-optimization-dont-fight-hardware/</guid>
        <description>&lt;p&gt;&lt;code&gt;one loop thread&lt;/code&gt;（単一ループスレッド）の実行時間がすでに&lt;strong&gt;マイクロ秒&lt;/strong&gt;レベルで、サーバーを交換した結果、最大6万パケットまでバックログが積み重なるのをほぼゼロにすることができた。&lt;/p&gt;
&lt;p&gt;シングルスレッドでのループ処理でデータを扱う場合、CPUの性能はクロック周波数、キャッシュサイズ、命令セットアーキテクチャなどの要因によって決まる。一般的に、クロック周波数が高く、キャッシュサイズが大きい、命令セットアーキテクチャが高度なCPUほど、シングルスレッドでデータを処理する際の性能が良い。&lt;/p&gt;
&lt;h2 id=&#34;シングルスレッド&#34;&gt;シングルスレッド
&lt;/h2&gt;&lt;p&gt;パフォーマンス向上のために、スレッドを追加することは必ずしも必要ではありません。プロジェクトのプロセスを整理し、時間がかかる箇所を特定し、シングルスレッドで要件を満たせるか検討します。シングルスレッドでは考慮すべき点が少なく、問題が発生する可能性も低くなります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最初からスレッドについて言及するのは、多少不適切です&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;イベント&#34;&gt;イベント
&lt;/h2&gt;&lt;p&gt;取り扱っているのは&lt;strong&gt;市場データであり、遅延に敏感&lt;/strong&gt;です。
一晩中ひたすら加班し、新しい最適化版をリリースし、ローカルでインターフェースを剥離してテストを実施しましたが、速度はそれなりに良かった：tps 4.2万
サーバーにデプロイすると、tpsが急降下：2.1万。帰宅してデスクトップPCで試すと、tps 7.9万となり、グループ内のサービスVMが何か問題があるのではないかと疑い始めました。まずCPUのクロック周波数差を疑いました。家庭用デスクトップPCとサーバーの&lt;code&gt;CPU&lt;/code&gt;では、クロック周波数が最も異なる点です。
テストサーバーA&lt;/p&gt;
&lt;h2 id=&#34;イベント-1&#34;&gt;イベント
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor：7
vendor_id：GenuineIntel
cpu family：6
model：47
model name：Intel(R) Xeon(R) CPU E7-4807 @ 1.87GHz
stepping：2
microcode：0x34
cpu MHz：1866.733
cache size：18432 KB
physical id：1
siblings：4
core id：3
cpu cores：4
apicid：7
initial apicid：7
fpu：yes
fpu_exception：yes
cpuid level：11
wp：yes
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;イベント-2&#34;&gt;イベント
&lt;/h2&gt;&lt;p&gt;apicid: 7
initial apicid: 7
fpu: yes
fpu_exception: yes
cpuid level: 11
wp: yes
flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 popcnt aes hypervisor lahf_lm pti dtherm arat
bugs: clflush_monitor cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit&lt;/p&gt;
&lt;h2 id=&#34;イベント-3&#34;&gt;イベント
&lt;/h2&gt;&lt;p&gt;bogomips：3733.46
clflush size：64
cache_alignment：64
アドレスサイズ：物理40ビット、仮想48ビット
電力管理：&lt;/p&gt;
&lt;h2 id=&#34;イベント-4&#34;&gt;イベント
&lt;/h2&gt;&lt;p&gt;テストサーバーB&lt;/p&gt;
&lt;h2 id=&#34;イベント-5&#34;&gt;イベント
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor：7
vendor_id：GenuineIntel
cpu family：6
model：63
model name：Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz
stepping：2
microcode：0x3c
cpu MHz：2599.998
cache size：20480 KB
physical id：14
siblings：1
core id：0
cpu cores：1
apicid：14
initial apicid：14
fpu：yes
fpu_exception：yes
cpuid level：15
wp：yes

## イベント
fpu        : yes
fpu_exception : yes
cpuid level  : 15
wp         : yes
flags      : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cpuid_fault epb pti fsgsbase smep xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts

## イベント
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 5199.99
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;openaiへの相談&#34;&gt;OpenAIへの相談
&lt;/h2&gt;&lt;p&gt;まず、コア数とクロック周波数に関しては、Intel(R) Xeon(R) CPU E7-4807 @ 1.87GHzは6つの物理コアと12個の論理コアを持ち、クロック周波数は1.87GHzです。一方、Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHzは8つの物理コアと16個の論理コアを持ち、クロック周波数は2.60GHzです。したがって、コア数とクロック周波数という点では、E5-2640 v3がシングルスレッドでのデータ処理においては、E7-4807よりも有利であると考えられます。&lt;/p&gt;
&lt;p&gt;次に、キャッシュサイズに関しては、E7-4807のキャッシュサイズは12MBであり、E5-2640 v3のキャッシュサイズは20MBです。したがって、E5-2640 v3はより大きなキャッシュスペースを持ち、データのアクセス速度とキャッシュヒット率を向上させることができます。&lt;/p&gt;
&lt;p&gt;最後に、アーキテクチャに関しては、E5-2640 v3はより高度なHaswellアーキテクチャを採用しており、E7-4807は旧いNehalemアーキテクチャを採用しています。&lt;/p&gt;
&lt;h2 id=&#34;openaiへの相談-1&#34;&gt;OpenAIへの相談
&lt;/h2&gt;&lt;p&gt;したがって、総合的に考慮すると、単一スレッドでループ処理を行うデータ処理のシナリオにおいては、E5-2640 v3の方がE7-4807よりも優れた性能を発揮する可能性があります。しかし、具体的な性能差は、アルゴリズム、メモリ帯域幅、システム負荷など、さまざまな要因によって影響を受けるため、個別の問題に対して具体的に分析する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア情報&#34;&gt;ハードウェア情報
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7%e2%80%934807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7–4807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&lt;/a&gt;
| 価格 | オンライン検索 $78 - 購入 |  |&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア仕様&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-1&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-2&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-3&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-4&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-5&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-6&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-7&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-8&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア情報-1&#34;&gt;ハードウェア情報
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;初登場&lt;/td&gt;
&lt;td&gt;Q3 2020&lt;/td&gt;
&lt;td&gt;Q3 2014&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-9&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;サンプル数&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-10&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Intel Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Intel Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-11&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ハードウェア仕様-12&#34;&gt;ハードウェア仕様
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;仕様&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>プロンプトエンジニア</title>
        <link>https://ttf248.life/ja/p/prompt-engineer/</link>
        <pubDate>Sun, 26 Mar 2023 20:46:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/prompt-engineer/</guid>
        <description>&lt;p&gt;例として、かつて検索エンジンのテクニックを学んだように、私たちはまた &lt;code&gt;AI&lt;/code&gt; とコミュニケーションするためのテクニックも習得する必要がある。合理的な制約条件を与え、効率的に必要な答えを得る方法を学ぶのだ。&lt;/p&gt;
&lt;p&gt;もし角度を変えて考えると、現在の &lt;code&gt;AI&lt;/code&gt; は記憶力に優れた小さな子供であり、完璧に暗記し、宿題をコピーできる能力を持っている。私たちがやるべきことは、&lt;code&gt;AI&lt;/code&gt; と正確かつ効果的にコミュニケーションする方法を学び、要求を正確に記述し、&lt;code&gt;AI&lt;/code&gt; が期待される結果を生み出すのを助けることだ。&lt;/p&gt;
&lt;h2 id=&#34;科学普及&#34;&gt;科学普及
&lt;/h2&gt;&lt;p&gt;話題となっている&lt;code&gt;AI&lt;/code&gt;（人工知能）を具体的に言うと&lt;code&gt;Generative Pre-Training&lt;/code&gt;（生成事前学習）です。これは、インターネットで利用可能なデータを用いて訓練されたテキスト生成のための深層学習モデルであり、質問応答、テキスト要約生成、機械翻訳、分類、コード生成、対話型AIなど様々なタスクに使用されます。現在、GPT-1、GPT-2、GPT-3、GPT-4といった異なるバージョンのモデルが存在し、それぞれが前バージョンよりも規模が大きく、性能も向上しています。&lt;/p&gt;
&lt;h2 id=&#34;到底有没有智能&#34;&gt;到底有没有智能
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;類似度が高ければ高いほど、精度も高くなる&lt;/li&gt;
&lt;li&gt;基本的な、反復性の仕事は、特定の訓練を受けることで、人工の介入が不要になる
生成式AIとは、既存のテキスト、音声、画像などのデータを活用して新しいコンテンツを作成する技術である。テキスト生成、音声合成、画像生成、対話システムなど、様々なタスクに使用できる。生成式AIの論理性は、その学習データとモデル構造に依存する。一般的に、生成式AIは一定程度、文法、論理、常識に従うことができるが、誤りや偏見、または不真実を含むコンテンツを生成することもある。そのため、生成式AIの出力は人間の判断と検証が必要であり、盲目的に信頼したり使用したりすることはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;プロンプトエンジニア&#34;&gt;プロンプトエンジニア
&lt;/h2&gt;&lt;p&gt;時間は流れようと逆らえない。人は潮流に適応することを学ぶ必要がある。AIを無駄なものだと考え、論理性がないと考えてしまうことがあるだろう。実際には、現在のAIは記憶力に優れた幼い子供であり、丸わかり能力、つまりコピー能力を持っている。私たちがやるべきことは、AIとどのように正しく、効果的に、そしてうまくコミュニケーションをとるか、正確な要求を記述し、AIが期待される結果を生み出すのを助けることだ。&lt;/p&gt;
&lt;h2 id=&#34;対話モデル&#34;&gt;対話モデル
&lt;/h2&gt;&lt;p&gt;2年前、GitHub Copilotの発表は誰も予想していませんでした。その結果、OpenAIが横空に出現し、人類は大規模言語モデルの能力を認識するに至りました。&lt;/p&gt;
&lt;p&gt;コメントベースのプログラミングと対話ベースのプログラミングというインターフェースの違いにより、インタラクティブなロジックは完全に異なり、対話モデルは初心者ユーザーにとって親しみやすいインタラクション体験を提供します。ここでNewBingが各質問の後に提示するフォローアップのヒントを必ず言及する必要があります。Microsoftは、AI知識ベースからより多くのコンテンツを取得するために、ユーザーに誘導しようと試みています。&lt;/p&gt;
&lt;h2 id=&#34;例え話&#34;&gt;例え話
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;シナリオ:&lt;/strong&gt; 高速鉄道の旅は長く、コーディングは良い選択肢です。データ容量が限られている場合、いくつかの画像を処理し、画像素材を入手しました。ソフトウェアで画像を処理するのは少し贅沢で、ネットワーク条件も許容されていません。
&lt;strong&gt;要件:&lt;/strong&gt; 画像素材のコレクションがあり、透明背景付きで、小アプリのナビゲーションバーで使用します。選択された状態はカラフルで、未選択の状態は白黒です。素材はすべてカラフルであり、事前に処理する必要があります。
&lt;strong&gt;プロンプト:&lt;/strong&gt; Pythonコードを記述して、フォルダからすべての画像を読み取り、画像を白黒に変換し、透明背景を維持し、画像を保存するときに画像の品質を最適化し、ファイルサイズを削減し、同時にコンソールで表示し、前後のファイルサイズの比較を行います。&lt;/p&gt;
&lt;h2 id=&#34;例を挙げる&#34;&gt;例を挙げる
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 必要なライブラリをインポートする
import os
import PIL
from PIL import Image
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例え話-1&#34;&gt;例え話
&lt;/h2&gt;&lt;h1 id=&#34;画像を白黒に変換し透明背景を維持し画像を保存しファイルサイズを返す関数を定義します&#34;&gt;画像を白黒に変換し、透明背景を維持し、画像を保存し、ファイルサイズを返す関数を定義します。
&lt;/h1&gt;&lt;p&gt;def convert_and_save(image_file):
# 画像を開く
image = Image.open(image_file)
# 画像のモードを取得し、RGBA モードの場合、透明背景があることを意味する
mode = image.mode
if mode == &amp;ldquo;RGBA&amp;rdquo;:
# 画像と同じサイズの白い背景画像を作成する
background = Image.new(&amp;ldquo;RGB&amp;rdquo;, image.size, (255, 255, 255))
# 元の画像を白い背景に貼り付け、透明ピクセルを無視する
background.paste(image, mask=image.split()[3])
# 合成された画像をグレースケールモードに変換する
gray_image = background.convert(&amp;ldquo;L&amp;rdquo;)
# グレースケール画像をRGBAモードに戻し、透明背景を保持する&lt;/p&gt;
&lt;h2 id=&#34;例えを挙げる&#34;&gt;例えを挙げる
&lt;/h2&gt;&lt;p&gt;gray_image = background.convert(&amp;ldquo;L&amp;rdquo;)
# 背景画像をグレースケールに変換し、透明背景を保持するためにRGBAモードに変換する
final_image = gray_image.convert(&amp;ldquo;RGBA&amp;rdquo;)
else:
# RGBAモードでない場合は、直接画像をグレースケールに変換する
final_image = image.convert(&amp;ldquo;L&amp;rdquo;)
# 元の画像のファイル名と拡張子を取得する
file_name, file_ext = os.path.splitext(image_file)
# 新しい画像のファイル名を定義し、&amp;quot;_bw&amp;quot;サフィックスを追加して白黒であることを示す
new_file_name = file_name + &amp;ldquo;_bw&amp;rdquo; + file_ext
# 新しい画像を保存し、品質を最適化してファイルサイズを削減する
final_image.save(new_file_name, optimize=True)
# 元の画像と新しい画像のファイルサイズを取得し、返す&lt;/p&gt;
&lt;h2 id=&#34;例を挙げる例を示す&#34;&gt;例を挙げる（例を示す）
&lt;/h2&gt;&lt;h1 id=&#34;新しい画像を保存し品質を最適化してファイルサイズを削減する&#34;&gt;新しい画像を保存し、品質を最適化してファイルサイズを削減する
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;final_image.save(new_file_name, optimize=True)
# 元の画像と新しい画像のファイルサイズを取得し、返す
old_size = os.path.getsize(image_file)
new_size = os.path.getsize(new_file_name)
return old_size, new_size
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例え話-2&#34;&gt;例え話
&lt;/h2&gt;&lt;h1 id=&#34;画像を保存するすべてのフォルダのパスを定義します&#34;&gt;画像を保存するすべてのフォルダのパスを定義します。
&lt;/h1&gt;&lt;p&gt;folder_path = &amp;ldquo;images&amp;rdquo;&lt;/p&gt;
&lt;h1 id=&#34;フォルダ内のすべてのファイルを確認します&#34;&gt;フォルダ内のすべてのファイルを確認します。
&lt;/h1&gt;&lt;p&gt;for file in os.listdir(folder_path):
# ファイルへの完全なパスを結合します。
file_path = os.path.join(folder_path, file)
# 画像ファイルの拡張子に基づいて、画像ファイルを判断します（必要に応じて拡張子を追加または変更できます）。
if file_path.endswith((&amp;quot;.png&amp;quot;, &amp;ldquo;.jpg&amp;rdquo;, &amp;ldquo;.jpeg&amp;rdquo;, &amp;ldquo;.gif&amp;rdquo;)):
# 画像を変換して保存し、ファイルサイズを取得する関数を呼び出します。
old_size, new_size = convert_and_save(file_path)
# 変換前のファイルと変換後のファイルサイズの比較をコンソールに出力します。
print(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)&lt;/p&gt;
&lt;h2 id=&#34;例え話-3&#34;&gt;例え話
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;AI&lt;/code&gt;は迅速に答えを提示し、見た目も美しく、使い勝手も問題ありませんでした。経験豊富なプログラムソースとしては、以下のコードが汎用性に欠け、本番環境へのデプロイも困難だと感じました：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パラメータが固定されている&lt;/li&gt;
&lt;li&gt;ログファイルがなく、すべての情報がコンソールに出力されている&lt;/li&gt;
&lt;li&gt;画像処理タスクにはマルチスレッドモデルが適している&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NewBing&lt;/code&gt;が登場し、プロンプトに基づいて問題を選択しました：「&lt;strong&gt;このコードの改善点はありますか？&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;今回提示された回答は、正直に言って、予想を大幅に上回るものでした。一般的なプログラマが思いつくような最適化策を&lt;code&gt;AI&lt;/code&gt;が提案しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;このコードには、以下のような改善点がある可能性があります：

`argparse`ライブラリを使用して、コマンドライン引数からフォルダーパスと拡張子を指定できるようにすることで、コードにハードコーディングされたままでは無くなります。 ログ記録ライブラリを使用し、プログラムの実行状況をコンソールへの直接出力ではなく記録することが可能です。
try-except文を使用して、ファイルオープン失敗や画像変換失敗などの例外を捕捉し、適切な処理を行うことができます。
multiprocessingライブラリを使用して、複数のCPUコアを活用することで、画像の変換と保存プロセスを高速化できます。

（環境の違いを考慮し、マルチプロセッシングのサポートがない場合に備えて記述されています。）

## 例を挙げてみましょう

```shell
もちろん、コードの修正をお手伝いさせていただきます。argparse、logging、try-except文を追加しましたが、マルチプロセッシングライブラリは、あなたのコンピュータがマルチコア処理に対応しているかどうか不明なため追加していません。修正後のコードは以下のとおりです：
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例を挙げる-1&#34;&gt;例を挙げる
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 必要なライブラリのインポート
import argparse
import logging
import multiprocessing
import os

from PIL import Image
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例え話-4&#34;&gt;例え話
&lt;/h2&gt;&lt;h1 id=&#34;画像を白黒に変換し透明背景を維持し画像を保存しファイルサイズを返す関数を定義します-1&#34;&gt;画像を白黒に変換し、透明背景を維持し、画像を保存し、ファイルサイズを返す関数を定義します。
&lt;/h1&gt;&lt;p&gt;def convert_and_save(image_file):
# 画像を開く
try:
image = Image.open(image_file)
except Exception as e:
logging.error(f&amp;quot;&amp;rsquo;{image_file}&amp;rsquo; のオープンに失敗しました：{e}&amp;quot;)
return None, None
# 画像のモードを取得し、RGBA モードの場合、透明背景があることを意味します。
mode = image.mode
if mode == &amp;ldquo;RGBA&amp;rdquo;:
# 画像と同じサイズの白い背景画像を作成します。
background = Image.new(&amp;ldquo;RGB&amp;rdquo;, image.size, (255, 255, 255))
# 元の画像を白い背景に貼り付け、透明ピクセルを無視します。
background.paste(image, mask=image.split()[3])&lt;/p&gt;
&lt;h2 id=&#34;例えを挙げる-1&#34;&gt;例えを挙げる
&lt;/h2&gt;&lt;h1 id=&#34;元の画像を白色背景に貼り付け透明ピクセルを無視する&#34;&gt;元の画像を白色背景に貼り付け、透明ピクセルを無視する
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;    background.paste(image, mask=image.split()[3])
    # 合成された画像にグレースケールモードに変換する
    gray_image = background.convert(&amp;quot;L&amp;quot;)
    # グレースケール画像をRGBAモードに戻し、透明背景を保持する
    final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
else:
    # RGBA モードでない場合は、直接画像にグレースケールモードで変換する
    final_image = image.convert(&amp;quot;L&amp;quot;)
# 元の画像のファイル名と拡張子を取得する
file_name, file_ext = os.path.splitext(image_file)
# 新しい画像のファイル名を定義し、_bw サフィックスを追加してモノクロであることを示す
new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
# 新しい画像を保存し、品質を最適化してファイルサイズを削減する
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例を挙げる-2&#34;&gt;例を挙げる
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 新しい画像を保存し、品質を最適化してファイルサイズを削減する
    try:
        final_image.save(new_file_name, optimize=True)
    except Exception as e:
        logging.error(f&amp;quot; {new_file_name} の保存に失敗しました：{e}&amp;quot;)
        return None, None
    # 元の画像と新しい画像のファイルサイズを取得し、返す
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return file_name, old_size, new_size
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例を挙げる例を示す-1&#34;&gt;例を挙げる（例を示す）
&lt;/h2&gt;&lt;h1 id=&#34;コマンドライン引数を解析しフォルダパスと拡張子リストを返す関数を定義する&#34;&gt;コマンドライン引数を解析し、フォルダパスと拡張子リストを返す関数を定義する
&lt;/h1&gt;&lt;p&gt;def parse_args():
# パーサーオブジェクトを作成する
parser = argparse.ArgumentParser(description=&amp;ldquo;画像を白黒に変換し、品質を最適化する。&amp;rdquo;)
# 必須の位置引数として、フォルダパスを追加する
parser.add_argument(&amp;ldquo;folder_path&amp;rdquo;, help=&amp;ldquo;画像が含まれるフォルダのパス。&amp;rdquo;)
# オプションの引数として、拡張子リストを追加する（デフォルトは png, jpg, jpeg, gif）
parser.add_argument(&amp;quot;-e&amp;quot;, &amp;ldquo;&amp;ndash;extensions&amp;rdquo;, nargs=&amp;quot;+&amp;quot;, default=[&amp;quot;.png&amp;quot;, &amp;ldquo;.jpg&amp;rdquo;, &amp;ldquo;.jpeg&amp;rdquo;, &amp;ldquo;.gif&amp;rdquo;], help=&amp;ldquo;画像ファイルの拡張子。&amp;rdquo;)
# コマンドライン引数を解析し、結果オブジェクトを返す&lt;/p&gt;
&lt;h2 id=&#34;例を挙げる-3&#34;&gt;例を挙げる
&lt;/h2&gt;&lt;h1 id=&#34;コマンドライン引数を解析し結果オブジェクトを返す&#34;&gt;コマンドライン引数を解析し、結果オブジェクトを返す
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;args = parser.parse_args()
return args.folder_path, args.extensions
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例を挙げる-4&#34;&gt;例を挙げる
&lt;/h2&gt;&lt;h1 id=&#34;実行前に後のファイルサイズと実行後にファイルサイズを比較する関数を定義します&#34;&gt;実行前に後のファイルサイズと実行後にファイルサイズを比較する関数を定義します。
&lt;/h1&gt;&lt;p&gt;def print_result(result):
# 結果が空でない場合、変換と保存が成功したことを意味します。
if result:
# 結果をファイル名とファイルサイズのタプルにアンパックします。
if len(result) == 3:
file, old_size, new_size = result
# コンソールで最適化前のファイルサイズと実行後のファイルサイズを比較を表示します。
logging.info(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
else:
logging.info(f&amp;quot;{result}&amp;quot;)&lt;/p&gt;
&lt;h2 id=&#34;例を挙げる-5&#34;&gt;例を挙げる
&lt;/h2&gt;&lt;h1 id=&#34;ロギングモジュールを設定しログをコンソールとファイルに出力しログレベルをinfoに設定する&#34;&gt;ロギングモジュールを設定し、ログをコンソールとファイルに出力し、ログレベルをINFOに設定する。
&lt;/h1&gt;&lt;p&gt;logging.basicConfig(level=logging.INFO,
format=&amp;quot;%(asctime)s %(levelname)s %(message)s&amp;quot;,
handlers=[logging.StreamHandler(),
logging.FileHandler(&amp;ldquo;log.txt&amp;rdquo;)])&lt;/p&gt;
&lt;h1 id=&#34;関数を呼び出してフォルダパスと拡張子リストを取得する&#34;&gt;関数を呼び出して、フォルダパスと拡張子リストを取得する。
&lt;/h1&gt;&lt;p&gt;folder_path, extensions = parse_args()&lt;/p&gt;
&lt;h2 id=&#34;例え話-5&#34;&gt;例え話
&lt;/h2&gt;&lt;h1 id=&#34;関数を呼び出してフォルダパスと拡張子のリストを取得する&#34;&gt;関数を呼び出して、フォルダパスと拡張子のリストを取得する
&lt;/h1&gt;&lt;p&gt;folder_path, extensions = parse_args()&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == &amp;ldquo;&lt;strong&gt;main&lt;/strong&gt;&amp;rdquo;:
# Windows でこの関数が必要な理由は、Windows には fork() 関数がないため (これは完全に正確ではありません)。
# したがって、Windows では、fork() は新しいプロセスを作成することでシミュレートされます。
# この新しいプロセスで実行されるコードは、Linux 上では子プロセスで実行されるものです。
# これらのコードが技術的に無関係なプロセスで実行されるため、実行前にそこに渡す必要があります。
# その方法は、まずそれらをシリアライズし、元のプロセスからパイプを介して新しいプロセスに送信することです。
# また、この新しいプロセスはパイプを介して送信されたコードを実行するように通知され、&amp;ndash;multiprocessing-fork コマンドラインパラメータを渡すことで行われます。&lt;/p&gt;
&lt;h2 id=&#34;例えのために&#34;&gt;例えのために
&lt;/h2&gt;&lt;h1 id=&#34;複数のプロセスプールを作成しpcのコア数に基づいてプロセスを自動的に割り当てる&#34;&gt;複数のプロセスプールを作成し、PCのコア数に基づいてプロセスを自動的に割り当てる
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;pool = multiprocessing.Pool()
# 空のリストを作成し、非同期タスクの結果オブジェクトを格納する
results = []
# フォルダー内のすべてのファイルに対して反復処理を行う
for file in os.listdir(folder_path):
    # ファイルパスを結合する
    file_path = os.path.join(folder_path, file)
    # 画像ファイルの拡張子を確認し、必要に応じて拡張子リストを変更する
    if any(file_path.endswith(ext) for ext in extensions):
        # 関数を呼び出して画像を変換および保存し、ファイルサイズを取得する。非同期モードで、メインプロセスをブロックしない
        result = pool.apply_async(convert_and_save, args=(file_path,), callback=print_result)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;例を挙げる-6&#34;&gt;例を挙げる
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = pool.apply_async(convert_and_save, args=(file_path,), callback=print_result)
            # 結果オブジェクトをリストに追加
            results.append((file, result))
    # 処理プールを閉じる（新しいタスクの受付を停止）
    pool.close()
    # すべてのタスクが完了するまで待機
    pool.join()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;ローカル開発が &lt;code&gt;windows&lt;/code&gt; システムであるため、AI が最初に提示した回答には &lt;code&gt;main&lt;/code&gt; 関数も &lt;code&gt;multiprocessing.freeze_support&lt;/code&gt; も含まれておらず、エラーが発生しました。質問を重ねることでエラーの原因を特定し、コードを修正しました。&lt;/p&gt;
&lt;p&gt;かつて検索エンジンの技術を学ぶように、AI とコミュニケーションする上でも、適切な制約条件を与え、効率的に必要な回答を得るためのスキルを習得する必要があります。&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;もしあなたがプログラミング初心者であれば、提示されたコメントと合わせて理解できない点がある場合は、引き続き関連コードについて質問してください。&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>微信ミニプログラムの背景と開発環境</title>
        <link>https://ttf248.life/ja/p/wechat-mini-program-background-and-development-environment/</link>
        <pubDate>Fri, 24 Mar 2023 21:59:11 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wechat-mini-program-background-and-development-environment/</guid>
        <description>&lt;p&gt;WeChat Mini Program Introduction and Development Preparation&lt;/p&gt;
&lt;h2 id=&#34;なぜミニプログラムが存在するのか&#34;&gt;なぜミニプログラムが存在するのか
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;優れた体験: 内包されたWebページの読み込みの遅延や白画面。ネイティブアプリの体験は、より高速な読み込みです。&lt;/li&gt;
&lt;li&gt;標準化と管理: 微信にとって、アクセスと管理を容易にするためです。
小程序の公開前に、微信は&lt;code&gt;SDK&lt;/code&gt;である&lt;code&gt;JSSDK&lt;/code&gt;をリリースし、微信支付、バッジなどの微信のネイティブ機能を公開しました。ただし、開発者はWeb開発言語を使用してロジックを構築し、微信の規制を回避していました。小程序には独自の記述言語が用意されています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;小プログラムとは&#34;&gt;小プログラムとは
&lt;/h2&gt;&lt;p&gt;小プログラムは、ダウンロードやインストールが不要で利用できるアプリケーションです。アプリを手の届くところに持つという夢を実現します。&lt;/p&gt;
&lt;p&gt;ユーザーはスキャンするか検索することでアプリを開き、使い終わったらすぐに終了するというコンセプト（「使ったら片付ける」の理念）も体現しています。&lt;/p&gt;
&lt;p&gt;ユーザーは、たくさんのアプリをインストールしてしまうことや、アプリのアンインストールといった心配をする必要はありません。アプリはどこにでも存在し、いつでも利用可能ですが、インストールやアンインストールは不要です。&lt;/p&gt;
&lt;h2 id=&#34;ミニアプリとモバイルアプリケーションの違い&#34;&gt;ミニアプリとモバイルアプリケーションの違い
&lt;/h2&gt;&lt;p&gt;インストール不要、メモリを消費しない、拡散が容易：スキャンコード、ミニアプリカード、そーいちょうすう&lt;/p&gt;
&lt;h2 id=&#34;小程序が何ができるか&#34;&gt;小程序が何ができるか
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;コンテンツツール：知乎熱榜、微博热门、摩拜单车、今日头条、腾讯地图、腾讯翻訳&lt;/li&gt;
&lt;li&gt;小売：拼多多、京东购物、蘑菇街、每日优鲜、小米商城、屈臣氏&lt;/li&gt;
&lt;li&gt;ゲーム：跳一跳、欢乐斗地主、欢乐麻将、斗鱼直播、YY直播&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;2018年のコース内容。現在までに一部のアプリベンダーが倒産しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;開発準備&#34;&gt;開発準備
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;小プログラムアカウントの登録：通常通り情報を入力して登録し、メールに記載された有効化リンクをクリックします。&lt;/li&gt;
&lt;li&gt;情報登録&lt;/li&gt;
&lt;li&gt;小プログラム管理後台へのログイン&lt;/li&gt;
&lt;li&gt;小プログラム情報の充実&lt;/li&gt;
&lt;li&gt;開発者との連携：個人開発者は、ログインに使用するWeChat（微信号）を管理者アカウントとして使用し、追加のバインド操作は不要です。
メールには制限があり、新しいメールアドレスが必要です。しかし、QQメールで別名を登録でき、WeChat後台での検証はありません。試行錯誤の結果、小プログラムの名前はかなり複雑になり、商標に関連する場合は審査に通りやすくなりにくいようです。
サービスカテゴリーを選択することも、カスタムで追加することも可能です。1つの小プログラムには最大5つのカテゴリーを追加できます。
設定画面では、小プログラムの&lt;code&gt;ID&lt;/code&gt;情報を確認でき、メッセージプッシュも有効化できます。メッセージプッシュを有効化すると、メッセージテンプレート機能を使用できます。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;開発者ツール筆者談&#34;&gt;開発者ツール（筆者談）
&lt;/h2&gt;&lt;p&gt;正常にダウンロードおよびインストールでき、特別な注意点はなく、概要を把握するだけで、すぐにゲストモードでアクセスします。モバイルデバッグを有効にするには、つまり小程序的開発バージョンをスマートフォンで確認するには、小程序的開発者アカウントにログインし、設定をクリックしてプロジェクトの詳細ページで指定された小程序的&lt;code&gt;ID&lt;/code&gt;に切り替える必要があります。&lt;/p&gt;
&lt;h2 id=&#34;コード構造&#34;&gt;コード構造
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;js: 相互作用ロジック&lt;/li&gt;
&lt;li&gt;json: データ設定&lt;/li&gt;
&lt;li&gt;wxml: 界面の要素&lt;/li&gt;
&lt;li&gt;wxss: 界面のスタイル&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>オフィスへの引っ越しにより、サーバーにアクセスできなくなりました。</title>
        <link>https://ttf248.life/ja/p/office-move-server-inaccessible/</link>
        <pubDate>Sat, 11 Mar 2023 01:42:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/office-move-server-inaccessible/</guid>
        <description>&lt;p&gt;行政通知、オフィス配置の変更（元の2階から15階への移動）、通常の事務室の移転&lt;/p&gt;
&lt;h2 id=&#34;デザインセンス&#34;&gt;デザインセンス
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/office-move-server-inaccessible/20230311014537.png&#34;
	width=&#34;511&#34;
	height=&#34;916&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;オフィスビル&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;55&#34;
		data-flex-basis=&#34;133px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;移住&#34;&gt;移住
&lt;/h2&gt;&lt;p&gt;荷造り、スムーズな進展、新しい作業場所への移動、PCの配線調整、快適な姿勢で仕事を開始
(ÒωÓױ)！、ネットワークケーブルを接続し、チームメンバーがよく使うサーバーにアクセスできなくなりました。無線LANに切り替えてみましたが、正常に戻りました。
当初はサーバーのIPアドレス設定の問題だと思っていました。新しい作業場所の有線LANがファイアウォールのリストに含まれていないため、IT担当者に相談して調整したところ解決しました。このIPアドレスは、他のサーバーにも使用されており、正常にアクセスできました。次第に疑問が生じ始めました？専門的なことは専門家に任せるべきです。最終的に運用部門の同僚が原因を特定し、このサーバーに&lt;code&gt;docker&lt;/code&gt;がデプロイされているため、サービスのデフォルトネットワークである&lt;code&gt;docker0&lt;/code&gt;とオフィスLANのIPアドレスが競合してしまい、データパケットが届かなくなり、&lt;code&gt;docker&lt;/code&gt;サービスにルーティングされてしまいました。 他のサーバーではDockerサービスがデプロイされておらず、そのためだけに私がよく使っており、時々コンテナでテスト用のサービスをデプロイすることもありましたが、このような状況に遭遇するとは思っていませんでした。その後、改めて考えると、グループ全体が同じオフィスビル内に存在し、IT部門の同僚がネットワークセグメントを区分けており、&lt;code&gt;172&lt;/code&gt;で始まるアドレスを使用することも不思議ではありませんでした。&lt;/p&gt;
&lt;h2 id=&#34;docker0&#34;&gt;docker0
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# vim /etc/docker/daemon.json
{
    &amp;quot;bip&amp;quot;:&amp;quot;172.200.0.1/24&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サービスを再起動し、新しいネットワークに切り替えると、サーバーが正常にアクセスできるようになりました。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://yeasy.gitbook.io/docker_practice/advanced_network/docker0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker入門から実践 - docker0&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>組み込みシステム入門編１－専門用語</title>
        <link>https://ttf248.life/ja/p/embedded-entry-professional-terms/</link>
        <pubDate>Tue, 07 Mar 2023 13:42:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/embedded-entry-professional-terms/</guid>
        <description>&lt;p&gt;組み込みシステムについて言及すると、脳裏に浮かぶのは、かつて学校の実験室で使っていた51ジャンク機とファルコムのイメージです。&lt;/p&gt;
&lt;p&gt;LPA3399Proは、瑞芯微RK3399Proプラットフォームをベースに開発されたビジュアルホストであり、大量の視覚演算が必要な携帯型コンピューティングホスト向けに設計されています。NPU（ニューラルプロセッシングユニット）内蔵で、3.0TOPSの演算能力を持ち、多様なアルゴリズムモデルに対応しています。&lt;/p&gt;
&lt;p&gt;RV1109は、瑞芯微の人工知能におけるビジョン処理のSoC（System on Chip）であり、独立したNPUを搭載しています。RV1109は、1TOPSの演算能力を提供します。&lt;/p&gt;
&lt;h2 id=&#34;system-on-chip&#34;&gt;System on Chip
&lt;/h2&gt;&lt;p&gt;SoC は System on a Chip の略で、「片上システム」を意味します。これは、複数の電子システムを 1 つのチップに統合する技術です。この技術により、電子製品のサイズと重量を大幅に削減すると同時に、性能を向上させ、消費電力を低減することができます。
SoC（System on a Chip）および CPU（Central Processing Unit）は、コンピュータシステムの重要な構成要素ですが、その間にはいくつかの違いがあります。
CPU は、コンピュータシステムの中核となるプロセッサで、プログラムの命令を実行します。通常、演算ユニット、制御ユニット、レジスタなどの基本的な部品のみを含みます。
一方、SoC は、複数の電子システムを 1 つのチップに統合し、CPU 以外にもメモリ、グラフィックス プロセッサ、入出力インターフェースなど、他のコンポーネントも統合することができます。 これにより、電子機器のサイズと重量を大幅に削減すると同時に、性能を向上させ、消費電力を低減することができます。&lt;/p&gt;
&lt;p&gt;要するに、CPU は SoC の構成要素であり、SoC 自体がより複雑で高集積化された電子システムです。&lt;/p&gt;
&lt;h2 id=&#34;マイクロコントローラユニット-microcontroller-unit&#34;&gt;マイクロコントローラユニット (Microcontroller Unit)
&lt;/h2&gt;&lt;p&gt;SoC（System on a Chip）と MCU（Microcontroller Unit）は、複数の電子システムを1つのチップに統合する技術ですが、その間にはいくつかの違いがあります。&lt;/p&gt;
&lt;p&gt;MCU はマイクロコントローラの一種で、通常、CPU、メモリ、入出力インターフェースなどの基本的な部品が含まれています。これは、家電製品や自動車電子システムなど、他の電子機器を制御するために一般的に使用されます。&lt;/p&gt;
&lt;p&gt;一方、SoC（System on a Chip）は、MCU の基本的な部品に加えて、グラフィックスプロセッサや無線通信モジュールなどの他のコンポーネントも1つのチップに統合します。これにより、電子製品のサイズと重量を大幅に削減し、同時に性能を向上させ、消費電力を低減することができます。&lt;/p&gt;
&lt;p&gt;まとめると、MCU はシンプルなマイクロコントローラであり、SoC はより複雑で、統合度が高い電子システムです。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AIによるプログラミング支援、生産性の進化</title>
        <link>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;GitHub Copilot のリリースからわずか 2 年しか経っていないのに、ChatGPT が登場し、裏にある原理をよく理解していない状態で、しばらく使ってみた。2 つのツールのサポートレベルは全く異なりだが、どちらも生産性を大幅に向上させた。
あまりにも複雑なことについては、AI ではまだできないだろう。なぜなら、彼らは論理がなく、パターンや形式固定されたもの、あるいは范式を確立しているものがだからだ。学習データは十分で、AI の効果は 9 分満点になる。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;GitHub Copilot
&lt;/h2&gt;&lt;p&gt;リリース時に、公式サイトの紹介の &lt;code&gt;demo&lt;/code&gt; を見ると、あまり賢くなく、試用してみましたが、使い勝手が良くありませんでしたので、諦めました。
2022年以前に、暇つぶしで切り替えて新バージョンを体験したところ、かなり良くなっており、ただ国内の速度が少し遅いのは、ネットワークの問題である可能性が高いです。&lt;code&gt;Python&lt;/code&gt;のような言語では、コメントに基づいて書かれたコードもそれなりによくできており、自分で資料を探して書いていたよりもはるかに速かったです。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;GitHub Copilot は、プログラマー、つまり開発者の視点から製品を設計しており、プログラミングを知っている必要がある。徐々にコメントを通じて AI を活用したプログラミングを支援してもらう。&lt;/p&gt;
&lt;p&gt;ChatGPT は次の段階に進み、&lt;strong&gt;専門知識のない人でもすぐに使いこなせるように&lt;/strong&gt;なった。対話形式でのチャットインターフェースであり、完全に質問や要求事項を提示し、理解できない場合はさらに質問することができる。 簡単な例を挙げます。品詞分割の概念は理解しているものの、どのようにエンコードするか分からないため、文字列の類似度を計算したいと考えています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python 品詞分割を用いて、「維天運通 LOGORY 和 合肥維天運通信息科技股份有限公司」という2つの文字列の類似度を計算します。比較する前に、文字列を統一的に処理し、英文は小文字に変換します。2番目の文字列の中に、1番目の文字列の先頭文字が見つかれば、2番目の文字列を1番目の文字列の長さ分切り捨てます。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんにちは、これはBingです。😊&lt;/p&gt;
&lt;p&gt;オンラインの情報123に基づくと、Python の品詞分割には jieba などのライブラリを使用できます。jieba ライブラリは、精密モード、全模式、検索エンジンモードの3種類の品詞分割をサポートしています。要件に応じて適切なモードを選択してください。 2つの文字列の類似度を比較するためには、まずそれらをトークン化し、その後、単語ベクトルや編集距離などの指標を計算する必要があります。NumPyまたはSciPyなどのライブラリを使用して、これらの数値演算を実行できます。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-1&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;文字列の統一的な処理、および英語を小文字に変換するには、Python の組み込み関数 &lt;code&gt;lower()&lt;/code&gt; を使用できます。
2 番目の文字列を抽出するには、Python のスライス演算子 &lt;code&gt;[ ]&lt;/code&gt; を使用します。
以下は 1 つの可能なコード例です：&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-2&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jieba
import numpy as np
from scipy.spatial.distance import cosine

# 定义两个字符串
str1 = &amp;quot;維天運通 LOGORY&amp;quot;
str2 = &amp;quot;合肥維天運通信息科技股份有限公司&amp;quot;

# 统一处理字符串，英文转换为小写
str1 = str1.lower()
str2 = str2.lower()

# 找到第二个字符串中第一个字符的位置
index = str2.find(str1[0])

# 如果找到了，截取第二个字符串
if index != -1:
    str2 = str2[index:index+len(str1)]

# 使用 jieba 库进行分词
words1 = list(jieba.cut(str1))
words2 = list(jieba.cut(str2))

# 计算两个字符串的词向量（以词频作为权重）
vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chatgpt-3&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;h1 id=&#34;2つの文字列の単語ベクトルを計算する-頻度を重みとして使用&#34;&gt;2つの文字列の単語ベクトルを計算する (頻度を重みとして使用)
&lt;/h1&gt;&lt;p&gt;vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))&lt;/p&gt;
&lt;p&gt;for i, word in enumerate(words1):
vector1[i] += 1  # 最初の文字列内の各単語の出現回数をカウント
if word in words2:
vector2[i] += 1  # 2番目の文字列内の各単語の出現回数をカウント&lt;/p&gt;
&lt;h1 id=&#34;2つの文字列の類似度を計算する-コサイン距離を指標として使用&#34;&gt;2つの文字列の類似度を計算する (コサイン距離を指標として使用)
&lt;/h1&gt;&lt;p&gt;similarity = 1 - cosine(vector1, vector2)&lt;/p&gt;
&lt;p&gt;print(&amp;ldquo;2つの文字列の類似度は：&amp;rdquo;, similarity)&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-4&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;さらに踏み込んで、実行結果の問い合わせ、おめでとうございます。問題が見つかりました。結果はハッタリ（作り話）、コードを実行していません。しかし、素晴らしい結果を提供してくれます。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;栗子&#34;&gt;栗子
&lt;/h3&gt;&lt;p&gt;質問：SQL文で、製品コードテーブルから、製品コードが80000-89999のレコードを抽出するには&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;こんにちは、これはBingです。😊

検索結果12によると、BETWEEN演算子を使用して、指定された範囲内の値を選択できます。BETWEEN演算子は、開始値と終了値を両方含みます。

まず、クエリするテーブル名と列名を指定し、WHERE句でBETWEEN演算子と範囲値を指定する必要があります。

たとえば、製品コードテーブルから、製品コードが80000から89999のレコードを抽出するには、次のステートメントを使用できます。

SELECT * FROM product_code
WHERE code BETWEEN 80000 AND 89999;
ここで、*はすべての列を選択することを意味します3。
``` 製品コードは文字列であり、あなたのコードは間違っています。

### 栗子

```markdown
申し訳ありませんが、製品コードが文字列であることに気づいていませんでした。もしそうであれば、区間値の両側にシングルクォートを追加する必要があります。例：

SELECT * FROM product_code
WHERE code BETWEEN &#39;80000&#39; AND &#39;89999&#39;;
私の誤りをお許しください。🙏
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おめでとうございます、それは間違えるでしょう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>いくつかのGitコマンドのまとめ</title>
        <link>https://ttf248.life/ja/p/less-common-git-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/less-common-git-commands-summary/</guid>
        <description>&lt;p&gt;あまり使わないけれど非常に便利な &lt;code&gt;git&lt;/code&gt; コマンド&lt;/p&gt;
&lt;h3 id=&#34;システムを再インストールした結果windows上のフォルダーの所有権が変更されました&#34;&gt;システムを再インストールした結果、Windows上のフォルダーの所有権が変更されました。
&lt;/h3&gt;&lt;p&gt;新しいバージョンのGitにはセキュリティチェックが追加され、不安全であると警告が表示されるため、操作できなくなりました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ユーザーの新しいコンピューターにアカウントとパスワード情報を保存する&#34;&gt;ユーザーの新しいコンピューターにアカウントとパスワード情報を保存する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存された情報が更新が必要な場合は、まず古い認証情報を削除してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>両替櫃台システム（または、クロスボーダー両替システム）</title>
        <link>https://ttf248.life/ja/p/hk-rmb-dual-counter/</link>
        <pubDate>Thu, 16 Feb 2023 20:25:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hk-rmb-dual-counter/</guid>
        <description>&lt;p&gt;香港交易所於12月13日宣布，旗下證券市場將推出「港元-人民幣雙櫃台模式」（以下稱「雙櫃台模式」）及雙櫃台莊家機制，進一步支持人民幣櫃檯在香港上市、交易及結算。&lt;/p&gt;
&lt;h2 id=&#34;双柜台模式および双柜台庄家メカニズム&#34;&gt;双柜台模式および双柜台庄家メカニズム
&lt;/h2&gt;&lt;p&gt;香港証取引所（HKEX）は、規制当局の承認と市場の準備が整うのを待って、これらの新措置の登録手続きが2023年第1四半期以降に開始される見込みであると発表しました。双柜台模式下、HKEXは関連する取引および決済手配を最適化し、投資家が同じ発行体の香港ドル柜台および人民元柜台証券を交換できるようにします。&lt;/p&gt;
&lt;p&gt;人民币柜台の流動性を高め、両柜台間の価格差を縮小するため、香港証取引所は双柜台庄家メカニズムを導入します。関連法規が立法会で可決された後、流通量供給活動を行う市場庄家は、特定の取引を行った際に印紙税の免除を受けることができます。同時に、これらの新措置も、後続の内地投資家が港股通（香港－中国陸続き株式連動基金）を通じて人民元価格で取引される証券を準備するための前段階的な作業を行います。 「恒関通貨（港元-人民元双櫃台模式）および双櫃台莊家機制を導入することは、市場発展にとって重要な措置です。当社の他の市場措置と連携し、この安排はより多くの双櫃台証券が香港に上場し、香港証取引所の既存の内地製品との良好な協調効果を発揮するのに役立ちます。香港証取引所は、人民币国際化の推進と、香港をグローバル・リーディング・オフショア・人民元センターとしての地位向上に努めています。」香港証取引所の最高執行責任者および市場統括責任官姚嘉仁が表明しました。&lt;/p&gt;
&lt;p&gt;据悉，港股现行的上市、交易、结算及交收安排亦将大致适用于双柜台模式下的人民币柜台证券。 港交所将适时公布双柜台模式的实施日期以及符合纳入庄家机制的合资格双柜台证券名单。&lt;/p&gt;
&lt;h2 id=&#34;港元人民元取引櫃台の識別方法&#34;&gt;港元・人民元取引櫃台の識別方法
&lt;/h2&gt;&lt;p&gt;香港証券取引会の文書によると、港元・人民元双子列取引の安排は、既存の株式コード配分計画に概ね準拠し、すなわち、港元子列の株式コードは「0」で始まる5桁数字、人民元子列の株式コードは「8」で始まる5桁数字となる。 港元と人民元の子列株式コードの最後の4桁は共通である。 人民元子列の株式略称には、「-R」が付加される。&lt;/p&gt;
&lt;p&gt;取引安排については、人民币および港元子列の证券が同一カテゴリーであり相互変換可能であるという前提に基づき、ある子列（例えば港元子列）が売越し対象指定证券を保有する場合、別の子列（例えば人民元子列）も取引所の規則に従い売越し対象指定证券として取り込まれ、その結果、両子列とも取引所で公開されている売越し対象指定证券リストに記載される。 両ブローカー体制において、2つの取引所が保有する株式が同一カテゴリーに属し、相互変換可能である場合、香港ドルまたは人民元でその株式を保有し、もう一方の取引所で売却することは、事実上持ち仕立て売却とみなされます。逆の場合も同様です。両取引所の決済期間はT+2です。&lt;/p&gt;
&lt;p&gt;空売り資格を満たす指定株式（例えば、香港ドルで株式を借入し、人民元取引所での売却）は、担保付きの空売りとみなされます。逆の場合も同様です。&lt;/p&gt;
&lt;p&gt;なお、両ブローカー体制下では、人民元取引所が単に取引および決済のみを目的としているため、人民元取引所に実物の株式を預け入れたり引き出したりするサービスを提供しません。実物の株式は、まず香港ドル取引所に預け入れ後、人民元取引所で換算する必要があります。同様に、人民元取引所から株式を引き出すには、まず香港ドル取引所に換算してから引き出します。&lt;/p&gt;
&lt;h2 id=&#34;港元-人民币交易柜台识别方法&#34;&gt;港元-人民币交易柜台识别方法
&lt;/h2&gt;&lt;p&gt;相关交易的结算及交收费用，所有香港结算费用（除代收股息服务费和代收利息服务费之外）均以港元计价并收取。代收股息服务费和代收利息服务费以有关证券采用的合格货币计算。&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Trading/Securities/Overview/Trading-Mechanism/HKD-RMB-Dual-Counter-Model?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKD-RMB-Dual-Counter-Model&lt;/a&gt;
出典：香港交易所脈搏/HKEx Pulse、券商中国&lt;/p&gt;
</description>
        </item>
        <item>
        <title>- コンパイラ
- コールバック関数
- パフォーマンステスト</title>
        <link>https://ttf248.life/ja/p/compiler-callback-performance-testing/</link>
        <pubDate>Wed, 15 Feb 2023 13:59:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/compiler-callback-performance-testing/</guid>
        <description>&lt;p&gt;昨年、SDKを設計し、イベントの処理や外部へのクラスインターフェース提供を担当しました。サービス初期化時に、呼び出し元が対応するクラスを実装し、オブジェクトポインタをモジュールに渡す仕組みでした。&lt;/p&gt;
&lt;p&gt;C11にも触れており、好奇心でλ関数オブジェクトによるコールバックの実装がどのような結果になるのか、また純粋仮想関数インターフェースとの比較として、より柔軟性があるのかどうか試してみたところ、疑問が生じました。&lt;/p&gt;
&lt;p&gt;異なる構文のどちらが性能面で優れているか、コンパイラ原理は理解していないので、コードを書いて試してみることにしました。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;p&gt;オンラインのURLで、異なるコンパイラを選択したり、コンパイルパラメータを設定したり、&lt;code&gt;linux&lt;/code&gt;プラットフォーム上でコードを実行したり、対応するアセンブリコードを確認したりできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;：時々技術検証のために、ウェブ上で小さなコードスニペットを実行するのは非常に便利です。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://godbolt.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://godbolt.org/&lt;/a&gt;：異なる色でアセンブリコードと対応するコードを区別できるため、ローカルのデバッガよりも手間がかかりません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;標準委員会は文法のルールを定め、コンパイルレベルにおいてそれがどのように実現されるかは、各社のコンパイラに依存します。この点については、特にお祝いすべきことなのですが、マイクロソフトのコンパイラは非常に素晴らしいです。文法糖衣は万能ではなく、コールバックインターフェースが少なく、ラムダ式を使用する方がより便利で、空のコールバック関数インターフェースを定義する必要もありません。コールバックインターフェースの種類が多い場合は、従来の仮想関数の方がビジネスインターフェースの一貫性を定義するのに有利です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsプラットフォームでは、両者の性能はほぼ同じであり、大きな違いはありません。&lt;/li&gt;
&lt;li&gt;Linuxプラットフォームでは、仮想関数とラムダ式を比較すると、1回の処理で1.35ns増加します。
通常のビジネスシステム開発においては、この程度のパフォーマンスの低下は無視できます。ラムダ式を使用することで、設計上の利便性が向上します。特に多信号処理において顕著であり、底层にはイベントトリガーがあり、ログ出力が必要な場合、ログオブジェクトへの入力関数を処理する関数です。 当より多くのビジネス処理インターフェースが必要な場合、その下位レイヤーでは &lt;code&gt;vector&lt;/code&gt; に &lt;code&gt;lambda&lt;/code&gt; オブジェクトを保存し、イベントがトリガーされる際に、順番にイテレーションして呼び出す。これは &lt;code&gt;QT&lt;/code&gt; のシグナルとスロットに似ており、ログ、監視、ビジネス1、ビジネス2 などが完全に疎結合になっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;コード&#34;&gt;コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;カウンター：1000000
時間：3966us
カウンター：1000000
時間：5316us
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;コード-1&#34;&gt;コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;atomic&amp;gt;
#include &amp;lt;string&amp;gt;

std::atomic_int64_t counter = 0;

// 回调接口定义
class UserInterface
{
public:
    virtual void name() = 0;
    virtual void full_name() = 0;
};

class User : public UserInterface
{
public:
    void name() {}
    void full_name() { counter++; }
};

void to_string(UserInterface* user)
{
    user-&amp;gt;name();
    user-&amp;gt;full_name();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## コード
void to_string(UserInterface* user)
{
    user-&amp;gt;name();
    user-&amp;gt;full_name();
}

using name_handler = std::function&amp;lt;void()&amp;gt;;
using full_name_handler = std::function&amp;lt;void()&amp;gt;;

class Test
{
    name_handler name_;
    full_name_handler full_name_;

public:
    void set_name_handler(name_handler name)
    {
        name_ = name;
    }

    void set_full_name_handler(full_name_handler full_name)
    {
        full_name_ = full_name;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;コード-2&#34;&gt;コード
&lt;/h2&gt;&lt;p&gt;void to_string(UserInterface* user)
{
user-&amp;gt;name();
user-&amp;gt;full_name();
}&lt;/p&gt;
&lt;p&gt;using name_handler = std::function&amp;lt;void()&amp;gt;;
using full_name_handler = std::function&amp;lt;void()&amp;gt;;&lt;/p&gt;
&lt;p&gt;class Test
{
name_handler name_;
full_name_handler full_name_;&lt;/p&gt;
&lt;p&gt;public:
void set_name_handler(name_handler name)
{
name_ = name;
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void set_full_name_handler(full_name_handler full_name)
{
    full_name_ = full_name;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
```cpp
## コード
void to_string() {
    name_();
    full_name_();
}
};

int main() {
    User user;

    auto start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++) {
        to_string(&amp;amp;user);
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;Counter: &amp;quot; &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;Time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;コード-3&#34;&gt;コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;counter = 0;
auto name = []() {};
auto full_name = []() { counter++; };

Test test;
test.set_name_handler(name);
test.set_full_name_handler(full_name);

start = std::chrono::high_resolution_clock::now();

for (int i = 0; i &amp;lt; 1000000; i++)
{
    test.to_string();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;## コード
for (int i = 0; i &amp;lt; 1000000; i++)
{
    test.to_string();
}

end = std::chrono::high_resolution_clock::now();
std::cout &amp;lt;&amp;lt; &amp;quot;Counter: &amp;quot; &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; std::endl;
std::cout &amp;lt;&amp;lt; &amp;quot;Time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;コード-4&#34;&gt;コード
&lt;/h2&gt;&lt;p&gt;for (int i = 0; i &amp;lt; 1000000; i++)
{
test.to_string();
}&lt;/p&gt;
&lt;p&gt;end = std::chrono::high_resolution_clock::now();
std::cout &amp;laquo; &amp;ldquo;Counter: &amp;quot; &amp;laquo; counter &amp;laquo; std::endl;
std::cout &amp;laquo; &amp;ldquo;Time: &amp;quot; &amp;laquo; std::chrono::duration_cast&lt;a class=&#34;link&#34; href=&#34;std::chrono::microseconds&#34; &gt;std::chrono::microseconds&lt;/a&gt;(end - start).count() &amp;laquo; &amp;ldquo;us&amp;rdquo; &amp;laquo; std::endl;&lt;/p&gt;
&lt;p&gt;return 0;
}&lt;/p&gt;
&lt;h2 id=&#34;付録&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;資料を検索する際に見つけた類似したコードスニペット &lt;a class=&#34;link&#34; href=&#34;https://gist.githubusercontent.com/benloong/8050171/raw/fa577ec923b460862078b8b40233a42a1c619eeb/functionperformance.cpp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;functionperformance.cpp&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;付録&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

using namespace std;
using namespace std::chrono;

class Base
{
public:
	Base(){}
	virtual ~Base(){}
	virtual int func(int i) = 0;
};

class Derived : public Base
{
public:
	Derived(int base = 10) : base{base}
	{

	}
	~Derived(){}

	virtual int func(int i)
	{
		return i*base;
	}
private:
	int base;
};

struct Func
{
	int base;
	int operator()(int i)
	{
		return i*base;
	}
	Func(int base) : base {base}
	{
	}
};

int main()
{
	Derived d;
	Func f(5);

	cout &amp;lt;&amp;lt; d.func(2) &amp;lt;&amp;lt; endl;
	cout &amp;lt;&amp;lt; f(3) &amp;lt;&amp;lt; endl;

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;付録-1&#34;&gt;付録
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;const int base = 10;
int calculate(int i)
{
	return base*i;
}

int main()
{
	const int num = 10000;
	Base *p = new Derived{10};
	int total = 0;
	auto start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += p-&amp;gt;func(i);
	}
	auto end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nvirtual call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;付録-2&#34;&gt;付録
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;total = 0;
    start = high_resolution_clock::now();
    for (int i = 0; i &amp;lt; num; ++i)
    {
        total += calculate(i);
    }
    end = high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;result: &amp;quot; &amp;lt;&amp;lt; total &amp;lt;&amp;lt; &amp;quot;\ndirect function call elapsed: \t&amp;quot; &amp;lt;&amp;lt; duration_cast&amp;lt;nanoseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot; nanoseconds.\n&amp;quot; &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;付録-3&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;Func functor{10};
total = 0;
start = high_resolution_clock::now();
for (int i = 0; i &amp;lt; num; ++i)
{
total += functor(i);
}
end = high_resolution_clock::now();
std::cout&amp;laquo;&amp;ldquo;result: &amp;ldquo;&amp;laquo;total&amp;laquo;&amp;quot;\nfunctor call elapsed: \t&amp;rdquo;&amp;laquo;duration_cast&lt;nanoseconds&gt;(end-start).count()&amp;laquo;&amp;rdquo; nanoseconds.\n&amp;rdquo;&amp;laquo;std::endl;
int base = 10;
function&amp;lt;int(int)&amp;gt; lambda = [base](int i)
{
return i*base;
};
total = 0;
start = high_resolution_clock::now();
for (int i = 0; i &amp;lt; num; ++i)
{
total += lambda(i);
}&lt;/p&gt;
&lt;h2 id=&#34;付録-4&#34;&gt;付録
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;

int main() {
  auto start = std::high_resolution_clock::now();
  long long total = 0;
  for (int i = 0; i &amp;lt; num; ++i) {
    total += lambda(i);
  }
  auto end = std::high_resolution_clock::now();
  std::cout &amp;lt;&amp;lt; &amp;quot;result: &amp;quot; &amp;lt;&amp;lt; total &amp;lt;&amp;lt; &amp;quot;\nlambda call elapsed: \t&amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot; nanoseconds.\n&amp;quot; &amp;lt;&amp;lt; std::endl;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;付録-5&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;/*
mac mini i7 2.7GHz 上でのテスト
clang++ -std=c++11 chronotest.cpp -O0
出力：
result: 499950000
仮想呼び出し時間:	43171 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
直接関数呼び出し時間:	31379 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
関数呼び出し時間:	41497 ナノ秒。&lt;/p&gt;
&lt;h1 id=&#34;ラムダ呼び出し時間207416-ナノ秒&#34;&gt;result: 499950000
ラムダ呼び出し時間:	207416 ナノ秒。
&lt;/h1&gt;&lt;p&gt;clang++ -std=c++11 chronotest.cpp -O1
出力：
result: 499950000
仮想呼び出し時間:	26144 ナノ秒。&lt;/p&gt;
&lt;h2 id=&#34;付録-6&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;result: 499950000
直接関数呼び出しにかかった時間: 22384 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
ファンクタ呼び出しにかかった時間: 33477 ナノ秒。&lt;/p&gt;
&lt;h1 id=&#34;ラムダ呼び出しにかかった時間-55799-ナノ秒&#34;&gt;result: 499950000
ラムダ呼び出しにかかった時間: 55799 ナノ秒。
&lt;/h1&gt;&lt;p&gt;clang++ -std=c++11 chronotest.cpp -O2
result: 499950000
仮想関数呼び出しにかかった時間: 22284 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
直接関数呼び出しにかかった時間: 36 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
ファンクタ呼び出しにかかった時間: 30 ナノ秒。&lt;/p&gt;
&lt;h2 id=&#34;付録-7&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;result: 499950000
functor呼び出しにかかった時間: 	30 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
lambda呼び出しにかかった時間: 	28292 ナノ秒。&lt;/p&gt;
&lt;p&gt;===================================================
clang++ -std=c++11 chronotest.cpp -O3
result: 499950000
仮想関数呼び出しにかかった時間: 	18975 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
直接関数呼び出しにかかった時間: 	29 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
functor呼び出しにかかった時間: 	30 ナノ秒。&lt;/p&gt;
&lt;h2 id=&#34;付録-8&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;result: 499950000
functor call elapsed: 	30 ナノ秒。&lt;/p&gt;
&lt;h1 id=&#34;lambda-call-elapsed-22542-ナノ秒&#34;&gt;result: 499950000
lambda call elapsed: 	22542 ナノ秒。
&lt;/h1&gt;&lt;p&gt;clang++ -std=c++11 chronotest.cpp -O4&lt;/p&gt;
&lt;p&gt;result: 499950000
virtual call elapsed: 	22141 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
direct function call elapsed: 	30 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
functor call elapsed: 	30 ナノ秒。&lt;/p&gt;
&lt;p&gt;result: 499950000
lambda call elapsed: 	22584 ナノ秒。
*/&lt;/p&gt;
&lt;h2 id=&#34;付録-9&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;ここでは、通常の関数と汎関数という2つのモードが追加され、コールバックインターフェースの提供による比較と直接呼び出しによる比較が行われました。性能の低下は桁違いであり、汎関数は関数のパフォーマンスに近接し、場合によっては汎関数のパフォーマンスが優れています。コンパイラ原理に関しては、知識の盲区であると推測します。これは、アクセスされる変数のアドレスと関数が隣接しているため、&lt;code&gt;CPU&lt;/code&gt;処理に有利だと考えられます。&lt;/p&gt;
&lt;p&gt;以下に &lt;code&gt;wandbox&lt;/code&gt; の実行結果を示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result: 499950000
virtual call elapsed: 6143 nanoseconds.

result: 499950000
direct function call elapsed: 30 nanoseconds.

result: 499950000
functor call elapsed: 31 nanoseconds.

result: 499950000
lambda call elapsed: 15134 nanoseconds.
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>ホストモード、ネットワークモード、デバッガを使用して直接観察する</title>
        <link>https://ttf248.life/ja/p/host-network-byte-order-debugger/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/host-network-byte-order-debugger/</guid>
        <description>&lt;p&gt;コンピュータの発展の歴史において、データの保存方法には統一された標準は存在しませんでした。
バイトの並び方は2つの一般的なルールに従っていました。例えば、ある多桁数の低いバイトを小さいアドレスに、高いバイトを大きいアドレスに配置する場合、これを小端序と呼びます。その逆の場合、大端序と呼びます。ネットワークアプリケーションにおいては、バイトオーダーは考慮すべき重要な要素であり、異なる種類のコンピュータが異なる標準のバイトオーダーを採用しているため、すべてネットワーク標準に変換されます。
読解習慣に従うと、大端バイトオーダーの方が左から右への読み込み順序に合致します。&lt;/p&gt;
&lt;h2 id=&#34;プロセッサアーキテクチャhttpszhwikipediaorgwikie5ad97e88a82e5ba8f&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;プロセッサアーキテクチャ&lt;/a&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;x86、MOS Technology 6502、Z80、VAX、PDP-11などのプロセッサは小端序を採用&lt;/li&gt;
&lt;li&gt;Motorola 6800、Motorola 68000、PowerPC 970などのプロセッサは大端序を採用&lt;/li&gt;
&lt;li&gt;ARM、PowerPC（PowerPC 970を除く）、DEC Alpha、SPARC V9、MIPS、PA-RISCおよびIA64のバイトオーダーは可変式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络序&#34;&gt;网络序
&lt;/h2&gt;&lt;p&gt;ネットワーク転送では一般的に大端序が用いられ、ネットワークバイト序とも呼ばれ、ネットワーク序とも言います。IPプロトコルにおいて大端序はネットワークバイト序として定義されています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Berkeley&lt;/code&gt;ソケットは、16ビットおよび32ビット整数をネットワーク序とホストバイト序間で変換するための変換関数群を定義しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); // uint32_t をネットワーク序に変換
uint16_t htons(uint16_t hostshort); // uint16_t をネットワーク序に変換
uint32_t ntohl(uint32_t netlong); // uint32_t をネットワーク序からホスト序へ変換
uint16_t ntohs(uint16_t netshort); // uint16_t をネットワーク序からホスト序へ変換
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;asio&lt;/code&gt; をネットワークライブラリとして使用する場合、組み込みの命名空間には、クロスプラットフォームに対応した関数名が用意されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ネットワーク序&#34;&gt;ネットワーク序
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;visual-studio-デバッガー&#34;&gt;Visual Studio デバッガー
&lt;/h2&gt;&lt;p&gt;デバッグモードでは、デバッグメニューを選択し、ウィンドウからメモリウィンドウにチェックを入れます。
Visual Studio では、デバッガー内で直接メモリ内のデータを表示できます（下記画像参照）。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/Snipaste_2023-01-10_14-44-00.png&#34;
	width=&#34;535&#34;
	height=&#34;147&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;デバッガーメニュー&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;363&#34;
		data-flex-basis=&#34;873px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;メモリの確認方法&#34;&gt;メモリの確認方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ウィンドウから直接変数名を表示し、対応する変数のアドレスにジャンプします。&lt;/li&gt;
&lt;li&gt;変数が元の場合はポインタである場合、ウィンドウで変数をダブルクリックして選択し、メモリウィンドウにドラッグすると、対応する内容が表示されます。&lt;/li&gt;
&lt;li&gt;変数がポインタでない場合は、計算ウィンドウに追加し、アドレスを取得してから、手動でメモリウィンドウにコピーします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例を挙げて説明します&#34;&gt;例を挙げて説明します
&lt;/h3&gt;&lt;p&gt;データを受信し、&lt;code&gt;buffer&lt;/code&gt;オブジェクトに格納します。ネットワークバイトオーダーをホストバイトオーダーに変換し、&lt;code&gt;body_length&lt;/code&gt;が30になります。サーバー側では、このデータを送信するために4バイトを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // ネットワークバイトオーダーをホストバイトオーダーに変換
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;大端型バイトオーダー&lt;/strong&gt;: メモリウィンドウ内の&lt;code&gt;buffer_&lt;/code&gt;の内容を観察します。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;小端型バイトオーダー&lt;/strong&gt;: メモリウィンドウ内の&lt;code&gt;body_length_&lt;/code&gt;の内容を観察します。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>その頃の少年は、才能があるかもしれないが、それほど多くはなかった。</title>
        <link>https://ttf248.life/ja/p/that-boy-talent-maybe-but-not-much/</link>
        <pubDate>Mon, 09 Jan 2023 13:45:09 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/that-boy-talent-maybe-but-not-much/</guid>
        <description>&lt;p&gt;勤務における7回目の年、コードからのポジティブなフィードバックが減ってきており、どのようにしてコーディングという道に進むことになったのかを振り返る。人々の様々な選択において、幼い頃ほど正のフィードバックに従う傾向があり、害を避けて利益を得ようとする。&lt;/p&gt;
&lt;h2 id=&#34;一子供の頃&#34;&gt;一、子供の頃
&lt;/h2&gt;&lt;p&gt;引っ越しで都心に住むようになり、コンピューターの教科書？ハッカーの資料？Windowsシステムに触れるなど、それらは全てエピソードです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;時間は子供時代と、親戚である甥っ子と秘密裏に家のパソコンでゲームをしていた時期に絞るべきでしょう。&lt;/strong&gt; 甥っ子と舅（おじ）がパソコンショップを経営していました。&lt;/p&gt;
&lt;p&gt;幼い頃から私達はコンピューターに触れる時間が比較的早かったため、基本的な認識を確立しました。その後、学校でミツキ（微機：微電腦）の授業を受けたこともあり、興味を持つようになりました。&lt;/p&gt;
&lt;p&gt;中学生の頃にはコンピュータ競技会について聞いたことがありますが、それについては一旦置いておきました。&lt;/p&gt;
&lt;p&gt;私が上中時代は、コンピューターの基本的な操作に慣れており、ミツキの授業では比較的注目を浴びることができました。&lt;/p&gt;
&lt;p&gt;もしあなたがまだそれを知っているなら、はい、あなたは間違っていません。熟練（しゅっけん）しているのではなく、Officeなどのオフィスソフトに精通（せいつう）している方が、さらに素晴らしいでしょう。&lt;/p&gt;
&lt;h2 id=&#34;二引越し&#34;&gt;二、引越し
&lt;/h2&gt;&lt;p&gt;引越しということを改めて考えると、都心に引っ越してきたことと近所の状況から、図書館に接触することになり、小説を αρκε数読んだものの、雑誌も多く読みました。&lt;/p&gt;
&lt;p&gt;『コンピュータ報』、『大众软件』&lt;/p&gt;
&lt;p&gt;ますますコンピューターという製品に対して興味を持つようになりました。子供の頃の心理におけるハッカーへの崇拝が強く、積極的に学校で関連する知識を学びました。&lt;/p&gt;
&lt;p&gt;オペレーティングシステムの基本的なことを理解しました：コントロールパネル、CMDコマンド、VBSスクリプト&lt;/p&gt;
&lt;p&gt;『コンピュータ報』は初心者向けで、毎回事例形式でシステムの操作方法を解説していました。&lt;/p&gt;
&lt;p&gt;『大众软件』では、様々なソフトウェアの紹介、業界ニュース、&lt;strong&gt;もちろんゲームニュースもありました。当初のモチベーションもここで生まれ、ゲームへの興味が芽生えました&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;iii-senior-high-school&#34;&gt;III. Senior High School
&lt;/h2&gt;&lt;p&gt;When I was in my second year of high school, Bo Ge transferred to our class and had several predecessors who were admitted through computer competition quotas in the previous two years. The school principal also paid a lot of attention to this competition.&lt;/p&gt;
&lt;p&gt;There was also a pre-existing hardware foundation: an alumnus from America donated a building to the school, which resulted in a new library and a new computer lab – it all seemed so coincidental.&lt;/p&gt;
&lt;p&gt;Adding to Bo Ge’s explanations and knowledge sharing, that period was considered the “computer guru” of our class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A top student + computer master, knowing how to hack into other people&amp;rsquo;s computers and disable classroom surveillance software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-高校&#34;&gt;3. 高校
&lt;/h2&gt;&lt;p&gt;競技は紆িরে最終戦までたどり着き、内容を十分に理解できず、問題は基礎的なアルゴリズムばかりでした。しかし、結局は結局です。まるで旅行に出かけただけのようなものでした。&lt;/p&gt;
&lt;h2 id=&#34;第四大学&#34;&gt;第四、大学
&lt;/h2&gt;&lt;p&gt;大学での専門選択にあたり、家から勧められた自動化を選んでしまった。実は、電気工学を専攻したい気持ちがあり、帰省して電力局に入社することを考えていた。しかし、専門課程の内容はほとんど学習せず、自己駆動力の学習能力は専門課程ではほとんど見られなかった。&lt;/p&gt;
&lt;p&gt;大規模な講義で学んだコンピュータに関する科目は、非常にスムーズに理解できた。一方、専門科目ではサボったり、コンピュータ科目を真面目に勉強したりする日々だった。普段は以下のフォーラムで活動していた：「精易フォーラム」「吾愛破解」。これらのフォーラムで得た専門知識（汇编、C++の知識）を活かして、フォーラムで仕事を受注し、良いフィードバックを得ることで、次第にその道に進んでいった。しかし、結局は小規模な分野を選択し、チップを書くコードを選び、家でもあまり関心を持たれなかった。その時、&lt;strong&gt;第三の重要な人物：堂哥（おじ）&lt;/strong&gt; が現れた。彼は高学歴で百度（百度）に入社していた。&lt;/p&gt;
&lt;p&gt;おばさんも私の状況を理解しており、研究に集中するよりも、堂哥と話すことを勧めてくれた。&lt;/p&gt;
&lt;h2 id=&#34;５卒業&#34;&gt;５．卒業
&lt;/h2&gt;&lt;p&gt;ここで重要なことは、私が壁を掻き分けて、選択科目として「コンピュータ情報検索」を選んだこと。資料や問題の迅速な検索と特定の方法を知り、そしてキーパーソンである**碩哥（せきちょう）**から時間を与えられ、問題を自分で解決し、根源まで突き止めることを学んだことです。さらに、研究開発センターのベテランとの面識を可能にしてくれました。&lt;/p&gt;
&lt;p&gt;これらの経験が、深圳分社において、私が非常に優秀だと周囲に認識されるきっかけとなりました。特に、取引チャネルグループを担当することに成功しました。&lt;/p&gt;
&lt;p&gt;しかし、ここから問題が発生します。コンピュータオペレーティングシステム、アルゴリズムなど、基礎知識の学習が体系的でなく、自身の過去の経験に頼る部分が大きかったため、前後の矛盾を招き、ルールに基づいたモジュール設計ができず、７年目に手ごわさを感じ始めました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>中国の新型コロナウイルス感染症解除</title>
        <link>https://ttf248.life/ja/p/china-coronavirus-end-lockdown/</link>
        <pubDate>Thu, 22 Dec 2022 19:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/china-coronavirus-end-lockdown/</guid>
        <description>&lt;p&gt;政策の発表は非常に突然で、実行も迅速だった。行程制限が解除され、公共の場での緑色コードのチェックはなくなった。&lt;/p&gt;
&lt;p&gt;ニューヨーク・タイムズ中文網を閲覧すると、全体に中国の解封についての議論が溢れている。&lt;/p&gt;
&lt;p&gt;政策を評価することはせず、周囲の状況を記録するだけだ。&lt;/p&gt;
&lt;p&gt;北京には元々ゼロコロナ政策はなく、制限が緩和され、急速に感染が拡大した。周りの中の人たちで重症者は誰もいなかった。&lt;/p&gt;
&lt;p&gt;深圳は広州市に隣接しており、こちらも急速に展開された。上海で会社が郊外に近い場所にあり、この稿を書いている時点では、大規模な感染の兆候は見られなかった。&lt;/p&gt;
&lt;p&gt;故郷の予防措置は少なかったが、それに続いて大規模な拡散があった。&lt;/p&gt;
&lt;p&gt;ほとんどの場合と同じように感じるだろう。突然解き放たれ、1週間ごとに政策が変わるまで続いた。そして最終的に全面解封に至ったのだ。&lt;/p&gt;
&lt;p&gt;3年間のゼロコロナ政策の効果を否定することはできない。随遇に安うことだ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>C11: sleep for vs yield</title>
        <link>https://ttf248.life/ja/p/c11-sleep-for-vs-yield/</link>
        <pubDate>Tue, 20 Sep 2022 20:54:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/c11-sleep-for-vs-yield/</guid>
        <description>&lt;p&gt;コードを眺めていると、&lt;code&gt;std::this_thread::yield()&lt;/code&gt; が突然視線を集めました。C11 の構文糖で、よく使われていたのに、&lt;code&gt;yield&lt;/code&gt; は初めて見かけます。以前は気付いていませんでした。&lt;/p&gt;
&lt;p&gt;マニュアルを調べずに、まず思い浮かべたのは、それが非同期処理と関連があるのではないかということです。&lt;code&gt;yield&lt;/code&gt; は boost 協程の実装の中に見られる単語で、ここでは非同期処理とは関係なく、制御ロジックが通常のスレッドに関連しているはずです。&lt;/p&gt;
&lt;h2 id=&#34;ドキュメント&#34;&gt;ドキュメント
&lt;/h2&gt;&lt;h3 id=&#34;yield&#34;&gt;yield
&lt;/h3&gt;&lt;p&gt;この関数の正確性は、実装に依存し、特に使用されている OS のスケジューラメカニズムとシステムの状態に依存します。例えば、先入れ先出しリアルタイムスケジューラ（Linux の SCHED_FIFO）が現在のスレッドをサスペンドし、それを実行可能な同優先度のスレッドのキューの末尾に置く（同優先度のスレッドがない場合、yield は効果がない）といった具合です。&lt;/p&gt;
&lt;h3 id=&#34;sleep_for&#34;&gt;sleep_for
&lt;/h3&gt;&lt;p&gt;現在のスレッドの実行をブロックし、指定された &lt;code&gt;sleep_duration&lt;/code&gt; 分間少なくとも停止します。
この関数は、スケジューリングやリソース競合による遅延のため、&lt;code&gt;sleep_duration&lt;/code&gt; より長くブロックされる可能性があります。
標準ライブラリでは、安定したクロックを使用して時間を測定することをお勧めします。システム時間で実装する場合は、待機時間がクロック調整に敏感になる可能性があることに注意してください。&lt;/p&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析
&lt;/h3&gt;&lt;p&gt;両方の関数は、現在のスレッドがスレッドを占有しないようにし、実行効果はプラットフォームによって異なる可能性があります。ここまでの内容でまだ少し理解が曖昧ですが、コードを実行して結果を確認してみましょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ThinkPad ノートパソコン（Visual Studio Community 2022）、腾讯云 S2 標準サーバー（gcc8.5）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;分析-1&#34;&gt;分析
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/us&lt;/th&gt;
&lt;th&gt;二次/us&lt;/th&gt;
&lt;th&gt;三次/us&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;9872&lt;/td&gt;
&lt;td&gt;1884&lt;/td&gt;
&lt;td&gt;11302&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-2&#34;&gt;分析
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/us&lt;/th&gt;
&lt;th&gt;二次/us&lt;/th&gt;
&lt;th&gt;三次/us&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-3&#34;&gt;分析
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/us&lt;/th&gt;
&lt;th&gt;二回/us&lt;/th&gt;
&lt;th&gt;三回/us&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;171&lt;/td&gt;
&lt;td&gt;168&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-4&#34;&gt;分析
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/us&lt;/th&gt;
&lt;th&gt;二次/us&lt;/th&gt;
&lt;th&gt;三次/us&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;分析-5&#34;&gt;分析
&lt;/h3&gt;&lt;p&gt;実行結果から判断すると、オペレーティングシステムの差異により、高精度なスリープ時の &lt;code&gt;sleep_for&lt;/code&gt; の安定性が大きく異なり、高精度なスリープを実現するためには &lt;code&gt;yield&lt;/code&gt; を使用する方が適しています。
時間精度を &lt;code&gt;ms&lt;/code&gt; に向上させた場合、両者の差はほとんど見られません。&lt;/p&gt;
&lt;h3 id=&#34;分析-6&#34;&gt;分析
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;thread&amp;gt;

// 短時間の「忙しい睡眠」を推奨
void little_sleep(std::chrono::microseconds us)
{
    auto start = std::chrono::high_resolution_clock::now();
    auto end = start + us;
    do {
        std::this_thread::yield();
    } while (std::chrono::high_resolution_clock::now() &amp;lt; end);
}

int main()
{
    auto start = std::chrono::high_resolution_clock::now();

    little_sleep(std::chrono::microseconds(100));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;### 分析
little_sleep(std::chrono::microseconds(100));
    std::this_thread::sleep_for(std::chrono::microseconds(100));

    auto elapsed = std::chrono::high_resolution_clock::now() - start;
    std::cout &amp;lt;&amp;lt; &amp;quot;待ち時間: &amp;quot;
              &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(elapsed).count()
              &amp;lt;&amp;lt; &amp;quot; マイクロ秒\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照&#34;&gt;参照
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Linuxサーバー、MySQLパスワードのリセット</title>
        <link>https://ttf248.life/ja/p/linux-server-reset-mysql-password/</link>
        <pubDate>Tue, 20 Sep 2022 14:27:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-server-reset-mysql-password/</guid>
        <description>&lt;p&gt;闲置の腾讯クラウドサーバーがあり、年末に契約が満了し、更新も考えていなかったので、開発用のデータベースとしてMySQLをデプロイすることにした。システムを再構築する際に、手間を省いて、腾讯クラウドが提供している汎用イメージを選択した。すでにMySQLデータベースがインストールされていた。本来はシステム内にReadmeのようなファイルがあり、パスワードや設定ファイルの場所などを説明されているはずだと思っていた。&lt;/p&gt;
&lt;p&gt;腾讯クラウドのシステム再構築は非常に速く、1分ほどで通知が届いた。「完了」と表示されたのでログインし、&lt;code&gt;systemctl status mysql&lt;/code&gt;コマンドを実行したところ、MySQLサービスが起動していた。パスワードを探し回ったがどこにも見つからず、次第に焦り始めた。&lt;/p&gt;
&lt;p&gt;そこで、サーバーにアクセスできていること、root権限を持っていることを考えると、必ず何らかの方法でパスワードをリセットできるはずだと考えた。資料を調べたり、阿里云フォーラムの投稿を参考にしたりして、さらに試行錯誤を続けた。&lt;/p&gt;
&lt;h2 id=&#34;パスワードのリセット&#34;&gt;パスワードのリセット
&lt;/h2&gt;&lt;p&gt;構成ファイル &lt;code&gt;vim /etc/my.cnf&lt;/code&gt; を編集し、&lt;code&gt;mysqld&lt;/code&gt; ノードに以下の設定を追加します：&lt;code&gt;skip-grant-tables&lt;/code&gt; 、&lt;code&gt;systemctl restart mysql&lt;/code&gt; コマンドを実行してデータベースを再起動します。
その後、&lt;code&gt;mysql&lt;/code&gt; を直接使用してデータベースにログインし、通常の操作が続行できます。 &lt;code&gt;root&lt;/code&gt; ユーザーのパスワードをリセットし、同時にリモートログインを許可します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;USE mysql;
UPDATE user SET authentication_string = password(&#39;pass&#39;) WHERE User = &#39;root&#39;;
GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;pass&#39; WITH GRANT OPTION;
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;変更した構成ファイルをロールバックし、データベースを再起動して完了です。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://help.aliyun.com/document_detail/42520.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://help.aliyun.com/document_detail/42520.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>夜の命名術</title>
        <link>https://ttf248.life/ja/p/nights-naming-art/</link>
        <pubDate>Thu, 11 Aug 2022 22:10:14 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/nights-naming-art/</guid>
        <description>&lt;p&gt;中国文字の浩大な体系において、「命」という字は唯一無二であり、同音字すらない。もしかしたら、これは冥冥の中の暗示なのかもしれない。それは、人それぞれの生命が一度きりであり、複製したり、やり直したりすることができないことを示唆しているのかもしれない。&lt;/p&gt;
&lt;p&gt;暇な時間に点中文网のランキングを調べてみると，《夜的命名術》の月票数が圧倒的に多く、首位を独占し、第二名との差はあまりにも大きく、追いつくことすら難しい。これまで私は、唐家三少や耳根といった知名作家の作品ばかりを読んできたが、今回は新作者の作品に挑戦し、異なる読書体験をしてみることにした。&lt;/p&gt;
&lt;p&gt;八月初旬時点では，《夜的命名術》の月票数は200万を超え、第二位は8万人と、その差は驚くほど大きい。&lt;/p&gt;
&lt;p&gt;私は自分の知識不足を自覚しており、この本の文筆を評価する能力はないと考えている。 しかし、10数章を読み終えると、本書のプロットは緊密に、そして巧みに絡み合い、読者を惹き込む魅力的な展開だった。このような高額な月票を獲得できたのは、まさに実力至上主義と言えるだろう。&lt;/p&gt;
&lt;p&gt;興味深いことに、「命」字と同様に、「死」字も漢字の中で同音字が存在しない。これは、生命の終焉が同じように唯一無二で、代替不可能な深い意味を内包しているのだろうか？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>自動テストに関する考察</title>
        <link>https://ttf248.life/ja/p/automated-testing-overview/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/automated-testing-overview/</guid>
        <description>&lt;p&gt;金融取引システムにおけるテストへの投資は、他のシステムを大幅に上回っており、煩雑なテスト手順が繰り返し行われていました。ROI（投資対効果）は著しく低く、プロジェクトや人員の変更に伴い、不可避的に多くのコントロールできない要因が導入されました。よく見られるのは、Aインターフェースからの出力フィールドを修正するとBインターフェースの結果に影響が出るケースです。各バージョンリリースごとにリスクも蓄積されていきます。&lt;/p&gt;
&lt;h2 id=&#34;理論的知識&#34;&gt;理論的知識
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自動化の価値をどのように測定するか？&lt;/strong&gt;
自動テストのROI = (手動実行時間) * (実行回数) / (開発コスト + メンテナンスコスト)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;どのような機能に自動テストを行うべきか？&lt;/strong&gt;
ユーザーが頻繁に使用し、頻繁に変更されない機能。このタイプのインターフェースに対して自動テストコードを作成することで、最大の利益が得られます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;なぜこのタイミングで自動テストを推進するのか？&lt;/strong&gt;
プロジェクトのリリース直前は不適切です。遠隔地の水が近隣の渇水を癒えないように、自動化は長期的な利益モデルです。プロジェクトはすでに&lt;strong&gt;本番環境&lt;/strong&gt;で稼働し、安定したリリースサイクルに入っているため、このタイミングが最適です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;フレームワークの選択&#34;&gt;フレームワークの選択
&lt;/h2&gt;&lt;p&gt;関連の実践経験が不足している状態で、このような自動化テストのタスクを受け取った場合、一般的なスタートは、検索エンジンを開いて、現在のシステム&lt;strong&gt;技術スタック&lt;/strong&gt;で利用可能なツールやフレームワークを探し、マニュアルを読み、大吉。適切なツールを見つけられれば、おめでとうございます、&lt;strong&gt;完璧なスタート&lt;/strong&gt;です。
まず「私の間違いだ」と言っておきながら、関連資料を調べ直すと、これは存在しないわけではなく、むしろフレームワーク自体が複雑で、デプロイに必要なリソースも多すぎることがわかります。初心者にとって必要なのは、小さくて、簡潔で、テストグループの同僚に相談すると、&lt;code&gt;Python&lt;/code&gt; 自体構築のフレームワークについて言及され、簡単に言うと、既存のユニットテストフレームワークを自動テストフレームワークとしてラップすることです。
参考となるプロジェクトのデザイン思路：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;フレームが必要な理由&#34;&gt;フレームが必要な理由
&lt;/h2&gt;&lt;p&gt;サービスには、開発環境、テスト環境、本番テスト環境など、複数の異なるデプロイ環境が存在します。フレームワークの役割は、これらの環境間の抽象化層を提供することです。テストケースとデータが分離され、それぞれの環境設定に合わせて異なるケースデータを適用できます。また、共通のデータをサポートすることも可能です。&lt;/p&gt;
&lt;p&gt;主な目的は、自動化の利用率を向上させることです。より複雑なシナリオでは、異なる環境間でのデータ連携は存在せず、全く関係ありません。ケースデータを設定する際に &lt;code&gt;label&lt;/code&gt; タグを追加し、現在のデータがサポートする環境を指定するだけで済みます。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://time.geekbang.org/column/article/496850&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;最高のコストパフォーマンスな自動テスト&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>新しい言語を学ぶべき理由は何ですか？</title>
        <link>https://ttf248.life/ja/p/why-learn-a-new-language/</link>
        <pubDate>Thu, 04 Aug 2022 11:27:30 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/why-learn-a-new-language/</guid>
        <description>&lt;p&gt;学歴から算じると、C++に触れるのは10年以上になる。他のプログラミング言語を学ぶ必要がなぜあるのか？&lt;/p&gt;
&lt;p&gt;職務経験：エレガントなモジュール設計の経験が不足しており、C++の構文は自由度が高いため、他の言語を学習することで、よりエレガントな設計を書くことができるように導かれている。&lt;/p&gt;
&lt;p&gt;いくつかのツールを作成する際に、頻繁に利用される。
低レベルライブラリのデザインやビジネスモジュールの実装など、デザインの原則もすべて理解できている。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Visual Studio コンパイル文字セット [転送]</title>
        <link>https://ttf248.life/ja/p/visual-studio-character-set/</link>
        <pubDate>Thu, 04 Aug 2022 10:51:43 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/visual-studio-character-set/</guid>
        <description>&lt;p&gt;C++をクロスプラットフォームで開発する際、中国のオペレーティングシステムではよく遭遇するエラーは、&lt;code&gt;error C2001&lt;/code&gt;（定数に改行文字が含まれています）です。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio&#34;&gt;Visual Studio
&lt;/h2&gt;&lt;p&gt;CMakeはプロジェクトのコンパイルスクリプトを組織し、Windows環境での開発時に一時的にソリューションファイルを生成します。クロスプラットフォームである理由として、ファイルエンコーディングにUTF-8を選択しています。&lt;/p&gt;
&lt;p&gt;引用資料では、問題の原因について原理に基づき詳細な説明を提供しています。&lt;/p&gt;
&lt;p&gt;エンコーディングに関して、MSVCにはコンパイルオプション&lt;code&gt;/source-charset&lt;/code&gt;と&lt;code&gt;/execution-charset&lt;/code&gt;があり、前者はファイルのエンコーディングを、後者はコンパイル後のバイトコードのエンコーディングを指定します。これらのオプションを使用することで、エンコーディングの問題は基本的に解決できます。&lt;/p&gt;
&lt;p&gt;例えば、WindowsのcmdコマンドプロンプトがデフォルトでGBKエンコーディングしか表示できない場合でも、ソースファイル自体がUTF-8であるため、クロスプラットフォームであることと、直接GBKに変更することの不便さから、異なるプラットフォーム向けのエンコーディング変換コードを書くという方法も採用されません。 Windows 10 では、これらのコンパイルオプションを &lt;code&gt;/source-charset:utf-8 /execution-charset:gbk&lt;/code&gt; に設定することで、コンパイラが UTF-8 エンコーディングでソースコードを読み込み、その後 GBK エンコーディングで配列に保存します。これにより、直接 &lt;code&gt;printf&lt;/code&gt; を使用して cmd コントロールパネルで漢字を表示できます。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-用の-cmake-設定&#34;&gt;Visual Studio 用の CMake 設定
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;if(WIN32)
  message(STATUS &amp;quot;WIN32 で構成中&amp;quot;)
  set(CMAKE_CXX_FLAGS &amp;quot;${CMAKE_CXX_FLAGS} /source-charset:utf-8 /execution-charset:gbk&amp;quot;)
endif()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhaolan.zhihu.com/p/146543940&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhaolan.zhihu.com/p/146543940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ペロシの台湾訪問</title>
        <link>https://ttf248.life/ja/p/pelosi-visits-taiwan/</link>
        <pubDate>Tue, 02 Aug 2022 22:57:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/pelosi-visits-taiwan/</guid>
        <description>&lt;p&gt;政治に無知であり、コメントはしない。このインターネット上の「狂騒」を記録する。&lt;/p&gt;
&lt;h2 id=&#34;随筆&#34;&gt;随筆
&lt;/h2&gt;&lt;p&gt;先日起きた&lt;strong&gt;唐山暴行事件&lt;/strong&gt;、&lt;strong&gt;人教小教材文化浸透事件&lt;/strong&gt;、もうすでに多くの人が覚えていないだろうか。ニュースで取り上げられるような話題は、すでに無関心になり、ほとんど感情が動かない。退社していつも通りドラマを観るだけだ。経済状況がすでにこのような状態であるにもかかわらず、戦争が勃発すれば、より良いことはないだろう。政治のことを理解せず、コメントもしない。このインターネット上での「狂騒」を記録に残す。&lt;/p&gt;
&lt;h2 id=&#34;ウィキ概要httpszhwikipediaorgwiki2022e5b9b4e58d97e8a5bfc2b7e8a3b4e6b49be8a5bfe8a8aae5958fe58fb0e781a3&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/2022%E5%B9%B4%E5%8D%97%E8%A5%BF%C2%B7%E8%A3%B4%E6%B4%9B%E8%A5%BF%E8%A8%AA%E5%95%8F%E5%8F%B0%E7%81%A3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ウィキ概要&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;2022年南希·佩ロシーが台湾を訪問し、ペロシー訪台と呼ばれる。これは、アメリカ合衆国第52代下院議長である南希・ペロシーが2022年にアジア諸国を訪問した際、台湾を訪問した行程である。
アメリカ下院議長は、アメリカの3番目に重要な人物と見なされ、台湾訪問を計画しており、その日付は8月1日の中国人民解放軍建国記念日（軍事記念日）に短期的にも、中国共産党第20回全国代表大会、2022年アメリカ選挙、および2022年中華民国の地方公職選挙に接近している。 中国方面，其政府强烈抗议，派遣海军驱逐舰部队到达台海东北海域，动员山东舰与辽宁舰两个航空母舰战斗群，东部战区与南部战区分别在东海与南海开展大规模实兵实弹演习。&lt;/p&gt;
&lt;p&gt;美国方面，派遣罗纳德·里根号航空母舰战斗群抵达台海周边护卫佩洛西可能的访台行程，并调遣多批次侦察机与空中加油机至驻日美军嘉手纳空军基地待命。&lt;/p&gt;
&lt;p&gt;中国国家主席习近平与美国总统乔·拜登在访问前曾进行视频会晤，内容涉及台湾问题。 台湾及国际媒体透露，佩洛西议长及众院访问团将于2日抵达台北松山机场，过夜后将在3日会见中华民国总统蔡英文等政府高层。&lt;/p&gt;
&lt;h2 id=&#34;08-11&#34;&gt;08-11
&lt;/h2&gt;&lt;p&gt;本日ほぼ確定となり、この間の話題騒ぎはこれで幕を閉じようとしています。各メディアが沿海演習を報じる中、知乎も熱意と労力をかけて毎日のようにランキングを更新し、報道されていたのは全てこの一件でした。編集部の皆様、お疲れ様でした。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Windowsプラットフォームでフォルダのサイズを迅速にカウントする</title>
        <link>https://ttf248.life/ja/p/windows-platform-quick-folder-size-statistics/</link>
        <pubDate>Mon, 01 Aug 2022 19:54:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-platform-quick-folder-size-statistics/</guid>
        <description>&lt;p&gt;Linuxプラットフォームは非常にシンプルです。「du -sh *」という一行のコードで済みます。Windowsはどうでしょうか？ディスクが複数あり、クリーンアップしたいのですが、ファイル数が多くて、システム標準の「リソースマネージャー」でフォルダサイズを統計すると、速度が遅くて諦めそうになります。&lt;/p&gt;
&lt;h2 id=&#34;everything&#34;&gt;Everything
&lt;/h2&gt;&lt;p&gt;Windows 平台で開発をしている方で、Everything を実際に使ったことがない方もいるかもしれません。検索速度はシステム標準のファイルエクスプローラーを圧倒的に上回ります。システムレベルでファイルの高速インデックス作成がサポートされているので、同様のツールを見つけられるはずです。ファイルサイズも同時に統計できます。&lt;/p&gt;
&lt;h2 id=&#34;wiztree&#34;&gt;WizTree
&lt;/h2&gt;&lt;p&gt;公式サイト：&lt;a class=&#34;link&#34; href=&#34;https://www.diskanalyzer.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.diskanalyzer.com/&lt;/a&gt;
通常のインストールモードまたはグリーン版を解凍して実行
高速、データ表示タイプが豊富で、左側はツリー状図モード、右側にはファイルの種類が表示され、もちろんグラフィカルな表示も、ソフトウェアの下欄にあります。&lt;/p&gt;
&lt;h2 id=&#34;spacesniffer-2023年不再维护更新&#34;&gt;SpaceSniffer (2023年不再维护更新)
&lt;/h2&gt;&lt;p&gt;ソフトウェア公式サイト：&lt;a class=&#34;link&#34; href=&#34;http://www.uderzo.it/main_products/space_sniffer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.uderzo.it/main_products/space_sniffer/&lt;/a&gt;
操作は非常に簡単です。対応するドライブを選択すると、ソフトウェアはグラフィカルな方法でフォルダのサイズを表示し、サイズが大きいほど画像内の対応する行列も大きくなります。その他の操作は、自分でクリックすれば理解できます。ファイル条件フィルタリングをサポートしています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルサイズのフィルタリング&lt;/li&gt;
&lt;li&gt;ファイルの日付フィルタリング&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;space_sniffer.gif&#34; &gt;基本的な使い方&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;advance.gif&#34; &gt;高度な使い方&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://moe.best/software/spacesniffer.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://moe.best/software/spacesniffer.html&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>ウェブページのスタイルシート（CSS）をコピーする方法：要素の検証</title>
        <link>https://ttf248.life/ja/p/how-to-copy-webpage-css-element-inspect/</link>
        <pubDate>Sun, 31 Jul 2022 23:36:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/how-to-copy-webpage-css-element-inspect/</guid>
        <description>&lt;p&gt;静的ブログのテーマは、主流が海外製のテンプレートで、調整や修正を行うことが多く、中国語コンテンツのレイアウトにはあまり考慮されない。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;半月ほど前にブログのスタイルシートを調整したところ、長年バックエンドサービス開発をしているだけで、フロントエンドは素人の私だ。前後とも半日かけて苦戦した結果、デザインが不合理だった。そこで閃いて、よく読む技術ブログ（infoq、ソース中国など）のデザインが良いなと思い、参考にできないかと考えた。コードファイルを調べて関連する要素を特定しようとしたが、霧だらけだった。
フロントエンドの友人がこの部分を見て笑ってしまうだろう… 指定された要素を特定することも分からなかった。分からないことは気にせず、週末に時間があったので、立ち止まって考えた。以前Pythonでスクレイピングツールを書いたとき、似たようなものを使っていたような気がした。&lt;/p&gt;
&lt;h3 id=&#34;要素検査&#34;&gt;要素検査
&lt;/h3&gt;&lt;p&gt;そうです、ブラウザに標準搭載されている要素検査ツールを使って、スタイルシートをコピーしたり、指定した要素の位置を特定したりするのは、あっという間です。&lt;code&gt;selector&lt;/code&gt; で要素を特定したり、&lt;code&gt;hugo&lt;/code&gt; で &lt;code&gt;user define css&lt;/code&gt; を新規作成したりすることも可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素のコピー&lt;/li&gt;
&lt;li&gt;outerHTML のコピー&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;セレクタのコピー&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;JS パスのコピー&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;スタイルのコピー&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;XPath のコピー&lt;/li&gt;
&lt;li&gt;完整的 XPath のコピー&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Windowsプラットフォームで超大型ファイルを編集する：EmEditor (テキストエディタ)</title>
        <link>https://ttf248.life/ja/p/windows-platform-edit-large-files-emeditor-text-editor/</link>
        <pubDate>Sun, 31 Jul 2022 23:21:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-platform-edit-large-files-emeditor-text-editor/</guid>
        <description>&lt;p&gt;上海国安数据库事件、在黑客圈子内闹得沸沸扬扬，不知真假，过两年如果还记得，再回头看看。根据以往的经验，更新了一波本地的社工数据库资料，看到一个巨型SQL文件：17.9G，一般的文本编辑器，预览都是个问题，更别说打开了，和网友闲聊，提到了：EmEditor。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;公式サイト：&lt;a class=&#34;link&#34; href=&#34;https://www.emeditor.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.emeditor.com/&lt;/a&gt;
週末に時間を割いて試してみたところ、非常に便利で、デザイン上では大規模ファイルの編集をサポートしており、十分なメモリがあれば、ファイル全体をメモリに読み込んで検索や編集速度が非常に速く、またファイルを分割する機能も備えています。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>上海鴛鴦鍋封城 (Shànghǎi yuānyāng guō fēngchéng)

This is a direct translation, as &#34;Shanghai Yuanyang Guo Fengcheng&#34; refers to a specific historical event.  It literally means “Shanghai Yuanyang Pot Siege.”</title>
        <link>https://ttf248.life/ja/p/shanghai-yuanyang-pot-sealed/</link>
        <pubDate>Wed, 30 Mar 2022 23:03:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/shanghai-yuanyang-pot-sealed/</guid>
        <description>&lt;p&gt;理事団が先二日には、上海は封鎖しないと死に間に面目ないように言っていた。「上海は重要だ」という。ところが、現状に屈してしまうか、あるいは自分の地位を守るために、川対岸から「まず黄浦江の向こう側をしばらく封鎖し、その後江の本流を封鎖する」という形になった。&lt;/p&gt;
&lt;h2 id=&#34;封鎖&#34;&gt;封鎖
&lt;/h2&gt;&lt;p&gt;幼い頃に流行ったインフルエンザを経験しており、ほとんど記憶に残っていませんでした。その後、関連資料を見ながら、潜伏期間が比較的短く、全国的な拡散が起こる前に終息したことを思い出しました。小学校に通っていた頃、毎日授業が終わるとすぐに帰宅し、教室には消毒液の匂いが漂っていました。&lt;/p&gt;
&lt;p&gt;20年末から現在まで、新型コロナウイルス感染症のパンデミックもほぼ3年になります。在外労働者の方々は、マスクを着用するタイミングに合わせてマスクを着用するようになりました。上海での今回の感染拡大は、当初香港からの輸入型患者が原因で始まり、その後、国境を越えた検問を通じて深圳に拡散し、上海では香港の一波の輸入型患者が原因でした。政府は最終的に、隔離ホテルにおける防護措置が不十分であったために感染拡大につながったと発表しました。変異株のウイルスは毒性が弱まりましたが、伝染速度は速くなりました。隔離ホテルの換気システムを通じて拡散したと考えられます。&lt;/p&gt;
&lt;h2 id=&#34;封鎖-1&#34;&gt;封鎖
&lt;/h2&gt;&lt;p&gt;ご覧のとおり、新たに発生した感染者数はすでに2万人を突破し、逼迫した状況から封鎖を実施せざるを得なくなりました。重要な点として、封鎖という言葉を使用せず、以前の記者会見で「封城」という言葉を使わなかったことが挙げられます。これは、最後の顔面（みかじめ）を保つための措置だったのです。&lt;/p&gt;
&lt;h2 id=&#34;買い物バイサイ&#34;&gt;買い物（バイサイ）
&lt;/h2&gt;&lt;p&gt;外売りの業界は、インターネットが作り出した新興産業です。その核心となるのは、誰かがあなたに商品を配送する必要があるということですが、パンデミックによる広範囲なロックダウンにより、店舗が営業できても、誰にも配達してもらえないという状況が発生しました。外で生活している人にとっては理解しにくいかもしれませんが、上海のような国際都市では、人々が一体となって買い物に行くことはありません。考えてみると、多くの人が地方から仕事のためにやってきて住んでいること、賃貸住宅に住んでいて、普段は会社の食堂を利用したり、外で食事をしたりすることが多いこと、自宅で作ることはほとんどないことを理解できます。外に出ることができなくなったとき、条件が整っている店舗は買い物を始めます。このロックダウンの発表は事前に通知されていなかったため、人々は日常的に食料や野菜を十分に備蓄していませんでした。&lt;/p&gt;
&lt;h2 id=&#34;業界&#34;&gt;業界
&lt;/h2&gt;&lt;p&gt;主な業務はIT業界に関連しており、今回の疫情の影響について、在宅勤務を体験し、2019年の初頭で自宅待機を約1ヶ月間行い、前後で何度も切符の変更手続き（合計19回以上）を行い、いつ深圳に戻れるか全く見通しの立たない状況でした。飲食・観光業や多くのサービス業など、想像もできない人々が近年どのように過ごしてきたのかを考えると、非常に辛い状況だったことと思います。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>お金を稼ぎたいときに</title>
        <link>https://ttf248.life/ja/p/when-you-want-to-make-money/</link>
        <pubDate>Sun, 27 Mar 2022 03:23:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/when-you-want-to-make-money/</guid>
        <description>&lt;p&gt;一般人都是社交动物，没错，你是个人，也是一个直立行走的动物，附带很强的社交属性；有自卑心、虚荣心，社会一直在变化，也在一直侵蚀你的&lt;strong&gt;平淡感&lt;/strong&gt;。我们不讨论那些伟人，那些甘愿为了社会、为了国家燃烧自己。&lt;/p&gt;
&lt;h2 id=&#34;今の私&#34;&gt;今の私
&lt;/h2&gt;&lt;p&gt;平均賃金、あるいは故郷の賃金を見ると、今の私の収入は明らかに平均レベルを大きく上回っています。それにもかかわらず不満があると言えるのでしょうか？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一百万稼げたら、次は一千万円、さらにそれを超えようとするのは常人のこと。人は自分の内なる声に耳を傾けるべきだ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;今の私-1&#34;&gt;今の私
&lt;/h2&gt;&lt;p&gt;そのうつろい目は何を意味するのか、それはより楽に稼ぐ方法：ショート動画です。&lt;/p&gt;
&lt;p&gt;皆さんは業界への立ち入りが簡単だと思っています。ご覧になっているのはショート動画ですが、それに見えているのは後から撮影や文章作成まで全て含まれているということです。しかし、人それぞれには天才的な夢があり、私はその業界に向いているし、生まれながらにしてそれが私に合っているのです。&lt;/p&gt;
&lt;h2 id=&#34;接触開始&#34;&gt;接触開始
&lt;/h2&gt;&lt;p&gt;たくさんの動画を見てきました。自分の頭で少し分析して、明らかにプロの編集手法が使われており、強い映画の色合いを感じさせる。つまり、彼らは皆、科目を学んだ出身です。もちろん、草根派が爆発的に人気が出るような論理もありますが、それは一般の人には当てはまりませんよね？
抖音上では、動画をどのように作るか教える動画もたくさんあります。その時、人間が清醒に目覚める。もし本当に稼げるのなら、なぜ彼らは自分自身で作り、他の人に作り方を教えているのでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;反社会的なレコメンドアルゴリズム&#34;&gt;反社会的なレコメンドアルゴリズム
&lt;/h2&gt;&lt;p&gt;以前、抖音のアルゴリズムが映画のクリップやアニメのクリップを勧めてくる際に、見ているうちに面白いと感じることがありました。しかし、私が抖音がどのように稼ぐのかについて調べたとき、彼らは様々な教育ビデオをノンストップで勧めてきて、私のレコメンドストリーム全体を埋め尽くしました。自分自身もIT業界で働いているため、この状況に「アルゴリズムのオタクたちの大脳が少しおかしいのではないか」と感じました。あなた方がこのように勧めるのは、私を愚かに見なしているのか、それとも私自身を愚かに見なしているのか？重要なのは、あなたが抖音で稼ぐ方法に関するビデオを、様々な角度から、あらゆる種類のコンテンツでノンストップに勧めてくることです。この稿は、午前3時に書いたものであり、本来書きたくありませんでした。私は、このようなビジネスモデルがどれくらい持続できるのか、そして、あなた方が人々の時間をどれだけ奪い続けることができるのか疑問に思います。&lt;/p&gt;
&lt;h2 id=&#34;活明白&#34;&gt;活明白
&lt;/h2&gt;&lt;p&gt;人に何かを教えるときは、一套一套のやり方を提示し、自分自身で行動するときは、どうしても自分の欲求不満をコントロールできない。まさに笑話だ。純粋な技術ブログ執筆者ではないので、いくつかのことは国内に発信していなかったが、ここでは随意的吐槽をする。もし有一天、封鎖されたとしたら、それは別の場所を探せばいいだろう。抖音で何もしていないとは言えないだろう。少なくとも、現在のリアルタイムニュースの伝達や、国家の政策プロパガンダなどにも積極的に協力している。毕竟、我国では、党に反することはできないだろう？
そうした時、昔の学生時代を思い出す。本当に人生の意味を見つけられなくなったら、静かに一冊の本を読むだけで十分だ。今の時代には、心を落ち着けて静かに本を読むことができる人はどれだけいるのだろうか。&lt;/p&gt;
&lt;h2 id=&#34;跋談&#34;&gt;跋談
&lt;/h2&gt;&lt;p&gt;ここでは、科学技術の進歩にも感謝したいと思います。もしあなたがこの行を見ているなら、この記事全体が非常に口語的であることを発見することでしょう。そして私自身は、これを読みふけきながら書き続けてきました。普段使っている入力法は、検索狗入力法で、8年以上も使い続けてきましたが、音声入力に関しては、専門的であるのは讯飞（SoraTalk）です。&lt;/p&gt;
&lt;p&gt;2022年の記事の番号が002に変更された理由ですが、これは夢でした。今年の記事数を100本に超えるという目標を達成したい、というのです。もちろん、「記事」とは言い難く、記録のようなものばかりです。吾日三省吾身（私は日々、自分自身を反省する）、あなたもきっと何かを思いつくことでしょう、 그렇죠？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>単なる簡単なことに追加のコードコピーボタンを実装する</title>
        <link>https://ttf248.life/ja/p/add-copy-button-for-simple-task/</link>
        <pubDate>Fri, 25 Feb 2022 01:23:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/add-copy-button-for-simple-task/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;「ouuan」を４時間も調べて、その時この文章を見ていると、まだ爆笑していたのですが、どうしてこんなに時間がかかったのでしょうか。最後に時間を調べると３時間でした。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;これは2022年の年初に書いた最初の記事で、扱うべきことは単純なもので、タイトルにある通り完全に同じ内容（その頃の私はまだ若かった）を書き、&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;作业&lt;/a&gt; をコピーしてブックマークに入れて、しばらく放置していた。ようやくこの件を思い出したのだ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hugo&lt;/code&gt; に移行する際、プラグインが少なすぎるため、コードをコピーできず、多くのメモを印象派からブログに移行する際に、コードをコピーする作業が煩雑になり、私の水面ブログのモチベーションを著しく妨げた。&lt;/p&gt;
&lt;h2 id=&#34;序章&#34;&gt;序章
&lt;/h2&gt;&lt;p&gt;まず、原作者の稿をじっくりと見直し、通読し、作者紹介も確認します。うわー、すごい大佬だ！清華大学で学んでいる学部生で、昔からコンピュータに触れているんだ。なるほど、クールなやつだ。まずはこのブログを見てみよう。自分が何をすべきか全く覚えていない。
それに加えて、作者の&lt;code&gt;Github&lt;/code&gt;リポジトリも確認する。この修正された&lt;code&gt;even&lt;/code&gt;テーマは今のものよりずっと見栄えが良く、新機能も豊富だ。早速取り掛かり、関連コードをマージしよう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/add-copy-button-for-simple-task/2022-02-25-02-08-19.png&#34;
	width=&#34;215&#34;
	height=&#34;150&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;344px&#34;
	
&gt; &lt;img src=&#34;https://ttf248.life/p/add-copy-button-for-simple-task/2022-02-25-02-08-40.png&#34;
	width=&#34;217&#34;
	height=&#34;167&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;新機能記事の履歴表示関連提出記録の確認&#34;&gt;新機能：記事の履歴表示、関連提出記録の確認
&lt;/h3&gt;&lt;p&gt;効果はなかなか良く、記事末尾にスクロールするだけで体験できます。&lt;/p&gt;
&lt;p&gt;マージ前に作者の元のリポジトリの履歴を確認していなかったので、簡単なマージで済むと思っていましたが、結局大量のコードをマージし、その中に衝突やN回の巻き戻しが発生。無脑覆盖（単純な上書き）で、全てフロントエンドとレンダリングのテンプレートコードであり、私が使用するものを基準にしました。&lt;/p&gt;
&lt;p&gt;リポジトリ：&lt;a class=&#34;link&#34; href=&#34;https://github.com/TianlongXiang/hugo-theme-even&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/TianlongXiang/hugo-theme-even&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中国語の罠です。&lt;code&gt;git&lt;/code&gt;でこのパラメータを調整しないと、生成時に現在の記事の&lt;code&gt;commit hash&lt;/code&gt;を取得できず、履歴リンクが生成に失敗します。完全な記事履歴を生成する際も、自動統合スクリプトを修正し、必ず現在のリポジトリ全体の履歴をプルしてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[feat: 完全に GitHub リポジトリを拉取して、記事の最終更新記録を動的に更新](&lt;a class=&#34;link&#34; href=&#34;https://github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;新機能記事の履歴の確認関連する提出記録の表示&#34;&gt;新機能：記事の履歴の確認、関連する提出記録の表示
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/TianlongXiang/TianlongXiang.github.io/commit/1b5d719966737f16a8c67880370dc2722adea0b3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;タスク：パスが日本語で存在し、hugo GitInfo がこの設定を有効にする必要がある&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;name: Github 構築
run: git config --global core.quotePath false &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;スタイル調整&#34;&gt;スタイル調整
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;サイトコンテンツの幅を調整します。以前のデザインはモバイル端末とPC向けでしたが、実際にはスマホで見る人は少なく、自分自身もPCで見ていました。&lt;/li&gt;
&lt;li&gt;目次バーを自動伸縮するように変更します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ouuan&lt;/code&gt;のコード記録を参考に半時間以上見てみても、コピーボタンの追加方法がよく分からなかった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;時光穿梭，一月之后，又想到这事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;本文-1&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;この課題が理解できなかったので、別の課題をコピーして、やっと理解できるものになった。検索で見つけた結果は、意外にも &lt;code&gt;hugo&lt;/code&gt; 公式フォーラムに、複製ボタンを追加する方法についての投稿があった。そこに行ってみると、論理が明確だった。混乱していたことがあったけど、元のサイトに戻って &lt;code&gt;even&lt;/code&gt; 渲染で生成されたコードブロックのスタイルと資料の説明が異なっていることに気づいた。これは少し面倒だったから、簡単に記録しておこう。&lt;/p&gt;
&lt;p&gt;フロントエンド開発はほとんど理解していないので、わからないことはブラウザの「要素を検査」ツールを開いて、コードを分析したり、右側のスタイル情報を見ながら、少しずつ論理を理解していった。「JavaScript」も理解できなかったけど、コンソールにログを出力した。最初は多くのことがわからなかったけど、落ち着いて、少しずつ論理を整理し分解していくと、必ず思路が見つかる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pre&lt;/code&gt;ノードが複数あり、ここでは個別のコードブロックを指します。テーマがインデントを行単位で表示したため、コピーボタンが二つ表示されてしまいました。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;自体テーマのコードハイライト機能を無効化したいのですが、テーマの設定がよくわかりません。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hugo&lt;/code&gt;公式サイトで資料を見て、半ば理解して、&lt;code&gt;markup&lt;/code&gt;設定でコードハイライトを制御できることがわかりました。&lt;/li&gt;
&lt;li&gt;設定ファイルを調整し続けていますが、期待通りのレンダリングにはなりません。&lt;/li&gt;
&lt;li&gt;この手の設定群である&lt;code&gt;pygmentsOptions&lt;/code&gt;を発見し、さらに資料を調べて設定を調整しました。まず行番号を削除しました。&lt;/li&gt;
&lt;li&gt;カスタムの&lt;code&gt;css&lt;/code&gt;スタイルシートとカスタムの&lt;code&gt;js&lt;/code&gt;スクリプトを設定しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;いよいよ色々とやっちまったから、突然最近見かけた配色が気に入ったんだ。ボタンのスタイルを中国風の天青色でいくか！&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:20%&#34; src=&#34;2022-02-25-02-01-22.png&#34; /&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:20%&#34; src=&#34;2022-02-25-02-01-33.png&#34; /&gt;
ouuan が４時間もかかって、この文章を見つけたときには笑えていたけど、どうしてこんなに時間が経ってしまったんだ？最後に時計を見ると３時間だった。
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ouuan.github.io/post/from-hexo-to-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/configuration-markup#highlight&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/configuration-markup#highlight&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考リンク&#34;&gt;参考リンク
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>私たちは人生の限りをかけて、何を追い求めていたのでしょうか。</title>
        <link>https://ttf248.life/ja/p/what-we-seek-throughout-life/</link>
        <pubDate>Tue, 31 Aug 2021 21:09:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/what-we-seek-throughout-life/</guid>
        <description>&lt;p&gt;王羲之は言う：「妻との交わりにおいては、上下の人々を顧み、世の通るや否かを悟るものもあれば、自分の心に寄せられた言葉で、一室の中でその意味を理解するものもある。また、妻からの託宣を聞き、その形骸（表面的な部分）だけを汲み取るものもある。」&lt;/p&gt;
&lt;p&gt;人生の一生涯、如昙花一現。草木の春緑枯榮、曦月東升西落。
偏偏この一生欲望却有很多。&lt;/p&gt;
&lt;p&gt;幼少の頃、溪頭で臥剥蓮蓬を忙し、東風に紙鸢を放ち、急ぎ黄蝶を追いかけ、傍桑影で瓜を種付け、帰ってきて飯を食べ、黄昏後に蓑衣を脱がずに月明かりの下で寝る。&lt;/p&gt;
&lt;p&gt;大人になったら、金榜題名することを望み、佳人との同伴を望み、財産を増やし続けたいと望み、地位を高めたいと望み、高朋の座を埋め尽くしたいと望み、夜通しの歌を楽しむことを望む。&lt;/p&gt;
&lt;p&gt;老いては健康長寿を望み、童仆が歓迎され、稚子が門前に候い、一盤の棋、一知己、一壺の酒、一庭院で天倫安享する。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人を見れば慌々としているのは、ただ碎銀几兩を得ようとしているだけだ。偏偏この碎銀几兩が、世間の万種惆怅を解くことができるのだ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人生は一瞬の光、如昙花一現。草木の春緑枯榮、曦月東升西落。
そして、この人生には無数の欲望が渦巻く。&lt;/p&gt;
&lt;p&gt;幼い頃、溪頭で臥剥蓮蓬を忙し、東風に紙鸢を放ち、黄蝶を追いかけ、桑の陰で瓜を種付け、帰宅すれば飯が食べて、黄昏には蓑衣を脱がずに月明かりの下で眠る。&lt;/p&gt;
&lt;p&gt;大人になり、金榜題名することを夢見て、佳人との同伴を願い、財産を増やし続けたいと望み、地位を高め、高朋の座を埋め尽くしたいと願う。&lt;/p&gt;
&lt;p&gt;老いては健康長寿を求め、童仆が歓迎され、稚子が門前に候い、一盤の棋、一知己、一壺の酒、一庭院で天倫安享する。&lt;/p&gt;
&lt;p&gt;世の中の人々が慌ただしくしているのは、ただ碎銀几兩を得ようとしているだけだ。しかし、その碎銀几兩こそが、世間の万種惆怅を解き放つ鍵となるのだ。&lt;/p&gt;
&lt;p&gt;多くの人々が生活のために苦闘し、人生の意味を追い求める時間があるのだろうか？&lt;/p&gt;
&lt;p&gt;実は人生は、草木や日月のように、欲望の輪廻を体験するほんの一瞬のことだ。&lt;/p&gt;
&lt;p&gt;意味を理解できずに「一瞬の命を天地に比べれば取るに足らず、茫博な海の一粒の砂」と感じたり、逆に理解して「出会いを喜び、一時的なもので満足し、快楽を知り、自給自足したくなるが、老いの到来を悟らない」といった状態になるだろう。&lt;/p&gt;
&lt;p&gt;金銭や名誉を追い求めることもできるし、詩酒花茶を楽しむこともできる。江上の清風や山間の明月を追うこともできる。&lt;/p&gt;
&lt;p&gt;しかし、結果に過度に執着する必要はない。結果はいつか消え去ってしまうからだ。&lt;/p&gt;
&lt;p&gt;人生の終わりに辿り着いたとき、世の中の喜び、怒り、悲しみ、老い、病気、死といった経験を最大限に積むことが大切だ。&lt;/p&gt;
&lt;p&gt;『大魚海棠』の言葉が好きだ：&lt;/p&gt;
&lt;p&gt;私は『蘭亭集序』と『赤壁賦』を大変気に入っています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;過去の人の活躍に心を動かされるのは当然のことです。もし、それらにふさわしい言葉で表現できれば、悼むべきことや、嘆くべきことはありません。しかし、死は虚偽であり、斉彭の亡命は狂言であると知っているからこそ、後世が今の私を見て、今の私が後世を見ているのと同じように感じることになるのです。「ああ、悲しい！」「なんと嘆かわしい！」&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>盈透证券株式コードの特殊形式に関する説明</title>
        <link>https://ttf248.life/ja/p/interactive-brokers-stock-code-format-explanation/</link>
        <pubDate>Mon, 30 Aug 2021 17:35:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/interactive-brokers-stock-code-format-explanation/</guid>
        <description>&lt;p&gt;まれで、時間が経つと必ず遭遇するだろう。関連株式コード：ベアケイル&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;一部株式コードの名称に &lt;code&gt;.&lt;/code&gt; やその他の特殊文字が含まれる場合、それをティック（IB）に伝達する際に、株式コード名の変換が必要となります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BRK/B -&amp;gt; BRK B&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;本文-1&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;盈透証券の場合、分析が可能で、変換のルールは固定されているため、コード実装で実現できます。ルールが固定されていない場合は、通常システム内部で対応するマッピング関係を保存し、ビジネスオペレーション担当者が定期的に更新します。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ibkr.info/article/462&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Berkshire Hathaway Class B Shares のシンボルを TWS に入力する方法は？&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>困惑している / 悩んでいる / 途方に暮れている</title>
        <link>https://ttf248.life/ja/p/lost-and-confused/</link>
        <pubDate>Thu, 26 Aug 2021 18:01:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/lost-and-confused/</guid>
        <description>&lt;p&gt;人生のある段階で人は、自分が何を求めているのか分からず、仕事の日常に紛れ込み、仕事の意味を追うことを忘れがちになることがあります。卒業した頃を回想すると、心には燃えるような憧れがあり、私は毫不躊躇い「コードを書くこと、そして人目を惹きつけ、素晴らしいコードを生み出すことを望んでいる」と語りました。しかし、今の仕事では、より多くの業務レベルの事柄に関わることが多くなり、これは業界発展に伴う恩恵によるものです。&lt;/p&gt;
&lt;p&gt;生活観については、結婚や出産、家を築くといったことはまだ自分の考えに入れていません。頭の中はほとんど空っぽで、ただ今を楽しみにして過ごすだけです。週末になると、静かにゲームをするのが好きで、よく一日中家にこもり、自分だけの小さな世界に浸っています。&lt;/p&gt;
&lt;h2 id=&#34;住宅購入&#34;&gt;住宅購入
&lt;/h2&gt;&lt;p&gt;前々年（まえまえねん）から、自分だけの家を買うために貯金を努力していました。毎日、その目標のために精算（せつさん）をしていました。しかし、住宅価格が相変わらず上昇していくのを見て、当初の不安や不満から、最終的には麻木（まご）になってしまい、たとえ家を買っても、それは自分に重い包帯（ふだき）を巻いたようなものにしかならないと感じ、結局その考えを諦めました。&lt;/p&gt;
&lt;h2 id=&#34;貯金&#34;&gt;貯金
&lt;/h2&gt;&lt;p&gt;当初，存钱是为了实现一些小目标，比如组装一台性能强劲的台式机、购买一直心仪已久的相机，或是来一场说走就走的旅行。但现在，我以一种更随意的态度对待存钱这件事，在日常开销上不再有太多顾虑，看到想吃的东西就去吃，对新奇的事物也能大胆尝试。&lt;/p&gt;
&lt;p&gt;貯金は、当初は小さな目標を達成するために行われていましたが、今ではよりリラックスした態度で取り組み、日々の支出に気を遣うことなく、食べたいものを思い立ったときにはすぐに味わい、新しいものにも積極的に挑戦しています。&lt;/p&gt;
&lt;h2 id=&#34;帰宅&#34;&gt;帰宅
&lt;/h2&gt;&lt;p&gt;ついに、自分の心の奥底で一番願っていたのは、ただ故乡へ帰って、様子を見ることだった。特に何もする必要はなく、ただあの馴染みの場所に帰り、家という温かさや静けさを感じていただければ十分だった。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>恒生期貨の基本概念 (Kōsekki kyūka no kihon ganongō)</title>
        <link>https://ttf248.life/ja/p/hong-kong-futures-basics/</link>
        <pubDate>Wed, 18 Aug 2021 10:54:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-futures-basics/</guid>
        <description>&lt;p&gt;金融市場が絶えず変化する中、投資家たちは投資収益を増やすために、より効果的な投資ツールを模索し始めています。投資家のニーズに応えるため、香港取引及決済所有限公司（香港交易所）は、これらの契約に代表される株式先物合約を複数種類導入しました。これらの合約は、香港交易所の全資傘下会社である香港聯交所（連行所）に上場されており、流動量が高く、取引も活発です。株式先物を投資することで、個別企業の業績に加え、デリバティブ市場が提供するショートセリングやレバレッジ効果などの利便性も享受できます。&lt;/p&gt;
&lt;p&gt;株式先物の代表となる企業は、その業界の主要な企業であるため、投資家は特定の産業のパフォーマンスが全体的な株式市場よりも優れているか劣っているかを判断し、それに応じて株式先物を選択することができます。&lt;/p&gt;
&lt;h2 id=&#34;基本定義&#34;&gt;基本定義
&lt;/h2&gt;&lt;p&gt;先物契約は、将来の特定日に特定価格（清算値）で買いまたは売り、その価格に相当する数量（契約単位）の金融価値を取引する合約です。
&lt;strong&gt;すべての株式先物契約は現金決済で行われ、満期時に株式の納品はありません。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;契約満了&#34;&gt;契約満了
&lt;/h3&gt;&lt;p&gt;契約満了時、契約立証価格と最終清算価格の差額に合約乗数掛けることで発生する損益額が、契約保有者の保証口座から控除されます。
最終清算価格とは、関連する株式が最終取引日の終値としてシンジカ所の公式発表した価格を指します。
株式 futures の投資家が契約満了前に建玉を決済したい場合、元々ショートポジションを取っていた投資家は、単に１枚の期货合约を購入すれば済み、ロングポジションを取っていた投資家は、１枚の期货合约を売却する必要があります。&lt;/p&gt;
&lt;h3 id=&#34;担保金&#34;&gt;担保金
&lt;/h3&gt;&lt;p&gt;先物取引を行う際、買い手と売り手双方には、契約履行の保証として、それぞれ一定額の基本保証金を納付する必要があります。決済所在は、各日の始末後、未決済の先物を市場価格で損益を計算し、投資家の保証金口座から控除する根拠とします。市場が悪化し、投資家が損失を被り、その結果保証金が指定された水準を下回った場合、取引所は投資家に指定された期間内に追加資金を充当させ、保証金を元の基本保証金額の水準に戻す（すなわち、追加購入）ことを要求します。&lt;/p&gt;
&lt;h2 id=&#34;メリット&#34;&gt;メリット
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;取引手数料が安い：1枚の株式先物契約は数千株分の株式に相当し、その売買手数料は枚数によって変動するため、相対的に契約価値に対する取引コストは非常に低い。&lt;/li&gt;
&lt;li&gt;逆張り（ショート売り）が容易：投資家が株式先物を簡単に逆張りできるため、暴落時には株式先物を逆張りすることで利益を得ることができる。&lt;/li&gt;
&lt;li&gt;マネージャー制度：香港証券取引所は、市場の流動性を確保するために、指定されたスプレッド範囲内で買い価格と売り価格を同時に提示するマーケットメーカー（マネージャー）を設け、株式先物市場の流動性を維持している。&lt;/li&gt;
&lt;li&gt;レバレッジ効果：投資家は株式先物契約の約定保証金として契約金額の少部分額のみを支払うことで、ヘッジや取引がコスト効率よく行える。 - 海外投資家の為替リスクの軽減：株式先物契約は、海外投資家が国内の優良株式に投資する手段となり、契約全体の価値を全額支払う必要がなく、按金のみで取引できるため、海外投資家が負担する為替リスクを大幅に低減します。&lt;/li&gt;
&lt;li&gt;電子取引システムによる売買：株式先物契約は、東京金融交易所（TOPIX）の電子取引システムを通じて売買されます。全ての注文は、価格と時間の順に実行され、即座に買い値、売り値、成行値が表示されるため、市場の透明性が最大限に高まっています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;メリット-1&#34;&gt;メリット
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;決済会社による履行保証：株式先物および商品先物の契約は、期交差点株式会社（決済会社）が全額所有する香港先物決済有限公司によって登録、清算され、履行保証が提供されます。決済会社がすべての未決済契約の対向当事者であるため、取引所参加者は対向リスクを負う必要はありません。ただし、この保証は取引所参加者が顧客に対して負う財務責任には適用されません。投資家がブローカーを通じて購入・売却を行う際には、注意深く慎重に行う必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;庄家制度&#34;&gt;庄家制度
&lt;/h3&gt;&lt;p&gt;市場参加者または個別株式・商品先物の登録市場の庄家となり、指定された最大差金幅内で買い価格と売り価格を同時に提示します。取引所参加者およびその顧客は、個別株式・商品先物には市場の庄家が買値・売値を提示していない場合があり、その取引は市場の取引単位に基づいて行われる可能性があることに注意する必要があります。&lt;strong&gt;投資家は、市場の庄家が登録していない株式・商品先物の取引には流動性リスクが伴う可能性があるため、上場前に慎重に検討すべきです。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;株式先物取引のリスク&#34;&gt;株式先物取引のリスク
&lt;/h2&gt;&lt;p&gt;株式先物はハイリスクな取引であり、株式先物を売買することによって生じる損失は、新規建倉時に納付した保証金を超える可能性があり、短期間にさらに保証金を支払う必要が生じる可能性があります。支払いができなくなった場合、貴方の持ち株やポジションは強制的に決済（平仓）され、その際の損失は全てご自身で負担となります。したがって、株式先物取引のリスクを十分に理解し、ご自身の状況に合わせて投資判断を行う必要があります。取引前に、ご自身の財政状況および投資目標を考慮し、ブローカーまたはファイナンシャルアドバイザーに相談の上、株式先物およびオプション契約の購入が適しているかどうかを確認してください。&lt;/p&gt;
&lt;h2 id=&#34;注解の調整&#34;&gt;注解の調整
&lt;/h2&gt;&lt;p&gt;倘正股公司が株式分割や配当金の発行などにより資本構成を変更する場合、株価は純資産時または効力発生日に変動し、未平準契約もその影響を受ける可能性がある。
その他の条件が変わらなければ、株主が保有する組立て価値は調整日を変更しないものの、株式先物買い手または保有者にとっては異なる状況となる。これは、先物契約に適切な調整が行われた場合のみである。立証成約を変更しなければ、株式先物の倍率が一定であれば、株価の調整は株式先物ポジションの価値に不当かつ不公平な影響を与えることになる。
取引所が調整比率を決定する際には、先物契約の公正な価値を維持することを原則とし、重大な変更が発生した場合のみ調整を行う。&lt;/p&gt;
&lt;h2 id=&#34;株式先物契約概要&#34;&gt;株式先物契約概要
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hong-kong-futures-basics/%E8%82%A1%E7%A5%A8%E6%9C%9F%E8%B4%A7%E5%90%88%E7%BA%A6%E6%A6%82%E8%A6%81.png&#34;
	width=&#34;1416&#34;
	height=&#34;632&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;株式先物契約概要&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;537px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;情報提供者コード&#34;&gt;情報提供者コード
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hong-kong-futures-basics/%E8%B5%84%E8%AE%AF%E4%BE%9B%E5%BA%94%E5%95%86%E4%BB%A3%E7%A0%81.png&#34;
	width=&#34;1418&#34;
	height=&#34;820&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;情報提供者コード&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;415px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/products/listed-derivatives/single-stock/stock-futures?sc_lang=zh-cn#list_of_stock_futures&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;香港交易所 - 衍生产品/个股/股票期货&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/-/media/HKEX-Market/Products/Listed-Derivatives/Single-Stock/Stock-Futures/Stock-Futures-Information-Sheets/HKEX_Stock_Futures_SC.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKEX_Stock_Futures_SC.pdf&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>資本の独占とオンライン教育業界の終焉</title>
        <link>https://ttf248.life/ja/p/capital-monopoly-and-the-fall-of-online-education/</link>
        <pubDate>Wed, 28 Jul 2021 14:59:08 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/capital-monopoly-and-the-fall-of-online-education/</guid>
        <description>&lt;p&gt;最近の2日間で株式市場は大幅に下落し、最近参入した新規投資家たちが市場のリスクを目の当たりにしました。中国は高齢化が進みつつあり、出生率は著しく低迷しており、関連専門家の予測を大幅に上回る低下が見られ、出生率のボトルネックとなっている業界に対して、我が党は強力な打撃を加えることになります。&lt;/p&gt;
&lt;h2 id=&#34;学生減負&#34;&gt;学生減負
&lt;/h2&gt;&lt;p&gt;90年代生まれの私たちにとって、そうした多くの習い事や科目補習授業、放課後の自由な時間もたっぷりありました。それは、まず家庭の事情が許さないこと、そして当時の補習授業がまだブランド効果を持っていなかったことが理由です。結果として、保護者がその存在を認めてくれるようになりました。しかし、20年もの歳月が流れ、2019年から始まったK12教育資本化の影響を受け、猿輔導などのオンライン補習塾が次々と登場し、資本の力によって、優秀な人材を集めた様々なブランド補習塾が作られました。高額な費用も、保護者の熱意を抑えきれません。 &amp;gt; 都市化の過程において、多くの親は学歴を積むという道を通じて、貧しい家庭出身から抜け出し、階級の飛躍を成し遂げました。自分自身が企業市民として働く中で、子供に十分な時間を費やす余裕がなく、自分自身もまた競争にさらされ、子供が同世代に遅れを取ることを望まないのです。貧しい家庭から高貴な子を出した例は少なく、適切な学歴がない場合、中国の普通の家庭で現在の階級を維持したり、再び階級を向上させたりすることは困難です。職業高校に進むことは、現在の社会環境において、階級の低下をほとんどの親が受け入れられないものだと考えています。&lt;/p&gt;
&lt;h2 id=&#34;学生負担軽減&#34;&gt;学生負担軽減
&lt;/h2&gt;&lt;p&gt;なぜ課外家庭教師が必要なのか、保護者が課外家庭教師を必要とする理由を振り返ってみましょうか。教科書に載っている知識や例題は、見ればすぐに理解できます。多くの科目は範囲が広く、内容は浅く、深く掘り下げていません。才能の選抜メカニズムには、ある程度の区別が必要であり、それが矛盾を生み出しています。試験問題が単に教科書の内容から出発すると、選別効果は期待できません。横方向への展開や縦方向への展開が必要です。これらの内容は、先生が生徒に授業でカバーできない領域であり、その存在が課外家庭教師を育む土壌となっています。 ファイルの内容は多岐にわたり、30条の細則が複数の側面を規範し、指導ファイルの大綱要約：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全面圧減作業量と時間数を軽減し、学生の過重な学習負担を軽減する。&lt;/li&gt;
&lt;li&gt;学校の課後サービスレベルを向上させ、生徒の多様化されたニーズに対応する。&lt;/li&gt;
&lt;li&gt;厳格な管理を堅持し、校外研修行為を全面的に規範する。&lt;/li&gt;
&lt;li&gt;教育・教学の質を大力的に向上させ、生徒が学校内で十分に学んで満足できる状態を確保する。&lt;/li&gt;
&lt;li&gt;配套的な管理を強化し、支援・保障能力を向上させる。&lt;/li&gt;
&lt;li&gt;慎重な組織運営を行い、実効性を追求する。 ## 学生負担軽減&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なぜ課外家庭教師が必要なのか、保護者が課外家庭教師を必要とする理由は、改めて見てみましょうか？ 教科書に載っている知識や例題は、見ればすぐに理解できます。多くの科目には非常に幅広い範囲が含まれており、その内容は表面的なものであり、深く掘り下げていません。才能選抜の仕組みにはある程度の区別が必要であり、それが矛盾を生み出しています。試験問題が教科書の内容のみから出発する場合、選別効果は期待できません。横方向への展開や縦方向への展開が必要です。これらの内容は、先生が生徒に授業でカバーできない領域であり、その存在が課外家庭教師を育む土壌となっています。&lt;/p&gt;
&lt;h2 id=&#34;菁英教育&#34;&gt;菁英教育
&lt;/h2&gt;&lt;p&gt;教育業界において、近年、優秀な私立中学校が増加しており、公立学校の質の高いリソースが不足している（派生学区問題）という現象も見られます。様々な規模の教育グループが、高額な給与待遇で優秀な教師を惹きつけ、質の高い学習環境を構築し、徐々に独自のブランドを確立しています。中でも最も有名なのが&lt;strong&gt;衡水模式&lt;/strong&gt;です。地元の中小企業は平均3千人を超え、優れた私立小学校では学年費用が9千～1万元に達します。教育グループは健全なサイクルを形成しており、「高い学費だが教師が優秀で、生徒の成績が良いから学費を高め、親は依然として子供をここに送ってくる」。公立学校のリソース（教師）も徐々に私立学校に引き寄せられ、最終的には劣悪な教育の代名詞となっています。&lt;/p&gt;
&lt;h2 id=&#34;算法搾取&#34;&gt;算法搾取
&lt;/h2&gt;&lt;p&gt;有データが示すように、美団に契約している配達員はほぼ400万人、アクティブな配達員は約45万人に上り、多くの人々がこの仕事に依存して家族を養い生活を送っています。アルゴリズムによる搾取は尽きることがなく、配送時間を無制限に押し付け、人を測定可能な単位に換算し、アルゴリズムに取り込んで計算します。常に配達員の崩壊限界を探求しているのです。自分たちは非常に賢明だと考えていますが、&lt;strong&gt;人性を無視し、資本のために奉仕する&lt;/strong&gt;。市場はここに存在し、皆が楽しく、持続可能な遊びをすれば良いのです。&lt;strong&gt;独占や特権、資本主義の遊び方のように、無秩序で蛮横な成長は最終的に終わりを迎える&lt;/strong&gt;でしょう。&lt;/p&gt;
&lt;h2 id=&#34;株式市場の変動&#34;&gt;株式市場の変動
&lt;/h2&gt;&lt;p&gt;2021年7月24日、新東方を代表する教育株が華麗なパフォーマンスを見せ、米国市場の前場好調な相場に続き、&lt;strong&gt;株価は半値まで暴落&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我国は段階的に高齢化が進み、計画生育に影響を与える様々な社会現象を整治する必要がある。また、独占的・残業問題でインターネット企業が罰金を科され、資本が集まる教育業界も規制の対象となった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;株価変動&#34;&gt;株価変動
&lt;/h2&gt;&lt;p&gt;教育業界が資本化されることを許されない。一口の投票によって、関連業界が上場資金調達を行うことが否定され、悲鳴が絶えない。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;腰斩的新东方 (腰斬の新東方)
&lt;img src=&#34;https://ttf248.life/p/capital-monopoly-and-the-fall-of-online-education/%E6%96%B0%E4%B8%9C%E6%96%B9%E8%82%A1%E4%BB%B7.png&#34;
	width=&#34;1840&#34;
	height=&#34;702&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;腰斩的新东方&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;629px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;暴跌的美团 (暴落の美団)
&lt;img src=&#34;https://ttf248.life/p/capital-monopoly-and-the-fall-of-online-education/%E6%96%B0%E4%B8%9C%E6%96%B9%E8%82%A1%E4%BB%B7.png&#34;
	width=&#34;1840&#34;
	height=&#34;702&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;暴跌的美团&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;629px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.infoq.cn/article/9Q1O2vWYNE8Mfhkzuyzs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;規制強化によるオンライン教育の急激な「減速」&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;http://www.moe.gov.cn/jyb_xxgk/moe_1777/moe_1778/202107/t20210724_546576.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;国务院办公厅が、義務教育段階における生徒の宿題負担と外部研修負担に関する意見を发布&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>混沌エンジニアリング</title>
        <link>https://ttf248.life/ja/p/chaos-engineering/</link>
        <pubDate>Wed, 28 Jul 2021 14:35:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chaos-engineering/</guid>
        <description>&lt;p&gt;システム安定性テストを行うための、システムを破壊するパターン。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;国内的互联网行业总是喜欢折腾点新东西出来，有时候听到个名词，一般人都想不到它是什么东西？&lt;/p&gt;
&lt;p&gt;看了部分文章，还是这段针对混沌工程初期的定义，较为容易接受：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;混沌工程的早期探索，其实在行业内一直有，曾经是以故障测试、容灾演练等身份存在。而随着微服务架构的不断发展，以及分布式系统的不断庞大，混沌工程开始崭露头角，越来越被重视。当 Netflix 正式提出混沌工程概念后，相关理论也开始飞快丰富。Netflix 的实践也证明了混沌工程在稳定性领域所带来的巨大意义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.infoq.cn/article/gsqtykoa3uvrtqi1kkmo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ByteDance 混沌工程実践まとめ&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>KubernetesでPodが停止しました。</title>
        <link>https://ttf248.life/ja/p/kubernetes-pause-pod/</link>
        <pubDate>Mon, 12 Jul 2021 11:23:09 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/kubernetes-pause-pod/</guid>
        <description>&lt;p&gt;デプロイメントコントローラは、Kubernetesクラスタにおいて非常に重要な機能であるPodの水平スケーリングと縮小を実現します。これは従来のクラウド時代プラットフォームが必須とする能力です。&lt;/p&gt;
&lt;p&gt;あるビジネスシーンで、データベース内のデータを修正する必要があり、修正後にPodノードを再起動します。しかし、Podが実行中に表のフィールドを継続的に変更する必要があるため、一時的にアプリケーションによるテーブルへの更新を停止し、データ修正後、Podを復旧する必要があります。&lt;/p&gt;
&lt;p&gt;削除以外の方法で、同様に一時停止の効果を実現する方法はありますか？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl scale --replicas=0 deployment/&amp;lt;your-deployment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;回答を見る前に、多くの人が直接プロセスを操作する時代に思い当たり、ビジネスプロセスの直接操作を考えてしまうかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/54821044/how-to-stop-pause-a-pod-in-kubernetes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KubernetesでPodを停止/一時停止する方法&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ファンドと固定資産運用 (Fandomo to kitu shisan ungin)</title>
        <link>https://ttf248.life/ja/p/funds-and-fixed-income-wealth-management/</link>
        <pubDate>Fri, 09 Jul 2021 11:27:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/funds-and-fixed-income-wealth-management/</guid>
        <description>&lt;p&gt;90年代生まれの私たち世代にとって、08年の金融危機は、ほとんど感覚がなかった。なぜなら、当時まだ若く、投資や資産運用といった理財の知識も身につけていなかったからだ。2015年に起きた牛市（うしじ）は、その勢いが凄まじく、終焉を迎える際にも大きな動静を残した。最終的には国家が市場を救済することになった。こうした状況の中で、基金という概念が一般の人々の目に触れるようになった。&lt;/p&gt;
&lt;h2 id=&#34;蚂蚁金服と支付宝&#34;&gt;蚂蚁金服と支付宝
&lt;/h2&gt;&lt;p&gt;支付宝は、その天然なトラフィックインポートとして、アリババグループの下位に生まれた決済ツールとしての位置づけを確立しました。支付宝が投資基金を購入し、微信が同様の行動をとる中、ほとんどの人は支付宝を選択しました。また、支付宝は成功裏に投資信託販売を日常的なショッピングに変え、2019年以降始まった小牛市（ショーニイシ）において、ファンドマネージャーによる集団暖房、結局のところ、パンデミックによって引き起こされた貨幣の大放出が影響したのです。入場した人は利益を得て、入場しなかった人々は羨望の眼差しを向け、急いで入場しようとしました。新投資信託規模が百億元を超えるスピードが加速し、マザーズ世代（大妈）も投資信託を購入する状況下で、千億元規模のファンドもすぐそこまで来ているでしょう。&lt;/p&gt;
&lt;p&gt;銀行預金時に、店長が熱心に様々な金融商品を紹介するという形で、平明百姓が投資信託に触れるのは、以前のことでした。 インターネットの包装、推銷ページ情報の誘導、基金販売機関が与える高額な広告費、それがアリペイが提示する基金広告を完全に非現実的なものにしている。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正常銀行定期理財の収益は4%、前些年玩的とても狂ったP2P理財は8%、クレジットカード還款利息は12%。当社の主人公、アリペイがプロモーションする基金は150%、250%と市場を席巻し、市場は上昇している。しかし市場が下落すると、アリペイは火遊びをしているかのようだ&lt;/strong&gt;。提示された成長率のデータでは、表向きには最近3年間の収益グラフのみ記載され、老牌基金は年化平均の収益のみ記載されている。なぜ単独で毎年の平均収益を公開しないのか？それは計算が難しいからか？それは否定できない。見た目が良くないため、顧客が基金を購入するのを誘導することが困難だからだ。&lt;/p&gt;
&lt;h2 id=&#34;固定収入投資固收理财&#34;&gt;固定収入投資（固收理财）
&lt;/h2&gt;&lt;p&gt;中国尚未步入负利率时代，银行存款、国债是最为稳妥的固定收益产品；纯债基金也是不错的选择。中国的平均工资多少，各位可以自行查阅各地统计局公布的数据。笔者写一个简单的场景：资产规模 200万，年化收益率 4%折算，每年的收益都超过了大部分城市的平均工资。&lt;/p&gt;
&lt;h2 id=&#34;跋談&#34;&gt;跋談
&lt;/h2&gt;&lt;p&gt;これは私自身の経験から派生したもので、書けることはたくさんある。もっと深く知りたい場合は、経済に関する書籍を自分で読んでみることをお勧めする。盲信するな。普通の家庭における資産形成の核心は保全であり、火事を焚いて夢のような富を追い求めることではない。&lt;/p&gt;
&lt;p&gt;曽我伯がいつも言う言葉：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;適切なタイミングで適切な行動をとれば、価値は最大になる；勉強する時は真剣に勉強し、良い学位を得ることは、チラシ配いでお小遣い稼ぎをするよりもずっと良い；就職したら真面目に働くことで、給与の伸び幅が豊かな報酬をもたらす；家を持ったら、家をきちんと世話をしなければならない。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;興味のある方は、こちらで講演原稿をご覧ください：「時の流れについて」というテーマの答えは、多くの書籍を読むことによって見つかります。原文はこちらにあります。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>取引所インターフェースドキュメント集約</title>
        <link>https://ttf248.life/ja/p/exchange-interface-documentation/</link>
        <pubDate>Wed, 27 Jan 2021 14:35:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/exchange-interface-documentation/</guid>
        <description>&lt;p&gt;金融ソフトウェア開発の5年目となり、最も取引するものが交易所とのインターフェースドキュメントです。慣れ親しんでいるのは香港証取引所のドキュメントで、最近では中国通業務を処理することになり、一部の中国通業務に関わるため、深セン証取引所と上海証取引所の資料も手元に置いています。&lt;/p&gt;
&lt;h2 id=&#34;香港交易所&#34;&gt;香港交易所
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式サイト&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;常用&#34;&gt;常用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Mutual-Market/Stock-Connect/Reference-Materials/Trading-Hour,-Trading-and-Settlement-Calendar?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;取引時間、取引および決済カレンダー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/Services/Trading/Securities/Overview/Trading-Mechanism?sc_lang=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;取引メカニズム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/-/media/hkex-market/mutual-market/stock-connect/reference-materials/resources/glossary_c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;滬港通及深港通用語集&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;2021-Calendar_pdf_c.pdf&#34; &gt;滬港通及び深港通取引カレンダー PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;2021-Calendar_csv_c.csv&#34; &gt;滬港通及び深港通取引カレンダー CSV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用-1&#34;&gt;常用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;glossary_c.pdf&#34; &gt;中港金融詞彙對照表 PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/chi/vcm/vcmtriggersecurity_c.aspx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;市调机制冷静期触发记录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/chi/services/trading/securities/securitieslists/ListOfSecurities_c.xlsx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;证券名单：基本情報、証券分類&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/Services/Trading/Securities/Securities-Lists/Closing-Auction-Session-%28CAS%29-Securities?sc_lang=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;閉市競取引の時間帯の証券&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用-2&#34;&gt;常用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/Services/Trading/Securities/Securities-Lists/Volatility-Control-Mechanism-%28VCM%29-Securities?sc_lang=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;市場変動調整機構（市調機構）証券&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sc.hkex.com.hk/TuniS/www.hkex.com.hk/Services/Trading/Securities/Securities-Lists/Designated-Securities-Eligible-for-Short-Selling?sc_lang=zh-CN&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;売りきれ指定証券&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;ListOfSecurities_c.xlsx&#34; &gt;証券名簿：基本情報、証券分類 XLSX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;行情インターフェースドキュメント香港株式--中華通&#34;&gt;行情インターフェースドキュメント：香港株式 + 中華通
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Market-Data-Services/Infrastructure/Overview?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;行情インターフェースドキュメント集約リンク&lt;/a&gt;
よくある質問の解答、開発マニュアルのガイダンス、過去の行情インターフェースドキュメントは、検索バーからダウンロードアドレスを取得することで入手できます。バージョン番号を検索してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Market-Data-Services/Infrastructure/HKEX-Orion-Market-Data-Platform-Securities-Market-OMD-C?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;香港株式行情インターフェースドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Mutual-Market/Stock-Connect/Reference-Materials/Technical-Documents/OMD_CC-Specifications?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中華通行行情インターフェースドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;取引状況インターフェースドキュメント香港株式市場--中華通&#34;&gt;取引状況インターフェースドキュメント：香港株式市場 + 中華通
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&#34; &gt;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Developers_Guide_1_11.pdf&#34; &gt;HKEX_OMDC_Developers_Guide_1_11.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMDC_Connectivity_Guide_Securities_Market-_Index_datafeed_%28v2_2%29.pdf&#34; &gt;OMDC_Connectivity_Guide_Securities_Market-&lt;em&gt;Index_datafeed&lt;/em&gt;(v2_2).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Interface_Specification_China_Connect_Securities-%28v1-3%29.pdf&#34; &gt;OMD_Interface_Specification_China_Connect_Securities-(v1-3).pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;取引状況インターフェースドキュメント香港株式--中華通&#34;&gt;取引状況インターフェースドキュメント：香港株式 + 中華通
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Connectivity_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Connectivity_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Developers_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Developers_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;報盤インターフェースドキュメント港股--中華通&#34;&gt;報盤インターフェースドキュメント：港股 + 中華通
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Trading/Securities/Infrastructure/Overview?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;報盤インターフェースドキュメント集約リンク&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OCG_FIX_Trading_Interface_Specifications_v2_2-%28clean%29.pdf&#34; &gt;港股FIXプロトコルインターフェースドキュメント PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OCG_Binary_Trading_Interface_Specifications_v2_2-%28clean%29.pdf&#34; &gt;港股二級制プロトコルインターフェースドキュメント PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;Reason_Text_List.xlsx&#34; &gt;港股取引所エラーコードリスト XLSX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEx_CCCG_FIX_Trading_Interface_Specifications_v1_3-%28clean%29.pdf&#34; &gt;中華通FIXプロトコルインターフェースドキュメント PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEx_CCCG_Binary_Trading_Interface_Specifications_v1_3-%28clean%29.pdf&#34; &gt;中華通二進制インターフェースドキュメント PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;上交所&#34;&gt;上交所
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.sse.com.cn/services/tradingservice/tradingtech/technical/data/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;行情報盤インタフェースドキュメント&lt;/a&gt;
エラーインターフェースドキュメントは、他のメニューで取得できます
&lt;a class=&#34;link&#34; href=&#34;SSE_IS111_ErrorCode_CV3.15.xlsx&#34; &gt;報盤エラーインターフェースドキュメント XLSX&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;深谷証券取引所&#34;&gt;深谷証券取引所
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.szse.cn/marketServices/technicalservice/interface/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;行情報盤インタフェースドキュメント&lt;/a&gt;
深谷証券取引所は、個別のエラーメッセージを提供していません。報盤インタフェースドキュメントの第6章に補足説明があります。
&lt;a class=&#34;link&#34; href=&#34;P020201229686784934466.pdf&#34; &gt;深圳证券交易所Binary取引データインターフェース規範（Ver1.18）PDF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ニューヨーク証券取引所&#34;&gt;ニューヨーク証券取引所
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nyse.com/markets/hours-calendars&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;休場スケジュール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.nasdaq.com/market-activity/ipos?tab=upcoming&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;新規上場情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;終値&#34;&gt;終値
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://eoddata.com/stocklist/NASDAQ.htm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;グローバル市場の終値&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Dockerの基礎を理解するための３つのポイント</title>
        <link>https://ttf248.life/ja/p/docker-two-three-things/</link>
        <pubDate>Thu, 21 Jan 2021 09:26:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/docker-two-three-things/</guid>
        <description>&lt;p&gt;長年携わってきたのは &lt;code&gt;CentOS&lt;/code&gt; オペレーティングシステムであり、&lt;code&gt;mac&lt;/code&gt; ユーザーや &lt;code&gt;Ubuntu&lt;/code&gt; ユーザーの場合、一部の内容は適用できない。
インストールに関する部分は、清華大学のドキュメントを参照するのが参考になる：&lt;a class=&#34;link&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール
&lt;/h2&gt;&lt;p&gt;未知の神秘的な力により、国内でのDockerのインストールには、クラウドプロバイダーが提供するレジストリのアドレスを設定することを推奨します。ここでは&lt;strong&gt;Alibaba Cloud&lt;/strong&gt;を使用することをお勧めします。&lt;/p&gt;
&lt;h3 id=&#34;リポジトリソースの設定&#34;&gt;リポジトリソースの設定
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install yum-utils device-mapper-persistent-data lvm2 &amp;amp;&amp;amp; \
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;最新版のインストール&#34;&gt;最新版のインストール
&lt;/h3&gt;&lt;p&gt;Dockerは一般的なバックエンドサービスとして、起動時に自動で開始されるように設定することを推奨します。以下のコマンドはCentOS 7向けです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install -y docker-ce docker-ce-cli containerd.io &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;指定バージョン展開&#34;&gt;指定バージョン展開
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;kubernetes&lt;/code&gt;および&lt;code&gt;docker&lt;/code&gt;のリリースは完全に同期されておらず、今後&lt;code&gt;kubernetes&lt;/code&gt;を展開する場合は、&lt;code&gt;kubernetes&lt;/code&gt;展開手順を参照し、指定バージョンの&lt;code&gt;docker&lt;/code&gt;をインストールしてください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum list docker-ce --showduplicates | sort -r
sudo yum install -y docker-ce-18.09.2-3.el7 docker-ce-cli-18.09.2-3.el7 containerd.io-18.09.2-3.el7 &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;通常ユーザーにdocker権限を追加する&#34;&gt;通常ユーザーにDocker権限を追加する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo usermod -aG docker ${USER}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;卸載&#34;&gt;卸載
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum remove -y docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日常使用-にちじょうしよう&#34;&gt;日常使用 (にちじょうしよう)
&lt;/h2&gt;&lt;h3 id=&#34;镜像加速&#34;&gt;镜像加速
&lt;/h3&gt;&lt;p&gt;未知の神秘的な力により、イメージの取得時に速度が低下することがあります。この問題を解決するために、国内のクラウドプロバイダーが多くの加速サービスを提供し、引き続き&lt;strong&gt;阿里云&lt;/strong&gt;を推奨します。&lt;/p&gt;
&lt;p&gt;加速用のURLは、ご自身で阿里云アカウントを登録して取得してください。このサービスは無料で利用でき、阿里云からは無料のイメージ構築サービスも提供されています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt;EOF
{
  &amp;quot;registry-mirrors&amp;quot;: [
    &amp;quot;https://docker.nju.edu.cn&amp;quot;,
    &amp;quot;https://mirror.baidubce.com&amp;quot;,
    &amp;quot;https://docker.m.daocloud.io&amp;quot;,
    &amp;quot;https://docker.mirrors.sjtug.sjtu.edu.cn&amp;quot;
  ]
}
EOF
systemctl daemon-reload &amp;amp;&amp;amp; \
systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;強く推奨されるコントロールパネル&#34;&gt;強く推奨されるコントロールパネル
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume create portainer_data &amp;amp;&amp;amp; \
docker run -d --name=portainer --restart=always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.20.3-alpine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常用イメージのプル集&#34;&gt;常用イメージのプル集
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull rancher/rancher:stable &amp;amp;&amp;amp; docker pull portainer/portainer-ce:2.0.1 &amp;amp;&amp;amp; \
docker pull centos:7 &amp;amp;&amp;amp; docker pull ubuntu:20.04 &amp;amp;&amp;amp; docker pull ubuntu:18.04 &amp;amp;&amp;amp; \
docker pull redis:5 &amp;amp;&amp;amp; docker pull redis:6 &amp;amp;&amp;amp; \
docker pull alpine:3.11 &amp;amp;&amp;amp; docker pull busybox:1.32 &amp;amp;&amp;amp; \
docker pull rabbitmq:3.7-management &amp;amp;&amp;amp; \
docker pull mariadb:10.2 &amp;amp;&amp;amp; \
docker pull nginx:1.18 &amp;amp;&amp;amp; docker pull nginx:1.19 &amp;amp;&amp;amp; \
docker pull mysql:5.6 &amp;amp;&amp;amp; docker pull mysql:8 &amp;amp;&amp;amp; \
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;常用イメージのプル集-1&#34;&gt;常用イメージのプル集
&lt;/h3&gt;&lt;p&gt;docker pull mysql:5.6 &amp;amp;&amp;amp; docker pull mysql:8 &amp;amp;&amp;amp; &lt;br&gt;
docker pull elasticsearch:6.8.11 &amp;amp;&amp;amp; docker pull logstash:6.8.11 &amp;amp;&amp;amp; docker pull kibana:6.8.11 &amp;amp;&amp;amp; &lt;br&gt;
docker pull zookeeper:3.4 &amp;amp;&amp;amp; &lt;br&gt;
docker pull influxdb:1.7 &amp;amp;&amp;amp; docker pull grafana/grafana:7.3.1 &amp;amp;&amp;amp; &lt;br&gt;
docker pull percona:8 &amp;amp;&amp;amp; docker pull percona:5.6 &amp;amp;&amp;amp; &lt;br&gt;
docker pull cloverzrg/frps-docker:0.34.3 &amp;amp;&amp;amp; docker pull cloverzrg/frpc-docker:0.34.3&lt;/p&gt;
&lt;h3 id=&#34;常用コマンド&#34;&gt;常用コマンド
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/reference/commandline/docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/engine/reference/commandline/docker/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンテナの実行状態を確認し、&lt;code&gt;format&lt;/code&gt;パラメータを追加して詳細なコンテナ情報を表示（イメージ情報は無視）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker ps --format &amp;quot;{{.Names}}: {{.Ports}}: {{.Size}}&amp;quot;
#portainer: 0.0.0.0:8000-&amp;gt;8000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp: 0B (virtual 172MB)
#influxdb: 0.0.0.0:8086-&amp;gt;8086/tcp: 183B (virtual 311MB)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;すべてのコンテナを一度に停止&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すべてのイメージを一度に削除&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dokcer rmi $(docker images -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;イメージのエクスポート&lt;/p&gt;
&lt;h3 id=&#34;常用コンマンド&#34;&gt;常用コンマンド
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; &amp;gt; -o XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージを保存して圧縮する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; | gzip &amp;gt; XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージをインポートする&lt;/p&gt;
</description>
        </item>
        <item>
        <title>LinuxでJMeterの負荷テスト環境を構築する</title>
        <link>https://ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</link>
        <pubDate>Tue, 22 Dec 2020 10:12:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</guid>
        <description>&lt;p&gt;著者はハードウェアに強い関心を持ち、JMeterを用いて負荷テストを実施し、CentOS 7上にJMeter、InfluxDB、Grafanaをデプロイするプロセスを記録しました。JMeterのインストールとコマンドの使用方法、InfluxDBの特徴とDockerによるインストール方法、Grafanaの簡易的なデプロイと設定について共有しています。高性能プログラムモードに関する経験や参考資料もまとめました。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;広く知られているように&lt;/code&gt;、私にはハードウェアに対する強い関心が持っており、テストグループが &lt;code&gt;JMeter&lt;/code&gt; を使用して負荷テストを行っている際、パフォーマンスが向上しないことを発見しました。好奇心旺盛な私は、会社の負荷テストの方法を試してみることに決意しました。また、ある頃合いにオープンソース中国で読んだ投稿「より洗練された高性能の負荷テストグラフを作成する方法」があり、&lt;code&gt;Windows&lt;/code&gt; バージョンでのテスト実行時に可視化された &lt;code&gt;TPS&lt;/code&gt; データの表示を実現していました。さらに、Web パネルを構成することでどのようなメリットがあるのでしょうか？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;頭の中で思いついたのは、当然のことばかりです。実際に試してみないとしかたないことを理解します
テスト作成およびデバッグには GUI モードを使用しないでください！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景-1&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;公式推奨は、コマンドラインで負荷テストレポートを取得し、GUIで表示する方法ですが、データに誤差が含まれているという問題があります。JMeterの理解が十分ではないため、少なくとも&lt;code&gt;Linux&lt;/code&gt;版のコンソールパネルを弄り転げる理由を見つけたいと思います。&lt;/p&gt;
&lt;p&gt;開かれた中国（オープンチャイナ）の投稿では、コアコンポーネントのデプロイメント方法があまりにも友好的ではなく、インストールに必要なファイルは公众号を通じてダウンロードする必要があり、現代的な若者として、もちろん&lt;code&gt;Docker&lt;/code&gt;で代替します。要するに、サーバーは国内であり、国境を越えたソースアドレスへのアクセス速度が遅いため、少なくともイメージサービスとしては、阿里云には無料の高速化があります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; のインストールとデプロイメントについては、ここでは詳細な説明を省略し、以前の記事を参照してください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;次の内容は、2つの主要な領域に分かれています：基本的なテスト環境コンポーネントの構築、および各コンポーネントの簡単な認識の説明&lt;/p&gt;
&lt;h2 id=&#34;jmeter&#34;&gt;JMeter
&lt;/h2&gt;&lt;p&gt;Apache JMeter は Apache 組織が開発した Java ベースの負荷テストツールです。ソフトウェアに対して負荷テストを実施するために使用され、当初は Web アプリケーション テスト用に設計されましたが、その後、他のテスト分野にも拡張されました。 静的および動的なリソース（静的ファイル、Java 小サービスプログラム、CGI スクリプト、Java オブジェクト、データベース、FTP サーバーなど）をテストに使用できます。 JMeter は、さまざまなストレスカテゴリからの巨大な負荷をシミュレートして、サーバー、ネットワーク、またはオブジェクトの強度をテストし、全体的なパフォーマンスを分析するために使用できます。 さらに、JMeter はアプリケーションに対して機能/回帰テストを実行し、断言を含むスクリプトを作成することで、プログラムが期待どおりの結果を返すことを検証します。 最大限の柔軟性を実現するため、JMeter は正規表現を使用して断言を作成することを許可しています。 Apache JMeter は、静的なリソース（ファイル、Servlet、Perlスクリプト、Javaオブジェクト、データベースとクエリ、FTPサーバーなど）および動的なリソースのパフォーマンスをテストするために使用できます。 サーバー、ネットワーク、またはオブジェクトに対して、過酷な負荷や異なる種類のストレス下での全体的なパフォーマンスを分析するために、高負荷をシミュレートすることができます。 パフォーマンスのグラフィカル分析や、大規模な同時実行負荷でサーバー/スクリプト/オブジェクトをテストするのに使用できます。&lt;/p&gt;
&lt;h3 id=&#34;jmeter-導入-centos7&#34;&gt;Jmeter 導入 CentOS7
&lt;/h3&gt;&lt;p&gt;JDK の実行環境をインストールし、JMeter のインストールパッケージをダウンロードします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install java-1.8.0-openjdk -y &amp;amp;&amp;amp; \
wget https://mirrors.bfsu.edu.cn/apache//jmeter/binaries/apache-jmeter-5.4.tgz &amp;amp;&amp;amp; tar -xf apache-jmeter-5.4.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;環境変数を設定します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export JMETER_HOME=$HOME/jmeter/apache-jmeter-5.4
export PATH=$JMETER_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;jmeter-コマンド&#34;&gt;JMeter コマンド
&lt;/h3&gt;&lt;p&gt;最後に &lt;code&gt;Grafana&lt;/code&gt; ダッシュボードに送信し、&lt;code&gt;-l&lt;/code&gt; パラメータを入力しなくても、&lt;code&gt;web&lt;/code&gt; コンソールでデータを観察できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jmeter -n -t /tmp/order-500-10s.jmx -l /tmp/jmeter-order-report-20200109/order-500-10s.jtl
# 通常、テスト結果とテストレポートは省略し、コマンドを簡略化します。
jmeter -n -t /tmp/order-500-10s.jmx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;influxdb&#34;&gt;InfluxDB
&lt;/h2&gt;&lt;p&gt;InfluxDBは、Go言語で記述されたオープンソースの分散型時系列、イベント、指標データベースです。外部依存なしで動作します。このデータベースは現在、大量の時間スタンプデータ（DevOpsモニタリングデータ、APPメトリクス、IoTセンサーデータ、リアルタイム分析データなど）を保存するために主に利用されています。&lt;/p&gt;
&lt;h3 id=&#34;influxdbの特徴&#34;&gt;InfluxDBの特徴
&lt;/h3&gt;&lt;p&gt;InfluxDBの特徴は、以下の9点にまとめられます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非構造化（非モデリング）：任意の数の列を格納できます。&lt;/li&gt;
&lt;li&gt;メトリクスの保存期間の設定が可能&lt;/li&gt;
&lt;li&gt;時間に関連する関数（min、max、sum、count、mean、medianなど）をサポートし、統計分析が容易です。&lt;/li&gt;
&lt;li&gt;ストアポリシーのサポート：データの更新や削除に使用できます。（InfluxDBはデータの削除や変更方法を提供していません。）&lt;/li&gt;
&lt;li&gt;連続クエリのサポート：データベース内で自動的にスケジュールされたクエリのセットで、ストアポリシーと組み合わせてInfluxDBのシステム負荷を軽減します。&lt;/li&gt;
&lt;li&gt;ネイティブなHTTPサポート、組み込みHTTP API&lt;/li&gt;
&lt;li&gt;SQLライクな構文のサポート&lt;/li&gt;
&lt;li&gt;クラスタ内のデータのレプリカ数を設定可能&lt;/li&gt;
&lt;li&gt;定期的なサンプリングによるデータ書き込みをサポートし、別のmeasurementにデータを分割して保存することで、粒度に応じたデータストレージが可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;influxdb-docker-インストール&#34;&gt;InfluxDB Docker インストール
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir influxdb &amp;amp;&amp;amp; cd influxdb &amp;amp;&amp;amp; \
docker run -p 8086:8086 -d --name influxdb -v $PWD:/var/lib/influxdb influxdb:1.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;docker exec -it influxdb /bin/bash&lt;/code&gt; でコンテナに入り、コマンドを実行し、手動でデータベースを作成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@bce0a55bbc72:/# influx
http://localhost:8086 への接続、バージョン 1.7.10
InfluxDB シェル バージョン: 1.7.10
&amp;gt; 対話式パネルでコマンドを実行
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;influxdbデータベースとユーザーの作成&#34;&gt;InfluxDBデータベースとユーザーの作成
&lt;/h3&gt;&lt;p&gt;データベースの作成: &lt;code&gt;create database jmeter_t2&lt;/code&gt;
データベースの表示: &lt;code&gt;show databases&lt;/code&gt;
データベースの切り替え: &lt;code&gt;use jmeter_t2&lt;/code&gt;
ユーザーの作成: &lt;code&gt;create user &amp;quot;admin&amp;quot; with password &#39;admin&#39; with all privileges&lt;/code&gt;
ユーザーの表示: &lt;code&gt;show users&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; show users
user  admin
----  -----
admin true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ユーザー権限が&lt;code&gt;admin&lt;/code&gt;で&lt;code&gt;true&lt;/code&gt;と表示されれば、データベースの準備は完了です。&lt;/p&gt;
&lt;h2 id=&#34;grafana&#34;&gt;Grafana
&lt;/h2&gt;&lt;p&gt;テストケースの作成時に、グラフによる表現はあまり必要ないことがわかりました。インターフェースの&lt;code&gt;tps&lt;/code&gt;データはコマンドラインで実行する際にすでに観測できるため、主にプログラム内部の処理時間を知りたいと考えています。&lt;/p&gt;
&lt;p&gt;Grafanaのコンソールパネルを簡単にデプロイし、InfluxDBと連携するための設定ファイルをインポートします。&lt;/p&gt;
&lt;p&gt;コンソールではラベルによるフィルタリングがサポートされており、通常は1つの&lt;code&gt;InfluxDB&lt;/code&gt;データベースを設定するだけで済みます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーション名&lt;/li&gt;
&lt;li&gt;テストケース名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/linux-setup-jmeter-testing-environment/Snipaste_2021-03-09_19-44-22.png&#34;
	width=&#34;861&#34;
	height=&#34;357&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;grafana&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name=grafana -p 3000:3000 grafana/grafana:7.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ブラウザ版ではサンプリング間隔により&lt;code&gt;TPS&lt;/code&gt;や関連数値がJMeterの集計レポートと一致しないため、参考リンクを参照してください：[https://www.vinsguru.com/jmeter-real-time-results-influxdb-grafana/](&lt;a class=&#34;link&#34; href=&#34;https://www.vinsguru&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vinsguru&lt;/a&gt;. ## Grafana&lt;/p&gt;
&lt;p&gt;テストケースの作成時に、グラフによる表現はあまり必要ないことがわかりました。インターフェースの&lt;code&gt;tps&lt;/code&gt;データはコマンドラインで実行する際にすでに観測できるため、プログラム内部の処理時間を確認することが主な目的です。&lt;/p&gt;
&lt;p&gt;Grafanaのコンソールパネルを簡単にデプロイし、InfluxDBと連携するための設定ファイルをインポートしました。&lt;/p&gt;
&lt;p&gt;コンソールではラベルによるフィルタリングがサポートされており、通常は1つの&lt;code&gt;InfluxDB&lt;/code&gt;データベースを設定するだけで済みます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーション名&lt;/li&gt;
&lt;li&gt;テストケース名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/linux-setup-jmeter-testing-environment/Snipaste_2021-03-09_19-44-22.png&#34;
	width=&#34;861&#34;
	height=&#34;357&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;grafana&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name=grafana -p 3000:3000 grafana/grafana:7.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ブラウザ版ではサンプリング間隔により、計算された&lt;code&gt;TPS&lt;/code&gt;や関連数値がJMeterの集計レポートと一致しないため、参考リンクを参照してください：[https://www.vinsguru.com/jmeter-real-time-results-influxdb-grafana/](&lt;a class=&#34;link&#34; href=&#34;https://www.vinsguru&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vinsguru&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;付録&#34;&gt;付録
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;高性能のプログラムパターンは、必然的にone loop threadであるべきであり、ロック、入隊列、出隊列などのものは、不必要なパフォーマンス低下を引き起こす&lt;/li&gt;
&lt;li&gt;核心ビジネスロジックの実行時間が、他のコードを導入する時間よりも大きい場合のみ、並行処理が有効に効率を向上させることができ、コアな実行時間が十分に小さい場合は、慎重に他のコードを導入すべき&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://my.oschina.net/u/4617935/blog/4680856&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JMeterシリーズのJMeter+Grafana+InfluxDB リアルタイム監視&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/_/influxdb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;influxdb 公式イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hub.docker.com/r/grafana/grafana&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;grafana 公式イメージ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://jmeter.apache.org/download_jmeter.cgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JMeter 公式サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@jasonli.studio/to-install-apache-jmeter-in-centos7-294bc72a97ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CentOS7にApache JMeterをインストールする方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Red Hat と CentOS のライフサイクル</title>
        <link>https://ttf248.life/ja/p/redhat-centos-lifecycle/</link>
        <pubDate>Tue, 21 Jul 2020 20:02:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/redhat-centos-lifecycle/</guid>
        <description>&lt;p&gt;オンラインプロ덕ション環境のオペレーティングシステムとして、Red HatとCentOSが主流の選択肢です。2つのシステムのライフサイクルに関する公式サイトへのリンクを記録し、CentOS 8からCentOS 8 Streamへのアップグレード経験を共有しています。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;p&gt;オンプレミス（本番環境）のオペレーティングシステムですが、現在の国内環境においては、Red HatとCentOSが主流の選択肢です。2年前にはRed Hat 6のEOL（End of Life）を迎えたため、両システムのライフサイクルに関する公式ウェブサイトリンクを記録します。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://access.redhat.com/support/policy/updates/errata&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Red Hat Enterprise Linux 生命周期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wiki.centos.org/zh/About/Product&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CentOS 产品规范&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Red Hat Enterprise Linux（RHEL）および CentOS は、エンタープライズ向けのサーバーオペレーティングシステムとして主流の選択肢です。RHEL は安定したサポートと更新サイクルを提供し、エンタープライズアプリケーションに適しています。CentOS は RHEL のコミュニティ版であり、同様の機能と安定性を提供しますが、公式なサポートはありません。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;この記事を執筆した時点では、2年後に自分が更新することなど想像もしていませんでした。先日、普段使っている仮想マシンをCentOS 8からCentOS 8 Streamにアップグレードしました。本番環境で何を選ぶかは、話す必要がないので詳しくは述べませんが、ローカル環境では最新版を追求したいと考えています。&lt;/p&gt;
&lt;p&gt;CentOS 8 Streamは、従来のCentOSよりも迅速なアップデートと新機能を提供するロールフィード版であり、開発やテスト環境での利用に適しています。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>米中貿易戦争 (Bei-Chū Bōgyō Sensō)</title>
        <link>https://ttf248.life/ja/p/us-china-trade-war/</link>
        <pubDate>Tue, 21 Jul 2020 19:52:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/us-china-trade-war/</guid>
        <description>&lt;p&gt;まず、少し話題を外しますが、中国特色社会主義と資本主義の違いについてです。先輩たちの口から「儲かるためにはまず道路を整備する」という言葉を聞いたことがあります。中国の基礎的なインフラ建設は、国家が資金を出して行われ、資本主義社会になればこれらのものはすべて請け負いになります。偏遠な地域には利益がなく、企業も引き受けたがることはありません。この話を続けると少し逸脱してしまうので、現在の議論の本筋から離れてしまいます。一般的に貿易戦争が生活に大きな影響を与えているとは思われませんが、実際には中国のハイエンド製造業は常に脆弱でした。私が従事しているIT業界では、メモリ、ハードディスク、CPU、グラフィックカードといった構成要素はすべて海外工場からのものであり、これらの部品費用の占める割合は全体の50％にも及びます。ハイエンド製造業は不可避的に発展していくのです。中国とアメリカの衝突も避けられない状況です。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/zh-hans/2018%EF%BC%8D2020%E5%B9%B4%E4%B8%AD%E7%BE%8E%E8%B4%B8%E6%98%93%E6%88%98&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2018年中美贸易战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E5%88%B6%E9%80%A02025&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;中国制造2025&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ウィキペディア&#34;&gt;ウィキペディア
&lt;/h2&gt;&lt;p&gt;2018年から2020年の間に、米中貿易戦争（英語：China–United States trade war）と呼ばれる米中貿易紛争が勃発した。また、中美貿易争端、中美貿易摩擦、中美貿易紛争、または美中貿易戦とも呼ばれる。これは中華人民共和国とアメリカ合衆国との間の貿易紛争である。&lt;/p&gt;
&lt;p&gt;この紛争の根源は、2018年3月22日にトランプ大統領が署名した覚書において、「中国が米国知的財産および商業秘密を盗み取っている」と主張し、1974年の貿易法第301条に基づき、中国からの輸入商品に課税するために、600億ドル相当の商品に対する関税を請求したことにある。2018年7月6日には、340億ドルの中国製品への25%の追加関税が課せられた。&lt;/p&gt;
&lt;h2 id=&#34;ウィキペディア-1&#34;&gt;ウィキペディア
&lt;/h2&gt;&lt;p&gt;2018年5月、米中双方は一時的に貿易戦争の凍結合意に達し、和解を求める共同声明を発表した。しかし、アメリカの貿易代表事務所（USTR）は6月16日に最初の対象となる500億ドル相当の中国製品に対する課税リストを公開し、当初の10%から25%へと引き上げた。これに対し、中国国务院関税税則委員会は報復措置として、対等に25%の関税を課税することを決定した。7月6日、トランプ政権は最初の課税リストに含まれる34億ドルの中国製品に対して25%の関税を正式に適用し、トランプ氏による中国に対する関税政策の本格的な実施を示すこととなった（残りの16億ドルの商品は8月23日に25%の関税が適用された）。中国商務部はその後、声明の中で「アメリカは世界経済史上最大の貿易戦争を引き起こし、WTOのルールに違反した」と非難した。 中国海关总署指，中方的反击措施已在美方加征关税措施生效后即行实施。&lt;/p&gt;
&lt;p&gt;12月1日，G20布宜诺斯艾利斯峰会上，两国领导人习近平与唐纳德·特朗普达成共识，同意举行为期90日的谈判，并在谈判期间暂停新增贸易措施。2019年3月1日最后期限到期后，美国方面宣布已有重大进展，并延长暂停新增贸易措施的期限。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;中国海関総署指、中方のア応手加算関税措置が発動された後直ちに実施されました。
2019年12月1日、G20ブエノスアイレス峰会において、両国指導者である習近平とトランプ氏が合意し、90日間を定めた交渉を実施するとともに、交渉期間中に新たな貿易措置の追加を停止することを決定しました。2019年3月1日に期限が到来した後、米国側は大幅な進展があったことを発表し、新たな貿易措置の追加を一時停止する期間を延長しました。&lt;/p&gt;
&lt;h2 id=&#34;ウィキペディア-2&#34;&gt;ウィキペディア
&lt;/h2&gt;&lt;p&gt;2019年5月5日、アメリカ合衆国大統領トランプ氏は、約2,000億ドル（約250兆円）の価値となる中国への輸入品に対する25%の関税を課すことを発表しました。この措置は6月1日から正式に施行され、アメリカ港口に到着する中国製品が対象となりました。5月13日、中国国务院関税税則委員会は、6月1日から原産米国物価600億ドル相当の一部輸入品に対して、5%から25%への関税引き上げを決定しました。6月1日、アメリカ貿易代表事務所は、米国の25%関税の適用開始を6月15日に延期すると発表し、中国国务院関税税則委員会は、中国側の関税措置が6月1日から順調に実施されると表明しました。&lt;/p&gt;
&lt;p&gt;6月29日、習近平国家主席とトランプ大統領は、大阪サミット（G20）で会談を行い、経済・貿易協議を再開することで合意し、アメリカは中国製品への新たな関税の課税を停止しました。&lt;/p&gt;
&lt;h2 id=&#34;ウィキペディア-3&#34;&gt;ウィキペディア
&lt;/h2&gt;&lt;p&gt;8月1日、トランプ政権は中国政府が米国の農産物購入の進捗に不満を表明したため、トランプ大統領はツイッター上で2019年9月1日より、残りの3,000億ドルの中国からの輸入品に対し10%の関税を課すと発表しました。8月5日には、人民元と米ドルの為替レートが7ドル台を割り込みました。同日、米国財務省は中国を為替操作国に指定しました。その後、中国政府は米国産の農産物の購入を一時停止し、8月24日に約750億ドルの米国製品に対し10%または5%の関税を課すと発表しました。また、米国自動車とその部品に対し関税を復活させました。その翌日には、米国もこれまでに3,000億ドルの中国製品に課していた税率を15%に引き上げ、現在課せられている2,500億ドルの中国製品に対する25%の関税を30%に引き上げるなど、報復措置を取りました。しかし、その後の状況により、これらの措置は保留されました。&lt;/p&gt;
&lt;p&gt;2020年1月16日、米国と中国両国は第一段階の貿易合意に署名しました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PC自作のあれこれ</title>
        <link>https://ttf248.life/ja/p/computer-assembly/</link>
        <pubDate>Sat, 18 Jul 2020 14:33:46 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/computer-assembly/</guid>
        <description>&lt;p&gt;著者は幼い頃からPCの組み立てに強い興味を持ち、大学卒業後に本格的にハードウェアの組み立てを始めました。彼は、CPU、SSD（ソリッドステートドライブ）、HDD（ハードディスクドライブ）やメモリのクロック周波数などの性能比較サイトを紹介し、購入に関するアドバイスも行いました。また、ハードウェア選びの経験談や注意点についても共有しました。&lt;/p&gt;
&lt;h3 id=&#34;缘妙不可言&#34;&gt;缘·妙不可言
&lt;/h3&gt;&lt;p&gt;小学校の頃から、自分で組み立てるPCを夢見ていた。しかし、経済的な条件が許さなかった。ようやく大学に入学してからは、持ち運びやすさを考慮し、ノートパソコンに構成を選んだ。もし具体的な時期を挙げるとすれば、PCの組み立てたいという思いが始まったのは、故郷の図書館だ。確かに都市規模の図書館であり、電子閲覧室（実際にはほとんど行ったことがなく、時間制課金であるらしい）や雑誌閲覧室があり、まさにその場所で『大众软件』、『电脑报』のような雑誌を読み漁り、PCに触れる機会が少なかった私にとって、それはまさに神レベルの科普資料だった。 コピーコンテンツの章を見ていると、自分でもPCを組んで主力で狩りに行ったり、ブラックテクノロジーを見ると、本の内容通りに再現できるのではないかと想像したり（ハッキングツールの使用に関する考察）。高校時代の勉強は重荷だったし、私の当時の認知能力では、勉強も遊びも楽しむのが普通だった。図書館に行くための由緒を持って、暇な時間に小さな袋を提げて駆けつけ、市街地は広く、通常は徒歩で図書館へ向かった。到着するとエアコンの効いた部屋で小説や漫画、ゲーム雑誌を見たり、時々真面目な書籍も見たりした。
年をとると忘れっぽくなるのは、初めの萌芽に過ぎなかった図書館が原因だ。中学校の頃に親戚が組んだPCは、結局何に使っていたのかも覚えていない。&lt;/p&gt;
&lt;h3 id=&#34;縁語らずに尽きる&#34;&gt;縁・語らずに尽きる
&lt;/h3&gt;&lt;p&gt;初中に入学して学校でコンピュータに関する基礎的なトレーニングを受けた後、転校を経て、少しコンピュータ競技会についても触れるようになりました。高校に進学した際にはNOIPを通過させました。ここで言うところの校友たちの力について言及しなければなりません。高校のコンピュータ棟は校友からの寄付によって建てられたもので、コンピュータ教室と図書館が含まれています。当時は国内インターネットブームの黎明期でもありました。校長もコンピュータ競技会への参加を支援し、前年度の先輩たちがコンピュータを通して名門大学に奨学入学していたことからでした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;これまでこのような形で自分の経験を振り返ったことはありません。だからこそ、卒業後、自動工学専攻からコンピュータ業界に意気地なく飛び込んできたのでしょう。その種子は幼い頃から植えられており、内部の人々には自覚がないだけなのです。小さい頃から様々なものに触れてきたため、自分は非常に優秀だと思っていましたが、実際には表面的な理解しか持っていませんでした。最大の強みは、最初から持っていた情熱です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;硬件组装&#34;&gt;硬件组装
&lt;/h3&gt;&lt;p&gt;PCショップ巡りや、chiphell、知乎のPC自作掲示板を参考に、初心者でも比較的簡単に自分に必要な機材リストを作成できます。2019年以降にCPUを選ぶ際は、経済的な条件が限られている場合でも、より高い性能を求めるならAMDがおすすめです。
便利なハードウェア性能比較サイトをご紹介します：&lt;a class=&#34;link&#34; href=&#34;https://cpu.userbenchmark.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cpu.userbenchmark.com/&lt;/a&gt;　価格については、eBayの米版と咸鱼（中国版ヤフオク）で比較するのが良いでしょう。真の達人であれば、咸魚で中古品を探すのがおすすめです。大幅に安く手に入れることができます。あまり詳しい方でなければ、咸魚はおすすめしません。私は偽メモリを購入しましたが、現状では問題なく使用できています。（詳細は不明です。型番とパラメータが完全に一致していません。）&lt;/p&gt;
&lt;h4 id=&#34;sn550-vs-sn750&#34;&gt;SN550 VS SN750
&lt;/h4&gt;&lt;p&gt;SN550とSN750の1TB容量の違いは、両者の継続的な読み書き速度が倍になることです。SN550では850MB、SN750では1.6GBですが、日常使用においては違いを感じられません。なぜなら、両者とも4Kの性能は同じだからです。もちろん、ここで言うSN550は1TB容量のものに限ります。500Gや250Gの容量では、順応的な読み書き速度がより遅くなります。実際には、お金を惜しまないわけではないのであれば、日常使用においてはSN550を購入するのが良いでしょう。私がこの最大の違いを選ばなかった主な理由は、その容量が1TBに制限されていることと、SN750の2TB容量があることです。私にとって、追加で拡張することなく、マザーボードのM.2 NVMeインターフェースの方がより価値があると感じたためです。&lt;/p&gt;
&lt;p&gt;総じて、ネットユーザーの結論として、B150のマザーボードでもM.2インターフェースに対応したSSDを導入することができます。&lt;/p&gt;
&lt;h4 id=&#34;机械硬盘選购&#34;&gt;机械硬盘選购
&lt;/h4&gt;&lt;p&gt;機械硬盘現在價格趨於穩定，對於有大量儲存需求的使用者，需要選購一款合適的機械硬碟，頻繁下載資源的使用者推薦企業級硬碟，常見的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;西數金盤&lt;/li&gt;
&lt;li&gt;希捷Exos
&lt;strong&gt;大容量的機械硬碟推薦進行分区，頻繁的下載操作固定在某個分区進行，日後出現壞道，可以集中在某個分区，廢棄當前分区即可，能有效延長機械硬碟壽命。&lt;/strong&gt;
希捷系列&lt;a class=&#34;link&#34; href=&#34;https://www.seagate.com/cn/zh/enterprise-storage/exos-drives/exos-e-drives/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方介紹&lt;/a&gt;
&lt;img src=&#34;https://ttf248.life/p/computer-assembly/%E5%B8%8C%E6%8D%B7exos1.png&#34;
	width=&#34;589&#34;
	height=&#34;659&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;希捷企業級硬碟概述&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;214px&#34;
	
&gt;
&lt;img src=&#34;https://ttf248.life/p/computer-assembly/%E5%B8%8C%E6%8D%B7exos2.png&#34;
	width=&#34;588&#34;
	height=&#34;661&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;希捷企業級硬碟概述&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;213px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;メモリ周波数&#34;&gt;メモリ周波数
&lt;/h4&gt;&lt;p&gt;日常業務の観点から見ると、周波数はパフォーマンスに大きな影響を与えません。
&lt;img src=&#34;https://ttf248.life/%e3%83%a1%e3%83%a2%e3%83%aa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;メモリ時序&#34;
	
	
&gt; &lt;img src=&#34;https://ttf248.life/p/computer-assembly/%E5%92%B8%E9%B1%BC%E5%86%85%E5%AD%98.png&#34;
	width=&#34;407&#34;
	height=&#34;404&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;咸鱼内存&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;241px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;メモリ周波数（英語：Memory timingsまたはRAM timings）は、シリアル・ランダム・アクセスメモリ (SDRAM) の性能を記述する4つのパラメータです。CL、TRCD、TRP、およびTRASで、単位はクロックサイクルです。これらは通常、破折線で区切られた4つの数字として書式設定されます（例：7-8-8-24）。第4のパラメータ (RAS) は頻繁に省略され、場合によっては5番目のパラメータであるコマンドレートも追加されます（通常 2T または 1T で、2N、1N とも表記されます）。これらのパラメータは、ランダムアクセスメモリの速度に影響を与える遅延時間を指定します。数字が低いほど、パフォーマンスは通常高速になります。システム性能を決定する最終的な要素は、実際の遅延時間であり、通常はナノ秒単位で測定されます。 メモリのタイミングを実際の遅延に変換する場合、最も重要なことは、それがクロックサイクル単位で測定されることです。クロックサイクルの時間を知らないと、ある数値セットが別の数値セットよりも高速かどうか判断できません。&lt;/p&gt;
&lt;h4 id=&#34;メモリ周波数-1&#34;&gt;メモリ周波数
&lt;/h4&gt;&lt;p&gt;例えば、DDR3-2000のメモリにおけるクロック周波数は1000 MHzで、そのクロック周期は1 nsです。この1 nsのクロックに基づき、CL=7の場合、絶対遅延は7 nsとなります。一方、DDR3-2666（クロック1333 MHz、各周期0.75 ns）では、より大きなCL=9を使用しても、発生する絶対遅延6.75 nsの方が短くなります。&lt;/p&gt;
&lt;p&gt;現代のDIMMには、自動構成を推奨するシリアル存在検出（SPD）ROMチップが含まれています。PCのBIOSは、パフォーマンス向上（安定性低下のリスクあり）のためにタイミングを調整したり、特定の状況下で安定性を高めたり（推奨タイミングの使用など）することができます。&lt;/p&gt;
&lt;p&gt;注意：メモリ帯域幅とは、メモリの透過量（スループット）を測定するものであり、通常は転送レートによって制限されます。SDRAMの複数の内部バンクを交差アクセスすることで、ピークレートで連続的にデータを送信することが可能です。 可能性是牺牲潜伏时间来增加带宽。具体来说，每代新的DDR内存都有着较高的传输速率，但绝对延迟没有显著变化，尤其是在市场上第一批新一代产品中，通常比上一代更长延迟。&lt;/p&gt;
&lt;p&gt;即使增加了内存延迟，增加内存带宽也可以改善多处理器或多个执行线程的计算机系统的性能。更高的带宽也将提升没有专用显存的集成显卡的性能。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;%e3%83%a1%e3%83%a2%e3%83%aa%e3%82%bf%e3%82%a4%e3%83%9f%e3%83%b3%e3%82%b0%e3%83%91%e3%83%a9%e3%83%a1%e3%83%bc%e3%82%bf%e8%aa%ac%e6%98%8e.png&#34; &gt;内存时序参数说明&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98%E6%97%B6%E5%BA%8F&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;メモリ時系列パラメータ説明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ウェブサイトの高速化とドメイン設定</title>
        <link>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</link>
        <pubDate>Sat, 20 Jun 2020 10:36:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</guid>
        <description>&lt;p&gt;境内アクセス時のGitHub Pagesの速度が遅いため、著者が個人ドメインを取得し、国内クラウドホスティングプロバイダーのCDN加速サービスを購入しました。設定中に、wwwサフィックスドメインへのアクセスができない問題が発生しましたが、最終的に汎用ドメインのDNS解決を削除し、セカンドレベルドメインを個別に設定することで解決しました。著者はまた、CDN加速の原理と設定経験、およびNginxを用いた逆プロキシの試みと教訓についても共有しています。&lt;/p&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景
&lt;/h3&gt;&lt;p&gt;ウェブサイトはGitHub Pagesにホストされており、周知のところ、GitHub Pages内へのアクセスが遅いことがありました。そこで個人ドメインを取得し、国内クラウドホスティングプロバイダーのCDN加速サービスを導入しました。加速サービスのセットアップ時に、開発マシンにもDocker、frp、k8sなどのサービスをデプロイしており、これらのサービスにはそれぞれダッシュボードが用意されていることを思い出し、無駄を省くという原則に基づき、複数のリバースプロキシを設定し、すべてサブドメインに付与しました。
その時、サブドメインであるwww.xiangtianlong.comへのアクセスが突然できなくなったため、阿里云でDNSレコードを設定し、www.xiangtianlong.comとxiangtianlong.comの両方を解析するように設定しましたが、CDN加速を有効にしていない状態で両方のドメインは正常に動作していました。 CDNを構成する際に、サブドメインが多いため汎用ドメインルールを有効にし、すべての開発マシンにルーティングしたところ、結果的にwwwというサブドメインもダウンしてしまいました。はい、正眼に見えているはずです。wwwプレフィックスはサブドメインなのです。 実際のウェブサイトはGitHub Pagesでホストされており、開発マシンにはウェブサイトのキャッシュ情報が一切ありません。&lt;/p&gt;
&lt;p&gt;なぜ開発マシンにサイトがデプロイされていないのかというと、静的ブログであり、GitHubが提供するActionと組み合わせて自動的にパブリッシュされるためです。本当に美味い（素晴らしい）ですね。&lt;/p&gt;
&lt;h3 id=&#34;ドメイン&#34;&gt;ドメイン
&lt;/h3&gt;&lt;p&gt;非専門的なWeb開発におけるドメインの理解は、SEOやクロスドメインの問題を含まない。ブログサイトとして、裸ドメインがブログ主のサイトを強調しやすく、特に私が漢数字でのローマ字表記をドメイン名としている場合や、現在のモバイルアクセスが多い状況では、入力する文字数を減らすことが望ましい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PC版では、ショートカットキーでwwwとcomの入力を省略できる&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN
&lt;/h3&gt;&lt;p&gt;阿里云和腾讯云都使用过，对于新人来说上手不难。腾讯云还有视频讲解相关的概念。CDN加速的原理与京东仓库类似：发售新商品时，提前统一配送到全国各地的仓库，触发配送请求时，就近分发。&lt;/p&gt;
&lt;p&gt;回源地址：网站资源原始存放的地址
缓存文件设置，浏览器F12，管理控制台，简单分析静态资源和动态资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部0天有效期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.php;.jsp;.asp;.aspx&lt;/code&gt; 0天有效期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.jpg;.png;.js;.css;.woff2&lt;/code&gt; 1天有效期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;腾讯云配置规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存过期规则最多可配置10条&lt;/li&gt;
&lt;li&gt;多条缓存过期规则之间的优先级为底部优先&lt;/li&gt;
&lt;li&gt;缓存过期时间最多可设置365天&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;悲惨な自述&#34;&gt;悲惨な自述
&lt;/h3&gt;&lt;p&gt;以前、Nginxを使ったことがなく、ウェブサイトを検索すれば反転プロキシの設定が分るだろうとばかり思っていた。結果的に少し混乱し、半日もかけて302リダイレクトもできなかった。結局、役に立たなかった。そこで、面倒くさいからDNS解析で汎用的なドメイン名の解析を削除して、個別のサブドメインを設定してみることにした。その時、阿里云DNS解析に「表示URL転送」という機能があることに気づき、試してみたら、これがまさに私が求めていた302リダイレクトだった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最初のサブドメインを正常にアクセスできた。次に設定しようとしたところ、役に立たなかった。もう人生終わったかと思ったら、しばらく待っていると突然使えるようになった。阿里云のDNSキャッシュが時々不安定なのだとわかった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/20414602&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;なぜ多くのウェブサイトのドメイン名に「www」プレフィックスが付加されていないのか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudxns.net/Support/detail/id/918.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www付きとなく付加されていないドメイン名の違いは何ですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gythialy.github.io/Docker-nginx-reverse-proxy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker nginx 反向プロキシ設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ブログIDE環境と雑感</title>
        <link>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;本記事では、Markdownの基本的な概念と、さまざまなソフトウェアでの利用について解説しています。VSCodeをIDEとして推奨し、おすすめのプラグインを紹介しています。また、HexoからHugoへの移行経験を共有し、Hugoの柔軟性とカスタマイズ性を強調しています。最後に、新しい技術を迅速に習得するためのヒントや、Hugoテーマのスタイルが更新されない問題を解決する簡単なコツを提供しています。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;軽量マークアップ言語であり、人々が読み書きしやすいプレーンテキスト形式でドキュメントを作成することを可能にする。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;markdown-1&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;詳細なMarkdown構文については、本文で別途詳述しません。電子書籍を推奨します。&lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらをクリック&lt;/a&gt;
市場には多くのソフトウェアがMDを記述方法としてサポートしています。CSDNのブログシステムはMD構文に対応したオンラインエディターを導入しており、初回使用時にデフォルトでMD構文に関する紹介記事が表示されます。筆記者自身もそれなりに有用だと感じています。印象笔记では2018年にMDノートのサポートを追加し、ショートカットバーには様々なMDマークアップのオプションがあり、普通の記事を編集するのとほぼ同じように使えます。全体的なインタラクションフローは初心者にもフレンドリーです&lt;/p&gt;
&lt;h3 id=&#34;ide-推奨&#34;&gt;IDE 推奨
&lt;/h3&gt;&lt;p&gt;この記事を書いているのは2020年であり、VS Code は当然のことながら皆知っているでしょう。なぜなら、Git Page をブログシステムとして利用することを考えるのは、業界経験者だけです。以前は Sublime や Atom も良い選択肢でしたが、2 か年のオープンソースコミュニティの推進により、VS Code は急速に発展し、徐々に初心者にとっての最初の選択肢となっています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;微软の巨頭とオープンソースコミュニティの関係が、分裂状態から成功して蜜月期に入りました：オープンソースを抱擁しています。筆者所在的会社は最近2年間で積極的に Java エコシステムを取り入れており、言い換えれば、ビジネス開発においては、現在の Java エコシステムは国内で実証された魅力です&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vscodeプラグインのおすすめ&#34;&gt;VSCodeプラグインのおすすめ
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-07-17.png&#34;
	width=&#34;310&#34;
	height=&#34;306&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;プラグインリスト&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;プラグインにはそれぞれReadmeが付属しており、基本的な使い方や主要な機能、一部のプラグイン作者からは動的な効果表示画像も提供されています。
&lt;code&gt;Paste Image&lt;/code&gt;とhugoの画像プラグイン方式を組み合わせることで、非常に簡単に画像を導入できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ショートカットキーを忘れてしまった場合、VSCodeのショートカットキー管理メニューを開き、「md」で検索して数回確認しましょう。Readmeをもう一度見直すのも良いでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo
&lt;/h2&gt;&lt;p&gt;筆者は&lt;code&gt;hexo&lt;/code&gt;から&lt;code&gt;hugo&lt;/code&gt;に切り替えた。愛折衝は私の天性であり、結局は忍耐強く静かに記事を書くことができないのだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugoは、個別のフォルダに画像とmdドキュメントを置くことをサポートする。&lt;/li&gt;
&lt;li&gt;Academicテーマのデザイン上では、様々な種類の文章スタイルをサポートしている。&lt;/li&gt;
&lt;li&gt;様々な便利なカスタム拡張機能がある。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学術&#34;&gt;学術
&lt;/h2&gt;&lt;p&gt;公式サイトではデフォルトで&lt;code&gt;exampleSite&lt;/code&gt;を使用し、メニューのインポートには&lt;code&gt;#コンポーネント&lt;/code&gt;という方式が推奨されます。&lt;/p&gt;
&lt;p&gt;URLのパターンは、ナビゲーションバーをクリックすることで単一ページのジャンプを実現し、ホームページでのスクロールを回避します（これは純粋な個人的な好みです）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタイル：ノート、講演、電子書籍&lt;/li&gt;
&lt;li&gt;柔軟性：全体的なスタイルのカスタマイズ、カスタムCSSスタイルの適用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このテーマは、中国語のサポートがまだ十分ではありません。主に視覚的な観点からすると、フォントサイズが中国語の読書習慣に合っていません。Hexoの開発者はほとんどが中国人であり、この点ではHugoよりも優れています。&lt;/p&gt;
&lt;p&gt;しかし、自分で手を加えて、食材を増やし、食卓を豊かにします。ブラウザで要素を検査し、要素を見つけたら、必要なCSSスタイルの名前を知るために、「Insert Style Rule Below」をクリックします。ネストされた多層構造のCSSでも、簡単にノード名を取得できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[カスタムCSSの導入](https://sourcethemes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;学術用&#34;&gt;学術用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;テーマに組み込みの構文ハイライト設定 &lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式リンク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;子供たちがまた文句を言っているようだ。「最初から最後まで、曖昧で、細かいこととか全く触れてない」と。&lt;/p&gt;
&lt;p&gt;私が伝えたいのは、以下のものがあれば十分だということ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式マニュアル&lt;/li&gt;
&lt;li&gt;プラグインの説明書&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい技術をすぐに使いこなすには、まず公式サイトのドキュメントを読むことをお勧めします。内容を完全に理解しようとする必要はありませんが、少なくとも概要は把握しておきましょう。検索エンジンで見つかる結果は、必ずしも最新版と一致しない可能性があります。誤解を招くこともあります。新書も同様に、まず目次を見て、著者が何を説明するのかを把握しましょう。場合によっては、序文を読むのが良いでしょう。特に海外の著作を翻訳した際に、訳者の序文には書籍や核心的な内容がまとめられていることがあります。&lt;/p&gt;
&lt;h2 id=&#34;エッグ-卵&#34;&gt;エッグ (卵)
&lt;/h2&gt;&lt;p&gt;Hugo Academicの組み込みスタイルを切り替え、サイトに公開後、アクセス時にスタイルが変更されない。賢い仲間たちがすでに気づいていたようで、ローカルブラウザのキャッシュをクリアすると解決する。私のような機転の利いた者: F12の開発者ツールで&lt;code&gt;network&lt;/code&gt;タブを選択し、&lt;code&gt;disable cache&lt;/code&gt;オプションをチェックしてリフレッシュすれば、問題解決！
&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>自動統合システム切り替え</title>
        <link>https://ttf248.life/ja/p/auto-integration-system-switch/</link>
        <pubDate>Sun, 29 Mar 2020 02:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/auto-integration-system-switch/</guid>
        <description>&lt;p&gt;GitHub Actions を使用して、Hugo ブログを GitHub Pages および Gitee に自動でデプロイします。&lt;/p&gt;
&lt;h4 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h4&gt;&lt;p&gt;昨日ブログを更新した際に、Travisサービスが利用できないことを発見しました。Travisのウェブサイトを確認すると、ソースコードの取得時に進捗が詰まっていることがわかりました。そこで、GitHubが以前に発表していたActionサービスを思いつきました。
当時忙しくしており、Actionを利用するには申請が必要だったため、現在は正式にリリースされ、週末に暇を持て余している間に、新しいおもちゃを試してみようと思いましたか？
公式資料は、ご自身でウェブサイトをご確認ください。本稿では、より多くの転載を行いません。もしKubernetesをご利用経験がある場合、ActionのYAMLファイル設定がKubernetesと非常に似ていることに気づくでしょう。
入門チュートリアル、あるいは中国語の説明資料については、&lt;strong&gt;阮一峰のブログ&lt;/strong&gt;を検索することをお勧めします。2つの記事があり、1つ目は基本的な構文の紹介であり、もう1つは実際のケーススタディです。&lt;/p&gt;
&lt;h4 id=&#34;本文&#34;&gt;本文
&lt;/h4&gt;&lt;p&gt;必要な知識点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Secrets&lt;/li&gt;
&lt;li&gt;Action の構文
コアのジョブは既存のコンポーネントを使用して完了し、国内のGiteeにプッシュする場合はコマンドを実行します。このコマンド部分はかなり強引で、強制プッシュのみを実装しており、Travisを使用していた時のロジックを継承しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;名前: GitHub Pages と Gitee Pages

on:
  push:
    branches:
      - hugo

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;
          extended: true
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;#### 正文
- name: Build Github and Gitee ## 单个step只能写一个run命令
    run: hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;gitee_public&amp;quot; &amp;amp;&amp;amp; ls

  - name: Deploy Github
    uses: peaceiris/actions-gh-pages@v3
    with:
      github_token: ${{ secrets.BLOG_TOKEN }}
      publish_dir: ./github_public
      publish_branch: master
      cname: xiangtianlong.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Japanese Translation:&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;正文&#34;&gt;正文
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;name: Build Github and Gitee ## 単独のステップには1つのrunコマンドのみ記述可能
run: hugo -b &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://www.xiangtianlong.com/%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.xiangtianlong.com/&#34;&lt;/a&gt; -d &amp;ldquo;github_public&amp;rdquo; &amp;amp;&amp;amp; hugo -b &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://www.xiangtianlong.com/%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.xiangtianlong.com/&#34;&lt;/a&gt; -d &amp;ldquo;gitee_public&amp;rdquo; &amp;amp;&amp;amp; ls&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: Deploy Github
uses: peaceiris/actions-gh-pages@v3
with:
github_token: ${{ secrets.BLOG_TOKEN }}
publish_dir: ./github_public
publish_branch: master
cname: xiangtianlong.com&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;#### 正文
- name: Deploy Gitee
  run: cd ./gitee_public &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git config user.name &amp;quot;TianlongXiang&amp;quot; &amp;amp;&amp;amp; git config user.email &amp;quot;tianlongxiang51@gmail.com&amp;quot; &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update TianlongXiang&#39;s Blog&amp;quot; &amp;amp;&amp;amp; git push --force &amp;quot;https://xiangtianlong:${{ secrets.GITEE_PASSWORD }}@gitee.com/xiangtianlong/xiangtianlong.git&amp;quot; master:master
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;付録&#34;&gt;付録
&lt;/h4&gt;&lt;p&gt;公式マーケットで提供されているactionを見ると、現在サポートされている遊び方が多いようです。Dockerイメージを構築すれば、Docker Hubのサービスへの依存関係もなくなります。&lt;/p&gt;
&lt;p&gt;Hugoのissueを調査すると、GitHub Actionを使ってgit pagesを自動デプロイする際に、最終的に公開されるウェブサイトがmasterブランチにある必要があることがわかります。もし他のブランチにデプロイする場合は、設定画面でGitHubからウェブサイトに構文エラーがあると警告が表示されます。&lt;/p&gt;
&lt;p&gt;これは単にHugoのソースファイルがmasterブランチにあるため、GitHubがjellyブログのソースコードとして検出し、構文チェックが通らない場合に発生するエラーです。&lt;/p&gt;
&lt;p&gt;解決策は簡単です。Hugoのソースファイルを他のブランチに配置し、静的ファイルをmasterブランチに出力します。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>将来の中国は、きっと良いお爺さんやお婆さんがたくさんいる国になるだろう</title>
        <link>https://ttf248.life/ja/p/future-china-with-good-grandparents/</link>
        <pubDate>Sat, 15 Feb 2020 11:28:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/future-china-with-good-grandparents/</guid>
        <description>&lt;p&gt;二十年後に、可愛らしいおじいさんと、可愛らしいおばあさんのそばにいることを願っています。お金持ちや権力のある人間になることは望んでいません。体がしっかりして、色々なところを旅することができるといいですね。&lt;/p&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;Youku Searchでお願いします。以降、リンクは提供されません。&lt;/p&gt;
&lt;h2 id=&#34;転写&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;「10年後に素敵な老人になれるように、努力するよ。素敵な老人になるんだ。未来の中国は、良いお爺さん、お婆さんがたくさんいる国でなければならない。」たとえ10年後60歳になったとしても、この世界で3番目に若い存在でありたいと思っている。&lt;/p&gt;
&lt;p&gt;正直に言うと、皆さんが私の50歳の中国人の男性を見て「こんな体型なら素晴らしい」と思うのは相当なことだ。しかし、この体型を支えているのは、私が信奉している言葉、「越自律越自由！」だ。雨が止んだらすぐにランニングしたり、明日の午後はサッカーをする。50歳になっても、まだ大きな試合でプレーできる。これは冗談ではないし、よくプロと一緒にプレーすることもある。しかし、その裏には何があるのだろうか？ 背後には自律があり、残された私の時間も走り続けている。そして、その走りを誰かは退屈だと感じるだろう。ほどにかけて通じるほど自律すれば自由になり、私が自律できるのは、だからこそ自由奔放に走れるからだ。音楽は聞こえない。なぜなら、自分の呼吸こそが、走る最良の音楽だと感じているから。&lt;/p&gt;
&lt;h2 id=&#34;転写-1&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;私は基本的にランニングマシンを走らないし、北京の霧霾のように深刻な大気汚染が蔓延していることも多くあるので、週に5日ほど走るのだが、そのうち2日は完全に霧霾を避けている。周りの人とは違うことを冗談っぽく言うと、「もしかしたら、私は断続的に走らないから」というようなことだ。毎月日記には、私の経験を積むために1日に1回ずつ走り記録している。少なくとも月に18日以上は走り続け、ランニング中は一瞬で通過してしまう。メガネをかけてランニングすることもあっても、もっと重要なのは週にサッカーをするということだ。私の研究室の最後の授業は必ず我が家のある日に開催され、「趣味」というテーマが設定されている。趣味の大切さを強く感じている。私は、何の楽しみや興味も持たない人たちと関わることはないと思う。&lt;/p&gt;
&lt;p&gt;今年年初、私の学生の大学院生が中国のニュース週刊に発表したところから始まりました。私たちは「致（致す）」というテーマで特集を組んだのですが、10年後、私の学生は毎年卒業する際に、最後に彼が書くレポートとして、10年後に自分自身に向けて文章を書かせるという課題を与えられました。その後、私は彼らの卒業を次々と迎え、私も50歳になった時に60歳の方向けに、60歳が私自身の過去では考えたこともなかったほど遠い場所であり、地図上では存在しない場所だったにも関わらず、今や私の次の目的地となっている30歳の学生に向けて書きました。それは春に書く恋文のようなものでしたが、50歳が60歳に向けて書くのは、まるで夏の終わりを告げるような秋の独白でした。そして今、私は10年後に向けた文章を、世界中から集めて、自分自身に向けたベッド、食事、家族のそばというものたちを書いているのですが、これは決して奇妙なことではありません。&lt;/p&gt;
&lt;h2 id=&#34;転写-2&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;しかし60歳をしたらどんな人間になるか、私のテーマは明確だ。心地よい序詞の中にあるこの記事は長く、10年後に素敵な老人である myself を宣言する。私はそれを実現するために努力し、素敵な老人になるだろう。中国が素敵になることは、将来に多くの公民（市民）が現れ、かつてのようにただの一般市民の若者ではなく、活気のある若者で、ルールを理解している若者でなければならない。そして、未来の良い中国は、素敵な老人と老太が良い中国となるだろう。現在、60歳以上の中国人は2億3千万人を超え、10年後には3億人を超えることは確実だ。つまり、60歳以上の人々の人口だけで見れば、中国の人口は単独で世界ランキングトップ5、あるいは世界第3位になる可能性もある。想像してみてほしいほど恐ろしいだろうか？&lt;/p&gt;
&lt;p&gt;私はそんなに恐れていない。 今日の皆さんは、中国の各省市直轄市の平均寿命に関するオンライン表をご覧になりましたか？上海と北京は男女を合わせて80歳を超えており、これはまさに驚異的です。平均寿命は男性に有利であり、それは女性が大きな不利な立場にあることを意味します。つまり、私が10年後に60歳になっても、この世界で第三国度（＝海外）に住んでいることになるのです。未来を語るときには、女性が55歳で80歳まで働き、男性が60歳で80歳まで働くという状況を想像してみてください。ただ广场舞（広場ダンス）を踊っているだけでは意味がないのです。むしろ、今日の广场舞を踊るお Sisters（姉妹）と Brothers（兄弟）は、時代から与えられた文化習慣や娯楽の形であると言えます。&lt;/p&gt;
&lt;h2 id=&#34;転写-3&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;20年後、次世代の人々はまだ多くの人が广场舞を踊っているかもしれないが、大幅に減るだろう。なぜなら、次世代の人々にとって集団活動への積極的な参加はもうないからだ。例えば、高齢者がツアーに参加して旅行するのと同じように、現代の若者はますます自由行や自力旅行をするようになり、将来も广场舞は存在するかもしれないが、その範囲は縮小していくだろう。これは良いことにも悪いことにもなりうるものではなく、時代が再編されるだけだ。私が60歳の時、最も若いチームの一員だった。私はどのような人物になるべきか？ 中国画では60歳になると耳が順応するという。私はあの頃絶対に喜んでいないし、不快に感じることもあるだろう。さらに重要なのは、若者には何をすべきかを考えることだ！ 良いことをするために何をするべきか？ 怠惰せず、簡単に妥協しないこと、反対すべきところは反対すること、若者が自分の利益を傷つける可能性がある場合、あなたは若者の前に立ってそれを防ぐことができるか？ 今、私は頻繁に鏡を見ています。私の親友である陶伟がすでに亡くなっています。彼はいつも私たち家で集まり、私に一度真実を語ってくれました。私たちは皆で悲しみました。陳老とそのグループは、すべてを家に集めていました。あなたは彼らに箱を開けて30個床の下に隠すようなことを言うのか？ あなたは彼に伝えなければなりません。この服は500多で購入しました。そして、生活費のために使われました。毎日お香を焚いています。だからこそ、私たちの世代は自分の親と知恵や勇気で戦う習慣を身につけています。700多で購入した服にはいくらになるでしょうか？&lt;/p&gt;
&lt;h2 id=&#34;転写-4&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;220。しかし、トラブルが起きやすい。陶偉は一度、彼の父親のために400以上を払ってTシャツを買ったことがある。そのTシャツは本当に良かった、いくらだった？99行目のものを着た。次の日には惨事だった。夜帰ってきたとき、陶偉に400元をかけてもらった写真を見て褒められた。私にまた4枚買い直してもらい、その後、張さんと李大爷たちはそのTシャツをすべて気に入った。後に、このような嘘をつくリスクは非常に大きいと言われた。将来、あなたのような老人にはそのようなことをしてはいけない。具体的な人物については言及しないが、病院の骨科で高齢者が骨折した原因は、市場で購入した靴を履いていたことが重要だった。もちろん、これは私が話しているのは物質的な側面だけであり、老いても精神生活や好奇心を持ち続け、若者のためにもっともらしいことを言って、風雨をしのぐことなど、一日を楽しく過ごすことが大切だ。&lt;/p&gt;
&lt;p&gt;60歳になる自分を心待ちに、その瞬間が素晴らしい時間の始まりだと感じている。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>私は18歳で、あなた方とは少し違うかもしれません。</title>
        <link>https://ttf248.life/ja/p/my-18th-might-be-different/</link>
        <pubDate>Sat, 15 Feb 2020 11:19:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/my-18th-might-be-different/</guid>
        <description>&lt;p&gt;非常に一般的な言葉である「情報断片化」。高校卒業以来、小説を読む時間を疎かにして以来、じっくり静かに一冊の本を読もうと思っていないのが長い。時々振り返ってみると、仕事をしてきた年月を感じて、自分が毎年何をしたのか覚えていられるだろうか？　多くの場合は、半年が終わる頃には、前半の出来事を忘れてしまっている。ブログを書くことは良い習慣であり、私が書くことがいつもしも世間立ての良いものではなく、何の関係もない。本来は自分自身に向けて書いているのだから。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;私にとって最も忠実な読者は私自身だ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;Youku Searchでお願いします。以降、リンクは提供されません。&lt;/p&gt;
&lt;h2 id=&#34;転写&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;それぞれの18歳は、期待と問いかけの眼差しのようなものであり、誰しもが時折、自分の18歳の頃を振り返り、「あの頃自分が生きていた姿と変わらないだろうか」と自問することになる！　私自身も、今の誰もが数えきれないほどの友人関係を持ち、友達がいなくて毎日チャットばかりしているし、心を開く相手がいない。知識は無限に溢れているけれど、それは智慧とは程遠いものだ。誰しも自分の18歳の頃を思い出し、「人を騙すのは簡単だが、自分自身を騙すのは難しい」と自問すべきだと思う。&lt;/p&gt;
&lt;p&gt;私は思う、それぞれの18歳は、期待と問いかけの眼差しのようなものである。他人を騙せるかもしれないけれど、自分の18歳の姿を騙せない。今の自分が、18歳の頃に目指していた姿だろうか？　まあ良いかな、と感じている。 今日の物質的な名声や、それに及ぶ多くのものの方が、私が18歳だった頃に想像する以上に得られ、そして、一方で常に道を歩き続けている。私が18歳の頃、放送学院でジャーナリズムを学んでいた。私はファラキーが最高のジャーナリストになることを夢見ていた。今もなお、その道を歩んでいる。それが多くの人が白老師に対して言う。「あなたはなぜCCTVに残っているのですか？」それは、私が最高のジャーナリストになりたいと思っていたからだ。ニュースは変わらない。これは私の18歳の視点であり、だからこそ、私は皆が時々自分の18歳の頃を思い出し、「あなたは当初自分自身が生きるために決めた姿と変わっていないですか？」と自問自答する必要があると思う。&lt;/p&gt;
&lt;h2 id=&#34;転写-1&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;これは誰にも騙せない。これが18歳の私だ。一 glance すると過ぎ去ってしまった32年。北京に来て大学に入る人なら誰でも、この一枚の写真を持っている。あの時代、天門広場に皺くちゃのスーツを着て、校章を胸につけ、それがなぜなら、その当時大学生は少なくて、校章を持っていなかったから、とても誇らしかった。髪は長く、18歳の私を気に入っていた。何年も経って、私は突然、18歳が直面していたものに感謝していることに気づいた。それは静かに、私の形作ったからだ。1986年5月8日、王府井書店で朦胧詩選を購入した。その年に国体（中国国家体育館）で崔健の「無所有」を聴き、今になって突然気づいたのが、私の文字スタイルが最も影響を受けたことだ。それは性格もまた、朦胧詩、ロック、古龍の武侠小説の影響を受けている。&lt;/p&gt;
&lt;p&gt;18歳になったら、どんな経験をした？ あなたができるのは、限られた選択肢を携えてくるだけです。特に、今日の18歳世代が何に直面しているのかを知りたいと思っています。まるで刀で木を切り刻むように、急激に変化していくのでしょうか？しかし、彼らはどんな道具を使っているのでしょうか？そして、自分自身をどんな形に変えているのでしょうか？今の誰もが数え切れないほどのSNSを持っているのに、本当の友人関係がないまま毎日チャットしているし、心を開く相手が見つからない。知識は無限にあるけれど、智慧に繋がるのだろうか？何が分からないのか全く分からず、まるで皆個性があるように見せかけているけれど…これはどうすればいいのでしょうか？18歳に何をさせるべきなのでしょうか？私は1986年を好意的に見るのです。なぜなら、1986年は1966年の問題を解決する最良の方法だからです。&lt;/p&gt;
&lt;h2 id=&#34;転写-2&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;1966年の文化大革命は、76年間の打倒により四人組を終結させたが、それは偶然によるものであり、1986年に起こった啓蒙と人間の目覚め、そして個人の成長によってのみ、あなたが懸念する基盤を本当に削ることができる。私はまだ啓蒙を経験し続けなければならず、人間の本質に対する深い理解をさらに深める必要があると考えている。中国社会が経済的にどれほど進歩や変化を遂げても、人間の本質を理解するという瞬間を補わなければ、人間の本質を制御し、悪の部分を活性化し、善の部分を引き出すことはなく、未来には依然として多くの懸念があるだろう。だから私の18歳も、この時代の18歳であり、行き過ぎてしまった。当初の出発点である理由を忘れないでほしい。今では「初心」という4つの言葉に凝縮されている。 ですから、どこまで行っても、誰でも自分の18歳の頃に問いかけてみたらいいと思います。だから18歳の写真を撮っておくのは良いですし、よく取り出して自分自身に聞いてみるのです。「他の人は何を言っているんだろう？」というのは無駄です。人を騙すのは簡単なのに、自分自身を騙すのは難しいんです。私が今、18歳の時に20歳の人に言うことを話すとすれば、「あなたは常に自分の18歳の頃の目をあなたを見ているようにしてください。」そして、20代にも言いました。「たくさんのドアを開けて試してみてください。どれが自分に合っているかわかりません。どのドアの向こうには？今の中国では、20代の高齢者を見て、70代の若者がたくさんいます。」
ありがとうございました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>この社会にはどのようなジャーナリストが必要でしょうか。</title>
        <link>https://ttf248.life/ja/p/what-kind-of-journalists-does-society-need/</link>
        <pubDate>Sat, 15 Feb 2020 11:08:38 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/what-kind-of-journalists-does-society-need/</guid>
        <description>&lt;p&gt;記者の職業に対する筆者の見解を述べ、記者には社会の良心、知識、そして長距離走のような粘り強さが必要だと強調している。また、50歳の時の自身の洞察も共有し、好奇心の維持、物質と精神のバランス、そして未来への考察について語っている。&lt;/p&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;Youku Searchでお願いします。以降、リンクは提供されません。&lt;/p&gt;
&lt;h2 id=&#34;転写&#34;&gt;転写
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最好的记者首先要有社会良心，其次要有知识储备，第三是持久力。我不能只跑100米觉得不够瘾了，就跑了。我认为这三者结合，人们期待的是疫苗安全的问题彻底解决掉，就像当初的奶粉事件一样，总是先出了问题、再解决问题，彻底解决问题的这种逻辑循环中前进。否则记者要干什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;稿件&#34;&gt;稿件
&lt;/h2&gt;&lt;p&gt;社会良心是记者最好的前提，其次是知识储备，最后是持久耐力，虽然我跑不了100米也无妨。我认为这三者结合，我今年50岁，你就能明白我好像适合从事新闻工作。我与中国的改革开放40年紧密相连，30岁生日时，站在松花江畔的那一天，40岁时，2008年的生日是在奥运直播期间度过的，又在奥运直播中度过。今年50岁，全国都在纪念改革开放40周年，所以确实有一个对应关系，如果说“大时代”40岁，中国的改革开放40年究竟是处于不惑还是困惑呢？ 40年もの間、中国が物質面で皆に十分なものを与え、国家にも十分なものを与えてきたと思う。しかし、不安や混乱は増え続け、減らない。強大になった、豊かなから全てOKだと思っていたら、物質だけではただの底打ちなことだと気づいた。物質的に貧困を脱却することは容易だが、精神的に豊かになり、真に大国となるのは難しい。アメリカはすでにあなたの高科技を攻めている。私たちは人々の農産物を攻めるべきだ。この世界には「二番煎じは成り立ちにくい」という言葉がある。アメリカでは修理した2台の数はいくつになるのか？したがって、我々は長い年月を経て、この二ではないものを超えるものへと変えていく必要がある。私は全てを得られるわけではない。&lt;/p&gt;
&lt;h2 id=&#34;転写-1&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;私は25歳でテレビを始めた際、人物インタビューからスタートし、数百年から数千もの様々な光環を持つ人物に触れることができました。当時は若かりしかつてはこれらの光環が彼女たちにとって幸せをもたらすと信じていましたが、実際に近づいてみると、そうではありませんでした。むしろ、光環と彼女たちの幸福とは逆の相関関係にあることもありました。先日、郭沫若の最後の29年を読み終えました。郭沫若氏はほぼ常に困難な状況に置かれ、国务院副副总理（国务院の副副官）、政协副主席、副委員長など高位の役職に就きましたが、自分の息子二人が一人自殺し、もう一人は屋上から投げ落とされて死亡するという悲劇に見舞われました。彼は幸せだったのでしょうか？&lt;/p&gt;
&lt;p&gt;幸福をどのように測るのですか？ 67歳になったとき、連続して二人の息子が数年で亡くなります。それでも彼女は幸せだったのでしょうか？ 多くの名画を鑑賞することで幸福になり、安全な日々を送ることができればそれで十分です。結局、人は誰かを読めば読むほど、自分自身を理解できる鏡になるのです。少し重点を置いて言えば、今の私たちの多くが抱える不安は、欲張りすぎること、そして本を読む量が少ないことに起因していると思います。これは楊绛老人が若い人に答えた言葉で、本を読まずして快楽を求め、スマートフォンで解決策を探し求めるのは不可能でしょう。私は、本という笨笨（べんべん - 笨拙、不器用）なプロセスを通じて賢さを学んだのです。減量は、本を読む量が増えることで生まれた減量なのです。&lt;/p&gt;
&lt;h2 id=&#34;稿件-1&#34;&gt;稿件
&lt;/h2&gt;&lt;p&gt;だからこそ、皆に頼ることはできないが、比例として増えていくことを願っている。より多くの中国人たちが読書を通して自分自身を向上させることができるようになることこそが最も重要だ。誰もが地面に座って空を見上げ、全てを理解しようとすることはない。私もそうではない。しかし、私は鏡を見てみることができる。数年前、BBCのニュースキャスターが北京に来て、BBCで最も優れたニュースキャスターだと称賛されていた。その後、国際飯店で中国のニュースキャスターとその対談を組織し、私達二人が対話した。その男は対話中に私に質問をした。「あなたはBBCがCCTVから何を学ぶべきだと思いますか？」まず冗談を言って、「もちろん、まず中国語を学ばなければならないだろう」と答えた。そして冗談を言い終えてから、「BBCが最も学ぶべきことは、この世界に対する好奇心だ」と言った。「私たちは近年急速に世界へと進んでいるではないか。」 以下为日语翻译：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;さまざまな報道ステーション、現在すでに70以上の報道ステーションを抱えており、学生が海外の新しいものを見ると、非常に好奇心を持つことについて感じています。私たちは大きな好奇心を持って世界を観察していますが、BBCは英国自体を世界と見なしています。お兄さんがテーブルを叩き、「ご指摘の通りです。私たちが不足しているのはこのことです」と言うので、まさにその通りです。&lt;/li&gt;
&lt;li&gt;2007年に日本で彼に会った作家が私にこう言いました。「日本の国は希望がない以外はすべてあります」。後に理解したとき、本当に深い言葉でした。別の角度から見ると、10年前には中国を「希望しかなく、他のものは欠けている」と感じていましたが、希望だけはありました。誰もが前方に進むことを感じていました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;転写-2&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;しかし、いつか私たちが希望をすべて持っている富裕国になってしまうのではないかと心配しています。率直に言って、中国が一日負の数になることを非常に懸念しています。すべてを持っていると錯覚し、結局は自分が本当に貧しいと感じてしまうこと。私が50歳になったとき、すべての物質的な条件を満たしてもなお非常に貧しい人になってしまうのではないかと恐れています。私たちの現実では、高学歴でありながら文化に疎い人が多く、口座には無数の数字の貧しい人々がたくさんいます。これがまさにこの時代の問題です。真に貧しいことは恐れられません。なぜなら、前には進むべき道があるからです。これが私が徳赤字と人性的欠陥の原因であると考える理由です。だからこそ、科学者が多くのものを発明したのは、最初から偉大な使命を担っていたわけではなく、好奇心だと私は考えています。&lt;/p&gt;
&lt;p&gt;彼を弄り出せるだろうか？ だから、私は常に50歳くらいになった頃から自分を奮起させようと努力していて、とても嬉しいんです。 今一番悩んでいることの一つが「継続」です。 刚才お話していたように、「あなたはまだ続けているんですね」と言って、「絶対に続ければ死には遠く及ばない」と申し上げました。 過去には「坚持就是胜利（坚持即成功）」と言われていましたが、中国サッカーは「坚持黑色三分钟（坚持就是咬牙）」、「坚持就咬牙了（坚持就咬牙了）」… 方法や面白さがない時に「坚持（坚持）」に頼ることが多くて、それはそれで意味がある時もありますが、ほとんどの場合、両面性を持っているはずです。 例えば、誰かと話すときなど、何かを続けることにした場合、「私はこれを最後まで終わらせる」と決めて、今、私の時間はすでに過ぎてしまっていますが、好奇心から、人との交流はどのようなものになるのだろうか、と考えています。&lt;/p&gt;
&lt;h2 id=&#34;転写-3&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;自分に小さなキーワードを与えて、人々とインタラクティブにチャットするのですね。50歳になっても、大きな好奇心を持ち続けられるなら問題ないと思います。私は色んな面白いもの全てが好きですが、必ずしも今の流行りのものとは限りません。今日のトレンドはすぐに過去のものになるかもしれません。毎年、流行語がありますよね。今日のインターネット上のあるメディアが10年後に伝統的なメディアが考えていたことではないでしょうか？ 結局のところ、面白いものは常にその面白さの中にあります。皆さんの好きなものを尊重しますが、長期的に見ると、中国人が一番好きなのはマージャンのようなものだと気づくでしょう。あなたがファストフードを好むなら、本格的な料理を提供するレストランは自然と衰退していくでしょう。&lt;/p&gt;
&lt;p&gt;多くのことは、単なる感慨にふけるだけでは済みません。あなたは毎日、スマホで断片化された情報をどれくらい読んでいるのでしょうか？ 長めの読書はどれくらいありますか？しかし、これはプロセスであり、スマートフォンが私たちの手錠になっているのです。だからこそ、短いものを見るのが増え、人は徐々に短視になってしまうと感じます。でも、これもまたプロセスであり、私は決してコンテンツ至上主義を心配しません。必ず戻ってきます。あなたは毎日娯楽に溺れ死するまで、40歳になるまで、ずっとその状態を維持するでしょう。私が10代の子供がコーラを飲むのを見ると、少なめにするように言うのですが、彼はきっと飲み続けるでしょう。しかし一方で、私は楽観的です。40歳になったときには、必ず茶の世界に戻ってくるはずです。これが中国人の人生なのですから。&lt;/p&gt;
&lt;p&gt;それは正常なことですが、今後の変化はもう少し早く進むことを願っています。私たちはただ感慨を表明するだけです。今の調査報道記者が減っているのは、読まなくなってしまったからです。&lt;/p&gt;
&lt;p&gt;ありがとうございました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>20年後の中国サッカーはどうなるでしょうか？</title>
        <link>https://ttf248.life/ja/p/china-football-in-20-years/</link>
        <pubDate>Sat, 15 Feb 2020 10:59:32 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/china-football-in-20-years/</guid>
        <description>&lt;p&gt;以下是翻译后的日语文本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;読後感の補足は、ほとんどが2021年に随筆したものであり、白岩松先生の講演稿を文字に起こす作業は、ちょうどコロナ禍が始まった頃でした。二十年後のことや、一年後、二 χρόνια後のことなど、世界の変化は常に人々の予想を上回ります。現在、国内のコロナ禍は終息しつつありますが、海外の疫情は依然として騒がしいです。サッカーについては、数年前から中国代表が比較的良いプレーを見せており、コーチも積極的に攻撃を許すようになりました。かつての懵懂期に比べると、おじいさんに一緒に観戦するのも悪くない経験でした。ある国家代表の試合でさえ、老人がチャンネルを変えようとしないのは、どのような体験なのでしょうか？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;Youku Search でお願いします。以降、リンクは提供されません。&lt;/p&gt;
&lt;h2 id=&#34;転写&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;中国サッカーにまだ興味がありますか？興味があります、非常に興味があるし、他に改善できることは何でしょうか？だからこそ、中国サッカーが良くない理由はたくさんあり、そのうちの一つは、誰かがボールを落として自分のところに戻すのが怖くて、それを他の人にパスして、結局自分は諦めてしまうというスタイルです。&lt;/p&gt;
&lt;p&gt;もちろん、これはほんの一部だけであり、20年のサッカー、20年後の中国サッカーはまるで遠い未来のようで、最初の拡大は48チームに変わりましたが、中国が参加する可能性と参加しない可能性は両方あります。ある国の代表チームにとって最適な年齢は26～30歳ですが、20年後には今日から6歳から10歳の子供たちになります。20年後に楽観的に考えるのは良いのですが、20年後は必ず成功すると確信するのは早すぎます。私が言及する今日から6～10歳の子供たちは、すぐに深刻な表情をします。因果関係、種を植えるなら豆が育つように、私たちは今日何を育てていますか？今日、リーグでプレーする代表選手になる可能性のある大豆をほぼ確実に育てているのでしょうか？ 誰がこの動きに出れば、退場する準備をしなければならないのは、これは法則に反しているからだ。だから私はそれほど深く考えなかった。&lt;/p&gt;
&lt;p&gt;しかし、本当に考えるべきは今日6～10歳の子供たちがサッカーをしているかということだ。あなたは20年後の中国のサッカーがどうなっているかを想像できるだろうか？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>倫理的欠如、人性的喪失</title>
        <link>https://ttf248.life/ja/p/moral-deficit-humanity-loss/</link>
        <pubDate>Sat, 15 Feb 2020 01:20:34 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/moral-deficit-humanity-loss/</guid>
        <description>&lt;p&gt;まず、何かをすることにおいては、心無きなく、正直であることが不可欠です。そうすれば、安心して眠りにつけるし、些細な病気や根本的な問題で悩むこともありません。できる限り誤りを避けるべきです。もし間違いを犯してしまったとしても、それを隠蔽したり、忘れるように努力するのではなく、積極的に解決に導くべきです。人間は、記憶を消すことに長けている種でもあります。心安であることは、帰る場所であり、自分自身への問いに答えられることによって、より穏やかに生きることができます。&lt;/p&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://v.youku.com/v_show/id_XNDI5MzA4NjQ4NA==.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;動画の元のリンクはこちらをクリック&lt;/a&gt; 、著作権侵害の場合は、ご連絡の上削除してください。この文書は単なる文字起こし翻訳のみを目的としています。&lt;/p&gt;
&lt;h2 id=&#34;稿&#34;&gt;稿
&lt;/h2&gt;&lt;p&gt;私には八つの重い言葉があります。私たちは今、道徳的な欠陥を抱え、人間の本性が損なわれ、時代が問題が発生したとき、問題を解決し、完全に解決するという論理的なサイクルの中で前進していると感じています。あなたは忍耐を持って、その洗い換え（整理・刷新）を待つ必要があります。中国のような国にとって、多くのことはゆっくりとした洗い換えのプロセスであり、だから悲観せず、変化を受け入れ、洗い換えに備えましょう。&lt;/p&gt;
&lt;p&gt;最近、中国は二つの台風と戦っています。一つは形のない台風で、もう一つは形のある台風です。形のない台風はワクチンであり、それは私たちの内なる安全の堤防を打ち砕きます。形のある台風は、上海からの登陆がまれで、北京や天津が被害を受けることはほとんどありません。3つの直轄市が共同で対峙してきた台風は、数十年に一度しか起こりません。 これは逸話です。次にあなたが考えるべきことは、あなた自身の善のために考え、あなたは大きく変化し、多くの答えを持つことになり、周囲の環境が変わらないなら幸せになるでしょうか？ 私は8つの言葉で言うのは重いと思います。今私たちは道徳的な欠乏と人性的欠損であり、これが現在の最大の欠乏と最大の欠損です。&lt;/p&gt;
&lt;h2 id=&#34;転写&#34;&gt;転写
&lt;/h2&gt;&lt;p&gt;しかし人々が期待するのは、ワクチンの安全性に関する問題が完全に解決されることだ。これは当初の粉ミルク事件のようなものであり、時には過去を振り返り、米国の食品医薬品局（FDA）の設立と形成における包括的な法律や、当初の粉ミルク・乳製品の不安全との密接な関連性を理解する必要がある。そのため三鹿粉ミルク事件は中国の乳製品分野に大きな変革を迫らせた。ワクチンに関しては、次々と問題が解決されることを期待するが、今回はそれが終息につながることを願う。つまり、時代は常に問題が発生し、それを解決し、完全に解決していくという論理的なサイクルの中で前進していくものでなければならない。そうでなければジャーナリストは何をするのか？ 市民は何をするのか？&lt;/p&gt;
&lt;p&gt;だから私は、私たち一人ひとりができることは関心を持つことだと考える。しかし問題は、中国の人々が忘れやすいということだ。 まるで私が言ったように、相手の車をぶつけてから逃げた。路端に足を投げ出して走り去り、何人にも止められなかった。私たちの隣人、同僚には、こういう人たちがかなり多い。だからこそ、少しずつ変わっていくべきだ。そして私のような普通の市民ができることは、彼らに気を配ること、忘れずにいること。理想を語ることに意味はないと思う。腹が減っては理想も語れない、寒ければ理想も語れない時に、毎日理想を語っているのは無意味だ。しかし、彼らが満たされ、暖かくなったとき、中国が世界で一番糖尿病患者が多い国、高血圧患者が多い国など、様々な「一番」の国になってしまう。すると、中国人たちが走り始める、ダイエットをするようになる。そこで席に座っている皆さん女性の中で、誰にも経験したことのない人がいないだろうか。一食食べられないから、なかなか痩せられないという残酷な経験をされた人はいるだろう。それが小さな変化だ。&lt;/p&gt;
&lt;h2 id=&#34;稿-1&#34;&gt;稿
&lt;/h2&gt;&lt;p&gt;私たちが話している精神的な側面も、同じ理合いです。食事と衣を十分に満たした後に、走り始めたり、ダイエットを始めたりするとき、徐々に精神的な欲求も増えていきます。例えば、以前は喫煙していましたが、ランニングを始めた後、まるで何かのきっかけで20日以上タバコを吸っていませんでした。その後も吸うことはありませんでした。もちろん、私は「完全にやめる」と意図的に言っているわけではありません。それはあまりにも形式的すぎると感じていますし、一年を通して2～3本喫煙することもあるかもしれません。生活習慣が変わるにつれて、多くのものがそれに伴って変化します。特に中国人の場合、変化を待つための忍耐が必要です。&lt;/p&gt;
&lt;p&gt;ますます多くの人が、自分自身を不幸だと感じて、それを許せないと感じています。 「うつ病の増加は事実ですが、一方で、ますます多くの人が積極的に生きる方法を模索しているのも確かです。その時、精神的な側面が豊かになり、悲観的にならず、同じ出来事をどう捉えるかで変わってくるのです。例えば、街中で車道で割り込まれると落ち込むのですが、隣を見ると長蛇の列になっているのを見て、状況が変わったことに喜びを感じる。このように、皆様方が雨上がりの夜に、こんな無駄な話でも楽しんでいるのも、素晴らしいことではないでしょうか？」&lt;/p&gt;
&lt;h2 id=&#34;稿-2&#34;&gt;稿
&lt;/h2&gt;&lt;p&gt;これは変化そのものであり、そのためには多くのものを別の考え方で捉える必要があります。もちろん、将来的に成長すべき点はたくさんあると考えています。例えば、起業について言えば、誰が一生起業家であるというわけではありません。すべての人々が起業家であり続けるわけでもなく、私たちは現在、起業に過度な時代的な要素を与えてしまっていますが、実際には起業は常に存在してきました。蘇軾は起業家ではありませんか？李白は起業家ではありませんか？人生の中で多くの革新を行い、最終的に独自のブランドを確立することは重要ではなく、生き方そのものが十分に豊かで、価値があると感じることが大切です。今の私自身としては、中国が特に不足しているのは、良い失敗という価値観であると考えています。中国人たちは成功の結果だけを受け入れますが、別の良い失敗は成功であり、それを拒否します。 それは非常に難しいと思いますので、中国のサッカーがうまくいかない原因の一つは、誰でもボールを失うことを恐れて、自分から相手にパスしてしまいそうになる点にあるのではないでしょうか。そのような駆け引きがないと、もちろんこれはほんの一つの要因に過ぎませんが、中国サッカーは発展しにくいのだと思います。私のような年齢になると、30歳で序論を書くことの難しさや、50歳になって少し焦ってしまうのは、時間の流れが速すぎるからです。期待していたことが実現しないまま時間が過ぎてしまうのです。しかし一方で、中国のような国においては、多くのことがゆっくりと変化していくプロセスであることも理解しています。親を見ていると、ある親はまるで赤信号も緑信号も意味を持たないように見えますが、時折子供が父親を引っ張っているのを目にします。それは変わり、洗練されていくのですから、根気強く待ちたいと思います。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>時間の経過についてですが、答えを見つけるには多くの本を読む必要があります。</title>
        <link>https://ttf248.life/ja/p/about-time-and-books/</link>
        <pubDate>Fri, 14 Feb 2020 07:27:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/about-time-and-books/</guid>
        <description>&lt;p&gt;国家全体として、より良い方向へ、より豊かになっていく傾向があり、個人の虚栄心もそれを支える強さを持つべきだ。1990年代から現在にかけて私が接してきた家庭においては、人々の生活は以前と比較して格段に向上しており、同時に富裕層も増加している。市場経済の発展に伴い、避けて通れない貧富の差拡大も生じている。&lt;/p&gt;
&lt;p&gt;人々が言う「階級固化」「上昇通道が閉ざされる」といった状況は、現在の世界の共通問題であり、我党が人民の基本的な福祉待遇や社会保障において果たした貢献は、皆が認識すべきである。 生活会越来越好，你不想买房，可以租房子；孩子们上学也存在教育资源分配不均的问题，有时候需要做出取舍，你是想要更好的工作机会、更舒适的工作环境，还是更多的时间陪伴家人，不要把自己的想法强加在别人身上，包括你的孩子、家人。坐下来好好谈一谈，生活总归会越来越好的。&lt;/p&gt;
&lt;h2 id=&#34;動画トランスクリプト&#34;&gt;動画トランスクリプト
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://v.youku.com/v_show/id_XNDI5MzA4NjcyNA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;動画の元のリンクはこちらをクリック&lt;/a&gt; 、著作権侵害の場合は、ご連絡の上削除してください。この文章は単なる文字起こし翻訳のみを目的としています。&lt;/p&gt;
&lt;h2 id=&#34;三十歳&#34;&gt;三十歳
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/about-time-and-books/30%E5%B2%81.jpg&#34;
	width=&#34;896&#34;
	height=&#34;503&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;30歳&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;今年、私 כבר 50 歳になりました。過去は、そう思っていたのですが、「これは老頭だ」と。今になってようやく気づきました。これが30歳の時の自分です。30歳的時候は、自分が若く、とても素敵だと感じていましたが、50歳になって振り返ると、案外良いものだったりします。30歳最大的人生感受是什么？振り返って考える。私は減法だと感じています。キーワードは「減」です。ある意味、「痛並びに快乐着」も一種の減法であり、多くのことを経験して書き残し、新しい空白の紙に、あるいは走り出すことにします。しかし私にとって30歳は、自分自身だけでなく、皆さんにしても、減法をすることは非常に重要だと感じています。 私は現在、聯大（東京大学）に荷物を運んでいる学生で、彼らに頻繁に思い出させています。「30歳になる前に命を燃やすなら足し算をしなさい」「試してみなさい。自分には何があるか分からないし、運命がどんなチャンスを与えるかは分からない」。だから「どうする？」じゃなくて、ある人は20代で必死に頑張っているけど、足し算ばかりしていて、いつまで経っても引き算を忘れていない人がいる。30歳くらいは人生において非常に重要な時期で、色々な足し算と四方八方に走り回ってしまった後に、一度引き算をするべき時なんだ。遅れれば取り戻せないからな。
8本のロープがあなたを引き留めている。どれだけ走れる？お互いに牽制し合うかもしれない。
&lt;a class=&#34;link&#34; href=&#34;%e5%bb%89%e4%bb%b7.jpg&#34; &gt;安物の画像&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三十歳-1&#34;&gt;三十歳
&lt;/h2&gt;&lt;p&gt;30歳になった頃には、私が破格で昇進していた。学術界では教授、ジャーナリストとしてはシニア記者の肩書きだった。29歳の時に破格で昇進し、現在のような状況は稀になっていたが、その頃から大きな混乱を感じ始めた。2000年のシドニーオリンピック制作時には、拍手も多かったものの、私は突然何かがおかしいと感じた。「結局、自分は何をすべきなのか？」「何を捨てていくべきなのか？」そんな問いかけが頭に浮かんだ。その年に私が行った最も重要な減法は、自分の番組を休止することだった。1年間、海外に出ることもなく、何もせずに過ごした。周囲からは「司会者は、月に一度の出演でも、半年間出演しなければ誰も覚えてもらえない」という言葉を耳にした。「私の顔は本当に価値があるんだな」と反論した。その年、新しい番組の開発に着手することになった。 これは、仕事が一段落して痛快に過ごしたあと、01年にまる一日休んだということから始まります。今日に至るすべての道は、あの頃の「減法」を振り返ることです。当時私は色々なことができると思っていました。スポーツやE（おそらく英語学習）など、色々な楽しいこと、制作人などをやっていましたが、「できない」と気づき、結局ニュースに絞っていました。当時は3つの番組の制作人をしておりましたが、一夜にして全て辞めてしまい、それが今の私になった理由です。私は純粋になりました。先日同僚と話している時に、30代になって最初に取った非常に重要な決断について言及し、「ニュース一本だけやる」という深い井戸を掘り続けたことを伝えました。多くのポジションで副主任にまで昇進する可能性もありましたが、それを拒否し、普通の生活に戻りました。&lt;/p&gt;
&lt;h2 id=&#34;三十岁&#34;&gt;三十岁
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/about-time-and-books/%E6%9C%AC%E7%A7%91%E7%94%9F.jpg&#34;
	width=&#34;896&#34;
	height=&#34;502&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;本科生&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;428px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;これまでのところ、私は中央电视台の連鎖級幹部であり、決して絶対的な学部卒業者ではありません。あなた方は私たちの体制を理解していますが、私はそれを拒否しました。ただ、一人の学部卒業者がどれだけ進むことができるのかを見てみたいし、一人の学部の学位がなぜ常に向上し続け、研究生を指導することができるのか疑問に思いました。ええと、今では研究生を11人指導しており、これは減算の結果です。もちろん、これは過去を振り返る感情だと思います。若い頃は特に、奔波の中で何を感じているのかを知らず、すべてを手に入れるべきだと考え、何か一つでも欠けていることや問題があれば心に不快感を抱いていました。 皆様、ぜひ「減法」も学んでください。つまり、28歳、30歳に近づいた頃に、1996年のオリンピックを見て、私はこんな言葉を思いつきました。「&lt;strong&gt;欠点は完璧の重要な一部であり、この世界には完璧なものは存在しない&lt;/strong&gt;」。曾国藩の長編小説の中にも、人生における最高の境地について書かれています。曾国藩は自分の書斎に「求闕亭（きゅうけついん）」と名付けようと考えましたが、花が完全に咲く前こそが最適だと考えました。月も完全に満ちる前こそが最適です。しかし、一般の人々にとっては、これは欠点のように感じられ、「完璧で最高に達することはできない」と感じ、人の人生を最も破壊する道は、彼らが完璧を求め、極致を目指すようにさせることなのです。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;%e8%8a%b1%e3%81%8c%e5%85%a8%e9%96%8b%e3%81%ab%e3%81%aa%e3%81%a3%e3%81%a6%e3%81%84%e3%81%aa%e3%81%84.jpg&#34; &gt;花が全開になっていない&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三十歳-2&#34;&gt;三十歳
&lt;/h2&gt;&lt;p&gt;この世界はそうじゃない。花が完全に咲き誇る瞬間こそが一番素晴らしい。花が全開になると、散りたくなるほどすぐそこだ。月も完全に丸形になると、徐々に細月になるのはすぐそこだ。だからこそ、これは私にとって30歳という大切な推進力と啓示を与えてくれた年だと感じる。40歳はあの頃のように綺麗ではない。しかし、リラックスして、自由になっていると感じるからだ。なぜまたスーツや革の着こなしに戻らないのか？なぜまた黒白の格好ではないのか？それよりも、幸福について考えるようになったのだ。&lt;/p&gt;
&lt;h2 id=&#34;四十歳&#34;&gt;四十歳
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/about-time-and-books/40%E5%B2%81.jpg&#34;
	width=&#34;894&#34;
	height=&#34;499&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;40歳&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;中国人有一句说法是“40不惑”，30岁是减法，40岁是困惑，并非不惑。我认为在这个时代，40岁恐怕困惑的最多。我的中年危机来的还比较早，到三十六七岁的时候就开始纠结，我干的一切是否有价值？
是否有意义？我到底想要什么幸福呢？这本书就是在这样的困惑基础上诞生的。在30岁的时候你会发现你的很多幸福目标与物质挂钩的，三十而立力指的是学历得立。你必须有车有房，否则丈母娘都不会考虑把你媳妇许配给你，非常物质，但“40不惑”却很难。 私は、古代人が現代よりも平均寿命が長かったため、それが濃縮されて40歳になったと考える。そうすると惑わないだろうと思っている。私も40歳で悩んでいるのは、物質が私に幸福をもたらすと期待したからだ。同じように40歳の時に多くの人が私に「幸せですか？」と聞くのは、私の内面の混乱を象徴しているのだ。中年危機の到来は、40歳になって自分自身に多くの疑問に答えなければならないことを意味する。40歳頃には自分とよく話し、多くのものを読み、自分にとっての答えを見つける必要がある。 三十六七歳頃に『論語』の世界に入ることができて本当に良かった。私は『白说』の中で既に触れているように、40歳になってからなお考察を深める必要がある状況だ。もし周囲の環境が変わらなければ——特にソフト環境が——心穏やかに家を出て、どこへ行っても信号無視で走っている人たちや、買い物で偽物ばかり売られている状況に巻き込まれないようにすれば。&lt;/p&gt;
&lt;h2 id=&#34;四十歳-1&#34;&gt;四十歳
&lt;/h2&gt;&lt;p&gt;先日、中国が台風2つに立ち向かっていることを聞いた。一つは形のない台風で、もう一つは形のある台風だった。形のない台風とはワクチンを指しており、それは私たちの内なる安全の堤防を打ち砕くものだ。もう一つの台風は、中国では上海に上陸する台風は稀なことであり、これは本題から逸脱している。次に考えるべきことは、自分だけを良くすること、大きな変化を起こしていること、多くの答えを持っていること、そして周囲の環境が変わらない限り幸せになることができるのかということだ。&lt;strong&gt;私は八字（四字成语）で表現すると、「道德赤字人性亏损」と言えるだろう。これは現在の最大の欠陥と最大の損失である&lt;/strong&gt;。 数日前，我亲眼目睹了两个车辆相撞。虽然事故的严重程度并不大，但他确实对另一辆车造成了损害。他当时跟对方说自己准备停在路边，对方也表示会慢慢地准备停到路边。但是，前面的车辆突然加速逃离现场，也没有人上前阻止。&lt;/p&gt;
&lt;p&gt;这会是一个负责任的父亲吗？这会是一个负责任的儿子吗？更何况，他怎么可能是一个负责任的公民呢？而且他可能是您的同事，这正是道德赤字和人性亏损的表现，必然会对您产生影响。无论您自己多么强大，除非您亲眼所见，但问题是，即使不亲眼所见，也不能阻止您的孩子接种疫苗。您送外卖，那外卖也可能存在问题！&lt;/p&gt;
&lt;h2 id=&#34;四十歳-2&#34;&gt;四十歳
&lt;/h2&gt;&lt;p&gt;30歳を減量とすれば、40歳は混乱と私は50歳に私が自分自身に贈る言葉は好奇心だと考える。50歳は非常に尴尬な年齢であり、前には村がなく後にも村がない。進むなら攻めるべきで、退くなら混ざって隠れることもできる。自分が手に入れたものの上で10年間横たわり、退職するまで混ざり続けるのも可能だろう。&lt;/p&gt;
&lt;p&gt;最近、ある本を読んでいて、その中に書かれている内容が非常に興味深い。シリコンバレーで実際に成功した起業家は、56歳に偏っていると書かれていた。これは我々の概念とは異なる。中国が创业を全て若者の事業と捉えるのをいつまで続けるのか、中国がボランティアを青年ボランティアと捉えるのと同じだ。先週、中国が retiring の小学校・中学校の教師を募集する番組を作った。年間23万～30万元の給与が支給され、村で教鞭をとる。また、優秀な教師である必要がある。&lt;/p&gt;
&lt;h2 id=&#34;五十歳&#34;&gt;五十歳
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/about-time-and-books/50%E5%B2%81.jpg&#34;
	width=&#34;899&#34;
	height=&#34;506&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;50歳&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;50歳の人にとって、最も重要なことは2つの課題である点です。1つ目は自分自身であり、まだ多くのことに好奇心があるか、人生観はどのように形成されているかです。私自身の50歳の最大の収穫、あるいは今私が生きる方法として、&lt;strong&gt;私は毎日を大切にし、20歳の頃のように未来に囚われることもなく、過去を悔やむこともありません。むしろ、今日という日を最大限に活かすように努めています。50歳の人には、常に「明日になったら」とか「昔は良かった」と考えるのではなく、今この瞬間を大切にするべきです。」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;蔡琴の歌唱集を聞いてみたい気持ちもわかります。蔡琴が言った言葉にも名残惜しいものがあります。「写真を見るたびに、2年前の自分の方が若くて綺麗だと思ってしまう。でも、その2年前の一日には、自分が綺麗だと思っていたことはなかった。この言葉は本当に味がある。」 30歳になった頃には全く思っていなかったけれど、あの頃は自分は挺しててかっこいいと思っていたんだ。自分の欠点だらけだと思ってたけど、今日、20年経って振り返ってみると、やっぱり若いことになるとは思わなかった。&lt;/p&gt;
&lt;p&gt;だって、私も若かったんだから。髪の毛もたくさんあったしね。だから、君の今のことを大切にしてほしい。そして、2年後にまた見直す時には、君が今の姿で一番良いと思うよ。&lt;/p&gt;
&lt;h2 id=&#34;五十歳-1&#34;&gt;五十歳
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;史铁生说过的那番话，当我的腿刚不能走路的时候，我坐在轮椅上天天怀念我能奔跑打篮球的时光，每天在怀念中都非常痛苦。
又隔了几年，我在轮椅上生了褥疮，浑身难受，那个时候天天怀念，几年前我什么都不疼，安静的能坐在轮椅上的时光。
又隔了一些年，我得了尿毒症，我总要去透析，这个时候我就怀念当初仅仅有褥疮的轮椅时光，那50岁如果再活不到善待每一个今天的地步，前面的50年白过了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;五十歳-2&#34;&gt;五十歳
&lt;/h2&gt;&lt;p&gt;実は、50歳になってからこの道理を理解するのではなく、30代、40代で理解するのが良いと思います。すべてのものは、容易に過ぎ去ってしまいがちだからです。旅の一度の食事も、食べなければすれば、30年後に食べるには遅すぎますし、味も変わってしまうかもしれません。ですから、今日という日を大切にする気持ちは、私が50歳になった時の最初の発見だと感じています。&lt;/p&gt;
&lt;p&gt;そして二つ目は好奇心です。私は、多くのことに好奇心を失うことができなくなったことに気づきました。なぜなら、多くのことを見て、経験してきたからです。しかし、私は自分自身に好奇心を刺激するよう促しています。だから、今や私たちがやることはすべて、好奇心を持って行います。例えば、携帯電話を立てて写真を撮ってもいいし、現場で取材したり、荘厳で大きな会議に参加したりしても、よりスムーズに接続できる方法を探したり、より面白くて記憶に残るような工夫を凝らしたり、新メディアを使って広報活動を行ったりすることもできます。 好奇心は、人類の進歩を促す最も重要な動機の一つだと私は考えています。なぜそれが個々の成長を促す上で最も重要な動機とならないことができるのでしょうか。ある民族が好奇心を失うと、その民族は衰退します。さらに大きな視点で見ると、50歳というのは重要な試練です。40代後半から50代の頃に、中国でどのような既得利益者になっているでしょうか？私自身、周りの多くの人が若いうちに夢を追いかけるのは素晴らしいことですが、一度夢を実現し、既得利益を得た人物が、他の人の夢の実現を阻むようになるのを見ることに非常に懸念を感じます。以前は嫌っていたやり方で若者を扱い、問題を先送りするようなことをしているのではないでしょうか？（話の内容に沿って）&lt;/p&gt;
&lt;h2 id=&#34;五十歳-3&#34;&gt;五十歳
&lt;/h2&gt;&lt;p&gt;そのため、数年前から私はボランティアとして毎年11人の大学院生を招き入れ、一年ごとに2年間の期間を設け、現在までに5期分の卒業生がおり、55名の純粋な大学院生が卒業しました。このような活動をしていることは非常に幸せだと感じています。ある程度の経験や感触を得ることができ、彼らを指導する能力も持っているからです。授業が終わった後には毎晩食事に招待し、それほど費用もかかりません。しかし、これは良い既得利益を築くためにすべきであり、既得利益は2つの側面を持つ可能性があります。一つは、過去の助けとなった人たちへの感謝を示すことです。私は以前、「助けてくれた人にたくさん感謝を言うのは避けたい」と言っていました。なぜなら、新しい若者たちに対して倍増した形で接する必要があるからです。これが私の感謝の形なのです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;もし毎日感謝を言うだけで、それが邪魔になるのであれば…&lt;/strong&gt; 次に、他の人たちのために道を切り開くことです。 中国無論是物質上的、經濟上的、思想上的、文化上的，任何領域的既得利益者，當你成為那種人之後，就要考慮該怎麼做？昨天推車的人今天成了攔阻車的人，回顧中國歷史，四處都是如此，現在也不會這樣。甚至有時候會更多，所以呼籲所有的既得利益者能夠重新像你年輕的時候一樣去做，像那種人一樣去做；就算我做的可能不夠好，起碼我在想、在做、在說。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>標準ライブラリコンテナのメモリ割り当て子：allocator</title>
        <link>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</link>
        <pubDate>Mon, 30 Dec 2019 13:26:19 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</guid>
        <description>&lt;p&gt;カスタムディストリビューターは、パフォーマンスを向上させ、メモリ使用効率を高め、頻繁な少量のメモリ割り当ての問題を解決できます。&lt;/p&gt;
&lt;h4 id=&#34;前因&#34;&gt;前因
&lt;/h4&gt;&lt;p&gt;近頃、ネットワークパケットの開発に携わり、頻繁に小さなメモリ領域を申請し解放する必要があり、当初はメモリプールを使用することを検討していました。いくつかの既存のメモリプールを確認したところ、この
&lt;a class=&#34;link&#34; href=&#34;https://github.com/cacay/MemoryPool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cacay/MemoryPool&lt;/a&gt;
を見つけました。インターフェースを見たとき、このメモリプールの実装が少し奇妙だと疑問に思いました。「MemoryPool」の実装ロジックは、固定サイズのメモリ領域を申請することです。boostのメモリプールインターフェースを見てみると、テンプレートを提供し、使用時にインスタンス化します。ちょうどこのライブラリには、&lt;code&gt;allocator&lt;/code&gt;という概念について言及した記事があり、紹介されていました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;#### [wiki](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))

C++プログラミングにおいて、割り当て子（英語：allocator）はC++標準ライブラリの重要な構成要素です。C++のライブラリには、リスト、集合などのように、共通して「コンテナ」と呼ばれるさまざまなデータ構造が定義されています。これらのコンテナの共通の特徴は、プログラムの実行時にサイズを変更できることです。この機能を実装するために、動的メモリ割り当てが必要となり、その際に割り当て子が使用されます。具体的には、割り当て子は、標準テンプレートライブラリ（STL）コンテナのメモリ管理に関する低レベルの詳細を包摂します。デフォルトでは、C++標準ライブラリは独自の汎用割り当て子を使用しますが、必要に応じてプログラマは独自の割り当て子をカスタマイズして代替することも可能です。
``` - 分配器は、アレクサンドル・ステパノフによってC++標準テンプレートライブラリ（Standard Template Library、以下STL）の一部として発明されました。当初の目的は、「ライブラリをより柔軟にし、低レベルなデータモデルに依存しない方法を用いる」ことでした。また、プログラマがライブラリ内でカスタムポインタや参照型を利用することを可能にするものでした。しかし、標準テンプレートライブラリをC++標準に組み込む際、C++標準委員会は、データモデルの完全な抽象化処理が不可受容な性能低下をもたらすことを認識し、妥協策として、分配器に対する制限がより厳しくなりました。その結果、ステパノフ当初の構想と比較して、現在の標準で記述されている分配器のカスタマイズ性は大幅に制限されています。

#### [wiki](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))
ディストリビュータのカスタマイズには制限があるものの、多くのケースではカスタムディストリビュータの使用が必要であり、これは通常、異なる種類のメモリ空間（共有メモリと回収済みメモリなど）へのアクセス方法をカプセル化したり、メモリプールを使用したメモリ割り当て時のパフォーマンス向上を目的に行われます。さらに、メモリ使用量と実行時間という観点から見ると、頻繁に少量のメモリを割り当てるプログラムでは、専用のディストリビュータを導入することで大きなメリットが得られます。

#### [使用要件](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))
カスタムディスペンサーを定義する主な理由は、パフォーマンスの向上です。専用のカスタムディスペンサーを使用することで、プログラムのパフォーマンスを向上させたり、メモリ使用量を削減したり、あるいは両方を組み合わせることも可能です[4][8]。デフォルトディスペンサーは`new`演算子を使用してストレージ空間を割り当てるため[文 5]、これは通常C言語のヒープ割り当て関数（malloc()）によって実装されます[9]。ヒープ割り当て関数は、偶発的な大量メモリ割り当てに最適化されているため、ベクトルや双端キューのような、一度に大量のメモリを必要とするコンテナにメモリを割り当てる場合は、デフォルトディスペンサーは通常効率的です[8]。しかし、連想コンテナと双方向リストのような、頻繁に少量メモリを割り当てる必要があるコンテナを使用する場合、デフォルトディスペンサーを使用すると、通常パフォーマンスが低下します[4][9]。

#### [利用要請](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))
要するに、このセクション（……）（まるで）は、この標準がディストリビューターに対する「私は夢を見る」の演説です。夢が実現する前に、移植性を重視するプログラマーは、ステートレスなカスタムディストリビューターに限定されます。
——スコット・メイヤー，《Effective STL》
上記を鑑みて、この状況下では、メモリプールベースのディストリビューターを使用して、頻繁で少量の割り当ての問題を解決することが一般的です[8]。 デフォルトの「オンデマンド」方式とは異なり、メモリプールベースのアロケータを使用する場合、プログラムは事前に大量のメモリ（すなわち「メモリプール」）を割り当てます。その後、メモリを割り当てる必要があるときに、カスタムアロケータは、リクエスト側に対してプール内のメモリへのポインタを返すだけで済みます。オブジェクトが破棄される際には、実際にメモリを解放する必要はなく、代わりにメモリプールのライフサイクル終了時まで遅延させ、その時点で真正に解放されます[注 1][8]。

#### [使用要件](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))

「カスタム分配器」というテーマに関して、多くの C++ 専門家や関連著者の議論に参加しており、例えばスコット・メイスの『Effective STL』やアンデル・アレクサンドレスクの『Modern C++ Design』で言及されている。メイスは、特定の型 T の分配子のすべてのインスタンスが等しいとすれば、移植可能な分配子のインスタンスには状態を含んではならないと洞察している。C++ 標準はライブラリの実装者が状態付きの分配子をサポートするように推奨している[文 4]が、メイスは「この段落は、（まるで）素晴らしい見解だが、ほぼ空論であり」、分配子の制限は「過度に厳格」であると称している[4]。 例えば、STLのリストはスプラッシュ（splice）メソッドをサポートしており、あるリストオブジェクトAのノードを別のリストオブジェクトBに直接挿入することができます。これは、Aのアルロケーター（allocator）が確保したメモリを、Bのアルロケーターが解放することを意味し、そこからAとBのアルロケーターインスタンスは等しいという結論を導き出されます。メイヤーの結論は、アルロケーターは静的メソッドを使用する型として定義するのが最適であるということです。例えば、C++標準では、アルロケーターはrebindメソッドを実装したotherクラステンプレートを提供する必要があります。

#### [使用要件](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))

ヤニー・ストラウストルプが『C++プログラム設計言語』で述べたように、「厳密な割り当て制限により、各オブジェクトの情報が異なることを防ぐ」という点は「問題ない」（大意）とされ、ほとんどの割り当て器は状態を必要とせず、あるいは状態がない場合に性能が良いと指摘されている。彼は、メモリプール型、共有メモリ型、そしてガベージコレクション型の3つのカスタム割り当て器のユースケースを提案し、内部メモリプールを使用して少量のメモリを迅速に割り当て/解除する割り当て器の実装を示した。しかし、このような最適化は、彼が提供したサンプル割り当て器にもすでに実装されていることを認めている[3]。

カスタム割り当て器のもう一つの用途は、メモリ関連のエラーのデバッグである[10]。 これを実現するには、割り当て時に追加のメモリを割り当て、そこでデバッグ情報を保存するディスパッサーを作成できます。このようなディスパッサーは、同種の割り当て/解放が同一ディスパッサーによって行われるだけでなく、キャッシュオーバフローからプログラムをある程度保護することも可能です[11]。&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
