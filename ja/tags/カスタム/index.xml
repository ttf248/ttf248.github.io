<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>カスタム on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0/</link>
        <description>Recent content in カスタム on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 20:54:02 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Hugo モジュールカスタムテーマの修正：考え方の解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を調べてみたところ、サイトが何度もテーマを変更しており、毎回いくつかのカスタム設定を適用していた。そこで、カスタム設定の変更方法を記録しておく。私のGitHubには「even」というテーマがあり、短期間メンテナンスを行っていたが、最新版のHugoコンパイラへのアップグレードを強行した結果、互換性が失われ、最終的に「stack」テーマに切り替えてしまった。&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化について言及する際、NginxモジュールやIDEAプラグインなどを思い浮かべる人が多いでしょう。 通常は、私がいくつかのモジュールをアップロードすることで、私の独自のニーズを満たすことができます。 モジュールが広く受け入れられる理由は、十分に柔軟で、あまり労力をかけずに自分のニーズを満たせることです。 多くの場合は、大体同じように見えるものの、細部には常に違いがあるからです。 これはソフトウェアの複雑さを物語っており、技術的な複雑さだけでなく、ビジネス上の複雑さも含まれます。 大多数の場合、私たちが直面しているのはビジネスの複雑さです。 これこそが、「隔行如隔山」という俗語を最もよく表すものです。&lt;/p&gt;
&lt;p&gt;現在では、インターネット業界だけでなく、金融業界、さらには伝統的な製造業まで、情報化システムを使用して企業の生産と管理を支援しています。 同じ「休暇申請システム」でも、同じ業界の異なる企業間には違いがあります。&lt;/p&gt;
&lt;p&gt;そして&lt;code&gt;Hugo&lt;/code&gt;のモジュールは、皆さんがイメージするモジュールとは少し異なります。 機能単位で独自のニーズを満たすのではなく、ディレクトリ構造を主に使用して、共通の構造を認識します。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugoアーキテクチャ — Hugoのモジュール&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; 方式も引き続き使用できますが、本記事では推奨されません。 テーマを導入した場合、更新が発生するとメンテナンスが煩雑になり、個別の git リポジトリでテーマを管理する必要があるためです。&lt;/p&gt;
&lt;h2 id=&#34;テーマの修正ロジック-httpsstackjimmycaicomguidemodify-themehttpsstackjimmycaicomguidemodify-theme&#34;&gt;テーマの修正ロジック (&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stack.jimmycai.com/guide/modify-theme&lt;/a&gt;)
&lt;/h2&gt;&lt;p&gt;前面モジュール化の基礎概念を理解した上で、カスタムテーマを理解すると、それほど難しくありません。&lt;code&gt;hugo&lt;/code&gt; の現在のテーマも、複数の異なるモジュールを組み合わせて構成されています。あるモジュールを変更したい場合は、対応するテンプレートファイルを検索し、修正すればOKです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; 公式ドキュメントからの抜粋：&lt;/p&gt;
&lt;p&gt;この方法を使用すると、&lt;code&gt;themes&lt;/code&gt; ディレクトリの下にファイルは存在しません。テーマを修正するには、変更したいファイルを同じディレクトリにある &lt;code&gt;layouts&lt;/code&gt; ディレクトリにコピーする必要があります。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; ファイルを変更する場合は、それを &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; にコピーし、そこから修正します（テーマのリポジトリからコードをコピー）。&lt;code&gt;assets&lt;/code&gt; と &lt;code&gt;static&lt;/code&gt; ディレクトリについても同様です。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルの場所を見つける方法&#34;&gt;テンプレートファイルの場所を見つける方法
&lt;/h2&gt;&lt;h3 id=&#34;従来の思路&#34;&gt;従来の思路
&lt;/h3&gt;&lt;p&gt;テーマのソースファイルを確認し、テーマのデザイン思想を理解し、対応するテンプレートファイルを修正します。&lt;/p&gt;
&lt;h3 id=&#34;蛮力的なアプローチ&#34;&gt;蛮力的なアプローチ
&lt;/h3&gt;&lt;p&gt;私はフロントエンドのコードがあまり理解していないため、時には手動で対応することがあります。例えば、関連するページをブラウザで開き、修正したい箇所を見つけ、&lt;code&gt;要素を検査&lt;/code&gt;を使ってCSS名（&lt;code&gt;css name&lt;/code&gt;）を特定し、ソースコード内で検索して該当ファイルを抽出し、それをサイトディレクトリにコピーして変更します。&lt;/p&gt;
&lt;h2 id=&#34;スニppets&#34;&gt;スニppets
&lt;/h2&gt;&lt;p&gt;公式サイトでデフォルトのファイルが用意されており、カスタマイズが必要な箇所は、複数のファイルに分割して &lt;code&gt;custom.scss&lt;/code&gt; ファイルをインポートすることで、よりスタイルの管理を効率化できます。
&lt;img src=&#34;https://ttf248.life/p/hugo-module-customizing-themes-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;修正内容まとめ6時間&#34;&gt;修正内容まとめ（6時間）
&lt;/h2&gt;&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な変更点を以下に列挙します。本サイトで行った修正内容としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定などがあり、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応できました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを引き継ぎ、中国語に最適化&lt;/li&gt;
&lt;li&gt;首页：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;首页：記事に概要プレビュー（手間のかかる方法で実現）を追加&lt;/li&gt;
&lt;li&gt;スクロールバー：スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;コードブロック：&lt;code&gt;highlight.js&lt;/code&gt; を導入し、コードブロックのスタイルを美化&lt;/li&gt;
&lt;li&gt;文章詳細：一部コンテンツが転載であるため、原作者情報と元のリンクを表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：トップのカテゴリ画像にテーマ自带の色付きマスクを削除し、元の画像を表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：年単位でのカテゴリ分類の統計表示パネルを追加&lt;/li&gt;
&lt;li&gt;アーカイブページ：2列表示レイアウト
&lt;code&gt;stack&lt;/code&gt; テーマのコンポーネント再利用率が高いため、首页の記事への概要プレビュー追加に時間がかかりました。対応するコンポーネントを変更したことで、記事の詳細ページの変更も引き起こされ、正文が重複して表示される問題が発生しました。&lt;code&gt;golang テンプレート&lt;/code&gt; の構文はあまり馴染みがないため、多くの時間を費やし、コンポーネント間のパラメータ伝達を解決することができませんでした。最終的には、巧みに手段として、ホームページに独自に &lt;code&gt;JavaScript&lt;/code&gt; スクリプトを導入し、カスタムの特殊変数を通じて概要プレビューを実現しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;コード再利用率が高すぎる場合も問題であり、変更を加えることで他の場所にも影響が及ぶ可能性があるため、テーマを変更する際には注意が必要です。元のロジックを壊さないようにしてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;このイケメンさんの修正はより洗練されています：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;
&lt;del&gt;本サイトではシンプルな形で &lt;code&gt;Waline&lt;/code&gt; 评论システムを導入しており、&lt;code&gt;stack&lt;/code&gt; テーマがデフォルトで &lt;code&gt;Waline&lt;/code&gt; をサポートしているため、&lt;code&gt;config.toml&lt;/code&gt; に設定するだけです。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ホームページへのメール連絡の推奨、本サイトではコメント欄は開放していません&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        
    </channel>
</rss>
