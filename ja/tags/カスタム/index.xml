<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>カスタム on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0/</link>
        <description>Recent content in カスタム on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 06:00:45 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Hugo モジュールカスタム修正テーマ：考え方解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-custom-theme-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-custom-theme-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を調べてみたところ、サイトが何度もテーマを変更しており、毎回いくつかのカスタム設定を適用していた。そこで、カスタムテーマ変更の思路を記録しておく。私のGitHubには「even」というテーマがあり、短期間メンテナンスを行ったものの、最新版のHugoコンパイラへのアップグレードを強行した結果、互換性が失われ、最終的に「stack」テーマに切り替えてしまった。&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化について言及する際、NginxモジュールやIDEAプラグインなどを思い浮かべる人が多いでしょう。 通常は、私がいくつかのモジュールをアップロードすることで、私の独自のニーズを満たすことができます。 モジュールが広く受け入れられる理由としては、十分に柔軟で、あまり労力をかけずに自身のニーズを満たせる点が挙げられます。 なぜなら、多くの場合は大体同じように見えるものの、細部にはどうしても差異が生じてしまうからです。 これはソフトウェアの複雑さを物語っており、技術的な複雑さだけでなく、ビジネス上の複雑さも含まれていることを示しています。 ほとんどの場合、私たちが直面しているのはビジネス上の複雑さです。 そしてこれは、ソフトウェア分野において「隔行如隔山」という俗語が最もよく表現していることの証拠と言えるでしょう。 現在では、インターネット業界だけでなく、金融業界、さらには伝統的な製造業においても、企業の生産と管理を支援するために情報化システムが導入されています。 同じ休暇システムでも、同じ業界であっても、企業によって異なる点があります。
そして &lt;code&gt;Hugo&lt;/code&gt; のモジュールと皆さんがイメージするモジュールには違いがあり、機能単位で差異に対応しているわけではありません。代わりにディレクトリ構造を主軸に、共通の構造を認識します。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo架构 — Hugo的模块&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化-1&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; の方法は依然として利用可能ですが、本記事では推奨しません。テーマを導入した場合、アップデートが発生するとメンテナンスが煩雑になるため、個別のGitリポジトリでテーマを管理することを推奨します。&lt;/p&gt;
&lt;h2 id=&#34;テーマの修正ロジック-httpsstackjimmycaicomguidemodify-themehttpsstackjimmycaicomguidemodify-theme&#34;&gt;テーマの修正ロジック (&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stack.jimmycai.com/guide/modify-theme&lt;/a&gt;)
&lt;/h2&gt;&lt;p&gt;前面モジュール化の基礎概念を理解した上で、カスタムテーマを理解すると、それほど難しくありません。&lt;code&gt;hugo&lt;/code&gt;の現在使用されているテーマも、複数の異なるモジュールを組み合わせて構成されています。特定のモジュールを変更したい場合は、対応するテンプレートファイルを検索し、修正すれば完了です。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt;公式ドキュメントからの抜粋：&lt;/p&gt;
&lt;p&gt;この方法を使用すると、&lt;code&gt;themes&lt;/code&gt;ディレクトリにファイルは存在しません。テーマの修正には、変更したいファイルを同じディレクトリにある&lt;code&gt;layouts&lt;/code&gt;ディレクトリにコピーする必要があります。&lt;/p&gt;
&lt;h2 id=&#34;テーマの変更ロジック-httpsstackjimmycaicomguidemodify-themehttpsstackjimmycaicomguidemodify-theme&#34;&gt;テーマの変更ロジック (&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stack.jimmycai.com/guide/modify-theme&lt;/a&gt;)
&lt;/h2&gt;&lt;p&gt;たとえば、&lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; ファイルを修正するには、それを &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; にコピーして、そこから編集する必要があります（テーマのリポジトリからコードをコピーします）。&lt;code&gt;assets&lt;/code&gt; と &lt;code&gt;static&lt;/code&gt; ディレクトリについても同様です。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルの場所を見つける方法&#34;&gt;テンプレートファイルの場所を見つける方法
&lt;/h2&gt;&lt;h3 id=&#34;従来の思路&#34;&gt;従来の思路
&lt;/h3&gt;&lt;p&gt;テーマのソースファイルを確認し、テーマのデザイン意図を理解し、対応するテンプレートファイルを修正します。&lt;/p&gt;
&lt;h3 id=&#34;蛮力的なアプローチ&#34;&gt;蛮力的なアプローチ
&lt;/h3&gt;&lt;p&gt;私はフロントエンドのコードがあまり理解していないため、時には手動で対応することがあります。例えば、関連するページをブラウザで開き、修正したい箇所を見つけ、&lt;code&gt;要素検査&lt;/code&gt;を使ってCSS名（&lt;code&gt;css name&lt;/code&gt;）を特定し、ソースコード内で検索して該当ファイルを抽出し、それをサイトディレクトリにコピーして変更します。&lt;/p&gt;
&lt;h2 id=&#34;スニppets&#34;&gt;スニppets
&lt;/h2&gt;&lt;p&gt;公式で用意されているファイルは、スタイルをカスタマイズするためのものですが、変更が必要な箇所がある場合は、複数のファイルに分割し、&lt;code&gt;custom.scss&lt;/code&gt; ファイルを他のファイルにインポートすることで、よりスタイルの管理が容易になります。
&lt;img src=&#34;https://ttf248.life/p/hugo-module-customizing-themes-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;修正内容まとめ-6時間&#34;&gt;修正内容まとめ (6時間)
&lt;/h2&gt;&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な変更点を以下に列挙します。本サイトにおける修正点としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定など、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを継承し、中国語に最適化&lt;/li&gt;
&lt;li&gt;首页: 右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;首页: 記事に概要プレビュー（手間のかかる部分を、工夫で実現）を追加&lt;/li&gt;
&lt;li&gt;滚动栏: スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;代码块: `highlight. - JavaScriptコードハイライトプラグイン、コードブロックのスタイルを美化する&lt;/li&gt;
&lt;li&gt;内容詳細: 一部のコンテンツは転載であり、新規に原作者情報を表示し、元のリンクを表示&lt;/li&gt;
&lt;li&gt;アーカイブページ: トップのカテゴリ画像、テーマ自带の色マスクを削除し、元の画像を表示&lt;/li&gt;
&lt;li&gt;アーカイブページ: 年別の分類による統計表示パネルを追加&lt;/li&gt;
&lt;li&gt;アーカイブページ: 2カラム表示レイアウト ## 修正内容まとめ (6時間)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な変更点を以下に列挙します。本サイトにおける修正点としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定など、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを継承&lt;/li&gt;
&lt;li&gt;ホームページ：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;ホームページ：記事に概要プレビュー（手間のかかる部分を、工夫で実現）を追加&lt;/li&gt;
&lt;li&gt;スクロールバー：スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;コードブロック：&lt;code&gt;highlight.js&lt;/code&gt; を導入&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;修正内容まとめ-6時間-1&#34;&gt;修正内容まとめ (6時間)
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; テーマのコンポーネントの再利用性が高く、それがホームページの記事の新摘要プレビューにかかる時間を増やす原因となっていました。対応するコンポーネントを変更したことで、記事の詳細ページも変更され、正文が重複して表示される問題が発生しました。&lt;code&gt;golang テンプレート&lt;/code&gt; の構文も十分に理解できていなかったため、多くの時間を費やし、コンポーネント間のパラメータの伝達を解決することができませんでした。最終的には、ショートカットの方法として、ホームページに個別に &lt;code&gt;JavaScript&lt;/code&gt; スクリプトを導入し、カスタムの特殊変数を使用することで摘要プレビューを実現しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コードの再利用性が高すぎることも問題となることがあります。ある箇所を変更すると、他の箇所にも影響が及ぶ可能性があるため、テーマを修正する際には注意が必要です。元のロジックを壊さないようにしてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;このイケメンさんの修正はより洗練されています：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;
&lt;del&gt;本サイトではシンプルな形で&lt;code&gt;Waline&lt;/code&gt;コメントシステムを導入しており、&lt;code&gt;stack&lt;/code&gt;テーマがデフォルトで&lt;code&gt;Waline&lt;/code&gt;に対応しているため、&lt;code&gt;config.toml&lt;/code&gt;ファイルに設定するだけで済みます。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首页のメールでの連絡を推奨し、本サイトではコメント欄は開放していません。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
