<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Lambda on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/lambda/</link>
        <description>Recent content in Lambda on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/lambda/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C&#43;&#43;におけるラムダ式のパラメータのライフタイムについて</title>
        <link>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</link>
        <pubDate>Wed, 13 Nov 2024 19:23:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</guid>
        <description>&lt;p&gt;C++において、ラムダ式は便利な匿名関数であり、外部変数をキャプチャして内部で使用することができます。これにより、ラムダ式は柔軟なプログラミングツールとなります。しかし、ラムダ式のパラメータのライフサイクルは特に注意すべき点であり、特にキャプチャおよびパラメータを渡す際に重要です。&lt;/p&gt;
&lt;h3 id=&#34;1-ラムダ式のパラメータのライフサイクル&#34;&gt;1. ラムダ式のパラメータのライフサイクル
&lt;/h3&gt;&lt;p&gt;ラムダ式のパラメータのライフサイクルは、通常他のC++関数と同様です。関数の引数は関数呼び出し時に存在し、関数呼び出しが終了すると引数のライフサイクルも終了します。ただし、ラムダ式が外部変数をキャプチャする場合、そのキャプチャ方法によって引数のライフサイクルに影響を受ける可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;2-パラメータのライフサイクルとの関係を捉える&#34;&gt;2. パラメータのライフサイクルとの関係を捉える
&lt;/h3&gt;&lt;h4 id=&#34;21-外部変数のキャプチャ&#34;&gt;2.1 外部変数のキャプチャ
&lt;/h4&gt;&lt;p&gt;C++のラムダ式では、以下の2つの方法で外部変数 キャプチャできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;値によるキャプチャ:&lt;/strong&gt; 値によるキャプチャでは、外部変数の値がラムダ内部にコピーされます。ラムダ内のコピーのライフサイクルは、ラムダ自身のライフサイクルによって制御されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参照によるキャプチャ:&lt;/strong&gt; 参照によるキャプチャでは、外部変数の参照が保持され、ラムダ内の参照は元の外部変数に指向します。ライフサイクルは外部変数のライフサイクルに依存します。 ```cpp
int x = 10;
auto lambda_by_value = &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;x&lt;/a&gt; { std::cout &amp;laquo; x &amp;laquo; std::endl; };  // x のコピーをキャプチャ
auto lambda_by_reference = &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&amp;amp;x&lt;/a&gt; { std::cout &amp;laquo; x &amp;laquo; std::endl; };  // x を参照でキャプチャ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lambda_by_value();  // 10 と出力
lambda_by_reference();  // 10 と出力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
**捕獲された変数について、ライフサイクルは以下のとおりです。**
- **値によるキャプチャ:** lambda が生きている間、外部変数の値をコピーして lambda 内で保持します。lambda のライフサイクルが終了すると、このコピーが破棄されます。

#### 2.1 外部変数の捕捉
- **参照による捕捉**: lambdaは外部変数の参照を保持し、**外部変数はlambdaの使用前に有効でなければならない。そうでない場合、未定義の動作を引き起こす可能性があります**。

#### 2.2 ラムダパラメータ

ラムダのパラメータは、通常の関数パラメータと同様に、そのライフサイクルはラムダ関数体内のみに限られます。つまり、ラムダパラメータはラムダが呼び出されたときに作成され、ラムダが呼び出された後にパラメータのライフサイクルも終了します。

```cpp
auto lambda = [](int a, int b) {
    std::cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; std::endl;
};
lambda(5, 10); // ここでaとbはラムダのパラメータ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; はラムダ式（ラムダ表現）のパラメータであり、ラムダが呼び出されたときに作成され、ラムダが実行後に破棄されます。&lt;/p&gt;
&lt;h3 id=&#34;3-外部変数を捕捉する際のライフサイクルに関する問題&#34;&gt;3. 外部変数を捕捉する際のライフサイクルに関する問題
&lt;/h3&gt;&lt;h4 id=&#34;31-捕捉した変数が-lambda-外部で有効か&#34;&gt;3.1 捕捉した変数が lambda 外部で有効か
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;値によるキャプチャ&lt;/strong&gt;: 外部変数（lambda が呼び出された後に破棄されても）が lambda 内部で参照されるコピーを保持するため、lambda 内部で安全に使用できます。外部変数が存在しなくなっても問題ありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x は lambda が呼び出された後に変更される
lambda();  // 10 を出力する。これは x のコピーを参照しているため
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;参照によるキャプチャ&lt;/strong&gt;: 外部変数の参照をキャプチャする場合、lambda 内部で参照が使用される場合、外部変数のライフサイクルに依存します。外部変数が lambda が実行される前に破棄された場合、 dangling reference (空の参照) の問題が発生し、未定義動作を引き起こります。 ```cpp
int x = 10;
auto lambda = &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&amp;amp;x&lt;/a&gt; { std::cout &amp;laquo; x &amp;laquo; std::endl; };
x = 20;  // x 在 lambda 调用前修改
lambda();  // 打印 20，捕获的是 x 的引用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
&amp;gt; ラムダ関数の実行順序が不定である場合、キャプチャされた外部変数がラムダ関数実行時に有効であることを保証することが非常に重要です。&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
