<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Pytorch on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/pytorch/</link>
        <description>Recent content in Pytorch on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 05:33:00 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/pytorch/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Stable-diffusion - そのインストールにおける喜びと苦しみ (安定拡散 - そのインストールにおける喜びと苦しみ)</title>
        <link>https://ttf248.life/ja/p/stable-diffusion-zero-install-saga/</link>
        <pubDate>Thu, 13 Apr 2023 00:23:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/stable-diffusion-zero-install-saga/</guid>
        <description>&lt;p&gt;国内の資料は、基本的には&lt;strong&gt;秋葉&lt;/strong&gt;さんのワンクリックデプロイパッケージを推奨されています。すべてがPythonベースのオープンソースプロジェクトなので、デプロイもそれほど複雑ではないだろうと考え、ゼロから試してみることにしました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI生成画像の戯画に挑戦するため、意図的にグラフィックカードを変更し、3060 12GBのエントリーモデルを使用しました。7年間の活躍の後、960は名誉な退役を遂げました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;コアの &lt;code&gt;pytorch cuda&lt;/code&gt; のインストールですが、以前 &lt;code&gt;python&lt;/code&gt; ゲーム補助スクリプトを書いた際にローカルにインストールしたことがありましたが、やはり問題が発生しました。&lt;code&gt;cuda&lt;/code&gt; の暗号化が常に有効にならないという問題です。&lt;/p&gt;
&lt;h2 id=&#34;待処理&#34;&gt;待処理
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;文章構造を再計画し、まず PyTorch を紹介する。バージョン対応関係とバージョン確認方法&lt;/li&gt;
&lt;li&gt;ローカル環境から PyTorch をゼロから新規に作成してデプロイする方法&lt;/li&gt;
&lt;li&gt;翻訳稿を作成する。Stable Diffusion のインストール手順（Windows版）: &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考資料を整理&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ステップ&#34;&gt;ステップ
&lt;/h2&gt;&lt;p&gt;中国語で検索すると、手順を追ったインストール方法が見つかりにくい可能性があります。&lt;code&gt;Google&lt;/code&gt; で英語で検索すると、同様のチュートリアルがたくさんあります。ゼロから始めるものばかりです。まず、&lt;code&gt;git&lt;/code&gt; のインストールについて説明し、次に &lt;code&gt;python&lt;/code&gt; のインストールについても説明します。そして、リポジトリをダウンロードして、直接スクリプトをダブルクリックするだけです。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;
詳細な使用方法や疑問点については、&lt;code&gt;issues&lt;/code&gt; を参照してください。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&lt;/a&gt;
このリポジトリが何をするものなのかも、なぜか誰も説明していないと思います。名前からして分かりやすいはずです。これは、より簡単に使えるインターフェースコントロール台なのです。&lt;/p&gt;
&lt;h2 id=&#34;ステップ-1&#34;&gt;ステップ
&lt;/h2&gt;&lt;p&gt;リポジトリでは、同時にインストールと起動スクリプトも作成しています。自動的に現在のフォルダを検出し、&lt;code&gt;Python&lt;/code&gt;仮想環境が存在するかどうかを確認します。存在する場合は、現在のパスの&lt;code&gt;python&lt;/code&gt;を使用します。
もし初心者ユーザーの場合は、&lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;PyTorch
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pytorch.org/get-started/locally/&lt;/a&gt;
ここでは今日私が話したい内容です。まず、彼らの手順をそのまま実行しないでください。Pythonはrequirementファイルを使って依存ライブラリをインストールします。これは小さな問題です。重要なのはあなたのGPUのバージョンとドライバーのバージョンがPyTorchと対応していることです。これは多くの人が関連性について説明していますが、インターネットで検索するとわかります。
参考：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_40660408/article/details/129896700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_40660408/article/details/129896700&lt;/a&gt;
仮想環境を作成することは、空の仮想環境を構築することです。その中でまず公式サイトのスクリプトを実行し、PyTorchをインストールします。
上記の2つのスクリプトを使用して、必要なCUDAバージョンを確認したり、インストールが成功したかどうかを確認できます。 ここでは、キラキラした操作を試すのではなく、まず公式ページのロジックに従ってコピーし、そのままインストールするのがおすすめです。直接pipでインストールすると、PyTorchが失敗したり、CUDAがアクティブにならない可能性があります。&lt;/p&gt;
&lt;p&gt;特に、フォルダのパスに不要な文字や記号が含まれていると、PyTorchが使用できなくなる可能性があるため注意してください。&lt;/p&gt;
&lt;h2 id=&#34;pytorch-1&#34;&gt;PyTorch
&lt;/h2&gt;&lt;p&gt;何度かインストールを繰り返したり、公式のインストールファイルをダウンロードして手動でインストールしてみたりしました。2.0バージョンにアップグレードしたいと考えていたのは、公式ドキュメントが2.0の方が速度が速いと謳っていたためです。しかし、それまであまり使っていなかったので、Pythonのバージョンやそれが影響するかどうか分からずでした。その間は公式マニュアルも確認し、「3.8版を推奨」という記述がありました。そこでいくつかの問題が発生し、ワンクリックインストールパッケージを使用していた際に、3.10版が使用されていました。最終的には、まず新しいフォルダを作成し、仮想環境を作成して、PyTorchが正しくインストールされていることを確認しました。そして、このインストールされた仮想環境をWeb UIのフォルダに移動しました。その状態で起動スクリプトを実行して依存関係の問題は解消されました。 移動後、以下のコマンドを実行する必要があります：python -m pip install &amp;ndash;upgrade &amp;ndash;force-reinstall pip、pipを修正します。少し奇妙に見えるかもしれませんが、この箇所でかなり時間をかけて試行錯誤しました。常にtorchを正しく認識できず、そのため、まずtorchをインストールしてから、その他の依存ライブラリをインストールするという方法に思いついたのです。&lt;/p&gt;
&lt;h2 id=&#34;xformers&#34;&gt;Xformers
&lt;/h2&gt;&lt;p&gt;推奨: 起動することを推奨します。画像生成を高速化し、既存の占有率を削減できます。副作用として、同じパラメータセットで生成された画像は相対的に安定していません。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stable-diffusion-webui:Xformers&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/diffusers/optimization/xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huggingface optimization&lt;/a&gt;
| 100.00% | 2分57.03秒 | 7440/10058 MiB | 12288/12288 MiB (100.0%) |&lt;/p&gt;
&lt;h2 id=&#34;xformers-1&#34;&gt;Xformers
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;最適化比率&lt;/th&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;th&gt;Torch 活性/予約メモリ&lt;/th&gt;
&lt;th&gt;システムVRAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;51.02%&lt;/td&gt;
&lt;td&gt;1分29秒21&lt;/td&gt;
&lt;td&gt;4547 / 7164 MiB&lt;/td&gt;
&lt;td&gt;9298 / 12288 MiB (75.67%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;なぜデプロイパッケージを推奨しなかったのかというと、そのパッケージには作者が個人的にカスタマイズした設定が含まれており、公式のオリジナルのものとは異なっていたためです。もしあなたが初心者であれば、なぜそれらのパラメータが最適なのか分からないかもしれません。しかし、使用していくうちに公式のマニュアルを参照することで、どのパラメータを調整する必要があるかを知ることができます。&lt;/p&gt;
&lt;h2 id=&#34;グラフィックボードの選択&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;p&gt;データ通貨鉱難の後、グラフィックボード（GPU）の価格は相対的に高くなりません。一般的なエントリーレベルのプレイヤーが、&lt;code&gt;3060&lt;/code&gt;と&lt;code&gt;3060Ti&lt;/code&gt;の間で選択する場合、一般的には大容量の&lt;code&gt;12G&lt;/code&gt;版の&lt;code&gt;3060&lt;/code&gt;が推奨されます。なぜなら、より大きな解像度の画像を生成できるからです。なぜ大きな解像度が必要なのでしょうか？それは、生成時に解像度を大きくすることで、生成される画像がより鮮明で、より詳細になるためです。もしあなたが小さな画像を生成したいのであれば、&lt;code&gt;8G&lt;/code&gt;のVRAMでも十分です。&lt;/p&gt;
&lt;p&gt;さらに、&lt;strong&gt;高解像度アップスケーリング&lt;/strong&gt;オプション、ディテールを強調し、画面の詳細を豊かにすることも、より多くのVRAMが必要です。 以下は、NVIDIA GeForce GTX 970、GeForce RTX 3060 Ti、GeForce RTX 3060、GeForce RTX 3080およびGeForce RTX 3080 Ti の単精度 (FP32)、半精度 (FP16) および双精度 (FP64) 浮動小数点数の計算能力の仕様集約表です。&lt;/p&gt;
&lt;p&gt;| GeForce GTX 970 | 2014 | 3.49 | 87.2 | 0.109 |&lt;/p&gt;
&lt;h2 id=&#34;グラフィックボードの選択-1&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックボードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;半精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;双精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060 Ti&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;16.2&lt;/td&gt;
&lt;td&gt;32.4&lt;/td&gt;
&lt;td&gt;0.51&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;グラフィックボードの選択-2&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックボードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;半精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;双精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;12.7&lt;/td&gt;
&lt;td&gt;25.4&lt;/td&gt;
&lt;td&gt;0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;グラフィックボードの選択-3&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックボードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;半精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;双精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;29.8&lt;/td&gt;
&lt;td&gt;58.9&lt;/td&gt;
&lt;td&gt;0.93&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;グラフィックボードの選択-4&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックボードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;半精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;th&gt;双精度浮動小数点演算能力 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080 Ti&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;34.8&lt;/td&gt;
&lt;td&gt;68.7&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;グラフィックボードの選択-5&#34;&gt;グラフィックボードの選択
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/spreadsheets/d/1Zlv4UFiciSgmJZncCujuXKHwc4BcxbjbSBg71-SdeNk/edit#gid=0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;各種グラフィックボード性能テストデータ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;更新&#34;&gt;更新
&lt;/h2&gt;&lt;p&gt;半年ごとに、改めてインストール手順を整理したり、基礎概念を解説したりする予定でしたが、一般的にAIイラストを生成する場合、結局はベテランユーザーが提供した画像パラメータを調整したり、既存の画像をフォーマットして再レンダリングしたりすることになるという事実に気づきました。&lt;/p&gt;
&lt;p&gt;以前、AIを使ってミニプログラムのUI素材を描画するというプロジェクトがありましたが、半日かけても期待通りの結果が得られず、結局公式のミニプログラムからリソース画像を取り出して使用する方が良いという結論に至りました。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
