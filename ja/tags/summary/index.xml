<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Summary on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/summary/</link>
        <description>Recent content in Summary on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Fri, 06 Jun 2025 18:45:28 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/summary/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Prometheus監視システムにおけるヒストグラムとサマリー</title>
        <link>https://ttf248.life/ja/p/prometheus-monitoring-system-histogram-and-summary/</link>
        <pubDate>Wed, 04 Jun 2025 19:00:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/prometheus-monitoring-system-histogram-and-summary/</guid>
        <description>&lt;p&gt;ビジネスシステムは、サマリータイプの監視指標を設計し、平均処理時間（request_duration_milliseconds_sum / request_duration_milliseconds_count）を計算していました。&lt;/p&gt;
&lt;p&gt;データを確認したところ、あるインターフェースの平均処理時間が非常に高くなっていることが判明しました。時系列グラフを見ると、平均処理時間が突然増加しており、それは単一のリクエストの処理時間が長かったために引き起こされたもので、平均値を押し上げている状態でした。具体的にいつ発生したリクエストを特定したいのですが、その期間内のリクエスト数が少なく、結果データが常に空になってしまいます。&lt;/p&gt;
&lt;h2 id=&#34;faq-よくある質問--質疑応答-しぎおうどう応&#34;&gt;FAQ (よくある質問) / 質疑応答 (しぎおうどう応)
&lt;/h2&gt;&lt;h3 id=&#34;-なぜ-_sum-と-_count-にデータがあるのか&#34;&gt;✅ なぜ &lt;code&gt;_sum&lt;/code&gt; と &lt;code&gt;_count&lt;/code&gt; にデータがあるのか
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_sum&lt;/code&gt; と &lt;code&gt;_count&lt;/code&gt; は Summary 型の&lt;strong&gt;コア指標&lt;/strong&gt;であり、Prometheus は常にこれらの値を収集して記録します。&lt;/li&gt;
&lt;li&gt;どちらも&lt;strong&gt;累積型のカウンター&lt;/strong&gt;であるため、&lt;code&gt;rate()&lt;/code&gt; または &lt;code&gt;increase()&lt;/code&gt; を使用するのに適しています。&lt;/li&gt;
&lt;li&gt;リクエスト遅延がどのように変化しても、リクエストが存在すれば必ず &lt;code&gt;_sum&lt;/code&gt; と &lt;code&gt;_count&lt;/code&gt; のデータがあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-quantile099-が時系列グラフで表示されない理由&#34;&gt;❌ &lt;code&gt;{quantile=&amp;quot;0.99&amp;quot;}&lt;/code&gt; が時系列グラフで表示されない理由
&lt;/h3&gt;&lt;p&gt;Summary にも quantile=&amp;ldquo;0.99&amp;rdquo; を設定していても、この時間系列が存在しないか欠損している可能性があります：
指標は確実に設定されており、データが期限切れでもありません。📉 リクエスト量が少ないため、quantile を計算できません。スライディングウィンドウメカニズムにより、この期間を過ぎると統計範囲に再含まれなくなります。
分位数（例えば p99）はサンプリング統計によって計算されます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1～2 件程度のリクエストしかない場合、p99 の計算は&lt;strong&gt;不安定で代表的な意味を持たない&lt;/strong&gt;可能性があります。&lt;/li&gt;
&lt;li&gt;Prometheus &lt;strong&gt;クライアント SDK は、この quantile 時間系列を公開しない&lt;/strong&gt;ように選択します（誤解を避けるため）。&lt;/li&gt;
&lt;li&gt;その結果、&lt;code&gt;_sum&lt;/code&gt;、&lt;code&gt;_count&lt;/code&gt; が正常に累積されますが、&lt;code&gt;quantile=&amp;quot;0.99&amp;quot;&lt;/code&gt; にデータが存在しません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ヒストグラムとサマリーの違い&#34;&gt;ヒストグラムとサマリーの違い
&lt;/h2&gt;&lt;h3 id=&#34;ヒストグラム&#34;&gt;&lt;strong&gt;ヒストグラム&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仕組み:&lt;/strong&gt; ヒストグラムは、データをビン（バケット）に分割し、各ビンに収まっているサンプルの数を記録します。
例えば、定義したビンが &lt;code&gt;[10ms, 50ms, 100ms, 500ms, 1s]&lt;/code&gt; の場合、各リクエストのレイテンシは対応するビンに割り当てられます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利点:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Prometheus で複数のインスタンス（例えば、複数のサービスノードのリクエストレイテンシ分布）からのデータを集計できます。&lt;/li&gt;
&lt;li&gt;分位数（P50、P95、P99 など）を計算し、レイテンシの分布を観察するのに適しています。&lt;/li&gt;
&lt;li&gt;PromQL を使用して、動的に分位数を計算するための柔軟なクエリ機能を提供します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ビンの範囲を事前に定義する必要があり、選択が不適切だとデータ分布が均一にならない可能性があります（例えば、すべてのリクエストが 1 つのビンに集中する）。&lt;/li&gt;
&lt;li&gt;ビンの数が多いほど、ストレージと計算のオーバーヘッドが増加します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適用シナリオ:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;複数のインスタンスからのデータを集計する必要がある場合。&lt;/li&gt;
&lt;li&gt;分位数を動的に調整したり、レイテンシ分布を分析したりする場合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;概要&#34;&gt;&lt;strong&gt;概要&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仕組み:&lt;/strong&gt; Summary はクライアント側でパーセンタイル（P50、P95、P99 など）を直接計算し、その結果を Prometheus に報告します。
また、サンプル全体の数と合計も記録し、平均値を計算するために使用します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利点:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;プレ定義されたバケットは不要で、直接パーセンタイル結果を提供します。&lt;/li&gt;
&lt;li&gt;単一インスタンスでの正確なパーセンタイル計算に適しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;欠点:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;パーセンタイルの計算はクライアント側で行われるため、Prometheus で複数のインスタンスのデータを集計できません。&lt;/li&gt;
&lt;li&gt;パーセンタイルを調整（例：P95 から P99 に変更）するには、コードを変更して再デプロイする必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;適用シナリオ:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;単一インスタンスでの監視であり、パーセンタイルに対する正確性が高い場合。&lt;/li&gt;
&lt;li&gt;複数のインスタンスのデータを集計する必要がない場合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;分位数計算&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;プロメテウス内で動的に計算&lt;/td&gt;
&lt;td&gt;顧客側で直接計算&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;多インスタンス集約&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;対応&lt;/td&gt;
&lt;td&gt;非対応&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;主な違いの比較&#34;&gt;&lt;strong&gt;主な違いの比較&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;バケツの定義&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;事前に定義する必要がある&lt;/td&gt;
&lt;td&gt;不要&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;主な違いの比較-1&#34;&gt;&lt;strong&gt;主な違いの比較&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ストレージコスト&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;桶の数に依存&lt;/td&gt;
&lt;td&gt;固定コスト&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;ヒストグラム&lt;/th&gt;
&lt;th&gt;サマリー&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;柔軟性&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;高 (ビンの幅を動的に調整可能)&lt;/td&gt;
&lt;td&gt;低 (コードを変更してビンの幅を調整する必要がある)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;複数のインスタンスのデータを集約したり、分位数を柔軟に調整する必要がある場合は、&lt;strong&gt;ヒストグラム&lt;/strong&gt;を選択してください。&lt;/li&gt;
&lt;li&gt;単一インスタンスの正確な分位数が必要で、分位数が固定されている場合は、&lt;strong&gt;サマリー&lt;/strong&gt;を選択してください。
あなたのシナリオでは、サービスが分散しているため、&lt;strong&gt;ヒストグラム&lt;/strong&gt;を使用することを推奨します。これにより、Prometheus ですべてのインスタンスのデータを集約し、動的に分位数と経過時間分布を計算できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;スライディングウィンドウの概念とそのヒストグラムおよびサマリーとの関係&#34;&gt;スライディングウィンドウの概念とそのヒストグラムおよびサマリーとの関係
&lt;/h2&gt;&lt;h3 id=&#34;スライディングウィンドウの概念&#34;&gt;&lt;strong&gt;スライディングウィンドウの概念&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;スライディングウィンドウは、時間ウィンドウメカニズムであり、一定期間内のデータ変化を統計するために使用されます。それは、継続的に移動する時間範囲を通して、システムのリアルタイム状態を動的に反映します。スライディングウィンドウの特徴は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;固定時間範囲:&lt;/strong&gt; ウィンドウの長さは固定されており、例えば最近1分、5分などがあります。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;リアルタイム更新:&lt;/strong&gt; 時間経過とともに、ウィンドウがスライドし、古いデータがウィンドウから削除され、新しいデータがウィンドウに追加されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一般的な用途:&lt;/strong&gt; リアルタイム指標（リクエストレート、平均値、パーセンタイルなど）を計算するために使用されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prometheusでは、スライディングウィンドウは通常、クエリ関数（&lt;code&gt;rate()&lt;/code&gt;、&lt;code&gt;avg_over_time()&lt;/code&gt;など）によって実装されます。&lt;/p&gt;
&lt;h3 id=&#34;スライディングウィンドウとヒストグラムの関係&#34;&gt;&lt;strong&gt;スライディングウィンドウとヒストグラムの関係&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ヒストグラムのデータ構造&lt;/strong&gt;: &lt;br&gt;
ヒストグラムは、サンプルデータをビンに分割し、各ビンのカウントを記録します。Prometheus は、これらのカウント値を周期的にキャプチャします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;スライディングウィンドウの実装&lt;/strong&gt;: &lt;br&gt;
Prometheus でヒストグラムのデータに対してスライディングウィンドウを適用するには、クエリ文を使用できます。例えば：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate(http_request_duration_seconds_bucket[5m])&lt;/code&gt;: 過去 5 分間の各ビンのリクエストレートを計算します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))&lt;/code&gt;: 過去 5 分間の P95 分位数を計算します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利点&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;スライディングウィンドウは、最近の時間の要求時間分布を動的に反映できます。&lt;/li&gt;
&lt;li&gt;ヒストグラムのビニングメカニズムとスライディングウィンドウを組み合わせることで、効率的に分位数や分布を計算できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;スライディングウィンドウとsummaryの関係&#34;&gt;&lt;strong&gt;スライディングウィンドウとSummaryの関係&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Summaryのデータ構造&lt;/strong&gt;:
Summaryはクライアント側でパーセンタイルを直接計算し、Prometheusに送信します。また、サンプル総数と合計も記録します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;スライディングウィンドウの実装&lt;/strong&gt;:
Prometheusでは、Query文を使用してSummaryのデータをスライディングウィンドウ化できます。例えば：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rate(http_request_duration_seconds_sum[5m]) / rate(http_request_duration_seconds_count[5m])&lt;/code&gt;: 過去5分間の平均リクエスト時間計算します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;制限&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Summaryのパーセンタイルはクライアント側で計算されるため、Prometheus側で再計算できません。したがって、スライディングウィンドウによるパーセンタイルのサポートは限定的です。&lt;/li&gt;
&lt;li&gt;複数のインスタンスのデータを集計する必要がある場合、スライディングウィンドウはSummaryのパーセンタイルに直接作用しません。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;スライディングウィンドウの適用場面&#34;&gt;&lt;strong&gt;スライディングウィンドウの適用場面&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;リアルタイム監視:&lt;/strong&gt; スライディングウィンドウは、システムのリアルタイムな状態を監視するのに適しています。例えば、最近1分間のリクエストレートやレイテンシ分布などです。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;異常検知:&lt;/strong&gt; スライディングウィンドウを使用することで、短期間での異常事象（例えば、リクエストのレイテンシが急増するなど）を迅速に検出できます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;動的分析:&lt;/strong&gt; スライディングウィンドウは、システムの変化トレンドを動的に反映し、静的なグローバル統計とは異なります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;概要-1&#34;&gt;概要
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ヒストグラム&lt;/strong&gt; とスライディングウィンドウを組み合わせることで、分位数（例：P95、P99）とリクエストの経過時間分布を動的に計算でき、分散システムでの監視に適しています。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summary&lt;/strong&gt; とスライディングウィンドウを組み合わせることで、平均値などの単純な指標を計算できますが、分位数の柔軟性に欠け、多インスタンスアグリゲーションもサポートしていません。
あなたのシナリオでは、極端なリクエストの経過時間（例：P99）と大部分のリクエストの平均値を監視する必要があるため、&lt;strong&gt;ヒストグラム&lt;/strong&gt; を使用し、スライディングウィンドウを組み合わせてシステムのパフォーマンスを動的に分析することをお勧めします。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
