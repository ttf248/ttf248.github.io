<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Protobuf on 向叔の手帳</title>
        <link>https://blog.ttf248.life/ja/tags/protobuf/</link>
        <description>Recent content in Protobuf on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ja/tags/protobuf/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>プロトバッファのゼロ値の落とし穴：デフォルト値がビジネスロジックを密かに破滅させる</title>
        <link>https://blog.ttf248.life/ja/p/protobuf-zero-value-traps/</link>
        <pubDate>Thu, 20 Feb 2025 15:26:51 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/protobuf-zero-value-traps/</guid>
        <description>&lt;p&gt;米国株には3つの取引時間帯があり、それぞれ盤前、盤中、盤後です。データインターフェースは、可能な限り帯域幅を節約するため、最初に全量データを送信し、その後はすべてのフィールドで増分データのみをプッシュするロジックを採用しています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なぜ最適な方法を使わないのか？異なるプロジェクトチームが関わっていて、すでに何年も稼働しているものもある。当方は新規連携なので、できる限り互換性を保つしかない。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一連の問題&#34;&gt;一連の問題
&lt;/h2&gt;&lt;p&gt;概要だけ見れば、まだ問題なさそうに見えるかもしれない。しかし、システムアーキテクチャに問題が持ち込まれ、一連の問題を引き起こしている。先の問題を解決したと思えば、また新しい問題が発生し、それは以前の問題が原因だ。&lt;/p&gt;
&lt;h3 id=&#34;取引期間を識別できません&#34;&gt;取引期間を識別できません。
&lt;/h3&gt;&lt;p&gt;既知ディスク上の段階定義は、&lt;code&gt;protobuf&lt;/code&gt; 中定义为 0，但是在收到数据的时候由于是增量推送，业务方无法有效识别这个__INLINE_CODE_1__がデフォルト値か、実際のビジネス値かを指すものとします。&lt;/p&gt;
&lt;p&gt;毎回0を受け取ると、この0が新しいクォート設定の値なのか、protobufのデフォルト値なのかを判断できない。&lt;/p&gt;
&lt;h3 id=&#34;オプション導入&#34;&gt;オプション導入
&lt;/h3&gt;&lt;p&gt;Since protobuf release 3.15, proto3 supports using the optional keyword (just as in proto2) to give a scalar field presence information&lt;/p&gt;
&lt;p&gt;グループ内の通信プロトコルは、&lt;strong&gt;&lt;em&gt;5&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;3&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;6&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;4&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;7&lt;/em&gt;&lt;/strong&gt; に基づいており、プロジェクトの基盤が静的ライブラリとして提供されているため、コンパイルチェーン全体をアップグレードする必要があり、コストは非常に高い。&lt;/p&gt;
&lt;h3 id=&#34;gccのバージョン問題&#34;&gt;GCCのバージョン問題
&lt;/h3&gt;&lt;p&gt;なんとか案を思いついたものの、基盤で2つの異なるバージョンをリリースし、可能な限り &lt;code&gt;protobuf&lt;/code&gt; 新版本的编译依赖传播。但是在编译的时候，发现 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 版本太低，不支持 &lt;strong&gt;INLINE_CODE_2&lt;/strong&gt; の新機能を抑制する。&lt;/p&gt;
&lt;p&gt;チーム内でよく使用されるサーバーの種類：CentOS 7、CentOS 8。CentOS 7 のデフォルトバージョンは 7.4 以上であるため、CentOS 7 はサポートできません。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bug 82461 - [7 Regression] Temporary required for brace-initializing (non-literal-type) member variable&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最終、関連サービスのデプロイやコンパイルサーバーをCentOS 8に移行することで、この問題が解決した。&lt;/p&gt;
&lt;h2 id=&#34;合理な列挙&#34;&gt;合理な列挙
&lt;/h2&gt;&lt;p&gt;問題全体を振り返ると、実はもっと簡単で効率的な解決策があります。それは、列挙の定義を0からではなく1から始めるように調整することです。これにより、デフォルト値とビジネス値を効果的に区別でき、上記の様々な問題を回避できます。&lt;/p&gt;
&lt;h3 id=&#34;なぜ1から始めるのが妥当だろうか&#34;&gt;なぜ1から始めるのが妥当だろうか？
&lt;/h3&gt;&lt;p&gt;__INLINE_CODE_0__において、列挙型のデフォルト値は常に0に固定されています。もしビジネス上の意味を持つ値を0として定義した場合（例えば「盤中」）、増分プッシュ時に受信した0がビジネス値なのか未設定のデフォルト値なのかを判断することができません。しかし、列挙型を1から開始して定義すれば、0を有意義でないデフォルト値や「不明」な状態として保持できるため、問題は解決されます。&lt;/p&gt;
&lt;p&gt;推奨される実践：&lt;/p&gt;
&lt;p&gt;プロトバッファの列挙型を設計する際は、常に 0 を無意味なデフォルト値として定義してください（例：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 或 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;）。
実際のビジネス値を1から割り当て、デフォルト値の0と区別する。&lt;/p&gt;
&lt;p&gt;この小さな調整により、取引セッションの識別問題を解決するだけでなく、将来のプロトコル設計のための貴重な経験となりました。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
