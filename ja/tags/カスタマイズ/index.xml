<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>カスタマイズ on 向叔の手帳</title>
        <link>https://blog.ttf248.life/ja/tags/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/</link>
        <description>Recent content in カスタマイズ on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ja/tags/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Hugo Module カスタマイズ、テーマ改修：アイデア解説</title>
        <link>https://blog.ttf248.life/ja/p/hugo-module-custom-theme-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/hugo-module-custom-theme-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を振り返ると、サイトは何度もテーマを変更しており、その度にカスタマイズが施されている。ここでは、カスタマイズしたテーマのアイデアについて記録しておく。筆者の__INLINE_CODE_0__也有个仓库，短暂的维护过even主题，后来由于强迫症，非想要升级__INLINE_CODE_1__BOLD_4&lt;code&gt;stack&lt;/code&gt;テーマ。&lt;/p&gt;
&lt;h2 id=&#34;ユゴのモジュール化&#34;&gt;ユゴのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化と聞くと、NginxのモジュールやIDEAプラグインなどが思い浮かぶかもしれません。通常、いくつかのモジュールをアップロードすることで、差別化されたニーズを満たすことができます。皆がこのモジュール方式を好む主な理由は、柔軟性が高く、大した労力なしに自身のニーズに対応できるからです。多くの場合、全体としては似ていても、細部には差異が存在します。これもまた、技術的な複雑さだけでなく、ビジネスの複雑さも示しています。ほとんどの場合、私たちはビジネスの複雑さに直面します。これはまさに、ソフトウェア業界における「隔行如隔山」という言葉を最もよく表していると言えるでしょう。現在では、インターネット業界だけでなく、金融業界や伝統的な製造業に至るまで、情報化システムを活用して企業の生産と管理を支援しています。同じ休暇申請システムでも、同じ業界の異なる企業間でも差異が生じることがあります。&lt;/p&gt;
&lt;p&gt;そのモジュールは、一般的にイメージされるモジュールとは少し異なり、機能単位で多様なニーズに対応するのではなく、ディレクトリ構造を主体として同一の構造を識別します。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo架构 — Hugo的模块&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;その方法はまだ使えるが、本稿では推奨しない。テーマに更新があった場合、保守が煩雑になるため、個別のGitリポジトリでテーマを管理する必要がある。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供していただければ日本語に翻訳します&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;/h2&gt;&lt;p&gt;モジュール化の基礎概念を理解していれば、カスタムテーマの理解は非常に簡単になるでしょう。現在のテーマも、複数の異なるモジュールが組み合わさったもので、変更したいモジュールがあれば、対応するテンプレートファイルを修正すればよいのです。&lt;/p&gt;
&lt;p&gt;公式ドキュメントより：&lt;/p&gt;
&lt;p&gt;Using this method, there won&amp;rsquo;t be any file under &lt;code&gt;themes&lt;/code&gt; directory. In order to modify the theme, you will have to copy the file you want to modify to the same directory under &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, in order to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you will have to copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copy the code from theme&amp;rsquo;s repository). The same applies to &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルを見つけるには&#34;&gt;テンプレートファイルを見つけるには。
&lt;/h2&gt;&lt;h3 id=&#34;正統な考え方&#34;&gt;正統な考え方
&lt;/h3&gt;&lt;p&gt;テーマのソースコードファイルを確認し、設計思想を理解した上で、対応するテンプレートファイルを修正すればよい。&lt;/p&gt;
&lt;h3 id=&#34;乱暴な考え方&#34;&gt;乱暴な考え方
&lt;/h3&gt;&lt;p&gt;筆者はフロントエンドコードに詳しくないので、時には乱暴な方法を取ることがあります。例えば、ブラウザで該当のページを開き、変更したい箇所を見つけて、__INLINE_CODE_0__的方式，定位到__INLINE_CODE_1__を使ってテーマソースコード内で検索し、対応するファイルを見つけたら、コピーしてサイトディレクトリに置き、修正すればよいのです。&lt;/p&gt;
&lt;h2 id=&#34;ちょっとしたコツ&#34;&gt;ちょっとしたコツ
&lt;/h2&gt;&lt;p&gt;公式には、スタイルをカスタマイズするためのファイルが用意されています。変更箇所は複数のファイルに分割し、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; ファイルでそれらのファイルを読み込むことで、より効果的にスタイルファイルを管理できます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/hugo-module-custom-theme-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;変更点まとめ-6時間&#34;&gt;変更点まとめ (6時間)
&lt;/h2&gt;&lt;p&gt;今は、&lt;em&gt;強調&lt;/em&gt; &lt;strong&gt;太字&lt;/strong&gt; &lt;em&gt;さらに強調&lt;/em&gt; は、簡単に片付けられる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバルテキストスタイル。以前の &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 融合 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; の表示スタイルを引き継ぎ、中国語に最適化されています。&lt;/li&gt;
&lt;li&gt;ホームページ：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;トップページ：記事に要約プレビューを追加しました（時間がかかったため、多少の裏手取りをしています）。&lt;/li&gt;
&lt;li&gt;スクロールバー：スタイルを少し修正しました。&lt;/li&gt;
&lt;li&gt;コードブロックに、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; コードハイライトプラグインを導入し、コードブロックのスタイルを改善しました。&lt;/li&gt;
&lt;li&gt;一部内容は転載、新規に著作者情報表示、元リンク表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：上部のカテゴリ画像、テーマのカラーオーバーレイを削除し、オリジナル画像をそのまま表示。&lt;/li&gt;
&lt;li&gt;年ごとの分類による統計表示パネルを追加しました。&lt;/li&gt;
&lt;li&gt;アーカイブページ：2列表示レイアウト&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スクリプトで、カスタム変数を利用して概要プレビューを実現します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コードの再利用率が極端に高いのも問題になり、ある部分を変更すると他の部分にも影響が出てくるため、テーマを修正する際は、既存のロジックを壊さないように注意が必要です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;この男の修正はさらに完璧になった：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ストライク_11__&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推奨ページ、メールお問い合わせ。当サイトではコメント欄は開放しておりません。&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        
    </channel>
</rss>
