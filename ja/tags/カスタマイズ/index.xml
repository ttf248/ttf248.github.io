<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>カスタマイズ on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/</link>
        <description>Recent content in カスタマイズ on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Hugoモジュールカスタムテーマ改修：アイデア解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-custom-theme-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-custom-theme-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を振り返ると、サイトは何度もテーマを変更してきた。たびにカスタムした変更があり、ここではその変更のアイデアを記録しておく。筆者のGitHubにもリポジトリがあり、一時的にEvenテーマをメンテナンスしていたが、強迫観念から最新版にHugoコンパイラをアップデートしようとした結果、Evenテーマとの互換性がなくなり、Stackテーマに戻した。&lt;/p&gt;
&lt;h2 id=&#34;ヒューゴのモジュール化&#34;&gt;ヒューゴのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化と聞くと、NginxのモジュールやIDEAプラグインなどが思い浮かぶかもしれません。通常は、いくつかのモジュールをアップロードすることで、私の差別化されたニーズを満たすことができます。皆がこのモジュールを好む主な理由は、十分に柔軟性があり、あまり労せずして自身のニーズを満たせるからです。なぜなら、多くの場合、全体としては似ていても、細部には差異があるからです。これもまた、ソフトウェアの複雑さを物語っており、技術的な複雑さだけでなく、ビジネス上の複雑さも存在します。ほとんどの場合、私たちはビジネス上の複雑さに直面します。これは、ソフトウェア分野における「隔行如隔山」という言葉の最も良い説明です。現在では、インターネット業界だけでなく、金融業界や伝統的な製造業に至るまで、情報化システムを利用して企業の生産と管理を支援しています。同じ休暇申請システムでも、同じ業界であっても、異なる会社ごとに差異が生じることがあります。&lt;/p&gt;
&lt;p&gt;そして、Hugoのモジュールは、皆さんが想像するような機能単位で多様なニーズを満たすものではなく、むしろディレクトリ構造を主とし、同じ構造を識別することに重点を置いています。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo 架构 — Hugo 的模块&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Git サブモジュール方式は引き続き利用可能ですが、本稿では推奨しません。テーマの更新が発生した場合、個別の Git リポジトリでテーマを管理する必要があり、メンテナンスが煩雑になります。&lt;/p&gt;
&lt;h2 id=&#34;テーマの変更ロジック&#34;&gt;テーマの変更ロジック
&lt;/h2&gt;&lt;p&gt;モジュール化の基礎概念を理解した上で、カスタムテーマを理解するのは非常に簡単になります。現在Hugoが提供しているテーマも、複数の異なるモジュールを組み合わせて作られており、もし特定のモジュールを変更したい場合は、対応するテンプレートファイルを特定して修正すれば良いのです。&lt;/p&gt;
&lt;p&gt;Stack公式ドキュメントからの抜粋です。&lt;/p&gt;
&lt;p&gt;Using this method, there won&amp;rsquo;t be any file under &lt;code&gt;themes&lt;/code&gt; directory. In order to modify the theme, you will have to copy the file you want to modify to the same directory under &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, in order to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you will have to copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copy the code from theme&amp;rsquo;s repository). The same applies to &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルを見つけるにはどうすればいいですか&#34;&gt;テンプレートファイルを見つけるにはどうすればいいですか。
&lt;/h2&gt;&lt;h3 id=&#34;正統な発想&#34;&gt;正統な発想
&lt;/h3&gt;&lt;p&gt;テーマのソースファイルを確認し、デザインの意図を理解した上で、対応するテンプレートファイルを修正すればよい。&lt;/p&gt;
&lt;h3 id=&#34;乱暴な考え方&#34;&gt;乱暴な考え方
&lt;/h3&gt;&lt;p&gt;私はフロントエンドコードに詳しくないので、時には乱暴な方法を取ることがあります。例えば、ブラウザで該当のページを開いて、変更したい場所を見つけ、「要素を検証」機能を使って&lt;code&gt;css name&lt;/code&gt;を特定し、テーマソースコード内で検索して、対応するファイルを見つけたら、それをサイトディレクトリにコピーして修正するというものです。&lt;/p&gt;
&lt;h2 id=&#34;ちょっとしたコツ&#34;&gt;ちょっとしたコツ
&lt;/h2&gt;&lt;p&gt;公式デフォルトでスタイルをカスタマイズするためのファイルが用意されており、変更が必要な箇所は複数のファイルに分割し、&lt;code&gt;custom.scss&lt;/code&gt;ファイルから他のファイルをインポートすることで、よりスタイルのファイルを整理して管理できます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hugo-module-custom-theme-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;変更点まとめ6h&#34;&gt;変更点まとめ(6h)
&lt;/h2&gt;&lt;p&gt;現在はすでに「AI」コーディングの元年であり、詳細についてはここでは割愛しますが、簡単な変更点としては、コピーボタンのスタイルの調整やコードブロックのスタイルの再設定などです。「ChatGPT」なら簡単に対応できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバルテキストスタイル。以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; の表示スタイルを継承し、中国語に親和性がある。&lt;/li&gt;
&lt;li&gt;ホームページ：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;トップページ：記事に要約プレビューを追加しました（時間がかかりすぎるので、多少の裏手回りを経て実現しました）。&lt;/li&gt;
&lt;li&gt;スクロールバー：スタイルを少し修正しました。&lt;/li&gt;
&lt;li&gt;コードブロックに &lt;code&gt;highlight.js&lt;/code&gt; コードハイライトプラグインが導入され、コードブロックのスタイルが改善されました。&lt;/li&gt;
&lt;li&gt;一部内容は転載であり、新規に著作者情報表示と原文リンク表示を追加しました。&lt;/li&gt;
&lt;li&gt;アーカイブページ：上部のカテゴリ画像、テーマに付属するカラーオーバーレイを削除し、オリジナルの画像をそのまま表示します。&lt;/li&gt;
&lt;li&gt;アーカイブページ：年ごとの分類による統計表示パネルを追加しました。&lt;/li&gt;
&lt;li&gt;アーカイブページ：2列表示レイアウト&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スタックのテーマのコンポーネント再利用率が非常に高いため、ホームページの記事に概要プレビューを追加するのに時間がかかりました。対応するコンポーネントを変更した結果、記事の詳細ページも変更され、正文の内容が重複して表示されるようになりました。また、&lt;code&gt;golangテンプレート&lt;/code&gt;の構文にも詳しくなかったので、時間がかかりました。コンポーネント間のパラメータ伝送は最後までうまくいかず、最終的には裏技を使って、ホームページに個別の&lt;code&gt;JavaScript&lt;/code&gt;スクリプトを導入し、カスタム特殊変数を使用して概要プレビューを実現しました。&lt;/p&gt;
&lt;p&gt;コードの再利用率が時々高すぎると問題になることがあります。ある場所を変更すると、他の場所にも影響が出てしまうため、テーマを修正する際は、既存のロジックを壊さないように注意してください。&lt;/p&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;この男の人の修正はさらに完璧になりました：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このサイトでは簡単な &lt;code&gt;Waline&lt;/code&gt; コメントシステムを導入しています。&lt;code&gt;stack&lt;/code&gt; テーマはデフォルトで &lt;code&gt;Waline&lt;/code&gt; をサポートしており、&lt;code&gt;config.toml&lt;/code&gt; で設定するだけで利用できます。&lt;/p&gt;
&lt;p&gt;推奨ページ、メールお問い合わせ。当サイトではコメント欄は開放しておりません。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
