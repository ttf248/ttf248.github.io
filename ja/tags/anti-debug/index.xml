<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Anti-Debug on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/anti-debug/</link>
        <description>Recent content in Anti-Debug on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/anti-debug/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>プログラムがデバッグを回避する方法</title>
        <link>https://ttf248.life/ja/p/program-how-to-anti-debug/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-how-to-anti-debug/</guid>
        <description>&lt;p&gt;ふと思いついて、新しい壁紙を探してみることに。普段は黒系のシリーズを使っているから、一部の領域にカラフルなものを配置し、デスクトップにはアイコンを置きたい。他の配色で壁紙にすると、アイコンがぼやけてしまうだろう。&lt;/p&gt;
&lt;p&gt;上のアセンブリコードをしばらく考えてみたけど、理解できない。AIに頼んでみると、命令は説明してくれたものの、状況の説明はない。これは必ず特定の状況で使われる命令だろう。通常のコードではありえない。&lt;/p&gt;
&lt;p&gt;AIは今のところ検索エンジンに劣りますね、アセンブリ言語の知識が足りていないからです。&lt;/p&gt;
&lt;h2 id=&#34;壁紙&#34;&gt;壁紙
&lt;/h2&gt;&lt;p&gt;黒色の集合壁紙&lt;/p&gt;
&lt;h2 id=&#34;アセンブリコード&#34;&gt;アセンブリコード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現実的な応用シーン&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;説明&#34;&gt;説明
&lt;/h2&gt;&lt;p&gt;TrapFlagは、フラグレジスタ内のフラグであり、このフラグが設定されると例外SINGLE_STEPが発生します。もしコードをトレースしている場合、デバッガによってこのフラグはクリアされるため、この例外を見ることができません。&lt;/p&gt;
&lt;p&gt;実際のテストでは、検出デバッグの関数をステップオーバーで通過すると、デバッグが検出されないことがわかった。検出関数を実行する際にステップインした場合のみ検出される。(資料調査、未検証)&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;関連資料は、ウェブサイトの英語版を翻訳したもので、サイトでは様々なデバッグ対策技術が解説されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
