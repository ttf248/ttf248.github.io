<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Submodule on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/submodule/</link>
        <description>Recent content in Submodule on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/submodule/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git 子モジュール提交記録の消失</title>
        <link>https://ttf248.life/ja/p/git-submodule-merge-history-lost/</link>
        <pubDate>Mon, 02 Jun 2025 16:44:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-submodule-merge-history-lost/</guid>
        <description>&lt;p&gt;ローカルにGitリポジトリがあり、そのサブモジュールがプル時に一時ブランチになっている。私はその一時ブランチでいくつかのコードをコミットし、その後サブモジュールを&lt;code&gt;main&lt;/code&gt;ブランチに戻した。しかし、これらのコミットされたコードが見つからず、&lt;code&gt;main&lt;/code&gt;ブランチで見つけることができない。また、その一時ブランチの履歴も見つけられない。&lt;/p&gt;
&lt;h2 id=&#34;ソリューション&#34;&gt;ソリューション
&lt;/h2&gt;&lt;p&gt;Git サブモジュールで一時的なブランチにコミットし、&lt;code&gt;main&lt;/code&gt; ブランチに戻った後にこれらのコミットが見つからない場合。この状況を解決するには、以下の手順を実行してください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;コミット履歴の確認&lt;/strong&gt;: サブモジュールディレクトリに移動し、reflog を使用して失われたコミットを見つけます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新しいブランチを作成してコミットを保存&lt;/strong&gt;: 失われたコミットに基づいて新しいブランチを作成します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;/code&gt; ブランチへのマージまたは cherry-pick&lt;/strong&gt;: コードをメインブランチに統合します。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下は具体的な操作手順です：&lt;/p&gt;
&lt;h2 id=&#34;ソリューション-1&#34;&gt;ソリューション
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# サブモジュールディレクトリに移動
cd path/to/your/submodule

# HEADの変更履歴を確認 (未マージされたブランチのコミットも含む)
git reflog
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ソリューション-2&#34;&gt;ソリューション
&lt;/h2&gt;&lt;p&gt;PS F:\dev\notebook\scripts\hugo-content-suite&amp;gt; git reflog
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{0}: checkout: c8d070651310e90d283cb64d98da088c5fe05e73 から main へ移動
c8d0706 HEAD@{1}: commit: feat: Markdown記法の使用方法ドキュメントを追加、詳細な構文例と効果のデモンストレーションを提供
48250f5 HEAD@{2}: commit: feat: 記事翻訳プレビュー機能を削除し、翻訳プロセスを簡素化
b8280b6 HEAD@{3}: commit: feat: 絶対パスを取得する機能を追加し、相対パスを絶対パスに変換することをサポート
92c354b HEAD@{4}: commit: fix: 記事スキャンロジックの修正、絶対パスでのスキャンを保証&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;92c354b HEAD@{4}: commit: fix: 文章スキャンロジックの修正、絶対パスでのスキャンを保証
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{5}: checkout: main から de05175d4ec0828e3ae95d726b09dfff18f67a23 に移動
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{6}: clone: &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite.git&lt;/a&gt; から&lt;/p&gt;
&lt;h2 id=&#34;ソリューション-3&#34;&gt;ソリューション
&lt;/h2&gt;&lt;h1 id=&#34;破損したコミットからの新しいブランチの作成例456defを使用&#34;&gt;破損したコミットからの新しいブランチの作成（例：456defを使用）
&lt;/h1&gt;&lt;p&gt;git checkout -b saved-work 456def&lt;/p&gt;
&lt;h1 id=&#34;メインブランチに戻る&#34;&gt;メインブランチに戻る
&lt;/h1&gt;&lt;p&gt;git checkout main&lt;/p&gt;
&lt;h1 id=&#34;保存された作業をメインにマージするまたはcherry-pickを使用して特定のコミットを選択&#34;&gt;保存された作業をメインにマージする（またはcherry-pickを使用して特定のコミットを選択）
&lt;/h1&gt;&lt;p&gt;git merge saved-work&lt;/p&gt;
&lt;h1 id=&#34;または&#34;&gt;または
&lt;/h1&gt;&lt;p&gt;git cherry-pick 456def&lt;/p&gt;
&lt;h1 id=&#34;プロジェクトのルートディレクトリに戻りサブモジュールの更新をコミットする&#34;&gt;プロジェクトのルートディレクトリに戻り、サブモジュールの更新をコミットする
&lt;/h1&gt;&lt;p&gt;cd ..
git add path/to/your/submodule
git commit -m &amp;ldquo;Update submodule to include new changes&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;主要操作手順&#34;&gt;主要操作手順
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git reflog&lt;/strong&gt;: HEADのすべての履歴を表示し、ブランチに関連付けられていないコミットも含む&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git checkout -b&lt;/strong&gt;: 任意のコミットから新しいブランチを作成し、作業を保存する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git merge/cherry-pick&lt;/strong&gt;: 保存されたコミットをターゲットブランチに統合する
reflogで記録が見つからない場合は、&lt;code&gt;git fsck --lost-found&lt;/code&gt;を使用して孤立したコミットを探す必要があるかもしれませんが、これは非常にまれなケースです。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        
    </channel>
</rss>
