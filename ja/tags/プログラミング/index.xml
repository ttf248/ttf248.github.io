<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>プログラミング on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
        <description>Recent content in プログラミング on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 07:41:32 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Cursor AI プログラミングIDE のトライアル</title>
        <link>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</link>
        <pubDate>Thu, 23 Jan 2025 19:30:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</guid>
        <description>&lt;p&gt;一年又转眼即逝之际，在工作中最大的变化莫过于AI参与度显著提升了。相较于以往，不同开发语言之间的切换，需要开发者熟悉各种语言不同的API接口，现在这些基础代码都可以通过AI生成代码了，对于开发者来说，无疑是一个巨大的福音。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;23年の時点で、簡単な入門紹介を2本書いたところでしたが、今では25年となり、どう表現しようか… 顕著な進歩を感じ取ることはなく、自律的な認知能力を発展させ、タスクを合理的に分割できることなどが求められます。もちろん、最も重要なのはAIが生成したコードにバグがないかを識別することです。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;Github Copilot
&lt;/h2&gt;&lt;p&gt;いつの日か忘れましたが、シンガポールでサーバーがデプロイされているという情報を見つけました。国内では利用され、長期間のVPN接続も不要になりました。ただし、ログイン時にはVPN接続が必要ですが、そのVPN接続はログイン時のみ使用し、その後はオフにしておくことができます。&lt;/p&gt;
&lt;p&gt;日常的な使い道としてはGithub Copilotをより多く活用しています。この拡張機能は、VS CodeやVisual Studioで直接利用できます。2つのソフトウェア間の切り替えが不要です。ChatGPTと比較して、Github Copilotの方がプロジェクトのサポートが優れており、インタラクションもフレンドリーです。また、一部のローカルファイルをAIに「学習」させることで、生成されるコードがあなたのプロジェクトに合っているものになります。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;最近、Cursor AI という新しいAIプログラミングIDEを見つけました。これはGithub Copilotをベースにしたもので、このIDEはよりスマートで、直接ファイルを作成するのを手伝ってくれます。&lt;/p&gt;
&lt;p&gt;簡単な使い方は気に入りましたが、既存プロジェクトの理解はまだ十分ではありません。ローカルプロジェクトのファイルが多い場合や、大規模なリファクタリング、最適化、調整を行う場合は、やはり&lt;strong&gt;開発者がタスクを分割する必要がある&lt;/strong&gt;でしょう。&lt;/p&gt;
&lt;p&gt;例として、cursoにエンジニアモードを切り替えて、以下の内容を入力してみましょう。「複数の異なるスタイルで切り替え可能な個人用履歴書ウェブページの作成、およびデータ表示用の個人情報を埋めることを忘れないでください。」&lt;/p&gt;
&lt;p&gt;何度かやり取りするうちに、以下のようなウェブページが得られます。もちろん、このウェブページは比較的シンプルですが、初心者にとっては非常に良いでしょう。 ## Cursor AI&lt;/p&gt;
&lt;p&gt;最近、Cursor AI という新しいAIプログラミングIDEを試してみました。これはGithub Copilotにも基づいているもので、このIDEはさらに賢く、直接ファイルを作成するのを手伝ってくれます。&lt;/p&gt;
&lt;p&gt;簡単な使い心地ですが、全体的に良い印象を受けました。しかし、既存のプロジェクトの理解はまだ十分ではなく、ローカルプロジェクトのファイルが多い場合は、大規模なリファクタリングや最適化、調整には&lt;strong&gt;開発者がタスクを分割&lt;/strong&gt;する必要があります。&lt;/p&gt;
&lt;p&gt;例を示します：curso のエンジニアモードに切り替えて、以下の内容を入力：「個人用履歴書ウェブページの作成を支援し、複数の異なるスタイルを切り替えられるようにする。個人情報をデータ表示のために入力することを忘れないでください。」&lt;/p&gt;
&lt;p&gt;何度か&lt;strong&gt;やり取り&lt;/strong&gt;をした結果、以下のようなウェブページが得られました。もちろん、このウェブページは比較的シンプルですが、初心者にとっては非常に良いでしょう。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai-1&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cursor/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;履歴書&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
