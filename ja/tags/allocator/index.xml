<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Allocator on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/allocator/</link>
        <description>Recent content in Allocator on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/allocator/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>標準ライブラリコンテナのメモリ割り当て子：allocator</title>
        <link>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</link>
        <pubDate>Mon, 30 Dec 2019 13:26:19 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</guid>
        <description>&lt;p&gt;カスタムディストリビューターは、パフォーマンスを向上させ、メモリ使用効率を高め、頻繁な少量のメモリ割り当ての問題を解決できます。&lt;/p&gt;
&lt;h4 id=&#34;前因&#34;&gt;前因
&lt;/h4&gt;&lt;p&gt;近頃、ネットワークパケットの開発に携わり、頻繁に小さなメモリ領域を申請し解放する必要があり、当初はメモリプールを使用することを検討していました。いくつかの既存のメモリプールを確認したところ、この
&lt;a class=&#34;link&#34; href=&#34;https://github.com/cacay/MemoryPool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cacay/MemoryPool&lt;/a&gt;
を見つけました。インターフェースを見たとき、このメモリプールの実装が少し奇妙だと疑問に思いました。「MemoryPool」の実装ロジックは、固定サイズのメモリ領域を申請することです。boostのメモリプールインターフェースを見てみると、テンプレートを提供し、使用時にインスタンス化します。ちょうどこのライブラリには、&lt;code&gt;allocator&lt;/code&gt;という概念について言及した記事があり、紹介されていました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;#### [wiki](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))

C++プログラミングにおいて、割り当て子（英語：allocator）はC++標準ライブラリの重要な構成要素です。C++のライブラリには、リスト、集合などのように、共通して「コンテナ」と呼ばれるさまざまなデータ構造が定義されています。これらのコンテナの共通の特徴は、プログラムの実行時にサイズを変更できることです。この機能を実装するために、動的メモリ割り当てが必要となり、その際に割り当て子が使用されます。具体的には、割り当て子は、標準テンプレートライブラリ（STL）コンテナのメモリ管理に関する低レベルの詳細を包摂します。デフォルトでは、C++標準ライブラリは独自の汎用割り当て子を使用しますが、必要に応じてプログラマは独自の割り当て子をカスタマイズして代替することも可能です。
``` - 分配器は、アレクサンドル・ステパノフによってC++標準テンプレートライブラリ（Standard Template Library、以下STL）の一部として発明されました。当初の目的は、「ライブラリをより柔軟にし、低レベルなデータモデルに依存しない方法を用いる」ことでした。また、プログラマがライブラリ内でカスタムポインタや参照型を利用することを可能にするものでした。しかし、標準テンプレートライブラリをC++標準に組み込む際、C++標準委員会は、データモデルの完全な抽象化処理が不可受容な性能低下をもたらすことを認識し、妥協策として、分配器に対する制限がより厳しくなりました。その結果、ステパノフ当初の構想と比較して、現在の標準で記述されている分配器のカスタマイズ性は大幅に制限されています。

#### [wiki](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))
ディストリビュータのカスタマイズには制限があるものの、多くのケースではカスタムディストリビュータの使用が必要であり、これは通常、異なる種類のメモリ空間（共有メモリと回収済みメモリなど）へのアクセス方法をカプセル化したり、メモリプールを使用したメモリ割り当て時のパフォーマンス向上を目的に行われます。さらに、メモリ使用量と実行時間という観点から見ると、頻繁に少量のメモリを割り当てるプログラムでは、専用のディストリビュータを導入することで大きなメリットが得られます。

#### [使用要件](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))
カスタムディスペンサーを定義する主な理由は、パフォーマンスの向上です。専用のカスタムディスペンサーを使用することで、プログラムのパフォーマンスを向上させたり、メモリ使用量を削減したり、あるいは両方を組み合わせることも可能です[4][8]。デフォルトディスペンサーは`new`演算子を使用してストレージ空間を割り当てるため[文 5]、これは通常C言語のヒープ割り当て関数（malloc()）によって実装されます[9]。ヒープ割り当て関数は、偶発的な大量メモリ割り当てに最適化されているため、ベクトルや双端キューのような、一度に大量のメモリを必要とするコンテナにメモリを割り当てる場合は、デフォルトディスペンサーは通常効率的です[8]。しかし、連想コンテナと双方向リストのような、頻繁に少量メモリを割り当てる必要があるコンテナを使用する場合、デフォルトディスペンサーを使用すると、通常パフォーマンスが低下します[4][9]。

#### [利用要請](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))
要するに、このセクション（……）（まるで）は、この標準がディストリビューターに対する「私は夢を見る」の演説です。夢が実現する前に、移植性を重視するプログラマーは、ステートレスなカスタムディストリビューターに限定されます。
——スコット・メイヤー，《Effective STL》
上記を鑑みて、この状況下では、メモリプールベースのディストリビューターを使用して、頻繁で少量の割り当ての問題を解決することが一般的です[8]。 デフォルトの「オンデマンド」方式とは異なり、メモリプールベースのアロケータを使用する場合、プログラムは事前に大量のメモリ（すなわち「メモリプール」）を割り当てます。その後、メモリを割り当てる必要があるときに、カスタムアロケータは、リクエスト側に対してプール内のメモリへのポインタを返すだけで済みます。オブジェクトが破棄される際には、実際にメモリを解放する必要はなく、代わりにメモリプールのライフサイクル終了時まで遅延させ、その時点で真正に解放されます[注 1][8]。

#### [使用要件](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))

「カスタム分配器」というテーマに関して、多くの C++ 専門家や関連著者の議論に参加しており、例えばスコット・メイスの『Effective STL』やアンデル・アレクサンドレスクの『Modern C++ Design』で言及されている。メイスは、特定の型 T の分配子のすべてのインスタンスが等しいとすれば、移植可能な分配子のインスタンスには状態を含んではならないと洞察している。C++ 標準はライブラリの実装者が状態付きの分配子をサポートするように推奨している[文 4]が、メイスは「この段落は、（まるで）素晴らしい見解だが、ほぼ空論であり」、分配子の制限は「過度に厳格」であると称している[4]。 例えば、STLのリストはスプラッシュ（splice）メソッドをサポートしており、あるリストオブジェクトAのノードを別のリストオブジェクトBに直接挿入することができます。これは、Aのアルロケーター（allocator）が確保したメモリを、Bのアルロケーターが解放することを意味し、そこからAとBのアルロケーターインスタンスは等しいという結論を導き出されます。メイヤーの結論は、アルロケーターは静的メソッドを使用する型として定義するのが最適であるということです。例えば、C++標準では、アルロケーターはrebindメソッドを実装したotherクラステンプレートを提供する必要があります。

#### [使用要件](https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_(C%2B%2B))

ヤニー・ストラウストルプが『C++プログラム設計言語』で述べたように、「厳密な割り当て制限により、各オブジェクトの情報が異なることを防ぐ」という点は「問題ない」（大意）とされ、ほとんどの割り当て器は状態を必要とせず、あるいは状態がない場合に性能が良いと指摘されている。彼は、メモリプール型、共有メモリ型、そしてガベージコレクション型の3つのカスタム割り当て器のユースケースを提案し、内部メモリプールを使用して少量のメモリを迅速に割り当て/解除する割り当て器の実装を示した。しかし、このような最適化は、彼が提供したサンプル割り当て器にもすでに実装されていることを認めている[3]。

カスタム割り当て器のもう一つの用途は、メモリ関連のエラーのデバッグである[10]。 これを実現するには、割り当て時に追加のメモリを割り当て、そこでデバッグ情報を保存するディスパッサーを作成できます。このようなディスパッサーは、同種の割り当て/解放が同一ディスパッサーによって行われるだけでなく、キャッシュオーバフローからプログラムをある程度保護することも可能です[11]。&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
