<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>タスク分解 on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%82%BF%E3%82%B9%E3%82%AF%E5%88%86%E8%A7%A3/</link>
        <description>Recent content in タスク分解 on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%82%BF%E3%82%B9%E3%82%AF%E5%88%86%E8%A7%A3/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AIプログラミングとタスク分解</title>
        <link>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;2年前、サイトにコード領域のコピー機能を追加するために、半日ほど試行錯誤した結果、レンダリング効果があまり理想的ではなかった。半ば無能なフロントエンド開発者として、改善することも思わずに、動けばそれで十分と考えていた。今年、&lt;code&gt;AI&lt;/code&gt;を使って小程序を開発し、フロントエンドの開発もより慣れてきた。そして、リファクタリングを行った（&lt;code&gt;AI&lt;/code&gt;が再設計）。&lt;/p&gt;
&lt;p&gt;悟り：タスク分解をして、多くの小さなタスクは&lt;code&gt;AI&lt;/code&gt;で開発すると手馴れた。すでに閉鎖された小程序において、&lt;code&gt;75%&lt;/code&gt;のコードを&lt;code&gt;AI&lt;/code&gt;が提供し、複数のタスクを分割して引き渡すことで、人工によってプロジェクトコードが&lt;code&gt;組み立て&lt;/code&gt;られた。&lt;/p&gt;
&lt;h2 id=&#34;前文&#34;&gt;前文
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.github.io/post/2022/001/%E4%BB%A5%E4%B8%BA%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E6%83%85%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%A4%8D%E5%88%B6%E6%8C%89%E9%92%AE/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;簡単なことだと考えたこと、コードのコピーボタンを追加&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;promot&lt;/strong&gt;: CSSとJavaScriptコードを設計し、class=&amp;ldquo;highlight&amp;quot;のクラスを持つWebページの要素とそのコンテナ内にコピーボタンを追加して、コードをコピーできるようにする。最初のドラフトは一見問題があるため、基本的には使用可能なものを生成し、コピーされた内容が不正確で冗長な文字が含まれているため、再度最適化を誘導し、コアとなる色のデザインを指定し、エフェクトを含める。
お客様がボタンのサイズと色に関して特定の要件をお持ちであることを理解しましたので、これらの要件に合わせてボタンのスタイルを再設計できます。以下に、ご提供いただいたカラーパレットを使用し、ボタンのサイズを最適化したCSSスタイルの例を示します。&lt;/p&gt;
&lt;h2 id=&#34;本文&#34;&gt;本文
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* 位置の調整 */
  right: 2px;
  padding: 3px 6px; /* サイズ縮小 */
  font-size: 12px; /* フォントサイズの変更 */
  background-color: #8FD1E1; /* ボタンの背景色 */
  color: #272822; /* 文字の色 */
  border: 1px solid #272822; /* ボーダーの色 */
  border-radius: 3px; /* 角丸 */
  cursor: pointer;
  opacity: 0.7; /* デフォルトの透明度 */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* 平滑なトランジション効果 */
}

.copy-btn:hover {
  opacity: 1; /* マウスオーバー時の透明度 */
  background-color: #A3D4E5; /* マウスオーバー時の背景色 */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;正文-1&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;このスタイルでは、ボタンのサイズとフォントサイズを小さくし、より洗練された印象にしました。また、ボタンのデフォルト状態を半透明にし、マウスをホバーすると不透明になり、背景色がわずかに明るくなることで視覚的なフィードバックを提供します。これにより、お客様のご希望の色合いも反映させつつ、モダンでユーザーフレンドリーな特徴を維持しています。
対応するよりシンプルな &lt;code&gt;JavaScript&lt;/code&gt; を以下に示します：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // すべての .highlight 要素を検索します
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // コピーボタンを作成します
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;コピー&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // ボタンを各 .highlight 要素に追加します
    highlight.appendChild(copyBtn);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;本文-1&#34;&gt;本文
&lt;/h2&gt;&lt;p&gt;// 各 .highlight 要素にボタンを追加します。
highlight.appendChild(copyBtn);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// クリックイベントリスナーを追加します。
copyBtn.addEventListener(&#39;click&#39;, function() {
  // .highlight の最初の &amp;lt;code&amp;gt; 要素がコピーするコードを含むと仮定します。
  const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## 正文
navigator.clipboard.writeText(code).then(() =&amp;gt; {
    // 複製成功メッセージを表示
    copyBtn.textContent = &#39;已コピー！&#39;;
    setTimeout(() =&amp;gt; {
      copyBtn.textContent = &#39;コピー&#39;;
    }, 2000);
  }).catch(err =&amp;gt; {
    console.error(&#39;複製失敗: &#39;, err);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;コード領域の右上隅、トップエリアにコピーボタンを追加することを望んでいたが、フロントエンドに関する知識が不足しており、キーワードに基づいて機能を正確に記述することができなかったため、AIとやり取りを繰り返すだけで期待された結果には至らなかった。&lt;/p&gt;
&lt;p&gt;しかし、時間の経過とともにAIがソフトウェア開発にどの程度影響を与えるのかはまだわからない。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
