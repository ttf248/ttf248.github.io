<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Claude on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/claude/</link>
        <description>Recent content in Claude on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 07:41:32 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/claude/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Claude4のリリース、開発を試す：hugoタグ、超リンク翻訳アシスタント</title>
        <link>https://ttf248.life/ja/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;本サイトはHugoで開発されていますが、筆者自身は常に中国語のタイトルを使用しており、その結果、生成される記事の超リンクが使いにくい状態でした。つまり、送信する際に、中国語の文字が超リンク内で%E4%BD%A0%E5%A5%BDのような形式にエスケープされてしまうため、見た目が良くありません。設定でslugを設定することで解決できますが、毎回手動で設定する必要があり、非常に面倒でした。
そこで、Claude4を使って翻訳アシスタントを開発し、中国語のタイトルを自動的に英語のslugに変換し、記事の中に超リンクを追加することを試みました。これにより、手動での設定を回避することができます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claude4はマジで最高！文脈理解能力が大幅に向上し、複雑なタスクの処理効率も飛躍的に向上しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;プロジェクトアドレス&#34;&gt;プロジェクトアドレス
&lt;/h2&gt;&lt;p&gt;国内プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
国外プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;コードの実装&#34;&gt;コードの実装
&lt;/h2&gt;&lt;p&gt;まず、実装の思路について説明します。すべての文章をスキャンし、タグ情報と文章タイトルを抽出した後、ローカルの大規模言語モデル（例：gemma-3-12b-it）を呼び出して翻訳します。&lt;/p&gt;
&lt;p&gt;実際の開発においては、前世代の大規模言語モデルと比較して、&lt;code&gt;Claude4&lt;/code&gt; はいくつかの顕著な点を発揮しました。機能要件が多いため、&lt;code&gt;Claude4&lt;/code&gt; はインタラクティブメニューを自動的に設計し、さまざまな使用シナリオを考慮しました。例えば、タグ処理に関しては、&lt;code&gt;Claude4&lt;/code&gt; はタグの統計と分析だけでなく、分類統計もサポートし、さらに&lt;strong&gt;ラベルのない文章&lt;/strong&gt;を検出することも可能です。また、プレビュー機能やタグページ生成機能も提供しています。&lt;/p&gt;
&lt;p&gt;ローカルの大規模言語モデルとの連携、翻訳キャッシュの追加、大規模なコードのリファクタリングなど、&lt;code&gt;Claude4&lt;/code&gt; はすべて一度に完了し、ほとんど問題が発生しませんでした。 プロジェクトの規模は小さいものの、多くの小さな機能を含んでいます。これまで開発プロセスにおいて、大規模モデルはしばしば前の内容を忘れてしまうことがありましたが、今回の「Claude4」は非常に優れたパフォーマンスを示し、&lt;strong&gt;文脈の消失がほとんど見られませんでした&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要するに、知能レベルが向上しており、今後の開発作業では「Claude4」をより多く活用し、日常的なコーディングの主力モデルとして使用していく予定です。&lt;/p&gt;
&lt;h2 id=&#34;翻訳キャッシュ&#34;&gt;翻訳キャッシュ
&lt;/h2&gt;&lt;p&gt;この注文に関する説明では、大規模モデルの呼び出し回数を減らすだけでなく、実際に12Bモデルをローカルで実行すると効率が非常に高く、時間ロスもありません。しかし、毎回大規模モデルを呼び出す場合は、やはり少し遅くなります。また、文章のリンクを固定するために、全量更新操作を実行した場合、文章のタイトルが長いため、稀に2回の翻訳結果が異なり、リンクが変わってしまうという状況が発生します。これは非常に困ります。&lt;/p&gt;
&lt;h2 id=&#34;機能最適化&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;プロジェクト全体を &lt;code&gt;Claude4&lt;/code&gt; に委ね、最適化の余地を分析し、以下の提案を得ました：&lt;/p&gt;
&lt;p&gt;コードレビューを実施した結果、問題点は一切見当たらず、例えば設定ファイルについては、既存のコードから元の設定をデフォルト設定に変換し、設定ファイルを読み込む際に、対応する設定ファイルが存在しない場合に自動的にデフォルト設定ファイルを作成することで、ユーザー側の操作ミスを防いでいます。 要件：原文を翻訳する際に、現在の翻訳効率を動的に計算し、残りの時間を予測し、関連情報をコンソールに出力します。現在、文章の文字数を取得し、各行の翻訳時に現在の翻訳文字数、時間、100文字あたりの翻訳時間の適合計算を行い、同時に文章全体の残りの翻訳推定時間を計算します。&lt;/p&gt;
&lt;p&gt;コードが完了しましたが、効果はそれほど良くありません。そこで、AIに新しい設計案を提案してもらいます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の効率計算方法を提供：リアルタイム効率、平均効率、スライディングウィンドウ効率&lt;/li&gt;
&lt;li&gt;表示方法の改善：プログレスバー、セクションごとの統計、動的更新&lt;/li&gt;
&lt;li&gt;より役立つ指標を追加：API呼び出し回数、成功率など&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードが完了した後、翻訳効率の統計情報がリアルタイムで大量に表示されることを見つけましたが、スクロールを無効にする機能はありませんでした。 要件：原文を翻訳する際に、現在の翻訳効率を動的に計算し、残りの時間を予測し、関連情報をコンソールに出力します。現在、文章の文字数を取得し、各行の翻訳時に現在の翻訳文字数、時間、100文字あたりの翻訳時間の適合計算を行い、同時に文章全体の残りの翻訳見積もり時間を計算しています。&lt;/p&gt;
&lt;p&gt;コードが完了しましたが、効果はそれほど良くありません。そこで、AIに新しい設計案を提案してもらいます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の効率計算方法を提供します（リアルタイム効率、平均効率、スライディングウィンドウ効率など）&lt;/li&gt;
&lt;li&gt;表示方法の改善を行います（進捗バー、セグメント統計、動的更新など）&lt;/li&gt;
&lt;li&gt;より役立つ指標を追加します（API呼び出し回数、成功率など）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードが完了した後、翻訳効率の統計情報がリアルタイムで大量に表示されることを見つけましたが、スクロールを無効化していません。&lt;/p&gt;
&lt;h3 id=&#34;性能統計メニュー&#34;&gt;性能統計メニュー
&lt;/h3&gt;&lt;p&gt;新たに作成された&lt;strong&gt;性能統計メニュー&lt;/strong&gt;は、私自身で設計したものでも、これほど完璧とは言い難い。&lt;/p&gt;
&lt;p&gt;📊 性能統計：
🔄 翻訳回数：360
⚡ キャッシュヒット率：1.4% (5/365)
⏱️ 平均翻訳時間：315.927234ms
📁 ファイル操作：73
❌ エラー回数：0&lt;/p&gt;
&lt;h3 id=&#34;プログレスバーの表示&#34;&gt;プログレスバーの表示
&lt;/h3&gt;&lt;p&gt;新增の&lt;strong&gt;プログレスバーの表示&lt;/strong&gt;、詳細な進捗状況、経過時間、残り時間の推定
機能を選択してください (0-13): 10
🔍 翻訳対象を収集中&amp;hellip;
📄 キャッシュファイルが読み込まれました。翻訳記録は 0 件含まれています
📊 翻訳キャッシュ統計:
🏷️ ラベル総数: 229 個
📝 文章総数: 131 篇
✅ キャッシュ済み: 0 個
🔄 翻訳が必要: 360 個&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;p&gt;完全な翻訳キャッシュを確認しますか？(y/n): y
🚀 完全な翻訳キャッシュの生成中&amp;hellip;
📄 キャッシュファイルが読み込まれました。翻訳レコードは0件含まれます。
🔍 キャッシュ内の翻訳をチェック中&amp;hellip;
🔄 翻訳する必要があるラベルは360個です
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - 時間: 3秒 - 残り時間: 約3分8秒
💾 キャッシュファイルが保存されました。翻訳レコードは5件含まれます。
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2. 8% - 実行時間：6秒 - 残り推定時間：3分28秒💾 キャッシュファイルが保存されました（翻訳記録10件を含む）
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - 実行時間：9秒 - 残り推定時間：3分30秒💾 キャッシュファイルが保存されました（翻訳記録15件を含む）&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示-1&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;p&gt;[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - 経過時間: 13秒 - 残り時間予測: 3分36秒💾 キャッシュファイルが保存されました（翻訳記録 20 件を含む）
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - 経過時間: 16秒 - 残り時間予測: 3分33秒💾 キャッシュファイルが保存されました（翻訳記録 25 件を含む）
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8. 3% - 実行時間: 19秒 - 残り推定時間: 3分30秒 💾 キャッシュファイルが保存されました（30件の翻訳記録を含む）
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - 実行時間: 22秒 - 残り推定時間: 3分25秒 💾 キャッシュファイルが保存されました（35件の翻訳記録を含む）&lt;/p&gt;
&lt;h3 id=&#34;プログレスバーの表示-1&#34;&gt;プログレスバーの表示
&lt;/h3&gt;&lt;hr&gt;</description>
        </item>
        
    </channel>
</rss>
