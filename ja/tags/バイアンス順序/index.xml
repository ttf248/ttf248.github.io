<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>バイアンス順序 on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%83%90%E3%82%A4%E3%82%A2%E3%83%B3%E3%82%B9%E9%A0%86%E5%BA%8F/</link>
        <description>Recent content in バイアンス順序 on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 20:54:02 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%83%90%E3%82%A4%E3%82%A2%E3%83%B3%E3%82%B9%E9%A0%86%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>コンピュータがなぜ一般的にlittle-endianなストレージを採用するのか？</title>
        <link>https://ttf248.life/ja/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;バイアスの解説 &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/host-network-byte-order-debugger/&#34; &gt;ホスト序、ネットワーク序、デバッガで直接観察&lt;/a&gt;
コンピュータ分野の歴史的経緯から生まれた特定の設計習慣は、お尻の幅がロケットエンジンの幅を決定するように、内部の「利点」や「欠点」を分析する必要はありません。単なる歴史的な習慣です。&lt;/p&gt;
&lt;h2 id=&#34;元文章リンク&#34;&gt;元文章リンク
&lt;/h2&gt;&lt;p&gt;著: 北極
リンク: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
出典: 知乎
著作権は著作者に帰属します。商業的な転載をご希望の場合は、著者に連絡して許可を得てください。非営利の転載の場合は、出所を明記してください。&lt;/p&gt;
&lt;h2 id=&#34;正文转载&#34;&gt;正文转载
&lt;/h2&gt;&lt;p&gt;現代の様々なデバイスの状態は、歴史的な慣習と商業化の結果であり、技術そのものとは関係がありません。ARMはビッグエンディアン（大端）でも、リトルエンディアン（小端）でも設定できます。TCP/IPヘッダも現在もビッグエンディアン（ネットワークバイト順序）です。ストレージ分野にも、大端方式でデータを保存する多くのストレージプロトコルや仕様があります。&lt;/p&gt;
&lt;p&gt;したがって、質問者の3つの問題は、今日から見ると次のようになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンピュータが一般的に小端形式で保存するのはなぜ？ → 間違い。&lt;/li&gt;
&lt;li&gt;低バイトを低アドレスに配置した小端形式の方が、大端形式よりも効率的である理由は何ですか？ → 効率は高くなりません。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;現在の技術を用いてこれらの問題を論証するものは、すべて矢を射てから的を描くような行為です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;しかし、大端または小端の選択が、コンピュータの開発史において、確かに一定の客観的な要因があったことは事実です。ホストバイト順序（小端）の利点は、小端形式の加算器は比較的簡単に作れることです。8ビット×4の加算器を作成するには、単一の8ビット加算器で、低アドレスから高アドレスまで順番に各バイトを加算するだけで済みます。桁上がり回路は非常にシンプルであり、大端形式では32ビットを一度ロードする必要があるため、計算できません。現在では、8ビットと32ビットのロードの違いはほとんどありませんが、数十年前にはメモリ価格が高価であったため、より単純な方が有利でした。そのため、ホストバイト順序を選択したのはコストを考慮した結果です。ネットワークバイト順序（大端）の利点は、初期のデバイスのキャッシュが非常に小さかったことです。最初に高バイトを受信することで、パケットの長さ（どの程度のキャッシュが必要か）やアドレス範囲（IPアドレスは前から後ろにマッチングする）を迅速に判断できます。当時のネットワークデバイスのキャッシュはバイト単位であり、先頭のバイトを取得することがより速い場合がありました。そのため、ネットワークデバイスが大端を使用したのはコストを考慮した結果です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;したがって、バイト順序の選択は、歴史的に見て、多くの場合、アプリケーションシナリオとコストを重視したもの（例えば、PPC/MIPSはネットワークデバイスに適している）であり、その後の技術発展において、互換性のために大端小端の設定が引き継がれているものです。&lt;/p&gt;
&lt;p&gt;今日から見れば、これらの利点はすべて存在せず、単なる歴史的な慣習に過ぎません。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ホストモード、ネットワークモード、デバッガを使用して直接観察する</title>
        <link>https://ttf248.life/ja/p/host-network-byte-order-debugger/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/host-network-byte-order-debugger/</guid>
        <description>&lt;p&gt;コンピュータの発展の歴史において、データの保存方法には統一された標準は存在しませんでした。
バイトの並び方は2つの一般的なルールに従っていました。例えば、ある多桁数の低いバイトを小さいアドレスに、高いバイトを大きいアドレスに配置する場合、これを小端序と呼びます。その逆の場合、大端序と呼びます。ネットワークアプリケーションにおいては、バイトオーダーは考慮すべき重要な要素であり、異なる種類のコンピュータが異なる標準のバイトオーダーを採用している可能性があるため、すべてネットワーク標準に変換されます。
読解習慣に従うと、大端バイトオーダーは左から右への読み込み順序に合致します。&lt;/p&gt;
&lt;h2 id=&#34;プロセッサアーキテクチャhttpszhwikipediaorgwikie5ad97e88a82e5ba8f&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;プロセッサアーキテクチャ&lt;/a&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;x86、MOS Technology 6502、Z80、VAX、PDP-11などのプロセッサは小端序を採用&lt;/li&gt;
&lt;li&gt;Motorola 6800、Motorola 68000、PowerPC 970などのプロセッサは大端序を採用&lt;/li&gt;
&lt;li&gt;ARM、PowerPC（PowerPC 970を除く）、DEC Alpha、SPARC V9、MIPS、PA-RISCおよびIA64のバイトオーダーは可変式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;网络序&#34;&gt;网络序
&lt;/h2&gt;&lt;p&gt;ネットワーク転送では一般的に大端序が採用され、ネットワークバイト序とも呼ばれ、ネットワーク序とも言います。IPプロトコルにおいて大端序はネットワークバイト序として定義されています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Berkeley&lt;/code&gt;ソケットは、16ビットおよび32ビット整数をネットワーク序とホストバイト序間で変換するための変換関数群を定義しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); // uint32_t をネットワーク序に変換
uint16_t htons(uint16_t hostshort); // uint16_t をネットワーク序に変換
uint32_t ntohl(uint32_t netlong); // uint32_t をネットワーク序からホスト序へ変換
uint16_t ntohs(uint16_t netshort); // uint16_t をネットワーク序からホスト序へ変換
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;asio&lt;/code&gt; をネットワークライブラリとして使用する場合、組み込みの名前空間には、クロスプラットフォームに対応した関数名が用意されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;visual-studio-デバッガー&#34;&gt;Visual Studio デバッガー
&lt;/h2&gt;&lt;p&gt;デバッグモードでは、デバッグメニューを選択し、ウィンドウからメモリウィンドウにチェックを入れます。
Visual Studio では、デバッガー内で直接メモリ内のデータを表示できます（下記画像参照）。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/Snipaste_2023-01-10_14-44-00.png&#34;
	width=&#34;535&#34;
	height=&#34;147&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;デバッガーメニュー&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;363&#34;
		data-flex-basis=&#34;873px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;メモリの確認方法&#34;&gt;メモリの確認方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ウィンドウから直接変数名を表示し、対応する変数のアドレスにジャンプ&lt;/li&gt;
&lt;li&gt;変数が元のポインタ型である場合、ウィンドウで変数をダブルクリックして選択し、メモリウィンドウにドラッグすることで、対応する内容のアドレスを表示&lt;/li&gt;
&lt;li&gt;変数がポインタ型でない場合は、計算ウィンドウに追加し、アドレスを取得してから、手動でメモリウィンドウにコピー&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例を挙げて説明します&#34;&gt;例を挙げて説明します
&lt;/h3&gt;&lt;p&gt;データを受信し、&lt;code&gt;buffer&lt;/code&gt;オブジェクトに格納します。ネットワークバイトオーダーをホストバイトオーダーに変換し、&lt;code&gt;body_length&lt;/code&gt;が30になります。サーバー側では、このデータを送信するために4バイトを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // ネットワークバイトオーダーをホストバイトオーダーに変換
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;大端型バイトオーダー&lt;/strong&gt;: メモリウィンドウ内の&lt;code&gt;buffer_&lt;/code&gt;の内容を観察します。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;小端型バイトオーダー&lt;/strong&gt;: メモリウィンドウ内の&lt;code&gt;body_length_&lt;/code&gt;の内容を観察します。
&lt;img src=&#34;https://ttf248.life/p/host-network-byte-order-debugger/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
