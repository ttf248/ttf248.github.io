<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Auto-Test on 向叔の手帳</title>
        <link>https://blog.ttf248.life/ja/tags/auto-test/</link>
        <description>Recent content in Auto-Test on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ja/tags/auto-test/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>自動テストの簡単な考察</title>
        <link>https://blog.ttf248.life/ja/p/shallow-discussion-on-automation-testing/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/shallow-discussion-on-automation-testing/</guid>
        <description>&lt;p&gt;金融取引システムにおけるテストへの投資は、他のシステムを大きく上回っており、煩雑なテスト手順が繰り返され、&lt;strong&gt;INLIN_ITALIC_1&lt;/strong&gt;__ は極めて低い。プロジェクトや人員の交代に伴い、不可避的に多くの制御不能な要因が導入され、よくあるケースとして、Aインターフェースの出力する特定のフィールドを変更した結果、Bインターフェースの結果に影響が出てしまう。バージョンリリースごとにリスクも蓄積している。&lt;/p&gt;
&lt;h2 id=&#34;理論知識&#34;&gt;理論知識
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自動化テストケースのROI = （手動実行時間）×（実行回数） / （開発コスト + メンテナンスコスト）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ユーザーが頻繁に利用し、変更されない機能。このタイプのインターフェースに対して自動テストコードを記述すると、最も効果的です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プロジェクトのリリースが目前に迫っており、明らかに不適切です。遠い水を近くの渇きを癒すことはできず、自動化は長期的な収益モデルです。プロジェクトは既に&lt;strong&gt;生产环境&lt;/strong&gt;でオンラインとなり、安定したリリースサイクルに入っています。このタイミングが最適です。&lt;/p&gt;
&lt;h2 id=&#34;フレームの選択&#34;&gt;フレームの選択
&lt;/h2&gt;&lt;p&gt;関連する実践経験がないまま、自動テストというタスクを任されることになった場合、よくある流れ：検索エンジンを開き、現在のシステムで利用できるツールやフレームワークを探し、マニュアルを読んでから着手。すぐに適切なツールが見つかれば、おめでとうございます、&lt;strong&gt;完美开局&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;先に謝罪いたします。関連資料を確認したところ、存在しないというわけではなく、フレームワーク自体が複雑で、デプロイに必要なリソースも過多です。初心者向けには、小さく、簡潔なものが求められます。テストチームの同僚に相談した結果、&lt;code&gt;Python&lt;/code&gt; 自建フレームワークというアイデアが出ました。簡単に言うと、既存の単体テストフレームワークを使い、自動テストフレームワークとしてパッケージ化するというものです。&lt;/p&gt;
&lt;p&gt;このプロジェクトのデザインのコンセプトを参考に：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;フレームが必要な理由は何ですか&#34;&gt;フレームが必要な理由は何ですか？
&lt;/h2&gt;&lt;p&gt;サービスには複数のデプロイ環境があり、開発環境、テスト環境、本番環境があります。フレームワークの役割は、これらの環境を分離し、テストケースとデータを切り離すことです。異なる環境ごとに異なるテストデータが設定可能で、共通データもサポートしています。&lt;/p&gt;
&lt;p&gt;自動化の活用率向上のための根本的なロジックです。シーンが複雑になればなるほど、異なる環境間のデータは互いに関係なく、設定ケースデータ時に &lt;code&gt;label&lt;/code&gt; タグを追加し、対応する環境を指定してください。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
