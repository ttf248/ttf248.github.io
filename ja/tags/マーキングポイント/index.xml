<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>マーキングポイント on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%83%9E%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88/</link>
        <description>Recent content in マーキングポイント on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%83%9E%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%B0%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C&#43;&#43; ビット演算の基礎：ビットごとのANDとフラグ設定</title>
        <link>https://ttf248.life/ja/p/cpp-bitwise-operations-flags/</link>
        <pubDate>Fri, 17 Jan 2025 02:23:56 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-bitwise-operations-flags/</guid>
        <description>&lt;p&gt;実際のC++開発において、ビット演算は一般的な技術であり、特にシステムの状態、フラグビット、または制御ビットを扱う際に、非常に効率的な解決策を提供します。本稿では、例を通して、ビット演算を使用して特定のフラグビットを取得および設定する方法について解説します。&lt;/p&gt;
&lt;h3 id=&#34;ビット演算の基礎概念&#34;&gt;ビット演算の基礎概念
&lt;/h3&gt;&lt;p&gt;コンピュータでは、データは2進数（0と1）のビットで格納されます。ビット演算とは、これらのビットに対して操作を行うことです。C++には、いくつかの一般的なビット演算演算子が用意されています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;論理積（&amp;amp;）&lt;/strong&gt;：特定のビットが1かどうかを確認します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;論理和（|）&lt;/strong&gt;：特定のビットを1に設定します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;排他的論理和（^）&lt;/strong&gt;：特定のビットを反転させます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビット反転（~）&lt;/strong&gt;：すべてのビットを反転させます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左シフト（&amp;laquo;）&lt;/strong&gt;：すべてのビットを左に指定した数だけシフトします。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右シフト（&amp;raquo;）&lt;/strong&gt;：すべてのビットを右に指定した数だけシフトします。
本例では、&lt;code&gt;unsigned short&lt;/code&gt; 型の変数 &lt;code&gt;wInfo&lt;/code&gt; に対して、さまざまなビット演算を実行し、異なるフラグを使用して状態を表す必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ビット演算の基礎概念-1&#34;&gt;ビット演算の基礎概念
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR
    A[元の数値: 00010000] --&amp;gt; B[左シフト: 00010000 &amp;lt;&amp;lt; 1]
    B --&amp;gt; C[結果: 00100000]
    C --&amp;gt; D[右シフト: 00100000 &amp;gt;&amp;gt; 1]
    D --&amp;gt; E[結果: 00010000]

    subgraph 左シフト操作
        direction LR
        A --&amp;gt; B --&amp;gt; C
    end

    subgraph 右シフト操作
        direction LR
        C --&amp;gt; D --&amp;gt; E
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;要求分析&#34;&gt;要求分析
&lt;/h3&gt;&lt;p&gt;問題文の記述に基づき、16ビットのフラグビットがあり、これを用いて様々な状態を表します。これらの状態は、個々のバイナリビットによって表現され、各バイナリビットは特定の意味に対応しています。例えば：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bit0&lt;/strong&gt; が失敗かどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit1&lt;/strong&gt; が圧縮されているかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit2&lt;/strong&gt; が増量であるかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit3&lt;/strong&gt; が後続のパケットがあるかどうか&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bit5&lt;/strong&gt; が正常なリクエストまたは注销かどうか&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;位演算による実装&#34;&gt;位演算による実装
&lt;/h3&gt;&lt;p&gt;ビット演算を用いてこれらのフラグを設定および取得します。具体的には：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ビットごとの抽出 (Bitwise Extraction)&lt;/strong&gt;: 特定のビットの値（0または1）を取得します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビットごとの設定 (Bitwise Setting)&lt;/strong&gt;: 特定のビットを1に設定します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ビットごとのクリア (Bitwise Clearing)&lt;/strong&gt;: 特定のビットを0に設定します。
最初に &lt;code&gt;unsigned short&lt;/code&gt; 型の変数 &lt;code&gt;wInfo&lt;/code&gt; を定義し、これらのフラグを保存するために使用します。その後、ビット演算を用いて対応するフラグを確認および設定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c-のサンプルコード&#34;&gt;C++ のサンプルコード
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;bitset&amp;gt;

// フラグ位定数定義
const unsigned short BIT_0_FAIL = 1 &amp;lt;&amp;lt; 0;    // bit0 が失敗したかどうか
const unsigned short BIT_1_COMPRESSED = 1 &amp;lt;&amp;lt; 1; // bit1 が圧縮されたかどうか
const unsigned short BIT_2_INCREMENT = 1 &amp;lt;&amp;lt; 2;  // bit2 が増量されたかどうか
const unsigned short BIT_3_HAS_MORE = 1 &amp;lt;&amp;lt; 3;   // bit3 に後続のパケットがあるかどうか
const unsigned short BIT_5_CANCEL = 1 &amp;lt;&amp;lt; 5;     // bit5 は正常なリクエスト(0)か、注销(1)か

// あるビットがセットされているか確認する
bool isBitSet(unsigned short wInfo, unsigned short bitMask) {
    return (wInfo &amp;amp; bitMask) != 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;### C++ のサンプルコード
// ビットを設定する
void setBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo |= bitMask;
}

// ビットをクリアする（0に設定）
void clearBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo &amp;amp;= ~bitMask;
}

int main() {
    // wInfo の初期値を 0 と仮定
    unsigned short wInfo = 0;

    // ビット 0 (失敗フラグ) を設定
    setBit(wInfo, BIT_0_FAIL);

    // ビット 1 (圧縮フラグ) を設定
    setBit(wInfo, BIT_1_COMPRESSED);

    // wInfo の二進数値を表示
    std::cout &amp;lt;&amp;lt; &amp;quot;wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// 各ビットフラグの確認
    std::cout &amp;lt;&amp;lt; &amp;quot;bit0 (失敗フラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_0_FAIL) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit1 (圧縮フラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_1_COMPRESSED) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit2 (インクリメントフラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_2_INCREMENT) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit3 (続き包フラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_3_HAS_MORE) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit5 (キャンセルフラグ): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_5_CANCEL) ? &amp;quot;はい&amp;quot; : &amp;quot;いいえ&amp;quot;) &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;### C++ のサンプルコード
// ビット1（圧縮フラグ）をクリアする
    clearBit(wInfo, BIT_1_COMPRESSED);

    // 更新された wInfo を出力
    std::cout &amp;lt;&amp;lt; &amp;quot;Updated wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;c-サンプルコード&#34;&gt;C++ サンプルコード
&lt;/h3&gt;&lt;p&gt;コードを実行するには、旧友を推奨：&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wInfo (バイナリ): 0000000000000011
bit0 (エラーか): はい
bit1 (圧縮するか): はい
bit2 (増分か): いいえ
bit3 (後続包があるか): いいえ
bit5 (注销するか): いいえ
Updated wInfo (バイナリ): 0000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;コード解説&#34;&gt;コード解説
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;フラグの定義&lt;/strong&gt;: ビットシフト演算 (&lt;code&gt;1 &amp;lt;&amp;lt; n&lt;/code&gt;) を使用して、各フラグを定義します。例えば、&lt;code&gt;1 &amp;lt;&amp;lt; 0&lt;/code&gt; は &lt;code&gt;bit0&lt;/code&gt; に対応し、&lt;code&gt;1 &amp;lt;&amp;lt; 1&lt;/code&gt; は &lt;code&gt;bit1&lt;/code&gt; に対応するなど、同様に推測されます。このようにして、各フラグには一意のバイナリ位置が割り当てられます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットの確認&lt;/strong&gt;: &lt;code&gt;isBitSet&lt;/code&gt; 関数は、指定されたフラグが1になっているかどうかを確認するために、ビットマスクとのAND演算 (&lt;code&gt;wInfo &amp;amp; bitMask&lt;/code&gt;) を使用します。もしそのビットが1であれば、関数は &lt;code&gt;true&lt;/code&gt; を返し、そうでなければ &lt;code&gt;false&lt;/code&gt; を返します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットの設定&lt;/strong&gt;: &lt;code&gt;setBit&lt;/code&gt; 関数は、指定されたフラグを1にするために、ビットマスクとのOR演算 (&lt;code&gt;wInfo |= bitMask&lt;/code&gt;) を使用します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特定のビットのクリア&lt;/strong&gt;: &lt;code&gt;clearBit&lt;/code&gt; 関数は、指定されたフラグを0にするために、ビットマスクとのAND演算 (&lt;code&gt;wInfo &amp;amp;= ~bitMask&lt;/code&gt;) を使用します。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h3&gt;&lt;p&gt;ビット演算（ビット操作）を用いることで、複数の状態フラグを効率的に処理できます。実際の開発においては、この技術が特に有用です。例えば、組み込み開発、ネットワークプロトコル、システムステート管理などの場面で、複数のバイナリ状態を表すためにビットフラグが頻繁に使用されます。スペースの節約と効率の向上が両立します。
この記事が、C++ でビット演算を用いてビットごとの取得と設定を行う方法を理解するのに役立つことを願っています。これらのスキルを習得することは、効率的で保守しやすいコードを書く上で非常に役立ちます！&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
