<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ロングレンジストレージ (Long Range Storage) on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%83%AD%E3%83%B3%E3%82%B0%E3%83%AC%E3%83%B3%E3%82%B8%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8-long-range-storage/</link>
        <description>Recent content in ロングレンジストレージ (Long Range Storage) on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%83%AD%E3%83%B3%E3%82%B0%E3%83%AC%E3%83%B3%E3%82%B8%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8-long-range-storage/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>コンピュータがなぜ一般的にlittle-endian形式のストレージを採用するのか？</title>
        <link>https://ttf248.life/ja/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;バイアスの解説 &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/host-network-byte-order-debugger/&#34; &gt;ホスト序、ネットワーク序、デバッガで直接観察&lt;/a&gt;
コンピュータ分野における歴史的な理由による特定の設計習慣は、お尻の幅がロケットエンジンの幅を決定する道理と同じです。中身の「利点」や「欠点」を分析する必要はなく、単なる歴史的習慣に過ぎません。&lt;/p&gt;
&lt;h2 id=&#34;元文章リンク&#34;&gt;元文章リンク
&lt;/h2&gt;&lt;p&gt;著: 北極
リンク: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
出典: 知乎
著作権は著作者に帰属します。商業目的での複製をご希望の場合は、著者にご連絡ください。非営利目的の複製の場合は、出所を明記してください。&lt;/p&gt;
&lt;h2 id=&#34;正文转载&#34;&gt;正文转载
&lt;/h2&gt;&lt;p&gt;現代における様々なデバイスの状況は、歴史的慣習と商業化の結果であり、技術そのものではなく、大きな要因です。ARM は大端でも小端でも設定できます。TCP/IP ヘッダも現在もビッグエンディアン（ネットワークバイトオーダー）に固定されています。ストレージ分野にも、多くのストレージプロトコル／仕様が大端方式でデータを保存しています。&lt;/p&gt;
&lt;p&gt;したがって、質問者の3つの問題は、今日の視点から見ると：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンピュータが一般的に小端形式での保存を採用するのはなぜ？ → 間違いです。&lt;/li&gt;
&lt;li&gt;低バイトデータが低アドレスの小端形式で大端形式よりも効率が良いのはなぜですか？ → 効率は向上しません。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;現在の技術を用いてこれらの問題を論証するものは、すべて「矢を射ってから的を描く」行為に過ぎません。&lt;/p&gt;
&lt;h2 id=&#34;正文转载-1&#34;&gt;正文转载
&lt;/h2&gt;&lt;p&gt;しかし、大端または小端の選択について言えば、コンピュータ開発史において、客観的な要因も存在したことは事実です。ホストバイトオーダー（小端）の利点として、小端の加算器が比較的容易に作れること、8ビット×4の加算器であれば、1つの8ビット加算器で順番にすべてのバイトを加算すれば良いからです。また、進み方の回路も非常にシンプルであり、大端では一度32ビットをロードする必要があるため、計算ができなくなってしまいます。現在では、1回のロードが8ビットか32ビットの差は小さいですが、数十年前にはメモリ価格が高価であったため、よりシンプルな方が有利でした。そのため、ホストバイトオーダーを選択したのは、コストを考慮した結果です。 ネットワークバイトオーダー（ビッグエンディアン）の利点：初期デバイスのキャッシュは小さく、最初に高バイトを受信することで、メッセージ情報を迅速に判断できる：パケット長（どの程度のキャッシュを準備するか）、アドレス範囲（IPアドレスは前から後ろでマッチングされる）。初期のネットワークデバイスのキャッシュはバイト単位であり、高バイトを先に取得することは実際に少し速い。したがって、ネットワークデバイスがビッグエンディアンを使用することも、コストを考慮した結果である。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;そのため、バイトオーダーの選択は、歴史的に見て、アプリケーションシナリオとコストをより重視していた（例えば、PPC/MIPSはネットワークデバイスに適している）。その後、技術発展の中で、互換性のために、エンディアンの設定が現在も引き継がれている。今日の視点で見れば、これらの利点は完全に存在しないだけであり、単なる歴史的習慣に過ぎない。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
