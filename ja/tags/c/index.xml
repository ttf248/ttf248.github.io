<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C# on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/c/</link>
        <description>Recent content in C# on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/c/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>WPFのUIスレッドとフリーズ問題、およびその解決策</title>
        <link>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-issues-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-issues-solutions/</guid>
        <description>&lt;p&gt;デスクトップアプリケーションを開発する際、特にWindows Presentation Foundation (WPF) フレームワークを使用してリッチクライアントアプリケーションを構築する場合、ユーザーインターフェース（UI）スレッドを正しく処理することは、アプリケーションの滑らかさと応答性を保証するために不可欠です。UI スレッド、別名メインスレッドは、ウィンドウやコントロールイベントの処理、レイアウト計算、およびインターフェースの描画を担当するコアスレッドです。UI 要素とのインタラクションに関わる操作はすべて UI スレッド上で実行されるべきであり、これは WPF および他のほとんどの GUI フレームワークが遵守する基本原則です。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドとは何ですか&#34;&gt;UIスレッドとは何ですか？
&lt;/h2&gt;&lt;p&gt;WPFアプリケーションの起動時にOSによって作成され、初期化されるUIスレッドは、アプリケーションのメインウィンドウを管理します。このスレッドのみがUIコンポーネントの状態に直接アクセスし、変更できます。ボタンクリックやテキストボックスへの入力、ウィンドウサイズ変更など、ユーザーインタラクションによって発生するすべてのイベントはこのスレッド上で処理されます。また、WPFの依存プロパティシステム、データバインディングメカニズム、およびレイアウトロジックもUIスレッド上で同期的に実行されます。&lt;/p&gt;
&lt;h2 id=&#34;動作不良とその原因&#34;&gt;動作不良とその原因
&lt;/h2&gt;&lt;p&gt;UIスレッドが長時間占有またはブロックされると、例えば時間のかかる計算処理や大量のデータ読み込み、データベースクエリなどのI/O集約型タスクを実行すると、UIスレッドはユーザーからのインタラクション要求にタイムリーに応答できなくなり、結果として画面がフリーズ（応答なし）したように見える。これにより、アプリケーションの遅延や不具合が顕著になり、最悪の場合「Application Not Responding」（ANR）警告が表示されることがある。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドの2つの基本ルール&#34;&gt;UIスレッドの2つの基本ルール
&lt;/h2&gt;&lt;p&gt;上記のような状況を避けるため、WPF開発者は以下の2つの重要なルールに従うべきです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UIスレッドがユーザーの入力にタイムリーに応答し、画面の変化をレンダリングできるように、UIスレッドをブロックする可能性のある操作は、可能な限りバックグラウンドスレッドで実行する必要があります。&lt;/li&gt;
&lt;li&gt;WPFのセキュリティ機構により、UI要素の変更はUIスレッドでのみ許可されます。他のスレッドから直接UIの状態を変更しようとすると例外が発生します。したがって、バックグラウンドスレッドで計算やデータ準備が完了した場合でも、適切なクロススレッド通信メカニズムを通じて結果をUIに表示する必要があります。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;非同期プログラミングとスレッドセーフな更新&#34;&gt;非同期プログラミングとスレッドセーフな更新
&lt;/h2&gt;&lt;p&gt;UIの応答性を維持しつつ、時間のかかるタスクを実行するために、WPFは開発者がこの目標を達成するのを支援するための様々な非同期プログラミングモデルとツールを提供します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WPFのDispatcherクラスを使用すると、タスクをUIスレッドのタスクキューに投入して実行できます。バックグラウンドスレッドから安全にUIを更新するために、&lt;code&gt;Dispatcher.Invoke&lt;/code&gt;或&lt;code&gt;Dispatcher.BeginInvoke&lt;/code&gt;メソッドを利用できます。&lt;/li&gt;
&lt;li&gt;C#の非同期機能を利用することで、非同期メソッドを記述し、その中で__INLINE_CODE_0__キーワードを使用してバックグラウンドタスク完了を待機し、完了後に自動的にUIスレッドで後続のUI更新コードを実行できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事例&#34;&gt;事例
&lt;/h2&gt;&lt;h3 id=&#34;__inline_code_0__メソッドでuiを更新する&#34;&gt;__INLINE_CODE_0__メソッドでUIを更新する。
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // 假设这是一个耗时操作
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // 这里是模拟一个耗时计算的方法
        
        // 当耗时操作完成后，在UI线程上更新UI
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 模拟耗时操作
    Thread.Sleep(5000);
    return &amp;quot;已完成&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用__斜体_3__粗体_2__斜体_4__&#34;&gt;使用__斜体_3__粗体_2__斜体_4__
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // 防止用户重复点击

    try
    {
        // 开启后台任务
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // 在后台任务完成后，自动切换回UI线程更新UI
        LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;发生错误: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // 重新启用按钮
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
