<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Chatgpt on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/chatgpt/</link>
        <description>Recent content in Chatgpt on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/chatgpt/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AIプログラミングとタスク分解</title>
        <link>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;2年前にサイトに追加したコード領域のコピー機能ですが、あれから半日ほど格闘した結果、最終的なレンダリングの効果は少し期待外れでした。半熟前開発者だったため、改善しようともせず、動けば良いと思っていました。今年は&lt;code&gt;AI&lt;/code&gt;で小程序を開発し、フロントエンドの開発にもより慣れたので、一新（AIによる再設計）。&lt;/p&gt;
&lt;p&gt;悟道：タスクを分解して、多くの小さなタスクに分けました。AIで開発するのはまだスムーズです。すでに閉鎖された小程序ですが、75%のコードはAIによって提供され、複数のタスクに分割して割り当て、人工でプロジェクトコードを組み立てています。&lt;/p&gt;
&lt;h2 id=&#34;前文&#34;&gt;前文
&lt;/h2&gt;&lt;p&gt;簡単なことだと思っていることを、コードコピーボタンを追加する。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;CSSとJavaScriptのコードを設計し、class=&amp;ldquo;highlight&amp;rdquo; のウェブ要素を見つけて、その要素のコンテナ内にコピーボタンを追加して、コードをコピーする機能を実現してください。&lt;/p&gt;
&lt;p&gt;最初のドラフトのコードを見ると問題があり、再生成したところ、ほぼ使えるようになったが、コピーされた内容に誤りがあり、重複するテキストも含まれている。再度最適化を促し、手動で主要なカラーデザインを指定し、どのようなエフェクトが含まれるかを指示した。&lt;/p&gt;
&lt;p&gt;ボタンのサイズと色に関して特定の要件があることを承知いたしました。これらの要件に合わせて、ボタンのスタイルを再設計できます。以下に、ご提供いただいたカラースキームを含め、ボタンのサイズを最適化した調整後のCSSスタイルを示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* 调整位置 */
  right: 2px;
  padding: 3px 6px; /* 缩小尺寸 */
  font-size: 12px; /* 减小字体大小 */
  background-color: #8FD1E1; /* 按钮背景色 */
  color: #272822; /* 文字颜色 */
  border: 1px solid #272822; /* 边框颜色 */
  border-radius: 3px; /* 圆角 */
  cursor: pointer;
  opacity: 0.7; /* 默认半透明 */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* 平滑过渡效果 */
}

.copy-btn:hover {
  opacity: 1; /* 鼠标悬停时不透明 */
  background-color: #A3D4E5; /* 鼠标悬停时的背景色 */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このスタイルでは、ボタンのサイズとフォントサイズを小さくし、より洗練された印象にしました。同時に、ボタンのデフォルト状態は半透明で、マウスがボタンの上にかかると不透明になり、背景色が少し明るくなることで視覚的なフィードバックを提供します。このようなデザインは、お客様の色に関する要件を満たしつつ、モダンさと使いやすさを維持しています。&lt;/p&gt;
&lt;p&gt;対応する簡単な &lt;code&gt;JavaScript&lt;/code&gt; を提供しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // 查找所有 .highlight 元素
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // 创建复制按钮
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;复制&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // 将按钮添加到每个 .highlight 元素中
    highlight.appendChild(copyBtn);

    // 添加点击事件监听器
    copyBtn.addEventListener(&#39;click&#39;, function() {
      // 假设 .highlight 下的第一个 &amp;lt;code&amp;gt; 元素包含要复制的代码
      const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;

      navigator.clipboard.writeText(code).then(() =&amp;gt; {
        // 显示复制成功信息
        copyBtn.textContent = &#39;已复制!&#39;;
        setTimeout(() =&amp;gt; {
          copyBtn.textContent = &#39;复制&#39;;
        }, 2000);
      }).catch(err =&amp;gt; {
        console.error(&#39;复制失败: &#39;, err);
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;コピーボタンをコード領域の右上隅、または上部に新たに追加することを期待していたのですが、フロントエンドについて十分な知識がないため、キーワードに基づいて機能を正確に説明できず、AI と何度かやり取りしても、期待通りの結果が得られませんでした。&lt;/p&gt;
&lt;p&gt;時間が経つにつれて、AIがプログラミング開発にどれほどの影響を与えるか分かりません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>AI支援によるプログラミング、生産性の進化</title>
        <link>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;GitHub Copilotのリリースから2年も経っていないうちに、ChatGPTが登場しました。その裏側の仕組みはよく分かりませんが、しばらく使っています。この二つのツールは補助的な面で全く異なりながらも、いずれも生産性を大きく向上させています。&lt;/p&gt;
&lt;p&gt;あまりに複雑なことは、AIではまだできません。結局のところ、彼らには論理がないからです。パターンが決まっていることや、固定されたパラダイムのようなことに対しては、学習データが十分であれば、AIの効果は9割程度期待できます。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;github copilot
&lt;/h2&gt;&lt;p&gt;公開されたとき、公式サイトのデモを見て、あまり賢そうではないし、試してみたけれど使い勝手が悪く、諦めた。&lt;/p&gt;
&lt;p&gt;2022年以前、暇な時に新しいバージョンを試してみたら、すでに効果はかなり良いです。ただ、国内の速度が少し遅いので、おそらくネットワークの問題でしょう。&lt;code&gt;Python&lt;/code&gt;のような言語で、コメントを参照して書かれたコードはなかなか良く、自分で資料を探して書くよりもずっと速いです。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;GitHub Copilotはまだ、プログラマー、つまり開発の視点から製品を設計している段階で、プログラミングの方法を知り、徐々にコメントを通じてAIによる補助的なプログラミングを促す必要があります。&lt;/p&gt;
&lt;p&gt;ChatGPT が次のレベルに進化し、&lt;strong&gt;素人でもすぐに使いこなせる&lt;/strong&gt;ようになりました。 会話形式のインタラクティブなデザインなので、どんな質問や要望でも気軽に投げかけられ、わからないことがあれば、遠慮なく追加で質問できます。&lt;/p&gt;
&lt;p&gt;単純な例として、トークン化の概念は知っているけれど、どのようにコーディングすればいいのかわからない。文字列の類似度を計算したいと考えている場合：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python 分词计算 維天運通 LOGORY 和 合肥維天運通信息科技股份有限公司 两个字符串的相似度；
比较前，统一处理字符串，英文转换为小写；
第二个字符中如果能找到第一个字符的首字符，将第二个字符串截位，截位的长度为第一个字符串的长度
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんにちは、これはBingです。😊&lt;/p&gt;
&lt;p&gt;オンラインの情報によると123、Pythonの形態素解析には、jiebaライブラリを使用できます。jiebaライブラリは、厳密モード、フルモード、そして検索エンジンモードという3つの形態素解析モードをサポートしています。ニーズに合わせて適切なモードを選択してください。&lt;/p&gt;
&lt;p&gt;文字列の類似度を比較するためには、まず文字列をトークン化し、次に単語ベクトルや編集距離などの指標を計算する必要があります。numpy や scipy などのライブラリを使用して数学演算を行うことができます。&lt;/p&gt;
&lt;p&gt;文字列を統一的に処理するために、英字を小文字に変換するには、Python の組み込み関数lower()を使用できます。&lt;/p&gt;
&lt;p&gt;2番目の文字列を切り出すには、Pythonのスライス演算子[]を使用できます。&lt;/p&gt;
&lt;p&gt;以下はサンプルコードです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jieba
import numpy as np
from scipy.spatial.distance import cosine

# 定义两个字符串
str1 = &amp;quot;維天運通 LOGORY&amp;quot;
str2 = &amp;quot;合肥維天運通信息科技股份有限公司&amp;quot;

# 统一处理字符串，英文转换为小写
str1 = str1.lower()
str2 = str2.lower()

# 找到第二个字符串中第一个字符的位置
index = str2.find(str1[0])

# 如果找到了，截取第二个字符串
if index != -1:
    str2 = str2[index:index+len(str1)]

# 使用 jieba 库进行分词
words1 = list(jieba.cut(str1))
words2 = list(jieba.cut(str2))

# 计算两个字符串的词向量（以词频作为权重）
vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))

for i, word in enumerate(words1):
    vector1[i] += 1 # 统计第一个字符串中每个词出现的次数
    if word in words2:
        vector2[i] += 1 # 统计第二个字符串中每个词出现的次数

# 计算两个字符串的相似度（以余弦距离作为指标）
similarity = 1 - cosine(vector1, vector2)

print(&amp;quot;两个字符串的相似度是：&amp;quot;, similarity)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さらに進めて、実行結果について問い合わせたところ、問題が見つかりました。結果はでっち上げられており、実際にはコードが実行されていないようですが、なかなか良い結果を返してきます。&lt;/p&gt;
&lt;h3 id=&#34;くり&#34;&gt;くり
&lt;/h3&gt;&lt;p&gt;質問：SQL文で、製品コード表から、製品コードが80000～89999の範囲にあるレコードを抽出するにはどうすればよいでしょうか。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;你好，这是 Bing。😊

根据搜索结果12，你可以使用 SQL BETWEEN 运算符来选择给定区间内的值。BETWEEN 运算符包含了开始和结束的值。

你需要先指定要查询的表名和列名，然后在 WHERE 子句中使用 BETWEEN 运算符和区间值。

例如，如果你要查询产品代码表中，产品代码在 80000 到 89999 之间的记录，你可以使用以下语句：

SELECT * FROM product_code
WHERE code BETWEEN 80000 AND 89999;
这里，* 表示选择所有列3。如果你只想选择特定的列，比如产品名称和价格，你可以用逗号分隔它们，如下：

SELECT name, price FROM product_code
WHERE code BETWEEN 80000 AND 89999;
希望这能帮助到你。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引き続き質問し、否定してください。製品コードは文字列です。あなたのコードが間違っています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;抱歉，我没有注意到产品代码是字符串。如果是这样的话，你需要在区间值两边加上单引号，如下：

SELECT * FROM product_code
WHERE code BETWEEN &#39;80000&#39; AND &#39;89999&#39;;
请原谅我的错误。🙏
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おめでとうございます、間違えるでしょう。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
