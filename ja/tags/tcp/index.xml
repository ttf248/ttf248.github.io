<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>TCP on 向叔の手帳</title>
        <link>https://blog.ttf248.life/ja/tags/tcp/</link>
        <description>Recent content in TCP on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ja/tags/tcp/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>バックエンドサービスTCP通信異常のトラブルシューティング</title>
        <link>https://blog.ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</link>
        <pubDate>Fri, 14 Feb 2025 22:54:13 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</guid>
        <description>&lt;p&gt;ビジネスモデル：バックエンドサービスはTCP経由でグループのマーケットデータゲートウェイと接続を確立します。接続時にはまず認証リクエストを送信し、その後、継続的にハートビートパケットを送信して接続状態を維持します。
しかし、ある日、サービス接続が切れたという警告メッセージを受け取りました。詳細なログ調査の結果、バックグラウンドサービスは継続的にハートビートを送信しているものの、相手からの応答はなく、それでも接続は切断されませんでした。&lt;/p&gt;
&lt;h2 id=&#34;現場概説&#34;&gt;現場概説
&lt;/h2&gt;&lt;p&gt;元々会社で残業中、プロジェクトの進捗を詰めていたところ、仕事グループに突然警告メッセージが飛び込んできた。最初はよくあるエラーかと思ったが、ネットワークタイムアウトで心跳送信が失敗し、結果としてサービス接続が切れたのだろうと推測した。しかし、ログを詳しく調査した結果、実際はそうではなかった。バックエンドから認証ログインメッセージは送信されているものの、応答がないまま、心跳パケットは継続的に送られ続けており、相手側からは一切の心跳データが返されていない。ログを詳細に分析した結果、以下の重要な問題点が明らかになった：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;認証メッセージに対する応答なし：相手のシステムが再起動中の可能性が高く、認証メッセージがタイムリーに処理されなかったと考えられます。&lt;/li&gt;
&lt;li&gt;認証に失敗したにも関わらずハートビートデータが送信される事象について調査した結果、プログラムのロジック上の欠陥であることが判明しました。ハートビート送信関数における判断ロジックに問題があり、接続状態のみを検証し、認証状態の検証を怠っていました。&lt;/li&gt;
&lt;li&gt;サービス接続が切断されない場合、切断を促すことで再接続メカニズムを起動し、再度認証メッセージを送信できます。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現在、まだ最後の解決すべき問題が残っています — なぜサービスが切断されていないのかです。この問題を解決するには、より詳細な調査が必要です。&lt;/p&gt;
&lt;h2 id=&#34;ネットワークデータパケットの解析&#34;&gt;ネットワークデータパケットの解析
&lt;/h2&gt;&lt;p&gt;ネットワークデータパケットを捕捉し、さらに分析するために。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/backend-service-tcp-communication-troubleshooting/20250220151952.png&#34;
	width=&#34;1126&#34;
	height=&#34;202&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcpdump&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;557&#34;
		data-flex-basis=&#34;1337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;グラフのデータから、心拍は常に正常に送信されていることがわかりますが、相手サーバーからの応答はなく、代わりに &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; が与えられているため、接続は自動的に切断されません。&lt;/p&gt;
&lt;h2 id=&#34;一般的なフラグの説明&#34;&gt;一般的なフラグの説明
&lt;/h2&gt;&lt;p&gt;TCPプロトコルにおいて、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;（Push）和 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;（Acknowledgment）は、データ転送とフロー制御を管理する上で重要なフラグです。その役割は以下の通りです。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-pshpush-flag&#34;&gt;&lt;strong&gt;1. PSH（Push Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;:
受信側は、バッファ内のデータを可能な限り速やかに上位アプリケーションへプッシュし、オペレーティングシステムバッファに一時保存しないこと。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;典型场景&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;クライアントがリクエストを送信する際（例えば、&lt;code&gt;GET /index.html&lt;/code&gt;）会设置 &lt;code&gt;PSH&lt;/code&gt;）、サーバーに即時応答を期待します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;入力時に毎回 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; がトリガーされ、入力文字がリアルタイムで送信されます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;動画ストリーミングやオンラインゲームなどの低遅延シーンでは、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; を用いて遅延を削減することがあります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PSH&lt;/code&gt; は必須ではなく、受信側は無視しても構いません（ただし、データは通常通り処理する必要があります）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;送信者は &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; を設定しない場合があるため、受信者は自身のバッファリングポリシーに基づいてデータをいつプッシュするか決定します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-ackacknowledgment-flag&#34;&gt;&lt;strong&gt;2. ACK（Acknowledgment Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;:
受信確認（前続データセグメントの受信が完了したことを示す）であり、次を受信するべきバイトのシーケンス番号です。これはTCP信頼性のある転送の中核をなすメカニズムです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作原理&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受信者は、送信者がデータセグメントを送信する際に添付する情報（&lt;code&gt;ACK&lt;/code&gt; 值（例如 &lt;code&gt;ACK = 序列号 + 数据长度&lt;/code&gt;）を持つ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受信側はデータを受信後、__INLINE_CODE_0__メッセージを生成し、受信確認済みデータのシーケンス番号を示す。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;送信者は、対応する &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; を受信した場合のみ、未確認のデータを再送します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;送信者は、インラインのイタリック体5、太字4、インラインのイタリック体6、太字3、インラインのイタリック体7を送信しました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受信者が &lt;code&gt;100~199&lt;/code&gt; 中的某些数据，会通过 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; を受け取らない場合、送信者は再送を通知する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;p&gt;TCPパケットにおいて、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 和 __INLINE_CODE_1__は同時に出現することがあり、主に以下の状況で確認されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP 请求响应&lt;/strong&gt;:
クライアントが、&lt;code&gt;POST&lt;/code&gt; 请求时（含数据），会设置 &lt;code&gt;PSH&lt;/code&gt; 和 &lt;strong&gt;INLINE_CODE_2&lt;/strong&gt;（以前の応答を確認）を送信します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Client → Server: SYN, ACK=1 → 建立连接
Client → Server: PSH, ACK=1, 数据 → 发送请求数据
Server → Client: PSH, ACK=数据长度+1 → 返回响应
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSH 握手后传输命令&lt;/strong&gt;:
クライアントがコマンドを入力後、&lt;code&gt;PSH&lt;/code&gt;BOLD_2&lt;code&gt;ACK&lt;/code&gt; が含まれるデータセグメントを送信し、コマンドの即時伝送とサーバーでの処理を保証します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-1&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フラグ&lt;/th&gt;
&lt;th&gt;名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;同期　初期化接続（三次握手）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIN&lt;/td&gt;
&lt;td&gt;終了&lt;/td&gt;
&lt;td&gt;エレガントな接続のクローズ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;リセット&lt;/td&gt;
&lt;td&gt;強制終了 (異常時)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URG&lt;/td&gt;
&lt;td&gt;緊急&lt;/td&gt;
&lt;td&gt;緊急ポインタをマークする（ほとんど使用しない）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-2&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;遅延の低減に焦点を当てる。&lt;/li&gt;
&lt;li&gt;データの完全性と順序を保つことが重要です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;両者は協調して働き、TCPプロトコルの効率と信頼性のバランスを取っています。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
