<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/git/</link>
        <description>Recent content in Git on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git のコミット履歴のメッセージ変更</title>
        <link>https://ttf248.life/ja/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;スクリプトは、git filter-branch を使用して、Git の履歴コミットの作成者情報を一括で変更するために使用されます。&lt;/p&gt;
&lt;p&gt;提供されたスクリプトは、Git リポジトリの過去のコミットの作成者情報を一括で変更するためのもので、全体的なコンセプトは正しいですが、&lt;code&gt;git filter-branch&lt;/code&gt; の &lt;code&gt;--env-filter&lt;/code&gt; で配列（例：&lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;）を使用すると、互換性の問題が生じる可能性があります。なぜなら、一部のシェル環境（&lt;code&gt;/bin/sh&lt;/code&gt; など）では配列構文がサポートされていないためです。&lt;/p&gt;
&lt;p&gt;互換性を高めるため、配列をスペースで区切られた文字列に置き換え、&lt;code&gt;for&lt;/code&gt;ループを使用して各古いメールアドレスを反復処理することをお勧めします。以下に変更後のスクリプトの例です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意事項：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;スクリプトを実行する前に、予期せぬ事態を防ぐため、リポジトリのバックアップを取ることをお勧めします。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この操作はGitの履歴を上書きし、コミットの作成者情報を変更するため、コミットハッシュ値が変化する可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;変更をリモートリポジトリにプッシュしている場合は、強制プッシュを使用する必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --force --tags origin &#39;refs/heads/*&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;強制プッシュは慎重に行ってください。特に複数人で共同作業しているプロジェクトでは、他者に影響を与えないように注意してください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;倉庫内の重複しない著者メールアドレスをすべて統計する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Gitが無効なHTTPリポジトリ</title>
        <link>https://ttf248.life/ja/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;ソフトウェアのバージョンを更新する習慣があり、どのバージョンの&lt;code&gt;Git&lt;/code&gt;からか不明ですが、&lt;code&gt;Http&lt;/code&gt;リポジトリからのコードのプルが禁止されています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h2&gt;&lt;p&gt;環境：Windowsプラットフォーム、いつもTortoiseGitを使ってgitを操作しており、秘密鍵の設定もTortoiseGit経由で行っています。以前にスクリプトを作成して、ローカルのリポジトリを一括で更新したことがあります。&lt;/p&gt;
&lt;p&gt;前の投稿へのリンク：[ローカルのGitリポジトリを一括更新する]({&amp;lt; relref &amp;ldquo;/post/2023/10-19-批量更新本地git仓库&amp;rdquo; &amp;gt;}})&lt;/p&gt;
&lt;p&gt;今日家に帰ってコードのアップデートを実行したところ、先ほどのエラーが発生し、リポジトリが正常に更新されなくなりました。&lt;code&gt;Git&lt;/code&gt;には設定があるはずだと考え、&lt;code&gt;http&lt;/code&gt;プロトコルで引き続きリポジトリをアップデートできるようにしようと思ったのですが、探しても該当の設定項目は見つかりませんでした。&lt;/p&gt;
&lt;p&gt;最も簡単な解決策は、もちろん &lt;code&gt;ssh&lt;/code&gt; プロトコルに切り替えてリポジトリを更新することです。会社の構成上、&lt;code&gt;gitlab&lt;/code&gt; は当面の間、&lt;code&gt;https&lt;/code&gt; プロトコルを提供しません。&lt;/p&gt;
&lt;h2 id=&#34;遺棄問題&#34;&gt;遺棄問題
&lt;/h2&gt;&lt;p&gt;大量ローカルリポジトリを更新するスクリプトを作成する際に、当初は &lt;code&gt;ssh&lt;/code&gt; でリポジトリをプルすることを考えていましたが、なぜそうしたのか詳しく調べていませんでした。結果として、TortoiseGit の設定情報が &lt;code&gt;config&lt;/code&gt; に同期されていなかったため、コマンドラインで実行すると&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull #提示没有权限，无法正常更新仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コマンドで鍵の設定を確認することも正しいです：&lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;もしGit Small Turtle (TortoiseGit) でコードを正常にプルできるのに、コマンドラインでgit pull コマンドを実行した際にキーが正しくないというエラーが表示される場合、これは Git Small Turtle が PuTTY の SSH キーを使用しているのに対し、コマンドラインが OpenSSH の SSH キーを使用していることが原因である可能性があります。&lt;/p&gt;
&lt;p&gt;小さなカメの鍵設定は、システム.sshフォルダから鍵ファイル情報を読み込むのではなく、インターフェースのリポジトリ設定時に、個別に鍵ファイルのパスを設定します。便利なテクニックとして、最初にリポジトリを構成した際に鍵を設定すれば、他のリポジトリもこの鍵ファイルを再利用できます。PuTTYが鍵をロードした後、すぐに終了するのではなく、プロキシサービスを開始します。&lt;/p&gt;
&lt;p&gt;グローバル設定を調整し、システムデフォルトの &lt;code&gt;ssh&lt;/code&gt; 設定を使用しないようにすることで、この構成では Git Bash は TortoisePlink を使用して SSH 接続を行います。 このような設定は、TortoiseGit に付属している PuTTY ツールを使用する場合に適しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定されている実行ファイルパスを、必要に応じて小烏龜のパスに合わせて変更してください。完全なパスが設定されているため、システム環境変数への追加は不要です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>一括でローカルのGitリポジトリと、過去の権限問題を更新する</title>
        <link>https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/</guid>
        <description>&lt;p&gt;チーム内のプロジェクト間には依存関係があり、過去の経緯から&lt;code&gt;submodule&lt;/code&gt;を利用して依存関係を管理していなかったため、日々の開発では倉庫コードを手動で順番に更新する必要がある。そうしないと、様々な奇妙な問題が発生する可能性がある。&lt;/p&gt;
&lt;p&gt;オンラインの資料を参考に、構造は基本的に似ているので、ローカルで手動で倉庫ディレクトリ &lt;strong&gt;git_list.txt&lt;/strong&gt; を維持し、スクリプトを作成してディレクトリをトラバースし、一度実行して更新し、その後作業を開始する前にスクリプトを実行します。&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ 更新仓库 ===================&amp;quot;

# 检查 git_list.txt 是否存在
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。&amp;quot;
  exit 1
else
  echo &amp;quot;============ 检测到了 git 仓库清单文件 ====&amp;quot;
fi

# 逐行读取 git_list.txt 中的 URL，并执行拉取操作
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url 完成！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;目录 $url 不存在，跳过拉取。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;windows
&lt;/h2&gt;&lt;p&gt;create a new file: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem 进入脚本所在目录
cd /d &amp;quot;%~dp0&amp;quot;

rem 检查 git_list.txt 是否存在
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。
  exit /b 1
) else (
  echo ============ 检测到了 git 仓库清单文件 ====
)

rem 逐行读取 git_list.txt 中的 URL，并执行拉取操作
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i 完成！
    echo ========================================
  ) else (
    echo 目录 %%i 不存在，跳过拉取。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;歴史的遺棄問題&#34;&gt;歴史的遺棄問題
&lt;/h3&gt;&lt;p&gt;システムを再インストールした後で遭遇した&lt;code&gt;git&lt;/code&gt;フォルダの権限ファイルに関する問題：&lt;strong&gt;&amp;ldquo;unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)&amp;ldquo;という致命的なエラー&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;オンラインで推奨されている方法は、ほとんどの場合 &lt;code&gt;stack overflow&lt;/code&gt; から来ています。&lt;/p&gt;
&lt;p&gt;リポジトリディレクトリへの信頼追加：&lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;
手動で設定ファイル&lt;code&gt;.gitconfig&lt;/code&gt;を修正し、ディレクトリを追加して信頼を設定する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;処理が終わった後、倉庫のアップデートは正常になりましたが、毎回 &lt;code&gt;git pull&lt;/code&gt; を実行すると、コンソールに多くの警告メッセージが表示され、ユーザー権限のエラーを促されています。&lt;/p&gt;
&lt;h3 id=&#34;デスクトップのosを入れ替える&#34;&gt;デスクトップのOSを入れ替える
&lt;/h3&gt;&lt;p&gt;開発した機械、あまりにも長い間再インストールしていないのでシステムディスクのゴミファイルが爆発してしまい、どうしようもない。時間を作って再インストールしたらまたこの権限の問題に遭遇し、昔のスクリプトが動かず、修正した権限が不完全だった。&lt;/p&gt;
&lt;p&gt;新しいプランを使って、直接&lt;code&gt;*&lt;/code&gt;を追加すれば、&lt;code&gt;git&lt;/code&gt;はすべてのディレクトリを自動的に信頼する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;不明瞭です、ユーザー権限の問題なのか、それとも皆さんが&lt;code&gt;windows&lt;/code&gt;プラットフォームにも&lt;code&gt;chown&lt;/code&gt;のようなコマンドがあることに慣れていないのか。フォルダの所有者を変更するには、ディレクトリが少ない場合は手動で所有者を変更しても良いのですが、このワークステーションにはドメイン情報が追加されています。会社のドメインに異常があるのか、それともローカルシステムの設定に異常があるのかわかりません。ユーザーリストにはログインに使用しているユーザーが見つかりませんでした。結局、コマンドラインで処理しました。&lt;/p&gt;
&lt;p&gt;管理者権限で、&lt;code&gt;powershell&lt;/code&gt;スクリプト&lt;code&gt;change_ower.ps1&lt;/code&gt;を実行してください。スクリプトファイルのエンコーディングを&lt;code&gt;gbk&lt;/code&gt;に調整することを忘れずに。中国語のオペレーティングシステムなので、そうしないと文字化けします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 获取当前用户的用户名
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# 设置 PowerShell 的字符编码为 UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 要更改所有者的根目录路径
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 替换为实际的目录路径

# 递归遍历目录并更改文件和文件夹的所有者
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # 检查是文件还是文件夹
    if ($_ -is [System.IO.DirectoryInfo]) {
        # 如果是文件夹，使用 icacls 更改所有者权限
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        # 如果是文件，使用 icacls 更改所有者权限
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;已更改文件 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;予期せぬ事態が発生し、やはり予想外のことが起きた。スクリプト実行時の中国語情報が文字化けし、コンソールの文字コード設定やスクリプトのエンコーディング調整を試みたが、すべて文字化けした。頭が働いていないのだろうか。試しにコントロールパネル-地域-言語設定のベータ機能を有効にし、グローバルでUnicodeエンコーディングを有効にしたところ、スクリプトは正常に実行されるようになった。しかし、いくつかの開発ソフトウェアが正常に動作しなくなった。後で資料を整理したところ、ようやくスクリプトファイルのエンコーディングを&lt;code&gt;gbk&lt;/code&gt;に設定する必要があることに気づいた。&lt;/p&gt;
&lt;h2 id=&#34;資料&#34;&gt;資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>いくつかのあまり使われないGitコマンドまとめ</title>
        <link>https://ttf248.life/ja/p/git-less-common-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-less-common-commands-summary/</guid>
        <description>&lt;p&gt;あまり使わないけれど役に立つ&lt;code&gt;git&lt;/code&gt;コマンド&lt;/p&gt;
&lt;h3 id=&#34;システム再インストールによりwindows上のフォルダの所有者情報が変更されました&#34;&gt;システム再インストールにより、Windows上のフォルダの所有者情報が変更されました。
&lt;/h3&gt;&lt;p&gt;新しいバージョンの&lt;code&gt;git&lt;/code&gt;にセキュリティチェックが追加され、警告が表示されるため、操作を続行できません。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;新しいコンピューターにアカウントとパスワードの情報を保存します&#34;&gt;新しいコンピューターにアカウントとパスワードの情報を保存します。
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;情報が更新される必要があれば、まず古い記録を削除してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
