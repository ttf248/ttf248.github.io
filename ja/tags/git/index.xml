<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/git/</link>
        <description>Recent content in Git on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 20:54:02 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Git 子モジュール提交記録の消失</title>
        <link>https://ttf248.life/ja/p/git-submodule-merge-history-lost/</link>
        <pubDate>Mon, 02 Jun 2025 16:44:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-submodule-merge-history-lost/</guid>
        <description>&lt;p&gt;ローカルにGitリポジトリがあり、そのサブモジュールがプル時に一時ブランチになっている。私はその一時ブランチでいくつかのコードをコミットし、その後サブモジュールを&lt;code&gt;main&lt;/code&gt;ブランチに戻した。しかし、これらのコミットされたコードが見つからず、&lt;code&gt;main&lt;/code&gt;ブランチで見つけることができない。また、その一時ブランチの履歴も見つけられない。&lt;/p&gt;
&lt;h2 id=&#34;ソリューション&#34;&gt;ソリューション
&lt;/h2&gt;&lt;p&gt;Git サブモジュールで一時的なブランチにコミットし、&lt;code&gt;main&lt;/code&gt; ブランチに戻すとこれらのコミットが見つからなくなることがあります。この状況を解決するには、以下の手順に従ってください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;コミット履歴の確認:&lt;/strong&gt; サブモジュールのディレクトリに移動し、reflog を使用して失われたコミットを見つけます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新しいブランチを作成してコミットを保存:&lt;/strong&gt; 失われたコミットに基づいて新しいブランチを作成します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;メインブランチへのマージまたはcherry-pick:&lt;/strong&gt; コードをメインブランチに統合します（マージするか、cherry-pickを使用して特定のコミットを選択）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下は具体的な操作手順です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# サブモジュールのディレクトリに移動
cd path/to/your/submodule

# reflog で HEAD の変更履歴を確認（未関連ブランチのコミットも含む）
git reflog

PS F:\dev\notebook\scripts\hugo-content-suite&amp;gt; git reflog
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{0}: checkout: moving from c8d070651310e90d283cb64d98da088c5fe05e73 to main
c8d0706 HEAD@{1}: commit: feat: Markdown 記号の用法ドキュメントを追加、詳細な構文例と効果のデモを提供
48250f5 HEAD@{2}: commit: feat: 文章翻訳プレビュー機能を削除し、翻訳プロセスを簡素化
b8280b6 HEAD@{3}: commit: feat: 絶対パスを取得する機能を追加し、相対パスを絶対パスに変換をサポート
92c354b HEAD@{4}: commit: fix: 文章スキャンロジックの修正、絶対パスを使用してスキャンするようにする
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{5}: checkout: moving from main to de05175d4ec0828e3ae95d726b09dfff18f67a23
de05175 (HEAD -&amp;gt; main, origin/main, origin/HEAD) HEAD@{6}: clone: from https://cnb.cool/ttf248/hugo-content-suite.git

# 失われたコミットに基づいて新しいブランチを作成（例：456def を使用）
git checkout -b saved-work 456def

# メインブランチに戻る
git checkout main

# 保存した作業をメインブランチにマージ（または cherry-pick で特定のコミットを選択）
git merge saved-work
# または
git cherry-pick 456def

# 親プロジェクトディレクトリに戻り、サブモジュールの更新をコミット
cd ..
git add path/to/your/submodule
git commit -m &amp;quot;Update submodule to include new changes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;主要操作手順&#34;&gt;主要操作手順
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;git reflog&lt;/strong&gt;: HEADのすべての履歴を表示し、ブランチに関連付けられていないコミットも含む&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git checkout -b&lt;/strong&gt;: 任意のコミットから新しいブランチを作成し、作業を保存する&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git merge/cherry-pick&lt;/strong&gt;: 保存されたコミットをターゲットブランチに統合する
reflogで記録が見つからない場合は、&lt;code&gt;git fsck --lost-found&lt;/code&gt;を使用して孤立したコミットを探す必要があるかもしれませんが、これは非常にまれなケースです。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Git での履歴記録におけるコミット情報</title>
        <link>https://ttf248.life/ja/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;スクリプトは、Git履歴のコミットメッセージの作成者情報をまとめて変更するために使用され、&lt;code&gt;git filter-branch&lt;/code&gt;を使用してGit履歴を書き換えます。&lt;/p&gt;
&lt;p&gt;ご提供いただいたスクリプトは、Gitリポジトリの履歴コミットにおける作成者情報を一括で修正するものであり、全体的な考え方は正しいですが、&lt;code&gt;git filter-branch&lt;/code&gt; の &lt;code&gt;--env-filter&lt;/code&gt; で配列（例：&lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;）を使用すると、一部のシェル環境（例：&lt;code&gt;/bin/sh&lt;/code&gt;）では互換性の問題が発生する可能性があります。これは、配列構文がサポートされていないためです。
互換性を高めるために、配列をスペースで区切られた文字列に置き換え、&lt;code&gt;for&lt;/code&gt;ループを使用して各古いメールアドレスを反復処理することをお勧めします。以下は修正後のスクリプトの例です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;このスクリプトを実行する前に、リポジトリのバックアップを作成することを強くお勧めします。これにより、予期しない問題が発生した場合に備えることができます。&lt;/li&gt;
&lt;li&gt;この操作はGit履歴を書き換えており、コミット作成者の情報を変更するため、コミットハッシュが変更される可能性があります。&lt;/li&gt;
&lt;li&gt;既に変更をリモートリポジトリにプッシュしている場合は、強制プッシュを実行する必要があります。
強制プッシュには注意し、特に複数人での共同プロジェクトでは、他のメンバーへの影響がないように慎重に行ってください。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;リポジトリ内のすべてのユニークな作成者メールアドレスの統計&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Git で HTTP リポジトリを無効にする</title>
        <link>https://ttf248.life/ja/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;習慣更新ソフトウェアバージョンです。Gitのどのバージョンの場合にHTTPリポジトリからのコード取得が許可されないか不明ですが、以下のエラーが発生します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h2&gt;&lt;p&gt;環境：Windows 平台、これまで小烏龟を使ってgitを操作しており、鍵の認証も小烏龜で処理していました。以前、ローカルリポジトリを一括更新するスクリプトを作成したこともあります。&lt;/p&gt;
&lt;p&gt;前回の記事へのリンク：[ローカルGitリポジトリの一括更新](&amp;lt;{{ relref &amp;ldquo;/post/2023/10-19-批量更新本地git仓库&amp;rdquo; &amp;gt;})&lt;/p&gt;
&lt;p&gt;今日、帰宅してコードの更新を実行したところ、上記のエラーが発生し、リポジトリが正常に更新されなくなりました。&lt;code&gt;Git&lt;/code&gt;の設定でHTTPプロトコルを使用するように変更してみるのが妥当だと思って探しましたが、対応する設定項目は見つかりませんでした。&lt;/p&gt;
&lt;p&gt;最も簡単な解決策は、SSHプロトコルに変更してリポジトリを更新することです。会社側で設定している&lt;code&gt;gitlab&lt;/code&gt;は短期的にHTTPSプロトコルを提供しません。&lt;/p&gt;
&lt;h2 id=&#34;既存の問題&#34;&gt;既存の問題
&lt;/h2&gt;&lt;p&gt;以前、ローカルリポジトリをバッチ更新するためのスクリプトを作成する際に、&lt;code&gt;ssh&lt;/code&gt; を使ってリポジトリをプルすることを検討していたが、詳細を確認しなかった。小烏龟（TortoiseGit）で設定した &lt;code&gt;git&lt;/code&gt; 設定情報を config に同期していなかったため、コマンドラインから&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull # 権限がないために正常に更新できない
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と表示された。&lt;/p&gt;
&lt;p&gt;SSH キーの確認コマンド (&lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;) を実行しても問題なく動作するため、小烏龟（TortoiseGit）でコードをプルできるのに、コマンドラインで &lt;code&gt;git pull&lt;/code&gt; コマンドを実行すると SSH キーが正しくないというエラーが表示される場合、小烏龟は PuTTY の SSH 鍵を使用しているのに対し、コマンドラインは OpenSSH の SSH 鍵を使用している可能性がある。&lt;/p&gt;
&lt;p&gt;小烏亀の秘钥設定は、システム &lt;code&gt;.ssh&lt;/code&gt; フォルダから秘钥ファイル情報を読み取らず、インターフェースでリポジトリ設定を行う際に、個別に秘钥ファイルのパスを設定する。このテクニックを利用すると、プルした最初のリポジトリの設定で秘钥を設定すれば、他のリポジトリも同じ秘钥ファイルを共有できる。PuTTY は秘钥をロードした後、すぐに終了せず、代理サービスを開始する。&lt;/p&gt;
&lt;p&gt;グローバル設定を調整し、システムデフォルトの &lt;code&gt;ssh&lt;/code&gt; 設定を使用しないようにすることで、Git Bash は TortoisePlink を使用して SSH 操作を実行するように構成する。この設定は、TortoiseGit に付属の PuTTY ツールを使用する場合に適している。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の実行ファイルパスを、ご自身の TortoiseGit のパスに合わせて変更してください。完全なパスを設定することで、システム環境変数に追加する必要はありません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ローカルのGitリポジトリと履歴上の遺留権限の問題の一括更新</title>
        <link>https://ttf248.life/ja/p/bulk-update-local-git-and-legacy-permissions/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-update-local-git-and-legacy-permissions/</guid>
        <description>&lt;p&gt;チームのプロジェクト間に依存関係があり、歴史的な理由から &lt;code&gt;submodule&lt;/code&gt; を使用せずにプロジェクトの依存を管理してきました。日常の開発では、リポジトリコードを順番に手動で更新する必要があり、そうでない場合、さまざまな奇妙な問題が発生する可能性があります。&lt;/p&gt;
&lt;p&gt;オンラインの情報源を参照して、構造は基本的に同じです。ローカルで &lt;code&gt;git_list.txt&lt;/code&gt; というディレクトリを維持し、スクリプトを使用してディレクトリを反復処理し、一度に更新を実行し、その後、作業を開始する前にこのスクリプトを実行します。&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux
&lt;/h2&gt;&lt;p&gt;新しいファイルを作成: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ リポジトリの更新 ===================&amp;quot;

# git_list.txt が存在するか確認
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt ファイルが存在しません！git をプルするリポジトリ URL を作成し、追加してください。&amp;quot;
  exit 1
else
  echo &amp;quot;============ git リポジトリリストを検出しました ====&amp;quot;
fi

# git_list.txt から URL を一行ずつ読み込み、プル操作を実行
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url が完了しました！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;ディレクトリ $url は存在しません。プルをスキップします。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows
&lt;/h2&gt;&lt;p&gt;新しいファイルを作成: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem スクリプトの存在するディレクトリへ移動
cd /d &amp;quot;%~dp0&amp;quot;

rem git_list.txt が存在するか確認
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt ファイルが見つかりません！ git リポジトリ URL を作成し、追加してください。
  exit /b 1
) else (
  echo ============ git リポジトリリストファイルが検出されました =========
)

rem git_list.txt 内の URL を行ごとに読み込み、プル操作を実行
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo %%i のプルが完了しました！
    echo ========================================
  ) else (
    echo ディレクトリ %%i は存在しません。スキップします。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;過去の遺留問題&#34;&gt;過去の遺留問題
&lt;/h3&gt;&lt;p&gt;再装システム後に発生した &lt;code&gt;git&lt;/code&gt; フォルダの権限ファイルに関する問題を解決します：&lt;strong&gt;致命的なエラー「unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)」&lt;/strong&gt;
オンラインで提案されている解決策は、主に &lt;code&gt;stack overflow&lt;/code&gt; から提供されています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リポジトリディレクトリに信頼を追加: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitconfig&lt;/code&gt; ファイルを手動で編集し、ディレクトリを信頼として指定&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の方法により、リポジトリの更新は正常になりましたが、毎回 &lt;code&gt;git pull&lt;/code&gt; を実行する際にコンソールに多数の警告メッセージが表示され、所有者に関するエラーを示しています。&lt;/p&gt;
&lt;h3 id=&#34;デスクトップpcのシステム再インストール&#34;&gt;デスクトップPCのシステム再インストール
&lt;/h3&gt;&lt;p&gt;長らくシステムを再インストールしていなかったマシンで、システムディスクにゴミファイルが爆発的に発生し、仕方なく空き時間を利用してシステムを再構築した。再度この権限の問題に遭遇し、以前のスクリプトが動作しない原因は、修正した権限が不完全だったことによるもの。&lt;/p&gt;
&lt;p&gt;新しい解決策を採用し、&lt;code&gt;*&lt;/code&gt;を追加することで、&lt;code&gt;git&lt;/code&gt;がすべてのディレクトリを自動的に信頼するように設定した。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;これはユーザーの権限の問題か、それとも皆さんがWindowsプラットフォームに慣れていないことが原因なのか。実際には&lt;code&gt;chown&lt;/code&gt;のようなコマンドも存在する。フォルダの所有者を変更することはもちろん可能だが、もしディレクトリ数が少ない場合は、手動で所有者を変えることもできる。しかし、このワークステーションはドメイン情報を追加しており、おそらく会社のドメインが異常を抱えているか、あるいはローカルシステムの設定に問題があるため、ユーザーリストからログインに使用するユーザーが見つからない状態だった。最終的にはコマンドラインを使用して問題を解決した。&lt;/p&gt;
&lt;p&gt;管理者権限で&lt;code&gt;powershell&lt;/code&gt;スクリプト&lt;code&gt;change_ower.ps1&lt;/code&gt;を実行し、スクリプトファイルのエンコーディングを&lt;code&gt;gbk&lt;/code&gt;に設定することを忘れないでください。中国語のオペレーティングシステムでは、そうしないと文字化けしてしまうため。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 現在のユーザー名を取得
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# PowerShell の文字エンコーディングを UTF-8 に設定
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 所有者を変更するルートディレクトリパス
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 実際のパスに置き換えてください

# ディレクトリとファイルを再帰的に取得し、所有者を変更
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # アイテムがファイルかディレクトリかをチェック
    if ($_ -is [System.IO.DirectoryInfo]) {
        # ディレクトリの場合、icacls コマンドを使用して所有者権限を変更
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;ディレクトリ $itemPath の所有者を $currentUserName に変更しました&amp;quot;
        } else {
            Write-Host &amp;quot;ディレクトリ $itemPath の所有者変更に失敗しました。エラー情報: $icaclsResult&amp;quot;
        }
    } else {
        # ファイルの場合、icacls コマンドを使用して所有者権限を変更
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;ファイル $itemPath の所有者を $currentUserName に変更しました&amp;quot;
        } else {
            Write-Host &amp;quot;ファイル $itemPath の所有者変更に失敗しました。エラー情報: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;予想外の事態が再び発生し、スクリプト実行時の出力された日本語の情報が文字化けした。コンソールエンコーディングの設定を調整したり、スクリプトのエンコーディングを変更したりしたが、すべて文字化けしてしまう。おそらく脳みそが完全に機能停止しているのだろうと推測し、コントロールパネル - 領域 - 言語設定のベータ機能を試してみた。グローバルにUnicodeエンコーディングを有効にし、スクリプト実行は正常になった。いくつかの開発ソフトウェアが正常に動作しないままであり、後で資料を整理したところ、スクリプトファイルのエンコーディングを&lt;code&gt;gbk&lt;/code&gt;に設定する必要があることを思い出した。&lt;/p&gt;
&lt;h2 id=&#34;资料&#34;&gt;资料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>いくつかのGitコマンドのまとめ</title>
        <link>https://ttf248.life/ja/p/less-common-git-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/less-common-git-commands-summary/</guid>
        <description>&lt;p&gt;あまり使わないけれど非常に便利な &lt;code&gt;git&lt;/code&gt; コマンド&lt;/p&gt;
&lt;h3 id=&#34;システムを再インストールした結果windows上のフォルダーの所有権が変更されました&#34;&gt;システムを再インストールした結果、Windows上のフォルダーの所有権が変更されました。
&lt;/h3&gt;&lt;p&gt;新しいバージョンのGitにはセキュリティチェックが追加され、不安全であると警告が表示されるため、操作できなくなりました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ユーザーの新しいコンピューターにアカウントとパスワード情報を保存する&#34;&gt;ユーザーの新しいコンピューターにアカウントとパスワード情報を保存する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;保存された情報が更新が必要な場合は、まず古い認証情報を削除してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
    </channel>
</rss>
