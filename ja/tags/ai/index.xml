<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>AI on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/ai/</link>
        <description>Recent content in AI on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 07:41:32 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/ai/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>旧習（こくしゅう）、華やかなりど（かやかなれど）</title>
        <link>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</link>
        <pubDate>Mon, 26 May 2025 23:54:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</guid>
        <description>&lt;p&gt;長年にわたりバックエンド開発に注力してきましたが、最近は &lt;code&gt;AI&lt;/code&gt; プログラミングを試したり、少しフロントエンド関連のことも取り組むようになりました。しかし、この間の苦労の中で、自分には昔からある古傷—「繁華なものに目を奪われる」—に気づきました。&lt;code&gt;AI&lt;/code&gt; を使ってフロントエンドインターフェースを実現しようとするのですが、実際にはそのような試みが現在の仕事に大きな実質的な助けになりませんし、むしろ時間を浪費してしまいます。&lt;/p&gt;
&lt;h2 id=&#34;ai-の適用シナリオ&#34;&gt;AI の適用シナリオ
&lt;/h2&gt;&lt;p&gt;小規模なプロジェクトにおいては、AI ツールが大きな役割を果たすことができ、特に独立性が高く、システムとの結合度が低く、ビジネスロジックが単純な関数を作成する際に非常に役立ちます。このようなタスクは通常、明確な入力と出力があり、文脈依存が少ないため、現在の AI 支援プログラミングの能力範囲に最適です。&lt;/p&gt;
&lt;p&gt;しかしながら、複雑なシステムアーキテクチャや深いビジネスロジックに対処する場合、AI の限界が現れ始めます。それは、プロジェクトの実際のニーズから乖離した、見かけ上は合理的だが実際には不適切なコードを生成したり、デバッグが困難な潜在的な問題を導入したりする可能性があります。このような状況下では、AI はあくまで補助ツールとして活用でき、完全なコード生成器に依存することはできません。生成されたコードに対して厳格なレビューとテストを実施し、実際の要件を満たしていることを確認する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;誤りとその学習の代償&#34;&gt;誤りとその学習の代償
&lt;/h2&gt;&lt;p&gt;AI を使ってフロントエンドコードを生成しようと試みた際、多くの課題に直面しました。フロントエンドは私の馴染みのない分野であるため、問題の原因を特定するプロセスは時間と労力を要しました。プロンプトを調整して AI にコードを書き直しても、どうしても些細なエラーが発生してしまうのです。このような試行錯誤は時間を浪費するだけでなく、現在の私のエネルギーはバックエンドのビジネスロジックに集中すべきだと気づかせてくれました。&lt;/p&gt;
&lt;p&gt;週末に完成させたプロジェクトを振り返ってみると、バックエンド開発とユーザーインタラクションロジックに焦点を当て、コンソールを通じて機能を実装することが、現状で最も効率的な選択であるという確信が持てます。より多くの時間とエネルギーを得られるようになったときには、フロントエンドの知識を体系的に学ぶ方が良いかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;フロントエンド学習の計画&#34;&gt;フロントエンド学習の計画
&lt;/h2&gt;&lt;p&gt;フロントエンド技術スタックは複雑で多様であり、短期間で習得するのは現実的ではありません。まずは、Vue.jsやReact.jsなどのフレームワークを選択し、そのコアな概念と使用方法を深く学ぶことを計画しています。基礎知識を習得した後で、AIを活用してフロントエンドコードを生成してみることで、不慣れによる誤りや時間の浪費を防ぐことができます。&lt;/p&gt;
&lt;p&gt;まとめると、現在の段階ではバックエンド開発に重点を置き、着実にコアスキルを向上させることに注力します。その時が来るまで、フロントエンドとAIの組み合わせを探求することは控えめにし、より大きな収穫を得られる可能性があります。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Claude4のリリース、開発を試す：hugoタグ、超リンク翻訳アシスタント</title>
        <link>https://ttf248.life/ja/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;本サイトはHugoで開発されていますが、筆者自身は常に中国語のタイトルを使用しており、その結果、生成される記事の超リンクが使いにくい状態でした。つまり、送信する際に、中国語の文字が超リンク内で%E4%BD%A0%E5%A5%BDのような形式にエスケープされてしまうため、見た目が良くありません。設定でslugを設定することで解決できますが、毎回手動で設定する必要があり、非常に面倒でした。
そこで、Claude4を使って翻訳アシスタントを開発し、中国語のタイトルを自動的に英語のslugに変換し、記事の中に超リンクを追加することを試みました。これにより、手動での設定を回避することができます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claude4はマジで最高！文脈理解能力が大幅に向上し、複雑なタスクの処理効率も飛躍的に向上しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;プロジェクトアドレス&#34;&gt;プロジェクトアドレス
&lt;/h2&gt;&lt;p&gt;国内プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
国外プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;コードの実装&#34;&gt;コードの実装
&lt;/h2&gt;&lt;p&gt;まず、実装の思路について説明します。すべての文章をスキャンし、タグ情報と文章タイトルを抽出した後、ローカルの大規模言語モデル（例：gemma-3-12b-it）を呼び出して翻訳します。&lt;/p&gt;
&lt;p&gt;実際の開発においては、前世代の大規模言語モデルと比較して、&lt;code&gt;Claude4&lt;/code&gt; はいくつかの顕著な点を発揮しました。機能要件が多いため、&lt;code&gt;Claude4&lt;/code&gt; はインタラクティブメニューを自動的に設計し、さまざまな使用シナリオを考慮しました。例えば、タグ処理に関しては、&lt;code&gt;Claude4&lt;/code&gt; はタグの統計と分析だけでなく、分類統計もサポートし、さらに&lt;strong&gt;ラベルのない文章&lt;/strong&gt;を検出することも可能です。また、プレビュー機能やタグページ生成機能も提供しています。&lt;/p&gt;
&lt;p&gt;ローカルの大規模言語モデルとの連携、翻訳キャッシュの追加、大規模なコードのリファクタリングなど、&lt;code&gt;Claude4&lt;/code&gt; はすべて一度に完了し、ほとんど問題が発生しませんでした。 プロジェクトの規模は小さいものの、多くの小さな機能を含んでいます。これまで開発プロセスにおいて、大規模モデルはしばしば前の内容を忘れてしまうことがありましたが、今回の「Claude4」は非常に優れたパフォーマンスを示し、&lt;strong&gt;文脈の消失がほとんど見られませんでした&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要するに、知能レベルが向上しており、今後の開発作業では「Claude4」をより多く活用し、日常的なコーディングの主力モデルとして使用していく予定です。&lt;/p&gt;
&lt;h2 id=&#34;翻訳キャッシュ&#34;&gt;翻訳キャッシュ
&lt;/h2&gt;&lt;p&gt;この注文に関する説明では、大規模モデルの呼び出し回数を減らすだけでなく、実際に12Bモデルをローカルで実行すると効率が非常に高く、時間ロスもありません。しかし、毎回大規模モデルを呼び出す場合は、やはり少し遅くなります。また、文章のリンクを固定するために、全量更新操作を実行した場合、文章のタイトルが長いため、稀に2回の翻訳結果が異なり、リンクが変わってしまうという状況が発生します。これは非常に困ります。&lt;/p&gt;
&lt;h2 id=&#34;機能最適化&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;プロジェクト全体を &lt;code&gt;Claude4&lt;/code&gt; に委ね、最適化の余地を分析し、以下の提案を得ました：&lt;/p&gt;
&lt;p&gt;コードレビューを実施した結果、問題点は一切見当たらず、例えば設定ファイルについては、既存のコードから元の設定をデフォルト設定に変換し、設定ファイルを読み込む際に、対応する設定ファイルが存在しない場合に自動的にデフォルト設定ファイルを作成することで、ユーザー側の操作ミスを防いでいます。 要件：原文を翻訳する際に、現在の翻訳効率を動的に計算し、残りの時間を予測し、関連情報をコンソールに出力します。現在、文章の文字数を取得し、各行の翻訳時に現在の翻訳文字数、時間、100文字あたりの翻訳時間の適合計算を行い、同時に文章全体の残りの翻訳推定時間を計算します。&lt;/p&gt;
&lt;p&gt;コードが完了しましたが、効果はそれほど良くありません。そこで、AIに新しい設計案を提案してもらいます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の効率計算方法を提供：リアルタイム効率、平均効率、スライディングウィンドウ効率&lt;/li&gt;
&lt;li&gt;表示方法の改善：プログレスバー、セクションごとの統計、動的更新&lt;/li&gt;
&lt;li&gt;より役立つ指標を追加：API呼び出し回数、成功率など&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードが完了した後、翻訳効率の統計情報がリアルタイムで大量に表示されることを見つけましたが、スクロールを無効にする機能はありませんでした。 要件：原文を翻訳する際に、現在の翻訳効率を動的に計算し、残りの時間を予測し、関連情報をコンソールに出力します。現在、文章の文字数を取得し、各行の翻訳時に現在の翻訳文字数、時間、100文字あたりの翻訳時間の適合計算を行い、同時に文章全体の残りの翻訳見積もり時間を計算しています。&lt;/p&gt;
&lt;p&gt;コードが完了しましたが、効果はそれほど良くありません。そこで、AIに新しい設計案を提案してもらいます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の効率計算方法を提供します（リアルタイム効率、平均効率、スライディングウィンドウ効率など）&lt;/li&gt;
&lt;li&gt;表示方法の改善を行います（進捗バー、セグメント統計、動的更新など）&lt;/li&gt;
&lt;li&gt;より役立つ指標を追加します（API呼び出し回数、成功率など）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードが完了した後、翻訳効率の統計情報がリアルタイムで大量に表示されることを見つけましたが、スクロールを無効化していません。&lt;/p&gt;
&lt;h3 id=&#34;性能統計メニュー&#34;&gt;性能統計メニュー
&lt;/h3&gt;&lt;p&gt;新たに作成された&lt;strong&gt;性能統計メニュー&lt;/strong&gt;は、私自身で設計したものでも、これほど完璧とは言い難い。&lt;/p&gt;
&lt;p&gt;📊 性能統計：
🔄 翻訳回数：360
⚡ キャッシュヒット率：1.4% (5/365)
⏱️ 平均翻訳時間：315.927234ms
📁 ファイル操作：73
❌ エラー回数：0&lt;/p&gt;
&lt;h3 id=&#34;プログレスバーの表示&#34;&gt;プログレスバーの表示
&lt;/h3&gt;&lt;p&gt;新增の&lt;strong&gt;プログレスバーの表示&lt;/strong&gt;、詳細な進捗状況、経過時間、残り時間の推定
機能を選択してください (0-13): 10
🔍 翻訳対象を収集中&amp;hellip;
📄 キャッシュファイルが読み込まれました。翻訳記録は 0 件含まれています
📊 翻訳キャッシュ統計:
🏷️ ラベル総数: 229 個
📝 文章総数: 131 篇
✅ キャッシュ済み: 0 個
🔄 翻訳が必要: 360 個&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;p&gt;完全な翻訳キャッシュを確認しますか？(y/n): y
🚀 完全な翻訳キャッシュの生成中&amp;hellip;
📄 キャッシュファイルが読み込まれました。翻訳レコードは0件含まれます。
🔍 キャッシュ内の翻訳をチェック中&amp;hellip;
🔄 翻訳する必要があるラベルは360個です
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - 時間: 3秒 - 残り時間: 約3分8秒
💾 キャッシュファイルが保存されました。翻訳レコードは5件含まれます。
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2. 8% - 実行時間：6秒 - 残り推定時間：3分28秒💾 キャッシュファイルが保存されました（翻訳記録10件を含む）
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - 実行時間：9秒 - 残り推定時間：3分30秒💾 キャッシュファイルが保存されました（翻訳記録15件を含む）&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示-1&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;p&gt;[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - 経過時間: 13秒 - 残り時間予測: 3分36秒💾 キャッシュファイルが保存されました（翻訳記録 20 件を含む）
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - 経過時間: 16秒 - 残り時間予測: 3分33秒💾 キャッシュファイルが保存されました（翻訳記録 25 件を含む）
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8. 3% - 実行時間: 19秒 - 残り推定時間: 3分30秒 💾 キャッシュファイルが保存されました（30件の翻訳記録を含む）
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - 実行時間: 22秒 - 残り推定時間: 3分25秒 💾 キャッシュファイルが保存されました（35件の翻訳記録を含む）&lt;/p&gt;
&lt;h3 id=&#34;プログレスバーの表示-1&#34;&gt;プログレスバーの表示
&lt;/h3&gt;&lt;hr&gt;</description>
        </item>
        <item>
        <title>AIを使いすぎると、後遺症が出るんだな。</title>
        <link>https://ttf248.life/ja/p/ai-overuse-side-effects/</link>
        <pubDate>Wed, 14 May 2025 19:39:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-overuse-side-effects/</guid>
        <description>&lt;p&gt;新しい「AI 灵感碰撞坊」を立ち上げたことで、様々なものが溢れてきて、AIを使って記録したり、発信したりするものが増え続けていますが、静かに自分自身で考え込むようなものは減ってきているようです。今後はこの欄の出力をある程度コントロールし、月刊形式にまとめるのが良いかもしれません。毎月1本の内容を公開すればよいでしょう。&lt;/p&gt;
&lt;p&gt;これはまるで、一種の副作用のようなもの、あるいは後遺症と言えるかもしれません。効率は上がっていますが、思考の深さや幅は縮んでしまっているように感じます。&lt;/p&gt;
&lt;h2 id=&#34;効率向上否定できない&#34;&gt;効率向上：否定できない
&lt;/h2&gt;&lt;p&gt;以前、ブログのコーナー「魚の七秒鐘見聞」はメンテナンスされていませんでした。いくつかのホットな事件を放置し、インターネット検索や記録整理を行わずにいました。しかし、様々なAIツールが登場し、大枠を整理するだけで、AIが自動的に関連するイベントを検索・記録し、必要な文章を生成したり、簡単なフォーマット調整を行うことができます。&lt;/p&gt;
&lt;p&gt;これはまさに怠け者の救済策であり、効率が大幅に向上しました。さらには、執筆やコーディングにおいても同様です。以前はAPIインターフェースドキュメントの詳細な読み込みが必要でしたが、現在はAIにその部分を任せることで、非常に効率的です。APIの習得は「体力労働」であり、AIに任せることで「知的労働」に集中できます。&lt;/p&gt;
&lt;h2 id=&#34;垃圾コンテンツ&#34;&gt;垃圾コンテンツ
&lt;/h2&gt;&lt;p&gt;多くの稿子で、内容の質が低いと言わざるを得ません。読み応えがなく、煙火の息吹がないという点で、以前私が好まなかったスタイルです。まるで蝋を噛むようなものです。&lt;/p&gt;
&lt;p&gt;別の角度から言えば、AI生成コンテンツは、まさに流水線のようなもので、魂が欠けていると感じます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新時代のインターネットゴミ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;忘却性&#34;&gt;忘却性
&lt;/h2&gt;&lt;p&gt;このタイプの稿子は、読者の状況が不明確であり、時間が経つにつれて、私の記憶も曖昧になり、つい忘れかけてしまうことがあります。&lt;/p&gt;
&lt;p&gt;同様の問題は、コードを書く際にも発生します。コードの提交記録を振り返らずに、自分がどのように考え、なぜそう書いたのか全く思い出せないのです。特に、コードとAIが繰り返しコミュニケーションを通じて生成されたコードは、当初のアイデアとは大きく異なり、場合によっては全く異なるものになってしまうことがあります。&lt;/p&gt;
&lt;h2 id=&#34;検索&#34;&gt;検索
&lt;/h2&gt;&lt;p&gt;最近、Googleや百度を開く回数が明らかに減りました。多くの問題はAIを使って検索したり、インタラクティブな部分も検索結果も、従来の検索エンジンよりもずっと良いからです。
現在では、まだ生きているかどうか分からない&lt;code&gt;bing ai&lt;/code&gt;を追悼しましょう。これは大手企業の中で最初にリリースされた、インターネットに接続して検索できるAIツールです。
Googleの使用頻度が減り、&lt;code&gt;stackoverflow&lt;/code&gt;へのアクセス回数も減りました。多くの問題は直接AIに質問するだけで済みます。このサイトも時代の淘汰にさらされるでしょう。&lt;/p&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに
&lt;/h2&gt;&lt;p&gt;筆記が維持しているブログですが、元々アクセス数はほとんどなく、今ではさらに期待していません。むしろ、自分宛の記録場所となっています。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>コードを記述せず、カスタム株式選定モジュールを設計・開発する。</title>
        <link>https://ttf248.life/ja/p/no-code-design-develop-custom-stock-module/</link>
        <pubDate>Thu, 27 Feb 2025 23:20:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/no-code-design-develop-custom-stock-module/</guid>
        <description>&lt;p&gt;先月の当社では、cursorを試用しましたが、無料枠の制限により、複雑な機能開発は行わず、簡単なテストにとどまりました。その際に見つけたのは、Byte社も同様の製品を発表しており、両者は底層で呼び出している大規模言語モデルがClaude-3.5である点でした。
Byte社の製品はTraeといい、最初にリリースされたmac版は今年2月にWindows版もリリースされました。大手企業のものは良いもので、無料で「白嫖」（無料でお得に利用する）でき、お金を払うことなく、無制限にClaude-3.5を使用できるため、このモデルの効果は十分に高いです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最終的にはK線チャートの開発で詰まってしまいました。Reactの基本的な知識が全くないため、諦めざるを得ませんでした。もし継続的に開発を進めるのであれば、筆者がフロントエンドの基礎知識を補強し、タスクをより細かく分割し、直接「K線チャートの開発」という大きなタスクを与えるのではなく行うべきです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;発見された問題点&#34;&gt;発見された問題点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;外国製のAIモデルを使用していたため、Vue3 + Element-Plusの学習データが不足しており、Reactをフロントエンドフレームワークとして採用しました。&lt;/li&gt;
&lt;li&gt;偶発的な構文エラーが存在する可能性があり、手動での修正が必要です。&lt;/li&gt;
&lt;li&gt;一部の複雑な問題に対する解決策は、人的指導が必要となります。&lt;/li&gt;
&lt;li&gt;コード構造の最適化には、人的指導が必要です。&lt;/li&gt;
&lt;li&gt;最も時間がかかったのは、フロントエンドコードをコンテナにパッケージングすることでした。筆者は環境が全く理解されておらず、&lt;code&gt;.env.production&lt;/code&gt;や&lt;code&gt;tsconfig.json&lt;/code&gt;といった概念自体を知らなかったため、途中で助けを求める豆包（ネットでの質問サイトのユーザー）に頼らざるを得ませんでした。フロントエンドの開発 devモードとbuildモードでは、コードチェックや差異が大きく異なりました。バックエンドのデータベースおよびサービスのコンテナスクリプトは、合計5分で完了しました。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AIは現状では開発効率を向上させる主な役割であり、基礎があることは最適です。AIがすべての問題を解決してくれるわけではありません&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;リポジトリアドレス&#34;&gt;リポジトリアドレス
&lt;/h2&gt;&lt;p&gt;タイトル通り、今回は手を動かさず、AIと雑談して、自選株モジュールを設計・開発してみます。最終的に何ができるようになるか試していきます。&lt;/p&gt;
&lt;p&gt;リポジトリアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/trae-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/trae-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;詳細な使用方法は、リポジトリのREADME.mdファイルをご覧ください。&lt;/p&gt;
&lt;p&gt;このリポジトリには多数の提出記録が含まれており、ほとんどが私とTraeとの会話記録、およびTraeの機能に対する私のテストです。対応する機能を実装するために人工干渉を行ったかどうかを備考に記載しています。&lt;/p&gt;
&lt;h2 id=&#34;プロンプト&#34;&gt;プロンプト
&lt;/h2&gt;&lt;p&gt;プロジェクトはゼロから作成され、以下のプロンプトが提示されます：&lt;/p&gt;
&lt;h2 id=&#34;uiとインタラクションの最適化&#34;&gt;UIとインタラクションの最適化
&lt;/h2&gt;&lt;p&gt;フロントエンドインターフェースのデザインは完全にGrokに依存しています。まず、Trae内で成果物のプロトタイプを作成しましたが、美観が欠けていました。使用していたモデルはコード能力は非常に高いものの、他の能力は弱いため、Grokを使用してフロントエンドのUIを最適化する必要があります。&lt;/p&gt;
&lt;p&gt;現在のインターフェースのスクリーンショットを撮影し、それをGrokにアップロードして、UIの最適化を依頼します。これにより、一度に多くの最適化提案を得ることができ、それらを人工的に評価し、Traeにコピーして実行し、最適化の効果を確認します。&lt;/p&gt;
&lt;h3 id=&#34;技術スタック&#34;&gt;技術スタック
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;フロントエンド：React + TypeScript&lt;/li&gt;
&lt;li&gt;バックエンド：Golang + Gin + GORM&lt;/li&gt;
&lt;li&gt;データベース：PostgreSQL 17&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;システムアーキテクチャ&#34;&gt;システムアーキテクチャ
&lt;/h2&gt;&lt;h2 id=&#34;后端アーキテクチャ&#34;&gt;后端アーキテクチャ
&lt;/h2&gt;&lt;p&gt;后端は Golang の Gin フレームワークを用いて RESTful API を実装しており、主なモジュールには以下が含まれます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;データベースモジュール&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;GORM を ORM フレームワークとして使用&lt;/li&gt;
&lt;li&gt;環境変数でデータベース接続を設定可能&lt;/li&gt;
&lt;li&gt;データベーススキーマの自動移行機能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ルーティングモジュール&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;RESTful API 設計&lt;/li&gt;
&lt;li&gt;一貫したエラーハンドリングメカニズム&lt;/li&gt;
&lt;li&gt;内蔵のリクエストログ記録&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;クロスオリジン処理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;ローカル開発環境でのクロスオリジンをサポート&lt;/li&gt;
&lt;li&gt;設定可能な CORS ポリシー&lt;/li&gt;
&lt;li&gt;Cookie によるクロスオリジンをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;フロントエンドアーキテクチャ&#34;&gt;フロントエンドアーキテクチャ
&lt;/h2&gt;&lt;p&gt;フロントエンドはReact + TypeScriptで構築され、以下の機能を実装しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;株価リストの表示&lt;/li&gt;
&lt;li&gt;お気に入り銘柄の管理&lt;/li&gt;
&lt;li&gt;相場データ表示&lt;/li&gt;
&lt;li&gt;エラー通知メカニズム&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>AI開発2年：ドッカーのリリース前の状態に似ている</title>
        <link>https://ttf248.life/ja/p/ai-development-two-years-docker-pre-release/</link>
        <pubDate>Thu, 20 Feb 2025 18:16:37 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-development-two-years-docker-pre-release/</guid>
        <description>&lt;p&gt;人工知能（AI）は近年、技術分野で最も議論を呼ぶトピックの一つであり、特に過去2年間でその進歩は目覚ましいものがありました。深層学習、自然言語処理、コンピュータビジョン、自動化意思決定システムなど、AIの応用範囲は多岐にわたっています。しかしながら、技術が着実に進化を続けているにもかかわらず、AIはDockerのリリース前のボトルネックに似た状況にあります——つまり、市場を本格的に引き出す「ゲームチェンジャー」となるような、真に革新的なアプリケーションが存在しないのです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プロンプト：記事を作成してください：AIは過去2年間で発展し、Dockerのリリース前のボトルネックのような状態です。既存技術に基づいて、完璧な実用例を構築し、Dockerはあまり新しい技術を使用せず、全体的なソリューションが合理的に、運用および開発ワークフローを変革します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;aiの現状技術は成熟しているが応用には突破が必要&#34;&gt;AIの現状：技術は成熟しているが、応用には突破が必要
&lt;/h2&gt;&lt;p&gt;技術的な側面から見ると、AIは過去2年間で相当な進歩を遂げました。OpenAIが発表したGPTシリーズモデルや、GoogleのBERT、DeepMindのAlphaシリーズなど、AIの処理能力は以前の予測を大きく上回っています。特に自然言語処理分野では、GPT-4などのモデルが強力な生成能力に加えて、理解と推論においても驚くべきパフォーマンスを発揮しています。&lt;/p&gt;
&lt;p&gt;しかしながら、技術革新は日進月歩であるにもかかわらず、AIの実用的な応用においてはいくつかの課題が残されています。Dockerのリリース前の状況に似ており、AIの潜在力は巨大ですが、現時点では広く普及し、産業を変革するほどの「ゲームチェンジャー」となるアプリケーションはまだ出現していません。人々がAIの将来について語る一方で、実際に革命的な変化をもたらすことができる直接的な応用シナリオを見つけることは難しい状況です。&lt;/p&gt;
&lt;h2 id=&#34;dockerとaiの類似性技術は必ずしも革新ではなく解決策が重要&#34;&gt;DockerとAIの類似性：技術は必ずしも革新ではなく、解決策が重要
&lt;/h2&gt;&lt;p&gt;Dockerリリース前の歴史を振り返ると、技術環境とAIの現状には多くの類似点が見られることに気づきます。Dockerリリース前にコンテナ技術自体が新しいものではありませんでした。初期のLXC（Linux Containers）や仮想化技術もコンテナ化の基本的な能力を持っていました。しかし、Dockerは既存技術の巧みな統合と最適化を通じて、よりシンプルで直感的かつ効率的な解決策を提示しました。この解決策は、画期的な技術を導入したわけではありませんが、運用・開発プロセスにおける多くの課題を解決し、ソフトウェアのデプロイ、拡張、管理プロセスの大幅な簡素化を実現しました。&lt;/p&gt;
&lt;p&gt;同様に、AI分野も類似の状況に直面しています。 現在のAI技術は「新鮮なもの」ではなくなったとはいえ、本格的な大規模展開を実現するには、完璧な実現シナリオが必要であり、Dockerのように既存の技術を統合し最適化して、合理的なアプリケーションソリューションを形成することが求められます。AIの殺手級アプリケーションは、画期的な技術的ブレークスルーに依存するのではなく、既存の技術を組み合わせて、実際のビジネスにおける課題やニーズを解決することにある可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;aiのdocker-momentを見つけるには&#34;&gt;AIの「Docker Moment」を見つけるには？
&lt;/h2&gt;&lt;p&gt;AI技術が広く普及するためには、いくつかの側面から取り組む必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;実用的なシナリオの深掘り&lt;/strong&gt;
現在、多くのAIアプリケーションは実験的な性質を持ち、大規模な実用化に乏しいです。例えば、AIチャットボットやレコメンデーションシステムなどの分野は広く利用されていますが、その機能にはまだ多くの制約があり、業界のボトルネックを打破していません。真のブレイクスルーは、従来のやり方に困っている業界、たとえば医療、製造業、物流などの分野から来る可能性があります。AIは、より効率的なデータ処理と予測分析を通じて、これらの複雑なシナリオにおいて企業が効率を高め、コストを削減するのを支援できます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;製品化と使いやすさ&lt;/strong&gt;
Dockerのようにコンテナ化プロセスを簡素化し運用効率を向上させるのと同様に、AI製品の使いやすさは非常に重要です。 AIの普及は、技術の普及だけではなく、その製品化の普及でもある。AIを日常業務フローに統合し、ユーザーが技術を深く理解する必要なく、これらのツールを簡単に利用できるようにすることは、AIの実落地における重要な一歩である。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;エコシステムの構築と標準化&lt;/strong&gt;
新しい技術の広範な応用には、エコシステムの構築が不可欠である。Dockerが急速に台頭したのも、そのオープン性と互換性により、開発者がさまざまなクラウドプラットフォーム、ツール、およびサービスと容易に連携できたためである。同様に、AIの未来もエコシステムの構築に依存する。AIの標準化、モデルの共有、データのオープン性、そして技術の統合性は、AIが広範な産業応用を達成できるかどうかを左右するだろう。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;結論aiの未来は可能性に満ちているが更なる実現に向けた具体的な計画が必要&#34;&gt;結論：AIの未来は可能性に満ちているが、更なる実現に向けた具体的な計画が必要
&lt;/h2&gt;&lt;p&gt;過去2年間にわたり、AI技術は目覚ましい進歩を遂げているものの、現状では「殺到するようなアプリケーション」が存在しない段階にある。Dockerがリリース前のコンテナ化技術と同様に、AIには合理的な応用シナリオが必要であり、既存の技術とビジネスニーズを深く融合させることで初めて、大規模な展開と普及を実現できる。技術革新は重要であることはもちろんだが、業務プロセスを簡素化し、効率を高めるソリューションこそが、技術の普及と発展を促進するだろう。&lt;/p&gt;
&lt;p&gt;未来において、AIはDockerのように、画期的な技術的ブレークスルーではなく、既存技術を統合し、完璧な応用シナリオを構築することで、私たちの仕事や生活様式を変革していく可能性がある。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ollama ローカル実行 deepseek-R1</title>
        <link>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</link>
        <pubDate>Fri, 07 Feb 2025 22:41:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</guid>
        <description>&lt;p&gt;Ollamaは、大規模言語モデル (LLM) をローカルで実行およびデプロイできるように設計されたオープンソースのAIツールです。クラウドサービスへの依存を減らし、開発者がローカルマシン上でGPTのようなモデルを使用するための便利な効率的な方法を提供することを目的としています。Ollamaは複数のモデルをサポートし、パフォーマンスを最適化することに重点を置いており、リソースが限られたデバイスでもこれらのモデルをスムーズに実行できるようにします。&lt;/p&gt;
&lt;p&gt;Ollamaを使用すると、テキストベースのAIアプリケーションを利用でき、ローカルでデプロイされたモデルとインタラクションできます。データプライバシーやAPIの使用料金に関する懸念なくです。コマンドラインインターフェース (CLI) を通じてさまざまなモデルを呼び出し、自然言語処理、質問応答などのタスクを実行できます。 &amp;gt; ollama は様々なモデルを試すのに適しており、Windows 版でテストしたところ、ハードウェアの性能を十分に発揮することができませんでした。これは Windows 版の問題である可能性があり、Linux 版の方が良いかもしれません。32b パラメータのモデルをデプロイする際、メモリや GPU の負荷が低い状況でも、応答速度が遅い。&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア概要&#34;&gt;ハードウェア概要
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;オペレーティングシステム: Windows 11&lt;/li&gt;
&lt;li&gt;CPU: i7-10700K&lt;/li&gt;
&lt;li&gt;メモリ: 40GB&lt;/li&gt;
&lt;li&gt;グラフィックカード: RTX 3060 12GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;環境準備&#34;&gt;環境準備
&lt;/h2&gt;&lt;p&gt;以下のシステム環境変数を設定し、後続の使用を容易にします：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_MODELS=E:\ollama&lt;/code&gt;&lt;/strong&gt;
この変数で Ollama モデルの保存パスを指定します。 &lt;code&gt;E:\ollama&lt;/code&gt; はフォルダパスであり、ダウンロードまたはデプロイしたローカルモデルファイルをすべてここに格納します。Ollama はこのパスに基づいてモデルをロードおよび使用します。モデルファイルの場所を変更する場合は、このパスを更新してください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_HOST=127.0.0.1:8000&lt;/code&gt;&lt;/strong&gt;
この環境変数は Ollama サービスのホストとポートを設定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt; はローカルアドレス（localhost）であり、Ollama サービスは本機からのリクエストのみを待ち受けます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8000&lt;/code&gt; は指定されたポート番号であり、Ollama サービスが 8000 ポートでリクエストを受信および処理します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;環境準備-1&#34;&gt;環境準備
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_ORIGINS=*&lt;/code&gt;&lt;/strong&gt;
この環境変数によって、Ollama サービスにアクセスできるリクエストのソースを制御します。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; はすべてのソース（つまり、すべてのドメインと IP アドレス）が Ollama サービスにアクセスできるようにすることを意味します。これは通常、開発およびデバッグ環境で使用され、本番環境では、セキュリティを高めるために特定のドメインまたは IP アドレスのみがサービスへのアクセスを許可するようにより厳格なソース制御を指定することが一般的です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deepseek-r1-モデルのデプロイ&#34;&gt;DeepSeek-R1 モデルのデプロイ
&lt;/h2&gt;&lt;p&gt;Ollama のインストールは、初心者向けで簡単なため、詳細は省略します。&lt;/p&gt;
&lt;p&gt;インストール後の検証：&lt;/p&gt;
&lt;p&gt;モデルのデプロイについては、公式ウェブサイトのモデルページを参照し、適切なパラメータを選択してください。&lt;code&gt;ollama run deepseek-r1:14b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;14b パラメータは会話コンテキストを効果的に記憶できます。より小さなパラメータバージョンでは、会話コンテキストを記憶できません。32b パラメータバージョンは、ローカルでのデプロイ時に非常に遅延するため、詳細なテストは行っていません。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ollama.com/library/deepseek-r1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ollama.com/library/deepseek-r1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/x18990027/article/details/145368094&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/x18990027/article/details/145368094&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>DeepSeek（ディープシーク）が旧正月前に急激に人気を博し、NVIDIAの株価が暴落した：その裏にある機関投資家の動きと大規模言語モデルの思考連鎖</title>
        <link>https://ttf248.life/ja/p/deepseek-chinese-new-year-nvidia-stock-drop-institutional-operations-large-language-model-chain/</link>
        <pubDate>Fri, 07 Feb 2025 20:36:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/deepseek-chinese-new-year-nvidia-stock-drop-institutional-operations-large-language-model-chain/</guid>
        <description>&lt;p&gt;旧正月前夕，DeepSeek 一度成为热门话题，短短几天内便在社交媒体上引起了广泛关注。这种突然的爆火，不仅让人惊讶，还带动了市场的连锁反应。与此同时，英伟达的股票却迎来了暴跌，许多投资者对其前景产生了疑虑，部分机构在此期间进行了大规模的做空操作，似乎一切都指向了一个“精心策划”的局面。&lt;/p&gt;
&lt;h3 id=&#34;deepseek-の爆発的な人気短期間で急速に注目を集める&#34;&gt;&lt;strong&gt;DeepSeek の爆発的な人気：短期間で急速に注目を集める&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;DeepSeek は、AI を活用したツールであり、特に自然言語処理（NLP）および画像生成分野における深層学習モデルの最適化に焦点を当てています。旧正月前の数日間、このプロジェクトは投資家や技術者から急増するほどの関心を集めました。その背後にあるチームのパフォーマンスと、提示された技術成果が多くの人々を強く惹きつけました。開発者コミュニティやソーシャルメディアプラットフォームにおいて、DeepSeek に関する議論が技術界全体のあらゆる話題を占めています。&lt;/p&gt;
&lt;p&gt;しかし、DeepSeek の突然爆発的な人気は偶然ではありません。分析の結果、何らかの組織による操作の可能性が疑われるようになっています。&lt;/p&gt;
&lt;h3 id=&#34;nvidia-株価暴落ショート売り戦略の裏黒幕&#34;&gt;&lt;strong&gt;NVIDIA 株価暴落：ショート売り戦略の裏黒幕&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;NVIDIA（エヌビディア）、世界をリードするグラフィックス処理ユニット（GPU）メーカーは、長年にわたり、多くの大規模言語モデルやAI計算における重要なハードウェアサプライヤーとして存在感を示してきました。AI市場の急速な発展に伴い、NVIDIA の株価は長期にわたって堅調で、投資家の注目を集めてきました。しかし、DeepSeek の爆発的な人気と市場におけるその技術への高い関心により、NVIDIA 株は急落しました。
この現象の背景には、機関投資家によるショート売り戦略が隠されている可能性があります。過去数年間、AI 技術の普及に伴い、NVIDIA の株価は過度に高騰しており、多くの投資家がその株価に過剰な期待を抱いていると認識していました。特に DeepSeek などの技術が爆発的に人気を集めた後、一部の機関投資家が NVIDIA の株式をショートすることで、かなりの利益を得た可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;大規模モデルの推論チェーンへの接触結果からプロセスへ&#34;&gt;&lt;strong&gt;大規模モデルの推論チェーンへの接触：結果からプロセスへ&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;従来の人工知能アプリケーションにおいて、多くの実務者や投資家は、AI モデルの「結果」—生成された画像、テキストなどの直接的なアウトプットに多く注目してきました。一方、DeepSeekに関連する議論の中で、ますます多くの人が、大規模モデルの背後に隠された推論チェーンこそがより注目すべき核心の内容であることに気づき始めています。これまで、私たちはモデルが出力した結果しか見ることができませんでしたが、今では、その背後にあるロジック、アルゴリズム、そしてこれらの要素を調整することでモデルのパフォーマンスを最適化する方法を理解する必要があります。&lt;/p&gt;
&lt;p&gt;この思考様式の転換は、AI 研究およびアプリケーションに対する深い考察であることを意味します。 単純なブラックボックス操作から、モデル内部の動作メカニズムを真正に理解する変革へと移行し、多くの技術者や投資家が人工知能の将来的な発展方向を再考し始めた。DeepSeek の爆発的な人気は、まさにこの思考連鎖の画期的な応用であり、人々が単なる最終的な出力結果ではなく、全体のモデル構築と最適化プロセスに注目し始めるきっかけとなった。&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;&lt;strong&gt;まとめ&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;DeepSeekの突然的な爆発、英偉達株の暴落、そして市場の裏で機関がショートしたという事実は、すべてが緻密に設計された罠であるかのようだ。大規模言語モデルの思考連鎖を深く理解することで、AI技術の応用は表面的な現象の積み重ねではなく、モデル内部ロジックの深い掘り起こしと最適化であることを認識できる。技術の進歩とともに、今後もDeepSeekのような革新的なツールが登場し、AI研究・応用がより高度なレベルへと発展していく可能性がある。&lt;/p&gt;
&lt;p&gt;この現象は、AI技術の巨大な可能性を私たちに示すだけでなく、技術背後にあるビジネスの駆け引きや資本の動きについても考えさせ始めるきっかけとなった。今後の市場動向は、技術と資本の博弈という継続的な焦点となるだろう。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cursor AI プログラミングIDE のトライアル</title>
        <link>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</link>
        <pubDate>Thu, 23 Jan 2025 19:30:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</guid>
        <description>&lt;p&gt;一年又转眼即逝之际，在工作中最大的变化莫过于AI参与度显著提升了。相较于以往，不同开发语言之间的切换，需要开发者熟悉各种语言不同的API接口，现在这些基础代码都可以通过AI生成代码了，对于开发者来说，无疑是一个巨大的福音。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;23年の時点で、簡単な入門紹介を2本書いたところでしたが、今では25年となり、どう表現しようか… 顕著な進歩を感じ取ることはなく、自律的な認知能力を発展させ、タスクを合理的に分割できることなどが求められます。もちろん、最も重要なのはAIが生成したコードにバグがないかを識別することです。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;Github Copilot
&lt;/h2&gt;&lt;p&gt;いつの日か忘れましたが、シンガポールでサーバーがデプロイされているという情報を見つけました。国内では利用され、長期間のVPN接続も不要になりました。ただし、ログイン時にはVPN接続が必要ですが、そのVPN接続はログイン時のみ使用し、その後はオフにしておくことができます。&lt;/p&gt;
&lt;p&gt;日常的な使い道としてはGithub Copilotをより多く活用しています。この拡張機能は、VS CodeやVisual Studioで直接利用できます。2つのソフトウェア間の切り替えが不要です。ChatGPTと比較して、Github Copilotの方がプロジェクトのサポートが優れており、インタラクションもフレンドリーです。また、一部のローカルファイルをAIに「学習」させることで、生成されるコードがあなたのプロジェクトに合っているものになります。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;最近、Cursor AI という新しいAIプログラミングIDEを見つけました。これはGithub Copilotをベースにしたもので、このIDEはよりスマートで、直接ファイルを作成するのを手伝ってくれます。&lt;/p&gt;
&lt;p&gt;簡単な使い方は気に入りましたが、既存プロジェクトの理解はまだ十分ではありません。ローカルプロジェクトのファイルが多い場合や、大規模なリファクタリング、最適化、調整を行う場合は、やはり&lt;strong&gt;開発者がタスクを分割する必要がある&lt;/strong&gt;でしょう。&lt;/p&gt;
&lt;p&gt;例として、cursoにエンジニアモードを切り替えて、以下の内容を入力してみましょう。「複数の異なるスタイルで切り替え可能な個人用履歴書ウェブページの作成、およびデータ表示用の個人情報を埋めることを忘れないでください。」&lt;/p&gt;
&lt;p&gt;何度かやり取りするうちに、以下のようなウェブページが得られます。もちろん、このウェブページは比較的シンプルですが、初心者にとっては非常に良いでしょう。 ## Cursor AI&lt;/p&gt;
&lt;p&gt;最近、Cursor AI という新しいAIプログラミングIDEを試してみました。これはGithub Copilotにも基づいているもので、このIDEはさらに賢く、直接ファイルを作成するのを手伝ってくれます。&lt;/p&gt;
&lt;p&gt;簡単な使い心地ですが、全体的に良い印象を受けました。しかし、既存のプロジェクトの理解はまだ十分ではなく、ローカルプロジェクトのファイルが多い場合は、大規模なリファクタリングや最適化、調整には&lt;strong&gt;開発者がタスクを分割&lt;/strong&gt;する必要があります。&lt;/p&gt;
&lt;p&gt;例を示します：curso のエンジニアモードに切り替えて、以下の内容を入力：「個人用履歴書ウェブページの作成を支援し、複数の異なるスタイルを切り替えられるようにする。個人情報をデータ表示のために入力することを忘れないでください。」&lt;/p&gt;
&lt;p&gt;何度か&lt;strong&gt;やり取り&lt;/strong&gt;をした結果、以下のようなウェブページが得られました。もちろん、このウェブページは比較的シンプルですが、初心者にとっては非常に良いでしょう。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai-1&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cursor/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;履歴書&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AIプログラミングとタスク分解</title>
        <link>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;2年前、サイトにコード領域のコピー機能を追加するために、半日ほど試行錯誤した結果、レンダリング効果が少し不満だった。半ば無能なフロントエンド開発者として、改善することも思わなかった。動けばそれで十分だ、と割り切っていた。今年、&lt;code&gt;AI&lt;/code&gt;を使って小程序を開発し、フロントエンドの開発もより慣れてきた。そしてリファクタリングを行った（&lt;code&gt;AI&lt;/code&gt;が再設計）。&lt;/p&gt;
&lt;p&gt;悟り：タスク分解をして、多くの小さなタスクは&lt;code&gt;AI&lt;/code&gt;で開発すると自然にこなせる。すでに閉鎖された小程序において、&lt;code&gt;75%&lt;/code&gt;のコードを&lt;code&gt;AI&lt;/code&gt;が提供し、複数のタスクを分割して引き渡すことで、人工によってプロジェクトコードが&lt;code&gt;組み立て&lt;/code&gt;られた。&lt;/p&gt;
&lt;h2 id=&#34;前文&#34;&gt;前文
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.github.io/post/2022/001/%E4%BB%A5%E4%B8%BA%E5%BE%88%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%8B%E6%83%85%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%A4%8D%E5%88%B6%E6%8C%89%E9%92%AE/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;簡単なことだと考えたけど、コードのコピーボタンを追加&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;promot&lt;/strong&gt;: クラス &amp;ldquo;highlight&amp;rdquo; を持つウェブページの要素とそのコンテナ内にコピーボタンを追加し、コードとJavaScriptで動作するように設計する。最初のドラフトは問題があり、基本的には使用可能だが、コピーされる内容に冗長な文字が含まれており、再度最適化を促し、コアとなるカラーデザインを指定し、エフェクトを含めるように依頼した。&lt;/p&gt;
&lt;p&gt;お客様がボタンのサイズと色に関して特定の要件をお持ちであることを確認しましたので、これらの要件に合わせてボタンのスタイルを再設計します。以下は、ご提供いただいたカラーパレットを使用し、ボタンのサイズを最適化したCSSスタイルの例です。&lt;/p&gt;
&lt;p&gt;このスタイルでは、ボタンのサイズとフォントサイズを縮小し、より洗練された外観にしています。 同時に、ボタンのデフォルトの状態は半透明で、マウスをボタンにホバーすると不透明になり、背景色がわずかに明るくなることで視覚的なフィードバックを提供します。このようなデザインは、お客様のご希望の色合いにも合致しつつ、モダンでユーザーフレンドリーな特徴も保っています。
対応として、よりシンプルな &lt;code&gt;JavaScript&lt;/code&gt; も提供しています：&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;コード領域の右上隅に、トップエリアにコピーボタンを追加したいという希望は叶いませんでした。フロントエンドについては知識が不足しており、キーワードに基づいて機能を正確に記述することが困難だったため、AIとやり取りを繰り返すだけで期待した成果には至りませんでした。&lt;/p&gt;
&lt;p&gt;ただ、時間の経過とともにAIがソフトウェア開発にどの程度影響を与えるのか、それがどうなるのか疑問に思います。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>プロンプトエンジニア</title>
        <link>https://ttf248.life/ja/p/prompt-engineer/</link>
        <pubDate>Sun, 26 Mar 2023 20:46:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/prompt-engineer/</guid>
        <description>&lt;p&gt;例として、かつて検索エンジンのテクニックを学んだように、私たちはまた、&lt;code&gt;AI&lt;/code&gt;とコミュニケーションするためのテクニックも習得する必要がある。合理的な制約条件を与え、効率的に必要な答えを得る方法を学ぶのだ。&lt;/p&gt;
&lt;p&gt;もし角度を変えて考えてみれば、現在の&lt;code&gt;AI&lt;/code&gt;は記憶力に優れた小さな子供であり、完璧に暗記し、宿題をコピーできる能力を持っている。私たちがやるべきことは、&lt;code&gt;AI&lt;/code&gt;と正確かつ効果的にコミュニケーションする方法を学び、要求を正確に記述することで、&lt;code&gt;AI&lt;/code&gt;が期待される結果を生み出すのを助けることだ。&lt;/p&gt;
&lt;h2 id=&#34;科学普及&#34;&gt;科学普及
&lt;/h2&gt;&lt;p&gt;話題となっている&lt;code&gt;AI&lt;/code&gt;（人工知能）を具体的に言うと&lt;code&gt;Generative Pre-Training&lt;/code&gt;（生成事前学習）です。これはインターネット上で利用可能なデータを用いてテキスト生成を行う深層学習モデルであり、質問応答、テキスト要約生成、機械翻訳、分類、コード生成、対話型AIなど様々なタスクに用いられます。現在、GPT-1、GPT-2、GPT-3、GPT-4といった異なるバージョンのモデルが存在し、それぞれが前バージョンよりも規模が大きく、性能も向上しています。&lt;/p&gt;
&lt;h2 id=&#34;到底有没有智能&#34;&gt;到底有没有智能
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;類似度が高ければ高いほど、精度も高くなる&lt;/li&gt;
&lt;li&gt;基本的な、反復性の仕事は、特定の訓練を経て、人工の介入が不要になる
生成式AIは、既存のテキスト、音声、画像などのデータを活用して新しいコンテンツを作成する技術である。テキスト生成、音声合成、画像生成、対話システムなど、様々なタスクに使用できる。生成式AIの論理性は、その学習データとモデル構造に依存する。一般的に、生成式AIは一定程度、文法、論理、常識に従うことができるが、誤りや偏見、または不真実を含むコンテンツを生成することもある。そのため、生成式AIの出力は人間の判断と検証が必要であり、盲目的に信頼したり使用したりすることはできない。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;プロンプトエンジニア&#34;&gt;プロンプトエンジニア
&lt;/h2&gt;&lt;p&gt;時間は流れの法則を変えない。人は潮流に適応することを学ぶ必要がある。AIを無駄なものだと考え、論理性がないと考えることはよくあることだ。AIが生成するコードがしばしば使えないのだ。&lt;/p&gt;
&lt;p&gt;しかし、別の視点から考えると、現在のAIは記憶力に優れた幼い子供であり、目を見張って覚える能力、つまり宿題をコピーする能力を持っている。私たちがやるべきことは、AIと効果的かつ正確にコミュニケーションする方法を学び、AIが期待される結果を生成できるように、要求事項を明確に記述することだ。&lt;/p&gt;
&lt;h2 id=&#34;対話モデル&#34;&gt;対話モデル
&lt;/h2&gt;&lt;p&gt;2年前、GitHub Copilotの発表は誰も予想していませんでした。その結果、OpenAIが横空に出現し、人類は大規模言語モデルの能力を認識するに至りました。&lt;/p&gt;
&lt;p&gt;コメントベースのプログラミングと対話ベースのプログラミングに基づき、インタラクティブなロジックは完全に異なり、対話のパターンは初心者ユーザーにとって親しみやすく、NewBingが各質問の後に提示するフォローアップのヒントは必須です。Microsoftは、AI知識ベースにあるより多くのコンテンツを取得するために、ユーザーを誘導しようとしています。&lt;/p&gt;
&lt;h2 id=&#34;例え話&#34;&gt;例え話
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;シナリオ:&lt;/strong&gt; 高速鉄道の旅は長く、コーディングは良い選択肢です。データ容量が限られている状況で、いくつかの画像を処理し、画像素材を入手しました。ソフトウェアで画像をダウンロードして処理するのは少し贅沢で、ネットワーク環境も許可していません。
&lt;strong&gt;要件:&lt;/strong&gt; 彩色の背景付きの画像素材をいくつか用意し、それらをミニプログラムのナビゲーションバーに使用します。選択された状態は色付き、未選択の状態は白黒で、素材自体は彩色されており、事前に処理する必要があります。 &lt;strong&gt;プロンプト:&lt;/strong&gt; Pythonコードを記述し、フォルダからすべての画像を読み込み、画像を白黒に変換し、透明背景を維持し、画像の品質を最適化してファイルサイズを削減し、同時にコンソールで表示します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AI&lt;/code&gt;は迅速に答えを与え、見た目も美しく、使い勝手も良く、経験豊富なプログラミングソースの専門家は、以下のコードが汎用的でないこと、また生産環境へのデプロイができないことを感じました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パラメータが固定されている&lt;/li&gt;
&lt;li&gt;ログファイルがないため、すべての情報がコンソールに出力される&lt;/li&gt;
&lt;li&gt;画像処理タスクはマルチスレッドモデルに適している&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NewBing&lt;/code&gt;が登場し、提示された内容に基づいて問題を選択しました：&lt;strong&gt;このコードの改善点はありますか？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今回提供された回答は、正直に言って、予想を大幅に上回りました。一般的なプログラマーが思いつくような最適化策について、&lt;code&gt;AI&lt;/code&gt;は対応する提案を行いました。&lt;/p&gt;
&lt;p&gt;非常に友好的な応答であり、デプロイ環境の違いを考慮し、マルチプロセスをサポートしないことを許可しました。 ## 例え話
&lt;strong&gt;シナリオ:&lt;/strong&gt; 高速鉄道の旅は長く、コーディングは良い選択肢です。データ容量が限られている状況で、いくつかの画像を処理し、画像素材を入手しました。ソフトウェアで画像をダウンロードして処理するのは少し贅沢で、ネットワーク環境も許可していません。
&lt;strong&gt;要件:&lt;/strong&gt; 彩色の背景付きの画像素材をいくつか用意し、それらをミニプログラムのナビゲーションバーに使用します。選択された状態は色付き、未選択の状態は白黒で、素材自体は彩色されており、事前に処理する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに
&lt;/h2&gt;&lt;p&gt;ローカル開発が &lt;code&gt;windows&lt;/code&gt; システムであったため、最初の &lt;code&gt;AI&lt;/code&gt; が提示した回答には &lt;code&gt;main&lt;/code&gt; 関数が含まれず、&lt;code&gt;multiprocessing.freeze_support&lt;/code&gt; も含まれていませんでした。質問を重ねることで発生したエラーを修正しました。&lt;/p&gt;
&lt;p&gt;かつて検索エンジンの技術を学ぶように、&lt;code&gt;AI&lt;/code&gt; とコミュニケーションする上でも、適切な限定条件を与え、効率的に必要な回答を得るためのスキルを習得する必要があります。&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;もしあなたがプログラミング初心者であれば、提示されたコメントと合わせて理解できない点がある場合は、引き続き関連コードについて質問してください。&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>AIによるプログラミング支援、生産性の進化</title>
        <link>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;GitHub Copilot のリリースからわずか 2 年しか経っていないのに、ChatGPT が登場し、裏にある原理をよく理解していない状態で、しばらく使ってみた。2 つのツールのサポートレベルは完全に異なりだが、どちらも生産性を大幅に向上させた。&lt;/p&gt;
&lt;p&gt;あまりにも複雑なことについては、AI ではまだできないだろう。なぜなら、彼らは論理がなく、パターンや形式固定されたもの、あるいは范式を定めているからだ。学習データは十分で、AI の効果は 9 分満点になる。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;GitHub Copilot
&lt;/h2&gt;&lt;p&gt;リリース時に、公式サイトの紹介の &lt;code&gt;demo&lt;/code&gt; を見ると、あまり賢くなく、試用してみましたが、使い勝手が良くありませんでしたので、諦めました。
2022年以前に、暇つぶしで切り替えて新バージョンを体験したところ、かなり良くなっており、ただ国内の速度が少し遅いのは、ネットワークの問題である可能性が高いです。&lt;code&gt;Python&lt;/code&gt;のような言語では、コメントに基づいて書かれたコードもそれなりに良く、自分で資料を探して書いていたよりもはるかに早くできました。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Github Copilot&lt;/code&gt;は、プログラマー、つまり開発者の視点から製品を設計しており、プログラミングの知識が必要でした。コメントを通じてAIによるコーディング支援を誘導していく必要がありました。
一方、&lt;code&gt;ChatGPT&lt;/code&gt;は次の段階に進み、&lt;strong&gt;専門家でなくてもすぐに使いこなせるように設計されています&lt;/strong&gt;。対話形式でのチャットインターフェースにより、質問や要求事項を提示し、理解できない場合は引き続き質問することができます。&lt;/p&gt;
&lt;p&gt;簡単な例として、単語分割の概念を知っていてもコーディング方法がわからない場合に、文字列の類似度を計算したいとします。
「こんにちは、これはBingです。😊」
オンラインの情報123に基づき、Pythonで&lt;code&gt;jieba&lt;/code&gt;ライブラリを使用して単語分割を行い、類似度を計算することができます。&lt;code&gt;jieba&lt;/code&gt;ライブラリは、精密モード、全模式、検索エンジンモードの3種類の分詞モードをサポートしています。要件に応じて適切なモードを選択できます。 2つの文字列の類似度を比較するために、まずそれらをトークン化し、その後、コサイン類似度や編集距離などの指標を計算する必要があります。NumPyやSciPyといったライブラリを使用して数学演算を行うことができます。&lt;/p&gt;
&lt;p&gt;文字列を一貫して処理するために、英語を小文字に変換するには、Pythonの組み込み関数&lt;code&gt;lower()&lt;/code&gt;を使用できます。&lt;/p&gt;
&lt;p&gt;2番目の文字列を切り出すには、Pythonのスライス操作符 &lt;code&gt;[ ]&lt;/code&gt; を使用します。&lt;/p&gt;
&lt;p&gt;以下は、そのコード例です：&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-1&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;さらに踏み込んで、実行結果の問い合わせ、おめでとうございます。問題が見つかりました。結果はハッタリ（作り話）、コードを実行していません。しかし、素晴らしい結果を提供してくれます。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;栗子&#34;&gt;栗子
&lt;/h3&gt;&lt;p&gt;質問：SQL文で、製品コードテーブルから、製品コードが80000～89999の範囲にあるレコードを抽出してください。
追試：製品コードは文字列なので、あなたのコードは間違っています。
おめでとうございます、それは勘違いします。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
