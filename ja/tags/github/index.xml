<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Github on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/github/</link>
        <description>Recent content in Github on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Fri, 20 Jun 2025 00:23:48 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/github/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>日々のたわごと</title>
        <link>https://ttf248.life/ja/p/daily-musings/</link>
        <pubDate>Thu, 19 Jun 2025 19:07:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/daily-musings/</guid>
        <description>&lt;p&gt;AIは日常の開発ワークフローに浸透しており、最近投資の方向転換があり、エクイティとETFへのシフトとなりました。&lt;/p&gt;
&lt;p&gt;オープンソースプロジェクト&lt;/p&gt;
&lt;h3 id=&#34;プロジェクト記録&#34;&gt;プロジェクト記録
&lt;/h3&gt;&lt;p&gt;先週、暇つぶしにGitHubバッジを取得するためにIssueモジュールを使い始めました。以前コードを書く際に、AIの変更内容を記録する場所を探していました。個別にドキュメントを作成するのは散らかってしまいがちでした。しかし、Issueモジュールを使用することで、バグ、機能、改善などのラベルで区別し、記録が明確かつ効率的にできるようになりました。将来使わない可能性もありますが、記録を残しておくことは蓄積にもなります。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader/issues?q=is%3Aissue&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Issueリストの確認&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;リリースノート&#34;&gt;リリースノート
&lt;/h3&gt;&lt;p&gt;リリース記録を記載します。最近の関連コミットを見つけ、すべてAI生成のコミット記録であるため、ウェブインターフェースから近隣のすべてのコミット記録をコピーし、それをAIに整理させることで、素晴らしいリリース記録を作成できます。
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/comic-reader/releases/tag/v1.9.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/comic-reader/releases/tag/v1.9.0&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;アクティビティ&#34;&gt;アクティビティ
&lt;/h3&gt;&lt;p&gt;GitHubの個人ページをきちんと整理したことで、見栄えが良くなり、結果的にコーディングへの積極性が高まりました。なぜなら、データ可視化によって、ある種のものは、非常に奇妙で、簡単なポジティブなフィードバックが、持続するためのモチベーションを生み出すことができるからです。&lt;/p&gt;
&lt;h3 id=&#34;trae&#34;&gt;Trae
&lt;/h3&gt;&lt;p&gt;有料で1ヶ月の体験版を購入しましたが、どう表現するか分かりません。VSCode内でもClaude4モデルを使用しており、バイト（ByteDance）のIDE体験の方が優れており、実戦的な効果も優れています。場合によっては、同じ問題に対してTraeがより良い回答を提示することもあります。今後、年額料金を購入しても良いでしょうか？現状の「適当に弄っている頻度」では、Traeの利用回数が足りなくなる可能性があります。杞憂（きゆう）して構いません。後で使い切ったら考えれば良いですし、バイトには他の有料プランがあり、より多くの呼び出し回数を購入できるかもしれません。
&lt;del&gt;簡単な小さな問題に対しては、マイクロソフトのものを使用しており、GitHub Copilotや各モデルも利用可能です。&lt;/del&gt;
計画は頓挫しました。GitHub Copilotも呼び出し回数に制限が加えられました。&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/zh/copilot/about-github-copilot/plans-for-github-copilot#models&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;618での制限に関する情報&lt;/a&gt;
現在の使用量を確認するには&lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/zh/copilot/managing-copilot/understanding-and-managing-copilot-usage/monitoring-your-copilot-usage-and-entitlements#downloading-a-monthly-usage-report&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちら&lt;/a&gt;を参照してください。&lt;/p&gt;
&lt;h2 id=&#34;投資&#34;&gt;投資
&lt;/h2&gt;&lt;p&gt;結局、恒生通融通が開通して以来、香港株式市場で取引したことがなく、小米の新車発表を狙って少し買い増し、値上がりすれば売却し、値下がりすれば再び買い戻す、といった操作を何度か繰り返しましたが、新車の発売には至らず、株式でわずかな利益を得ることができました。&lt;/p&gt;
&lt;p&gt;この頃、恒生通の資金の流れを眺めるのが無意味ではなく、美团は資金の純流入であり、それに便乗して投資し、成功裏に株主となりました。しかし、全体的な資金の流れを見過ごし、国内からの買い入れ資金はその一部に過ぎず、香港市場には多くの外国資本も存在することに気づきました。今回、実際に試してみることで、ブルーチップ株を長期保有し、徐々に収益を増やす方法が有効であることを確認できました。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ポジションのコントロールと損切りは、&lt;strong&gt;人の本性とは対照的なもの&lt;/strong&gt;です。焦らず、焦らず、急がないことが大切です。小米の新車が期待外れだった場合、どうやって売却するかという問題です。投資に対する認識はまだ十分ではなく、もっと本を読んだり、学んでいく必要があります。米連邦準備制度理事会（FRB）が利下げを示唆しないため、香港株式市場は一波の暴落し、建玉を入れるタイミングを遅らせることは適切ではありません。しかし、利下げというニュースが出た場合、香港株式市場は大暴騰することになります。これが投資であり、人間の本性を試すものです。
「&lt;strong&gt;常々口にする言葉：買うのは国の運だが、自分はそれを信じているとは言えない&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;上記の国運の信仰を抛却して、**もう一つ重要なのは注意（注意力）**です。長期的な投資をするのであれば、頻繁にチャートを見ることは意味がありません。毎朝10分、取引終了後に10分ほどを目視で確認する程度で十分です。最終的に期待できる収益率はどれくらいでしょうか？明確な損切りポイントも設定されていません。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;市場が暴落した際に、腾讯は依然として魅力的な投資対象となり、資金が集まりました。&lt;/p&gt;
&lt;p&gt;| 00700 | 腾讯控股 | 498.600 | 80.08億 |&lt;/p&gt;
&lt;h2 id=&#34;投資-1&#34;&gt;投資
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新価格&lt;/th&gt;
&lt;th&gt;取引量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;03690&lt;/td&gt;
&lt;td&gt;美団-W&lt;/td&gt;
&lt;td&gt;128.100&lt;/td&gt;
&lt;td&gt;68.81億&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;投資-2&#34;&gt;投資
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新価格&lt;/th&gt;
&lt;th&gt;取引量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;09992&lt;/td&gt;
&lt;td&gt;泡盛マット&lt;/td&gt;
&lt;td&gt;247.200&lt;/td&gt;
&lt;td&gt;57億&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;投資-3&#34;&gt;投資
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新価格&lt;/th&gt;
&lt;th&gt;取引量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;09988&lt;/td&gt;
&lt;td&gt;アルバビバグループ-W&lt;/td&gt;
&lt;td&gt;109.800&lt;/td&gt;
&lt;td&gt;53.22億&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;投資-4&#34;&gt;投資
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コード&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;最新価格&lt;/th&gt;
&lt;th&gt;取引量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01810&lt;/td&gt;
&lt;td&gt;小米グループ-W&lt;/td&gt;
&lt;td&gt;53.050&lt;/td&gt;
&lt;td&gt;41.05億&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>GitHub Pages の Easter Egg: 複数の Pages をデプロイ</title>
        <link>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;最近、体内時計が少し乱れていて、夜2時過ぎまでGitHub Pagesのデプロイに苦戦していました。
仕事が終わってからようやく食事を摂り、すぐに寝ようとすると、食べ終わって帰宅して8時半頃になり、眠くて困って、目を閉じるとそのまま眠くなってしまい、目が覚めるともう凌晨2時でした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;まだ起動もしていないうちに消滅した分類：AI 研習所&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;フラグフラッグ&#34;&gt;フラグ（フラッグ）
&lt;/h2&gt;&lt;p&gt;昨日、話していなかった「未熟な」フロントエンドを批判していたのに、今日はフロントエンドではなく、UI/UXの体験を追求している。&lt;/p&gt;
&lt;h2 id=&#34;プロジェクト&#34;&gt;プロジェクト
&lt;/h2&gt;&lt;p&gt;弊社の古くからの友人、&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt; が参上します。
そうです、以前の選株プロジェクトを、全体の構造を再構築し、その後のAIプログラミング関連の内容はこのプロジェクト下に集約されます。&lt;/p&gt;
&lt;h2 id=&#34;複数の-pages-をデプロイする&#34;&gt;複数の Pages をデプロイする
&lt;/h2&gt;&lt;p&gt;プロジェクトは国内で &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/ai-coding-demo&lt;/a&gt; でホストされており、周知の通り、国内では Pages の公開をサポートしていません。そのため、海外の GitHub 上に公開する必要があります。&lt;/p&gt;
&lt;p&gt;ブログは海外の GitHub に公開されます。まだ試したことがありませんが、複数のプロジェクトを Pages にデプロイすること、そして現在の処理しているプロジェクトが従来のブログサイトではないこと（単に多くのドキュメントといくつかの静的な HTML デザイン稿が含まれているだけです。）もわかります。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;その通り、このページは私が初めてクリックしたところ、複数のプロジェクトを Pages にデプロイすることはブログの公開に影響を与えないこと、そしてブログのドメインの下に新しいパスが追加されることを発見しました。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ai-coding-demo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ttf248.life/ai-coding-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここまできたら、完璧だと叫びました。&lt;/p&gt;
&lt;h2 id=&#34;ai-研習社&#34;&gt;AI 研習社
&lt;/h2&gt;&lt;p&gt;昨日、新しい分類を作成したことをきっかけに、AIを活用して多くのコンピュータ科目の学習を進めようと考えました。例えば、アルゴリズムやLeetCodeのプログラミング問題集などです。&lt;/p&gt;
&lt;p&gt;毎回の学習記録をブログに公開し、知識ベースを形成します。新しい分類として「AI 研習社」を作成しました。&lt;/p&gt;
&lt;p&gt;現在見られるように、異なるコースごとにそれぞれプロジェクトを作成し、学習ノートは各プロジェクトのReadme.mdファイルに記述しています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>フォークのレポジトリにプルリクエストをマージする</title>
        <link>https://ttf248.life/ja/p/merge-pullrequest-to-forked-repo/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/merge-pullrequest-to-forked-repo/</guid>
        <description>&lt;p&gt;&lt;code&gt;github-readme-stats&lt;/code&gt; は、GitHub の個人プロフィールに関する統計情報を生成するツールです。ユーザーの GitHub 個人プロフィールの様々な統計情報やグラフの表示を可能にします。多様なカスタマイズオプションを提供し、ユーザーのニーズに合わせて調整できます。&lt;/p&gt;
&lt;p&gt;筆者はリポジトリ管理の習慣として、プロジェクトごとにグループ化を行っていますが、GitHub はリポジトリのグループ化をサポートしていないため、異なる組織に分割することで実現しています。&lt;code&gt;github-readme-stats&lt;/code&gt; の最新ブランチでは、異なる組織のリポジトリ統計のクロスオーバーに対応していません。そこで、対応するコードをマージしたブランチをフォークしました。&lt;/p&gt;
&lt;h2 id=&#34;最終結果&#34;&gt;最終結果
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;プルリクエスト-元のurl&#34;&gt;プルリクエスト 元のURL
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;組織のリポジトリからのデータを含める機能を追加&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;上流のプルリクエストをフォークのリポジトリにマージする&#34;&gt;上流のプルリクエストをフォークのリポジトリにマージする
&lt;/h2&gt;&lt;p&gt;ある &lt;strong&gt;プルリクエスト (PR)&lt;/strong&gt; をあなたの &lt;strong&gt;フォークしたリポジトリ&lt;/strong&gt; にマージするには、いくつかの方法があり、あなたが以下のいずれかを達成したいかによって異なります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;上流（upstream）リポジトリ&lt;/strong&gt; から PR をあなたのフォークにマージするか、&lt;/li&gt;
&lt;li&gt;他の人のフォークから PR をあなたのフォークにマージするか、&lt;/li&gt;
&lt;li&gt;あなたのフォークで作成された PR (例えば、他の人があなたにフォークして PR を提起した場合) をマージする&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;まず、最も一般的なシナリオを説明します：&lt;strong&gt;フォークしたリポジトリがあり、上流の PR をあなたのフォークにマージしたい場合&lt;/strong&gt;。操作手順は以下のとおりです👇&lt;/p&gt;
&lt;h3 id=&#34;-方法１コマンドライン方式最も汎用的&#34;&gt;✅ 方法１：コマンドライン方式（最も汎用的）
&lt;/h3&gt;&lt;h4 id=&#34;ステップ-1自分のフォークをクローンする&#34;&gt;ステップ 1：自分のフォークをクローンする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/あなたのユーザー名/リポジトリ名.git
cd リポジトリ名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-2upstream-元のリポジトリのurl-を追加&#34;&gt;ステップ 2：upstream (元のリポジトリのURL) を追加
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/原作者のユーザー名/リポジトリ名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-3上流のprブランチをリポジトリに取得する&#34;&gt;ステップ 3：上流のPRブランチをリポジトリに取得する
&lt;/h4&gt;&lt;p&gt;マージしたいPRの番号（例：PR #123）を見つけます。&lt;/p&gt;
&lt;p&gt;以下のコマンドでそのPRのコードをリポジトリに取得できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ4ブランチを切り替えマージする&#34;&gt;ステップ4：ブランチを切り替え、マージする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # またはあなたのターゲットブランチ
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すべて正常であれば、GitHub リポジトリにフォークした場所にプッシュできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;-方法二github-ウェブインターフェースシンプルだが限定的&#34;&gt;✅ 方法二：GitHub ウェブインターフェース（シンプルだが限定的）
&lt;/h3&gt;&lt;p&gt;GitHub のウェブ上で特定のプルリクエスト (PR) が上位のレポジトリに対するものである場合、以下の手順を実行できます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;その PR ページにアクセスします。&lt;/li&gt;
&lt;li&gt;右上部の「&lt;strong&gt;Commits&lt;/strong&gt;」または「&lt;strong&gt;Files changed&lt;/strong&gt;」をクリックし、この PR がどのブランチに基づいて作成されているかを確認します。&lt;/li&gt;
&lt;li&gt;あなたのフォークページで新しいブランチを作成し、手動で PR のコミットを cherry-pick します（Git に関する知識が必要です）。&lt;/li&gt;
&lt;li&gt;または、「&lt;strong&gt;Open in GitHub Desktop&lt;/strong&gt;」をクリックして、GUI ツールを使用してマージします。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;-他人があなたのフォークに対してプルリクエストを送信した場合&#34;&gt;🚀 他人があなたのフォークに対してプルリクエストを送信した場合
&lt;/h3&gt;&lt;p&gt;プルリクエストのページに直接移動し、「&lt;strong&gt;Merge pull request&lt;/strong&gt;」ボタンをクリックしてください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;具体的な状況（例えば、PRリンク、ウェブインターフェースを使用しているかコマンドラインを使用しているか）に応じて、ステップバイステップでデモンストレーションが必要ですか？ または、具体的なリンクを提供していただければ、最も簡単な方法を分析します。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
