<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Github on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/github/</link>
        <description>Recent content in Github on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 03:11:57 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/github/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GitHub Pages ギミック：複数のPagesをデプロイする</title>
        <link>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;最近、体内時計が少し狂っていて、深夜2時過ぎまでGitHub Pagesのデプロイに手を出していた。&lt;/p&gt;
&lt;p&gt;終わった後、やっとご飯を食べに行ったんだけど、食べた直後に眠くなり、食べて帰ってきて8時半くらいには、眠くて、少し仮眠ったらそのまま寝てしまい、起きたらもう午前2時過ぎだった。&lt;/p&gt;
&lt;p&gt;まだ始動もせず消滅したカテゴリー：AI 研習会&lt;/p&gt;
&lt;p&gt;ツッコミ&lt;/p&gt;
&lt;p&gt;昨日まで「フロントエンドをいじらない」と言っていたのに、今日はフロントエンドではなく、UI/UXの体験についていじっている。&lt;/p&gt;
&lt;p&gt;プロジェクト&lt;/p&gt;
&lt;p&gt;皆様、弊社の旧友である&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt;をご紹介させていただきます。&lt;/p&gt;
&lt;p&gt;その通り、元々選択した株のプロジェクトです。このプロジェクトで全体の構造を再構築し、今後のAIプログラミング関連の内容はこちらに統合していきます。&lt;/p&gt;
&lt;p&gt;複数のページを部署する。&lt;/p&gt;
&lt;p&gt;プロジェクトは[https://cnb.cool/ttf248/ai-coding-demo]でホストされています。周知の事情により、中国国内ではPagesを公開できないため、海外のGitHubに公開する必要があります。&lt;/p&gt;
&lt;p&gt;ブログは海外のGithubに公開されているものです。まだ試していませんが、複数のプロジェクトでpagesを公開したり、現在取り組んでいるプロジェクトが従来のブログサイトではなく、多くのドキュメントといくつかの静的なhtmlデザインが含まれているという状況です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;はい、このページは私が最初にクリックして気づいたのですが、複数のプロジェクトをデプロイしたpagesはブログの公開に影響を与えず、ブログのドメイン下に新しいパスが追加されるだけです。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ai-coding-demo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ttf248.life/ai-coding-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここを見て、まさに完璧だと思った。&lt;/p&gt;
&lt;p&gt;AI研究会&lt;/p&gt;
&lt;p&gt;昨日新設したカテゴリーで、AIを使って多くのコンピュータのコースを学習しようと考えた。例えば、アルゴリズムや LeetCode の問題演習など。&lt;/p&gt;
&lt;p&gt;毎回の学習記録をブログに投稿し、知識データベースを構築。新カテゴリー「AI 研習会」を作成しました。&lt;/p&gt;
&lt;p&gt;今のところ、異なるコースごとに新しいプロジェクトを作成し、学習ノートは各プロジェクトのReadme.mdにまとめて記述するのが良いようだ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ForkリポジトリへのPullRequestのマージ</title>
        <link>https://ttf248.life/ja/p/merge-pullrequest-to-fork-repository/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/merge-pullrequest-to-fork-repository/</guid>
        <description>&lt;p&gt;&lt;code&gt;github-readme-stats&lt;/code&gt;は、GitHubプロフィール用の統計情報ジェネレーターであり、ユーザーが自身のGitHubプロフィールに様々な統計情報やグラフを表示することを可能にします。多様なカスタマイズオプションが用意されており、ユーザーのニーズに合わせて調整できます。&lt;/p&gt;
&lt;p&gt;筆者は倉庫の管理をプロジェクトごとに分けていますが、GitHubでは倉庫のグループ化がサポートされていないため、異なる組織に分割するという方法で対応しています。&lt;code&gt;github-readme-stats&lt;/code&gt; の最新ブランチは、異なる組織の倉庫を跨いだ統計に対応していないため、筆者がフォークしたブランチに該当するコードをマージしました。&lt;/p&gt;
&lt;h2 id=&#34;最終効果&#34;&gt;最終効果
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;プルリクエストの元のurl&#34;&gt;プルリクエストの元のURL
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adds the ability to include data from organization repositories&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pull-request-を-fork-のリポジトリにマージする&#34;&gt;Pull Request を Fork のリポジトリにマージする
&lt;/h2&gt;&lt;p&gt;プルリクエスト（PR）をあなたのフォークしたリポジトリにマージするには、いくつかの方法があり、それはあなたが何をしたいかによって異なります。&lt;/p&gt;
&lt;p&gt;アップストリームリポジトリからPRをあなたのフォークにマージしますか、それとも
他の人のフォークからPRをあなたのフォークにマージする、または
フォークされたリポジトリからのプルリクエストをマージする（例えば、誰かがあなたにフォークしてプルリクエストを提出した場合）。&lt;/p&gt;
&lt;p&gt;まず、最も一般的なシナリオを説明します。&lt;strong&gt;リポジトリをフォークし、上流のプルリクエストを自分のフォークにマージしたい場合&lt;/strong&gt;です。手順は以下の通りです。👇&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方法一コマンドライン方式最も汎用的&#34;&gt;方法一：コマンドライン方式（最も汎用的）
&lt;/h3&gt;&lt;h4 id=&#34;ステップ1自分のフォークをクローンする&#34;&gt;ステップ1：自分のフォークをクローンする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/你的用户名/仓库名.git
cd 仓库名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-2upstreamオリジナルリポジトリのアドレスを追加する&#34;&gt;ステップ 2：upstream（オリジナルリポジトリのアドレス）を追加する
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/原作者用户名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ3アップストリームのprブランチをリベースする&#34;&gt;ステップ3：アップストリームのPRブランチをリベースする
&lt;/h4&gt;&lt;p&gt;PR番号を見つけてください。例えば、PR#123です。&lt;/p&gt;
&lt;p&gt;PR のコードは、このようにプルできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-4ブランチの切り替えとマージ&#34;&gt;ステップ 4：ブランチの切り替えとマージ
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # 或者你自己的目标分支
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もしすべてが正常であれば、あなたのフォークしたGitHubリポジトリにプッシュできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方法二github-网页界面简单但有限-第二の方法githubウェブインターフェース簡単だが機能は限られている&#34;&gt;方法二：GitHub 网页界面（简单但有限） 第二の方法：GitHubウェブインターフェース（簡単だが機能は限られている）
&lt;/h3&gt;&lt;p&gt;GitHubのウェブページでプルリクエストがアップストリームのリポジトリに対するものである場合、あなたは：&lt;/p&gt;
&lt;p&gt;そのPRページにアクセスしてください。
右上隅の「&lt;strong&gt;Commits&lt;/strong&gt;」または「&lt;strong&gt;Files changed&lt;/strong&gt;」をクリックして、このPRがどのブランチに基づいているか確認してください。
あなたのフォークページで新しいブランチを作成し、手動でPRのコミットをcherry-pickします。（Gitの知識が必要です。）
または「&lt;strong&gt;GitHub Desktopで開く&lt;/strong&gt;」をクリックして、GUIツールを使ってマージしてください。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-もし他の人があなたのフォークに対してprを提出したら&#34;&gt;🚀 もし他の人があなたのフォークに対してPRを提出したら
&lt;/h3&gt;&lt;p&gt;プルリクエストのマージページに直接アクセスして、「&lt;strong&gt;Merge pull request&lt;/strong&gt;」ボタンをクリックしてください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今の具体的な状況（例えばPRリンクや、ウェブページかコマンドラインのどちらを使っているか）に合わせて、私が手取り直して説明しましょうか？具体的なリンクを教えていただければ、一番簡単な方法を分析してお手伝いします。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
