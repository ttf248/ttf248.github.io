<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Docker on 向叔の手帳</title>
        <link>https://blog.ttf248.life/ja/tags/docker/</link>
        <description>Recent content in Docker on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ja/tags/docker/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AI 開発二年：ドッカーリリース前の状態に似ている。</title>
        <link>https://blog.ttf248.life/ja/p/ai-development-two-years-docker-pre-release/</link>
        <pubDate>Thu, 20 Feb 2025 18:16:37 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/ai-development-two-years-docker-pre-release/</guid>
        <description>&lt;p&gt;人工知能（AI）は近年、技術分野で最も議論されている話題の一つであり、特に過去2年間でAI技術は急速な進歩を遂げました。深層学習、自然言語処理、コンピュータビジョン、自動化意思決定システムなど、AIの応用範囲は広がり続けています。しかしながら、技術が不断に突破口を開いても、AIはDockerリリース前のボトルネックと同様に、市場を真に引き金となるような画期的なアプリケーションが不足しているという課題を抱えています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AIの発展も2年ほど経ち、Dockerがリリースされる前のような状況で、現状では決定的なキラーアプリケーションは存在しない。しかし、既存技術を基盤として、完璧な実用化シナリオを作り出すことができれば、Dockerのように、必ずしも新しい技術に頼る必要はなくとも、運用や開発のワークフローを変革するような、合理的な全体像が実現するだろう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;aiの現状技術は成熟しているが応用はまだブレークスルーが必要&#34;&gt;AIの現状：技術は成熟しているが、応用はまだブレークスルーが必要。
&lt;/h2&gt;&lt;p&gt;技術的な側面から見ると、AIは過去2年間で著しい進歩を遂げています。OpenAIのGPTシリーズやGoogleのBERT、DeepMindのAlphaシリーズなど、AIの処理能力は以前の予想を大きく上回っています。特に自然言語処理分野においては、GPT-4などのモデルが強力な生成能力に加え、理解と推論においても驚くべきパフォーマンスを示しています。&lt;/p&gt;
&lt;p&gt;しかしながら、技術は日進月歩とは言えども、AIの現実的な応用には一定の課題が残る。Dockerリリース前の状況に似ており、AIの潜在能力は大きいものの、広範な普及や産業を変革する真に画期的なアプリケーションはまだ登場していない。多くの人がAIの将来性について語っているが、革命的な変化をもたらす直接的な応用事例を見つけるのは容易ではない。多くのAIアプリケーションは依然として初期段階にとどまっており、大部分はさらなる統合と最適化が必要である。&lt;/p&gt;
&lt;h2 id=&#34;dockerとaiの類似点技術そのものではなく解決策が重要&#34;&gt;DockerとAIの類似点：技術そのものではなく、解決策が重要
&lt;/h2&gt;&lt;p&gt;もしDockerリリース前の歴史を振り返れば、当時の技術環境とAIの現状には多くの類似点が見て取れることに気づくでしょう。Dockerが登場する以前から、コンテナ技術は決して新しいものではありませんでした。LXC（Linux Containers）や仮想化技術など、すでにコンテナ化に必要な基本的な機能は存在していました。しかし、Dockerは既存技術を巧みに統合・最適化し、よりシンプルで直感的かつ効率的なソリューションを提示しました。画期的な技術ではありませんでしたが、運用や開発プロセスにおける多くの課題を解決し、ソフトウェアのデプロイ、拡張、管理プロセスを大幅に簡素化しました。&lt;/p&gt;
&lt;p&gt;同様に、AI分野も類似の状況に直面している。「目新しさ」は薄れたものの、現在のAI技術が真に大規模な応用を実現するには、Dockerのように既存技術を統合・最適化し、合理的な応用プランを構築する必要がある。画期的なAIアプリケーションとは、必ずしも新しい技術革新に依存するものではなく、むしろ既存技術を統合して、実際のビジネスにおける課題やニーズを解決することにあるかもしれない。&lt;/p&gt;
&lt;h2 id=&#34;aiのdocker瞬間はどう見つけるか&#34;&gt;AIの「Docker瞬間」は、どう見つけるか？
&lt;/h2&gt;&lt;p&gt;AI技術が真に広く普及するためには、いくつかの側面から取り組む必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
現在多くのAIの応用事例は実験的な性質が強く、大規模な実用化には至っていません。例えば、AIカスタマーサービスやスマートレコメンデーションといった分野では幅広い応用があるものの、機能には依然として多くの制約があり、業界のボトルネックを突破できていません。真のブレークスルーは、従来の方法に悩まされてきた医療、製造業、物流などの業界から生まれるかもしれません。AIは、より効率的なデータ処理や予測分析を通じて、これらの複雑な状況下で企業の効率向上とコスト削減に貢献できるでしょう。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
Dockerのように、コンテナ化プロセスを簡略化して運用効率を高めるように、AIプロダクトの使いやすさも同様に重要です。AIの普及は技術の普及であると同時に、製品化の普及でもあります。AIを日常業務に統合し、ユーザーが深い技術理解なしにこれらのツールを簡単に使えるようにすることが、AIを実用化するための重要な一歩です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
新しい技術の広範な応用は、エコシステムの構築なしには成り立ちません。Dockerが急速に台頭できたのは、そのオープン性と互換性のおかげで、開発者が様々なクラウドプラットフォーム、ツール、サービスとの連携を容易にできたからです。同様に、AIの未来もエコシステム構築にかかっています。AIの標準化、モデルの共有、データの公開、そして技術の統合性は、AIが広範な産業応用を形成するかどうかを左右します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;結論aiの未来は可能性に満ちているがより完善した着地点が必要である&#34;&gt;結論：AIの未来は可能性に満ちているが、より完善した着地点が必要である。
&lt;/h2&gt;&lt;p&gt;AI技術はここ2年で目覚ましい進歩を遂げたものの、現状では「決定版アプリケーション」とは言えない段階です。Dockerの登場以前のコンテナ化技術と同様に、AIも現実的な応用シナリオを見出し、既存技術とビジネスニーズを深く融合させることで初めて大規模な展開と普及を実現できます。技術革新は重要ですが、プロセスを簡素化し効率を高めるソリューションこそが、技術の普及と発展を促進します。&lt;/p&gt;
&lt;p&gt;未来、AIはDockerのように、画期的な技術革新ではなく、既存技術の統合によって完璧なアプリケーションシーンを構築し、最終的に私たちの仕事や生活様式を変える可能性がある。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Docker国内镜像代理切れ</title>
        <link>https://blog.ttf248.life/ja/p/docker-domestic-mirror-failure/</link>
        <pubDate>Sat, 04 Jan 2025 18:29:25 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/docker-domestic-mirror-failure/</guid>
        <description>&lt;p&gt;国内サーバーにDockerをデプロイし、デプロイ後、もし社内イメージレジストリがない場合、開発者がまず行うべきことは、国内のイメージ加速アドレスを設定することです。今日、ちょうどサーバーがあり、イメージ加速アドレスを設定しましたが、イメージのpullができません。&lt;/p&gt;
&lt;p&gt;エラー情報：&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;h2 id=&#34;トラブルシューティングと修理の試み&#34;&gt;トラブルシューティングと修理の試み
&lt;/h2&gt;&lt;p&gt;当初、別のミラーの加速アドレスに切り替えることを試みましたが、期待した効果はなく、問題は依然として解決していません。&lt;/p&gt;
&lt;p&gt;続いて、ローカルDNS設定の修正に取り組み、ネットワーク解析レベルで突破口を探りましたが、試行錯誤の結果、残念ながら問題は解消されませんでした。&lt;/p&gt;
&lt;p&gt;現時点でローカルネットワークの安定性が疑われているため、すぐにスマートフォンWi-Fiスポットに切り替えて、考えられるローカルネットワークの問題点を回避しようとしましたが、結果は落胆するもので、問題は全く改善しませんでした。&lt;/p&gt;
&lt;h2 id=&#34;問題の拡大&#34;&gt;問題の拡大
&lt;/h2&gt;&lt;p&gt;手元に&lt;strong&gt;几台部署于国内的服务器&lt;/strong&gt;がいくつかあり、それぞれにDocker環境はインストールされています。これらのサーバーでイメージのpullを試みましたが、別のアプローチを期待していたのですが、例外なくすべて失敗し、エラーメッセージも全く同じでした。これは問題が特定のデバイスに限定されたものではないことを示しています。&lt;/p&gt;
&lt;p&gt;さらに調査した結果、ミラープロキシが一時的に機能しなくなったようです。この緊急時に、すぐに海外のサーバーに切り替えて試してみたところ、幸いなことに、ミラーからの取得はここで正常に戻りました。これは、問題の原因が国内のネットワーク経路または関連設定にある可能性が高いことを意味します。&lt;/p&gt;
&lt;h2 id=&#34;戦術変更間接解決&#34;&gt;戦術変更：間接解決
&lt;/h2&gt;&lt;p&gt;国内の直接的なミラーからのイメージ取得経路が重重なる阻害を受けている一方、海外ミラーは正常にアクセスできるため、プロジェクトを迅速に進めるため、回り道をすることに決定しました。まず海外サーバーへ切り替え、必要なイメージをスムーズに取得した後、国内ミラーリポジトリへプッシュし、「データブリッジ」を構築します。&lt;/p&gt;
&lt;p&gt;同時に、Dockerfile ファイルを修正し、イメージのアドレスを国内環境に適合するものに変更後、再度ビルドを行い、最終的にデプロイに成功しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>オフィス移転のため、サーバーにアクセスできません。</title>
        <link>https://blog.ttf248.life/ja/p/office-migration-server-unavailable/</link>
        <pubDate>Sat, 11 Mar 2023 01:42:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/office-migration-server-unavailable/</guid>
        <description>&lt;p&gt;事務所の異動について。場所は、元の2階から15階へ変更です。普通の席替えです。&lt;/p&gt;
&lt;h2 id=&#34;デザイン性&#34;&gt;デザイン性
&lt;/h2&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20230311014537.png&#34; &gt;办公楼&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;移動&#34;&gt;移動
&lt;/h2&gt;&lt;p&gt;退社して荷物をまとめて、慣れた手つきで新しい席へ。パソコンの配線を整え、楽な姿勢で作業開始。&lt;/p&gt;
&lt;p&gt;（òωóױ）！ネットケーブルを接続しても、チームでよく使うサーバーにアクセスできません。無線ネットワークに切り替えると、またアクセスできるようになりました。&lt;/p&gt;
&lt;p&gt;当初はサーバーのネットワークセグメント設定の問題かと思いましたが、新しい作業場所の有線ネットワークがファイアウォールの設定リストにないだけなので、IT担当者に調整してもらうと解決するだろうと思っていました。しかし、このネットワークセグメントには一台のサーバーだけでなく、他のサーバーにもアクセスしてみると正常でした。次第に疑問が生じました。専門的なことは専門の人に任せることにし、最終的に運用部門の担当者が特定したところ、このサーバーが&lt;code&gt;docker&lt;/code&gt;，服务的默认网络&lt;code&gt;docker0&lt;/code&gt;和办公室有线网络配置的网段冲突了，导致发过去的数据包，都收不到应答，被路由给了&lt;code&gt;docker&lt;/code&gt;サービスをデプロイしていたことが原因でした。&lt;/p&gt;
&lt;p&gt;他のサーバーに展開された__INLINE_CODE_0__服务，也就这台，我比较常用，偶尔用容器部署一些测试服务，没想到还能碰到这个场景。后来细想想，由于整个集团都在一个办公大楼里面，IT部门的同事划分网段，用到了__INLINE_CODE_1__で始まるアドレスは珍しくありません。&lt;/p&gt;
&lt;h2 id=&#34;docker0&#34;&gt;docker0
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# vim /etc/docker/daemon.json
{
    &amp;quot;bip&amp;quot;:&amp;quot;172.200.0.1/24&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サービスを再起動し、新しいネットワークに切り替えると、サーバーは通常アクセスに戻ります。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Dockerに関するいくつかのこと</title>
        <link>https://blog.ttf248.life/ja/p/docker-two-three-things/</link>
        <pubDate>Thu, 21 Jan 2021 09:26:07 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/docker-two-three-things/</guid>
        <description>&lt;p&gt;長年業務で接したのが、一部内容が適用できない__操作系统，如果是E_CODE_0ユーザーばかりです。&lt;/p&gt;
&lt;p&gt;設置部分は、清華大学の手册を参照してください：&lt;a class=&#34;link&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;設置&#34;&gt;設置
&lt;/h2&gt;&lt;p&gt;不明な力により、国内にDockerをインストールする際は、クラウドプロバイダーが提供するリポジトリを使用することを推奨します。ここでは、&lt;strong&gt;阿里云&lt;/strong&gt; を推奨します。&lt;/p&gt;
&lt;h3 id=&#34;倉庫ソースアドレス設定&#34;&gt;倉庫ソースアドレス設定
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install yum-utils device-mapper-persistent-data lvm2 &amp;amp;&amp;amp; \
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;最新バージョン&#34;&gt;最新バージョン
&lt;/h3&gt;&lt;p&gt;Dockerはよく使用されるバックグラウンドサービスなので、起動時に自動的に開始するように設定することを推奨します。このコマンドはCentOS 7に適用されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install -y docker-ce docker-ce-cli containerd.io &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;部署指定バージョン&#34;&gt;部署指定バージョン
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;斜体_9&lt;/strong&gt;&lt;strong&gt;太字_5&lt;/strong&gt;&lt;strong&gt;斜体_10&lt;/strong&gt;&lt;strong&gt;太字_6&lt;/strong&gt;&lt;strong&gt;斜体_11&lt;/strong&gt;&lt;strong&gt;太字_7&lt;/strong&gt;&lt;strong&gt;斜体_12&lt;/strong&gt;&lt;strong&gt;太字_8&lt;/strong&gt;&lt;strong&gt;斜体_13&lt;/strong&gt;**&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum list docker-ce --showduplicates | sort -r
sudo yum install -y docker-ce-18.09.2-3.el7 docker-ce-cli-18.09.2-3.el7 containerd.io-18.09.2-3.el7 &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;通常ユーザーへのdocker権限追加&#34;&gt;通常ユーザーへのDocker権限追加
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo usermod -aG docker ${USER}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;アンインストール&#34;&gt;アンインストール
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum erase -y docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日常利用&#34;&gt;日常利用
&lt;/h2&gt;&lt;h3 id=&#34;ミラーキャッシュ&#34;&gt;ミラーキャッシュ
&lt;/h3&gt;&lt;p&gt;依然未知な神秘的な力が存在し、イメージのダウンロード速度が遅いという問題がある。この状況下で、国内のクラウドベンダーが多くの加速サービスを提供してきたため、引き続き&lt;strong&gt;阿里云&lt;/strong&gt;をおすすめする。&lt;/p&gt;
&lt;p&gt;加速されたアドレスは、ご自身でアカウントを登録してAliyunから入手してください。このサービスは無料で、Aliyunは無料のイメージ構築サービスも提供しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt;EOF
{
  &amp;quot;registry-mirrors&amp;quot;: [
    &amp;quot;https://docker.nju.edu.cn&amp;quot;,
    &amp;quot;https://mirror.baidubce.com&amp;quot;,
    &amp;quot;https://docker.m.daocloud.io&amp;quot;,
    &amp;quot;https://docker.mirrors.sjtug.sjtu.edu.cn&amp;quot;
  ]
}
EOF
systemctl daemon-reload &amp;amp;&amp;amp; \
systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;強く推奨のコントロールパネル&#34;&gt;強く推奨のコントロールパネル
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume create portainer_data &amp;amp;&amp;amp; \
docker run -d --name=portainer --restart=always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.20.3-alpine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;よく使うイメージプルコレクション&#34;&gt;よく使うイメージプルコレクション
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull rancher/rancher:stable &amp;amp;&amp;amp; docker pull  portainer/portainer-ce:2.0.1 &amp;amp;&amp;amp; \
docker pull centos:7 &amp;amp;&amp;amp; docker pull ubuntu:20.04 &amp;amp;&amp;amp; docker pull ubuntu:18.04 &amp;amp;&amp;amp; \
docker pull redis:5 &amp;amp;&amp;amp; docker pull redis:6 &amp;amp;&amp;amp; \
docker pull alpine:3.11 &amp;amp;&amp;amp; docker pull busybox:1.32 &amp;amp;&amp;amp; \
docker pull rabbitmq:3.7-management &amp;amp;&amp;amp; \
docker pull mariadb:10.2 &amp;amp;&amp;amp; \
docker pull nginx:1.18 &amp;amp;&amp;amp; docker pull nginx:1.19 &amp;amp;&amp;amp; \
docker pull mysql:5.6 &amp;amp;&amp;amp; docker pull mysql:8 &amp;amp;&amp;amp; \
docker pull elasticsearch:6.8.11 &amp;amp;&amp;amp; docker pull logstash:6.8.11 &amp;amp;&amp;amp; docker pull kibana:6.8.11 &amp;amp;&amp;amp; \
docker pull zookeeper:3.4 &amp;amp;&amp;amp; \
docker pull influxdb:1.7 &amp;amp;&amp;amp; docker pull grafana/grafana:7.3.1 &amp;amp;&amp;amp; \
docker pull percona:8 &amp;amp;&amp;amp; docker pull percona:5.6 &amp;amp;&amp;amp; \
docker pull cloverzrg/frps-docker:0.34.3 &amp;amp;&amp;amp; docker pull cloverzrg/frpc-docker:0.34.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;よく使うコマンドの組み合わせ&#34;&gt;よく使うコマンドの組み合わせ
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/reference/commandline/docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/engine/reference/commandline/docker/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンテナの実行状態を確認し、__INLINE_CODE_0__パラメータを追加して詳細なコンテナ情報を確認します。この際、イメージ情報は無視します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker ps --format &amp;quot;{{.Names}}: {{.Ports}}: {{.Size}}&amp;quot;
#portainer: 0.0.0.0:8000-&amp;gt;8000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp: 0B (virtual 172MB)
#influxdb: 0.0.0.0:8086-&amp;gt;8086/tcp: 183B (virtual 311MB)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;全コンテナを停止&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;全イメージを一括削除&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dokcer rmi $(docker images -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;イメージエクスポート&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; &amp;gt; -o XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージのエクスポートと圧縮&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; | gzip &amp;gt; XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージのインポート&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker load -i XXX.tar
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Linux上にJMeterテスト環境を構築する</title>
        <link>https://blog.ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</link>
        <pubDate>Tue, 22 Dec 2020 10:12:50 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</guid>
        <description>&lt;p&gt;著者はハードウェアに強い興味を持ち、Jmeterを用いて負荷テストを実施。CentOS 7上にJmeter、InfluxDB、Grafanaをデプロイした過程を記録。Jmeterのインストールとコマンド使用方法、InfluxDBの特徴とDockerインストール方法、そしてGrafanaの簡単なデプロイと設定について解説。高性能プログラムのパターンに関する経験と参考文献もまとめた。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;データ表示に加えて、Webパネルを別途用意するメリットは何か？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;考えたことが全て思い込みで、試してみないと分からない。
Don&amp;rsquo;t use GUI mode for load testing! only for Test creation and Test debuggin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公式的にはコマンドラインでレポートを取得し、GUIで表示する方法にはデータの誤差があるとのことです。JMeterの理解は深くないですが、せめてバージョン__INLINE_CODE_0__のコンソールパネルを試してみる理由が少なくとも見つかりました。&lt;/p&gt;
&lt;p&gt;オープンソース中国の投稿ですが、主要コンポーネントのデプロイは友好的ではありません。必要なファイルも公众号でフォローしないとダウンロードできないため、次世代として当然__INLIN_ITALIC_1____に置き換えました。結局のところ、自分のサーバーが国内にあること、クロスボーダーのソースアドレスへのアクセス速度が遅いことが問題です。少なくともミラーサービスは、アリババクラウドに無料のアクセラレーションがあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;のインストールについては、ここでは詳述しません。以前の記事を参照してください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今後の内容は大きく分けて、基本的なテスト環境構築と、各コンポーネントの簡単な説明です。&lt;/p&gt;
&lt;h2 id=&#34;jmeter&#34;&gt;Jmeter
&lt;/h2&gt;&lt;p&gt;Apache JMeterは、Apache Software Foundationが開発したJavaベースの負荷テストツールです。ソフトウェアに負荷をかけるために使用され、当初はWebアプリケーションのテスト用に設計されましたが、その後他のテスト分野にも拡張されています。静的なリソースや動的なリソースなど、さまざまなものをテストできます。例えば、静的ファイル、Javaマイクロサービス、CGIスクリプト、Javaオブジェクト、データベース、FTPサーバーなどです。JMeterを使用すると、サーバー、ネットワーク、またはオブジェクトに巨大な負荷をシミュレートし、さまざまなプレッシャーカテゴリー下での強度をテストし、全体的なパフォーマンスを分析できます。また、アサーションを含むスクリプトを作成することで、アプリケーションの機能/回帰テストを行い、プログラムが期待される結果を返すことを検証できます。最大限の柔軟性を実現するため、JMeterは正規表現を使用してアサーションを作成できます。&lt;/p&gt;
&lt;p&gt;Apache JMeterは、静的なリソースと動的なリソース（ファイル、サーブレット、Perlスクリプト、Javaオブジェクト、データベースおよびクエリ、FTPサーバーなど）のパフォーマンスをテストするために使用できます。サーバー、ネットワーク、またはオブジェクトに過剰な負荷をかけて強度をテストしたり、さまざまなプレッシャーの種類下での全体的なパフォーマンスを分析したりすることができます。パフォーマンスのグラフ解析や、高並行負荷テストを行うことも可能です。&lt;/p&gt;
&lt;h3 id=&#34;jmeter-centos7&#34;&gt;JMeter CentOS7
&lt;/h3&gt;&lt;p&gt;インストールパッケージ&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install java-1.8.0-openjdk -y &amp;amp;&amp;amp; \
wget https://mirrors.bfsu.edu.cn/apache//jmeter/binaries/apache-jmeter-5.4.tgz &amp;amp;&amp;amp; tar -xf apache-jmeter-5.4.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;環境変数を設定する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export JMETER_HOME=$HOME/jmeter/apache-jmeter-5.4
export PATH=$JMETER_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;jmeter-コマンド&#34;&gt;JMeter コマンド
&lt;/h3&gt;&lt;p&gt;最終、&lt;code&gt;Grafana&lt;/code&gt;控制面板，可以不输入&lt;code&gt;-l&lt;/code&gt;参数，在__INLINE_CODE_2__コントロール台のデータを確認&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jmeter -n -t /tmp/order-500-10s.jmx -l /tmp/jmeter-order-report-20200109/order-500-10s.jtl
# 一般不用测试结果和测试报告，简化命令
jmeter -n -t /tmp/order-500-10s.jmx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;influxdb&#34;&gt;InfluxDB
&lt;/h2&gt;&lt;p&gt;InfluxDBは、外部依存なしでGo言語で記述されたオープンソースの分散型時系列データベースです。現在では、主にDevOpsモニタリングデータ、アプリMetrics、IoTセンサーデータ、リアルタイム解析データなど、大量のタイムスタンプデータを保存するために使用されています。&lt;/p&gt;
&lt;h3 id=&#34;influxdbの特徴&#34;&gt;InfluxDBの特徴
&lt;/h3&gt;&lt;p&gt;InfluxDBの特徴は、以下の9点に集約できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構造（パターン）なし：任意の数の列が可能です。&lt;/li&gt;
&lt;li&gt;メトリクスの保存期間を設定できます。&lt;/li&gt;
&lt;li&gt;統計を支援するため、時間に関連する関数（最小値、最大値、合計、件数、平均、中央値など）に対応。&lt;/li&gt;
&lt;li&gt;サポートするストレージポリシー：データの削除・変更に利用可能。（InfluxDBはデータ削除・変更の方法を提供していません。）&lt;/li&gt;
&lt;li&gt;継続クエリのサポート：データベース内で自動的にスケジュールされた一連の文であり、ストレージポリシーと組み合わせることでInfluxDBのシステムリソース使用量を削減できます。&lt;/li&gt;
&lt;li&gt;ネイティブなHTTPサポート、内蔵HTTP API。&lt;/li&gt;
&lt;li&gt;SQLに類似した構文をサポート。&lt;/li&gt;
&lt;li&gt;クラスタ内のデータレプリカ数を設定可能。&lt;/li&gt;
&lt;li&gt;定期サンプリングデータをサポートし、別のmeasurementに書き込むことで、細分化されたデータストレージを可能にする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;influxdb-docker-インストール&#34;&gt;InfluxDB Docker インストール
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir influxdb &amp;amp;&amp;amp; cd influxdb &amp;amp;&amp;amp; \
docker run -p 8086:8086 -d --name influxdb -v $PWD:/var/lib/influxdb influxdb:1.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンテナに入り、コマンドを実行し、手動でデータベースを作成する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@bce0a55bbc72:/# influx
Connected to http://localhost:8086 version 1.7.10
InfluxDB shell version: 1.7.10
&amp;gt; 交互面板执行命令
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;influxdb-データベースとユーザーの作成&#34;&gt;InfluxDB データベースとユーザーの作成
&lt;/h3&gt;&lt;p&gt;データベース作成：create database jmeter_t2
データベース表示：
データベースを切り替えます：use jmeter_t2
ユーザーを作成：パスワード&amp;rsquo;admin&amp;rsquo;でユーザー&amp;quot;admin&amp;quot;を全権限で作成
ユーザー表示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; show users
user  admin
----  -----
admin true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ユーザー権限が表示されれば、データベースの準備は完了です。&lt;/p&gt;
&lt;h2 id=&#34;grafana&#34;&gt;Grafana
&lt;/h2&gt;&lt;p&gt;テストケース作成中に、グラフ表示はそれほど必須ではないことがわかった。インターフェースの__INLINE_CODE_0__データはコマンドライン実行で確認できるし、主にプログラム内部の処理時間を把握したいだけだ。&lt;/p&gt;
&lt;p&gt;簡単な展開&lt;/p&gt;
&lt;p&gt;コンソールはタグによるテスト結果のフィルタリングをサポートしており、通常は &lt;code&gt;InfluxDB&lt;/code&gt;データベースの設定だけで済みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーション名&lt;/li&gt;
&lt;li&gt;テストケース名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/linux-setup-jmeter-testing-environment/Snipaste_2021-03-09_19-44-22.png&#34;
	width=&#34;861&#34;
	height=&#34;357&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;grafana&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name=grafana -p 3000:3000 grafana/grafana:7.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ウェブ版では、サンプラー間隔により計算の**&lt;em&gt;強調&lt;/em&gt;** &lt;strong&gt;太字&lt;/strong&gt; &lt;em&gt;斜体&lt;/em&gt; &lt;strong&gt;リンク&lt;/strong&gt; が発生します。&lt;/p&gt;
&lt;p&gt;資料には、__INLINE_CODE_0__をカスタマイズする方法も記載されています。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;高性能なプログラムパターンは必ずしもone loop threadであり、ロック、キューへの入出力は不要なパフォーマンス損失を引き起こす。&lt;/li&gt;
&lt;li&gt;コアビジネスロジックの処理時間が、他のコードの導入にかかる時間よりも長い。効率を効果的に高めるには並行処理が不可欠であり、コア処理時間が十分短い場合にのみ、他のコードの導入は慎重に行うべきである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@jasonli.studio/to-install-apache-jmeter-in-centos7-294bc72a97ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;To install Apache JMeter in CentOS7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
