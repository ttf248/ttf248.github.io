<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>大規模ストレージ on 向叔の手帳</title>
        <link>https://blog.ttf248.life/ja/tags/%E5%A4%A7%E8%A6%8F%E6%A8%A1%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8/</link>
        <description>Recent content in 大規模ストレージ on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ja/tags/%E5%A4%A7%E8%A6%8F%E6%A8%A1%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>コンピュータがなぜ一般的にリトルエンディアンを採用しているのか。</title>
        <link>https://blog.ttf248.life/ja/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ja/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;バイトオーダーに関する解説 &lt;a class=&#34;link&#34; href=&#34;https://blog.ttf248.life/ja/p/host-order-network-order-debugger-observation/&#34; &gt;主机序、网络序，通过调试器，直接观察&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンピュータ分野で過去の経緯から生まれたある種の設計習慣は、おべっか粉砕機（マッパァーグォ）の幅がロケット推進器の幅を決める道理と全く同じで、無理に「利点」「欠点」を分析する必要はなく、単なる慣習です。&lt;/p&gt;
&lt;h2 id=&#34;元のリンク&#34;&gt;元のリンク
&lt;/h2&gt;&lt;p&gt;著者：北極
リンク：&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
出典：知乎
著作権は著者に帰属します。商用転載には著者に許可を得て、非商用転載には出典を明記してください。&lt;/p&gt;
&lt;h2 id=&#34;転載本文&#34;&gt;転載本文
&lt;/h2&gt;&lt;p&gt;現在のビッグエンディアン／リトルエンディアンの状況は、歴史的慣習と商業化の結果であり、技術そのものとは大きく関係ありません。ARMは、ビッグエンディアンにもリトルエンディアンにも設定可能です。TCP/IPヘッダーも現在でもビッグエンディアン（ネットワークバイトオーダー）です。ストレージ分野においても、多くのストレージプロトコル／仕様がデータをビッグエンディアン方式で保存しています。&lt;/p&gt;
&lt;p&gt;ですから、質問者の3つの問題について、今日の視点から見ると：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンピュータがなぜ一般的にリトルエンディアンを採用しているのか？→ 誤り。&lt;/li&gt;
&lt;li&gt;効率は必ずしも高くなるわけではありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;これらの問題を現在の技術で論証することは、矢を放ってから的を描くような行為だ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;しかし、ビッグエンディアンかリトルエンディアンかの選択に関して言えば、コンピュータの発展史の中で確かに一定の客観的な要因がありました。ホストのバイトオーダー（リトルエンディアン）の利点：リトルエンディアンでは加算器が比較的作りやすいです。8ビット*4の加算器を作る場合、8ビットの加算器一つで十分で、低位から高位へ順に各バイトを足し合わせれば良いので、キャリー回路は非常にシンプルです。一方、ビッグエンディアンの場合、一度に32ビットをロードする必要があり、そうしないと計算できません。現在では、一度に8ビットか32ビットかをロードする違いはそれほど大きくありませんが、数十年前のメモリ価格が高かったため、シンプルな方が良いので、リトルエンディアンを選択したのはコストを考慮した結果です。ネットワークバイトオーダー（ビッグエンディアン）の利点：初期のデバイスではキャッシュが小さく、上位バイトを受信することで、パケット情報を素早く判断できました。バッファサイズ（どれくらいのキャッシュを用意する必要があるか）、アドレス範囲（IPアドレスは先頭からマッチングされる）などです。初期のネットワークデバイスのキャッシュはバイト単位で動作しており、上位バイトを取得すると確かに少し速くなります。そのため、ネットワークデバイスではビッグエンディアンを採用したのも、コストを考慮した結果です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;そのため、バイトオーダーの選択は歴史的に見て、アプリケーションのシナリオやコストを考慮することが多かった（例えば、PPC/MIPSはネットワーク機器に適しているなど）。しかし、その後の技術発展の中で、互換性のために、リトルエンディアン/ビッグエンディアンの設定が現在まで引き継がれている。&lt;/p&gt;
&lt;p&gt;現在では、これらは完全に存在せず、単なる慣習に過ぎない。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
