<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ブログ on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%83%96%E3%83%AD%E3%82%B0/</link>
        <description>Recent content in ブログ on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 20:54:02 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%83%96%E3%83%AD%E3%82%B0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ウェブサイトの高速化とドメイン設定</title>
        <link>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</link>
        <pubDate>Sat, 20 Jun 2020 10:36:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</guid>
        <description>&lt;p&gt;境内アクセス時のGitHub Pagesの速度が遅いため、著者が個人ドメインを取得し、国内クラウドホスティングプロバイダーのCDN加速サービスを購入しました。設定中に、wwwサフィックスドメインへのアクセスができない問題が発生しましたが、最終的に汎用ドメインのDNS解析を削除し、セカンドレ벨ドメインを個別に設定することで解決しました。著者はまた、CDN加速の原理と設定経験、およびNginxを用いた逆プロキシの試みと教訓についても共有しています。&lt;/p&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景
&lt;/h3&gt;&lt;p&gt;ウェブサイトはGitHub Pagesにホストされており、周知のところ、GitHub Pagesへの国内アクセスが遅いことがありました。そこで個人ドメインを取得し、国内クラウドホスティングプロバイダーのCDN加速サービスを購入しました。加速サービスのセットアップ時に、開発マシンにもDocker、frp、k8sなどのサービスをデプロイしており、これらのサービスにはそれぞれダッシュボードが用意されていることを思い出し、無駄を省くという原則に基づき、複数のリバースプロキシを設定し、すべてサブドメインに付与しました。
その時、サブドメインであるwwwがアクセスできなくなったことに気づきました。阿里云でDNS設定を行い、www.xiangtianlong.comとxiangtianlong.comの両方を解析するように設定しましたが、CDN加速を有効にしていないときは両方のドメインが正常に使用できました。
CDN加速を設定した際、サブドメインが多数存在するため、汎用的なルールを有効にし、すべて開発マシンにルーティングしました。その結果、wwwというサブドメインもダウンしてしまいました。はい、正しく理解してくださいましたか？wwwプレフィックスはサブドメインです。実際にはウェブサイトはGitHub Pagesにデプロイされており、開発マシンにはウェブサイトのキャッシュ情報は一切ありません。
開発マシンにサイトをデプロイしなかったのは、静的ブログであり、GitHubが提供するActionで自動的に統合して公開されるため、本当に美味しかった（真香）からです。&lt;/p&gt;
&lt;h3 id=&#34;ドメイン&#34;&gt;ドメイン
&lt;/h3&gt;&lt;p&gt;非専門的なWeb開発において、ドメインの理解はSEOやクロスオリジン問題といった概念を含まない。ブログサイトとして、裸ドメインがブログ主のサイトを強調しやすく、特に私が漢数字でのローマ字表記をドメイン名としている場合や、現在のモバイルアクセスが多い状況では、入力する文字数を減らすことが望ましい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PC版ではキーボードショートカットでwwwとcomの入力を省略可能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN
&lt;/h3&gt;&lt;p&gt;阿里云和腾讯云都用过，初心者でも扱いやすく、腾讯云には動画で関連概念を解説しています。CDN加速の原理は、京东倉庫と似ています。新商品が出版される際、全国各地の倉庫にまとめて配送し、配送リクエストが発生した際に、最も近い倉庫から配信します。&lt;/p&gt;
&lt;p&gt;キャッシュサーバー（回源アドレス）：ウェブサイトのリソースが元の場所で保存されている場所
キャッシュファイルの設定：ブラウザのF12で管理コンソールを開き、静的リソースと動的リソースを分析する&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全て0日有効期限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.php;.jsp;.asp;.aspx&lt;/code&gt; 0日有効期限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.jpg;.png;.js;.css;.woff2&lt;/code&gt; 1日有効期限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;腾讯云設定ルール：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャッシュ过期ルールは最大10件まで設定可能&lt;/li&gt;
&lt;li&gt;複数のキャッシュ过期ルール間の優先順位は、下から上にいくほど高い&lt;/li&gt;
&lt;li&gt;キャッシュ过期時間は最大365日まで設定可能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;悲惨自述&#34;&gt;悲惨自述
&lt;/h3&gt;&lt;p&gt;以前从未用过Nginx，以为网站随便搜索就能明白反向代理的配置，结果有点混乱，折腾半天连个302跳转也没弄明白，最终毫无用处。就想着笨办法解决一下，DNS解析删除*模式的泛域名解析，单个二级域名进行独立设置。这时突然注意到了阿里云DNS解析有一个叫做“显示URL跳转”的模式，尝试了一下，这不就是我想要的302跳转吗。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设置了第一个二级域名正常访问，等我设置第二个的时候，发现没用，都快怀疑人生了，等了一会突然就能用了，看来阿里云的DNS扩散偶尔也是会抽风的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/20414602&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;なぜ多くのウェブサイトのドメイン名に「www」プレフィックスが付加されないのか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudxns.net/Support/detail/id/918.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www付きとそうでないドメイン名の違いは何ですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gythialy.github.io/Docker-nginx-reverse-proxy/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docker nginx 反向プロキシ設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ブログIDE環境と雑感</title>
        <link>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;本記事では、Markdownの基本的な概念と、さまざまなソフトウェアでの利用について紹介しています。VSCodeをIDEとして推奨し、おすすめプラグインも列挙しています。作者はHexoからHugoへの移行経験を共有し、Hugoの柔軟性とカスタマイズ性を強調しています。最後に、新しい技術を迅速に習得するためのヒントや、Hugoテーマのスタイルが更新されない問題を解決する簡単なコツを紹介します。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;軽量マークアップ言語であり、人間が読み書きしやすいプレーンテキスト形式でドキュメントを作成することを可能にする。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;markdown-1&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;詳細なMarkdown構文については、本文で別途詳述しません。電子書籍を推奨します。&lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらをクリック&lt;/a&gt;
市場には多くのソフトウェアがMDを記述方法としてサポートしています。CSDNのブログシステムはMD構文に対応したオンラインエディターを導入しており、初回使用時にデフォルトでMD構文に関する紹介記事が表示されます。筆記者自身もそれなりに有用だと感じています。印象笔记では2018年にMDノートのサポートを追加し、ショートカットバーには様々なMDマークアップのオプションがあり、普通の文章を編集するのとほぼ同じように使えます。全体的なインタラクションフローは初心者にもフレンドリーです&lt;/p&gt;
&lt;h3 id=&#34;ide-推奨&#34;&gt;IDE 推奨
&lt;/h3&gt;&lt;p&gt;この記事を書いているのは2020年であり、VS Code は当然のことながら皆知っているでしょう。なぜなら、Git Page をブログシステムとして構築することを考える業界人は少なくないからです。数年前には、Sublime や Atom も優れた選択肢でした。オープンソースコミュニティの推進により 2 年間にわたって発展し、現在では VS Code が初心者にとっての最初の選択肢となっています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Microsoft の巨頭とオープンソースコミュニティの関係は、対立状態から成功裏に蜜月期に入りました：オープンソースを抱擁しています。筆者所在の会社も最近 2 年間にわたり積極的に Java エコシステムを取り入れており、ビジネス開発においては、現在国内で Java エコシステムはまさに「魅力的」です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vscodeプラグインのおすすめ&#34;&gt;VSCodeプラグインのおすすめ
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-07-17.png&#34;
	width=&#34;310&#34;
	height=&#34;306&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;プラグインリスト&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;プラグインにはそれぞれReadmeがあり、基本的な使い方や主要な機能が紹介されています。一部のプラグイン作者は、動的な効果を表示する画像も提供しています。
&lt;code&gt;Paste Image&lt;/code&gt;とhugoの画像プラグイン方式を組み合わせることで、非常に簡単に画像を挿入できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ショートカットキーを忘れてしまった場合、VSCodeのショートカットキー管理メニューを開き、「md」で検索して数回確認しましょう。Readmeをもう一度見直すのも良いでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo
&lt;/h2&gt;&lt;p&gt;筆者は&lt;code&gt;hexo&lt;/code&gt;から&lt;code&gt;hugo&lt;/code&gt;に切り替えた。愛折衝は私の天性であり、結局は忍耐強く静かに記事を書くことができないのだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugoは、個別のフォルダに画像とmdドキュメントを置くことをサポートする。&lt;/li&gt;
&lt;li&gt;Academicテーマのデザイン上では、様々な種類の文章スタイルをサポートしている。&lt;/li&gt;
&lt;li&gt;様々な便利なカスタム拡張機能がある。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学術&#34;&gt;学術
&lt;/h2&gt;&lt;p&gt;公式サイトではデフォルトで&lt;code&gt;exampleSite&lt;/code&gt;を使用し、メニューのインポートには&lt;code&gt;#component&lt;/code&gt;形式が推奨されます。URLのパターンは、ナビゲーションバーをクリックすることで単一ページのジャンプを実現し、ホームページでのスクロールを回避します（これは純粋な個人的な好みです）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタイル：ノート、講演、電子書籍&lt;/li&gt;
&lt;li&gt;柔軟性：全体的なスタイルのカスタマイズ、カスタムCSSスタイルの適用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このテーマは、中国語のサポートがまだ十分ではありません。主に視覚的な観点からすると、フォントサイズが中国語の読書習慣に合っていません。Hexoの開発者はほとんどが中国人であり、この点ではHugoよりも優れています。しかし、自分で手を加えて、ブラウザで要素を検証することで、要素を見つけ出し、変更するCSSスタイルの名前を知ることができます。サイドバーで&lt;strong&gt;Insert Style Rule Below&lt;/strong&gt;をクリックすると、ネストされた多層構造のCSSでも簡単にノード名を取得できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムCSSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/#add-scripts-js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムJSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テーマに組み込まれている構文強調表示の設定については、&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式ドキュメント&lt;/a&gt;を参照してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;子供たちがまた文句を言っているようだ。「最初から最後まで、曖昧で、細かいこと何も言ってない」と。&lt;/p&gt;
&lt;p&gt;私はこう言うつもりだ。以下のものがあれば十分だ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式マニュアル&lt;/li&gt;
&lt;li&gt;プラグインの説明書&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい技術をすぐに使いこなすには、まず公式サイトのドキュメントを読むことを推奨する。完璧に理解しようとする必要はないし、一度読んで理解する必要もない。少なくとも、ある程度の知識は持っておくべきだ。検索エンジンで見つかる結果が、必ずしも最新版と一致しない。誤解を招く可能性もある。新しい本も同様だ。まず目次を見て、著者が何を説明するのか把握する。場合によっては、序文を読むのが良い。特に海外の著作を翻訳した際に、翻訳者の序文は書籍と核心的な内容をカバーしていることがある。&lt;/p&gt;
&lt;h2 id=&#34;エッグ卵&#34;&gt;エッグ（卵）
&lt;/h2&gt;&lt;p&gt;Hugo Academicの組み込みスタイルを切り替え、サイトに公開後、アクセス時にスタイルが変更されない。賢い仲間たちはすでに解決策を見つけており、「ブラウザキャッシュをクリア」することで問題が解決する。私のような機転の利いた者：「F12開発者ツール」で&lt;code&gt;network&lt;/code&gt;タブを選択し、&lt;code&gt;disable cache&lt;/code&gt;オプションをチェックしてリフレッシュすれば、完璧！
&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>自動統合システム切り替え</title>
        <link>https://ttf248.life/ja/p/auto-integration-system-switch/</link>
        <pubDate>Sun, 29 Mar 2020 02:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/auto-integration-system-switch/</guid>
        <description>&lt;p&gt;GitHub Actions を使用して、Hugo ブログを GitHub Pages および Gitee に自動でデプロイします。&lt;/p&gt;
&lt;h4 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h4&gt;&lt;p&gt;昨日ブログを更新した際に、Travisサービスが利用できないことを発見しました。Travisのウェブサイトを確認すると、ソースコードの取得時に進捗が止まっていることがわかりました。そこで、GitHubが以前に発表していたActionサービスを思いつきました。
当時、業務が多忙であり、Actionを利用するには申請が必要だったため、現在は正式にリリースされ、週末に暇を持て余している間に、新しいおもちゃを試してみようかと思いました？
公式資料は、ご自身でウェブサイトをご確認ください。本記事では、より多くの転載を行いません。もしKubernetesをご利用経験がある場合、ActionのYAMLファイル設定がKubernetesと非常に似ていることに気づくでしょう。
入門チュートリアル、あるいは中国語の説明資料については、&lt;strong&gt;阮一峰のブログ&lt;/strong&gt;を検索することをお勧めします。2つの記事があり、1つ目は基本的な構文の紹介であり、もう1つは実際のケーススタディです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
正文
必要な知識点
- GitHub Secrets
- Action の構文
コアのジョブは既存のコンポーネントを使用して完了し、国内のGiteeにプッシュするにはコマンドを使用します。このコマンド部分は粗暴で、強制プッシュのみを実装しており、Travisを使用していた際のロジックを継承しています。

```yaml
name: github pages and gitee pages

on:
  push:
    branches:
      - hugo

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;
          extended: true

      - name: Build Github and Gitee ## 単独ステップには1つのrunコマンドしか書けない
        run: hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;gitee_public&amp;quot; &amp;amp;&amp;amp; ls

      - name: Deploy Github
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.BLOG_TOKEN }}
          publish_dir: ./github_public
          publish_branch: master
          cname: xiangtianlong.com

      - name: Deploy Gitee
        run: cd ./gitee_public &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git config user.name &amp;quot;TianlongXiang&amp;quot; &amp;amp;&amp;amp; git config user.email &amp;quot;tianlongxiang51@gmail.com&amp;quot; &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update TianlongXiang&#39;s Blog&amp;quot; &amp;amp;&amp;amp; git push --force &amp;quot;https://xiangtianlong:${{ secrets.GITEE_PASSWORD }}@gitee.com/xiangtianlong/xiangtianlong.git&amp;quot; master:master
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;付録&#34;&gt;付録
&lt;/h4&gt;&lt;p&gt;公式マーケットで提供されているactionを見ると、現在サポートされている遊び方があまりにも多い。Dockerイメージを構築すれば、Docker Hubから提供されるサービスへの依存関係もなくなります。&lt;/p&gt;
&lt;p&gt;Hugoのissueを調査すると、GitHub Actionを使ってgit pagesを自動デプロイする際に、最終的に公開されるウェブサイトがmasterブランチにある必要があることがわかります。もし他のブランチにデプロイする場合は、設定画面でGitHubはウェブサイトに構文エラーがあると警告します。&lt;/p&gt;
&lt;p&gt;これは単にHugoのソースファイルがmasterブランチにあるため、GitHubがjellyブログのソースコードとして検出し、構文チェックが通らない場合に発生するエラーです。&lt;/p&gt;
&lt;p&gt;解決策は簡単です。Hugoのソースファイルを他のブランチに配置し、静的ファイルをmasterブランチに公開します。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
