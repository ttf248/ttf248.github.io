<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ブログ on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/%E3%83%96%E3%83%AD%E3%82%B0/</link>
        <description>Recent content in ブログ on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/%E3%83%96%E3%83%AD%E3%82%B0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>ウェブサイトの高速化とドメイン設定</title>
        <link>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</link>
        <pubDate>Sat, 20 Jun 2020 10:36:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</guid>
        <description>&lt;p&gt;国内アクセスがGitHub Pagesよりも遅いため、著者は個人ドメインを申請し、国内クラウドプロバイダーのCDNアクセラレーションサービスを購入しました。設定中に、wwwサブドメインにアクセスできない問題が発生しましたが、最終的にワイルドカードドメイン解析を削除し、セカンダリドメインを個別に設定することで解決しました。また、著者はCDNアクセラレーションの原理と設定経験、Nginxのリバースプロキシの試みと教訓についても共有しています。&lt;/p&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景
&lt;/h3&gt;&lt;p&gt;GitHub Pagesにサイトをホストしているため、周知の理由により、国内からのGitHub Pagesへのアクセスは少し遅いです。そこで、個人ドメインを申請し、国内クラウドプロバイダーのCDN加速サービスを購入しました。加速サービスを設定する際に、開発マシンにあるDocker、frp、k8sなどのサービスが思い浮かびました。これらのサービスにはそれぞれダッシュボードがあるので、無駄にしないという考えで、いくつかのリバースプロキシを設定し、すべてを二级ドメインに割り当てました。&lt;/p&gt;
&lt;p&gt;サブドメインを快適に使っていると突然、wwwサブドメインにアクセスできなくなりました。アリババクラウドでは、www.xiangtianlong.comとxiangtianlong.comの両方をDNSで同時に解析するように設定しており、CDN加速が有効になっていないときは両方のドメインとも正常に使用できていました。&lt;/p&gt;
&lt;p&gt;CDN加速設定時に、セカンダリドメインが多すぎるため汎用ドメインルールを有効にし、すべて開発マシンにルーティングした結果、wwwというセカンダリドメインもダウンしてしまいました。はい、勘違いではありません、wwwプレフィックスはセカンダリドメインです。実際のウェブサイトはGitHub Pagesにデプロイされており、開発マシンにはウェブサイトのキャッシュ情報が一切ありません。&lt;/p&gt;
&lt;p&gt;開発マシンにサイトをデプロイしないのは、静的ブログで、GitHubの提供するアクションと組み合わせることで、自動的に統合して公開できるからだ。最高だ。&lt;/p&gt;
&lt;h3 id=&#34;ドメイン&#34;&gt;ドメイン
&lt;/h3&gt;&lt;p&gt;非専門的なウェブ開発では、ドメインの理解はSEOやクロスドメインの問題には及びません。ブログサイトとして、ベアドメインを使うことでブログ主のサイトが際立ちやすくなります。これは私のように漢字のピンインをドメインにしているような者にとって、それに加え現在のモバイルアクセスが多いことを考えると、入力できる文字数を減らせるというメリットがあります。&lt;/p&gt;
&lt;p&gt;パソコンでは、ショートカットキーを使えばwwwとcomの入力を省略できます。&lt;/p&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN
&lt;/h3&gt;&lt;p&gt;アリババクラウドとテンセントクラウドの両方使ったことがあり、初心者でも使いやすいです。テンセントクラウドには関連する概念を個別に解説した動画もあります。CDNの加速原理は京東（ジードン）の倉庫と同じで、新商品を発売したら、事前に全国各地の倉庫に一斉配送し、配送リクエストが発生した際に、最寄りの倉庫から発送します。&lt;/p&gt;
&lt;p&gt;元のURL：ウェブサイトのリソースが最初に保存されていたアドレス&lt;/p&gt;
&lt;p&gt;キャッシュファイル設定、ブラウザのF12、管理コンソール、静的リソースと動的リソースの簡単な分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全件0日有効&lt;/li&gt;
&lt;li&gt;.php;.jsp;.asp;.aspx 0日有効期限&lt;/li&gt;
&lt;li&gt;.jpg;.png;.js;.css;.woff2 有効期限1日&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンセントクラウド設定ルール：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャッシュの有効期限ルールは最大で10条まで設定可能です。&lt;/li&gt;
&lt;li&gt;複数のキャッシュ失効ルールの優先順位は、下位ルールから適用されます。&lt;/li&gt;
&lt;li&gt;キャッシュの有効期限は最大365日まで設定可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛ましい告白&#34;&gt;痛ましい告白
&lt;/h3&gt;&lt;p&gt;以前使ったことがなかったのでNginxを理解しているつもりでしたが、ウェブサイトを検索すればリバースプロキシの設定がわかると思っていました。しかし、結果は混乱し、半日かけても302のリダイレクトを理解できませんでした。結局、何も成果が出ませんでした。そこで、思いつきでDNS解析からワイルドカードの汎用ドメイン解析を削除し、個々のセカンドレベルドメインを独立して設定しました。その時、突然、阿里云のDNS解析に「表示URLリダイレクト」というモードがあることに気づきました。試してみたところ、これがまさに私が求めていた302のリダイレクトでした。&lt;/p&gt;
&lt;p&gt;最初の二階建てドメインの設定は問題なくアクセスできたのに、2つ目の設定をしたら動かない。しばらく待ってみたら急に使えるようになったので、阿里云のDNS伝播が時々不安定になるようだ。&lt;/p&gt;
&lt;h3 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;なぜ最近、ウェブサイトのドメイン名に「www」という接頭辞が付いていないものが増えているのか？&lt;/li&gt;
&lt;li&gt;wwwとしないドメインに違いはありますか？&lt;/li&gt;
&lt;li&gt;Docker nginx リバースプロキシ設定&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ブログのIDE環境とつぶやき</title>
        <link>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;この記事では、Markdown の基本的な概念と様々なソフトウェアでの応用について説明し、VSCode を IDE として推奨しています。また、推奨されるプラグインもリストアップされています。著者は Hexo から Hugo への移行経験を共有し、Hugo の柔軟性とカスタマイズ能力を強調しています。最後に、新しい技術を始めるためのヒントと、Hugo テーマのスタイルが更新されない問題を解決する小技を提供しています。&lt;/p&gt;
&lt;h2 id=&#34;まえがき&#34;&gt;まえがき
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;軽量なマークアップ言語で、人々が読みやすく書きやすいプレーンテキスト形式でドキュメントを作成できるようにするものです。&lt;/p&gt;
&lt;p&gt;詳細なMarkdownの文法については、この文章では余分な説明は省きます。電子書籍を推薦します。&lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらをクリック&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;市場にはすでに多くのソフトウェアがmdを記述方法としてサポートしています。csdnのブログシステムはmd文法に対応したオンラインエディタをリリースし、初めて使用する際にはmd文法の紹介記事がデフォルトで用意されており、筆者はなかなか良いと感じました。印象ノートは2018年にmdノートへの対応を追加し、クイックバーには様々なmdマークアップのオプションがあり、普通の文章を編集するのとほぼ同じように使え、全体的な操作の流れは初心者にも優しいです。&lt;/p&gt;
&lt;h3 id=&#34;ide推奨&#34;&gt;IDE推奨
&lt;/h3&gt;&lt;p&gt;この記事を書いている時点ですでに2020年ですが、VSCodeなら当然聞いたことがあるでしょう。結局のところ、Git Pageを使ってブログシステムを構築しようと思えるのは、業界関係者だからです。昔はSublimeやAtomも良い選択肢でしたが、2年のオープンソースコミュニティの推進により、VSCodeは急速に発展し、初心者にとって最初の選択肢となりつつあります。&lt;/p&gt;
&lt;p&gt;マイクロソフトという巨大企業とオープンソースコミュニティの関係が、対立状態から順調に蜜月期へと移行した：オープンソースを積極的に受け入れるようになった。筆者が所属する会社もここ2年間でJavaエコシステムを積極的に導入しており、言い換えれば、現在のJavaのエコシステムは国内でのビジネス開発において非常に魅力的だ。&lt;/p&gt;
&lt;h3 id=&#34;vs-code-拡張機能の推奨&#34;&gt;VS Code 拡張機能の推奨
&lt;/h3&gt;&lt;p&gt;プラグインリスト&lt;/p&gt;
&lt;p&gt;プラグインにはそれぞれReadmeが付属しており、基本的な使い方や主要な機能について説明されています。一部のプラグイン作成者は、動的な効果を解説する画像も提供しています。&lt;/p&gt;
&lt;p&gt;貼り付けた画像、Hugoの画像プラグインと組み合わせることで、非常に手軽に画像を挿入できます。&lt;/p&gt;
&lt;p&gt;ショートカットキーを覚えていないので、VSCodeのショートカット管理メニューを開き、「md」を検索して何度か確認する。プラグインの使い方説明書をもう一度見る。&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;hugo
&lt;/h2&gt;&lt;p&gt;私はHexoからHugoに乗り換えたのですが、いじくり回すのが私の性格なので、結局は我慢できずに黙々と記事を書こうとしました。&lt;/p&gt;
&lt;p&gt;ヒューゴは、画像とmdドキュメントを個別のフォルダに配置することをサポートしています。
学術的なテーマは、デザインにおいて様々な種類の記事スタイルをサポートしています。
様々な便利なカスタマイズ拡張機能&lt;/p&gt;
&lt;h2 id=&#34;academic&#34;&gt;academic
&lt;/h2&gt;&lt;p&gt;公式サイトのデフォルトは&lt;code&gt;exampleSite&lt;/code&gt;、メニューの導入は&lt;code&gt;#コンポーネント&lt;/code&gt;方式を採用し、&lt;code&gt;url&lt;/code&gt;の使用を推奨します。&lt;/p&gt;
&lt;p&gt;URLのパターンで、ナビゲーションバーをクリックすれば単一ページへのジャンプが可能で、トップページでのスクロールではない。これは完全に個人的な好みによるものだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタイル：エッセイ、スピーチ、電子書籍&lt;/li&gt;
&lt;li&gt;柔軟性：全体スタイルをカスタマイズ、CSSスタイルをカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このテーマは中国語のサポートがまだ完全ではありません。主に視覚的な面で、フォントサイズが中国語の読書習慣にあまり合っていないことと、Hexoの開発者はほとんど中国人なので、その点でHugoよりも優れています。&lt;/p&gt;
&lt;p&gt;しかし、自分でやって服を整え、ブラウザで要素を検証する。要素の位置を特定したら、変更する必要があるCSSスタイルの名前を知りたいので、サイドバーで「Insert Style Rule Below」をクリックすると、ネストされた複数のCSSでも簡単にノード名を取得できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムCSSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/#add-scripts-js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムJSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テーマに組み込まれた文法ハイライト設定、&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式リンク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結び&#34;&gt;結び
&lt;/h2&gt;&lt;p&gt;子供はやたらと文句を言い出す、どうして最初から最後まで曖昧なことばかり言って、具体的なことは何も言わないんだ。&lt;/p&gt;
&lt;p&gt;これがあれば、十分使えるはずです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式マニュアル&lt;/li&gt;
&lt;li&gt;プラグインの説明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい技術を早く習得するには、まず公式サイトのドキュメントを読むことをお勧めします。&lt;strong&gt;大まかに目を通すだけで&lt;/strong&gt;、全てを一度で理解しようとしなくても構いません。少なくとも概要を把握することが重要です。検索エンジンの結果は、最新バージョンと一致していない場合があり、誤解を招く可能性があります。新刊を読む場合も同様です。まず目次を見て、著者が何を説明しようとしているのかを理解しましょう。時には序章から読むのが良いこともあります。特に海外の著作を翻訳したものは、翻訳者の序文が書籍の内容や核心部分を網羅していることがあります。&lt;/p&gt;
&lt;h2 id=&#34;イースターエッグ&#34;&gt;イースターエッグ
&lt;/h2&gt;&lt;p&gt;Hugo Academicの組み込みスタイルシートを変更し、サイトに公開しても、スタイルが変化しません。賢い人はすでに気づいているでしょう。ローカルブラウザのキャッシュをクリアすれば解決できます。そして、私が機智を発揮して、F12の開発者モードを開き、&lt;code&gt;network&lt;/code&gt;に切り替えて、&lt;code&gt;disable cache&lt;/code&gt;にチェックを入れて、リフレッシュ！これで完了です！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>自動統合システム切り替え</title>
        <link>https://ttf248.life/ja/p/auto-integration-system-switch/</link>
        <pubDate>Sun, 29 Mar 2020 02:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/auto-integration-system-switch/</guid>
        <description>&lt;p&gt;GitHub Actionsを使用して、HugoブログをGitHub PagesとGiteeに自動デプロイします。&lt;/p&gt;
&lt;h4 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h4&gt;&lt;p&gt;昨日ブログを更新した際、Travisのサービスが利用できないことに気づきました。Travisのウェブページを確認すると、進捗状況がソースコードの取得で止まっていることがわかり、GitHubが以前に発表したActionsサービスのことを思い出しました。&lt;/p&gt;
&lt;p&gt;その頃はかなり忙しく、アクションを使うためには申請が必要になるため、今は正式にオンラインになりました。週末に暇な時に、新しいおもちゃを試してみるか？&lt;/p&gt;
&lt;p&gt;公式資料は各自ウェブサイトでご確認ください。本文ではこれ以上の転載はいたしません。以前Kubernetesを使ったことがある人ならわかると思いますが、actionのYAMLファイルの設定とKubernetesがよく似ています。&lt;/p&gt;
&lt;p&gt;入門チュートリアル、あるいは中国語の紹介資料についてですが、&lt;strong&gt;阮一峰のブログ&lt;/strong&gt;を検索することをお勧めします。そこには2つの記事があり、1つ目は基本的な文法解説で、2つ目は実際の事例です。&lt;/p&gt;
&lt;h4 id=&#34;正文&#34;&gt;正文
&lt;/h4&gt;&lt;p&gt;必要な知識点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github secrets&lt;/li&gt;
&lt;li&gt;アクション文法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既存のコンポーネントでコアとなるジョブを完了させ、コマンドを使用して国内のGiteeにプッシュする。このコマンド部分はかなり荒っぽく、強制プッシュであり、Travisを使用していた際のロジックを引き継いでいる。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: github pages and gitee pages

on:
  push:
    branches:
      - hugo

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;
          extended: true

      - name: Build Github and Gitee ## 单个step只能写一个run命令
        run: hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;gitee_public&amp;quot; &amp;amp;&amp;amp; ls

      - name: Deploy Github
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.BLOG_TOKEN }}
          publish_dir: ./github_public
          publish_branch: master
          cname: xiangtianlong.com

      - name: Deploy Gitee
        run: cd ./gitee_public &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git config user.name &amp;quot;TianlongXiang&amp;quot; &amp;amp;&amp;amp; git config user.email &amp;quot;tianlongxiang51@gmail.com&amp;quot; &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update TianlongXiang&#39;s Blog&amp;quot; &amp;amp;&amp;amp; git push --force &amp;quot;https://xiangtianlong:${{ secrets.GITEE_PASSWORD }}@gitee.com/xiangtianlong/xiangtianlong.git&amp;quot; master:master   
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h4&gt;&lt;p&gt;公式ストアで提供されているアクションを見ると、現時点でサポートされている機能は豊富です。Dockerイメージを構築すれば、Docker Hubが提供するサービスに依存しなくなることもできます。&lt;/p&gt;
&lt;p&gt;Hugoのissueを確認したところ、GitHub Actionsを使ってGit Pagesを自動デプロイする場合、最終的に公開されるウェブページはmasterブランチに必要です。もし他のブランチにデプロイすると、設定画面でGitHubがウェブページの構文エラーを示唆します。&lt;/p&gt;
&lt;p&gt;実際は、hugoのソースファイルがmasterブランチに置かれていたため、GitHubがjellyブログのソースコードとしてそれを検出し、チェックやビルドができなかったためにエラーが発生したものです。&lt;/p&gt;
&lt;p&gt;解決策も簡単で、Hugoのソースファイルを別のブランチに置き、静的ファイルはマスターブランチで公開する。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
