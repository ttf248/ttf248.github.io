<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Github Copilot on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/github-copilot/</link>
        <description>Recent content in Github Copilot on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 05:33:00 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/github-copilot/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>AIによるプログラミング支援、生産性の進化</title>
        <link>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;GitHub Copilot のリリースからわずか 2 年しか経っていないのに、ChatGPT が登場し、裏にある原理をよく理解していない状態で、しばらく使ってみた。2 つのツールのサポートレベルは完全に異なりだが、どちらも生産性を大幅に向上させた。&lt;/p&gt;
&lt;p&gt;あまりにも複雑なことについては、AI ではまだできないだろう。なぜなら、彼らは論理がなく、パターンや形式固定されたもの、あるいは范式を定めているからだ。学習データは十分で、AI の効果は 9 分満点になる。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;GitHub Copilot
&lt;/h2&gt;&lt;p&gt;リリース時に、公式サイトの紹介の &lt;code&gt;demo&lt;/code&gt; を見ると、あまり賢くなく、試用してみましたが、使い勝手が良くありませんでしたので、諦めました。
2022年以前に、暇つぶしで切り替えて新バージョンを体験したところ、かなり良くなっており、ただ国内の速度が少し遅いのは、ネットワークの問題である可能性が高いです。&lt;code&gt;Python&lt;/code&gt;のような言語では、コメントに基づいて書かれたコードもそれなりに良く、自分で資料を探して書いていたよりもはるかに早くできました。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Github Copilot&lt;/code&gt;は、プログラマー、つまり開発者の視点から製品を設計しており、プログラミングの知識が必要でした。コメントを通じてAIによるコーディング支援を誘導していく必要がありました。
一方、&lt;code&gt;ChatGPT&lt;/code&gt;は次の段階に進み、&lt;strong&gt;専門家でなくてもすぐに使いこなせるように設計されています&lt;/strong&gt;。対話形式でのチャットインターフェースにより、質問や要求事項を提示し、理解できない場合は引き続き質問することができます。&lt;/p&gt;
&lt;p&gt;簡単な例として、単語分割の概念を知っていてもコーディング方法がわからない場合に、文字列の類似度を計算したいとします。
「こんにちは、これはBingです。😊」
オンラインの情報123に基づき、Pythonで&lt;code&gt;jieba&lt;/code&gt;ライブラリを使用して単語分割を行い、類似度を計算することができます。&lt;code&gt;jieba&lt;/code&gt;ライブラリは、精密モード、全模式、検索エンジンモードの3種類の分詞モードをサポートしています。要件に応じて適切なモードを選択できます。 2つの文字列の類似度を比較するために、まずそれらをトークン化し、その後、コサイン類似度や編集距離などの指標を計算する必要があります。NumPyやSciPyといったライブラリを使用して数学演算を行うことができます。&lt;/p&gt;
&lt;p&gt;文字列を一貫して処理するために、英語を小文字に変換するには、Pythonの組み込み関数&lt;code&gt;lower()&lt;/code&gt;を使用できます。&lt;/p&gt;
&lt;p&gt;2番目の文字列を切り出すには、Pythonのスライス操作符 &lt;code&gt;[ ]&lt;/code&gt; を使用します。&lt;/p&gt;
&lt;p&gt;以下は、そのコード例です：&lt;/p&gt;
&lt;h2 id=&#34;chatgpt-1&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;さらに踏み込んで、実行結果の問い合わせ、おめでとうございます。問題が見つかりました。結果はハッタリ（作り話）、コードを実行していません。しかし、素晴らしい結果を提供してくれます。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;栗子&#34;&gt;栗子
&lt;/h3&gt;&lt;p&gt;質問：SQL文で、製品コードテーブルから、製品コードが80000～89999の範囲にあるレコードを抽出してください。
追試：製品コードは文字列なので、あなたのコードは間違っています。
おめでとうございます、それは勘違いします。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
