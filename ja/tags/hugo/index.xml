<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hugo on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/hugo/</link>
        <description>Recent content in Hugo on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 20:54:02 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/hugo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Claude4のリリース、開発を試す：hugoタグ、超リンク翻訳アシスタント</title>
        <link>https://ttf248.life/ja/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;本サイトはHugoで開発されていますが、筆者自身は常に中国語のタイトルを使用しており、その結果、生成される文章の超リンクが使いにくい状態でした。つまり、送信する際に、中国語の文字が超リンク内で%E4%BD%A0%E5%A5%BDのような形式にエスケープされてしまうため、見た目が良くありません。設定でslugを設定することで解決できますが、毎回手動で設定する必要があり、非常に面倒でした。
そこで、Claude4を使って翻訳アシスタントを開発し、中国語のタイトルを自動的に英語のslugに変換し、文章中に超リンクを追加することを試みました。これにより、手動での設定を回避できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claude4はマジで最高！文脈理解能力が大幅に向上し、複雑なタスクの処理効率も飛躍的に向上しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;プロジェクトアドレス&#34;&gt;プロジェクトアドレス
&lt;/h2&gt;&lt;p&gt;国内プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
国外プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;コードの実装&#34;&gt;コードの実装
&lt;/h2&gt;&lt;p&gt;まず、実装の思路について説明します。すべての文章をスキャンし、タグ情報と記事タイトルを抽出した後、ローカルの大規模言語モデル（例：gemma-3-12b-it）を呼び出して翻訳します。&lt;/p&gt;
&lt;p&gt;実際の開発において、前世代の大規模言語モデルと比較して、&lt;code&gt;Claude4&lt;/code&gt; はいくつかの顕著な点を発揮しました。機能要件が多いため、&lt;code&gt;Claude4&lt;/code&gt; はインタラクティブメニューを自動的に設計し、さまざまな使用シナリオを考慮しました。例えば、タグ処理に関しては、&lt;code&gt;Claude4&lt;/code&gt; はタグの統計と分析だけでなく、分類統計もサポートし、さらに&lt;strong&gt;ラベルのない文章&lt;/strong&gt;を検出することも可能です。また、プレビュー機能やタグページ生成機能も提供しています。&lt;/p&gt;
&lt;p&gt;ローカルの大規模言語モデルとの連携、翻訳キャッシュの追加、大規模なコードのリファクタリングなど、&lt;code&gt;Claude4&lt;/code&gt; はすべて一度に完了し、ほとんど問題がありませんでした。プロジェクト規模は小さくても、多くの小さな機能を含んでいました。以前の開発プロセスでは、大規模言語モデルが前の内容を忘れてしまうことがよくありましたが、今回の &lt;code&gt;Claude4&lt;/code&gt; は非常に優れており、&lt;strong&gt;ほぼコンテキストを忘れることなく動作しました&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要するに、スマート性が向上し、今後の開発には &lt;code&gt;Claude4&lt;/code&gt; をより多く使用し、日常的なコーディングの主力モデルとして活用していく予定です。&lt;/p&gt;
&lt;h2 id=&#34;翻訳キャッシュ&#34;&gt;翻訳キャッシュ
&lt;/h2&gt;&lt;p&gt;この注文に関する説明では、大規模モデルの呼び出し回数を減らすだけでなく、実際に12Bモデルをローカルで実行すると効率が非常に高く、時間ロスもありません。しかし、毎回大規模モデルを呼び出す場合は、やはり少し遅くなります。また、文章のリンクを固定するために、全量更新を実行した場合、文章のタイトルが長いため、稀に2回の翻訳結果が異なり、リンクが変わってしまうという状況が発生します。これは非常に困ります。&lt;/p&gt;
&lt;h2 id=&#34;機能最適化&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;プロジェクト全体を &lt;code&gt;Claude4&lt;/code&gt; に引き渡して、最適化の余地を分析し、以下の提案を得ました：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;外部化の設定 - メンテナンス性と柔軟性を向上
構造化ログ - 問題のトラブルシューティングと監視が容易になる
パフォーマンスモニタリング - システムの状態を把握する
ユーザーエクスペリエンス - プログレスバーなどの視覚的なフィードバック
エラー処理 - より包括的な例外処理メカニズム
コード整理 - より明確なモジュール分割
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードをレビューしたところ、問題点は一切なく、例えば設定ファイルについては、元のコードから設定を変換し、デフォルト設定に変換した後、設定ファイルを読み込む際に、対応する設定ファイルが存在しない場合に自動的にデフォルト設定ファイルを生成することで、ユーザーの操作ミスを防いでいました。
要件：翻訳文の正体を翻訳する際に、翻訳効率を動的に計算し、残りの時間を予測して、関連情報をコンソールに出力しました。現在、文章の文字数を取得し、各行の翻訳時に現在の翻訳文字数、時間、100文字あたりの翻訳時間を適合計算しています。同時に、文章全体の翻訳残り時間を推定します。
コードが完了した後、新しい驚きを発見しました。翻訳効率の統計情報がリアルタイムで大量に表示されますが、無制限にスクロールダウンすることはありませんでした。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;原文を英語に翻訳中（合計 7163 文字）...
翻訳する必要がある行数が 53 行検出されました。
  [1/53] Stage1/6 [░░░░░░░░░░░░░░░░░░░░░░░░░] 1.9% 354 文字の翻訳...
    ✅ 完了 (3.1秒) | API呼び出し #1
    ✅ 完了 (1.5秒) | API呼び出し #2
    ✅ 完了 (0.9秒) | API呼び出し #3
    ✅ 完了 (0.2秒) | API呼び出し #4
    ✅ 完了 (1.0秒) | API呼び出し #5
    ✅ 完了 (1.0秒) | API呼び出し #6
    ✅ 完了 (0.2秒) | API呼び出し #7
    📊 進捗: 行の 13.2% (7/53) | 文字の 12.9% (925/7163) 114.6 文字/秒 📊
    ⚡ 効率：リアルタイム 76.4 | 平均 117.9 | 最近 109.0 | ステージ 113.6 文字/秒 📊
    🎯 正確度: 100.0% (7/7) | 残り: 46行 7 秒] 9.4% 110 文字の翻訳...
    ⏱️ 残りの推定時間: 55秒 | 予想完了時間: 00:10:19 8秒] 11.3% 114 文字の翻訳...
    💾 处理速度：3211.3 行/分钟 | 总用时：8秒] 13.2% 16 文字の翻訳...
  [8/53] Stage1/6 [███░░░░░░░░░░░░░░░░░░░░░░] 15.1% 166 文字の翻訳...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以前、プログラムを制御するコードはあまり書かれていませんでしたが、どのように実装されているのか知りたくて、コードを調べてみました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// キャッシュクリアと再表示（動的更新効果）
if translationCount &amp;gt; 1 {
   fmt.Print(&amp;quot;\033[6A\033[K&amp;quot;) // 上に 6 行移動し、内容をクリア
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;パフォーマンス統計メニュー&#34;&gt;パフォーマンス統計メニュー
&lt;/h3&gt;&lt;p&gt;新たに作成された&lt;strong&gt;パフォーマンス統計メニュー&lt;/strong&gt;は、私自身が設計したものでも、これほど完璧とは言えない。&lt;/p&gt;
&lt;p&gt;📊 パフォーマンス統計：
🔄 翻訳回数：360
⚡ キャッシュヒット率：1.4% (5/365)
⏱️ 平均翻訳時間：315.927234ms
📁 ファイル操作：73
❌ エラー回数：0&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データマイニング&lt;/li&gt;
&lt;li&gt;ディープラーニング&lt;/li&gt;
&lt;li&gt;ニューラルネットワーク&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;=== ブログ管理ツール ===&lt;/p&gt;
&lt;p&gt;🚀 コア機能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全ブログの処理をワンクリックで実行 (完全なブログ処理フロー)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;📝 コンテンツ管理
2. タグページを生成
3. アーティクルスラッグを生成
4. 記事を多言語バージョンに翻訳&lt;/p&gt;
&lt;p&gt;💾 キャッシュ管理
5. キャッシュの状態を確認
6. 全量翻訳キャッシュの生成
7. 翻訳キャッシュをクリア&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;プログラム終了&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>デスクトップPCを2.5Gネットカードにアップグレードし、ローカルエリアネットワークの接続速度を向上させる。</title>
        <link>https://ttf248.life/ja/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</guid>
        <description>&lt;p&gt;デスクトップPCのハードウェア三連発！前回の記事では、SSD PCIeアダプタについて触れたばかりですが、旧いSSDはどこへ行ったのでしょうか？もちろん無駄にはせず、壊れてしまっていたりするかもしれませんが、分解して新しく購入した「メカシシャ・クリエーター Mini-3765H」（一年前のモデル）にインストールしました。&lt;/p&gt;
&lt;p&gt;このマシンは、ハードウェアスペックも十分に強力で、2.5GデュアルLAN、PCIe4.0、Wi-Fi 6を搭載しています。&lt;/p&gt;
&lt;p&gt;最近引っ越しをして、部屋にルーターを個別に設置してネットワークを構築することができず、すべてのマシンが無線ネットワーク経由で接続されています。ASUSのマザーボードデスクトップPCの無線LANカードの性能はあまり良くなく、ルーターの無線アクセスポイント、ローカルエリア間のアップロード速度が遅いこともあり、マシン間での通信速度が不安定でした。そこで、2.5G NIC（ネットワークインターフェースカード）を購入し、デスクトップPCにインストールしました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これで、マザーボードのスロットはすべて埋まりました：グラフィックカード、無線LANカード、2.5G NIC、SSD PCIeアダプタ。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ネットワークの説明&#34;&gt;ネットワークの説明
&lt;/h2&gt;&lt;p&gt;両台の機器が元の無線LANに接続されているが、両台間をケーブルで直結し、両端に2.5G網カードを装着する。ケーブルで両台を直結する方法については、詳細は省略する（インターネット上には多くのチュートリアルがある）。ファイアウォールを必ず解除することに注意する。どちらか一方をゲートウェイとして使用すればよい。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[マシン1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;サブネットマスク: 255.255.255.0&amp;lt;br&amp;gt;デフォルトゲートウェイ: - &amp;lt;br&amp;gt;自動取得DNS] --&amp;gt;|ケーブル直結（2.5G）| B[マシン2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;サブネットマスク: 255.255.255.0&amp;lt;br&amp;gt;デフォルトゲートウェイ: 192.168.4.1&amp;lt;br&amp;gt;自動取得DNS];
    A --&amp;gt;|無線LANカード| Internet;
    B --&amp;gt;|無線LANカード| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二重網段測速&#34;&gt;二重網段測速
&lt;/h2&gt;&lt;h3 id=&#34;ルーティング局域網&#34;&gt;ルーティング局域網
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
接続先ホスト 192.168.3.237、ポート 5201 に接続
[  4] ローカル 192.168.3.122 ポート 1656 が 192.168.3.237 のポート 5201 に接続
[ ID] インターバル           転送     帯域幅
[  4]   0.00-1.00   秒  9.17 MB  76.7 Mbps
[  4]   1.00-2.00   秒  9.91 MB  83.2 Mbps
[  4]   2.00-3.00   秒  8.74 MB  73.3 Mbps
[  4]   3.00-4.00   秒 10.2 MB  85.2 Mbps
[  4]   4.00-5.00   秒  9.23 MB  77.1 Mbps
[  4]   5.00-6.00   秒  8.80 MB  73.9 Mbps
[  4]   6.00-7.01   秒  8.00 MB  66.8 Mbps
[  4]   7.01-8.00   秒  7.69 MB  64.9 Mbps
[  4]   8.00-9.01   秒  9.72 MB  81.1 Mbps
[  4]   9.01-10.01  秒  7.63 MB  63.6 Mbps
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] インターバル           転送     帯域幅
[  4]   0.00-10.01  秒 89.0 MB  74.6 Mbps                  送信元
[  4]   0.00-10.01  秒 89.0 MB  74.6 Mbps                  宛先

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;直連局域網&#34;&gt;直連局域網
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
接続 192.168.4.1 に、ポート 5201 を確立
[  4] ローカル 192.168.4.2 ポート 1524 が 192.168.4.1 のポート 5201 と接続
[ ID] インターバル           転送     帯域幅
[  4]   0.00-1.01   秒   178 MB   1.48 Gbps
[  4]   1.01-2.00   秒   204 MB   1.72 Gbps
[  4]   2.00-3.00   秒   214 MB   1.80 Gbps
[  4]   3.00-4.00   秒   229 MB   1.92 Gbps
[  4]   4.00-5.00   秒   202 MB   1.69 Gbps
[  4]   5.00-6.00   秒   213 MB   1.79 Gbps
[  4]   6.00-7.00   秒   230 MB   1.93 Gbps
[  4]   7.00-8.00   秒   192 MB   1.61 Gbps
[  4]   8.00-9.00   秒   220 MB   1.84 Gbps
[  4]   9.00-10.00  秒   230 MB   1.93 Gbps
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] インターバル           転送     帯域幅
[  4]   0.00-10.00  秒  2.06 GB   1.77 Gbps                  送信元
[  4]   0.00-10.00  秒  2.06 GB   1.77 Gbps                  宛先

iperf 終了
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考資料&#34;&gt;参考資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://wutongsuimeng.github.io/post/%E7%BB%99hugo%E6%B7%BB%E5%8A%A0mermaid%E6%94%AF%E6%8C%81/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HugoにMermaidを導入する方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Hugo モジュールカスタムテーマの修正：考え方の解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を調べてみたところ、サイトが何度もテーマを変更しており、毎回いくつかのカスタム設定を適用していた。そこで、カスタム設定の変更方法を記録しておく。私のGitHubには「even」というテーマがあり、短期間メンテナンスを行っていたが、最新版のHugoコンパイラへのアップグレードを強行した結果、互換性が失われ、最終的に「stack」テーマに切り替えてしまった。&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化について言及する際、NginxモジュールやIDEAプラグインなどを思い浮かべる人が多いでしょう。 通常は、私がいくつかのモジュールをアップロードすることで、私の独自のニーズを満たすことができます。 モジュールが広く受け入れられる理由は、十分に柔軟で、あまり労力をかけずに自分のニーズを満たせることです。 多くの場合は、大体同じように見えるものの、細部には常に違いがあるからです。 これはソフトウェアの複雑さを物語っており、技術的な複雑さだけでなく、ビジネス上の複雑さも含まれます。 大多数の場合、私たちが直面しているのはビジネスの複雑さです。 これこそが、「隔行如隔山」という俗語を最もよく表すものです。&lt;/p&gt;
&lt;p&gt;現在では、インターネット業界だけでなく、金融業界、さらには伝統的な製造業まで、情報化システムを使用して企業の生産と管理を支援しています。 同じ「休暇申請システム」でも、同じ業界の異なる企業間には違いがあります。&lt;/p&gt;
&lt;p&gt;そして&lt;code&gt;Hugo&lt;/code&gt;のモジュールは、皆さんがイメージするモジュールとは少し異なります。 機能単位で独自のニーズを満たすのではなく、ディレクトリ構造を主に使用して、共通の構造を認識します。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugoアーキテクチャ — Hugoのモジュール&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; 方式も引き続き使用できますが、本記事では推奨されません。 テーマを導入した場合、更新が発生するとメンテナンスが煩雑になり、個別の git リポジトリでテーマを管理する必要があるためです。&lt;/p&gt;
&lt;h2 id=&#34;テーマの修正ロジック-httpsstackjimmycaicomguidemodify-themehttpsstackjimmycaicomguidemodify-theme&#34;&gt;テーマの修正ロジック (&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stack.jimmycai.com/guide/modify-theme&lt;/a&gt;)
&lt;/h2&gt;&lt;p&gt;前面モジュール化の基礎概念を理解した上で、カスタムテーマを理解すると、それほど難しくありません。&lt;code&gt;hugo&lt;/code&gt; の現在のテーマも、複数の異なるモジュールを組み合わせて構成されています。あるモジュールを変更したい場合は、対応するテンプレートファイルを検索し、修正すればOKです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; 公式ドキュメントからの抜粋：&lt;/p&gt;
&lt;p&gt;この方法を使用すると、&lt;code&gt;themes&lt;/code&gt; ディレクトリの下にファイルは存在しません。テーマを修正するには、変更したいファイルを同じディレクトリにある &lt;code&gt;layouts&lt;/code&gt; ディレクトリにコピーする必要があります。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; ファイルを変更する場合は、それを &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; にコピーし、そこから修正します（テーマのリポジトリからコードをコピー）。&lt;code&gt;assets&lt;/code&gt; と &lt;code&gt;static&lt;/code&gt; ディレクトリについても同様です。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルの場所を見つける方法&#34;&gt;テンプレートファイルの場所を見つける方法
&lt;/h2&gt;&lt;h3 id=&#34;従来の思路&#34;&gt;従来の思路
&lt;/h3&gt;&lt;p&gt;テーマのソースファイルを確認し、テーマのデザイン思想を理解し、対応するテンプレートファイルを修正します。&lt;/p&gt;
&lt;h3 id=&#34;蛮力的なアプローチ&#34;&gt;蛮力的なアプローチ
&lt;/h3&gt;&lt;p&gt;私はフロントエンドのコードがあまり理解していないため、時には手動で対応することがあります。例えば、関連するページをブラウザで開き、修正したい箇所を見つけ、&lt;code&gt;要素を検査&lt;/code&gt;を使ってCSS名（&lt;code&gt;css name&lt;/code&gt;）を特定し、ソースコード内で検索して該当ファイルを抽出し、それをサイトディレクトリにコピーして変更します。&lt;/p&gt;
&lt;h2 id=&#34;スニppets&#34;&gt;スニppets
&lt;/h2&gt;&lt;p&gt;公式サイトでデフォルトのファイルが用意されており、カスタマイズが必要な箇所は、複数のファイルに分割して &lt;code&gt;custom.scss&lt;/code&gt; ファイルをインポートすることで、よりスタイルの管理を効率化できます。
&lt;img src=&#34;https://ttf248.life/p/hugo-module-customizing-themes-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;修正内容まとめ6時間&#34;&gt;修正内容まとめ（6時間）
&lt;/h2&gt;&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な変更点を以下に列挙します。本サイトで行った修正内容としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定などがあり、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応できました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを引き継ぎ、中国語に最適化&lt;/li&gt;
&lt;li&gt;首页：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;首页：記事に概要プレビュー（手間のかかる方法で実現）を追加&lt;/li&gt;
&lt;li&gt;スクロールバー：スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;コードブロック：&lt;code&gt;highlight.js&lt;/code&gt; を導入し、コードブロックのスタイルを美化&lt;/li&gt;
&lt;li&gt;文章詳細：一部コンテンツが転載であるため、原作者情報と元のリンクを表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：トップのカテゴリ画像にテーマ自带の色付きマスクを削除し、元の画像を表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：年単位でのカテゴリ分類の統計表示パネルを追加&lt;/li&gt;
&lt;li&gt;アーカイブページ：2列表示レイアウト
&lt;code&gt;stack&lt;/code&gt; テーマのコンポーネント再利用率が高いため、首页の記事への概要プレビュー追加に時間がかかりました。対応するコンポーネントを変更したことで、記事の詳細ページの変更も引き起こされ、正文が重複して表示される問題が発生しました。&lt;code&gt;golang テンプレート&lt;/code&gt; の構文はあまり馴染みがないため、多くの時間を費やし、コンポーネント間のパラメータ伝達を解決することができませんでした。最終的には、巧みに手段として、ホームページに独自に &lt;code&gt;JavaScript&lt;/code&gt; スクリプトを導入し、カスタムの特殊変数を通じて概要プレビューを実現しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;コード再利用率が高すぎる場合も問題であり、変更を加えることで他の場所にも影響が及ぶ可能性があるため、テーマを変更する際には注意が必要です。元のロジックを壊さないようにしてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;このイケメンさんの修正はより洗練されています：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;
&lt;del&gt;本サイトではシンプルな形で &lt;code&gt;Waline&lt;/code&gt; 评论システムを導入しており、&lt;code&gt;stack&lt;/code&gt; テーマがデフォルトで &lt;code&gt;Waline&lt;/code&gt; をサポートしているため、&lt;code&gt;config.toml&lt;/code&gt; に設定するだけです。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ホームページへのメール連絡の推奨、本サイトではコメント欄は開放していません&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Linuxシステムベンチマークテスト</title>
        <link>https://ttf248.life/ja/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;Windows 平台上有鲁大师（娱乐大师），不能说数据很准，但总归有个参考，当然也有其他的专业跑分软件。到了 Linux 系统，好像一直没遇到特别合适的跑分软件。&lt;/p&gt;
&lt;p&gt;Sysbench 是一款多功能的基准测试工具，可用于测试 CPU、内存、文件 I/O、线程性能等。您可以使用 Sysbench 来执行各种性能测试任务。&lt;/p&gt;
&lt;p&gt;手头上刚好有三台机器用于测试：机械师 mini 本地小主机、阿里云 dev 开发云服务器、华为云开发服务器。&lt;/p&gt;
&lt;h2 id=&#34;sysbench-のインストール&#34;&gt;Sysbench のインストール
&lt;/h2&gt;&lt;p&gt;ほとんどの Linux ディストリビューションでは、パッケージマネージャを使用して Sysbench をインストールできます。例えば、CentOS 8 では、次のコマンドを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbenchの使用例&#34;&gt;Sysbenchの使用例
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU性能のテスト: &lt;code&gt;sysbench --test=cpu run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;メモリ読み取り性能のテスト: &lt;code&gt;sysbench --test=memory run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ファイルI/O性能のテスト:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッド性能のテスト: &lt;code&gt;sysbench --test=threads --num-threads=4 run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MySQLデータベース性能のテスト（最大接続数を調整する必要あり）：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ランニングデータレポート&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;h2 id=&#34;実行データレポート&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34; style=&#34;width:421px;&#34; class=&#34;column-headers-background&#34;&gt;B&lt;/th&gt;&lt;th id=&#34;0C2&#34; style=&#34;width:398px;&#34; class=&#34;column-headers-background&#34;&gt;C&lt;/th&gt;&lt;th id=&#34;0C3&#34; style=&#34;width:422px;&#34; class=&#34;column-headers-background&#34;&gt;D&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R0&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;ローカル機械師&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;华为云&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム構成&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム情報&lt;br&gt;  オペレーティングシステム              Ubuntu 23.04&lt;br&gt;  カーネル                        Linux 6.2.0-36-generic x86_64&lt;br&gt;  モデル                         Machenike Machenike DT Computer&lt;br&gt;  マザーボード                   Machenike Machenike DT Computer&lt;br&gt;  BIOS                          American Megatrends International, LLC.&lt;br&gt;DB19V012&lt;br&gt;&lt;br&gt;CPU情報&lt;br&gt;  名前                          Intel Core i7-12650H&lt;br&gt;  トポロジー                      1 プロセッサ、10 コア、16 スレッド&lt;br&gt;  識別子                    GenuineIntel Family 6 Model 154 Stepping 3&lt;br&gt;  ベース周波数                4.60 GHz&lt;br&gt;  L1 命令キャッシュ          32.0 KB x 8&lt;br&gt;  L1 データキャッシュ                 48.0 KB x 8&lt;br&gt;  L2 キャッシュ                      1.25 MB x 2&lt;br&gt;  L3 キャッシュ                      24.0 MB&lt;br&gt;&lt;br&gt;メモリ情報&lt;br&gt;  サイズ                          62.6 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム情報&lt;br&gt;  オペレーティングシステム              CentOS Stream 8&lt;br&gt;  カーネル                        Linux 4.18.0-513.el8.x86_64 x86_64&lt;br&gt;  モデル                         Alibaba Cloud Alibaba Cloud ECS&lt;br&gt;  マザーボード                   N/A&lt;br&gt;  BIOS                          SeaBIOS 449e491&lt;br&gt;&lt;br&gt;CPU情報&lt;br&gt;  名前                          Intel(R) Xeon(R) Platinum&lt;br&gt;  トポロジー                      1 プロセッサ、1 コア、2 スレッド&lt;br&gt;  識別子                    GenuineIntel Family 6 Model 85 Stepping 4&lt;br&gt;  ベース周波数                2.50 GHz&lt;br&gt;  L1 命令キャッシュ          32.0 KB&lt;br&gt;  L1 データキャッシュ                 32.0 KB&lt;br&gt;  L2 キャッシュ                      1.00 MB&lt;br&gt;  L3 キャッシュ                      33.0 MB&lt;br&gt;&lt;br&gt;メモリ情報&lt;br&gt;  サイズ                          1.65 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム情報&lt;br&gt;  オペレーティングシステム              Ubuntu 22.04.1 LTS&lt;br&gt;  カーネル                        Linux 5. - 64 GB
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;実行データレポート
system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;テストの実行方法：指定されたオプションで&lt;br&gt;スレッド数: 1&lt;br&gt;乱数ジェネレーターを現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限: 10000&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数: 4032.48&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間: 10.0004秒&lt;br&gt;    イベントの総数: 40330&lt;br&gt;&lt;br&gt;遅延 (ms):&lt;br&gt;         最小値: 0.25&lt;br&gt;         平均値: 0.25&lt;br&gt;         最大値: 0.73&lt;br&gt;         95パーセンタイル: 0.25&lt;br&gt;         合計: 9997.55&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差): 40330.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9975/0.00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;データマイニング&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ディープラーニング&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ニューラルネットワーク - 実行データレポート
system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;テストの実行方法：指定されたオプションで&lt;br&gt;スレッド数: 1&lt;br&gt;乱数ジェネレーターを現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限: 10000&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数: 4032.48&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間: 10.0004秒&lt;br&gt;    合計イベント数: 40330&lt;br&gt;&lt;br&gt;遅延 (ms):&lt;br&gt;         最小: 0.25&lt;br&gt;         平均: 0.25&lt;br&gt;         最大: 0.73&lt;br&gt;         95パーセンタイル: 0.25&lt;br&gt;         合計: 9997.55&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差): 40330.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9975/0.00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sysbench 1.0.20 (system LuaJIT 2.1.0-beta3を使用)&lt;br&gt;&lt;br&gt;テストの実行方法：指定されたオプションで&lt;br&gt;スレッド数: 1&lt;br&gt;乱数ジェネレーターを現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限: 10000&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数: 1062.51&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間: 10.0008秒&lt;br&gt;    合計イベント数: 10628&lt;br&gt;&lt;br&gt;遅延 (ms):&lt;br&gt;         最小: 0.91&lt;br&gt;         平均: 0.94&lt;br&gt;         最大: 22.84&lt;br&gt;         95パーセンタイル: 1.06&lt;br&gt;         合計: 9993.46&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差): 10628.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9935/0.00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sysbench 1.0.20 (system LuaJIT 2.1.0-beta3を使用)&lt;br&gt;&lt;br&gt;テストの実行方法：指定されたオプションで&lt;br&gt;スレッド数: 1&lt;br&gt;乱数ジェネレーターを現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限: 10000&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数: 1125.56&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間: 10.0005秒&lt;br&gt;    合計イベント数: 11258&lt;br&gt;&lt;br&gt;遅延 (ms):&lt;br&gt;         最小: 0.86&lt;br&gt;         平均: 0.89&lt;br&gt;         最大: 1.70&lt;br&gt;         95パーセンタイル: 0.99&lt;br&gt;         合計: 9995.40&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差): 11258.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9954/0.00&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;メモリテストを実行するオプション：指定されたオプションで&lt;br&gt;ブロックサイズ: 1KiB&lt;br&gt;合計サイズ: 102400MiB&lt;br&gt;操作: 書き込み&lt;br&gt;範囲: グローバル&lt;br&gt;&lt;br&gt;ワーカーのスレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;総イベント数: 101993199 (10198146.52/秒)&lt;br&gt;&amp;lt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ランダム数生成レポート&#34;&gt;ランダム数生成レポート
&lt;/h2&gt;&lt;p&gt;現在の時刻からの乱数ジェネレーター&lt;br&gt;&lt;br&gt;&lt;br&gt;次のオプションでメモリ速度テストを実行中:&lt;br&gt;  ブロックサイズ：1KiB&lt;br&gt;  合計サイズ：102400MiB&lt;br&gt;  操作：書き込み&lt;br&gt;  範囲：グローバル&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;総操作数：48418803 (1秒あたり4841004.79)&lt;br&gt;&lt;br&gt;転送されたデータ：47283.99 MiB (1秒あたり4727.54 MiB)&lt;br&gt;&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間：                          10.0001s&lt;br&gt;    イベント総数：              48418803&lt;br&gt;&lt;br&gt;レイテンシ（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.00&lt;br&gt;         最大：                                   25.26&lt;br&gt;         95パーセンタイル：                        0.00&lt;br&gt;         合計：                                 4578.95&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント（平均/標準偏差）：           48418803.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   4.5789/0.00&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ランニングテストで次のオプションを使用中：&lt;br&gt;スレッド数：1&lt;br&gt;現在の時刻からの乱数ジェネレーターの初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ：（なし）&lt;br&gt;128ファイル、各16MiB&lt;br&gt;2GiBの合計ファイルサイズ&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IOリクエスト数：0&lt;br&gt;組み合わせてランダムIOテストの読み取り/書き込み比率：1.50&lt;br&gt;定期的なFSYNCが有効になっており、各100リクエストごとにfsync()を呼び出しています。&lt;br&gt;テストの最後にfsync()を呼び出すことが有効になっています。&lt;br&gt;同期I/Oモードを使用&lt;br&gt;ランダムな読み取り/書き込みテストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作：&lt;br&gt;    読み取り/秒：                      3373.41&lt;br&gt;    書き込み/秒：                     2248.94&lt;br&gt;    fsync/秒：                     7201.80&lt;br&gt;&lt;br&gt;スループット：&lt;br&gt;    読み取り、MiB/s：                  52.71&lt;br&gt;    書き込み、MiB/s：               35.14&lt;br&gt;&lt;br&gt;一般的な統計：&lt;br&gt;    合計時間：                          10.0127s&lt;br&gt;    イベント総数：              128288&lt;br&gt;&lt;br&gt;レイテンシ（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.08&lt;br&gt;         最大：                                    5.14&lt;br&gt;         95パーセンタイル：                        0.34&lt;br&gt;         合計：                                 9977.78&lt;br&gt;&lt;br&gt;スレッドの公平性：&lt;br&gt;    イベント（平均/標準偏差）：           128288.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   9.9778/0.00&lt;/p&gt;
&lt;p&gt;スループット：&lt;br&gt;    読み取り、MiB/s：                  52.71&lt;br&gt;    書き込み、MiB/s：               35.14&lt;br&gt;&lt;br&gt;一般的な統計：&lt;br&gt;    合計時間：                          10.0127s&lt;br&gt;    イベント総数：              128288&lt;br&gt;&lt;br&gt;レイテンシ（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.08&lt;br&gt;         最大：                                    5.14&lt;br&gt;         95パーセンタイル：                        0.34&lt;br&gt;         合計：                                 9977.78&lt;br&gt;&lt;br&gt;スレッドの公平性：&lt;br&gt;    イベント（平均/標準 ## ランダム数生成データレポート
現在の時刻からの乱数ジェネレーター&lt;br&gt;&lt;br&gt;&lt;br&gt;次のオプションでメモリ速度テストを実行中:&lt;br&gt;  ブロックサイズ：1KiB&lt;br&gt;  合計サイズ：102400MiB&lt;br&gt;  操作：書き込み&lt;br&gt;  範囲：グローバル&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;総操作数：48418803 (1秒あたり4841004.79)&lt;br&gt;&lt;br&gt;転送されたデータ：47283.99 MiB (1秒あたり4727.54 MiB)&lt;br&gt;&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間：                          10.0001s&lt;br&gt;    イベント総数：              48418803&lt;br&gt;&lt;br&gt;遅延（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.00&lt;br&gt;         最大：                                   25.26&lt;br&gt;         95パーセンタイル：                        0.00&lt;br&gt;         合計：                                 4578.95&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント（平均/標準偏差）：           48418803.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   4.5789/0.00&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;テストオプションで実行中:&lt;br&gt;スレッド数：1&lt;br&gt;現在の時刻からの乱数ジェネレーターの初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ：（なし）&lt;br&gt;128ファイル、各16MiB&lt;br&gt;2GiBの合計ファイルサイズ&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IOリクエスト数：0&lt;br&gt;組み合わせてランダムIOテストの読み取り/書き込み比率：1.50&lt;br&gt;定期的なFSYNCが有効になり、各100リクエストごとにfsync()が呼び出されます。&lt;br&gt;テストの終了時にfsync()を呼び出す。有効になっています。&lt;br&gt;同期I/Oモードを使用&lt;br&gt;ランダムな読み取り/書き込みテストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み取り/秒：                      3373.41&lt;br&gt;    書き込み/秒：                     2248.94&lt;br&gt;    fsync/秒：                     7201.80&lt;br&gt;&lt;br&gt;スループット:&lt;br&gt;    読み取り、MiB/s：                  52.71&lt;br&gt;    書き込み、MiB/s：               35.14&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間：                          10.0127s&lt;br&gt;    イベント総数：              128288&lt;br&gt;&lt;br&gt;遅延（ms）：&lt;br&gt;         最小：                                    0.00&lt;br&gt;         平均：                                    0.08&lt;br&gt;         最大：                                    5.14&lt;br&gt;         95パーセンタイル：                        0.34&lt;br&gt;         合計：                                 9977.78&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント（平均/標準偏差）：           128288.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   9.9778/0.00&lt;/p&gt;
&lt;p&gt;スループット：
読み取り、MiB/s： 52.71
書き込み、MiB/s： 35.14&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ディスク: 2147483648 バイトを 1.81 秒で書き込みました (1129.59 MiB/秒)。&lt;br&gt;&lt;br&gt;テストオプションで実行中:&lt;br&gt;スレッド数：1&lt;br&gt;現在の時刻からの乱数ジェネレーターの初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ：（なし）&lt;br&gt;128ファイル、各16MiB&lt;br&gt;2GiBの合計ファイルサイズ&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IOリクエスト数：0&lt;br&gt;組み合わせてランダムIOテストの読み取り/書き込み比率：1.&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート-1&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;enabled, 各100リクエストごとにfsync()を呼び出す。&lt;br&gt;テストの終了時にfsync()を呼び出し、有効化。&lt;br&gt;同期I/Oモードを使用中&lt;br&gt;ランダムなr/wテストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:                      1593.12&lt;br&gt;    書き込み/秒:                     1062.08&lt;br&gt;    fsync/秒:                     3406.64&lt;br&gt;&lt;br&gt;帯域幅:&lt;br&gt;    読み取り (MiB/s):                  24.89&lt;br&gt;    書き込み (MiB/s):               16.60&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間:                          10.0164秒&lt;br&gt;    イベント総数:              60600&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.00&lt;br&gt;         平均:                                    0.16&lt;br&gt;         最大:                                   31.32&lt;br&gt;         95パーセンタイル:                        0.54&lt;br&gt;         合計:                                 9956.30&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差):           60600.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   9.9563/0.00&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2147483648 バイトを 18.29 秒で書き込みました (111.98 MiB/秒)。&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行中:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数ジェネレーターを初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加のファイルオープンフラグ:(なし)&lt;br&gt;128 ファイル、各 16MiB&lt;br&gt;2GiB の合計ファイルサイズ&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IO リクエスト数: 0&lt;br&gt;ランダムな IO テストの読み取り/書き込み比率: 1.50&lt;br&gt;定期的な FS INC を有効にし、各 100 リクエストごとに fsync() を呼び出す。&lt;br&gt;テストの終了時に fsync() を呼び出し、有効化。&lt;br&gt;同期 I/O モードを使用中&lt;br&gt;ランダムな r/w テストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:                      1665.88&lt;br&gt;    書き込み/秒:                     1110.59&lt;br&gt;    fsync/秒:                     3563.77&lt;br&gt;&lt;br&gt;帯域幅:&lt;br&gt;    読み取り (MiB/s):                  26.03&lt;br&gt;    書き込み (MiB/s):               17.35&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間:                          10.0112秒&lt;br&gt;    イベント総数:              63355&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.00&lt;br&gt;         平均:                                    0.16&lt;br&gt;         最大:                                  205.01&lt;br&gt;         95パーセンタイル:                        0.78&lt;br&gt;         合計:                                 9972.64&lt;br&gt;&lt;br&gt;スレッドの公平性:&lt;br&gt;    イベント (平均/標準偏差):           63355.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   9.9726/0.00&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;スレッド数: 4
初期化されたランダムな数値ジェネレーターから現在の時刻を初期化&amp;hellip;&lt;br&gt;&lt;br&gt;ワーカースレッドが開始されました!&lt;br&gt;&lt;br&gt;&lt;br&gt;一般的な統計:&lt;br&gt;    合計時間:                          10.0002秒&lt;br&gt;    イベント総数:              197956&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.16&lt;br&gt;         平均:                                    0.20&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;合計: 40050.41&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;  イベント (平均/標準偏差): 4590.0000/94.36&lt;br&gt;  実行時間 (平均/標準偏差): 10.0126/0.00&lt;/p&gt;
&lt;p&gt;テスト実行時のオプション:
スレッド数: 4
現在の時刻から乱数生成器を初期化
&lt;br&gt;&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;
スレッド起動!&lt;br&gt;&lt;br&gt;&lt;br&gt;
一般統計:
合計時間: 10.0004秒
合計イベント数: 28536&lt;br&gt;&lt;br&gt;遅延 (ms):
最小: 0.23
平均: 1.40
最大: 3.56
95パーセンタイル: 1.47
合計: 39975.16&lt;br&gt;&lt;br&gt;スレッド公平性:
イベント (平均/標準偏差): 7134.0000/39.87
実行時間 (平均/標準偏差): 9.9938/0.01&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;ChatGPTは依然として優れたものですが、以前習得していたMarkdownで完全にテーブルを作成できず、テーブルとして表示すると効果が著しく低下します。カスタムテーマによってページの最大幅が制限されるため、幅を百分率制に調整しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡単な方法としては、TablesGeneratorのようなオンラインツールを使用してHTMLテーブルを生成する方法がありますが（内容が複雑だと不向きです）。&lt;/li&gt;
&lt;li&gt;または、Googleドキュメントで作成し、HTMLドキュメントとしてダウンロードして保存し、ブログに直接コピーする方法を採用しました（シンプルかつ直接的です）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;configの設定でunsafeな設定項目を有効にし、ページごとの幅設定を個別に指定するようにしてください。Hugoでは、ページごとに個別に幅を設定できます。これは、ページのFront Matterにカスタムパラメータを追加することで実現できます。以下はその例です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MarkdownファイルのFront Matterセクション（通常はファイルの冒頭部分）にカスタムパラメータ（例えば&lt;code&gt;custom_width&lt;/code&gt;）を追加します：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;私のページ&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 幅を800ピクセルに設定
---

本文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Hugoのテーマで、対応する単一ページテンプレートファイル（例えば&lt;code&gt;layouts/_default/single.html&lt;/code&gt;）を見つけてください。&lt;/li&gt;
&lt;li&gt;単一ページテンプレート内で、Front Matterに&lt;code&gt;custom_width&lt;/code&gt;パラメータが存在するか確認し、それを適切なHTML要素（例えば&lt;code&gt;div&lt;/code&gt;）に適用します：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、内联スタイル（&lt;code&gt;style&lt;/code&gt;属性）を使用して&lt;code&gt;div&lt;/code&gt;要素の&lt;code&gt;max-width&lt;/code&gt;属性を設定し、&lt;code&gt;custom_width&lt;/code&gt;パラメータが指定されていない場合、幅をデフォルトで100%にしています。&lt;code&gt;margin: 0 auto;&lt;/code&gt;は&lt;code&gt;div&lt;/code&gt;要素を中央揃えにします。&lt;/p&gt;
&lt;p&gt;実際のアプリケーションでは、テーマの構造やCSSスタイルの詳細に応じて、上記の例を調整する必要がある場合があります。スタイルを調整する際には、テーマの一貫性と可読性を維持するようにしてください。&lt;/p&gt;
&lt;p&gt;最後に、使用しているテーマが若干異なるため、サイト全体でカスタムCSSの設定も調整しました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ブログIDE環境と雑感</title>
        <link>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;本記事では、Markdownの基本的な概念と、さまざまなソフトウェアでの利用について紹介しています。VSCodeをIDEとして推奨し、おすすめプラグインも列挙しています。作者はHexoからHugoへの移行経験を共有し、Hugoの柔軟性とカスタマイズ性を強調しています。最後に、新しい技術を迅速に習得するためのヒントや、Hugoテーマのスタイルが更新されない問題を解決する簡単なコツを紹介します。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;軽量マークアップ言語であり、人間が読み書きしやすいプレーンテキスト形式でドキュメントを作成することを可能にする。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;markdown-1&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;詳細なMarkdown構文については、本文で別途詳述しません。電子書籍を推奨します。&lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらをクリック&lt;/a&gt;
市場には多くのソフトウェアがMDを記述方法としてサポートしています。CSDNのブログシステムはMD構文に対応したオンラインエディターを導入しており、初回使用時にデフォルトでMD構文に関する紹介記事が表示されます。筆記者自身もそれなりに有用だと感じています。印象笔记では2018年にMDノートのサポートを追加し、ショートカットバーには様々なMDマークアップのオプションがあり、普通の文章を編集するのとほぼ同じように使えます。全体的なインタラクションフローは初心者にもフレンドリーです&lt;/p&gt;
&lt;h3 id=&#34;ide-推奨&#34;&gt;IDE 推奨
&lt;/h3&gt;&lt;p&gt;この記事を書いているのは2020年であり、VS Code は当然のことながら皆知っているでしょう。なぜなら、Git Page をブログシステムとして構築することを考える業界人は少なくないからです。数年前には、Sublime や Atom も優れた選択肢でした。オープンソースコミュニティの推進により 2 年間にわたって発展し、現在では VS Code が初心者にとっての最初の選択肢となっています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Microsoft の巨頭とオープンソースコミュニティの関係は、対立状態から成功裏に蜜月期に入りました：オープンソースを抱擁しています。筆者所在の会社も最近 2 年間にわたり積極的に Java エコシステムを取り入れており、ビジネス開発においては、現在国内で Java エコシステムはまさに「魅力的」です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vscodeプラグインのおすすめ&#34;&gt;VSCodeプラグインのおすすめ
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-07-17.png&#34;
	width=&#34;310&#34;
	height=&#34;306&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;プラグインリスト&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;プラグインにはそれぞれReadmeがあり、基本的な使い方や主要な機能が紹介されています。一部のプラグイン作者は、動的な効果を表示する画像も提供しています。
&lt;code&gt;Paste Image&lt;/code&gt;とhugoの画像プラグイン方式を組み合わせることで、非常に簡単に画像を挿入できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ショートカットキーを忘れてしまった場合、VSCodeのショートカットキー管理メニューを開き、「md」で検索して数回確認しましょう。Readmeをもう一度見直すのも良いでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo
&lt;/h2&gt;&lt;p&gt;筆者は&lt;code&gt;hexo&lt;/code&gt;から&lt;code&gt;hugo&lt;/code&gt;に切り替えた。愛折衝は私の天性であり、結局は忍耐強く静かに記事を書くことができないのだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugoは、個別のフォルダに画像とmdドキュメントを置くことをサポートする。&lt;/li&gt;
&lt;li&gt;Academicテーマのデザイン上では、様々な種類の文章スタイルをサポートしている。&lt;/li&gt;
&lt;li&gt;様々な便利なカスタム拡張機能がある。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学術&#34;&gt;学術
&lt;/h2&gt;&lt;p&gt;公式サイトではデフォルトで&lt;code&gt;exampleSite&lt;/code&gt;を使用し、メニューのインポートには&lt;code&gt;#component&lt;/code&gt;形式が推奨されます。URLのパターンは、ナビゲーションバーをクリックすることで単一ページのジャンプを実現し、ホームページでのスクロールを回避します（これは純粋な個人的な好みです）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタイル：ノート、講演、電子書籍&lt;/li&gt;
&lt;li&gt;柔軟性：全体的なスタイルのカスタマイズ、カスタムCSSスタイルの適用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このテーマは、中国語のサポートがまだ十分ではありません。主に視覚的な観点からすると、フォントサイズが中国語の読書習慣に合っていません。Hexoの開発者はほとんどが中国人であり、この点ではHugoよりも優れています。しかし、自分で手を加えて、ブラウザで要素を検証することで、要素を見つけ出し、変更するCSSスタイルの名前を知ることができます。サイドバーで&lt;strong&gt;Insert Style Rule Below&lt;/strong&gt;をクリックすると、ネストされた多層構造のCSSでも簡単にノード名を取得できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムCSSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/#add-scripts-js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムJSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テーマに組み込まれている構文強調表示の設定については、&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式ドキュメント&lt;/a&gt;を参照してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;子供たちがまた文句を言っているようだ。「最初から最後まで、曖昧で、細かいこと何も言ってない」と。&lt;/p&gt;
&lt;p&gt;私はこう言うつもりだ。以下のものがあれば十分だ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式マニュアル&lt;/li&gt;
&lt;li&gt;プラグインの説明書&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい技術をすぐに使いこなすには、まず公式サイトのドキュメントを読むことを推奨する。完璧に理解しようとする必要はないし、一度読んで理解する必要もない。少なくとも、ある程度の知識は持っておくべきだ。検索エンジンで見つかる結果が、必ずしも最新版と一致しない。誤解を招く可能性もある。新しい本も同様だ。まず目次を見て、著者が何を説明するのか把握する。場合によっては、序文を読むのが良い。特に海外の著作を翻訳した際に、翻訳者の序文は書籍と核心的な内容をカバーしていることがある。&lt;/p&gt;
&lt;h2 id=&#34;エッグ卵&#34;&gt;エッグ（卵）
&lt;/h2&gt;&lt;p&gt;Hugo Academicの組み込みスタイルを切り替え、サイトに公開後、アクセス時にスタイルが変更されない。賢い仲間たちはすでに解決策を見つけており、「ブラウザキャッシュをクリア」することで問題が解決する。私のような機転の利いた者：「F12開発者ツール」で&lt;code&gt;network&lt;/code&gt;タブを選択し、&lt;code&gt;disable cache&lt;/code&gt;オプションをチェックしてリフレッシュすれば、完璧！
&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
