<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hugo on 向叔の手帳</title>
        <link>https://ttf248.life/ja/tags/hugo/</link>
        <description>Recent content in Hugo on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Mon, 02 Jun 2025 19:00:25 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/tags/hugo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Claude4のリリース、開発を試す：hugoタグ、超リンク翻訳アシスタント</title>
        <link>https://ttf248.life/ja/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/claude-4-release-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;本サイトはHugoで開発されていますが、筆者自身は常に中国語のタイトルを使用しており、その結果、生成される記事の超リンクが使いにくい状態でした。つまり、送信する際に、中国語の文字が超リンク内で%E4%BD%A0%E5%A5%BDのような形式にエスケープされてしまうため、見た目が良くありません。設定でslugを設定することで解決できますが、毎回手動で設定する必要があり、非常に面倒でした。&lt;/p&gt;
&lt;p&gt;そこで、Claude4を使って翻訳アシスタントを開発し、中国語のタイトルを自動的に英語のslugに変換し、記事の中に超リンクを追加することを試みました。これにより、手動での設定を回避できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Claude4はマジで最高！文脈理解能力が大幅に向上し、複雑なタスクの処理効率も飛躍的に向上しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;プロジェクトアドレス&#34;&gt;プロジェクトアドレス
&lt;/h2&gt;&lt;p&gt;国内プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
国外プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;コードの実装&#34;&gt;コードの実装
&lt;/h2&gt;&lt;p&gt;まず、実装の思路について説明します。すべての文章をスキャンし、タグ情報と記事タイトルを抽出した後、ローカルの大規模言語モデル（例：gemma-3-12b-it）を呼び出して翻訳します。&lt;/p&gt;
&lt;p&gt;実際の開発においては、前世代の大規模言語モデルと比較して、&lt;code&gt;Claude4&lt;/code&gt; はいくつかの顕著な点を発揮しました。機能要件が多いため、&lt;code&gt;Claude4&lt;/code&gt; はインタラクティブメニューを自動的に設計し、さまざまな使用シナリオを考慮しました。例えば、タグ処理に関しては、&lt;code&gt;Claude4&lt;/code&gt; はタグの統計と分析だけでなく、分類統計もサポートし、さらに&lt;strong&gt;ラベルなしの記事&lt;/strong&gt;を検出することも可能です。また、プレビュー機能やタグページ生成機能も提供しています。&lt;/p&gt;
&lt;p&gt;ローカルの大規模言語モデルとの連携、翻訳キャッシュの追加、大規模なコードのリファクタリングなど、&lt;code&gt;Claude4&lt;/code&gt; はすべて一度に完了し、ほとんど問題が発生しませんでした。 プロジェクトの規模は小さいものの、多くの小さな機能を含んでいます。これまで開発プロセスにおいて、大規模モデルはしばしば前の内容を忘れてしまうことがありましたが、今回の &lt;code&gt;Claude4&lt;/code&gt; は非常に優れたパフォーマンスを示し、&lt;strong&gt;文脈の消失がほとんど見られませんでした&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要するに、知能レベルが向上しており、今後の開発作業では &lt;code&gt;Claude4&lt;/code&gt; をより多く利用し、日常的なコーディングの主力モデルとして活用していく予定です。&lt;/p&gt;
&lt;h2 id=&#34;翻訳キャッシュ&#34;&gt;翻訳キャッシュ
&lt;/h2&gt;&lt;p&gt;この注文に関する説明では、大規模モデルの呼び出し回数を減らすだけでなく、実際に12Bモデルをローカルで実行すると効率が良く、時間ロスもありません。しかし、毎回大規模モデルを呼び出すと、やはり少し遅くなります。また、文章のリンクを固定するために、全量更新を実行した場合、文章のタイトルが非常に長い場合があり、稀に2回の翻訳結果が異なり、リンクが変わってしまうという状況が発生します。これは非常に困ります。&lt;/p&gt;
&lt;h2 id=&#34;機能最適化&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;プロジェクト全体を &lt;code&gt;Claude4&lt;/code&gt; に委ね、最適化の余地を分析し、以下の提案を得ました：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;外部化の設定 - 可保守性と柔軟性の向上
構造化ログ - 問題の特定と監視の容易化
パフォーマンスモニタリング - システムの状態把握
ユーザーエクスペリエンス - プログレスバーなどの視覚的フィードバック
エラー処理 - より洗練された例外処理メカニズム
コード整理 - 明確なモジュール分割
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードをレビューし、問題点は一切ありませんでした。例えば、設定ファイルは、既存のコードからデフォルト設定に変換され、設定ファイルを読み込む際に、対応する設定ファイルが存在しない場合に自動的にデフォルト設定ファイルが生成されるため、ユーザーのエラーを防いでいます。 要件：原文を翻訳する際に、現在の翻訳効率を動的に計算し、残りの時間を予測し、関連情報をコンソールに出力します。現在、文章の文字数を取得し、各行の翻訳時に現在の翻訳文字数、時間、100文字あたりの翻訳時間の適合計算を行い、同時に文章全体の残りの翻訳推定時間を計算します。&lt;/p&gt;
&lt;p&gt;コードが完了しましたが、効果はそれほど良くありません。そこで、AIに新しい設計案を提案してもらいます：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;複数の効率計算方法を提供：リアルタイム効率、平均効率、スライディングウィンドウ効率&lt;/li&gt;
&lt;li&gt;表示方法の改善：プログレスバー、セクションごとの統計、動的更新&lt;/li&gt;
&lt;li&gt;より役立つ指標を追加：API呼び出し回数、成功率など&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードが完了した後、翻訳効率の統計情報がリアルタイムで大量に表示されることを見つけましたが、スクロールを無効にする機能はありませんでした。&lt;/p&gt;
&lt;h2 id=&#34;機能最適化-1&#34;&gt;機能最適化
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;原文を英語に翻訳（合計7163文字）...
53行の翻訳が必要と検出
  [1/53] Stage1/6 [░░░░░░░░░░░░░░░░░░░░░░░░░] 1.9% 354文字を翻訳中...
    ✅完了 (3.1s) | API呼び出し #1
    ✅完了 (1.5s) | API呼び出し #2
    ✅完了 (0.9s) | API呼び出し #3
    ✅完了 (0.2s) | API呼び出し #4
    ✅完了 (1.0s) | API呼び出し #5
    ✅完了 (1.0s) | API呼び出し #6
    ✅完了 (0.2s) | API呼び出し #7
    📊進捗: 行 13.2% (7/53) | 文字 12.9% (925/7163) 114.6文字/秒 📊
    ⚡効率: リアルタイム76.4 | 平均117.9 | 最近109.0 | フェーズ113.6文字/秒 📊
    🎯成功率: 100.0% (7/7) | 残り: 46行7秒] 9.4% 110文字を翻訳中...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;機能最適化-2&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;🎯 成功率: 100.0% (7/7) | 残り: 46行7 7s] 9.4% 翻訳 110 文字…
⏱️  推定残り時間: 55秒 | 予想完了時間: 00:10:19 8s] 11.3% 翻訳 114 文字…
💾 处理速度: 3211.3 行/分 | 総処理時間: 8秒] 13.2% 翻訳 16 文字…
[8/53] Stage1/6 [███░░░░░░░░░░░░░░░░░░░░░░] 15.1% 翻訳 166 文字…&lt;/p&gt;
&lt;h2 id=&#34;機能最適化-3&#34;&gt;機能最適化
&lt;/h2&gt;&lt;p&gt;以前制御プログラムの記述はあまり多くなく、どのように実装されているのか気になったので、コードを拝見しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// 画面クリアと再表示（動的更新効果）
if translationCount &amp;gt; 1 {
    fmt.Print(&amp;quot;\033[6A\033[K&amp;quot;) // 上方向に6行移動し、内容をクリア
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;性能統計メニュー&#34;&gt;性能統計メニュー
&lt;/h3&gt;&lt;p&gt;新たに作成された&lt;strong&gt;性能統計メニュー&lt;/strong&gt;は、私自身で設計したものでも、これほど完璧とは言い難い。&lt;/p&gt;
&lt;p&gt;📊 性能統計：
🔄 翻訳回数：360
⚡ キャッシュヒット率：1.4% (5/365)
⏱️ 平均翻訳時間：315.927234ms
📁 ファイル操作：73
❌ エラー回数：0&lt;/p&gt;
&lt;h3 id=&#34;プログレスバーの表示&#34;&gt;プログレスバーの表示
&lt;/h3&gt;&lt;p&gt;新增の&lt;strong&gt;プログレスバーの表示&lt;/strong&gt;、詳細な進捗状況、経過時間、残り時間の推定
機能を選択してください (0-13): 10
🔍 翻訳対象を収集中&amp;hellip;
📄 キャッシュファイルが読み込まれました。翻訳記録は 0 件含まれます
📊 翻訳キャッシュ統計:
🏷️ ラベル総数: 229 個
📝 文章総数: 131 篇
✅ キャッシュ済み: 0 件
🔄 翻訳が必要: 360 件&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;p&gt;完全な翻訳キャッシュを確認しますか？(y/n): y
🚀 完全な翻訳キャッシュの生成中&amp;hellip;
📄 キャッシュファイルが読み込まれ、0 件の翻訳記録が含まれています。
🔍 キャッシュ内の翻訳をチェック中&amp;hellip;
🔄 360 件の新ラベルを翻訳する必要があります
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - 時間: 3秒 - 残り時間: 約3分8秒
💾 キャッシュファイルが保存され、5 件の翻訳記録が含まれています。
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2. 8% - 実行時間：6秒 - 残り予想時間：3分28秒💾 キャッシュファイルが保存されました（翻訳記録10件を含む）
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - 実行時間：9秒 - 残り予想時間：3分30秒💾 キャッシュファイルが保存されました（翻訳記録15件を含む）&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示-1&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;p&gt;[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - 経過時間: 13秒 - 残り時間予測: 3分36秒💾 キャッシュファイル（翻訳記録20件）を保存
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - 経過時間: 16秒 - 残り時間予測: 3分33秒💾 キャッシュファイル（翻訳記録25件）を保存
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8. 3% - 実行時間：19秒 - 残り推定時間：3分30秒💾 キャッシュファイルが保存されました（30件の翻訳記録を含む）
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - 実行時間：22秒 - 残り推定時間：3分25秒💾 キャッシュファイルが保存されました（35件の翻訳記録を含む）&lt;/p&gt;
&lt;h3 id=&#34;プログレスバー表示-2&#34;&gt;プログレスバー表示
&lt;/h3&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;=== Hugo ブログ管理ツール ===

🚀 核心機能
  1. 一括処理 (フルブログの処理フロー)

📝 コンテンツ管理
  2. タグページを生成
  3. アーティクルスラグを生成
  4. 文章を多言語バージョンに翻訳

💾 キャッシュ管理
  5. キャッシュの状態を確認
  6. 全量翻訳キャッシュを生成
  7. 翻訳キャッシュをクリア

  0. プログラム終了
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>暇を持て余し、中国の水墨画風のテーマでデザインをしたい。</title>
        <link>https://ttf248.life/ja/p/designing-a-chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/designing-a-chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;鮮やかな色彩のホームページに飽きてしまい、急に極簡なスタイルで中国水墨画風のテーマをデザインしたいと思いました。&lt;/p&gt;
&lt;p&gt;現在のスタイルシートは、様々な要素に対して特定のスタイルを設定し、テーマのデフォルトスタイルを上書きしているため、カスタマイズされています。&lt;/p&gt;
&lt;p&gt;リファクタリングを行わずにAIを使って新しいテーマを生成してみましたが、結果は不安定でした。
さらに、trae claudeの大規模言語モデルがキューに並んでおり、vscode agentモードに切り替えた場合、その差は顕著で、修正したものが全くデザイン感のあるものとは言えませんでした。&lt;/p&gt;
&lt;p&gt;結局のところ、自分自身のフロントエンドに関する理解が不足しており、AIに効果的にタスクを分解して委託することができないことが原因です。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>デスクトップPCを2.5G網カードにアップグレードし、ローカルエリアネットワークの接続を高速化します。</title>
        <link>https://ttf248.life/ja/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/desktop-upgrade-to-2-5g-network-card-accelerates-local-area-network-interconnection/</guid>
        <description>&lt;p&gt;デスクトップPCのハードウェア三連発！前回の記事では、SSD PCIeアダプタについて触れたが、古いSSDはどこへ行ったのか？もちろん無駄にはせず、壊れてしまっていたか、分解して新しい購入した「メカシシャ・クリエーター Mini-3765H」（一年前のモデル）にインストールした。&lt;/p&gt;
&lt;p&gt;この新マシンは、ハードウェアスペックも十分に強力で、2.5GデュアルLAN、PCIe4.0、Wi-Fi 6を搭載している。&lt;/p&gt;
&lt;p&gt;最近引っ越しをして、部屋にルーターを個別に設置してネットワークを構築できず、すべてのPCが無線ネットワークで接続されている。ASUSのマザーボードデスクトップPCの無線LANカード性能があまり良くなく、ルーターの無線アクセスポイント、ローカルエリア間のアップロード速度が遅いこともあり、PC同士の通信速度が不安定だった。そこで、2.5G NIC（ネットワークインターフェースカード）を購入し、デスクトップPCにインストールした。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これでマザーボードのスロットは全て埋まった：グラフィックカード、無線LANカード、2.5G NIC、SSD PCIeアダプタ。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ネットワークの説明&#34;&gt;ネットワークの説明
&lt;/h2&gt;&lt;p&gt;両台の機器が元の無線LANに接続されているが、両台間をケーブルで直結し、両端に2.5G網カードを装着する。ケーブルで両台を直結する方法については、詳細は省略する（インターネット上には多くのチュートリアルがある）。ファイアウォールを必ず解放することに注意する。どちらか一方をゲートウェイとして使用すればよい。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[マシン1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;サブネットマスク: 255.255.255.0&amp;lt;br&amp;gt;デフォルトゲートウェイ: - &amp;lt;br&amp;gt;自動取得DNS] --&amp;gt;|ケーブル直結（2.5G）| B[マシン2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;サブネットマスク: 255.255.255.0&amp;lt;br&amp;gt;デフォルトゲートウェイ: 192.168.4.1&amp;lt;br&amp;gt;自動取得DNS];
    A --&amp;gt;|無線LANカード| Internet;
    B --&amp;gt;|無線LANカード| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二重網段測速&#34;&gt;二重網段測速
&lt;/h2&gt;&lt;h3 id=&#34;ルーティング局域網&#34;&gt;ルーティング局域網
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
接続先ホスト 192.168.3.237、ポート 5201 に接続
[  4] ローカル 192.168.3.122 ポート 1656 が 192.168.3.237 のポート 5201 に接続
[ ID] インターバル           転送     帯域幅
[  4]   0.00-1.00   秒  9.17 MB  76.7 Mbps
[  4]   1.00-2.00   秒  9.91 MB  83.2 Mbps
[  4]   2.00-3.00   秒  8.74 MB  73.3 Mbps
[  4]   3.00-4.00   秒 10.2 MB  85.2 Mbps
[  4]   4.00-5.00   秒  9.23 MB  77.1 Mbps

### ルーター局域網
[ 4 ] 4.00-5.00 sec 9.23 MB 77.1 Mbps
[ 4 ] 5.00-6.00 sec 8.80 MB 73.9 Mbps
[ 4 ] 6.00-7.01 sec 8.00 MB 66.8 Mbps
[ 4 ] 7.01-8.00 sec 7.69 MB 64.9 Mbps
[ 4 ] 8.00-9.01 sec 9.72 MB 81.1 Mbps
[ 4 ] 9.01-10.01 sec 7.63 MB 63.6 Mbps
--- --- --- --- --- --- --- --- ---
[ ID] 間隔           転送量     帯域幅
[ 4 ] 0.00-10.01 sec 89.0 MB 74.6 Mbps                  送信元

### 局域網
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  送信元
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  宛先

### ルーターローカルエリアネットワーク
iperf Done.

### 直接接続局所ネットワーク
```shell
C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
接続先ホスト 192.168.4.1、ポート 5201 に接続
[  4] ローカルアドレス 192.168.4.2 ポート 1524 が 192.168.4.1 のポート 5201 に接続
[ ID] インターバル           転送     帯域幅
[  4]   0.00-1.01   秒   178 MB   1.48 Gbps
[  4]   1.01-2.00   秒   204 MB   1.72 Gbps
[  4]   2.00-3.00   秒   214 MB   1.80 Gbps
[  4]   3.00-4.00   秒   229 MB   1.92 Gbps
[  4]   4.00-5.00   秒   202 MB   1.69 Gbps

### 直接局域網
[ 4 ] 4.00-5.00 sec 202 MB 1.69 GBits/sec
[ 4 ] 5.00-6.00 sec 213 MB 1.79 GBits/sec
[ 4 ] 6.00-7.00 sec 230 MB 1.93 GBits/sec
[ 4 ] 7.00-8.00 sec 192 MB 1.61 GBits/sec
[ 4 ] 8.00-9.00 sec 220 MB 1.84 GBits/sec
[ 4 ] 9.00-10.00 sec 230 MB 1.93 GBits/sec
--- --- --- --- --- --- --- --- ---
[ ID] 間隔           転送量     帯域幅
[ 4 ] 0.00-10.00 sec 2.06 GBytes 1.77 GBits/sec　送信元

### 直連局域網
[ 4 ] 0.00-10.00 秒 2.06 GB 1.77 Gbps　送信元
[ 4 ] 0.00-10.00 秒 2.06 GB 1.77 Gbps　受信側

### 直接接続局所網
iperf Done.

## 参考資料
- [HugoにMermaidを導入する方法](https://wutongsuimeng.github.io/post/%E7%BB%99hugo%E6%B7%BB%E5%8A%A0mermaid%E6%94%AF%E6%8C%81/)&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Hugo モジュールカスタム修正テーマ：考え方解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-customizing-themes-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を調べてみると、サイトが何度もテーマを変更してきたことがわかります。毎回テーマを変更するたびにいくつかのカスタム設定が変更されていたため、ここではそのカスタム設定の思路を記録します。私のGitHubには「even」というテーマがありましたが、強迫症でHugoコンパイラを最新バージョンにアップグレードしようとせず、それが原因でevenテーマが互換性を失い、最終的にStackテーマに切り替えてしまいました。&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化について言及する際、NginxモジュールやIDEAプラグインなどを思い浮かべる人が多いでしょう。私は、独自のニーズを満たすために、いくつかのモジュールをアップロードすることで対応することがよくあります。 モジュールが広く受け入れられている理由は、十分に柔軟で、大きな労力をかけずに自身のニーズに応えられるためです。 多くの場合は、大まκάζ的には同じでも、細部には違いがあるからです。 これはソフトウェアの複雑さを物語っており、技術的な複雑さだけでなく、ビジネス上の複雑さも含まれていることを示しています。 大多数の場合、私たちが直面しているのはビジネスの複雑さです。 そしてこれは、ソフトウェア業界において「隔行如隔山」という俗語を最もよく表すものです。 現代では、インターネット業界だけでなく、金融業界、さらには伝統的な製造業においても、企業の生産と管理を支援するために情報化システムが導入されています。 同じ休暇システムでも、同じ業界であっても、企業によって異なる点があります。
そして&lt;code&gt;Hugo&lt;/code&gt;のモジュールと皆さんがイメージするモジュールには違いがあり、機能単位で差異に対応しているわけではありません。代わりにディレクトリ構造を主軸に、共通の構造を認識します。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo架构 — Hugo的模块&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;hugoのモジュール化-1&#34;&gt;Hugoのモジュール化
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git submodule&lt;/code&gt; 方式も引き続き利用可能ですが、本記事では推奨されません。テーマが更新された場合、個別の Git リポジトリで管理する必要があるため、メンテナンスが煩雑になる可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;テーマの変更ロジックhttpsstackjimmycaicomguidemodify-theme&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;テーマの変更ロジック&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;前面モジュール化の基本的な概念を理解した上で、カスタムテーマを理解すると、それほど難しくありません。Hugo の現在のテーマも、複数の異なるモジュールを組み合わせて構成されています。 したがって、あるモジュールを変更したい場合は、対応するテンプレートファイルを検索し、修正すれば済みます。&lt;/p&gt;
&lt;p&gt;stack 公式ドキュメントからの抜粋：&lt;/p&gt;
&lt;p&gt;この方法を使用すると、&lt;code&gt;themes&lt;/code&gt; ディレクトリの下にファイルは存在しません。 テーマを変更するには、変更したいファイルを同じディレクトリにある &lt;code&gt;layouts&lt;/code&gt; ディレクトリの下にコピーする必要があります。&lt;/p&gt;
&lt;h2 id=&#34;テーマの変更ロジック-httpsstackjimmycaicomguidemodify-themehttpsstackjimmycaicomguidemodify-theme&#34;&gt;テーマの変更ロジック (&lt;a class=&#34;link&#34; href=&#34;https://stack.jimmycai.com/guide/modify-theme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stack.jimmycai.com/guide/modify-theme&lt;/a&gt;)
&lt;/h2&gt;&lt;p&gt;たとえば、&lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; ファイルを修正するには、それを &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; にコピーして、そこから編集する必要があります（テーマのリポジトリからコードをコピーします）。&lt;code&gt;assets&lt;/code&gt; と &lt;code&gt;static&lt;/code&gt; ディレクトリについても同様です。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルの場所を見つける方法&#34;&gt;テンプレートファイルの場所を見つける方法
&lt;/h2&gt;&lt;h3 id=&#34;従来の思路&#34;&gt;従来の思路
&lt;/h3&gt;&lt;p&gt;テーマのソースファイルを確認し、テーマのデザイン思想を理解し、対応するテンプレートファイルを修正します。&lt;/p&gt;
&lt;h3 id=&#34;蛮力的なアプローチ&#34;&gt;蛮力的なアプローチ
&lt;/h3&gt;&lt;p&gt;私はフロントエンドのコードがあまり理解していないため、時々、ブラウザで対応するページを開いて、修正したい箇所を見つけ、&lt;code&gt;要素を検査&lt;/code&gt;を使ってCSS名などを特定し、ソースコードから該当ファイルを検索してコピーし、サイトディレクトリに貼り付けて修正するというような、手動的な方法をとることがあります。&lt;/p&gt;
&lt;h2 id=&#34;スニppets&#34;&gt;スニppets
&lt;/h2&gt;&lt;p&gt;公式で用意されているファイルは、スタイルをカスタマイズするためのものですが、変更が必要な箇所がある場合は、複数のファイルに分割し、&lt;code&gt;custom.scss&lt;/code&gt; ファイルを他のファイルにインポートすることで、よりスタイルの管理が容易になります。
&lt;img src=&#34;https://ttf248.life/p/hugo-module-customizing-themes-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;修正内容まとめ-6時間&#34;&gt;修正内容まとめ (6時間)
&lt;/h2&gt;&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な修正点を以下に列挙します。本サイトにおける変更点としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定など、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを継承し、中国語に最適化&lt;/li&gt;
&lt;li&gt;首页：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;首页：記事に概要プレビュー（手間のかかる部分を、工夫で実現）を追加&lt;/li&gt;
&lt;li&gt;滚动栏：スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;代码块：&lt;code&gt;highlight.js&lt;/code&gt; を導入 - JavaScriptコードハイライトプラグイン、コードブロックのスタイルを美化する&lt;/li&gt;
&lt;li&gt;内容詳細：一部コンテンツが転載であり、新規に原作者情報を表示し、元のリンクを表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：トップ部のカテゴリ画像、テーマ自带の色マスクを削除し、元の画像を表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：年単位での分類統計表示パネルを追加&lt;/li&gt;
&lt;li&gt;アーカイブページ：2カラム表示レイアウト ## 修正内容まとめ (6時間)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;現在は &lt;code&gt;AI&lt;/code&gt; エンコードの元年であり、詳細な内容はここでは省略し、主な変更点を以下に列挙します。本サイトにおける修正点としては、コピーボタンのスタイルの調整、コードブロックのスタイルの再設定など、&lt;code&gt;ChatGPT&lt;/code&gt; などは容易に対応可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバル文字スタイルを、以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; を融合した表示スタイルを引き継ぎ、中国語に親切&lt;/li&gt;
&lt;li&gt;首页: 右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;首页: 記事に概要プレビュー（手間のかかる部分を、工夫で実現）を追加&lt;/li&gt;
&lt;li&gt;滚动栏: スクロールバーのスタイルを美化&lt;/li&gt;
&lt;li&gt;代码块: `highlight.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;修正内容まとめ6時間&#34;&gt;修正内容まとめ（6時間）
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; テーマのコンポーネントの再利用性が高く、それがホームページの記事の新摘要プレビューにかかる時間を増やす原因となっていました。対応するコンポーネントを変更したことで、記事の詳細ページも変更され、正文が重複して表示される問題が発生しました。&lt;code&gt;golang テンプレート&lt;/code&gt;の構文も十分に理解できていなかったため、多くの時間を費やし、コンポーネント間のパラメータ伝達を解決することができませんでした。最終的には、ショートカットの方法として、ホームページに個別に&lt;code&gt;JavaScript&lt;/code&gt;スクリプトを導入し、カスタムの特殊変数を通じて摘要プレビューを実現しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コードの再利用性が高すぎることも問題となることがあります。一つの場所を変更すると、他の場所にも影響が及ぶ可能性があるため、テーマを修正する際には注意が必要です。既存のロジックを破壊しないようにしてください。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;このイケメンさんの修正はより洗練されています：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;
&lt;del&gt;本サイトではシンプルな形で &lt;code&gt;Waline&lt;/code&gt; コメントシステムを導入しており、&lt;code&gt;stack&lt;/code&gt; テーマがデフォルトで &lt;code&gt;Waline&lt;/code&gt; をサポートしています。&lt;code&gt;config.toml&lt;/code&gt; に設定するだけです。&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首页のメールでの連絡を推奨し、本サイトではコメント欄は開放していません&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Linuxシステムベンチマークテスト</title>
        <link>https://ttf248.life/ja/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;Windows 平台上有鲁大师（娱乐大师），不能说数据很准，但总归有个参考，当然也有其他的专业跑分软件。到了 Linux 系统，好像一直没遇到特别合适的跑分软件。&lt;/p&gt;
&lt;p&gt;Sysbench 是一款多功能的基准测试工具，可用于测试 CPU、内存、文件 I/O、线程性能等。您可以使用 Sysbench 来执行各种性能测试任务。&lt;/p&gt;
&lt;p&gt;手头上刚好有三台机器用于测试：机械师 mini 本地小主机、阿里云 dev 开发云服务器、华为云开发服务器。&lt;/p&gt;
&lt;h2 id=&#34;sysbench-のインストール&#34;&gt;Sysbench のインストール
&lt;/h2&gt;&lt;p&gt;ほとんどの Linux ディストリビューションでは、パッケージマネージャを使用して Sysbench をインストールできます。例えば、CentOS 8 では、次のコマンドを使用します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbenchの使用例&#34;&gt;Sysbenchの使用例
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU性能のテスト：&lt;code&gt;sysbench --test=cpu run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;メモリ読み込み性能のテスト：&lt;code&gt;sysbench --test=memory run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ファイルI/O性能のテスト：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッド性能のテスト：&lt;code&gt;sysbench --test=threads --num-threads=4 run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MySQLデータベース性能のテスト（最大接続数を調整する必要あり）：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sysbenchの使用例-1&#34;&gt;Sysbenchの使用例
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ランニングデータレポート&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;h2 id=&#34;採点データレポート&#34;&gt;採点データレポート
&lt;/h2&gt;&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34;
&lt;h2 id=&#34;ランニングスコアレポート&#34;&gt;ランニングスコアレポート
&lt;/h2&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;&lt;/td&gt;
      &lt;td class=&#34;s0&#34;&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ランニングデータレポート-1&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;row-header-wrapper&amp;rdquo; style=&amp;ldquo;line-height: 20px&amp;rdquo;&amp;gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;ローカルメカニスト&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;ファーウェイクラウド&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;システム構成&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  オペレーティングシステム              Ubuntu 23.04&lt;br&gt;  カーネル                        Linux&lt;/p&gt;
&lt;h2 id=&#34;ランダムアクセスメモリramレポート&#34;&gt;ランダムアクセスメモリ（RAM）レポート
&lt;/h2&gt;&lt;p&gt;情報
オペレーティングシステム Ubuntu 23.04
カーネル Linux 6.2.0-36-generic x86_64
モデル Machenike Machenike DT Computer
マザーボード Machenike Machenike DT Computer
BIOS American Megatrends International, LLC.
DB19V012&lt;/p&gt;
&lt;p&gt;CPU情報
名前 Intel Core i7-12650H
トポロジー 1 プロセッサ、10 コア、16 スレッド
識別子&lt;/p&gt;
&lt;h2 id=&#34;ランダムアクセスデータレポート&#34;&gt;ランダムアクセスデータレポート
&lt;/h2&gt;&lt;p&gt;i7-12650H
Topology                      1 プロセッサ、10 コア、16 スレッド
Identifier                    GenuineIntel Family 6 Model 154 Stepping 3
Base Frequency                4.60 GHz
L1 Instruction Cache          32.0 KB x 8
L1 Data Cache                 48.0 KB x 8
L2 Cache                      1.25 MB x 2
L3 Cache                      24.0 MB&lt;/p&gt;
&lt;p&gt;メモリ情報
サイズ                          62.6 GB&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-2&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;サイズ                         62.6 GB&lt;/p&gt;
&lt;p&gt;システム情報
オペレーティングシステム      CentOS Stream 8
カーネル                    Linux 4.18.0-513.el8.x86_64 x86_64
モデル                       Alibaba Cloud Alibaba Cloud ECS
マザーボード                 N/A
BIOS                        SeaBIOS 449e491&lt;/p&gt;
&lt;p&gt;CPU情報
名前                          Intel(R) Xeon(R) Platinum
トポロジー                    1 プロセッサ、1 コア、2&lt;/p&gt;
&lt;h2 id=&#34;実行成績データレポート&#34;&gt;実行成績データレポート
&lt;/h2&gt;&lt;p&gt;Intel(R) Xeon(R) Platinum
Topology                      1 Processor, 1 Core, 2 Threads
Identifier                    GenuineIntel Family 6 Model 85 Stepping 4
Base Frequency                2.50 GHz
L1 Instruction Cache          32.0 KB
L1 Data Cache                 32.0 KB
L2 Cache                      1.00 MB
L3 Cache                      33.0 MB&lt;/p&gt;
&lt;p&gt;メモリ情報
Size                          1.65 GB&lt;/p&gt;
&lt;h2 id=&#34;実行結果データレポート&#34;&gt;実行結果データレポート
&lt;/h2&gt;&lt;p&gt;情報
サイズ　1.65 GB&lt;/p&gt;
&lt;p&gt;システム情報
オペレーティングシステム Ubuntu 22.04.1 LTS
カーネル Linux 5.15.0-60-generic x86_64
モデル OpenStack Foundation OpenStack Nova
マザーボード N/A
BIOS SeaBIOS
rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000&lt;/p&gt;
&lt;p&gt;CPU情報
名前 Intel(R) Xeon(R) Gold&lt;/p&gt;
&lt;h2 id=&#34;実行結果データレポート-1&#34;&gt;実行結果データレポート
&lt;/h2&gt;&lt;p&gt;情報
名前                          Intel(R) Xeon(R) Gold 6278C CPU @ 2.60GHz
Topology                      1 Processor, 1 Core, 2 Threads
識別子                    GenuineIntel Family 6 Model 85 Stepping 7
ベース周波数                2.60 GHz
L1 命令キャッシュ          32.0 KB
L1 データキャッシュ         32.0 KB
L2 キャッシュ              1.00 MB
L3 キャッシュ              35.8 MB&lt;/p&gt;
&lt;p&gt;メモリ情報
サイズ&lt;/p&gt;
&lt;h2 id=&#34;ランダムデータレポート&#34;&gt;ランダムデータレポート
&lt;/h2&gt;&lt;p&gt;L3 キャッシュ                      35.8 MB&lt;br&gt;&lt;br&gt; メモリ情報&lt;br&gt; サイズ                          3.64 GB&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R2&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;3&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;CPU&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行:&lt;br&gt;スレッド数: 1&lt;br&gt;乱数生成器の初期化:&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;スレッド数: 1
現在の時刻から乱数生成器を初期化
素数上限: 10000
ワーカースレッドの初期化&amp;hellip;
スレッド起動！
CPU速度:
イベント数/秒: 4032.48
総統計:
合計時間: 10.0004s
合計イベント数: 40330
レイテンシ (ms):
最小: 0.25
平均:&lt;/p&gt;
&lt;h2 id=&#34;ランニング結果データレポート&#34;&gt;ランニング結果データレポート
&lt;/h2&gt;&lt;p&gt;min:                                    0.25&lt;br&gt;         avg:                                    0.25&lt;br&gt;         max:                                    0.73&lt;br&gt;         95th percentile:                        0.25&lt;br&gt;         sum:                                 9997.55&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           40330.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   9.9975/0.00&lt;/p&gt;
&lt;p&gt;sysbench 1.0.20 (system LuaJIT 2.1.0-beta3) を使用
テスト実行中&lt;/p&gt;
&lt;h2 id=&#34;実行結果データレポート-2&#34;&gt;実行結果データレポート
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;sysbench 1.0.20 (system LuaJIT 2.1.0-beta3) を使用してテストを実行し、以下のオプションを指定しました：&lt;br&gt;&lt;br&gt;スレッド数: 1&lt;br&gt;乱数生成器を現在の時刻から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数上限: 10000&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化中&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    イベント数/秒: 1062.51&lt;br&gt;&lt;br&gt;全体統計:&lt;br&gt;    合計時間: 10.0008s&lt;br&gt;    合計イベント数: 10628&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;/p&gt;
&lt;h2 id=&#34;実行測定データレポート&#34;&gt;実行測定データレポート
&lt;/h2&gt;&lt;p&gt;10.0008s &lt;br&gt;
イベント総数:              10628 &lt;br&gt;&lt;br&gt;
レイテンシー (ms):&lt;br&gt;
最小:                                    0.91&lt;br&gt;
平均:                                    0.94&lt;br&gt;
最大:                                   22.84&lt;br&gt;
95パーセンタイル:                        1.06&lt;br&gt;
合計:                                 9993.46&lt;br&gt;&lt;br&gt;
スレッド公平性:&lt;br&gt;
イベント (平均/標準偏差):           10628.0000/0.00 &lt;br&gt;
実行時間 (平均/標準偏差):&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-3&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;イベント（平均/標準偏差）： 10628.0000 / 0.00&lt;br&gt;実行時間（平均/標準偏差）： 9.9935 / 0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行中:&lt;br&gt;スレッド数： 1&lt;br&gt;乱数生成器を現在の時間から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;素数の制限： 10000&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;CPU速度:&lt;br&gt;    毎秒イベント数： 1125.56&lt;br&gt;&lt;br&gt;一般的な統計情報:&lt;br&gt;    合計時間：&lt;/p&gt;
&lt;h2 id=&#34;実行速度レポート&#34;&gt;実行速度レポート
&lt;/h2&gt;&lt;p&gt;速度：
イベント数/秒：1125.56
一般統計：
合計時間：10.0005s
総イベント数：11258
遅延（ms）：
最小：0.86
平均：0.89
最大：1.70
95パーセンタイル：0.99
合計：9995.40
スレッド公平性：&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-4&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;0.99&lt;br&gt;         合計:                                 9995.40&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           11258.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   9.9954/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R3&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;4&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;メモリ&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;以下のオプションでテストを実行:&lt;br&gt;スレッド数: 1&lt;br&gt;乱数初期化&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;以下のオプションでテストを実行しました：&lt;br&gt;スレッド数：1&lt;br&gt;現在の時刻から乱数生成器を初期化する&lt;br&gt;&lt;br&gt;&lt;br&gt;以下のオプションでメモリ速度テストを実行します：&lt;br&gt;  ブロックサイズ：1KiB&lt;br&gt;  合計サイズ：102400MiB&lt;br&gt;  操作：書き込み&lt;br&gt;  範囲：グローバル&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化中&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました！&lt;br&gt;&lt;br&gt;総操作数：101993199 (10198146.52/秒)&lt;br&gt;&lt;br&gt;99602.73 MiB転送 (9959.13 MiB/秒)&lt;br&gt;&lt;br&gt;&lt;br&gt;一般統計：&lt;br&gt;    合計時間：&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート-1&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;転送されたMiB数 (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;全体統計:&lt;br&gt;    合計時間:                          10.0001秒&lt;br&gt;    イベント総数:              1,019,931,99件&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小値:                                    0.00&lt;br&gt;         平均値:                                    0.00&lt;br&gt;         最大値:                                    0.03&lt;br&gt;         95パーセンタイル:                        0.00&lt;br&gt;         合計:                                 4059.50&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-5&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;0.00&lt;br&gt;         合計:                                 4059.50&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           101993199.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   4.0595/0.00&lt;/p&gt;
&lt;p&gt;テストを以下のオプションで実行しました：
スレッド数: 1
現在の時刻から乱数ジェネレータを初期化
&lt;br&gt;&lt;br&gt;&lt;br&gt;メモリ速度テストを実行し、以下のオプションを使用しました：
ブロックサイズ: 1KiB
合計サイズ: 102400MiB
操作: 書き込み
範囲:&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート-2&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;オプション：
ブロックサイズ：1KiB
合計サイズ：102400MiB
操作：書き込み
範囲：グローバル&lt;/p&gt;
&lt;p&gt;ワーカースレッドの初期化中&amp;hellip;
スレッド開始！
総操作数：48418803 (秒あたり4841004.79)
転送されたデータ量：47283.99 MiB (秒あたり4727.54 MiB)&lt;/p&gt;
&lt;p&gt;一般統計：
合計時間：10.0001s
総イベント数：48418803&lt;/p&gt;
&lt;p&gt;レイテンシ（ms）：
最小：0.00
平均：&lt;/p&gt;
&lt;h2 id=&#34;実行結果データレポート-3&#34;&gt;実行結果データレポート
&lt;/h2&gt;&lt;p&gt;(ms):&lt;br&gt;         最小値:                                    0.00&lt;br&gt;         平均値:                                    0.00&lt;br&gt;         最大値:                                   25.26&lt;br&gt;         95パーセンタイル:                        0.00&lt;br&gt;         合計:                                 4578.95&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント数 (平均/標準偏差):           48418803.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;以下のオプションでテストを実行:&lt;br&gt;数&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-6&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;以下のオプションでテストを実行:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数ジェネレータを初期化する&lt;br&gt;&lt;br&gt;&lt;br&gt;以下のオプションでメモリ速度テストを実行:&lt;br&gt;  ブロックサイズ: 1KiB&lt;br&gt;  合計サイズ: 102400MiB&lt;br&gt;  操作: 書き込み&lt;br&gt;  範囲: グローバル&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドを開始!&lt;br&gt;&lt;br&gt;総演算数: 57056904 (5704765.11 per second)&lt;br&gt;&lt;br&gt;55719.63 MiB転送 (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;一般&lt;/p&gt;
&lt;h2 id=&#34;実行測定データレポート-1&#34;&gt;実行測定データレポート
&lt;/h2&gt;&lt;p&gt;(5704765.11 per second)&lt;br&gt;&lt;br&gt;
55719.63 MiB転送 (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;
一般統計：&lt;br&gt;
合計時間:                                10.0001s&lt;br&gt;
イベント総数:                             57056904&lt;br&gt;&lt;br&gt;
レイテンシ (ms):&lt;br&gt;
最小:                                    0.00&lt;br&gt;
平均:                                    0.00&lt;br&gt;
最大:                                    0.06&lt;br&gt;
95パーセンタイル:                        0.00&lt;br&gt;
合計:&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-7&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;95パーセンタイル:                        0.00&lt;br&gt;         合計:                                 4556.06&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           57056904.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差):   4.5561/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R4&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;5&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;ハードディスク&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 バイトを 1.81 秒で書き込み&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-1&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;ハードディスク&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 バイトを 1.81 秒で書き込みました (1129.59 MiB/秒)。&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行しました:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数生成器を初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ: (なし)&lt;br&gt;128 ファイル、各 16MiB&lt;br&gt;合計ファイルサイズ 2GiB&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IO リクエスト数: 0&lt;br&gt;組み合わせてランダム IO テストの読み取り/書き込み比率: 1.50&lt;br&gt;定期的な FSYNC を有効にし、各 100 リクエストごとに fsync() を呼び出します。&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-2&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;ランダムIOテスト: 1.50&lt;br&gt;定期的なFSYNCを有効化、各100リクエストごとにfsync()を呼び出す。&lt;br&gt;テストの終了時にfsync()を呼び出し、有効化。&lt;br&gt;同期I/Oモードを使用中&lt;br&gt;ランダムな読み書きテストを実施中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:                      3373.41&lt;br&gt;    書き込み/秒:                     2248.94&lt;br&gt;    fsync/秒:                     7201.80&lt;br&gt;&lt;br&gt;スループット:&lt;br&gt;    読み込み, MiB/s:                  52.71&lt;br&gt;    書き込み, MiB/s:&lt;/p&gt;
&lt;h2 id=&#34;実行測定データレポート-2&#34;&gt;実行測定データレポート
&lt;/h2&gt;&lt;p&gt;read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:               35.14&lt;br&gt;&lt;br&gt;全体統計:&lt;br&gt;    合計時間:                          10.0127秒&lt;br&gt;    イベント総数:              128288&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小値:                                    0.00&lt;br&gt;         平均値:                                    0.08&lt;br&gt;         最大値:                                    5.14&lt;br&gt;         95パーセンタイル:                        0.34&lt;br&gt;         合計:&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-8&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;95パーセンタイル:                        0.34&lt;br&gt;         合計:                                 9977.78&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント（平均/標準偏差）:           128288.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）:   9.9778/0.00&lt;/p&gt;
&lt;p&gt;2147483648 バイトを 19.29 秒で書き込みました (106.16 MiB/秒)。&lt;br&gt;&lt;br&gt;次のオプションでテストを実行しました:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数ジェネレータを初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ: (なし)&lt;br&gt;128 ファイル、&lt;/p&gt;
&lt;h2 id=&#34;ランダム実行データレポート&#34;&gt;ランダム実行データレポート
&lt;/h2&gt;&lt;p&gt;現在の時刻からの乱数生成器&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ：(なし)&lt;br&gt;128ファイル、各16MiB&lt;br&gt;合計ファイルサイズ 2GiB&lt;br&gt;ブロックサイズ 16KiB&lt;br&gt;IOリクエスト数: 0&lt;br&gt;組み合わせての乱数IOテストの読み書き比率: 1.50&lt;br&gt;定期的なFSYNCを有効化、各100リクエストごとにfsync()を呼び出す。&lt;br&gt;テストの最後にfsync()を呼び出し、有効化。&lt;br&gt;同期I/Oモードを使用&lt;br&gt;乱数読み書きテストを実行中&lt;br&gt;ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドを開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:&lt;/p&gt;
&lt;h2 id=&#34;実行測定データレポート-3&#34;&gt;実行測定データレポート
&lt;/h2&gt;&lt;p&gt;ワーカースレッド&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;    読み込み/秒:                      1593.12&lt;br&gt;    書き込み/秒:                     1062.08&lt;br&gt;    fsync/秒:                       3406.64&lt;br&gt;&lt;br&gt;スループット:&lt;br&gt;    読み込み, MiB/秒:                  24.89&lt;br&gt;    書き込み, MiB/秒:               16.60&lt;br&gt;&lt;br&gt;全体統計:&lt;br&gt;    合計時間:                          10.0164秒&lt;br&gt;    イベント総数:                      60600&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-9&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;イベント: 60600&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小: 0.00&lt;br&gt;         平均: 0.16&lt;br&gt;         最大: 31.32&lt;br&gt;         95パーセンタイル: 0.54&lt;br&gt;         合計: 9956.30&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差): 60600.0000/0.00&lt;br&gt;    実行時間 (平均/標準偏差): 9.9563/0.00&lt;/p&gt;
&lt;td&gt;2147483648 バイト
&lt;h2 id=&#34;実行結果レポート-3&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;平均実行時間 (stddev): 9.9563 / 0.00&lt;/p&gt;
&lt;p&gt;2147483648 バイトが 18.29 秒で書き出されました (111.98 MiB/sec)。&lt;br&gt;&lt;br&gt;以下のオプションでテストを実行しました:&lt;br&gt;スレッド数: 1&lt;br&gt;現在の時刻から乱数ジェネレータを初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;追加ファイルオープンフラグ: (なし)&lt;br&gt;128 ファイル、各 16MiB&lt;br&gt;合計ファイルサイズ: 2GiB&lt;br&gt;ブロックサイズ: 16KiB&lt;br&gt;IO リクエスト数: 0&lt;br&gt;組み合わせてランダム IO テストの読み取り/書き込み比率: 1.50&lt;br&gt;定期的な FSYNC を有効にし、各 100 で fsync() を呼び出しました&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-4&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;結合ランダムIOテストの比率：1.50&lt;br&gt;
定期的なFSYNCを有効化、各100リクエストごとにfsync()を呼び出し。&lt;br&gt;
テスト終了時にfsync()を呼び出す。有効化。&lt;br&gt;
同期I/Oモードを使用中&lt;br&gt;
ランダムR/Wテストを実行中&lt;br&gt;
ワーカースレッドの初期化&amp;hellip;&lt;br&gt;&lt;br&gt;
スレッドを開始!&lt;br&gt;&lt;br&gt;&lt;br&gt;ファイル操作:&lt;br&gt;
読み込み/秒:                      1665.88&lt;br&gt;
書き込み/秒:                     1110.59&lt;br&gt;
fsync/秒:                     3563.77&lt;br&gt;&lt;br&gt;帯域幅:&lt;br&gt;
読み込み、MiB/s:                  26.03&lt;br&gt;
書き込み、MiB/s:&lt;/p&gt;
&lt;h2 id=&#34;実行速度レポート-1&#34;&gt;実行速度レポート
&lt;/h2&gt;&lt;p&gt;3563.77&lt;/p&gt;
&lt;p&gt;スループット：
読み込み: MiB/s:                  26.03
書き込み: MiB/s:               17.35&lt;/p&gt;
&lt;p&gt;全体統計：
合計時間:                          10.0112秒
イベント総数:              63355&lt;/p&gt;
&lt;p&gt;レイテンシ (ms):
最小:                                    0.00
平均:                                    0.16
最大:                                  205.01
95パーセンタイル:                        0.78&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-10&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;205.01&lt;br&gt;         パーセンタイル95：                        0.78&lt;br&gt;         合計：                                 9972.64&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント（平均/標準偏差）：           63355.0000/0.00&lt;br&gt;    実行時間（平均/標準偏差）：   9.9726/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R5&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;マルチスレッド&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;実行中&lt;/td&gt;&lt;/tr&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-5&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div&amp;gt;&amp;lt;span style=&amp;quot;font-size: 20px&amp;quot;&amp;gt;6&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/th&amp;gt;&amp;lt;td class=&amp;quot;s0&amp;quot; dir=&amp;quot;ltr&amp;quot;&amp;gt;マルチスレッド&amp;lt;/td&amp;gt;&amp;lt;td class=&amp;quot;s0&amp;quot; dir=&amp;quot;ltr&amp;quot;&amp;gt;以下のオプションでテストを実行:&amp;lt;br&amp;gt;スレッド数: 4&amp;lt;br&amp;gt;現在の時刻から乱数ジェネレータを初期化する&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;ワーカースレッドの初期化...&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;スレッドが開始されました!&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;一般統計:&amp;lt;br&amp;gt;    合計時間:                          10.0002秒&amp;lt;br&amp;gt;    総イベント数:              197956件&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;レイテンシ (ms):&amp;lt;br&amp;gt;         最小:                                    0.16&amp;lt;br&amp;gt;         平均:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;実行結果レポート-6&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;以下のオプションでテストを実行しました：
スレッド数：4
現在の時刻から乱数ジェネレータを初期化
ワーカースレッドの初期化&amp;hellip;
スレッドが開始されました！
一般統計：
合計時間：10.0002秒
総イベント数：197956件
レイテンシ（ms）：
最小：0.16
平均：&lt;/p&gt;
&lt;h2 id=&#34;走査データレポート&#34;&gt;走査データレポート
&lt;/h2&gt;&lt;p&gt;(ms):&lt;br&gt;         最小値:                                    0.16&lt;br&gt;         平均値:                                    0.20&lt;br&gt;         最大値:                                    0.34&lt;br&gt;         95パーセンタイル:                        0.21&lt;br&gt;         合計:                                39970.47&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (平均/標準偏差):           49489.0000/5.70&lt;br&gt;    実行時間 (平均/標準偏差):   9.9926/0.00&lt;/p&gt;
&lt;p&gt;テストを実行したオプション:
スレッド数:&lt;/p&gt;
&lt;h2 id=&#34;実行データレポート-3&#34;&gt;実行データレポート
&lt;/h2&gt;&lt;p&gt;class=&amp;ldquo;s0&amp;rdquo; dir=&amp;ldquo;ltr&amp;rdquo;&amp;gt;以下のオプションでテストを実行します:&lt;br&gt;スレッド数: 4&lt;br&gt;現在の時刻から乱数生成器を初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化中&amp;hellip;&lt;br&gt;&lt;br&gt;スレッドが開始されました!&lt;br&gt;&lt;br&gt;&lt;br&gt;一般統計:&lt;br&gt;    合計時間:                          10.0174秒&lt;br&gt;    総イベント数:              18360件&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.57&lt;br&gt;         平均:                                    2.18&lt;br&gt;         最大:&lt;/p&gt;
&lt;h2 id=&#34;ランニングデータレポート-11&#34;&gt;ランニングデータレポート
&lt;/h2&gt;&lt;p&gt;0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:                                   32.77&lt;br&gt;         95th percentile:                        2.61&lt;br&gt;         sum:                                40050.41&lt;br&gt;&lt;br&gt;スレッド公平性:&lt;br&gt;    イベント (avg/stddev):           4590.0000/94.36&lt;br&gt;    実行時間 (avg/stddev):   10.0126/0.00&lt;/p&gt;
&lt;p&gt;テストを以下のオプションで実行しました：&lt;br&gt;スレッド数: 4&lt;br&gt;乱数ジェネレータの初期化&lt;/p&gt;
&lt;h2 id=&#34;実行結果レポート-7&#34;&gt;実行結果レポート
&lt;/h2&gt;&lt;p&gt;以下のオプションでテストを実行:&lt;br&gt;スレッド数: 4&lt;br&gt;乱数生成器を現在時刻から初期化&lt;br&gt;&lt;br&gt;&lt;br&gt;ワーカースレッドの初期化中&amp;hellip;&lt;br&gt;&lt;br&gt;スレッド起動!&lt;br&gt;&lt;br&gt;&lt;br&gt;総合統計:&lt;br&gt;    合計時間:                          10.0004秒&lt;br&gt;    総イベント数:              28536件&lt;br&gt;&lt;br&gt;レイテンシ (ms):&lt;br&gt;         最小:                                    0.23&lt;br&gt;         平均:                                    1.40&lt;br&gt;         最大:                                    3.56&lt;/p&gt;
&lt;h2 id=&#34;走行データレポート&#34;&gt;走行データレポート
&lt;/h2&gt;&lt;p&gt;1.40 &lt;br&gt;
最大値:                                    3.56 &lt;br&gt;
パーセンタイル95:                        1.47 &lt;br&gt;
合計:                                39975.16 &lt;br&gt;&lt;br&gt;
スレッド公平性:&lt;br&gt;
イベント (平均/標準偏差):           7134.0000/39.87 &lt;br&gt;
実行時間 (平均/標準偏差):   9.9938/0.01&lt;/p&gt;
&lt;h2 id=&#34;付録&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ChatGPT&lt;/code&gt; は依然として優れたものですが、以前習得していた &lt;code&gt;Markdown&lt;/code&gt; で完全にテーブルを作成できず、表示効果が著しく低下します。カスタムテーマによってページの最大幅が制限されるため、幅をパーセンテージ制に調整しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡単な方法としては、TablesGeneratorなどのオンラインツールを使用してHTMLテーブルを生成（内容が複雑だと不向き）&lt;/li&gt;
&lt;li&gt;または、Googleドキュメントで作成し、HTML形式でダウンロードして保存し、ブログに直接コピーする（シンプルかつ直接的で、最終的に採用）
config設定でunsafeオプションを有効にする。ページごとの幅の設定を個別に指定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugoでは、ページごとに幅を設定できます。これは、ページのFront Matterにカスタムパラメータを追加することで実現できます。以下はその例です： あなたの Markdown の Front Matter セクション（通常はファイルの冒頭部分）に、カスタムパラメータを追加してください。例えば &lt;code&gt;custom_width&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;私のページ&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 幅を 800 ピクセルに設定
---

本文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;付録-1&#34;&gt;付録
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;あなたの Hugo テーマで、対応するシングルページテンプレートファイル（例：&lt;code&gt;layouts/_default/single.html&lt;/code&gt;）を見つけてください。&lt;/li&gt;
&lt;li&gt;シングルページテンプレート内で、ページの Front Matter に &lt;code&gt;custom_width&lt;/code&gt; パラメータが存在するか確認し、それを該当する HTML 要素（例：&lt;code&gt;div&lt;/code&gt;）に適用してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、内联スタイル（&lt;code&gt;style&lt;/code&gt;属性）を使用して &lt;code&gt;div&lt;/code&gt; 要素の &lt;code&gt;max-width&lt;/code&gt; 属性を設定し、&lt;code&gt;custom_width&lt;/code&gt; パラメータが指定されていない場合に幅をデフォルトで100%にしています。&lt;code&gt;margin: 0 auto;&lt;/code&gt; は &lt;code&gt;div&lt;/code&gt; 要素を中央揃えにします。&lt;/p&gt;
&lt;h2 id=&#34;付録-2&#34;&gt;付録
&lt;/h2&gt;&lt;p&gt;上記はあくまで例であり、実際のアプリケーションでは、テーマの構造とCSSスタイルの詳細に合わせて調整が必要となる場合があります。スタイルを調整する際は、テーマの一貫性と可読性を維持するようにしてください。
また、有効化されたテーマが若干異なるため、最後にサイトカスタムの&lt;code&gt;CSS&lt;/code&gt;設定を調整しました。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>ブログIDE環境と雑感</title>
        <link>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;本記事では、Markdownの基本的な概念と、さまざまなソフトウェアでの利用について解説しています。VSCodeをIDEとして推奨し、おすすめのプラグインを紹介しています。また、HexoからHugoへの移行経験を共有し、Hugoの柔軟性とカスタマイズ性を強調しています。最後に、新しい技術を迅速に習得するためのヒントや、Hugoテーマのスタイルが更新されない問題を解決する簡単なコツを提供しています。&lt;/p&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;軽量マークアップ言語であり、人々が読み書きしやすいプレーンテキスト形式でドキュメントを作成することを可能にする。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;markdown-1&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;詳細なMarkdown構文については、本文で別途詳述しません。電子書籍を推奨します。&lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらをクリック&lt;/a&gt;
市場には多くのソフトウェアがMDを記述方法としてサポートしています。CSDNのブログシステムはMD構文に対応したオンラインエディターを導入しており、初回使用時にデフォルトでMD構文に関する紹介記事が表示されます。筆記者自身もそれなりに有用だと感じています。印象笔记では2018年にMDノートのサポートを追加し、ショートカットバーには様々なMDマークアップのオプションがあり、普通の記事を編集するのとほぼ同じように使えます。全体的なインタラクションフローは初心者にもフレンドリーです&lt;/p&gt;
&lt;h3 id=&#34;ide-推奨&#34;&gt;IDE 推奨
&lt;/h3&gt;&lt;p&gt;この記事を書いているのは2020年であり、VS Code は当然のことながら皆知っているでしょう。なぜなら、Git Page をブログシステムとして利用することを考えるのは、業界経験者だけです。以前は Sublime や Atom も良い選択肢でしたが、2 か年のオープンソースコミュニティの推進により、VS Code は急速に発展し、徐々に初心者にとっての最初の選択肢となっています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;微软の巨頭とオープンソースコミュニティの関係が、分裂状態から成功して蜜月期に入りました：オープンソースを抱擁しています。筆者所在的会社は最近2年間で積極的に Java エコシステムを取り入れており、言い換えれば、ビジネス開発においては、現在の Java エコシステムは国内で実証された魅力です&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vscodeプラグインのおすすめ&#34;&gt;VSCodeプラグインのおすすめ
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-07-17.png&#34;
	width=&#34;310&#34;
	height=&#34;306&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;プラグインリスト&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;プラグインにはそれぞれReadmeが付属しており、基本的な使い方や主要な機能、一部のプラグイン作者からは動的な効果表示画像も提供されています。
&lt;code&gt;Paste Image&lt;/code&gt;とhugoの画像プラグイン方式を組み合わせることで、非常に簡単に画像を導入できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ショートカットキーを忘れてしまった場合、VSCodeのショートカットキー管理メニューを開き、「md」で検索して数回確認しましょう。Readmeをもう一度見直すのも良いでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;Hugo
&lt;/h2&gt;&lt;p&gt;筆者は&lt;code&gt;hexo&lt;/code&gt;から&lt;code&gt;hugo&lt;/code&gt;に切り替えた。愛折衝は私の天性であり、結局は忍耐強く静かに記事を書くことができないのだ。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugoは、個別のフォルダに画像とmdドキュメントを置くことをサポートする。&lt;/li&gt;
&lt;li&gt;Academicテーマのデザイン上では、様々な種類の文章スタイルをサポートしている。&lt;/li&gt;
&lt;li&gt;様々な便利なカスタム拡張機能がある。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学術&#34;&gt;学術
&lt;/h2&gt;&lt;p&gt;公式サイトではデフォルトで&lt;code&gt;exampleSite&lt;/code&gt;を使用し、メニューのインポートには&lt;code&gt;#コンポーネント&lt;/code&gt;という方式が推奨されます。&lt;/p&gt;
&lt;p&gt;URLのパターンは、ナビゲーションバーをクリックすることで単一ページのジャンプを実現し、ホームページでのスクロールを回避します（これは純粋な個人的な好みです）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタイル：ノート、講演、電子書籍&lt;/li&gt;
&lt;li&gt;柔軟性：全体的なスタイルのカスタマイズ、カスタムCSSスタイルの適用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このテーマは、中国語のサポートがまだ十分ではありません。主に視覚的な観点からすると、フォントサイズが中国語の読書習慣に合っていません。Hexoの開発者はほとんどが中国人であり、この点ではHugoよりも優れています。&lt;/p&gt;
&lt;p&gt;しかし、自分で手を加えて、食材を増やし、食卓を豊かにします。ブラウザで要素を検査し、要素を見つけたら、必要なCSSスタイルの名前を知るために、「Insert Style Rule Below」をクリックします。ネストされた多層構造のCSSでも、簡単にノード名を取得できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[カスタムCSSの導入](https://sourcethemes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;学術用&#34;&gt;学術用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;テーマに組み込みの構文ハイライト設定 &lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式リンク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;子供たちがまた文句を言っているようだ。「最初から最後まで、曖昧で、細かいこととか全く触れてない」と。&lt;/p&gt;
&lt;p&gt;私が伝えたいのは、以下のものがあれば十分だということ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式マニュアル&lt;/li&gt;
&lt;li&gt;プラグインの説明書&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい技術をすぐに使いこなすには、まず公式サイトのドキュメントを読むことをお勧めします。内容を完全に理解しようとする必要はありませんが、少なくとも概要は把握しておきましょう。検索エンジンで見つかる結果は、必ずしも最新版と一致しない可能性があります。誤解を招くこともあります。新書も同様に、まず目次を見て、著者が何を説明するのかを把握しましょう。場合によっては、序文を読むのが良いでしょう。特に海外の著作を翻訳した際に、訳者の序文には書籍や核心的な内容がまとめられていることがあります。&lt;/p&gt;
&lt;h2 id=&#34;エッグ-卵&#34;&gt;エッグ (卵)
&lt;/h2&gt;&lt;p&gt;Hugo Academicの組み込みスタイルを切り替え、サイトに公開後、アクセス時にスタイルが変更されない。賢い仲間たちがすでに気づいていたようで、ローカルブラウザのキャッシュをクリアすると解決する。私のような機転の利いた者: F12の開発者ツールで&lt;code&gt;network&lt;/code&gt;タブを選択し、&lt;code&gt;disable cache&lt;/code&gt;オプションをチェックしてリフレッシュすれば、問題解決！
&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
