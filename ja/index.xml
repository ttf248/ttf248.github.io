<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>向叔の手帳</title>
        <link>https://ttf248.life/ja/</link>
        <description>Recent content on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 03:11:57 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GitHub Pages ギミック：複数のPagesをデプロイする</title>
        <link>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;最近、体内時計が少し狂っていて、深夜2時過ぎまでGitHub Pagesのデプロイに手を出していた。&lt;/p&gt;
&lt;p&gt;終わった後、やっとご飯を食べに行ったんだけど、食べた直後に眠くなり、食べて帰ってきて8時半くらいには、眠くて、少し仮眠ったらそのまま寝てしまい、起きたらもう午前2時過ぎだった。&lt;/p&gt;
&lt;p&gt;まだ始動もせず消滅したカテゴリー：AI 研習会&lt;/p&gt;
&lt;p&gt;ツッコミ&lt;/p&gt;
&lt;p&gt;昨日まで「フロントエンドをいじらない」と言っていたのに、今日はフロントエンドではなく、UI/UXの体験についていじっている。&lt;/p&gt;
&lt;p&gt;プロジェクト&lt;/p&gt;
&lt;p&gt;皆様、弊社の旧友である&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt;をご紹介させていただきます。&lt;/p&gt;
&lt;p&gt;その通り、元々選択した株のプロジェクトです。このプロジェクトで全体の構造を再構築し、今後のAIプログラミング関連の内容はこちらに統合していきます。&lt;/p&gt;
&lt;p&gt;複数のページを部署する。&lt;/p&gt;
&lt;p&gt;プロジェクトは[https://cnb.cool/ttf248/ai-coding-demo]でホストされています。周知の事情により、中国国内ではPagesを公開できないため、海外のGitHubに公開する必要があります。&lt;/p&gt;
&lt;p&gt;ブログは海外のGithubに公開されているものです。まだ試していませんが、複数のプロジェクトでpagesを公開したり、現在取り組んでいるプロジェクトが従来のブログサイトではなく、多くのドキュメントといくつかの静的なhtmlデザインが含まれているという状況です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;はい、このページは私が最初にクリックして気づいたのですが、複数のプロジェクトをデプロイしたpagesはブログの公開に影響を与えず、ブログのドメイン下に新しいパスが追加されるだけです。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ai-coding-demo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ttf248.life/ai-coding-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここを見て、まさに完璧だと思った。&lt;/p&gt;
&lt;p&gt;AI研究会&lt;/p&gt;
&lt;p&gt;昨日新設したカテゴリーで、AIを使って多くのコンピュータのコースを学習しようと考えた。例えば、アルゴリズムや LeetCode の問題演習など。&lt;/p&gt;
&lt;p&gt;毎回の学習記録をブログに投稿し、知識データベースを構築。新カテゴリー「AI 研習会」を作成しました。&lt;/p&gt;
&lt;p&gt;今のところ、異なるコースごとに新しいプロジェクトを作成し、学習ノートは各プロジェクトのReadme.mdにまとめて記述するのが良いようだ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>古傷、華やかさに惑わされる瞳</title>
        <link>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</link>
        <pubDate>Mon, 26 May 2025 23:54:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</guid>
        <description>&lt;p&gt;長年バックエンド開発に注力していましたが、最近になりAIプログラミングの探求を始め、フロントエンド関連の内容にも触れました。しかし、この試行錯誤の中で、また昔からある癖——華やかさに目がくらむ——に陥っていることに気づきました。AIを使ってフロントエンドインターフェースを実現したいと考えがちですが、実際には現在の仕事に対する具体的な助けにはならず、むしろ気を散らすだけです。&lt;/p&gt;
&lt;p&gt;AIの適用場面&lt;/p&gt;
&lt;p&gt;小規模プロジェクトにおいて、AIツールは特に大きな効果を発揮します。独立性が高く、システムとの結合度が低く、ビジネスロジックが単純な関数を記述する際には、いっそうその手腕が光ります。これらのタスクは通常、明確な入力と出力があり、コンテキスト依存性が少ないため、現在のAIによるプログラミング支援の能力範囲に最適です。&lt;/p&gt;
&lt;p&gt;しかし、複雑なシステムアーキテクチャや高度なビジネスロジックに直面すると、AIの限界が徐々に明らかになる。一見妥当に見えるものの、実際にはプロジェクトの真の要求から逸脱したコードを生成したり、原因究明が困難な潜在的な問題を導入したりする可能性がある。このような状況では、AIは完全なコードジェネレーターとしてではなく、むしろ補助ツールとして活用すべきである。生成されたコードについては厳格なレビューとテストを行い、実際の要件を満たしていることを確認する必要がある。&lt;/p&gt;
&lt;p&gt;間違いと学習の代償&lt;/p&gt;
&lt;p&gt;AIによるフロントエンドコード生成を試みる中で、多くの課題に直面しました。フロントエンドは得意分野ではないため、問題の切り分けには時間と労力がかかります。プロンプトを調整してAIにコードを書き直しても、初歩的なエラーを避けることは難しいです。この繰り返しの試行錯誤は時間を浪費するばかりで、現在の自分の努力は、不慣れなフロントエンドではなく、バックエンドのビジネスロジックに集中すべきだと気づかされました。&lt;/p&gt;
&lt;p&gt;週末に完了したプロジェクトを振り返ると、バックエンド開発とユーザーインタラクションロジックに集中し、コンソールで機能を実装することが現時点で最も効率的な選択だと確信する。より多くの時間とエネルギーがある時に、フロントエンドの知識を体系的に学ぶ方が良い戦略かもしれない。&lt;/p&gt;
&lt;p&gt;フロントエンド学習計画&lt;/p&gt;
&lt;p&gt;フロントエンド技術のスタックは複雑で多様なため、すぐに習得するのは現実的ではありません。まずは Vue.js や React.js のようなフレームワークを一つ選び、そのコアコンセプトと使い方を深く学習する予定です。基礎知識に慣れてからこそ、AI を活用してフロントエンドコードを生成することで初めて、不慣れによるエラーや時間浪費を効果的に回避できます。&lt;/p&gt;
&lt;p&gt;結局、現段階ではバックエンド開発に重点を置き、着実にコアスキルを向上させることが重要だ。時機が整ったら、フロントエンドとAIの組み合わせを探求するのも良いかもしれないし、より大きな成果が得られるかもしれない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>クロード4リリース、試作：Hugoタグ、ハイパーリンク翻訳アシスタント</title>
        <link>https://ttf248.life/ja/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;このサイトはHugoで開発されているのですが、筆者はいつも中国語のタイトルを使っているため、生成される記事のハイパーリンクが親しみやすくありません。要するに、発信したときに見栄えが悪く、中国語の文字がハイパーリンク内で%E4%BD%A0%E5%A5%BDのような形式に変換されてしまうのです。Slugを設定すれば解決できるのですが、毎回手動で設定する必要があり、面倒です。&lt;/p&gt;
&lt;p&gt;そこで、今日はClaude4を使って翻訳アシスタントを開発してみようと思います。中国語のタイトルを自動的に英語のスラッグに変換し、記事中にハイパーリンクを追加することで、手動設定の手間を省きます。&lt;/p&gt;
&lt;p&gt;クロード4は素晴らしい、文脈理解能力と複雑なタスク処理の効率が大幅に向上している。&lt;/p&gt;
&lt;p&gt;プロジェクトアドレス&lt;/p&gt;
&lt;p&gt;国内プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
海外プロジェクトの場所：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コード実装&lt;/p&gt;
&lt;p&gt;実装のアイデアですが、まず全ての記事をスキャンし、タグ情報と記事タイトルを抽出した後、ローカルの大規模言語モデル（gemma-3-12b-itなど）を用いて翻訳します。&lt;/p&gt;
&lt;p&gt;実際の開発において、以前のモデルと比較して、&lt;code&gt;Claude4&lt;/code&gt; はいくつかの顕著な特徴を示しています。多岐にわたる機能要件に対応するため、&lt;code&gt;Claude4&lt;/code&gt; は自動的にインタラクティブメニューを設計し、様々な使用シナリオを網羅的に考慮しています。例えば、タグ処理に関して、&lt;code&gt;Claude4&lt;/code&gt; はタグの統計と分析だけでなく、分類統計もサポートし、さらには&lt;strong&gt;未ラベルの記事&lt;/strong&gt;を検出することも可能です。また、&lt;strong&gt;プレビュー&lt;/strong&gt;機能やタグページ生成機能も提供されています。&lt;/p&gt;
&lt;p&gt;ローカルLLMとの連携、翻訳キャッシュの追加、広範囲にわたるコードのリファクタリングなど、あらゆることを&lt;code&gt;Claude4&lt;/code&gt;が一括で完了させ、ほとんど問題なく実行できた。プロジェクト規模は大きくないものの、多くの小機能が含まれていた。従来の大規模言語モデルでは開発中に内容を忘れてしまうことが多かったが、今回の&lt;code&gt;Claude4&lt;/code&gt;は非常に優れたパフォーマンスを発揮し、&lt;strong&gt;コンテキストの忘れがあまり見られなかった&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;要するに、知能が向上し、次はその後の開発作業を &lt;code&gt;Claude4&lt;/code&gt; に移行する予定です。日常のコーディングにおける主力モデルとして活用します。&lt;/p&gt;
&lt;p&gt;翻訳キャッシュ&lt;/p&gt;
&lt;p&gt;この点に関しては、大規模言語モデルの呼び出し回数を減らすだけでなく、実際にローカルで12Bモデルを実行すると、効率は高く、作業を妨げることはありません。しかし、毎回大規模言語モデルを呼び出すと少し遅くなることがあります。また、記事の関連性を固定するために全量更新を行う際、記事のタイトルが長い場合、稀に翻訳結果が異なり、記事のリンクが変わってしまうという事態が発生することがあり、これは非常に困ります。&lt;/p&gt;
&lt;p&gt;機能改善&lt;/p&gt;
&lt;p&gt;プロジェクト全体を &lt;code&gt;Claude4&lt;/code&gt; に投げ込み、最適化の余地を分析した結果、以下の提案が得られました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;配置外置化 - 提高可维护性和灵活性
结构化日志 - 便于问题排查和监控
性能监控 - 了解系统运行状况
用户体验 - 进度条等视觉反馈
错误处理 - 更完善的异常处理机制
代码组织 - 更清晰的模块划分
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードを確認しました、全て問題ありません。例えば設定ファイルですが、元のコードの設定をデフォルト設定に変換し、設定ファイルを読み込む際に、対応する設定ファイルがない場合、自動的にデフォルトの設定ファイルが生成されるため、ユーザーの誤りを避けることができます。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;
&lt;/h3&gt;&lt;p&gt;要件：本文を翻訳する際、現在の翻訳効率を動的に計算し、残りの時間を予測し、関連情報をコンソールに出力すること。現在、記事の文字数を取得済み。各行を翻訳する際に、現在の翻訳文字数、時間、100字あたりの翻訳時間の推定値を算出し、同時に記事全体の翻訳にかかる残り時間を予測する。&lt;/p&gt;
&lt;p&gt;コードは終わったけど、あまり満足いかないので、AIに新しいデザイン案を提供してもらった。&lt;/p&gt;
&lt;p&gt;効率計算方法を複数提供：リアルタイム効率、平均効率、スライディングウィンドウ効率
表示方法を改善：プログレスバー、段階的統計、動的更新
より多くの有用な指標を追加する：API呼び出し回数、成功率など&lt;/p&gt;
&lt;p&gt;コードが完了した後、新たな驚きがありましたが、翻訳効率の統計情報がリアルタイムで表示され、無駄なスクロールは発生しませんでした。&lt;/p&gt;
&lt;p&gt;翻訳本文を英語に（合計7163文字）…
検出された翻訳が必要な行は53行です。
[1/53] ステージ1/6 [░░░░░░░░░░░░░░░░░░░░░░░░░] 1.9% 翻訳 354 文字…
完了 (3.1秒) | API呼び出し #1
完了 (1.5秒) | API呼び出し #2
完了 (0.9秒) | API呼び出し #3
完了 (0.2秒) | API呼び出し#4
完了 (1.0秒) | API呼び出し #5
完了 (1.0秒) | API呼び出し #6
完了 (0.2秒) | API呼び出し #7
進捗：行 13.2% (7/53) | 文字 12.9% (925/7163) 114.6 字/秒
⚡効率：リアルタイム76.4｜平均117.9｜最近109.0｜段階113.6文字/秒 📊
成功率：100.0%（7/7）| 残り：46行、7秒] 9.4% 翻訳 110文字…
残り時間: 55秒 | 推定完了: 00:10:19 8秒] 進捗 11.3% 翻訳 114 文字…
処理速度: 3211.3 行/分 | 合計時間: 8秒] 13.2% 翻訳 16 文字…
[8/53] ステージ1/6 [███░░░░░░░░░░░░░░░░░░░░░░] 15.1% 翻訳 166 文字…&lt;/p&gt;
&lt;p&gt;以前は制御プログラムをあまり書いていなかったので、どのように実現されているのか興味があり、コードを確認した。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// 清屏并重新显示 (动态刷新效果)
if translationCount &amp;gt; 1 {
   fmt.Print(&amp;quot;\033[6A\033[K&amp;quot;) // 上移6行并清除
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;性能統計メニュー&lt;/p&gt;
&lt;p&gt;自分で設計したわけでもないのに、新機能の&lt;strong&gt;パフォーマンス統計メニュー&lt;/strong&gt;がこんなに完成されているとは。&lt;/p&gt;
&lt;p&gt;パフォーマンス統計：
翻訳回数: 360
キャッシュヒット率：1.4%（5/365）
平均翻訳時間: 315.927234ms
ファイル操作：73
試行回数：0&lt;/p&gt;
&lt;p&gt;進捗状況表示&lt;/p&gt;
&lt;p&gt;新たに追加された&lt;strong&gt;プログレスバー表示&lt;/strong&gt;。詳細な進捗状況、経過時間、および残り時間の推定値。&lt;/p&gt;
&lt;p&gt;機能を選択してください (0-13): 10
翻訳目標を収集中です。
キャッシュファイルが読み込まれました。翻訳記録は 0 件です。&lt;/p&gt;
&lt;p&gt;翻訳キャッシュ統計:
🏷️ ラベル総数：229個
記事総数：131件
キャッシュ済み: 0 個
360個&lt;/p&gt;
&lt;p&gt;確認しますか？ 全量翻訳キャッシュを生成します。(y/n): y
🚀 全量翻訳キャッシュを生成中…
キャッシュファイルが読み込まれました。翻訳記録は 0 件です。
翻訳をキャッシュから確認中…
🔄 360個の新しいタグを翻訳する必要があります。
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - 時間: 3秒 - 残り時間: 3分8秒💾 キャッシュファイル保存済み、翻訳記録5件を含む
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2.8%) - 時間: 6秒 - 残り時間: 3分28秒💾 キャッシュファイル保存済み、翻訳記録10件を含む
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - 時間: 9秒 - 残り時間: 3分30秒💾 キャッシュファイル保存済み、翻訳記録15件を含む
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - 時間: 13秒 - 残り時間: 3分36秒💾 キャッシュファイル保存済み、翻訳記録20件を含む
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - 時間: 16秒 - 残り時間: 3分33秒💾 キャッシュファイル保存済み、25件の翻訳記録を含む
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8.3%) - 時間: 19秒 - 残り時間: 3分30秒💾 キャッシュファイル保存済み、30件の翻訳記録を含む
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - 時間: 22秒 - 残り時間: 3分25秒💾 キャッシュファイル保存済み、35件の翻訳記録を含む&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;=== Hugo 博客管理工具 ===

🚀 核心功能
  1. 一键处理全部 (完整博客处理流程)

📝 内容管理
  2. 生成标签页面
  3. 生成文章Slug
  4. 翻译文章为多语言版本

💾 缓存管理
  5. 查看缓存状态
  6. 生成全量翻译缓存
  7. 清空翻译缓存

  0. 退出程序
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>計画的な出生政策の多面的影響：社会構造から経済・政治の深層変革まで</title>
        <link>https://ttf248.life/ja/p/planned-parenthood-multidimensional-impact-social-structure-economic-political-transformation/</link>
        <pubDate>Sat, 24 May 2025 02:36:49 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/planned-parenthood-multidimensional-impact-social-structure-economic-political-transformation/</guid>
        <description>&lt;p&gt;中国の計画生育政策は、人口増加を抑制すると同時に、家系的な発展を封じ込め、伝統的な社会構造に衝撃を与え、家族経営企業や政界における家族勢力の拡大を抑えました。韓国財閥やインドの家族独占と比較すればその独自性が際立ちます。現在、出生制限を緩和しましたが、少子化などの課題に直面しており、新たな寡占のリスクにも警戒が必要です。多方面でバランスを取る必要があります。&lt;/p&gt;
&lt;h4 id=&#34;一人口統制と家族型発展の盛衰&#34;&gt;一、人口統制と家族型発展の盛衰
&lt;/h4&gt;&lt;p&gt;計画生育政策は、中国でほぼ40年にわたって実施されてきた基本国策であり、その直接的な効果は顕著である。データによると、1978年から2007年までの間、中国の人口自然増減率は12‰から5.2‰に低下し、4億人以上が生まれるのを抑制、世界の人口における中国の割合は22.2%から20.1%に減少した。このような人口増加率の急激な低下は、中国社会の家族構成を深く再構築した。家族経営企業を例にとると、計画生育政策の実施後、企業のオーナーが子供を産む数も著しく減少した。政策以前は3人以上の子供を持つ割合が40.63%であったのが、政策後は18.46%に急降下し、一人っ子の割合は6.25%から32.31%に上昇した。このような構造的な変化は、直接的に家族経営企業が選択できる内部後継者の範囲を大幅に狭め、客観的に企業の世代間拡大能力を抑制した。&lt;/p&gt;
&lt;p&gt;韓国とインドの状況を比較すると、その違いは顕著です。韓国は厳格な計画生育を実施していないものの、出生率は長らく低迷しています（2023年は0.7）。しかし、財閥グループはクロス持ち株や相続税回避などの手段により、依然として国家経済の命脈をしっかりと握っています。5大財閥の総収入は韓国GDPの50%を超え、サムスン電子社だけでも全国GDPの20%を占めます。一方、インドは異なる様相を見せており、79%の経済産出が家族経営企業によって貢献され、6つの財閥が通信や鉄鋼などの主要分野を支配し、トップ20社の利益が全国企業の利益の80%を占めています。この違いの中核にあるのは、中国の計画生育政策が家族規模を制限することで、家族経営企業の拡大の人材基盤を根本から弱体化させたという点です。韓国とインドは政策環境の違いにより、家族勢力が経済領域に継続的に浸透することができました。&lt;/p&gt;
&lt;h4 id=&#34;独占の抑制と社会構造の転換&#34;&gt;独占の抑制と社会構造の転換
&lt;/h4&gt;&lt;p&gt;計画生育政策が経済分野に与える影響は、特に独占現象の抑制として顕著です。中国の家族経営企業は、娘子の数が減少したため、韓国のような財閥グループを形成することが難しくなっています。韓国を例にとると、財閥は「循環出資」によって家族による支配権を維持しており、サムスン家系はグループ全体の2%の株式しか保有していませんが、複雑な股权構造を通じて全局を掌握しています。一方、中国では計画生育後、家族経営企業は普遍的に「子承父業」の難境に直面し、職業マネージャーを導入したり、股权多元化改革を行わざるを得なくなりました。澎湃新聞の研究によると、計画生育後、家族経営企業の女性後継人割合は13.85%から34.21%に上昇し、さらに後継人の学歴も著しく向上しており、本科以上の学歴の割合は43.75%から98.46%に上昇しています。この転換は家族による支配を完全に排除するものではありませんが、単一の家族による市場の独占可能性を大幅に低下させます。&lt;/p&gt;
&lt;p&gt;社会構造のレベルにおいて、計画生育政策は伝統的な家族中心のモデルを加速的に解体しました。中国の世帯規模は1982年の4.41人/世帯から2020年には2.62人/世帯に減少し、小規模化する世帯は経済的、教育的、社会的なサポートといった家族機能への影響を弱めました。これとは対照的に、インドでは世帯規模が約4人と依然として維持されており、カースト制度と家族の力が深く結びついており、社会流動性が低い状況を生み出しています。中国における家族構造の変化は個人主義の発達に道を開き、2023年には単身成人の人口が2億4千万人を迎え、「一人経済」と呼ばれる消費市場が台頭する傾向を見せています。この変化はさらに家族の経済的な影響力を希薄化させています。&lt;/p&gt;
&lt;h4 id=&#34;政治分野における権力分立化&#34;&gt;政治分野における権力分立化
&lt;/h4&gt;&lt;p&gt;計画生育政策は、政治生態にも同様に深い影響を与えた。伝統的に、家族勢力は血縁や姻親関係を通じて基層政治に浸透してきた。例えば、河南省新野県の161の政治家族がほぼ全ての政府部門を掌握し、副科級以上の幹部の中で20%が「官二代」（公務員の息子）であった。しかし計画生育政策の実施により、家庭規模が縮小したことで、家族ネットワークの拡大は制限された。北京大学の研究によると、計画生育後、役人の子供たちの数は減少し、家族政治ネットワークの複雑さが著しく低下した。さらに、政策が推進した教育普及（一人当たりの受教育年限が1982年の5.2年から2023年の10.9年に向上）は、社会流動を促進し、家族勢力が政治資源を独占することを弱めた。&lt;/p&gt;
&lt;p&gt;韓国とインドとの比較において、韓国財閥と政治の深い癒着（サムスングループ幹部と政府の権力と金銭の取引など）や、インドのカースト制度下での家系による政治世襲は、中国政策の独自性を際立たせている。中国は計画生育政策によって客観的に権力世襲の可能性を減少させた。地方レベルでは依然として家系現象が存在するものの、全体的な傾向としては権力構造の分散化が見られる。2025年の全国両会期間中には、政協委員から「人口と計画生育法」を「人口と生育法」に改称し、全面的に少子化政策を解除するという提案があり、この動きは今後の政治生態の変化にさらに影響を与える可能性がある。&lt;/p&gt;
&lt;h4 id=&#34;政策変更後の課題と機会&#34;&gt;政策変更後の課題と機会
&lt;/h4&gt;&lt;p&gt;2016年の二子供政策、そして2021年の三子供政策の実施は、中国の少子化政策における大きな転換点を示した。しかしながら、その効果は限定的であり、2022年の出生率はわずか1.18と、世代交代水準（2.1）を大きく下回っている。出産開放が家族経営企業に与える影響は二面性を持つ。一方では、一部の起業家が多産によって家族の事業承継能力を高める可能性がある。例えば、浙江娃哈哈グループの宗慶后氏の娘である宗馥莉氏が独生女として後を任されている。他方で、高い育児費用（一线都市で子供を18歳まで養育する平均費用は100万元に達する）や、キャリアウーマンの出産意欲低下により、家庭規模の拡大は制限される。&lt;/p&gt;
&lt;p&gt;経済分野において、出生率の開放は新たな寡占形態を生み出す可能性があります。三つの子供を認める政策が、母子・保育などの業界における集積度を高め、2025年には幼児保育市場規模は約1621.3億元に達すると予測されます。大手企業は中小企業を買収・統合し、市場集中度CR5は55%を超えています。この集積度の高まりは効率をもたらす可能性がありますが、新たな寡占リスクには警戒が必要です。政府は出生を奨励することと市場集中を防ぐことのバランスを取りながら、独占禁止法による規制強化や、育児補助金の提供（例えば杭州市では三つ子供を持つ家庭が毎月3000元分の粉ミルク補助金を受け取れる）などにより、家庭の負担を軽減する必要があります。&lt;/p&gt;
&lt;p&gt;政治の領域において、出生制限の緩和は一族勢力に微妙な影響を及ぼす可能性がある。短期的に伝統的な一族政治ネットワークを回復することは困難であるが、長期的には多子の一族が地方政治において新たな影響力を形成するかもしれない。したがって、幹部選抜メカニズムの改善や監督強化（例えば、幹部の親族の職務回避制度の確立）は、権力世襲を防ぐための鍵となる。&lt;/p&gt;
&lt;h4 id=&#34;五国際鏡鑑と未来展望&#34;&gt;五、国際鏡鑑と未来展望
&lt;/h4&gt;&lt;p&gt;韓国とインドの経験が示すように、財閥勢力の盛衰は政策との密接な関連性がある。韓国は財閥を支援して経済発展を実現したが、社会的な公平性が損なわれたという代償も払った。一方、インドは有効な政策がなく家族による独占を抑制できなかったため、貧富の格差が拡大した。中国の計画生育政策は人口を抑制する一方で、客観的に財閥勢力の拡大を抑えたが、高齢化の加速や労働力不足といった問題も引き起こしている。&lt;/p&gt;
&lt;p&gt;今後、中国は人口政策と社会経済発展のバランスを新たに模索する必要がある。一方では、出産支援政策（延長された産休や包括的な保育施設の建設など）を通じて出生率を高め、他方で独占禁止法の執行を強化し、家族経営企業による資本操作を通じた新たな独占を防ぐ必要がある。政治分野においては、基盤民主主義の構築をさらに進め、監督メカニズムを改善し、権力の行使を透明化する必要がある。&lt;/p&gt;
&lt;p&gt;要するに、計画生育政策は中国社会の変革における重要な推進力であり、その影響は人口分野を超えている。それは家族構造、経済モデル、そして政治環境を再構築し、中国が韓国やインドのような家族による独占の罠に陥ることを避けるための道筋を示した。政策調整に伴い、新たな人口構成の下で効率と公平性、自由と秩序をどのように調和させるかが、中国が直面する長期的な課題となるだろう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>AIを使いすぎたせいか、少し後遺症が出ている。</title>
        <link>https://ttf248.life/ja/p/ai-overuse-side-effects/</link>
        <pubDate>Wed, 14 May 2025 19:39:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-overuse-side-effects/</guid>
        <description>&lt;p&gt;新しい&lt;code&gt;AI インスピレーションラボ&lt;/code&gt;を設立してから、色々なものの試しにAIで記録し、発表するものが増えたせいで、静まって自分自身で考える時間が減ってしまった。今後はこの欄の産出を少しコントロールして、月刊形式にするのが良いだろう。毎月1記事ずつ発表するのがいい。&lt;/p&gt;
&lt;p&gt;まるで何らかの後遺症や副作用のようで、効率は上がったものの、思考の深さと広がりが低下している。&lt;/p&gt;
&lt;h2 id=&#34;効率向上否定できない&#34;&gt;効率向上：否定できない
&lt;/h2&gt;&lt;p&gt;魚の七秒間の見聞 以前、この欄目はあまり維持されていませんでした。いくつかのホットな話題については、怠惰ゆえにインターネットで資料を検索したり、記録をまとめたりしませんでしたが、今では様々なAIツールがあるので、大まかなアウトラインを作成するだけで、AIが自動的に関連イベントを検索し記録し、必要な記事を生成してくれます。簡単なフォーマットの整理をして公開すれば良いのです。&lt;/p&gt;
&lt;p&gt;これはまさに怠け者の救いといったものだ、効率がかなり上がり、まるで労少なく成果を上げているかのようだ。&lt;/p&gt;
&lt;p&gt;原稿を書く作業を脇に置いてコードを書いている時の効率は、間違いなく向上しています。以前は詳細なAPIインターフェースドキュメントの説明を読む必要があった多くのコードの作成ですが、今はそれを直接スキップできます。このスキップは非常に重要です。APIへの慣れは「体力仕事」であり、「頭脳労働」ではありません。AIにこの部分を任せるのは、まさにそのものです。&lt;/p&gt;
&lt;h2 id=&#34;ゴミコンテンツ&#34;&gt;ゴミコンテンツ
&lt;/h2&gt;&lt;p&gt;たくさんの原稿があって、内容はあまり良くない。完全に否定できるわけではないけれど、読んでいてどうだろうか、生活感がないというか、昔から好かなかったスタイルで、味が無い感じだ。&lt;/p&gt;
&lt;p&gt;別の視点から言うと、AIが生成するコンテンツは、確かにベルトコンベアで大量生産されたようなもので、魂がないように見える。&lt;/p&gt;
&lt;p&gt;新時代のインターネットゴミ&lt;/p&gt;
&lt;h2 id=&#34;忘却性&#34;&gt;忘却性
&lt;/h2&gt;&lt;p&gt;この手の原稿は、すべてAI生成もので、読者の状況は不明ですが、時間が経つと、自分の記憶も曖昧になり、忘れそうになることがあります。&lt;/p&gt;
&lt;p&gt;似した問題は、コードを書いている時にも起こります。コードのコミット履歴を見ないと、自分が当時どう考えていたのか、なぜそう書いたのか全く分かりません。特に、コードが通るまでAIと何度もやり取りして生成されたコードは、当初の考え方とは大きく異なり、場合によっては全く違うものになります。&lt;/p&gt;
&lt;h2 id=&#34;検索&#34;&gt;検索
&lt;/h2&gt;&lt;p&gt;最近Googleや百度を開く回数が明らかに減った。多くの問題をAIで検索すると、インタラクションも検索結果も従来の検索エンジンよりずっと良い。&lt;/p&gt;
&lt;p&gt;今、生存しているかどうか分からない「빙 아이(bing ai)」に追悼の意を捧げましょう。大手企業の中で最初にリリースされ、インターネット検索が可能なAIツールです。&lt;/p&gt;
&lt;p&gt;グーグルを使う機会が減り、&lt;code&gt;stackoverflow&lt;/code&gt;へのアクセスも減った。多くの問題は直接AIに聞けるし、このサイトも時代に取り残されていくのだろう。&lt;/p&gt;
&lt;h2 id=&#34;結び&#34;&gt;結び
&lt;/h2&gt;&lt;p&gt;筆者が現在もメンテナンス中のブログですが、元々アクセス数はそれほど多くなかったし、今はさらに期待できません。むしろ、記録しておく場所という側面が強く、自分自身が見るためのものです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>貿易戦争が突然一時停止</title>
        <link>https://ttf248.life/ja/p/trade-war-pauses/</link>
        <pubDate>Mon, 12 May 2025 19:07:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/trade-war-pauses/</guid>
        <description>&lt;p&gt;2025年の貿易戦争関税の推移は「エスカレーション—報復—協議」のサイクルをたどり、米中対立は関税闘争からルールベースの競争へと転換した。短期的な緩和は市場の圧力を和らげたものの、長期的な不確実性は依然として存在し、WTO裁決、サプライチェーン調整、地政学的な変化が世界経済に与える継続的な影響を注視する必要がある。&lt;/p&gt;
&lt;p&gt;人が自分の認識を超えるお金を稼ぐことはできない。今年の貿易戦争の発動で始まった株価の大暴落だが、現在ではほぼ反発は完了し、その間にどれだけの個人投資家が犠牲になったのか想像もつかない。&lt;/p&gt;
&lt;p&gt;2025年の貿易戦争関税タイムライン整理&lt;/p&gt;
&lt;p&gt;以下は、2025年の貿易戦争関税のタイムライン整理であり、米中およびその他の国の主要な出来事を組み合わせることで、関税政策の動的な変化を提示します。&lt;/p&gt;
&lt;h3 id=&#34;一2025年4月関税の包括的な引き上げと報復措置&#34;&gt;一、2025年4月：関税の包括的な引き上げと報復措置
&lt;/h3&gt;&lt;p&gt;米国に対する関税措置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4月2日：トランプ政権が第14257号行政命令に署名し、米国への中国からの輸入品に対して34％の「相互関税」を課すことを発表した。この範囲には香港とマカオの商品も含まれる。&lt;/li&gt;
&lt;li&gt;4月8日：米国は、中国に対する「相互関税」の税率を34％から84％に引き上げ、さらに第14259号および第14266号行政命令を発布し、より多くの商品に関税を課した。&lt;/li&gt;
&lt;li&gt;4月10日：ホワイトハウスは行政命令を修正し、中国に対する関税総額を145％に引き上げるとともに、小物包みの関税も引き上げる（800ドル以下の商品の税率は90％から120％へ）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中国の報復措置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4月4日：中国は、米国産の全ての品に対し34％の関税を賦課すると発表した。これは農産物、自動車、エネルギーなどの分野を網羅する。&lt;/li&gt;
&lt;li&gt;４月１０日：中国は、報復関税の税率を34％から84％に引き上げ、米側との同調を図った。&lt;/li&gt;
&lt;li&gt;4月12日：中国取消对美国商品加征的91％の関税（米国側の取り消しに対応）、そして24％の関税の実施を90日間停止、10％は維持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他の国の関税めぐり&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;米加貿易戦争：米国がカナダの鉄鋼・アルミニウム製品に25％の関税を課し、カナダは報復措置として298億カナダドルの米国製品に課税し、W T Oに訴えた。&lt;/li&gt;
&lt;li&gt;欧州連合と日本：欧州連合は米国製品に対し最大25％の関税を課し、日本は対米自動車関税に懸念を示し、貿易戦争が「互いに損をする」と語った。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二2025年5月ジュネーブでの交渉と関税緩和&#34;&gt;二、2025年5月：ジュネーブでの交渉と関税緩和
&lt;/h3&gt;&lt;p&gt;米中両国ハイレベル経済・貿易対話&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;５月１０日から１１日まで、米中両国はスイスのジュネーブで１６時間の協議を行い、《米中ジュネーブ貿易交渉共同声明》に達した。&lt;/li&gt;
&lt;li&gt;５月１２日：両者は一部関税の停止を発表：
&lt;ul&gt;
&lt;li&gt;米国は中国に対する関税の24％を一時停止（90日間）、10％を維持し、4月8日と9日の追加課税を取り消しました。&lt;/li&gt;
&lt;li&gt;中国は、報復関税を24％停止し、10％を維持するとともに、非関税措置を解除する。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;協議メカニズムを樹設する：両者は、関税削減とルールの策定に焦点を当て、中国、米国、または第三国で定期的に経貿協議を開催することで合意した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;経済影響と政策調整&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;米国での圧力：高い関税が中小企業の倒産を招く（アマゾンの出品者など、関税の高騰により廃業を余儀なくされる）、インフレ期待が高まる（コアPCEは3.3％に上昇すると予想）。&lt;/li&gt;
&lt;li&gt;中国の希土類報復：中国が希土類輸出規制を強化、密輸取り締まり、米軍需産業と新エネルギー産業に打撃、希土類などの重要鉱産に関して関税免除を余儀なくされる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三その他の重要な出来事と長期的な影響&#34;&gt;三、その他の重要な出来事と長期的な影響
&lt;/h3&gt;&lt;p&gt;ＷＴＯと多角的反応&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カナダと中国はそれぞれWTOに米国の鉄鋼・アルミニウム関税および「報復関税」が非差別原則に違反しているとして訴えを起こした。&lt;/li&gt;
&lt;li&gt;ＷＴＯ事務局長エミリア・ロバーツは、米国の関税が2025年の世界貿易量を1％縮小させ、発展途上国の困難を悪化させる可能性があると警告した。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;免除リストと業界への影響&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アメリカの免除品：37ページのリストには、希土類、黒鉛、医療用CT球管などの戦略物資が含まれており、サプライチェーンの脆弱性が露呈している。&lt;/li&gt;
&lt;li&gt;自動車関税：米国が輸入車に対して25％の関税を課したことにより、世界の自動車生産量は2％減ると予想され、北米地域では9％の減産となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;政治と戦略的駆け引き&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;トランプ政権は「報復関税」を通じて国際貿易秩序を再構築しようと試みたが、一方的な強要であるとの批判を受け、同盟国（EU、日本など）の反発を招いた。&lt;/li&gt;
&lt;li&gt;中国は、保護主義に対抗するために市場開放の拡大（例：輸入博覧会、関税免除の約束）に応じ、発展途上国との協力を呼び込む。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第四タイムラインまとめ&#34;&gt;第四、タイムラインまとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;時間&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;事件&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2025年4月2日 アメリカは中国に対し、香港・マカオの商品を含む34％の「報復関税」を課す。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4月8日、アメリカは中国に対する関税を84%に引き上げ、新たな課税命令を発表する。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4月10日&lt;/td&gt;
&lt;td&gt;中国は関税34％を報復措置として課したが、後に84％に引き上げ；米国は関税を145％に修正。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4月12日　米国が一部の商品（テクノロジー製品など）に免除措置を講じ、中国は91％の報復関税を取り消す。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;５月１０－１１日に米中日のジュネーブでの協議があり、２４％の関税を９０日間停止する共同声明が合意された。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5月12日、両者は関税停止と協議メカニズムを発表し、貿易の緊張を緩和した。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;五傾向と課題&#34;&gt;五、傾向と課題
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;短期緩和と長期的な競争：米中関税の一時停止はポジティブなシグナルだが、構造的な対立（ハイテク、エネルギーなど）は依然として存在し、中間選挙が政策の連続性に影響を及ぼす可能性がある。&lt;/li&gt;
&lt;li&gt;グローバルサプライチェーン再構築：企業はサプライチェーンの調整を加速しており、メキシコや東南アジアは「ニアショアリング」から恩恵を受けているものの、コスト上昇が回復を抑制する可能性がある。&lt;/li&gt;
&lt;li&gt;多角的難局：ＷＴＯ紛争解決メカニズムが制限され、地域貿易協定（米英協定など）が代替案として台頭する一方、分断を悪化させる。&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>2020～2025年江西省特別職と国家公務員教員採用データ：傾向と変革洞察</title>
        <link>https://ttf248.life/ja/p/jiangxi-specialized-post-and-national-cadre-teacher-recruitment-data-trends-and-transformation-insights-2020-2025/</link>
        <pubDate>Mon, 12 May 2025 18:59:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/jiangxi-specialized-post-and-national-cadre-teacher-recruitment-data-trends-and-transformation-insights-2020-2025/</guid>
        <description>&lt;p&gt;2020年から2025年の江西省の教員採用試験は大幅な縮小傾向を示している。特殊職教員採用数は6,617人から32人に急減（99.5%減）、一般公務員教員は11,324人から2,146人へ減少（81.1%減）。主要科目（国語・数学・英語）の割合は安定しているものの、全体数は縮小しており、音楽・体育・美術などの科目は割合が増加しているものの、絶対数は限られている（例えば、2025年は各科目にそれぞれ2人ずつの採用）。政策面では「退職一人の枠を別のポストに割り当てる」という編制の厳格化が進められ、教員資源は職業教育や僻地へ傾斜しており、伝統的な小中規模校のポストは大幅に縮小され、2025年には一部の科目で採用計画数がゼロとなっている。&lt;/p&gt;
&lt;p&gt;江西省の特殊教員採用数、過去5年間のデータを教科目ごとに集計し、表にまとめる。&lt;/p&gt;
&lt;p&gt;——————&lt;/p&gt;
&lt;p&gt;江西省教育庁、人事社会保障庁等の公式発表の採用公告及び公開データに基づき、2020年から2025年までの特任教員と国公立教員の採用状況を以下にまとめます。念のため申し上げますが、&lt;strong&gt;2025年のデータは計画採用数です&lt;/strong&gt;。また、一部の年度では教科細分情報が完全に公開されておらず、「未細分」と注記されている教科は総量統計またはデータ不足となります。&lt;/p&gt;
&lt;h3 id=&#34;一20202025年江西省特別職教員採用データ&#34;&gt;一、2020～2025年江西省特別職教員採用データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年度&lt;/th&gt;
&lt;th&gt;総採用数&lt;/th&gt;
&lt;th&gt;国語&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治・道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;保健体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;細分類なし&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;6,617&lt;/td&gt;
&lt;td&gt;1,200&lt;/td&gt;
&lt;td&gt;1,100&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;317&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;6,020&lt;/td&gt;
&lt;td&gt;1,100&lt;/td&gt;
&lt;td&gt;1,000&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;450&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;3,835&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;3,146&lt;/td&gt;
&lt;td&gt;650&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024&lt;/td&gt;
&lt;td&gt;2,008&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2025&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第二20202025年江西省公教編入教員採用データ&#34;&gt;第二、2020～2025年江西省公教編入教員採用データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年度&lt;/th&gt;
&lt;th&gt;総採用数&lt;/th&gt;
&lt;th&gt;国語&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;政治・道徳と法治&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;保健体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;細分類なし&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;11,324&lt;/td&gt;
&lt;td&gt;2,200&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;1,800&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;524&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;13,324&lt;/td&gt;
&lt;td&gt;2,500&lt;/td&gt;
&lt;td&gt;2,300&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;624&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;10,200&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;1,800&lt;/td&gt;
&lt;td&gt;1,500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;7,821&lt;/td&gt;
&lt;td&gt;1,500&lt;/td&gt;
&lt;td&gt;1,400&lt;/td&gt;
&lt;td&gt;1,200&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;421&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024&lt;/td&gt;
&lt;td&gt;3,957&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;257&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2025&lt;/td&gt;
&lt;td&gt;2,146&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;データ説明&#34;&gt;データ説明
&lt;/h3&gt;&lt;p&gt;データソース：江西省教育庁・人事社会保障庁の過去の採用告知および公式統計（2020～2024年は実際の採用数、2025年は計画数）。
学科分類：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;専門職教員は、主に農村における義務教育段階の教科を対象とし、2025年には主要科目としてのポストを少数のみに残します。&lt;/li&gt;
&lt;li&gt;国教員は全ての学年をカバーし、教科の設定もより包括的で、幼児教育や特別支援教育などを含みます（データが細かく分類されていないため、個別にリストアップされていません）。
傾向分析&lt;/li&gt;
&lt;li&gt;特別職教員の採用数が2020年に比べて99.5%減少し、一般銓録教員も81.1%減少したのは、人口構造の変化と教育資源の調整を反映しています。&lt;/li&gt;
&lt;li&gt;専門分野の寒暖
&lt;ul&gt;
&lt;li&gt;主要科目（国語、数学、英語）の割合は安定しているものの、採用数は年々減少している。&lt;/li&gt;
&lt;li&gt;音楽、体育、美術などの学科の割合は増加しているものの、絶対数は限られています（例えば、2025年には音楽、体育、美術それぞれわずか2人の入学生しかいない予定です）。&lt;/li&gt;
&lt;li&gt;一部の学科（英語など）は、生徒数の減少により募集停止となっている。
政策背景：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;編制が厳しくなっている： 「退職者から補充」の方針を推進し、新規採用を厳しく管理。2024年の定員外ポストの割合は68.6%に達した。&lt;/li&gt;
&lt;li&gt;構造改革：教員資源を職業教育や僻地に重点的に配り、伝統的な小中規模校の採用を大幅に削減する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完全なデータ取得のご提案&#34;&gt;完全なデータ取得のご提案
&lt;/h3&gt;&lt;p&gt;公式ルート&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;江西省教育庁ウェブサイト（http://jyt.jiangxi.gov.cn）&lt;/li&gt;
&lt;li&gt;江西省人事社会保障庁ウェブサイト（http://rst.jiangxi.gov.cn）
道具紹介&lt;/li&gt;
&lt;li&gt;江西省人事試験網（http://www.jxpta.com）：過去の職務一覧ダウンロード。&lt;/li&gt;
&lt;li&gt;江西省の特任教員に関するデータ。（http://www.jxedu.gov.cn）
注意点：&lt;/li&gt;
&lt;li&gt;2025年度の一部の学科（情報技術など）の募集人数は0となる予定ですが、代替措置により採用を補う可能性があります。&lt;/li&gt;
&lt;li&gt;専門分野の分類は年度によって異なる場合がある（「道徳と法」と「思想政治」が統合されるなど）、その年の公示によるものとする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;より詳細な学科別職位の分布や地域細分化データが必要な場合は、地元の教育委員会に直接連絡するか、公式採用システムでご確認ください。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ForkリポジトリへのPullRequestのマージ</title>
        <link>https://ttf248.life/ja/p/merge-pullrequest-to-fork-repository/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/merge-pullrequest-to-fork-repository/</guid>
        <description>&lt;p&gt;&lt;code&gt;github-readme-stats&lt;/code&gt;は、GitHubプロフィール用の統計情報ジェネレーターであり、ユーザーが自身のGitHubプロフィールに様々な統計情報やグラフを表示することを可能にします。多様なカスタマイズオプションが用意されており、ユーザーのニーズに合わせて調整できます。&lt;/p&gt;
&lt;p&gt;筆者は倉庫の管理をプロジェクトごとに分けていますが、GitHubでは倉庫のグループ化がサポートされていないため、異なる組織に分割するという方法で対応しています。&lt;code&gt;github-readme-stats&lt;/code&gt; の最新ブランチは、異なる組織の倉庫を跨いだ統計に対応していないため、筆者がフォークしたブランチに該当するコードをマージしました。&lt;/p&gt;
&lt;h2 id=&#34;最終効果&#34;&gt;最終効果
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;プルリクエストの元のurl&#34;&gt;プルリクエストの元のURL
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adds the ability to include data from organization repositories&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pull-request-を-fork-のリポジトリにマージする&#34;&gt;Pull Request を Fork のリポジトリにマージする
&lt;/h2&gt;&lt;p&gt;プルリクエスト（PR）をあなたのフォークしたリポジトリにマージするには、いくつかの方法があり、それはあなたが何をしたいかによって異なります。&lt;/p&gt;
&lt;p&gt;アップストリームリポジトリからPRをあなたのフォークにマージしますか、それとも
他の人のフォークからPRをあなたのフォークにマージする、または
フォークされたリポジトリからのプルリクエストをマージする（例えば、誰かがあなたにフォークしてプルリクエストを提出した場合）。&lt;/p&gt;
&lt;p&gt;まず、最も一般的なシナリオを説明します。&lt;strong&gt;リポジトリをフォークし、上流のプルリクエストを自分のフォークにマージしたい場合&lt;/strong&gt;です。手順は以下の通りです。👇&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方法一コマンドライン方式最も汎用的&#34;&gt;方法一：コマンドライン方式（最も汎用的）
&lt;/h3&gt;&lt;h4 id=&#34;ステップ1自分のフォークをクローンする&#34;&gt;ステップ1：自分のフォークをクローンする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/你的用户名/仓库名.git
cd 仓库名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-2upstreamオリジナルリポジトリのアドレスを追加する&#34;&gt;ステップ 2：upstream（オリジナルリポジトリのアドレス）を追加する
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/原作者用户名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ3アップストリームのprブランチをリベースする&#34;&gt;ステップ3：アップストリームのPRブランチをリベースする
&lt;/h4&gt;&lt;p&gt;PR番号を見つけてください。例えば、PR#123です。&lt;/p&gt;
&lt;p&gt;PR のコードは、このようにプルできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-4ブランチの切り替えとマージ&#34;&gt;ステップ 4：ブランチの切り替えとマージ
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # 或者你自己的目标分支
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もしすべてが正常であれば、あなたのフォークしたGitHubリポジトリにプッシュできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方法二github-网页界面简单但有限-第二の方法githubウェブインターフェース簡単だが機能は限られている&#34;&gt;方法二：GitHub 网页界面（简单但有限） 第二の方法：GitHubウェブインターフェース（簡単だが機能は限られている）
&lt;/h3&gt;&lt;p&gt;GitHubのウェブページでプルリクエストがアップストリームのリポジトリに対するものである場合、あなたは：&lt;/p&gt;
&lt;p&gt;そのPRページにアクセスしてください。
右上隅の「&lt;strong&gt;Commits&lt;/strong&gt;」または「&lt;strong&gt;Files changed&lt;/strong&gt;」をクリックして、このPRがどのブランチに基づいているか確認してください。
あなたのフォークページで新しいブランチを作成し、手動でPRのコミットをcherry-pickします。（Gitの知識が必要です。）
または「&lt;strong&gt;GitHub Desktopで開く&lt;/strong&gt;」をクリックして、GUIツールを使ってマージしてください。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-もし他の人があなたのフォークに対してprを提出したら&#34;&gt;🚀 もし他の人があなたのフォークに対してPRを提出したら
&lt;/h3&gt;&lt;p&gt;プルリクエストのマージページに直接アクセスして、「&lt;strong&gt;Merge pull request&lt;/strong&gt;」ボタンをクリックしてください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今の具体的な状況（例えばPRリンクや、ウェブページかコマンドラインのどちらを使っているか）に合わせて、私が手取り直して説明しましょうか？具体的なリンクを教えていただければ、一番簡単な方法を分析してお手伝いします。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Git のコミット履歴のメッセージ変更</title>
        <link>https://ttf248.life/ja/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;スクリプトは、git filter-branch を使用して、Git の履歴コミットの作成者情報を一括で変更するために使用されます。&lt;/p&gt;
&lt;p&gt;提供されたスクリプトは、Git リポジトリの過去のコミットの作成者情報を一括で変更するためのもので、全体的なコンセプトは正しいですが、&lt;code&gt;git filter-branch&lt;/code&gt; の &lt;code&gt;--env-filter&lt;/code&gt; で配列（例：&lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;）を使用すると、互換性の問題が生じる可能性があります。なぜなら、一部のシェル環境（&lt;code&gt;/bin/sh&lt;/code&gt; など）では配列構文がサポートされていないためです。&lt;/p&gt;
&lt;p&gt;互換性を高めるため、配列をスペースで区切られた文字列に置き換え、&lt;code&gt;for&lt;/code&gt;ループを使用して各古いメールアドレスを反復処理することをお勧めします。以下に変更後のスクリプトの例です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意事項：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;スクリプトを実行する前に、予期せぬ事態を防ぐため、リポジトリのバックアップを取ることをお勧めします。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この操作はGitの履歴を上書きし、コミットの作成者情報を変更するため、コミットハッシュ値が変化する可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;変更をリモートリポジトリにプッシュしている場合は、強制プッシュを使用する必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --force --tags origin &#39;refs/heads/*&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;強制プッシュは慎重に行ってください。特に複数人で共同作業しているプロジェクトでは、他者に影響を与えないように注意してください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;倉庫内の重複しない著者メールアドレスをすべて統計する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>医学教育の天国と、董襲瑩事件のバタフライ効果</title>
        <link>https://ttf248.life/ja/p/medical-education-sky-dong-xiying-butterfly-effect/</link>
        <pubDate>Wed, 07 May 2025 01:08:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/medical-education-sky-dong-xiying-butterfly-effect/</guid>
        <description>&lt;p&gt;北京協和 “4+4” 計画（4 年間の非医学系学部 + 4 年間の医学博士）は、学際的なエリート育成を特徴としていますが、2025年の董襲瑩事件によって、家庭環境（医学/研究家の家系）を利用して入学し、学歴の曖昧さや論文の盗用疑惑が浮上しました。この計画のエリート採用と公平性の矛盾、学制短縮及びインターンシップに関する問題は未解決です。&lt;/p&gt;
&lt;h2 id=&#34;プロンプト&#34;&gt;プロンプト
&lt;/h2&gt;&lt;p&gt;ブログ執筆：協和4+4の来歴と真相、核心：天宮の一角、俗人が見ること、董さんのご家族のバックグラウンド、通常の医学博士では8年間で卒業はありえない、董さんのご家族と学歴のバックグラウンド&lt;/p&gt;
&lt;h2 id=&#34;協和44解体された医学教育の天宮&#34;&gt;協和4+4：解体された医学教育の「天宮」
&lt;/h2&gt;&lt;p&gt;北京協和医学院の&amp;quot;4+4&amp;quot;プロジェクトは、2018年の開始以来、中国医学教育における“天宮”と見なされています。このアメリカの医学教育システムを模倣したプロジェクトは、「多様な学術的背景を持つ人材を受け入れ、医療への情熱を持つ者を迎え入れ、天下の英才を集める」という理念のもと、従来の医学教育システムに亀裂を開こうとしています。その核心的な論理は、&lt;strong&gt;4年間の非医学系学部教育と4年間の博士課程育成を組み合わせることで、伝統的な5+3+3（5年間の学士課程＋3年間の修士課程＋3年間の博士課程）モデルを代替し、学際的な医学のリーダー人材を育成する&lt;/strong&gt;というものです。&lt;/p&gt;
&lt;p&gt;このモデルの「天宮」属性は、3つの次元に現れています。&lt;/p&gt;
&lt;p&gt;入学のハードルにおけるエリート化：当初は、QS/Times/US Newsでトップ50に入る大学、またはUS News文理系大学の上位10校（バーナードカレッジなど）からの応募者を求めていましたが、その後、トップ100まで対象を拡大したものの、GPA 3.6以上、あるいは成績上位30％以内という条件は維持されています。
国際的な培養経路：アメリカ式の臓器・システム統合コース、PBL（問題解決型学習）などの教育手法を採用し、学生は4年間で解剖学、病理学などのコア科目を修了し、臨床実習に参加する必要があります。
卒業生の出口の質に関する議論：医師国家試験の合格率は若干下回っているものの（95.2％に対し、従来型の８年間課程は98.5％）、多くの卒業生が総合病院系の医療機関に進学しており、キャリアパスに大きな違いは見られない。&lt;/p&gt;
&lt;h2 id=&#34;董襲瑩事件凡人が垣間見る天宮の亀裂&#34;&gt;董襲瑩事件：凡人が垣間見る「天宮」の亀裂
&lt;/h2&gt;&lt;p&gt;2025年4月、日中友好病院の胸部外科医であるシャオ・フェイが結婚中に不倫をしていたという通報を受け、その事件は意外にも協和4+4プロジェクトの「神秘的なベール」を剥がした。関係者であるドン・シーインの履歴書は三重の疑問を引き起こした：&lt;/p&gt;
&lt;p&gt;学歴の曖昧さ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;学歴詐称論争&lt;/strong&gt;：董襲瑩はコロンビア大学卒業と名乗っているが、実際には独立学院であるバーナードカレッジ（2025年US News文理学院ランキング14位）を卒業している。同校は協和の「文理学院トップ20」の要件を満たしているものの、卒業証書に「バーナードカレッジ」と「コロンビア大学」の両方が記載されており、国内採用市場においてコロンビア本部の卒業生と誤認される可能性がある。&lt;/li&gt;
&lt;li&gt;専門分野横断の論争：経済学の学士＋臨床医学の博士というルートは、4+4プロジェクトにおける「多岐にわたる分野」の位置づけには合致するものの、医学予備教育の基礎が欠けていると疑問視されている。また、博士論文『クロスモーダル画像融合技術が医療画像解析に応用される研究』については、北京科技大学の発明特許との高度な類似性が指摘され、不正行為があった疑いが浮上している。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;家族環境の特異性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学術資源の独占：父親は中冶建研院の书记、母親は北京科技大学工学院技術研究院の副院长、祖父は協和影像分野のアカデミー会員、外祖父は材料分野の外籍アカデミー会員、そして叔母と叔父も北京科技大学の博導である。この「医学＋科研＋高校」という複合的な家庭環境は、推薦状（生物医学の副教授2名の推薦が必要）、研究協力（北京科技大学の特許など）といった潜在的な資源を提供している。&lt;/li&gt;
&lt;li&gt;キャリアパスの転換：研修期間中に心臓外科から泌尿器科へ転向し、研究分野が整形外科、消化内科、画像診断など多岐にわたるため、「資源を利用して道を切り開いている」と疑問視されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;教育制度に関する論争の拡大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;時間の圧縮の妥当性：従来の医学博士課程は11年（5+3+3）を要するが、4+4プログラムでは時間を8年に短縮できる。協和医科大は「カリキュラム統合」と「早期臨床」を強調しているものの、一部の医師は、臨床実習期間（12ヶ月）が従来の8年制（18ヶ月）よりも短いことを指摘しており、技能習得に影響が出る可能性があるとしている。&lt;/li&gt;
&lt;li&gt;研修免除に関する論争：一部の研修基地では、4+4卒業生に1年の研修免除を認めており、業界の公平性を損なうという疑問の声が上がっている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;論争の背景にある医学教育の難局&#34;&gt;論争の背景にある医学教育の難局
&lt;/h2&gt;&lt;p&gt;東襲瑩事件は、中国の医学教育における根深い矛盾を映し出している。&lt;/p&gt;
&lt;p&gt;エリート主義と公正性の衝突&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4+4プロジェクトの「申請・審査制」は本質的にアメリカの医学部モデルを移植したものであり、中国にはMCATのような標準化試験がなく、推薦状や研究経験といった主観的な評価は家庭環境の影響を受けやすい。&lt;/li&gt;
&lt;li&gt;データによると、2023年の4+4卒業生の中で、30％が清華・北京大学・復旦を出身とし、25％が海外の名門大学出身で、家庭環境が申請に大きく影響していることが示されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;教育制度改革の現実的な難題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;時間圧縮の代償：4+4学生による研究成果（論文数など）は、従来の8年制に比べて著しく低く、その結果「臨床重視で研究がおろそか」と指摘されている。&lt;/li&gt;
&lt;li&gt;業界の認知度の二極化：大手病院は協和のブランド名を重視する一方、基層医療機関は4+4卒業生の臨床能力に慎重な姿勢を見せている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;医学教育の国際化に対する悩み&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アメリカの4+4モデルは、MCAT試験に合格し、3〜7年の研修を経る必要がありましたが、中国の4+4プログラムは入学と研修の段階を簡略化しており、「形は似て中身は違う」という結果になっています。&lt;/li&gt;
&lt;li&gt;文部科学省のデータによると、2024年の全国医学博士入学試験において、4+4プログラムの占める割合は5%未満であり、その大規模な普及には依然として抵抗がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結語天宮秩序の再構築と医学教育&#34;&gt;結語：「天宮」秩序の再構築と医学教育
&lt;/h2&gt;&lt;p&gt;協和4+4プロジェクトの論争は、本質的にエリート教育と大衆の期待との衝突である。 「天宮」の一角が凡人によって垣間見られたとき、露呈されたのは個別の事例の瑕疵だけでなく、医学教育システム全体の深層矛盾である。 今後の改革は、3つのレベルで力を入れる必要がある：&lt;/p&gt;
&lt;p&gt;選抜メカニズムの透明化：標準化試験（中国版MCATのようなもの）を導入し、推薦状などの主観的な要素の影響を軽減する。
研修期間の延長：4+4卒業生の研修期間を3年に戻し、臨床能力が基準を満たすことを確実にする。
研究のプロセスを強化する：学術倫理審査メカニズムを確立し、学際的な研究に対して厳格な新規性検証を行う。&lt;/p&gt;
&lt;p&gt;医学教育の「天宮」は、ごく少数の特権ではなく、真に医学のエリートを育成する揺りかごとなるべきである。選抜メカニズムの公平性、養成プロセスの厳密性、キャリア発展の規範性が全面的に保障されることによってのみ、「天宮実験」という医学教育が確実に根付くことができる。&lt;/p&gt;</description>
        </item>
        <item>
        <title>関税嵐、株式市場の暴落</title>
        <link>https://ttf248.life/ja/p/tariffs-storm-stock-market-crash/</link>
        <pubDate>Tue, 08 Apr 2025 03:49:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/tariffs-storm-stock-market-crash/</guid>
        <description>&lt;p&gt;最近、世界の株式市場は激しい変動を経験しており、その主な原因は米国大統領ドナルド・トランプ氏が発表した新たな一連の包括的な関税措置であり、これにより市場では世界貿易戦争と景気後退への懸念が生じている。&lt;/p&gt;
&lt;p&gt;関税政策が市場のパニックを引き起こす&lt;/p&gt;
&lt;p&gt;トランプ大統領は先週、全ての輸入品に高額な関税を課すことを発表しました。特に中国からの輸入品には最大50%の関税が追加され、彼自身が不公平だと主張するグローバル貿易システムを修正することを目的としています。この措置により、世界市場ではパニック売りが発生し、投資家は貿易緊張の高まりが世界経済の成長を抑制するのではないかと懸念しています。&lt;/p&gt;
&lt;p&gt;世界中の株式市場が大幅に下落&lt;/p&gt;
&lt;p&gt;アメリカでは、主要株価指が大きな打撃を受けました。ダウ工業平均は1,200点以上下落し、ナスダック総合指数は4％、S&amp;amp;P500指数は3.8％下落し、ベアマーケット圏に突入しました。アジアとヨーロッパ市場も例外なく、日経平均株価は約8％下落、欧州株式市場は6％下落しました。&lt;/p&gt;
&lt;p&gt;投資家が安全資産を求める&lt;/p&gt;
&lt;p&gt;市場の変動に直面し、投資家は次々と債券や円などの安全資産へとシフトしている。しかしながら、市場のボラティリティ指数（VIX）が60を超えて急上昇しており、市場のパニックムードが高まっていることを示している。&lt;/p&gt;
&lt;p&gt;経済学者がスティグフレーションのリスクを警告&lt;/p&gt;
&lt;p&gt;経済学者は、関税政策が米国経済を「スタグフレーション」に陥れる可能性があると警告している。「スタグフレーション」とは、経済成長の停滞、インフレの上昇、そして高い失業率が同時に存在する状況のことだ。モルガン・スタンレーは、2025年に米国経済が衰退する可能性を60%に引き上げた。&lt;/p&gt;
&lt;p&gt;各国の政府と企業の反応&lt;/p&gt;
&lt;p&gt;各国の政府は相次いで報復措置を講じることを表明しています。例えば、欧州連合の貿易担当者は、4月15日から米国製品に対する報復関税を発動すると述べました。企業界も懸念を示しており、高盛のようなウォール街の金融機関は、米国経済が衰退する確率を45%に引き上げています。&lt;/p&gt;
&lt;p&gt;結論&lt;/p&gt;
&lt;p&gt;現在、世界市場はかつてない課題に直面しており、投資家は貿易政策の動向と市場の変化を注視し、リスク管理と資産配分を行う必要があります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>暇つぶしに、中国の水墨画風のテーマをデザインしたい。</title>
        <link>https://ttf248.life/ja/p/chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;カラフルなホームページを見飽きて、急にシンプルなスタイルで、中国の水墨画風のテーマを作りたい気分だ。&lt;/p&gt;
&lt;p&gt;スタイルシートは現在、大幅に改造されており、異なる要素ごとに特定のスタイルが設定され、テーマのデフォルトスタイルを上書きするために使用されています。&lt;/p&gt;
&lt;p&gt;再構築なしで、AIに直接新しいテーマを生成させると、結果は非常に不安定です。&lt;/p&gt;
&lt;p&gt;偶然にもtrae claudeの大規模言語モデルの待ち行列に遭遇し、VS Codeエージェントモードに切り替えたところ、効果が非常に悪く、修正したものは全くデザイン性がない。&lt;/p&gt;
&lt;p&gt;結局、やはり自分はフロントエンドが理解できていないので、タスクをAIに効果的に分解して割り当てることができない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>幅広いインデックス投資：証券ETF、ハンセンテック指数</title>
        <link>https://ttf248.life/ja/p/etf-wide-index-dzt-broker-etfs-hangsheng-tech-index/</link>
        <pubDate>Thu, 27 Mar 2025 21:58:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/etf-wide-index-dzt-broker-etfs-hangsheng-tech-index/</guid>
        <description>&lt;p&gt;以前からずっとやりたいと思っていたこと、良い青色株を買ってあとはほったらかしにする、というものですが、下落したときは状況を見て買い増しもしないで、上昇したら売ってしまう、結果としてできていませんでした。&lt;/p&gt;
&lt;p&gt;良い青色株を探すのも面倒だから、広いベースのインデックスを選んでETFを買っておくのがいいだろう。今の計画は、証券ETFとハンガリーテック指数だ。&lt;/p&gt;
&lt;p&gt;上記のような取引手法には、専門用語で「左方反転買い直し」というものがあります。&lt;/p&gt;
&lt;p&gt;今後の計画としては、ベンチマーク指数を使って徹底的に実践してみることにします。定期預金の利回りを上回れば良いのです。&lt;/p&gt;
&lt;h2 id=&#34;証券etf&#34;&gt;証券ETF
&lt;/h2&gt;&lt;p&gt;証券ETFとは、中国の証券会社を主な投資対象とする上場投資信託（ETF）のことです。主に中国株式市場に上場している証券会社の株式に投資し、中国証券会社指数など特定の指数を追跡することが一般的です。&lt;/p&gt;
&lt;p&gt;以前に一度買ったことがありますが、その時は高値に乗ってしまい、結局損して手放しました。中国の市場は、毎回強気相場になると証券会社は必ず上昇します。どれくらい上がるかは、投資家の心理次第です。&lt;/p&gt;
&lt;h2 id=&#34;ハンセンテクノロジー指数&#34;&gt;ハンセン・テクノロジー指数
&lt;/h2&gt;&lt;p&gt;恒生科技指数は、香港証券取引所が提供する株式指数であり、香港市場におけるテクノロジー業界全体のパフォーマンスを反映することを目的としています。この指数には、インターネット、電子商取引、クラウドコンピューティング、人工知能など、複数の分野を網羅する香港に上場している主要なテクノロジー企業が含まれています。&lt;/p&gt;
&lt;p&gt;2025年5月20日まで、ハンセン・テクノロジー指数（コード：800700）の構成銘柄上位10銘柄とそのウェイト比率は以下の通りです（複数の信頼できる情報源からのデータ）。&lt;/p&gt;
&lt;p&gt;シャオミグループ・W（01810.HK）：約8.82％
テンセントホールディングス（00700.HK）：約8.14％
アリババ－W (09988.HK)：約7.72%
京东集团-SW（09618.HK）：約7.60%
美團-W（03690.HK）：約7.35％
快手-W（01024.HK）：約6.10％
理想汽車-W（02015.HK）：約6.09％
中芯国際（00981.HK）：約5.70％
ネットイース -S (09999.HK)：約4.59%
Ctripグループ-S (09961.HK)：約4.48%&lt;/p&gt;
&lt;p&gt;合計シェア：約66.6％（一部情報では上位10社の合計シェアは68％～69％との表示があり、差異は統計時点の違いによるもの）。&lt;/p&gt;
&lt;h3 id=&#34;重要な注意点&#34;&gt;重要な注意点
&lt;/h3&gt;&lt;p&gt;個別株のウェイト上限メカニズム：香港科技指数は、単一株式のウェイトに8％の上限を設定しています。例えば、中芯国際は2025年3月の調整前に8%を超えるウェイトでしたが、その後、パッシブな売却によりコンプライアンス範囲内に収束しました。
構成銘柄の調整：2025年5月16日、香港証券取引所はBYD（01211.HK）を恒生指数に組み入れ、中国阅文集团（00772.HK）を除外すると発表しました。この変更は6月6日に適用されます。したがって、現時点（5月20日）では、構成銘柄は調整前のリストに基づいています。BYDはまだ含まれていません。
主要な構成銘柄は、インターネットテクノロジー企業（テンセント、アリババ、美団など）が中心であり、新エネルギー車（小米、理想）や半導体（中芯国際）の比重も大きく、指数がテクノロジーと新経済を網羅していることが反映されている。
データ有効性：異なるソースのデータの差異は、主に統計時点が異なることが原因です。例えば、2025年3月のデータでは上位10社の合計シェアは約69.4%ですが、5月14日のデータでは68.82%であり、市場変動が重みに与える動的な影響を反映しています。&lt;/p&gt;
&lt;h2 id=&#34;左側下落の買い増し&#34;&gt;左側下落の買い増し
&lt;/h2&gt;&lt;p&gt;「左方安着法」とは、投資戦略の一種で、株価が継続的に下落する中で、投資家が株価が底圏に近づくことを予想し、保有コストを削減するために積極的に段階的に買い入れ、将来の価格上昇による利益を期待する方法です。&lt;/p&gt;
&lt;p&gt;この手法は「左側取引」に分類され、市場が明確な底を付ける前に逆勢操作を行うものです。具体的な操作では、投資家は通常、「ピラミッド式」の積立戦略を採用し、株価下落とともに徐々に購入数量を増やして平均保有コストを薄めます。例えば、最初に一定数の株式を購入した後、株価がさらに下落した場合は、より低い価格で買い付け量を増やし、この方法を繰り返します。&lt;/p&gt;
&lt;p&gt;長所：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ポジションコストを下げる：下落局面で段階的に買い入れを行うことで、平均保有コストを低減し、将来的な利益を生み出すための条件を作る。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ポジションを早期に構築する：市場がまだ転換していない段階でポジションを確立し、もし判断が正しければ、相場が回復した際に大きな利益を得ることができる。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;短所：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;リスクが高い：株価が継続的に下落すると、より大きな損失を被る可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;資金拘束：継続的な買い付けには十分な資金サポートが必要であり、資金が長期的に固定されるリスクもあります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相対的に言えば、「右肩乗り取引」は、市場トレンドが明確になり、株価の反発兆候が見て取れた後に買いを入れる操作であり、リスクは比較的低いものの、反発初期の収益を逃す可能性があります。したがって、投資家は自身の許容できるリスク、資金状況、そして市場判断に基づいて、適切な取引戦略を選択すべきです。&lt;/p&gt;
&lt;h2 id=&#34;評価理論&#34;&gt;評価理論
&lt;/h2&gt;&lt;p&gt;評価理論は、金融学における中心的コンセプトであり、資産または企業の本来の価値を評価し、投資決定の根拠となることを目的としています。評価を通じて、投資家は資産の現在の市場価格が妥当かどうかを判断し、それに応じて投資戦略を策定することができます。&lt;/p&gt;
&lt;p&gt;主な評価方法：&lt;/p&gt;
&lt;p&gt;割引キャッシュフロー法（DCF）：この方法は、資産が将来に生み出すと予想されるキャッシュフローを基盤とし、適切な割引率で現在価値に換算します。DCF法は、資産の内在価値を重視し、収益性が安定しており予測可能な企業の実評価に適しています。&lt;/p&gt;
&lt;p&gt;相対評価法：この手法は、目標会社と同一業界の他の会社の評価指標（PER、PBR、PSRなど）を比較することで、会社の相対的な価値を評価します。相対評価法は手軽に実施でき、迅速な評価や同業他社との比較に広く利用されています。&lt;/p&gt;
&lt;p&gt;純資産基礎法：この方法は、会社の純資産価値、つまり総資産から負債を差し引いた残りの金額を評価することで、会社の価値を決定します。純資産基礎法は、不動産会社や資本集約型企業などの資産主導型の企業に適しています。&lt;/p&gt;
&lt;p&gt;評価理論の応用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;投資判断：評価を通じて、投資家は過小評価または過大評価された資産を特定し、購入または売却の戦略を立てることができます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;企業買収：M&amp;amp;A取引において、評価額は取引価格を決定する上で重要であり、取引の成否に影響を与えます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;財務報告：会社は、その資産と負債を時価評価し、財務報告の正確性と透明性を確保する必要がある。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;評価結果は、市場環境、企業運営状況、マクロ経済指標など、様々な要因の影響を受けることに注意が必要です。したがって、評価を行う際には、これらの要因を総合的に考慮し、定性的・定量的な分析を組み合わせることで、より正確な評価結果を得ることができます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>コードを書かずに、カスタム銘柄選択モジュールを設計・開発する。</title>
        <link>https://ttf248.life/ja/p/no-code-design-develop-custom-stock-module/</link>
        <pubDate>Thu, 27 Feb 2025 23:20:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/no-code-design-develop-custom-stock-module/</guid>
        <description>&lt;p&gt;先月、Cursor を試用しましたが、無料枠の制限により、複雑な機能開発は行わず、簡単なテストにとどまりました。その際、ByteDance も同様の商品をリリースしていることがわかり、両者とも基盤となる大規模言語モデルは Claude-3.5 でした。&lt;/p&gt;
&lt;p&gt;バイトのプロダクトTrae、まずMac版がリリースされ、今年の2月になってようやくWindows版もリリースされました。大手企業のものはやっぱり良いですね。無料で利用でき、お金を払わずにClaude-3.5を無制限に使えるので、このモデルの効果はなかなか良いです。&lt;/p&gt;
&lt;p&gt;最終、K線図の開発でつまずいてしまいました。私自身がreactの基礎をほとんど理解していないため、諦めざるを得ませんでした。開発を続けたいのであれば、筆者がフロントエンドの基礎知識を補強し、タスクをより細かく分割する必要があり、いきなり「K線図の開発」という大きなタスクを与えるべきではありません。&lt;/p&gt;
&lt;h2 id=&#34;発見された問題&#34;&gt;発見された問題
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;海外のAIモデルを使用するため、Vue3 + Element-Plus のトレーニングデータが不足しているため、React をフロントエンドフレームワークとして選択しました。&lt;/li&gt;
&lt;li&gt;文法的な誤りが偶発的に存在する可能性があり、手動での修正が必要です。&lt;/li&gt;
&lt;li&gt;複雑な問題の解決には、手動によるガイダンスが必要です。&lt;/li&gt;
&lt;li&gt;コード構造の最適化には人的指導が必要です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最も時間がかかったのは、フロントエンドコードをコンテナにパッケージ化することです。筆者はゼロから始めたため、&lt;code&gt;.env.production&lt;/code&gt;や&lt;code&gt;tsconfig.json&lt;/code&gt;といった概念が全く理解できませんでした。途中で豆包（友人）に助けられたおかげで、ようやく対応するロジックを整理することができました。フロントエンドの開発におけるdevモードとbuildモードでは、コードのチェックに関して大きな違いがあります。バックエンドデータベースとサービスのコンテナスクリプトは、合わせて5分程度で終わりました。&lt;/p&gt;
&lt;p&gt;AIは現在、開発の効率を上げることに重点が置かれており、基礎があることが最も重要です。AIがすべての問題を解決するわけではありません。&lt;/p&gt;
&lt;h2 id=&#34;倉庫住所&#34;&gt;倉庫住所
&lt;/h2&gt;&lt;p&gt;タイトルが示すように、今回は書かずにAIと直接対話し、独自の株式モジュールを設計・開発します。最終的にどのような効果が得られるか見てみましょう。&lt;/p&gt;
&lt;p&gt;倉庫アドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/trae-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/trae-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;詳細な使用方法は、倉庫のREADME.mdファイルを参照してください。&lt;/p&gt;
&lt;p&gt;倉庫には多くの提出記録が含まれており、そのほとんどが私とTraeとの会話記録、そして私がTraeのいくつかの機能に対して行ったテストです。それぞれの機能を達成するために手動介入を行ったかどうかを注記しています。&lt;/p&gt;
&lt;h2 id=&#34;prompt&#34;&gt;Prompt
&lt;/h2&gt;&lt;p&gt;プロジェクトはゼロから作成され、以下にプロンプトを示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;基于项目原型图，开发功能：自选股，需要支持合约的新增、删除、修改、查询。自选股界面需要展示基础的行情数据。支持多个不同的市场切换。

前端：react
后端：golang gin gorm
数据库：PostgreSQL

服务端需要支持跨域请求，同时需要考虑数据的校验和错误处理，如果后端服务不可用，前端需要告警提示。

后端需要展示请求和应答的日志；前端也打印通讯的日志，方便排查问题。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ユーザーインターフェースとインタラクションの最適化&#34;&gt;ユーザーインターフェースとインタラクションの最適化
&lt;/h2&gt;&lt;p&gt;フロントエンドのインターフェースのデザインは完全にGrokに依存しており、まずTraeでプロダクトのプロトタイプを作成しましたが、美意識はありませんでした。使用しているモデルはコード生成能力は非常に高いですが、他の能力は弱いため、Grokを使ってフロントエンドUIを最適化する必要があります。&lt;/p&gt;
&lt;p&gt;現在のインターフェースのスクリーンショットを Grok にアップロードし、UI の最適化を依頼すると、一度に多くの改善提案が得られるかもしれない。私たちはそれらを評価し、Trae で実行して、最適化の効果を確認する。&lt;/p&gt;
&lt;h3 id=&#34;技術スタック&#34;&gt;技術スタック
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;フロントエンド：React + TypeScript&lt;/li&gt;
&lt;li&gt;バックエンド：Golang + Gin + GORM&lt;/li&gt;
&lt;li&gt;データベース：PostgreSQL 17&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;システムアーキテクチャ&#34;&gt;システムアーキテクチャ
&lt;/h2&gt;&lt;h2 id=&#34;バックエンドアーキテクチャ&#34;&gt;バックエンドアーキテクチャ
&lt;/h2&gt;&lt;p&gt;バックエンドはGolangのGinフレームワークでRESTful APIを実装しており、主なモジュールは以下の通りです。&lt;/p&gt;
&lt;p&gt;データベースモジュール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GORM を ORM フレームワークとして使用する&lt;/li&gt;
&lt;li&gt;環境変数を設定してデータベース接続を構成する。&lt;/li&gt;
&lt;li&gt;自動的にデータベーステーブルを移行する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ルーティングモジュール&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RESTful API 設計&lt;/li&gt;
&lt;li&gt;統一されたエラー処理メカニズム&lt;/li&gt;
&lt;li&gt;内蔵リクエストログ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;越域処理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ローカル開発環境でのクロスドメインをサポートする。&lt;/li&gt;
&lt;li&gt;設定可能なCORSポリシー&lt;/li&gt;
&lt;li&gt;Cookie のクロスドメインをサポート&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;フロントエンドアーキテクチャ&#34;&gt;フロントエンドアーキテクチャ
&lt;/h2&gt;&lt;p&gt;フロントエンドはReact + TypeScriptで構築されており、以下の機能を実装しています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;株式リスト表示&lt;/li&gt;
&lt;li&gt;自主選択株式管理&lt;/li&gt;
&lt;li&gt;市場データ表示&lt;/li&gt;
&lt;li&gt;エラー通知メカニズム&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>AI開発2年：ドッカーがリリースされる前の状態に少し似ている。</title>
        <link>https://ttf248.life/ja/p/ai-development-two-years-docker-pre-release/</link>
        <pubDate>Thu, 20 Feb 2025 18:16:37 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-development-two-years-docker-pre-release/</guid>
        <description>&lt;p&gt;人工知能（AI）は近年、間違いなく技術分野で最も議論されている話題の一つであり、特に過去2年間のAI技術の急速な進歩が目覚ましいです。深層学習、自然言語処理、コンピュータビジョン、自動化された意思決定システムなど、AIの応用範囲は絶え間なく広がっています。しかしながら、技術的なブレークスルーが続いているにもかかわらず、AIはDockerがリリースされる前のボトルネックに似た状況に直面しており、市場を真に爆発させるような画期的なアプリケーションが不足しています。&lt;/p&gt;
&lt;p&gt;AIの発展も2年ほど経ち、Dockerがリリースされる前の状態に似ている。画期的なアプリケーションはまだなく、既存技術を基盤として、完璧な実用化シナリオを生み出す必要がある。Dockerのように、特に新しい技術を使わなくても良いのだが、全体的な方案が非常に合理的で、運用や開発のワークフローを変えるようなものだ。&lt;/p&gt;
&lt;h2 id=&#34;人工知能の開発状況技術は既に成熟しているが応用はまだブレークスルーが必要だ&#34;&gt;人工知能の開発状況：技術は既に成熟しているが、応用はまだブレークスルーが必要だ。
&lt;/h2&gt;&lt;p&gt;技術的な側面から見ると、AIは過去2年間でかなりの進歩を遂げています。OpenAIが発表したGPTシリーズモデルも、GoogleのBERTやDeepMindのAlphaシリーズも、AIの処理能力は以前の予想を大きく上回っています。特に自然言語処理分野においては、GPT-4などのモデルは強力な生成能力に加え、理解と推論においても驚くべきパフォーマンスを示しています。&lt;/p&gt;
&lt;p&gt;しかしながら、技術が日進月歩を遂げているにもかかわらず、AIの実際の応用においては一定の課題に直面している。Dockerがリリースされる前の状況と似ており、AIの潜在能力は大きいものの、現状では広く普及し、産業を変革する真に画期的なアプリケーションはまだ登場していない。多くの人々がAIの将来性について語っているが、革命的な変化をもたらす直接的な応用事例を見つけることは難しい。多くのAIアプリケーションは依然として初期段階にとどまっており、大部分はさらなる統合と最適化が必要である。&lt;/p&gt;
&lt;h2 id=&#34;dockerとaiの類似性技術そのものが革新ではない解決策が重要だ&#34;&gt;DockerとAIの類似性：技術そのものが革新ではない、解決策が重要だ。
&lt;/h2&gt;&lt;p&gt;もしDockerのリリース前の歴史を振り返れば、当時の技術環境とAIの現状には多くの類似点があることが容易にわかるでしょう。Dockerがリリースされる前は、コンテナ技術が新しいものではありませんでした。初期のLXC（Linux Containers）や仮想化技術もすでにコンテナ化の基本的な能力を備えていました。しかし、Dockerは既存技術を巧みに統合・最適化し、よりシンプルで直感的かつ効率的なソリューションを提案しました。このソリューションは画期的な技術を導入したものではありませんが、運用や開発プロセスにおける多くの課題を解決し、ソフトウェアのデプロイ、拡張、管理プロセスを大幅に簡素化しました。&lt;/p&gt;
&lt;p&gt;同様に、AI分野も類似の状況に直面している。現在のAI技術は「目新しさ」から離れたとはいえ、真に大規模な応用を実現するには、Dockerのように既存技術を統合・最適化し、合理的な応用シナリオを構築することが不可欠だ。AIの画期的な応用とは、必ずしも新たな技術革新に依存するものではなく、むしろ既存技術を統合して、実際のビジネスにおける課題やニーズを解決することにあるかもしれない。&lt;/p&gt;
&lt;h2 id=&#34;aiのdocker瞬間を見つけるにはどうすればよいか&#34;&gt;AIの「Docker瞬間」を見つけるにはどうすればよいか？
&lt;/h2&gt;&lt;p&gt;AI技術が真に広く応用されるためには、いくつかの側面から取り組む必要があります。&lt;/p&gt;
&lt;p&gt;現実的なシーンの深掘り
現在、多くのAIの応用事例は依然として実験的な性質が強く、大規模な実用化には至っていません。例えば、AIカスタマーサービスやスマートレコメンデーションといった分野では幅広い応用があるものの、その機能にはまだ多くの制約があり、業界のボトルネックを突破できていません。真のブレークスルーは、従来の方法に悩まされてきた医療、製造業、物流といった業界から生まれるかもしれません。AIは、より効率的なデータ処理や予測分析を通じて、これらの複雑な状況下で企業の効率向上とコスト削減に貢献できるでしょう。&lt;/p&gt;
&lt;p&gt;製品化とユーザビリティ
Dockerのようにコンテナ化プロセスを簡略化することで運用効率を高めるように、AIプロダクトの使いやすさも同様に重要です。AIの普及は技術の普及であると同時に、製品化の普及でもあります。AIを日常業務フローに統合し、ユーザーが深い技術的理解なしにこれらのツールを簡単に使えるようにすることは、AIを実用化するための重要な一歩です。&lt;/p&gt;
&lt;p&gt;生態建設と標準化
いかなる新技術の広範な応用も、エコシステムの構築なしには成り立ちません。Dockerが急速に台頭できたのは、そのオープン性と互換性のおかげで、開発者が様々なクラウドプラットフォーム、ツール、サービスとの連携を容易に行えるようになったからです。同様に、AIの未来もエコシステムの構築にかかっています。AIの標準化、モデルの共有、データの公開、そして技術の統合性は、AIが広範な業界応用を形成できるかどうかを左右するでしょう。&lt;/p&gt;
&lt;h2 id=&#34;結論aiの未来は多くの可能性を秘めているがより完善した着地点が必要である&#34;&gt;結論：AIの未来は多くの可能性を秘めているが、より完善した着地点が必要である。
&lt;/h2&gt;&lt;p&gt;AI技術はここ2年間で目覚ましい進歩を遂げたものの、現状では「決定版のアプリケーション」とは言えない段階です。Dockerがリリースされる前のコンテナ化技術と同様に、AIも合理的な応用シナリオを持ち、既存技術とビジネスニーズを深く融合することで初めて、大規模な導入と普及を実現できます。技術革新は確かに重要ですが、プロセスを簡素化し効率を高めるソリューションの方が、技術の普及と発展をより促進します。&lt;/p&gt;
&lt;p&gt;未来、AIはDockerのように、画期的な技術革新ではなく、既存の技術を統合することで完璧なアプリケーションシーンを作り出し、最終的に私たちの仕事や生活のやり方を変えるかもしれません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>プロトバッファのゼロ値トラップ：デフォルト値がビジネスロジックの隠れた殺人者となる場合</title>
        <link>https://ttf248.life/ja/p/protobuf-zero-value-traps/</link>
        <pubDate>Thu, 20 Feb 2025 15:26:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/protobuf-zero-value-traps/</guid>
        <description>&lt;p&gt;米国株には3つの取引時間帯があり、それぞれ盤前、盤中、盤後です。データインターフェースは、可能な限り帯域幅を節約するために、数値増分方式でデータをプッシュします。初回送信時はフルデータですが、2回目以降はすべてのフィールドが差分更新となります。&lt;/p&gt;
&lt;p&gt;なぜ最適な方法を使わないのか？いくつかのプロジェクトチームが関わっていて、すでに何年も稼働しているものもある。当方は新規の連携なので、できるだけ互換性を保つようにするしかない。&lt;/p&gt;
&lt;h2 id=&#34;一連の問題&#34;&gt;一連の問題
&lt;/h2&gt;&lt;p&gt;概要だけ見れば、まだ問題なさそうに見えるかもしれないが、システムアーキテクチャに問題を持ち込むと、一連の問題を引き起こす。先の問題を解決したと思ったら、また新しい問題が発生し、その問題は以前の問題が原因だ。&lt;/p&gt;
&lt;h3 id=&#34;取引期間を識別できません&#34;&gt;取引期間を識別できません。
&lt;/h3&gt;&lt;p&gt;既知ディスク上のフェーズ定義は、&lt;code&gt;protobuf&lt;/code&gt;で0と定義されていますが、データ受信時に増分プッシュであるため、ビジネス側はこの0がデフォルト値なのか、実際のビジネス値なのかを有効に識別できません。&lt;/p&gt;
&lt;p&gt;平たく言うと、0を受け取るたびに、その0が新しい相場設定の値なのか、それともprotobufのデフォルト値なのかを判断できないということです。&lt;/p&gt;
&lt;h3 id=&#34;オプション導入&#34;&gt;オプション導入
&lt;/h3&gt;&lt;p&gt;Since protobuf release 3.15, proto3 supports using the optional keyword (just as in proto2) to give a scalar field presence information&lt;/p&gt;
&lt;p&gt;グループ内の通信プロトコルは &lt;code&gt;protobuf&lt;/code&gt; をベースにしていますが、過去の経緯から古いバージョンが採用されており、&lt;code&gt;optional&lt;/code&gt; キーワードに対応していません。事情はよくわかっていると思いますが、&lt;code&gt;protobuf&lt;/code&gt;を基盤から導入しているため、プロジェクトは静的ライブラリとして配布され、そのためにはコンパイルチェーン全体をアップグレードする必要があります。このコストは非常に高いです。&lt;/p&gt;
&lt;h3 id=&#34;gccのバージョン問題&#34;&gt;GCCのバージョン問題
&lt;/h3&gt;&lt;p&gt;やっとの思いで計画を立てたものの、基盤に2つの異なるバージョンをリリースし、可能な限り&lt;code&gt;protobuf&lt;/code&gt;の新バージョンのコンパイル依存関係の伝播を制御しようとしたのですが、コンパイル時に&lt;code&gt;gcc&lt;/code&gt;のバージョンが低く、&lt;code&gt;protobuf&lt;/code&gt;の新機能に対応していないことがわかりました。&lt;/p&gt;
&lt;p&gt;チーム内でよく使用されるサーバーの種類：CentOS 7、CentOS 8。CentOS 7 のデフォルトの &lt;code&gt;gcc&lt;/code&gt; バージョンは 4.8 で、CentOS 8 のデフォルトの &lt;code&gt;gcc&lt;/code&gt; バージョンは 8.3 です。&lt;code&gt;protobuf&lt;/code&gt; の新機能には &lt;code&gt;gcc&lt;/code&gt; バージョンが 7.4 以上必要であるため、CentOS 7 ではサポートできません。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bug 82461 - [7 Regression] Temporary required for brace-initializing (non-literal-type) member variable&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最終、関連サービスのデプロイやコンパイルサーバーをCentOS 8に移行することで、この問題を解決しました。&lt;/p&gt;
&lt;h2 id=&#34;合理な列挙&#34;&gt;合理な列挙
&lt;/h2&gt;&lt;p&gt;問題全体を振り返ると、実はもっと簡単で効率的な解決策があります。それは、列挙の定義を調整し、0からではなく1から番号付けすることです。これにより、デフォルト値とビジネス値を効果的に区別でき、上記の様々な問題を回避できます。&lt;/p&gt;
&lt;h3 id=&#34;なぜ1から始めるのがもっと合理的だろうか&#34;&gt;なぜ1から始めるのがもっと合理的だろうか？
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;protobuf&lt;/code&gt;において、列挙型のデフォルト値は常に0に固定されています。もしビジネス上の意味のある値を0として定義した場合（例えば「盤中」）、増分プッシュ時に受信した0がビジネスの値なのか、未設定のデフォルト値なのかをクライアント側で判断することができません。しかし、列挙型を1から開始して定義すれば、0を有意義でないデフォルト値や「未知」の状態として保持できるため、問題は容易に解決されます。&lt;/p&gt;
&lt;p&gt;推奨される実践：&lt;/p&gt;
&lt;p&gt;プロトバッファの列挙型を設計する際には、常に 0 を無意味なデフォルト値として定義してください（例：&lt;code&gt;UNKNOWN&lt;/code&gt; または &lt;code&gt;RESERVED&lt;/code&gt;）。
実際のビジネス値を1から割り当て、デフォルト値の0と区別するようにしてください。&lt;/p&gt;
&lt;p&gt;この小さな調整により、取引セッションの識別問題を解決するだけでなく、将来のプロトコル設計のための貴重な経験となりました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>国慶前後の株式市場の「氷と炎の二重世界」：急上昇と急落の劇的な転換</title>
        <link>https://ttf248.life/ja/p/national-holiday-stock-market-rollercoaster/</link>
        <pubDate>Sat, 15 Feb 2025 03:42:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/national-holiday-stock-market-rollercoaster/</guid>
        <description>&lt;p&gt;2024年の国慶節前夜、中国株式市場は目を見張るような急騰を経験したが、祝日明けには劇的な暴落に転じている。この株式市場の「氷と火の二重世界」は、投資家たちにジェットコースターのような感情の変化をもたらすばかりでなく、政策、経済、そして市場の法則に対する深い考察を引き起こした。&lt;/p&gt;
&lt;p&gt;去年の建国記念日前の株式市場の急騰をテーマにブログを作成し、最後に建国記念日の後の株式市場の急落を盛り込むこと。記事のスタイルは報道記事とする。&lt;/p&gt;
&lt;h2 id=&#34;祝日の前の株式市場の急騰政策主導の熱狂&#34;&gt;祝日の前の株式市場の急騰：政策主導の熱狂
&lt;/h2&gt;&lt;p&gt;2024年の国慶節前の５営業日で、中国株式市場は低迷から一瞬にして「沸騰モード」に突入した。「9月30日にはA株市場が全面的に大幅に上昇し、主要指数はいずれも過去最高の上昇率を記録した。上海総合指数は8.06%、深証成指は10.67%、創業板指は15.36%と急上昇し、北証50指数に至っては史上最大の単日上昇率である22.84%を記録した。市場の熱狂ぶりは極めて高く、滬深北三市の日々の取引額は2兆6115億元に達し、前営業日比で1兆1559億元大幅に増加。大半以上の5300種類を超える銘柄が上昇し、「一斉赤字」の様相を呈した。」&lt;/p&gt;
&lt;p&gt;今回の市場の牽引力は、政府が予想を上回る一連の政策を一斉に発表し、それによって引き起こされた市場期待の変化源泉にある。9月24日、中国人民銀行は預金準備率の引き下げ、利下げ、既存住宅ローン金利の引き下げ、そして住宅ローンの最低頭金の統一を発表した。9月26日の中央政治局会議では、財政・金融政策による逆周期調整を強化し、資本市場の活性化に努め、長期資金の市場投入を積極的に誘導することを強調した。9月30日には、4つの不動産支援策が相次いで発表された。これらの政策は、政府が市場と成長の安定に全力を尽くするという決意を市場に伝えた。&lt;/p&gt;
&lt;h2 id=&#34;祝日後の株式市場の急落熱狂後の冷静と調整&#34;&gt;祝日後の株式市場の急落：熱狂後の冷静と調整
&lt;/h2&gt;&lt;p&gt;しかしながら、国慶節の祝祭期間明けから、市場センチメントは急転直下した。10月8日、A株はほぼ上放映限の幅で強勢に始まり、大幅な高進捗の後、市場は激しい変動に見舞われ、最終的には高値で始まり低値で終了した。それ以来、市場の中心は不断に下方へシフトし、10月16日までに、沪指の振幅は15%を超え、累積では470点以上下落した。10月8日から10日まで、A株の中核指数は全面低迷し、そのうち創業板指は6.21%の下落を記録した。
今回の急落の要因としては、まず前期の急騰によって蓄積されたリスクの消化がある一方、市場が政策に対する期待を調整していることも関係しています。一部投資家は、政策の効果は短期的に現れているものの、長期的な効果はまだ見極められないと考えています。加えて、海外市場の変動もA株に影響を与えています。10月9日には、香港ハンセン指数が9.41%暴落し、A50先物が10.4%暴落するなど、市場の下落をさらに加速させました。&lt;/p&gt;
&lt;h2 id=&#34;市場の反省と展望&#34;&gt;市場の反省と展望
&lt;/h2&gt;&lt;p&gt;国慶前後の株式市場の劇烈な変動は、市場に政策、経済、そして市場の法則に対する深い反省を呼び起こした。一方では、政策の短期的な刺激効果は顕著であるが、長期的な効果はまだ見極められない。他方で、市場の急激な上昇と下落は、投資家に対し冷静さを保ち、感情的な投資を避けるよう促している。&lt;/p&gt;
&lt;p&gt;将来、A株市場が真の「長牛」相場を歩めるかどうかは、依然として政策が実体経済に有効に伝達され、最終的に経済の基礎的な改善を引き起こせるかどうかにかかっています。投資家は、政策の具体的な実施状況や経済データの変化に注意深く留意し、合理的に投資戦略を調整する必要があります。&lt;/p&gt;
&lt;p&gt;国慶前後の株式市場の暴騰と暴落は、政策と市場の攻防であり、同時に投資家心理を試す試練でもあった。この「冰火両重天」のような相場の中で、私たちは市場の力と政策の影響力を目の当たりにした。今後の展開から目が離せない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>旧正月のネザーザがブレイク</title>
        <link>https://ttf248.life/ja/p/chinese-new-year-nizha-breakthrough/</link>
        <pubDate>Sat, 15 Feb 2025 03:40:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chinese-new-year-nizha-breakthrough/</guid>
        <description>&lt;p&gt;私たち中国人といえば、旧正月になると家族みんなで集まって、映画を見ることが欠かせない娯楽です。今年の旧正月の興行収入では、『哪吒』がものすごい勢いで話題を呼び、街の至る所で人々が話しており、その盛り上がりはまるで昔の『戦狼』のようで、どこか愛国的なテーマを感じさせ、自然と民族自豪感が湧いてきます。&lt;/p&gt;
&lt;p&gt;春节档の「哪吒」の大ヒットと、予想外の民族的な誇り、かつて「戦狼」や愛国テーマの映画に見られたような現象について。多くの進歩は認められるものの、それほど素晴らしいわけではない。ゲームプレイヤーとして見ると、いくつかの面が脂ぎった感じがするし、アクションシーンはMMORPG風が強い。すでに、「哪吒」の興行収入のために映画チケットを購入したのに、見ない人がかなりいるという情報も目にしている。&lt;/p&gt;
&lt;h2 id=&#34;格闘シーンの質感が足りない&#34;&gt;格闘シーンの質感が足りない。
&lt;/h2&gt;&lt;p&gt;私はゲーム好きで、普段は様々なオンラインゲームの世界に浸っているため、映画にはあまり期待していませんでした。《それ（哪吒）》の熱風が吹き荒れるのは止められないという感じで、周りの人が皆口を達しているので、試しに見に行ってみることにしました。劇場に入り、映像が始まると、心臓が「ドスン」と沈むような感じでした。確かに以前より制作技術は向上しているものの、いくつかのシーンは少しベタベタした感触があり、アクションシーンはまるでオンラインゲームのようでした。長年ゲームをプレイしてきましたが、この映像スタイルはゲーム内のいくつかのシーンに似すぎており、映画らしさがないように感じました。&lt;/p&gt;
&lt;h2 id=&#34;熱狂的な映画ファン&#34;&gt;熱狂的な映画ファン
&lt;/h2&gt;&lt;p&gt;映画を見た後に出たら、なんとかなりの人が「哪吒」の興行収入のためにチケットを買ったのに映画を見ないと言っている。この手のやり方はすごいな、と思った。どうやら皆、「哪吒」への熱い支持があり、何かしたいと思っているようだ。&lt;/p&gt;
&lt;h2 id=&#34;物語の展開&#34;&gt;物語の展開
&lt;/h2&gt;&lt;p&gt;振り返ってみれば、「ワイルド・ソウル」の頃、呉京が「わが国を犯す者、たとえ遠くても必ず誅せられる」と叫んだ時、どれだけ多くの人が熱血に沸き立ち、中国の軍人たちはとても強く、我が国はとても強いと感じたでしょう。この「哪吒」は、そこまでストレートな愛国的なスローガンではありませんが、中国の伝統文化を鮮やかに表現しています。哪吒や敖丙といった神話上の人物は、子供の頃からその物語を聞いて育ちましたし、映画では彼らの恩讐や成長過程が血肉となって描かれています。これこそが、中国文化の魅力なのでしょう。&lt;/p&gt;
&lt;p&gt;哪吒の話をするといいでしょう。小さい頃から誤解され、白眼視されていましたが、彼は決して諦めず、「我の命は私が決める、天に左右されない」と叫びました。その精神と、私たち中国人の中にあるあの粘り強さがよく似ていますね。どんな困難に直面しても、私たちは決して頭を下げず、自分の努力で運命を変えようとします。アオ丙も同じです。彼は家族の使命を背負い、一見冷酷に見えますが、実際には心優しい性格で、友のために犠牲になることも厭いません。そんな友情や責任感は、現実の世界でもよく目にしませんか？&lt;/p&gt;
&lt;h2 id=&#34;アニメ映画の進歩&#34;&gt;アニメ映画の進歩
&lt;/h2&gt;&lt;p&gt;言わずもがな、《哪吒》にいくつかの不完全な点はあるものの、中国の伝統文化と現代映画技術をうまく融合させ、中国のアニメーション映画の進歩を見せてくれた。まるで昔《戦狼》が皆に中国映画の动作映画分野におけるブレイクスルーを見せたように。このような進歩は、中国映画も国際的な舞台で頭角を現し、外国人にも中国文化の素晴らしさを伝えられるようになるだろうと感じさせる。&lt;/p&gt;
&lt;p&gt;私たち中国人にとって、どこに行っても心の中に自分の国と文化を抱いている。そして、《哪吒》や《戦狼》のような映画は、まるで鍵のように、私たちの心の奥底にある民族の誇りの扉を開く。歓声と笑いの中で、国の強大さ、文化の魅力を感じさせると同時に、それぞれの職場で努力して奮闘し、国の繁栄昌盛に自分の力を尽くすことを激励してくれる。これがこれらの映画が大ヒットし、私たちの民族の誇りを目覚めさせる理由だろう。これからも、このような映画がたくさん現れて、私たちのこの民族の誇りを満たし続けることを願っている。&lt;/p&gt;</description>
        </item>
        <item>
        <title>バックエンドサービスTCP通信異常調査</title>
        <link>https://ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</link>
        <pubDate>Fri, 14 Feb 2025 22:54:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</guid>
        <description>&lt;p&gt;ビジネスモデル：バックエンドサービスはTCP経由でグループのマーケットデータゲートウェイと接続を確立します。各接続において、まず認証リクエストを送信し、その後、継続的にハートビートパケットを送信して接続状態を維持します。
しかし、ある日、サービス接続が切れているという警告メッセージを受け取りました。ログを詳細に調査した結果、バックグラウンドサービスは継続的にハートビートパケットを送信しているものの、相手からの応答はなく、それでも接続は切断されませんでした。&lt;/p&gt;
&lt;h2 id=&#34;現場概説&#34;&gt;現場概説
&lt;/h2&gt;&lt;p&gt;元々会社で残業してプロジェクトの進捗を詰めていたところ、仕事のグループチャットに突然警告メッセージが飛び込んできた。最初はよくあるトラブルかと思ったが、ネットワークのタイムアウトで心跳送信が失敗し、結果としてサービス接続が切れたのだろうと推測した。しかし、ログを詳しく調査したところ、実際はそうではなかった。バックエンドから認証ログインメッセージは送信されているものの、応答がないままで、その間も心跳パケットは途絶えず送られ続けている。ログの深掘り分析の結果、以下のいくつかの重要な問題点が明らかになった：&lt;/p&gt;
&lt;p&gt;認証メッセージに応答がない場合、相手のシステムが再起動中の可能性が非常に高く、その結果、認証メッセージがタイムリーに処理されなかったと考えられます。
未認証のままハートビートデータが送信される問題について調査した結果、プログラムのロジックに欠陥があることが判明しました。ハートビート送信関数の判定ロジックには問題があり、接続状態のみを検証しているものの、認証状態の検証は考慮されていませんでした。
サービスが接続を解除できれば、再接続メカニズムがトリガーされ、承認メッセージが再送信されます。&lt;/p&gt;
&lt;p&gt;現在、まだ最後の解決すべき問題が残っています—それはなぜサービスが接続を切断していないのかです。この問題を解決するには、より深く詳細な調査が必要です。&lt;/p&gt;
&lt;h2 id=&#34;ネットワークデータパケットを解析する&#34;&gt;ネットワークデータパケットを解析する
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;tcpdump&lt;/code&gt;は非常に強力なネットワークパケットキャプチャツールであり、ネットワークデータパケットをキャプチャするために使用できます。ネットワークパケットを分析することで、ネットワーク通信の詳細をより直感的に理解できます。ここでは、&lt;code&gt;tcpdump&lt;/code&gt;を使用してネットワークデータパケットをキャプチャし、さらに分析することができます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/backend-service-tcp-communication-troubleshooting/20250220151952.png&#34;
	width=&#34;1126&#34;
	height=&#34;202&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcpdump&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;557&#34;
		data-flex-basis=&#34;1337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;グラフ中のデータから、心拍が常に正常に送信されていることがわかりますが、相手側のサーバーからはデータが一切返信されておらず、ただ &lt;code&gt;ACK&lt;/code&gt; だけが送られてきました。これにより、接続は自動的に切断されません。&lt;/p&gt;
&lt;h2 id=&#34;一般的なフラグの説明&#34;&gt;一般的なフラグの説明
&lt;/h2&gt;&lt;p&gt;TCPプロトコルにおいて、&lt;code&gt;PSH&lt;/code&gt;(Push)と&lt;code&gt;ACK&lt;/code&gt;(Acknowledgment)は、データ転送とフロー制御の確認にそれぞれ使用される重要なフラグです。それらの役割は以下の通りです。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-pshpush-flag&#34;&gt;&lt;strong&gt;1. PSH（Push Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;機能：
PSH フラグの役割は、**受信側がバッファ内のデータを上層アプリケーションに直ちにプッシュする（バッファがいっぱいになるまで待つのではなく）**ことです。つまり、PSHフラグが付いたデータセグメントを受信すると、受信側は可能な限り速やかに処理してアプリケーションに渡すため、オペレーティングシステムのバッファに一時的に保存することはありません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;典型的な状況：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/HTTPSリクエスト：クライアントがリクエストを送信する際（例：&lt;code&gt;GET /index.html&lt;/code&gt;）には、&lt;code&gt;PSH&lt;/code&gt;を設定し、サーバーに直ちにレスポンスすることを期待します。&lt;/li&gt;
&lt;li&gt;SSHプロトコル：キーボード入力ごとに&lt;code&gt;PSH&lt;/code&gt;がトリガーされ、入力文字のリアルタイム転送を保証します。&lt;/li&gt;
&lt;li&gt;リアルタイム通信：ビデオストリーミングやオンラインゲームなどの低遅延シナリオでは、&lt;code&gt;PSH&lt;/code&gt;を使用して遅延を削減することがあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PSHは必須ではなく、受信側はこのフラグを無視しても構いません（ただし、データは通常通り処理する必要があります）。&lt;/li&gt;
&lt;li&gt;送信元が&lt;code&gt;PSH&lt;/code&gt;を設定しない場合、受信側は自身のバッファポリシーに基づいてデータをいつプッシュするかを決定します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-ackacknowledgment-flag&#34;&gt;&lt;strong&gt;2. ACK（Acknowledgment Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;機能：
ACK フラグは、&lt;strong&gt;先行するデータセグメントが正しく受信されたことを示す&lt;/strong&gt;ものです。各 ACK には、期待される次のバイトのシーケンス番号を含む確認番号（Acknowledgment Number）が含まれており、これは TCP の信頼性のある転送の中核となるメカニズムです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;動作原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;送信元がデータセグメントを送信する際、受信者が期待する &lt;code&gt;ACK&lt;/code&gt; 値（例えば &lt;code&gt;ACK = シーケンス番号 + データ長&lt;/code&gt;）を一緒に持ちます。&lt;/li&gt;
&lt;li&gt;受信側はデータを受信後、&lt;code&gt;ACK&lt;/code&gt;セグメントを生成し、受信確認済みのデータシーケンス番号を示すものとする。&lt;/li&gt;
&lt;li&gt;送信者は、対応する&lt;code&gt;ACK&lt;/code&gt;を受け取るまで、未確認のデータを再送しません。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;送信元がシーケンス番号&lt;code&gt;100～199&lt;/code&gt;のデータセグメントを送信した場合、受信側の&lt;code&gt;ACK&lt;/code&gt;は&lt;code&gt;200&lt;/code&gt;であるべきです。&lt;/li&gt;
&lt;li&gt;受信側が&lt;code&gt;100～199&lt;/code&gt;のデータの一部を受信していない場合、&lt;code&gt;ACK=150&lt;/code&gt;を送信側に送信して再送を要求します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;pshとackの組み合わせ&#34;&gt;PSHとACKの組み合わせ
&lt;/h3&gt;&lt;p&gt;TCP パケットにおいて、&lt;code&gt;PSH&lt;/code&gt; と &lt;code&gt;ACK&lt;/code&gt; が同時に出現することは、以下の状況でよく見られます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTPリクエスト応答
クライアントが &lt;code&gt;POST&lt;/code&gt; リクエストを送信する際（データを含む場合）、&lt;code&gt;PSH&lt;/code&gt; と &lt;code&gt;ACK&lt;/code&gt;（以前の応答に対する確認）が設定されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Client → Server: SYN, ACK=1 → 建立连接
Client → Server: PSH, ACK=1, 数据 → 发送请求数据
Server → Client: PSH, ACK=数据长度+1 → 返回响应
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSHハンドシェイク後のコマンド送信
クライアントがコマンドを入力すると、&lt;code&gt;PSH&lt;/code&gt;と&lt;code&gt;ACK&lt;/code&gt;を含むデータセグメントを送信し、コマンドが直ちに転送され、サーバーによって処理されることを保証します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;他のフラグとの関連&#34;&gt;他のフラグとの関連
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フラグ&lt;/th&gt;
&lt;th&gt;名前&lt;/th&gt;
&lt;th&gt;簡単な説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SYN&lt;/td&gt;
&lt;td&gt;同期&lt;/td&gt;
&lt;td&gt;初期化接続（三次握手）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIN&lt;/td&gt;
&lt;td&gt;終了&lt;/td&gt;
&lt;td&gt;エレガントな接続のクローズ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;リセット&lt;/td&gt;
&lt;td&gt;強制終了 (異常時)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URG&lt;/td&gt;
&lt;td&gt;緊急&lt;/td&gt;
&lt;td&gt;緊急ポインタをマークする（ほとんど使用しない）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;データがアプリケーション層にできるだけ早く到達することに注力し、遅延を低減することです。&lt;/li&gt;
&lt;li&gt;ACKは、&lt;strong&gt;データの信頼性のある転送&lt;/strong&gt;に焦点を当てており、パケットの消失や順不同を避けることを目的としています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;両者は協調して働き、TCPプロトコルの効率と信頼性のバランスを取った。&lt;/p&gt;</description>
        </item>
        <item>
        <title>お金を稼ぐことは、焦ってもだめだし、焦っていても役に立たない。</title>
        <link>https://ttf248.life/ja/p/investing-takes-time/</link>
        <pubDate>Fri, 14 Feb 2025 20:30:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/investing-takes-time/</guid>
        <description>&lt;p&gt;長年の株式投資の経験を振り返ると、大金を稼いだわけではないものの、あまり損もしていない。最大の課題は資金の流れの計画が不合理で、精神状態が不安定なことだ。現在の段階では、主な収入源は仕事であり、毎日働いて固定給を得ているため、金銭の変動に対する耐性は債券や銀行預金のレベルに留まっている。しかし、人は皆欲深いので、買わなければ上昇してもお金は稼げないし、買えば下落すると損失を被る。この時こそ、精神的な安定が特に重要であり、それは私たちの富の船を安定させるのに役立つだろう。&lt;/p&gt;
&lt;p&gt;株式投資におけるメンタルヘルスの問題について&lt;/p&gt;
&lt;h2 id=&#34;過去の損失事例&#34;&gt;過去の損失事例
&lt;/h2&gt;&lt;p&gt;市場デビュー当初に小型株や話題の銘柄に手を出したことがあったものの、その後は主に中国工商銀行、中国聯通、恒生電子、中興通信、各種大型株インデックスファンドといった青いチップの大手株に触れてきた。&lt;/p&gt;
&lt;p&gt;年利で銀行の三年定期預金に匹敵すると口先では言っているものの、実際にはもっと多くを欲しがり、買い増しを急いだ結果、資金繰りが悪化してしまった。保険の購入や住宅購入、結婚式などは資金の流れの大頭であり、全体的な計画において十分な資金を残しておらず、その結果、後々の資金不足につながった。&lt;/p&gt;
&lt;p&gt;ブルーチップを買うということは、まさに「古参の富豪」と肩を並べることだ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恒大が出問題を起こしたとき、銀行株が暴落し、その状況をうまく掴んで利益を得た場合、経済全体に対する認識に欠陥があることになるだろう。不動産は国家経済の中で占める割合が大きすぎるし、関連するものが多すぎて、&lt;strong&gt;ハードランディング&lt;/strong&gt;はできない。その後も株式市場は下向きになり、&lt;strong&gt;中国工商銀行&lt;/strong&gt;のような高配当株は2年ほど上昇を続けた。&lt;/li&gt;
&lt;li&gt;貿易戦争が始まった段階で、&lt;strong&gt;中興&lt;/strong&gt;は大きな打撃を受け、株価も大きく下落しましたが、その後も徐々に回復しました。&lt;/li&gt;
&lt;li&gt;恒生電子は旧東家のものですが、アリババグループから出て行った後は株価も大きく下落しました。しかし、この銘柄は仕手によって操作されており、毎年何度か上昇することがあります。適切なポジション管理をすれば、大した損失はありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;強欲理性をもむす怪物&#34;&gt;強欲：理性をもむす「怪物」
&lt;/h2&gt;&lt;p&gt;株式投資における最も一般的な問題は、強欲です。株価が上昇し、投資家の帳簿上の利益が着実に増加すると、強欲は静かに生まれます。すでに株価が高値にあるにもかかわらず、さらに上昇を夢見て、より多くの利益を得ようと、手放すことを惜しる人がいます。彼らは強欲に惑わされ、市場の法則やリスクを忘れてしまいます。例えば、ある人気テーマ株の炒め合いの中で、短期的に数倍も株価が上昇したのを見て、深入りし、買い増しを続けることで、最後の勝者になろうと期待する投資家が現れます。しかし、市場はいつまでも熱狂的ではありません。バブルが崩れ、株価が断崖絶壁のように下落すると、強欲に突き動かされたこれらの投資家は、甚大な損失を被ることがあります。強欲は彼らの合理的な分析と意思決定能力を奪い、「ギャンブラー」にしてしまい、賢明な投資家ではありません。&lt;/p&gt;
&lt;h2 id=&#34;恐怖行動を妨げる鎖&#34;&gt;恐怖：「行動を妨げる「鎖」
&lt;/h2&gt;&lt;p&gt;貪欲の反対は恐れです。恐れもまた、株式市場において強力な破壊力を持っています。市場が急落し、株価が大幅に下落すると、投資家は容易にパニックに陥ります。その恐怖感から、彼らは市場への信頼を失い、手元の株式のファンダメンタルズが良好であっても、さらなる損失を恐れて慌てて売却してしまうことがあります。例えば、世界的な金融危機が発生した際、多くの優良株の株価も市場全体と共に大幅に下落しました。恐怖に支配された一部の投資家は、これらの企業の長期的な価値を見抜くことができず、非常に低い価格で株式を売り払い、その結果、その後の市場反発や企業業績の成長による豊かなリターンを逃してしまいました。恐れは投資家が短期的に損失を被らせるだけでなく、長期的な心理的影を落とし、再び市場に参入することを躊躇させ、投資機会を逃してしまう可能性もあります。&lt;/p&gt;
&lt;h2 id=&#34;盲目な追随方向を失う霧&#34;&gt;盲目な追随：方向を失う「霧」
&lt;/h2&gt;&lt;p&gt;株式投資や資産運用において、無謀な追随は投資家が陥りやすい心理的な難題のまた一つです。情報爆発の時代において、様々な投資アドバイス、市場の噂話、そして話題沸騰の情報が押し寄せてきます。多くの投資家は独立した思考と判断能力に欠け、盲目的に他人を追随します。周りの人がある株式を買って儲けているのを見ると、深く考えずに追随したり、「内部情報」と呼ばれるものがあると聞けば、全財産を投じてしまいます。このような無謀な追随は、株式そのものの研究や分析を無視し、投資家を霧の中で迷子になった船のように、方向性を失わせてしまいます。例えば、ある種のコンセプト株は市場の炒め物に初期段階で、追随者には短期的な利益をもたらすかもしれませんが、炒め物の熱が冷まると株価は暴落し、状況を理解せず盲目的に追随した投資家は「後付け購入者」となってしまいます。彼らは、それぞれの投資家のリスク許容度、投資目標、そして投資期間はそれぞれ異なり、他人にとって有効な投資戦略が必ずしも自分に合わないということに気づいていないのです。&lt;/p&gt;
&lt;h2 id=&#34;過信潜む暗礁&#34;&gt;過信：潜む「暗礁」
&lt;/h2&gt;&lt;p&gt;過度な自信も、株式投資の心構えにおいて無視できない問題です。一部の投資家は、何度か投資で成功した後、自己を膨張させ、市場の法則をすでに理解しており、正確に株価の動向を予測できると考えるようになります。彼らは市場の複雑さと不確実性を無視し、過剰な取引を行い、盲目的に投資規模を拡大したり、さらには高レバレッジで投機したりします。しかし、市場は変わりやすく、過度に自信のある投資家は、予期せぬ市場の変動によって大きな打撃を受けることがよくあります。例えば、経験が浅いにもかかわらず初戦で勝利した投資家が、自分自身をプロの投資能力があると信じ込み、頻繁に株式を売買し、投資額を増やし続けます。市場にシステムリスクが発生したり、個別株で突発的なネガティブなニュースが出た場合、彼らは過度な自信から損失を止めることができず、資本が大幅に目減りします。過度な自信は、海面下にある暗礁のように、一見穏やかですが、気づかないうちに投資家の富の船を難破させてしまうことがあります。&lt;/p&gt;
&lt;h2 id=&#34;心の持ち方を調整し着実に資産を管理するには&#34;&gt;心の持ち方を調整し、着実に資産を管理するには
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;正しい投資理念を確立する：投資家は株式投資や資産運用が、一朝一時の大儲けではなく、資産の長期的な安定増強を実現するためにあることを明確にすべきです。投資に関する知識を学び、市場の法則を理解し、バリュー投資や長期投資の理念を確立することで、短期的な利益や市場の感情に左右されるのを避けることができます。例えば、企業のファンダメンタルズを深く研究し、その収益性、業界における地位、経営陣などに注目することで、長期的な投資価値のある株式を選択し、盲目的に短期的な話題を追い求めることを避けるべきです。&lt;/li&gt;
&lt;li&gt;合理な投資計画を策定する：ご自身の財務状況、リスク許容度、および投資目標に基づいて、科学的で合理的な投資計画を立てます。投資金額、投資期間、期待収益、損切りポイントなどの重要な要素を明確にし、厳密に計画を実行します。これにより、投資中に感情の変動によって衝動的な決定を下すことを避けることができます。例えば、各株式への投資割合を総資産の一定の割合を超えないように設定し、株価が上昇して期待収益に達した場合には利食いを行い、下落が損切りポイントに触れた場合には断固として損切りを行います。&lt;/li&gt;
&lt;li&gt;感情をコントロールし、冷静さを保つ：市場の変動に直面する際、自分の感情をコントロールし、冷静さと合理性を保つことが重要です。注意をそらすこと、運動、他人との交流などを通じて投資ストレスを緩和し、感情が投資決定に悪影響を与えることを避けることができます。市場が大きく変動した場合は、まず原因を冷静に分析し、自身の投資戦略と株式の基礎に基づいて合理的な判断を下すことが重要です。盲目的に追随したり、パニック売りをしたりするべきではありません。&lt;/li&gt;
&lt;li&gt;継続的な学習と反省：株式市場は常に発展変化しており、投資家は新しい投資知識やスキルを継続的に学び、マクロ経済動向、業界ニュース、企業情報などに注意を払い、自身の投資水準を不断に向上させる必要があります。同時に、定期的に自身の投資行動を反省し、経験と教訓をまとめ、心構えや意思決定における問題点を発見し、迅速に調整・改善することが重要です。例えば、投資が終わるたびに、投資プロセス全体を振り返り、成功と失敗の原因を分析し、今後の投資で同様の誤りを避けるためにどのように考えればよいかを考察します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;株式投資や資産運用は、長く困難な道のりであり、心構えが非常に重要です。冷静さ、謙虚さ、そして独立した思考を保つことで初めて、株式市場の波に乗りこなし、資産価値の維持・向上を実現できます。投資家は、良好な心構えを養うことを投資プロセスにおける必須科目として捉え、その上で、心の準備を整えて資産運用の航海を進め、株式投資や資産運用の道において着実に前進していくべきです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>時の積み重ねた異端な幻想と感情の依りがり</title>
        <link>https://ttf248.life/ja/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</link>
        <pubDate>Thu, 13 Feb 2025 22:12:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</guid>
        <description>&lt;p&gt;最初のネット小説の読者が中年に入ると、彼らに向けた爽文も変化した。主人公は多くの場合、父親、師匠、または老人として登場し、中年読者の生活や感情に対する異なるニーズに応えている。このような作品は、単にレベルアップや逆転を追求するのではなく、感情的な共鳴や人生の悟りに重きを置いている。&lt;/p&gt;
&lt;h2 id=&#34;読者層の変化時の流れの中で&#34;&gt;読者層の変化：時の流れの中で
&lt;/h2&gt;&lt;p&gt;かつてネット小説の読者だった人々は、今や多くが中年を迎えています。彼らは人生の試練を経験し、心境と価値観の変化がありました。若い頃に追い求めていた熱血や冒険といった要素だけではもう十分ではなく、むしろ現在の生活状況に合った感情的な共鳴や、過去への追憶、そして未来への期待を読書から得たいと考えています。中年向けの爽文小説は、まさにこのような心理的ニーズに基づいて生まれ、より人生経験豊かな人々が共感できるようなエピソード設定で、この特定の層の読者を引きつけています。&lt;/p&gt;
&lt;h2 id=&#34;転身少年ヒーローから中年を支える存在へ&#34;&gt;転身：少年ヒーローから中年を支える存在へ
&lt;/h2&gt;&lt;p&gt;私の弟子たちは皆、大反派だ：師となった陸州は、個性豊かで力強い弟子たちに直面する。彼らは善と悪の間で葛藤し、陸州は彼らを正しい道へと導く必要がある。この小説は、主人公と弟子たちの交流を通して、中年者が次世代を教える際に直面する挑戦と苦悩を描いている。同時に、弟子たちの成長と変化は読者に希望と未来を見せつけ、子孫や若者世代への期待を映し出す。&lt;/p&gt;
&lt;h2 id=&#34;感情の共鳴人生の悟りと家族への責任&#34;&gt;感情の共鳴：人生の悟りと家族への責任
&lt;/h2&gt;&lt;p&gt;六十歳の誕生日でシステムを手に入れた主人公が、新たな人生の旅を始める。この設定は、中年読者にとって「遅すぎることはない」という希望と激励を与えてくれる。晩年期に入っていても、システムを通して自分の価値や夢を実現できるのだ。この展開は、読者が人生で失った機会や未完の夢を思い起こさせる一方で、前向きな生き方を促し、どんな年齢でも目標を追い求めることを奨励する。&lt;/p&gt;
&lt;h2 id=&#34;プロットデザイン中年生活のリズムと面白さに合わせたもの&#34;&gt;プロットデザイン：中年生活のリズムと面白さに合わせたもの
&lt;/h2&gt;&lt;p&gt;中年爽文のプロットデザインは、しばしば生活の細部や感情の繊細な表現をより重視するようになる。若い頃の爽文のようにテンポの良いレベルアップや冒険を追求するのではなく、人物間の関係や感情的な葛藤をより重視する。例えば、『史上最強の师傅』では、主人公と弟子との師徒情誼、同門同士の兄弟情誼などが丁寧に描かれている。このようなプロットデザインは、中年読者にとって温かさと親しみを感じさせ、まるで自分自身の生活の中にある親情、友情、愛情を垣間見ているかのように感じさせる。&lt;/p&gt;</description>
        </item>
        <item>
        <title>旧正月の映画チケットの値段の謎：オンラインと実店舗での価格差</title>
        <link>https://ttf248.life/ja/p/spring-festival-movie-tickets-price-mystery-online-vs-offline/</link>
        <pubDate>Tue, 11 Feb 2025 00:02:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/spring-festival-movie-tickets-price-mystery-online-vs-offline/</guid>
        <description>&lt;p&gt;旧正時代の間、家族（七八人）で映画を見に行こうと思っていて、淘票票や猫眼でチケットを買おうとしたら、値段を見てみると60元。たまたま手元に映画館のチャージカードがあったので、窓口でチケットを購入する必要があり、何か割引がないか尋ねてみたところ、同じ回なのに窓口で購入すると35元という値段になっていて、この価格差には正直驚きました。&lt;/p&gt;
&lt;h2 id=&#34;プラットフォーム手数料の隠れマージン&#34;&gt;プラットフォーム手数料の「隠れマージン」
&lt;/h2&gt;&lt;p&gt;オンラインチケット購入プラットフォームは便利ですが、手数料は無視できません。正確な座席選択やいつでも購入履歴を確認できるなど、ユーザーに便利な購入体験を提供するために、資金を投入して維持する必要があります。そして、これらのコストはサービス料という形でチケット価格に上乗せされ、結果としてオンラインチケットの価格が高くなります。&lt;/p&gt;
&lt;h2 id=&#34;映画館の差別化運営戦略&#34;&gt;映画館の差別化運営戦略
&lt;/h2&gt;&lt;p&gt;春节商戦の映画鑑賞需要が爆発的に伸び、劇場は収益最大化のため差別価格設定を採用しています。オンラインプラットフォームのトラフィックが多く、多くの人が事前にオンラインでチケットを購入することが習慣になっているため、劇場はオンラインチケットの価格を高く設定します。一方、窓口では直接、当日券購入客に対応しており、この層を引きつけるために低い価格を提供しています。&lt;/p&gt;
&lt;h2 id=&#34;協力分与の裏にある価格論理&#34;&gt;協力分与の裏にある価格論理
&lt;/h2&gt;&lt;p&gt;オンラインプラットフォームと映画館の協力による分配モデルがチケット料金に影響を与えます。オンラインプラットフォームは興行収入から分け前を得る必要があり、利益を確保するためにチケット料金を引き上げます。一方、映画館の窓口では中間マージンがなく、コストが下がるため、チケット料金は自然と手頃です。&lt;/p&gt;
&lt;h2 id=&#34;消費者チケット購入のコツ&#34;&gt;消費者チケット購入のコツ
&lt;/h2&gt;&lt;p&gt;消費者は今後はチケットを購入する際に、オンラインプラットフォームばかりに注目せず、劇場に電話して料金を尋ねたり、直接窓口で相談してみると、思わぬ惊喜があるかもしれません。もしよく映画を見るなら、劇場会員カードを作って会員特典を利用すれば、かなりお金を節約できます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>2025年春節映画における政治的要素の分析</title>
        <link>https://ttf248.life/ja/p/political-elements-in-chinese-new-year-films-2025/</link>
        <pubDate>Mon, 10 Feb 2025 23:49:42 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/political-elements-in-chinese-new-year-films-2025/</guid>
        <description>&lt;p&gt;久しぶりに春節の時期に繰り出して賑わってみたのですが、今回は2本の映画を見て、少し感じが違いました。&lt;/p&gt;
&lt;p&gt;この記事では、2025年の春节期間の映画の新変化を論じ、「探偵タンポグリッド1900」と「哪吒の魔童騒海」に焦点を当てる。前者は1900年アメリカ・サンフランシスコのチャイナタウンを舞台に、華人に対する人種差別や抑圧を描き出し、社会政治環境を反映する。後者はアニメーション映画として、玉虚宮がペンタゴンを影射するような、天元鼎上のドル記号がドルの覇権を象徴するような、仙人玉牌がアメリカのグリーンカードを示唆するような、滅魂丹が生化兵器を暗示するような、豊富な隠喩要素を用いて現実の国際政治体制を皮肉している。両作品は新たな鑑賞体験をもたらし、映画芸術と政治的表現の関係についての考察を喚起する。&lt;/p&gt;
&lt;h2 id=&#34;春节映画のスタイル刷新&#34;&gt;春节映画のスタイル刷新
&lt;/h2&gt;&lt;p&gt;従来の旧正月の映画は、気軽に楽しめる娯楽作品や家族みんなで楽しめるものが多く、観客が休日に心身をリラックスさせることを目的としており、ほとんど政治的にデリケートな話題には触れていませんでした。しかし2025年の旧正月映画は、《唐人街探案1900》と《哪吒之魔童闹海》が豊富な政治的要素を取り入れ、観客の幅広い議論を呼び起こし、旧正月の映画に新たな風を吹き込みました。&lt;/p&gt;
&lt;h2 id=&#34;唐人街探案1900時代政治の鮮やかな描写&#34;&gt;『唐人街探案1900』：時代政治の鮮やかな描写
&lt;/h2&gt;&lt;p&gt;《唐人街探案1900》の物語は、1900年のアメリカ・サンフランシスコのチャイナタウンを舞台に設定されており、華人が海外で深刻な人種差別と抑圧を受けていた時代です。主人公たちが事件を捜査する際、事件の謎を解き明かすだけでなく、社会各方面からの差別や不当な扱いにも対応しなければなりません。この映画は、人種差別と権力闘争を描き出し、当時の社会政治環境をリアルに反映しており、動盪の時代に華人移民が生存と尊厳のために行った困難な抗争を目の当たりにし、その背景にある政治的な問題について深く考察する価値があります。&lt;/p&gt;
&lt;p&gt;このような歴史的背景は、TikTokと周受資の件のように、現代の海外華人がビジネス分野で直面している困難を思い起こさせないだろうか。&lt;/p&gt;
&lt;p&gt;現地時間2024年12月6日、アメリカ合衆国コロンビア特別区連邦巡回上訴裁判所はTikTokの要請を退け、国家安全保障の名目で制定された強制売却法が憲法上の審査に耐えたと認めました。TikTok CEOの周受資氏は従業員宛てのメモの中で、「差し止めを求め、米最高裁判所の審査を待つ」と述べました。この一連の出来事が発端したのは、アメリカが施行した「アメリカ国民を外国敵対勢力の支配から保護するための法律」であり、同法に基づき、TikTokの運営企業であるByteDanceは、法案成立後270日以内にTikTokの米国事業を売却する必要があり、強制的な売却期限は2025年1月19日です。&lt;/p&gt;
&lt;p&gt;これまで様々な公聴会で、周受資氏は数々の嫌がらせを受けてきました。現地時間 2024 年 1 月 31 日、米国議会上院司法委員会は「大手テクノロジー企業とオンライン小児性的搾取の危機」に関する公聴会を開催し、著名な対中強硬派議員トム・コートン氏が周受資氏に対し、国籍に関する8つの質問を連続して投げかけました。彼の国籍は何か、中国国籍や米国国籍に申請したことはあるか、さらには妻や子供の国籍まで問い詰めたのです。明らかに公聴会のテーマは「オンライン小児性的搾取」であるにも関わらず、議員は話題をTikTokが中国企業バイトダンスに所有されているという点に移し、周受資氏にテーマと無関係な質問をさせました。映画『唐人街探案1900』における海外華人の不当な差別と同様に、周受資氏はTikTokの背景から、商業分野において不公正な扱いと疑問を受けます。一連の出来事は、異なる時代において、海外華人が自己の発展と権利の擁護を追求する際に直面してきた外部からの重い阻害を反映しており、100年前の民族差別も、現代におけるビジネス上の政治的な操作も、私たちに深く反省させるべきものです。&lt;/p&gt;
&lt;h2 id=&#34;哪吒の魔童波濤を騒がせるに見る神話に潜む政治的メタファーの分析&#34;&gt;『哪吒の魔童、波濤を騒がせる』に見る神話に潜む政治的メタファーの分析
&lt;/h2&gt;&lt;p&gt;『哪吒の魔童 騒海』は一見すると普通の 애니메이션 영화이지만, 여러 설정과 줄거리에 정치적 은유가 담겨 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;権力構造の投影：玉虚宮は仙界における最高権力の中枢として造営され、建築様式はアメリカ国防総省に類似している。内部は白を基調とし、西側が「普遍価値」を口実に推し進める覇権主義を象徴する。無量仙翁が統括する「除妖隊」の配下にある鹿男鶴女は、アメリカの同盟国体系における日韓に対応すると考えられている。玉虚宮の「オンライン会議」の場面で、十二金仙が「封神大戦」について議論するのは、アメリカ主導のNATO会議のように、「秩序を維持する」という名目で他国を抑圧しているかのようだ。&lt;/li&gt;
&lt;li&gt;経済覇権の示唆：玉虚宮で丹を錬る際に使用される天元鼎には、入り口にドルマークがあり、米国が経済覇権によって他国の資源を「錬成」することを暗示している。映画では無量仙翁が「替天行道」の名のもとに龍族を鼎の中に投入して錬成させ、まるでいくつかの国が「国際ルール」を借りて利益を得るかのようだ。&lt;/li&gt;
&lt;li&gt;身分と階級の隠喩：哪吒が授与された仙人の身分を示す玉牌は、色や紋様のデザインがアメリカのグリーンカードに非常に似ており、仙界における「異族」への排除と階級分けを象徴し、現実世界における異なる国や集団間の身分の違いと不平等な扱いを示唆している。&lt;/li&gt;
&lt;li&gt;悪意ある行為への婉曲な言及：無量の仙翁が哪吒に強制的に飲ませた滅魂丹は、生体兵器と酷似しており、ある国々が「救済」の名のもとに、破壊や他国の破滅を行うということを皮肉っている。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;資源と発展の象徴&lt;/strong&gt;: 七色宝蓮は、哪吒と敖丙の肉体を再構築する上で重要な役割を果たし、大国が独占するエネルギーと技術の命脈を象徴する。その「瓊漿玉液」は、玉虚宮の「成仙試験」を経て入手する必要があり、それは現実における発展途上国の核心資源への依存と、覇権体系下での「規則的な略奪」を反映している。宝蓮の一時的な機能停止とその回復条件は、エネルギー危機下における小国の生存困窮を暗示する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;映画芸術と政治表現の深淵なる考察&#34;&gt;映画芸術と政治表現の深淵なる考察
&lt;/h2&gt;&lt;p&gt;この二本の映画は、春節期間中の観影ブームの中で政治的な要素を取り入れ、観客に新たな鑑賞体験をもたらした。単なる娯楽作品ではなく、鏡のように歴史と現実の政治問題を映し出している。これは、映画芸術と政治的表現の関係について深く考察するきっかけとなった。今後の映画制作において、監督はより多くの映画を通じて社会や政治に対する見解を伝えようとするだろうか？ 映画という強力な文化伝達媒体として、芸術的な表現と同時に、社会の現実へのより深い関心と考察を担えるだろうか？ これらの問題は、映画鑑賞時に深く探求する価値があり、映画業界が芸術と現実の表現の融合において、さらに素晴らしい作品を生み出すことを期待している。&lt;/p&gt;
&lt;h2 id=&#34;イースターエッグ&#34;&gt;イースターエッグ
&lt;/h2&gt;&lt;p&gt;豆包の大規模言語モデル、今日はあまり頼りにならない。何度か引っかかることがあり、文章が半分まで来たらそこで止まってしまい、さらに進めない。やり直すしかない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>アメリカの二大政党—民主党と共和党</title>
        <link>https://ttf248.life/ja/p/us-two-major-parties-democrats-republicans/</link>
        <pubDate>Mon, 10 Feb 2025 23:40:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/us-two-major-parties-democrats-republicans/</guid>
        <description>&lt;p&gt;民主党と共和党は、政治理念、政策主張、そして社会的な価値観の面で著しい違いがあります。&lt;/p&gt;
&lt;h2 id=&#34;政治理念と政策主張&#34;&gt;政治理念と政策主張
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;民主党：リベラルな傾向を持ち、政府が経済および社会問題において積極的な役割を果たすべきだと主張し、社会福祉、環境保護、多様性文化を支持する。税制政策においては、低・中間所得者層への減税を支持すると同時に、高所得者や企業への課税率引き上げを求める。社会問題に関しては、中絶の権利、同性婚を支持し、厳格な銃規制を提唱する。外交政策においては、多角主義と外交手段を重視し、国際協力を通じて地球規模の問題解決を目指す。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;共和党&lt;/strong&gt;：保守主義的傾向があり、政府の介入を制限し、個人の自由と市場経済を重視する。税務政策においては減税を支持しており、所得に関わらず全ての人に適用されるべきだと考えている。社会問題に関しては中絶や同性婚には反対し、銃を持つ権利を支持している。外交政策においては強硬な立場を取り、軍事手段によって国益を守ることを支持する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;トランプ政権の意義&#34;&gt;トランプ政権の意義
&lt;/h2&gt;&lt;p&gt;ドナルド・トランプが2024年に再びアメリカ合衆国大統領に選出されたことは、共和党がアメリカの政治における優位性を確立したことを意味する。トランプの政策には以下が含まれる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;経済政策：トランプ氏は、減税と規制緩和を通じて経済成長を促すことを主張しており、特に伝統的な製造業やエネルギー産業の発展を支持しています。また、アメリカの経済的利益を守るために、保護主義的な貿易政策を採用し、既存の貿易協定との再交渉や離脱に傾倒する傾向があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移民政策：トランプ氏は、国境警備の強化、不法移民の制限、そして合法的移民に対する厳格な審査と制限を実施する計画です。また、難民や亡命申請を制限し、国家の安全を守ることを支持しています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外交政策：トランプ氏は、単独主義を志向し、「アメリカ第一」を強調し、国際組織への依存を減らし、同盟国との関係を見直すとともに、必要に応じてより強硬な外交手段を取る傾向があります。また、化石燃料の生産と使用を拡大し、環境保護に関する規制を緩和する計画です。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トランプ氏の再選は、アメリカ国内政策の大幅な変更を引き起こし、世界的な政治と経済に大きな影響を与える可能性がある。特に貿易、環境、人権などの分野において、彼の政策は国際社会からの注目と反応を招くことが予想される。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ローカルにdeepseek-R1をデプロイ</title>
        <link>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</link>
        <pubDate>Fri, 07 Feb 2025 22:41:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</guid>
        <description>&lt;p&gt;Ollamaは、ユーザーがローカルで大規模言語モデル（LLM）を実行およびデプロイできるようにすることを目的としたオープンソースのAIツールです。開発者がクラウドサービスに依存することなく、GPTのようなモデルをローカルマシン上で利用できる、便利で効率的な方法を提供することを目指しています。Ollamaは複数のモデルをサポートしており、パフォーマンスの最適化に重点を置いており、リソースが限られたデバイスでもこれらのモデルをスムーズに実行できるようにします。&lt;/p&gt;
&lt;p&gt;Ollama を使用すれば、ユーザーはテキストベースの AI アプリケーションを利用でき、データプライバシーを気にすることなく、また高額な API 利用料金を心配することなく、ローカルにデプロイされたモデルと対話することができます。コマンドラインインターフェース（CLI）を通じて様々なモデルを呼び出し、自然言語処理や質問応答などのタスクを実行できます。&lt;/p&gt;
&lt;p&gt;Ollamaは様々なモデルを試すのに適していますが、Windows版をテストしたところ、ハードウェアの性能を十分に発揮できないようです。原因はWindows版にあるのかもしれません。Linux版の方が良いかもしれません。32bパラメータのモデルをデプロイした場合、メモリやGPUの負荷が低いにも関わらず、応答速度が非常に遅いです。&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア概要&#34;&gt;ハードウェア概要
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;オペレーティングシステム：win11&lt;/li&gt;
&lt;li&gt;CPU：i7-10700K&lt;/li&gt;
&lt;li&gt;メモリ：40GB&lt;/li&gt;
&lt;li&gt;グラフィックボード：RTX 3060 12GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;環境準備&#34;&gt;環境準備
&lt;/h2&gt;&lt;p&gt;新たにシステム環境変数を追加し、今後の利用を容易にします。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_MODELS=E:\ollama&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
この変数は、Ollamaモデルの保存パスを指定します。&lt;code&gt;E:\ollama&lt;/code&gt; はフォルダパスで、すべてのローカルモデルファイルがそのディレクトリに格納されていることを示しています。Ollamaは、このパスに基づいてダウンロードまたはデプロイした言語モデルをロードして使用します。モデルファイルを別の場所に保存したい場合は、このパスを変更するだけです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_HOST=127.0.0.1:8000&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
この環境変数は、Ollama サービスのホストとポートを設定します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;127.0.0.1&lt;/code&gt; はローカルアドレス（localhost）であり、Ollama サービスはローカルからのリクエストのみをリッスンします。&lt;/li&gt;
&lt;li&gt;8000は指定されたポート番号で、Ollamaサービスが8000ポートでリクエストを待機し処理することを示します。必要に応じてポート番号を変更できますが、そのポートが他のアプリケーションによって使用されていないことを確認してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_ORIGINS=*&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
この環境変数は、Ollama サービスにアクセスできるリクエストのソースを制御します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; は、Ollama サービスへのアクセスを任意のソース（すべてのドメインと IP アドレス）から許可することを意味します。これは通常、開発およびデバッグ環境で使用されます。本番環境では、セキュリティを高めるために、特定のドメインまたは IP からのみアクセスできるように、より厳格なソースの制御を指定することが一般的です。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;deepseek-r1モデルのデプロイ&#34;&gt;DeepSeek-R1モデルのデプロイ
&lt;/h2&gt;&lt;p&gt;Ollamaのインストールは簡単で、ここでは詳細を説明しません。&lt;/p&gt;
&lt;p&gt;インストール後の検証：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core&amp;gt;ollama -v
ollama version is 0.5.11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モデルのデプロイについては、公式ウェブサイトのモデルページを参照し、対応するパラメータを持つモデルを選択してください。例：&lt;code&gt;ollama run deepseek-r1:14b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;14bパラメータは会話のコンテキストを効果的に記憶できますが、より小さいパラメータバージョンではそれができません。32bパラメータバージョンについては、ローカルでのデプロイが非常に遅く、さらなるテストは行っていません。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ollama.com/library/deepseek-r1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ollama.com/library/deepseek-r1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/x18990027/article/details/145368094&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/x18990027/article/details/145368094&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>PowerShell 7 と永続化設定コマンドライン予測ビュー</title>
        <link>https://ttf248.life/ja/p/powershell-7-persisting-settings-command-line-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/powershell-7-persisting-settings-command-line-prediction-view/</guid>
        <description>&lt;p&gt;Linuxのzshに慣れていて、先日ブログを書こうとしたときに、PowerShell 7も永続的な設定でコマンドライン予測ビューをサポートしていることに気づいたので、試してみたところ、なかなか便利だった。&lt;/p&gt;
&lt;p&gt;どういう操作をしたのかもわからないけど、この機能がオンになってしまったみたいだ。とにかく、そうなってしまった。&lt;/p&gt;
&lt;p&gt;現代の多様なオペレーティングシステム環境において、システム管理者や開発者は、プラットフォームを越えて効率的かつ強力なツールを探し求めています。それは、システム管理および自動化タスクのニーズを満たすためです。PowerShell 7はまさにそのような注目を集めているツールであり、強力なスクリプト作成機能を提供するだけでなく、Windows、Linux、macOSなどのオペレーティングシステムを跨いで実行され、ユーザーに前例のない利便性をもたらします。&lt;/p&gt;
&lt;h2 id=&#34;powershell-7クロスプラットフォームの強力なツール&#34;&gt;PowerShell 7：クロスプラットフォームの強力なツール
&lt;/h2&gt;&lt;h3 id=&#34;クロスプラットフォーム機能&#34;&gt;クロスプラットフォーム機能
&lt;/h3&gt;&lt;p&gt;PowerShell 7は、プラットフォームの制約を取り払い、Windowsシステムでのエンタープライズサーバー管理、Linux環境でのシステム運用、macOS上での日常的な開発タスクなど、あらゆる場所で統一されたPowerShell 7ツールを使用できます。これにより、作業効率が大幅に向上し、プラットフォームの違いによる学習コストや操作の複雑さが軽減されます。&lt;/p&gt;
&lt;h3 id=&#34;強力な機能&#34;&gt;強力な機能
&lt;/h3&gt;&lt;p&gt;強力なスクリプト作成機能を備えており、オブジェクト指向プログラミング、関数、モジュールなどの高度なプログラミング機能に対応しています。PowerShell 7を通じて、ユーザーはファイルシステムを簡単に操作し、ファイルの作成、削除、コピー、移動などの操作を実行できます。レジストリにアクセスして変更することで、システムの構成を深く調整することも可能です。プロセスやサービスを管理し、システム動作状態の有効な監視と制御を実現します。さらに、PowerShell 7は、Active Directoryでのユーザーおよび権限管理、Azureクラウドプラットフォーム上でのリソース割り当ておよび管理など、さまざまなWindowsおよび非Windowsテクノロジーとの連携が可能です。&lt;/p&gt;
&lt;h3 id=&#34;オープンソースエコシステム&#34;&gt;オープンソースエコシステム
&lt;/h3&gt;&lt;p&gt;PowerShell 7はオープンソースであり、この特徴により世界中の開発者や愛好家が積極的にその開発と改善に参加できます。多数のオープンソースモジュールやツールが次々と登場し、PowerShell 7 の機能と応用範囲を広げています。ユーザーは自分のニーズに合わせて、オープンソースコミュニティで適切なモジュールを見つけたり、自分のコードを寄稿してコミュニティ全体の発展に貢献したりすることができます。&lt;/p&gt;
&lt;h3 id=&#34;互換性と安定性&#34;&gt;互換性と安定性
&lt;/h3&gt;&lt;p&gt;PowerShell 7は、古いバージョンのPowerShellとの互換性を維持しながら、多くの新機能と改善を導入しています。これらの改善はパフォーマンスの向上だけでなく、安定性も強化し、ユーザーがさまざまなタスクをよりスムーズに完了できるようにするとともに、ソフトウェアの不具合による作業の中断を減らします。&lt;/p&gt;
&lt;h2 id=&#34;コマンドライン予測ビューを開く&#34;&gt;コマンドライン予測ビューを開く
&lt;/h2&gt;&lt;p&gt;PowerShell 7の多くの便利な機能の中でも、&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt;コマンドは、ユーザーのコマンドライン入力体験を向上させる実用的なツールです。&lt;/p&gt;
&lt;p&gt;コマンドの実行を有効にしない状態でもオートコンプリート機能は利用できますが、それは行内の補完に限られます。有効にすると予測表示がされ、考えられるすべての補完候補をリスト形式で表示します。ユーザーは上下キーを使って必要な候補を選択できるため、コマンド入力の正確性と効率が向上します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;コマンドを永続的に有効にする方法&#34;&gt;コマンドを永続的に有効にする方法
&lt;/h2&gt;&lt;p&gt;PowerShellを起動するたびに&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt;コマンドが有効になるようにするには、このコマンドをPowerShellのプロファイルに追加できます。PowerShellのプロファイルは特別なスクリプトで、PowerShellの起動時に自動的に実行されます。&lt;/p&gt;
&lt;h3 id=&#34;設定構成ファイルパス&#34;&gt;設定構成ファイルパス
&lt;/h3&gt;&lt;p&gt;PowerShellでは、&lt;code&gt;$PROFILE&lt;/code&gt;変数を使って設定ファイルのパスを確認できます。そのパスにファイルが存在しない場合は、ユーザーが手動で作成できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;設定ファイルを開く&#34;&gt;設定ファイルを開く
&lt;/h3&gt;&lt;p&gt;強力なメモ帳++や軽量のVisual Studio Codeなどのテキストエディタを使用し、&lt;code&gt;$PROFILE&lt;/code&gt;変数から取得される構成ファイルパスに対応するファイルを開きます。&lt;/p&gt;
&lt;h3 id=&#34;追加命令&#34;&gt;追加命令
&lt;/h3&gt;&lt;p&gt;開いている設定ファイルに、&lt;code&gt;Set-PSReadLineOption -PredictionViewStyle ListView&lt;/code&gt; コマンドを追加してください。コマンドの記述ミスがないように注意し、設定ファイルが実行時に正しく有効になるようにしてください。&lt;/p&gt;
&lt;h3 id=&#34;設定ファイルを保存する&#34;&gt;設定ファイルを保存する
&lt;/h3&gt;&lt;p&gt;コマンドが完了したら、設定ファイルを保存し、テキストエディタを閉じます。これで、設定ファイルには、PowerShellの起動時に実行したいコマンドがすべて含まれています。&lt;/p&gt;
&lt;h3 id=&#34;検証設定&#34;&gt;検証設定
&lt;/h3&gt;&lt;p&gt;現在のPowerShellウィンドウを閉じ、PowerShellを再起動します。新しく起動したPowerShellでコマンドを入力する際、コマンドライン入力予測ビューのスタイルがリスト表示になっているはずです。これは、設定が正常に適用されたことを示しています。&lt;/p&gt;
&lt;p&gt;上記の手順を通して、私たちは PowerShell 7 の強力な機能と特徴を深く理解するだけでなく、コマンドライン入力による予測ビューのスタイル設定を通じて操作体験を向上させる方法を習得し、これらの設定を持続的に有効にする方法も学びました。これらの知識が、PowerShell 7 を使用する際に、よりスムーズに、そして効率的に様々なシステム管理および自動化タスクを実行できるようになることを願っています。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ディープシーク、旧正節前の急成長、NVIDIA株の大幅下落：背景にある機関投資家の動きと大規模言語モデルの推論チェーン</title>
        <link>https://ttf248.life/ja/p/deepseek-chinese-new-year-nvidia-stock-drop-institutional-operations-large-language-model-chain/</link>
        <pubDate>Fri, 07 Feb 2025 20:36:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/deepseek-chinese-new-year-nvidia-stock-drop-institutional-operations-large-language-model-chain/</guid>
        <description>&lt;p&gt;旧正年の前夜、DeepSeekは一躍注目を集め、数日の間にソーシャルメディアで広く話題となった。この突如の爆発的な人気は驚くべきものであり、市場に連鎖反応を引き起こした。一方、NVIDIA株は暴落し、多くの投資家がその見通しを疑念視している。一部機関は、この期間中に大規模な空売りを行っており、まるで全てが「精心策划（じょうみけんさ）」された状況を示唆しているかのようだ。&lt;/p&gt;
&lt;h3 id=&#34;ディープシークの急上昇短時間で注目を集める&#34;&gt;ディープシークの急上昇：短時間で注目を集める
&lt;/h3&gt;&lt;p&gt;DeepSeekは、AIをベースとしたツールであり、特に自然言語処理（NLP）や画像生成分野での応用において、深層学習モデルの最適化に焦点を当てています。旧正月の数日前、このプロジェクトは突然、多くの投資家や技術者の注目を集めました。その背後にあるチームの実績と、提示された技術成果により、多くの人々がこのプロジェクトに強い関心を持つようになりました。開発者コミュニティにおいてもソーシャルメディアプラットフォームにおいても、DeepSeekに関する議論は、ほぼテクノロジー業界の話題を占めています。&lt;/p&gt;
&lt;p&gt;しかし、DeepSeekの突如たる爆発的な人気は偶然ではない。分析の結果、多くの人がこの背後に何らかの機関の操作が関与しているのではないかと疑い始めている。特にその人気に火がついた後、NVIDIA株価が著しい下落を見せていることから、明らかに何らかの要因がこの変化を促していることが見て取れる。&lt;/p&gt;
&lt;h3 id=&#34;エヌビディア株急落空売り操作の黒幕&#34;&gt;エヌビディア株急落：空売り操作の黒幕
&lt;/h3&gt;&lt;p&gt;NVIDIAは、世界をリードするグラフィックス処理ユニット（GPU）メーカーであり、長らく大規模モデルやAIコンピューティングの主要なハードウェアサプライヤーです。AI市場の急速な発展に伴い、NVIDIA株は長期的に好調でしたが、投資家の人気を集めていました。しかし、DeepSeekの人気急上昇と市場からのその技術への高い注目により、NVIDIA株は暴落しました。&lt;/p&gt;
&lt;p&gt;この現象の背景には、機関投資家の空売り戦略が関わっているかもしれません。ここ数年、AI技術の普及に伴い、NVIDIAの株価は大きく押し上げられ、多くの投資家が同社の株価に過大評価のリスクを感じていました。特にDeepSeekのような技術が爆発的に広まった後、一部の機関はNVIDIAの株式を空売りすることで、大きな利益を得た可能性があります。正確な市場機会の捉え方とDeepSeekの影響力に関する予測により、これらの機関は成功裏に利益を上げました。&lt;/p&gt;
&lt;h3 id=&#34;大規模言語モデルの思考チェーンの探求結果からプロセスへ&#34;&gt;大規模言語モデルの思考チェーンの探求：「結果」から「プロセス」へ
&lt;/h3&gt;&lt;p&gt;伝統的な人工知能の応用において、多くの専門家や投資家はAIモデルの「結果」——生成された画像やテキストといった直接的な成果物——に多くの中目を向けてきました。しかしながら、DeepSeekに関連する議論の中で、より多くの人々が、大規模言語モデル（LLM）の背後にある思考連鎖こそが、より注目すべき核心的内容であることに気づき始めています。これまで、私たちは単にモデルの出力結果しか見ることができませんでしたが、今や、その背後にある論理、アルゴリズム、そしてこれらの要素を調整してモデルのパフォーマンスを最適化する方法を理解することが求められています。&lt;/p&gt;
&lt;p&gt;この思考様式の転換は、AI研究と応用に対する深い考察と言えるでしょう。単純なブラックボックス操作から、モデル内部の動作メカニズムを真に理解することへの転換は、多くの技術者や投資家が人工知能の将来的な発展方向を改めて見直すきっかけとなりました。DeepSeek の人気は、まさにこの思考回路の画期的な応用であり、人々は最終的な出力結果だけでなく、モデル全体の構築と最適化プロセスに関心を向け始めています。&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h3&gt;&lt;p&gt;DeepSeekの突然の爆発的な人気、NVIDIA株式の大幅下落、そして市場背景にある機関投資家の空売り操作、これら全てには巧妙に仕組まれた陰謀があるように思われます。大規模言語モデルの思考チェーンに対する深い理解を通して見ると、AI技術の応用は単なる表面現象の積み重ねではなく、モデル内部の論理を深く掘り下げて最適化することです。技術が進歩するにつれて、今後DeepSeekのような革新的なツールがさらに多く登場し、AI研究と応用の発展をより高いレベルへと押し進めることが予想されます。&lt;/p&gt;
&lt;p&gt;この現象は、AI技術の莫大な可能性を私たちに見せてくれるだけでなく、その背景にあるビジネスの駆け引きや資本運用のことを考えさせるものとなりました。今後の市場動向が、技術と資本の対立をめぐる継続的な注目点となるでしょう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>現代貨幣理論は、世界の経済の未来ですか？</title>
        <link>https://ttf248.life/ja/p/modern-monetary-theory-future-global-economy/</link>
        <pubDate>Thu, 06 Feb 2025 23:16:34 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/modern-monetary-theory-future-global-economy/</guid>
        <description>&lt;p&gt;アメリカの株式市場の強気相場は、アメリカ自身の「ハードパワー」とは別に、ドル大量供給の影響が大きい。&lt;/p&gt;
&lt;p&gt;現代の貨幣制度は、&lt;strong&gt;2008年の金融危機&lt;/strong&gt;以降、世界中の多くの経済体が共通認識として参照する重要な理論的支柱となりつつあり、その主な特徴は、市場への政府介入において政府の主体的能動性をより強調し、政府の財政赤字を主要なツールとして活用することで、雇用の完全雇用とインフレの安定を実現することです。&lt;/p&gt;
&lt;p&gt;大政府大家は、&lt;strong&gt;ケインズ主義&lt;/strong&gt;により精通しており、政府が景気循環における&lt;strong&gt;需給調整&lt;/strong&gt;の役割を強調している。例えば、過熱時には抑制し、収縮時には刺激を行うことなどであり、政府支出の乗数効果を非常に重視する。つまり、同じ金額の貨幣が消費乗数をどれだけ増加させるかという点に注目しており、政府が1ドル支出すると、企業や個人が1ドルの収入が増加し、企業は生産を拡大して雇用を増やし、個人は消費を拡大することで景気後退に対抗する。同時に、財政赤字の上限と持続可能性に対しては比較的保守的である。&lt;strong&gt;消費乗数&lt;/strong&gt;は市場の回復を促し、政府の収入を増加させるだろう。特に、経済過熱期の抑制は、次回の景気を刺激するための資金を蓄積することができる。例えば、政府の債務潜在力や金利水準などである。&lt;/p&gt;
&lt;p&gt;現代の貨幣制度は、極端なケインズ主義の延長線上にあると言えるが、異なる点もある。最大の特徴は、政府債務の制限問題であり、中央銀行は独立性を有すべきではない。主な目標は&lt;strong&gt;インフレと完全雇用&lt;/strong&gt;であり、資源と生産力が限られた状況下でのインフレを意味する。つまり、政府は無制限な財政赤字を通じて、技術進歩に伴う生産効率の向上とともに、市場に購買力を不断的に供給し、理想的な完全雇用と生産ボトルネックに到達する。その後、さらに貨幣量を増加させるとインフレが発生するため、財政赤字の上限を抑制するのが妥当となる。市場に余剰な生産資材が残る限り、政府が赤字を拡大してもインフレは引き起こされない。&lt;/p&gt;
&lt;h2 id=&#34;金融危機の後&#34;&gt;金融危機の後
&lt;/h2&gt;&lt;p&gt;もちろん現実とは理想世界ではないので、各段階の実行には人の関与が伴い、ケインズ主義も選択的に適用されるため、結果として経済下行を刺激する方が多く、経済過熱を抑制する方は少ない。経済が悪化すると政績となり、経済過熱も政績となるため、根本的に抑制することは難しく、それに伴う多くの経済問題や新たな金融危機が、伝統的な過剰生産による経済的ショックに匹敵するほど深刻になる。2008年の世界金融危機は、極端なケインズ主義の下での市場の自己強化によってもたらされたバブルであり、不動産やそれを底子とする金融投資商品など、多数のポンジスキームのような金融投資品が出現した。危機発生前から、学界、政界、市場レベルにおいてリスク認識が不足しており、債務を支えた繁栄を政績とみなし、より多くの者が利益を得ていた。巨大な金融システムはまさにその例で、損失はあなた方の負担だが、配当は私たちのものだという状況だった。破綻しても、すでに大儲けしているのだから、お金を吐き出すことは不可能であり、最終的に多数の参加者が、先行者の各段階における利益を負うことになった。&lt;/p&gt;
&lt;p&gt;この時、現代の貨幣制度の影が金融危機後に入り、典型的な特徴は迅速な&lt;strong&gt;財政赤字の貨幣化と中央銀行の無制限な量的緩和&lt;/strong&gt;、そしていわゆる緊急時の中央銀行貸出政策です。中央銀行は最後の貸し手として無限に資金を供給し、政府も不断的に債務を負うことができます。中央銀行と財政政策が協調して連携し、中央銀行は国債の購入などを通じて政府の財政赤字支出を支援し、政策目標の一致性を確保します。これも現代の金融政策と財政政策の境界線がますます曖昧になる理由です。マネーサプライに関しては、中央銀行が直接国債を購入することに大きく依存しており、右手で印刷して左手で浪費するような状況です。&lt;/p&gt;
&lt;p&gt;ユーロ圏と米国は同様の傾向を見せており、2008年のEUの政府債務は約6.7兆ユーロ、政府レバレッジは約66%で、一般的に考えられている警戒線である60%をわずかに上回っていました。救済策を実施した5年間を経て2014年には、債務規模は9.5兆ユーロに膨れ上がり、レバレッジは93%に達しました。米国はさらに深刻で、2008年の米政府の債務は約10兆ドル、2014年には約18兆ドルまで増加し、最近では再び政府債務の上限を引き上げました。もちろん、これらの騒動は毎回政府機関閉鎖を口実に伴いますが、結果として政府債務の上限を打ち破り、現在では36兆ドルを超え、2008年の金融危機から26兆ドル増加しています。GDPの成長要因も考慮すると、政府レバレッジは60%から120%以上に上昇しました。最終貸出者であるFRBは、度重なる救済策において重要な役割を果たし、政府債務の主要な購入者の一面も担っています。&lt;/p&gt;
&lt;h2 id=&#34;現代貨幣制度の欠点と限界&#34;&gt;現代貨幣制度の欠点と限界
&lt;/h2&gt;&lt;p&gt;このような政府主導の経済刺激策は、計画経済とは言えないまでも、直面する問題点は共通している。どのようにして市場の全知全能と、全ての环节に参加者の無私無畏を保証できるのか？最も簡単な例を挙げると、もし政府機関が特定の方向への予算を100万増やした場合、それは幹部の甥のためか、それともコストパフォーマンスの高い市場競争なのか？もちろん現実にはより複雑な形で利益の移動が生じ、その結果として、政府は負債と支出を拡大するものの、資金の流れは完全に制御不能となる。最近、アメリカで騒がれている政府効率部門の設立も、まさに此类問題の延長線上にある。もちろんこれらは、様々な腐敗指数経済体において、ばらつきを見せるが、我々はより多くの議論を普遍的な問題点に集中している。&lt;/p&gt;
&lt;h3 id=&#34;インフレ問題&#34;&gt;インフレ問題
&lt;/h3&gt;&lt;p&gt;現代の情報ネットワークの発展に伴い、政府は市場情報の掌握度において過去を大きく上回っているが、それは全知全能ではない。市場自体には変動があり、常に予測に基づいて変化し、入れ子構造に入る。私はあなたの予測を予測した。実際のパフォーマンスを見てみよう。2008年～2020年の間、現代貨幣理論は目覚ましい経済回復とインフレ安定を実現し、ユーロ圏では一時的なデフレーション問題さえも発生したが、アメリカのインフレは概ね予測された1～3%に維持され、人々はかつてケインズ主義を信じたように、より過激なツールを信じるようになった。&lt;/p&gt;
&lt;p&gt;実際、振り返ってみると、これは主に2008年以降も発展途上国の製造業が依然として高い成長傾向を維持していることによります。例えば、この期間にグローバルな生産における地位を着実に確立した我が国や、新興の東南アジアやインドなどの経済体は、高い製造業付加価値を維持し、現代貨幣理論における最大の制約である資源供給の制限を相殺しました。これにより、欧米は産業空洞化と過剰な金融化が進み、政府債務と通貨供給が増大する中で、比較的安定したインフレを維持することができました。&lt;/p&gt;
&lt;p&gt;しかし、2020年以降、より大規模な景気刺激策が実施されたことにより、ユーロ圏と米国では顕著なインフレが発生し、ピーク時には10%前後を記録しました。今日に至っても、利上げから3年近くが経過したにもかかわらず、米国の雇用市場は依然として異常なほど過熱しており、金融市場は金融支援の下で経済成長との乖離を生み出す過剰な繁栄を示しています。基準効果が薄れるにつれて、米国のインフレは再び3%に向かって上昇しており、この利上げにおける過熱ぶりは財政赤字と密接に関連しています。利上げは金融政策の引き締めですが、財政政策は確かに拡大しており、2020年の超大規模な資金供給と重なり合い、米国のインフレを異常に頑固なものにしています。現代貨幣理論の最大の制約は、高インフレです。&lt;/p&gt;
&lt;h3 id=&#34;政府債務問題&#34;&gt;政府債務問題
&lt;/h3&gt;&lt;p&gt;原則上、政府は債務償還のために上限なく借金によって借金を返済することは可能だが、その前提条件は&lt;strong&gt;中央銀行が完全に傀儡となること&lt;/strong&gt;、つまり現代の貨幣制度における&lt;strong&gt;財政政策と金融政策の目標の一致性&lt;/strong&gt;である。明らかに、FRBは政府に完全に権限を譲るつもりはない。そして、数十年にわたって積み上がってきた政府債務残高、特に利息支出を考慮すると、高金利による更なる負債は徐々に財政の巨大な負担となっている。&lt;/p&gt;
&lt;p&gt;2023会計年度：アメリカ合衆国の2023会計年度の税収は4兆4390億ドルで、その年の利子支出は税収に占める約15%でした。2024年も高金利状態が継続しており、米国財務省が発表したデータによると
2024会計年度：米国の連邦政府の財政赤字は1兆8330億ドルに達し、利払い費は8820億ドルとなり、米国の連邦歳入の約18%を占めるほどで、社会保障給付支出さえ上回る。&lt;/p&gt;
&lt;p&gt;これが財政の持続可能性の問題であり、長期的に低金利と低インフレ、高債務（例えば日本のような状況）を維持する場合、確かに長期的には準現代貨幣理論の応用が生まれる可能性がある。72の法則によれば、金利が十分に低い限り、財政が債務を抱えながら増加していくのは非常に緩慢である。もし資金コストが1%であれば、純粋に債務だけで債務を返済する場合、72年で債務は2倍になる。そして、インフレがこの微妙な均衡を崩した場合、債務の利息償付が積み重なる過程で複利効果によって将来の債務が増え続け、金利の利回しが元本よりも重要ではなくなってしまう。中央銀行が政権側の目標と一致しない場合、これらの問題はさらに深刻化するだろう。トランプ政権の政治的主張は、現在のFRB（連邦準備制度理事会）のタカ派との明確な違いであり、これがこの任期中に米国政府とFRBの関係が悪化した重要な要因となっている。皆が最も注目しているのは、現職議長が任期満了までスムーズに就任できるかどうかだろう。&lt;/p&gt;
&lt;h3 id=&#34;金融バブルと通貨信用問題&#34;&gt;金融バブルと通貨信用問題
&lt;/h3&gt;&lt;p&gt;理想的には、政府支出拡大が住民や企業部門に流れ込み、誰もが支出を増やし、効果的な需要を喚起するはずです。しかし、皆さんは2000年以降の数々の金融バブルを直接経験した身であり、投資と消費の選択において、明らかに投資価値向上の傾向が生じます。特に、非常に強い価値向上期待を持つ商品が出現した場合、人々は一斉に金融市場でより高い価値を求め、生活の質を犠牲にしたり、レバレッジをかけて購入したりすることを厭わないでしょう。これは、日本、アメリカ、我が国における不動産の高成長期であっても同様の現象であり、政策刺激や、自身の利益最大化を追求する従業者によって、次級融資のような問題が多発し、多くの場合、「市場を救う」という政策は実際には債務を奨励しているのです。&lt;/p&gt;
&lt;p&gt;そのため、歴史は驚くほど一貫性を示し、金融政策と財政政策が大規模に力を発揮するとき、たいていの場合、&lt;strong&gt;資産バブルと富の再分配の宴&lt;/strong&gt;です。資産バブルが先行し、富の再分配がそれに続きます。これが別の問題を引き起こします。それは、極端なケインズ主義、あるいは現代貨幣理論の長期的な使用によって生じる経済的なポンジスキーム（ミン スキーモーメント）の問題です。熱いマネーがあれば資産価格は上昇し続け、それが上昇すれば、後発者が資金を持ってやって来ます。しかし、生活費の変化を測るCPIは目立って変化しません。お金は特定の分野で空回りし、後発者は資金が追いつかなくなり、&lt;strong&gt;宴の後は崩壊&lt;/strong&gt;です。つまりミン スキーモーメントの審判であり、これは常に効果を発揮します。&lt;/p&gt;
&lt;p&gt;さらに、通貨自体も需給の関係があり、市場の供給過多の場合や、伝統的な投資対象が吸収しきれない場合、あるいは何度も収穫を繰り返して資金を吸い込めなくなる場合——例えば、たび重なる暴落に見舞われた不動産バブル（日本人は数十年ぶりに不動産投資に手を出そうとしなくなった）や、税制などの抑制策、投機的な需要を下げるために不動産の保有税を増やすといった措置は、金融投機のコストを高めます。したがって、通貨供給過多という状況下では、市場は&lt;strong&gt;資金を吸収し、かつ非課税である&lt;/strong&gt;投資対象を強く求めており、様々な仮想投資商品が生まれてきました。アメリカ大統領とその妻も参入して一食分を得ようとするほどです。ある見方によれば、これは米ドルの壁から資金を引き出すことですが、実際には、世界的な通貨の乱発と金融の空回りの下での法定通貨信用が損なわれる必然的な結果と言えるでしょう。現代貨幣理論が最も依存している国家による独占的権利に基づく信用通貨の地位ですら、挑戦を受けるかもしれません。どのような土壌があれば、どのような金融ゲームが生じるのでしょうか。&lt;/p&gt;
&lt;p&gt;要するに、現代貨幣理論はケインズ主義よりもむしろ漸進的かつ代替的な関係であり、市場への政府の大規模な介入をより重視し、財政赤字と中央銀行の独立性に対する姿勢もより急進的です。ケインズ主義の過剰使用がスタグフレーションと金融危機を引き起こし、この人為的に加熱された経済の清算に対応して、現代貨幣理論は2008年以降に密かに受け入れられました。世界的な生産性の向上により、短期的には急速な成長回復と通貨国のインフレ水準の維持が実現しましたが、同時に莫大な政府債務と金融バブルも蓄積されました。インフレが反発し、中央銀行と政府の目標が一致せず、高金利と高レバレッジが並存すると、政府の利払いによる財政負担は大幅に増大し、財政の持続可能性は低下します。また、過剰な政府参加による基礎通貨の発行は金融バブルを引き起こし、無制限な印刷によって貨幣自体の信用を弱体化させます。ドルが強いように見えるのは、実際には同行の支えであり、巨大な投資需要の土壌は、様々な新型の金融投資投機ツールを生み出し、従来の金融投資商品の税制上の制限からさえ逃れさせています。これはグローバル経済の縮影です。現代貨幣理論は未来ではなく、2008年から使用されていた過去形と言えるでしょう。逆経済グローバリゼーションと重なり合い、過去の金融バブルが大きければ大きいほど、政府債務の蓄積が高く、金融投機のツールが狂えば狂うほど、歪んだ富の分配の効率は高まり、ハードランディングのリスク、経済的および社会的リスクが増大します。ケインズ主義であれ、現代貨幣理論であれ、どれだけ通貨を供給しても、真に構造的な問題解決にはならず、むしろ資産バブルとポンジスキームの中でリスクを激化させます。人々は常に同じ穴に、様々なポーズで繰り返し落ち込みますが、そこから学ぶことはありません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>atopツールによるLinuxシステム指標の監視：インストール、設定と使用完全ガイド</title>
        <link>https://ttf248.life/ja/p/using-atop-to-monitor-linux-system-metrics-installation-configuration-and-usage-guide/</link>
        <pubDate>Thu, 06 Feb 2025 22:48:55 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/using-atop-to-monitor-linux-system-metrics-installation-configuration-and-usage-guide/</guid>
        <description>&lt;p&gt;Linuxシステム運用において、システムリソースとプロセス状態をリアルタイムかつ包括的に監視することは非常に重要です。atopツールは強力な監視ツールとして、この目標を容易に達成するのに役立ちます。本稿では、Linuxインスタンスにおけるatop監視ツールのインストール、設定、使用方法について詳細に説明します。&lt;/p&gt;
&lt;h2 id=&#34;一atopツール紹介&#34;&gt;一、atopツール紹介
&lt;/h2&gt;&lt;p&gt;atopは、Linuxシステムのリソースとプロセスを監視するために特別に設計されたツールです。システムおよびプロセスの活動を記録し、すべてのプロセスの実行状況を報告します。このツールが収集するデータには、CPU、メモリ、ディスク、ネットワークなどのリソース使用状況やプロセス状態が含まれ、データをログファイル形式でディスクに保存することもできます。各プロセスについて、CPU使用率、メモリ増加量、ディスク使用率、優先度、ユーザー名、状態、および終了コードなど、重要な情報を取得できます。さらに、atopの設定ファイルを介して、ログ収集頻度、ログファイルの保存パス、およびローテーションポリシーなどのパラメータをカスタマイズできます。&lt;/p&gt;
&lt;h2 id=&#34;二atopツールのインストール&#34;&gt;二、atopツールのインストール
&lt;/h2&gt;&lt;p&gt;さまざまなLinuxディストリビューションでのatopのインストール方法は若干異なります。以下では、一般的なオペレーティングシステムを例としてご紹介します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Alibaba Cloud Linux 3/2、CentOS 7/8、Fedora、Rocky Linux 9&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;実行インストールコマンド：&lt;code&gt;sudo yum install -y atop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始します：&lt;code&gt;sudo systemctl start atop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu / Debian&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアリポジトリの更新：&lt;code&gt;sudo apt update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;実行インストールコマンド：&lt;code&gt;sudo apt install -y atop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始します：&lt;code&gt;sudo systemctl start atop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CentOS Stream 9&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ダウンロードしてインストール：&lt;code&gt;sudo wget https://www.atoptool.nl/download/atop-2.11.0-1.el9.x86_64.rpm &amp;amp;&amp;amp; sudo rpm -i atop-2.11.0-1.el9.x86_64.rpm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始します：&lt;code&gt;sudo systemctl start atop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;openSUSE&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;実行インストールコマンド：&lt;code&gt;sudo zypper install -y atop atop-daemon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始します：&lt;code&gt;sudo systemctl start atop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上記に挙げられているオペレーティングシステムに、ご利用のディストリビューションが含まれていない場合は、atop公式サイトでインストール情報を入手してください。&lt;/p&gt;
&lt;h2 id=&#34;三監視期間とログ保持期間の設定&#34;&gt;三、監視期間とログ保持期間の設定
&lt;/h2&gt;&lt;p&gt;設定ファイルの位置: Alibaba Cloud Linux 3/2、CentOS 7/8およびFedoraシステムでは、atopの設定ファイルは&lt;code&gt;/etc/sysconfig/atop&lt;/code&gt;です。Ubuntu、DebianおよびopenSUSEシステムでは、設定ファイルは&lt;code&gt;/etc/default/atop&lt;/code&gt;です。
デフォルト設定パラメータ説明
- ログオプションは、ログファイル記録のオプションを制御するために使用され、デフォルトでは空です。
- ログ間隔：監視周期、デフォルト600秒。過去のログをトレースして問題解決する場合は、実際のニーズに合わせてこの頻度を調整することをお勧めします。
- ログ保持期間、デフォルトは28日。
- ログファイルが保存されるパスです。デフォルトは &lt;code&gt;/var/log/atop&lt;/code&gt; です。
設定手順
- コマンドを実行して設定ファイルを開きます。
- Alibaba Cloud Linux 3/2、CentOS 7/8、Fedoraシステムでは：&lt;code&gt;sudo vim /etc/sysconfig/atop&lt;/code&gt;
- Ubuntu、Debian、openSUSE、CentOS Stream 9、Rocky Linux 9システムにおいて：&lt;code&gt;sudo vim /etc/default/atop&lt;/code&gt;
- &lt;code&gt;i&lt;/code&gt;キーで編集モードに入り、必要に応じて設定パラメータを調整します。例えば、監視サイクルを30秒に修正し、ログ保持期間を7日に設定し、ログパスはデフォルトのままにします。
- &lt;code&gt;Esc&lt;/code&gt;キーを押し、&lt;code&gt;:wq&lt;/code&gt;と入力して、保存して編集を終了します。
- atopサービスの再起動により設定が有効になります：&lt;code&gt;sudo systemctl restart atop&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LOGOPTS=&amp;quot;&amp;quot;
LOGINTERVAL=30
LOGGENERATIONS=7
LOGPATH=/var/log/atop 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四atopツールを使用する&#34;&gt;四、atopツールを使用する
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;よく使用されるコマンドの紹介:&lt;/strong&gt; インタラクティブなコマンドモードでは、以下のよく使用されるコマンドがあります。
- デフォルトの統合出力ビューに戻ります。
- プロセスの一覧の完全なコマンドラインを表示します。
- プロセスごとのメモリ使用率で降順にフィルタリングします。
- プロセスごとのディスク使用率で降順にフィルタリングします。
- プロセス資源の総合利用率に基づいて降順にフィルタリングする。
- プロセスネットワークの使用率で降順にフィルタリングする。
- 次の監視収集ポイントに移動します。
- 前の監視データ収集ポイントへ移動します。
- b：指定日時、形式は&lt;code&gt;YYYYMMDDhhmm&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;リソース監視フィールドの説明
- ATOP：ホスト名、情報サンプリングの日付と時刻。
- プロセス全体の実行状況、カーネルモードとユーザーモードの実行時間、プロセスの総数、およびさまざまな状態のプロセス数を含む。
- CPU：CPU全体の利用状況を示し、各フィールドの数値の合計は&lt;code&gt;N*100%&lt;/code&gt;(NはCPUコア数)として表示されます。カーネルモード、ユーザーモード、割り込み、アイドル、ディスクI/O待ちなどの時間割合が含まれます。
- &lt;strong&gt;CPL&lt;/strong&gt;：CPU負荷状況。過去1分間、5分間、15分間の実行キュー内の平均プロセス数、コンテキストスイッチ回数、割り込み発生回数など。
- MEM：メモリ使用状況。物理メモリの総量、空きメモリ、ページキャッシュメモリ、ファイルキャッシュメモリ、カーネル占有メモリなどを含む。
- &lt;strong&gt;SWP&lt;/strong&gt;：スワップスペースの使用状況を示し、スワップ領域の合計サイズと利用可能なスワップスペースのサイズを含みます。
- ページング状況、例えばスワップインおよびスワップアウトされたメモリページの数。
- ディスク使用状況：各ディスクデバイスに対応する行で、デバイス識別子、ビジー状態時間比率、読み書きリクエスト数を示します。
- ネットワーク状況を表示し、転送層のTCPとUDP、IP層、および各アクティブポートの受信・送信パケットサイズを示します。&lt;/p&gt;
&lt;p&gt;リアルタイムシステム指標を確認する
- 5秒ごとにシステム指標を確認する：&lt;code&gt;atop 5&lt;/code&gt;
- 現在の時刻のあと5分間（合計30回、10秒間隔で）のシステム指標を確認します：&lt;code&gt;atop -M 10 30&lt;/code&gt;
- 現在時刻のあと10分間（10回、60秒間隔で）のシステム指標を確認し、結果をファイルに書き込む：&lt;code&gt;atop -M 60 10 &amp;gt; /log/atop.mem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;atop起動後、収集記録はデフォルトで &lt;code&gt;/var/log/atop&lt;/code&gt; ディレクトリに保存されます。確認する際は、指定した日付のログファイルが存在することを確認してください。存在しない場合はエラーになります。
- 当日の履歴指標ログを確認する：&lt;code&gt;atop -r&lt;/code&gt;
- 昨日履歴指標ログを見る：&lt;code&gt;atop -r y&lt;/code&gt;
- 指定日の履歴指標ログを確認します。例えば、2024年11月06日：&lt;code&gt;atop -r 20241106&lt;/code&gt;
- 指定された日付から指定時間からの過去の指標ログを表示します。例えば、2024年11月06日14:00以降の場合：&lt;code&gt;atop -r 20241106 -b 14:00&lt;/code&gt;
- 指定された日付の特定の期間における履歴指標ログを確認します。例えば、2024年11月5日00時04分から00時08分：&lt;code&gt;atop -r 20241105 -b 00:04 -e 00:08&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;システムアクティビティレポートの確認
- 現在のシステムにおけるCPU使用率レポートを1分間（12回、5秒間隔）で確認します: &lt;code&gt;atopsar -c 5 12&lt;/code&gt;
- 当日指定時間帯のメモリ指標レポートを確認します。例：18:00～18:01 &lt;code&gt;atopsar -m -b 18:00 -e 18:01&lt;/code&gt;
- 指定日付内の指定時間範囲のメモリ指標レポートを確認します。例えば、2024年11月5日18:00から18:01まで：&lt;code&gt;atopsar -m -r 20241105 -b 18:00 -e 18:01&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;その他操作&#34;&gt;その他操作
&lt;/h2&gt;&lt;p&gt;天级别ログローテーションポリシーを設定します。毎日atop指標ログファイルを生成したい場合は、以下の手順を実行してください。
- （オプションで）必要に応じて監視期間、ログ保持時間、およびログ保存パスを調整できます。
- コマンドを実行して、毎日のログローテーションに関連するサービスを起動し、起動時に自動開始するように設定します。&lt;code&gt;sudo systemctl enable --now atop atopacct atop-rotate.timer&lt;/code&gt;
- ビジネスがログ処理に複雑な要件を持つ場合、logrotateやカスタムスクリプトを組み合わせてログ管理を実現することもできます。&lt;/p&gt;
&lt;p&gt;オプションのnetatopカーネルモジュールをロードします。ネットワーク使用状況を監視する必要がある場合は、netatopモジュールをインストールできます（atopではデフォルトでインストールされていません）。例として、Alibaba Cloud Linux 3システムの場合：
- カーネル開発パッケージおよびコンパイルに必要なソフトウェア環境をインストールします。&lt;code&gt;sudo yum install -y kernel-devel dkms elfutils-libelf-devel&lt;/code&gt;
- 最新バージョンのnetatopソースコードを特定のディレクトリにダウンロードします。&lt;code&gt;cd /usr/src/ &amp;amp;&amp;amp; sudo wget https://www.atoptool.nl/download/netatop-3.2.2.tar.gz --no-check-certificate&lt;/code&gt;
- ソースコードを解凍し、ソースディレクトリへ移動します。&lt;code&gt;sudo tar -zxvf netatop-3.2.2.tar.gz &amp;amp;&amp;amp; cd netatop-3.2.2&lt;/code&gt;
- ソースコードからモジュールとデーモンを構築してインストールします。&lt;code&gt;sudo make &amp;amp;&amp;amp; sudo make install&lt;/code&gt;
- netatopサービスを開始します：&lt;code&gt;sudo systemctl start netatop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;atopツールは機能が強力で使い勝手が良く、適切なインストール、設定、使用によって、Linuxシステムの動作状況をより深く理解し、潜在的な問題を早期に発見・解決することができます。この記事が皆様のLinuxシステム監視スキル向上に役立つことを願っています。&lt;/p&gt;
&lt;h2 id=&#34;六参照リンク&#34;&gt;六、参照リンク
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.atoptool.nl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;atop公式サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;atop監視ツールをインストール、設定し、使用する&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>為替レートの「買値」と「売値」を理解する。</title>
        <link>https://ttf248.life/ja/p/understanding-exchange-rates-buy-and-sell-rates/</link>
        <pubDate>Thu, 06 Feb 2025 22:32:10 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/understanding-exchange-rates-buy-and-sell-rates/</guid>
        <description>&lt;p&gt;外国為替市場、特に銀行や両替所では、「買いレート」と「売りレート」という言葉をよく見かけますね。この2つの概念についてよくわからない、あるいは混同している方もいるかもしれません。今日は簡単な例を通して、これらのレートの意味と役割について理解できるようにお手伝いします。&lt;/p&gt;
&lt;h2 id=&#34;買値レートと売値レートとは何ですか&#34;&gt;「買値レート」と「売値レート」とは何ですか？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;買値レート：銀行または両替機関がこの為替レートで外貨を購入する意思があるレートです。つまり、あなたが外貨（例えば米ドル）を銀行に売却すると、銀行は買値レートに基づいて人民元を支払います。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;販売レート：銀行または両替機関がこの為替レートで外国通貨を売る意思があるレートです。つまり、あなたが人民幣を使って外国通貨を購入するとき、銀行は販売レートであなたに外国通貨を販売します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡単に言うと：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;買値相場&lt;/li&gt;
&lt;li&gt;販売レート：銀行が外国通貨をあなたに売る価格。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意点は、銀行が買入と売りの為替レートは通常異なること、そして売りレートは一般的に買入レートより高いことです。この差額が銀行の利益源となります。&lt;/p&gt;
&lt;h2 id=&#34;具体的な事例分析&#34;&gt;具体的な事例分析
&lt;/h2&gt;&lt;p&gt;皆さんに、これらの為替レートの実際の応用をより明確に理解していただくために、具体的な例を見ていきましょう。&lt;/p&gt;
&lt;p&gt;もしあなたが銀行でドルに両替するとします。その際の銀行のレートは以下の通りです：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;買入手付レート：1ドル＝7.0人民元&lt;/li&gt;
&lt;li&gt;販売レート：1ドル＝7.2人民元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;状況一あなたが銀行にドルを売る&#34;&gt;状況一：あなたが銀行にドルを売る。
&lt;/h3&gt;&lt;p&gt;もしあなたが手元に1000ドルあり、それを銀行で売却すると仮定した場合、銀行は買値相場レートに基づいて計算します。&lt;/p&gt;
\[
1000ドル × 7.0元/ドル = 7000元
\]
&lt;p&gt;つまり、銀行はあなたに7000人民幣を渡します。この為替レートは&lt;strong&gt;買いレート&lt;/strong&gt;です。なぜなら、あなたは銀行にドルを売るからです。&lt;/p&gt;
&lt;h3 id=&#34;状況２あなたは人民幣でドルを買う&#34;&gt;状況２：あなたは人民幣でドルを買う
&lt;/h3&gt;&lt;p&gt;もしあなたが手元に7000人民幣を持っていると仮定して、それを米ドルに換金したい場合、銀行は販売レートで計算します。&lt;/p&gt;
\[
7000 人民币 ÷ 7.2 人民币/美元 = 972.22 美元
\]
&lt;p&gt;この場合、7000人民元で約972.22ドルに換金できます。ここで提示されているのは&lt;strong&gt;販売レート&lt;/strong&gt;です。なぜなら、あなたは銀行からドルを購入するからです。&lt;/p&gt;
&lt;h2 id=&#34;なぜ買値と売値が異なるのですか&#34;&gt;なぜ買値と売値が異なるのですか？
&lt;/h2&gt;&lt;p&gt;あなたはすでに気づいているかもしれませんが、銀行の買値（7.0元/ドル）は売値（7.2元/ドル）よりも低くなっています。これは、銀行が外国為替取引を行う際、通常、この為替差によって利益を得るためです。つまり、銀行はより高い売値とより低い買値の間の差額を徴収することで利益を上げます。&lt;/p&gt;
&lt;p&gt;例えば、上記のケースでは、銀行の差額は：&lt;/p&gt;
\[
売価格（7.2）－買価格（7.0）＝0.2 人民币
\]
&lt;p&gt;この差額が銀行の利益源です。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;買値相場&lt;/li&gt;
&lt;li&gt;販売レート：銀行がこのレートで外国通貨をあなたに売るレート（あなたが外国通貨を買うレート）。&lt;/li&gt;
&lt;li&gt;為替差益：買値と売値のレート間の差額は、銀行の利益源となります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この2つの為替レートの概念を理解した上で、外国為替取引を行う際には、自分がどれだけの外貨を受け取れるか、あるいはいくら分の人民元が必要になるかをより明確に知ることができます。この簡単な例が、皆さんの外国為替レートの基本的な原理への理解を深めるのに役立つことを願っています！&lt;/p&gt;</description>
        </item>
        <item>
        <title>Visual Studio で「非対応」の PDB ファイルを読み込む</title>
        <link>https://ttf248.life/ja/p/visual-studio-loading-unmatched-pdb-files/</link>
        <pubDate>Thu, 23 Jan 2025 20:04:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/visual-studio-loading-unmatched-pdb-files/</guid>
        <description>&lt;p&gt;Windows 環境で Visual Studio でプログラムをデバッグする際、pdb ファイルと実行ファイルが一致しない場合、「シンボルファイルを読み込めません」というエラーが表示されます。プログラムのクラッシュが発生し、ダンプファイルが生成された場合でも、不一致の pdb ファイルであると、Visual Studio は正常にクラッシュ現場に入り込むことができません。&lt;/p&gt;
&lt;h2 id=&#34;pdbファイルとは何か&#34;&gt;pdbファイルとは何か
&lt;/h2&gt;&lt;p&gt;PDBファイルは、Microsoftが提供するデバッグ情報ファイルで、プログラムのデバッグに用いられます。PDBファイルには、プログラムのシンボルテーブル、ソースコードファイル名、行番号などの情報が含まれています。プログラムのコンパイル時に、PDBファイルを生成し、デバッグに利用できます。&lt;/p&gt;
&lt;h2 id=&#34;windbg-デバッグ&#34;&gt;WinDbg デバッグ
&lt;/h2&gt;&lt;p&gt;WinDbgは、Microsoftが提供するデバッグツールで、Windowsプログラムのデバッグに利用できます。WinDbgはミスマッチしたpdbファイルを読み込めますが、手動でのロードが必要です。&lt;code&gt;.reload /f /i&lt;/code&gt;コマンドを使用することで、ミスマッチしたpdbファイルを強制的にロードできます。&lt;/p&gt;
&lt;p&gt;しかし、WinDbg は Visual Studio ほど使いやすくないので、Visual Studio でもミスマッチの PDB ファイルをロードできるようにしたいと考えています。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-で互換性のない-pdb-ファイルを読み込む&#34;&gt;Visual Studio で互換性のない PDB ファイルを読み込む
&lt;/h2&gt;&lt;p&gt;ソースコードは通常、git で管理されているので、対応するバージョンのコードを見つけて再コンパイルし、対応する pdb ファイルを生成できます。なぜロードできないのでしょうか？主にメタデータが一致しません。&lt;/p&gt;
&lt;p&gt;小さなツールがあり、それを使うとメタデータを修正し、exeファイルの情報に基づいて新しいpdbファイルを生成して、Visual Studioがロードできるようにする。&lt;/p&gt;
&lt;p&gt;chkmatch ダウンロード先：&lt;a class=&#34;link&#34; href=&#34;https://www.debuginfo.com/tools/chkmatch.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.debuginfo.com/tools/chkmatch.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サイトキャッシュアドレス：&lt;a class=&#34;link&#34; href=&#34;chkmatch.zip&#34; &gt;chkmatch.zip&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ChkMatch utility can be used to check whether an executable and debug information file match. It can also be used to enforce matching between an executable and debug information file, if they are compatible.

For more information about debug information matching and related issues, see this article.

Supported debug information formats: DBG, PDB 2.0, PDB 7.0.

chkmatch [-c ExeFile DebugInfoFile ] |
         [-m ExeFile DebugInfoFile]
-c
Check matching between the executable and the debug information file.
-m
Make the executable and the debug information file match.
ExeFile
The name of the executable file.
DebugInfoFile
The name of the debug information file.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chkmatchを使用する&#34;&gt;chkmatchを使用する
&lt;/h2&gt;&lt;p&gt;まずチェック処理を実行し、不一致の原因を分析後、署名が一致しない旨を表示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -c &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb

Executable:
TimeDateStamp: c26d9be3
Debug info: 2 ( CodeView )
TimeStamp: f86b0a4f  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 122  RVA: 001cdc44  FileOffset: 001cbe44
CodeView format: RSDS
Signature: {428c9b95-39a3-4a8d-a8e5-7be453684757}  Age: 1
PdbFile: D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
Debug info: 16 ( Unknown )
TimeStamp: 00000000  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 0  RVA: 00000000  FileOffset: 00000000

Debug information file:
Format: PDB 7.00
Signature: {06fae08e-c0a2-4f3d-9c7c-dfc684445dd1}  Age: 1

Result: Unmatched (reason: Signature mismatch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、pdbファイルとexeファイルが一致するように修正処理を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -m &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb

Executable:
TimeDateStamp: c26d9be3
Debug info: 2 ( CodeView )
TimeStamp: f86b0a4f  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 122  RVA: 001cdc44  FileOffset: 001cbe44
CodeView format: RSDS
Signature: {428c9b95-39a3-4a8d-a8e5-7be453684757}  Age: 1
PdbFile: D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
Debug info: 16 ( Unknown )
TimeStamp: 00000000  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 0  RVA: 00000000  FileOffset: 00000000

Debug information file:
Format: PDB 7.00
Signature: {06fae08e-c0a2-4f3d-9c7c-dfc684445dd1}  Age: 1

Writing to the debug information file...
Result: Success.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/38147487/forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>カーサーAI プログラミングIDE 体験</title>
        <link>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</link>
        <pubDate>Thu, 23 Jan 2025 19:30:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</guid>
        <description>&lt;p&gt;気がつけばまた一年が過ぎた。仕事における最大の変化は、やはりAIの関与が顕著に高まっていることだ。これまで、開発言語間の切り替えには、開発者が様々な言語の異なるAPIインターフェースを理解する必要があったが、今ではこれらの基礎コードもAIによって生成できるようになった。これは開発者にとって大きな福音と言えるだろう。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;23年頃に簡単な入門紹介を2つほどやったことがあったのに、気がつけばもう25年も経っている。どう言えばいいのか分からないが、目に見えるような進歩は感じられない。自分の認知を確立し、タスクを合理的に分割できるようになる必要がある。もちろん、最も重要なのはAI生成コードにバグがないかどうかを見抜くことだ。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;Github copilot
&lt;/h2&gt;&lt;p&gt;いつになったか覚えていないが、資料を見たところシンガポールにサーバーが設置され、国内で利用できるようになったらしい。これにより、もう長期間VPNを使わなくてもよくなった。もちろん、ログイン時にはまだVPNが必要だが、ログインが終われば閉じるだけで良い。&lt;/p&gt;
&lt;p&gt;普段使いとしては、やはり Github Copilot の方が多いです。このプラグインは、VS Code や Visual Studio で直接使えるので、2つのソフトウェア間を切り替える必要がありません。ChatGPT と比較すると、Github Copilot はプロジェクトのサポートがより良く、インタラクションも友好的です。さらに、ローカルファイルの一部を選択して AI に「訓練」させることができ、その結果生成されるコードはあなたのプロジェクトに合致しやすくなります。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;最近新しいAIプログラミングIDE、Cursor AIを見ました。このIDEはGithub Copilotをベースにしていますが、さらにスマートで、ファイルを作成してくれます。&lt;/p&gt;
&lt;p&gt;軽く使ってみましたが、なかなか良い感じです。ただ、既存プロジェクトの理解はまだ足りません。ローカルプロジェクトファイルが多い場合や、大規模なリファクタリングや最適化調整を行う場合は、やはり&lt;strong&gt;開発者がタスクを分割する必要&lt;/strong&gt;があります。&lt;/p&gt;
&lt;p&gt;curso のプロジェクトモードに切り替えて、次のような内容を入力してください：新しい個人履歴ウェブページの作成、複数の異なるスタイルへの切り替えをサポートし、データ表示のためにいくつかの個人情報を入力してください。&lt;/p&gt;
&lt;p&gt;何度か試行錯誤すると、次のようなウェブページを入手できます。もちろん、このウェブページはまだシンプルなものですが、初心者にとっては良いでしょう。&lt;/p&gt;
&lt;p&gt;現在登録ユーザーは、高機能APIを150回無料で試用できます。有料ユーザーは、高機能APIの利用が5000回に制限されます。&lt;/p&gt;
&lt;p&gt;履歴書&lt;/p&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43; ビット演算の基礎：ビットごとの値の取得とフラグ設定</title>
        <link>https://ttf248.life/ja/p/cpp-bitwise-operations-basics-flags/</link>
        <pubDate>Fri, 17 Jan 2025 02:23:56 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-bitwise-operations-basics-flags/</guid>
        <description>&lt;p&gt;実際のC++開発において、ビット演算は一般的な技術であり、特にシステム状態、フラグ、または制御ビットを扱う際には、非常に効率的な解決策を提供します。本稿では、例を通して、ビット演算を使用して特定のフラグを取得および設定する方法について解説します。&lt;/p&gt;
&lt;h3 id=&#34;ビット演算の基本概念&#34;&gt;ビット演算の基本概念
&lt;/h3&gt;&lt;p&gt;コンピュータでは、データは2進数のビット（0と1）で格納されます。ビット演算とは、これらの2進数のビットに対して行う操作のことです。C++にはいくつかの一般的なビット演算子があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ビットごとの論理積(&amp;amp;)：あるビットが1であるかどうかを確認するために使用されます。&lt;/li&gt;
&lt;li&gt;ビットごとに、または（|）を使用します。あるビットを1に設定するために使用されます。&lt;/li&gt;
&lt;li&gt;ビットごとの排他的OR（^）：あるビットを反転するために使用されます。&lt;/li&gt;
&lt;li&gt;各ビットを反転する。&lt;/li&gt;
&lt;li&gt;左シフト（&amp;laquo;）：すべてのビットをいくつか左にずらす。&lt;/li&gt;
&lt;li&gt;右シフト（&amp;raquo;）：すべてのビットをいくつか右に移動します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この例では、&lt;code&gt;unsigned short&lt;/code&gt; 型の変数 &lt;code&gt;wInfo&lt;/code&gt; に対して一連のビット演算を行い、異なるフラグによって異なる状態を表します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR
    A[原始数值: 00010000] --&amp;gt; B[左移: 00010000 &amp;lt;&amp;lt; 1]
    B --&amp;gt; C[结果: 00100000]
    C --&amp;gt; D[右移: 00100000 &amp;gt;&amp;gt; 1]
    D --&amp;gt; E[结果: 00010000]

    subgraph 左移操作
        direction LR
        A --&amp;gt; B --&amp;gt; C
    end

    subgraph 右移操作
        direction LR
        C --&amp;gt; D --&amp;gt; E
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;要求分析&#34;&gt;要求分析
&lt;/h3&gt;&lt;p&gt;題目の説明に基づき、異なる状態を表すために使用される16ビットのフラグがあります。これらの状態は、様々な二進数のビットによって示され、各二進数のビットは特定の意味に対応しています。例えば：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ビット０は失敗したか？&lt;/li&gt;
&lt;li&gt;ビット1は圧縮されていますか？&lt;/li&gt;
&lt;li&gt;bit2は増分されているか&lt;/li&gt;
&lt;li&gt;bit3に後続パッケージはありますか。&lt;/li&gt;
&lt;li&gt;通常リクエストまたはログアウト&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;位演算を使用する&#34;&gt;位演算を使用する
&lt;/h3&gt;&lt;p&gt;これらのフラグビットを設定および取得するには、ビット演算を使用します。具体的には：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ビットごとの値を取得する。&lt;/li&gt;
&lt;li&gt;ビット設定：あるビットを1に設定する。&lt;/li&gt;
&lt;li&gt;ビットクリア：あるビットを0に設定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まず、これらのフラグを保持するために &lt;code&gt;unsigned short&lt;/code&gt; 型の変数 &lt;code&gt;wInfo&lt;/code&gt; を定義します。その後、ビット演算を使用して、対応するフラグを確認および設定します。&lt;/p&gt;
&lt;h3 id=&#34;cサンプルコード&#34;&gt;C++サンプルコード
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;bitset&amp;gt;

// 定义标志位常量
const unsigned short BIT_0_FAIL = 1 &amp;lt;&amp;lt; 0;    // bit0 是否失败
const unsigned short BIT_1_COMPRESSED = 1 &amp;lt;&amp;lt; 1; // bit1 是否压缩
const unsigned short BIT_2_INCREMENT = 1 &amp;lt;&amp;lt; 2;  // bit2 是否增量
const unsigned short BIT_3_HAS_MORE = 1 &amp;lt;&amp;lt; 3;   // bit3 是否有后续包
const unsigned short BIT_5_CANCEL = 1 &amp;lt;&amp;lt; 5;     // bit5 正常请求(0)或注销(1)

// 检查某一位是否为1
bool isBitSet(unsigned short wInfo, unsigned short bitMask) {
    return (wInfo &amp;amp; bitMask) != 0;
}

// 设置某一位为1
void setBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo |= bitMask;
}

// 清除某一位（设置为0）
void clearBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo &amp;amp;= ~bitMask;
}

int main() {
    // 假设wInfo的初始值为0
    unsigned short wInfo = 0;

    // 设置bit0（失败标志）
    setBit(wInfo, BIT_0_FAIL);
    
    // 设置bit1（压缩标志）
    setBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印wInfo的二进制值
    std::cout &amp;lt;&amp;lt; &amp;quot;wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    // 检查各个标志位
    std::cout &amp;lt;&amp;lt; &amp;quot;bit0 (是否失败): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_0_FAIL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit1 (是否压缩): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_1_COMPRESSED) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit2 (是否增量): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_2_INCREMENT) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit3 (是否有后续包): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_3_HAS_MORE) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit5 (是否注销): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_5_CANCEL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;

    // 清除bit1（压缩标志）
    clearBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印更新后的wInfo
    std::cout &amp;lt;&amp;lt; &amp;quot;Updated wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コード実行、おすすめは旧友：&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wInfo (in binary): 0000000000000011
bit0 (是否失败): 是
bit1 (是否压缩): 是
bit2 (是否增量): 否
bit3 (是否有后续包): 否
bit5 (是否注销): 否
Updated wInfo (in binary): 0000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;コードの説明&#34;&gt;コードの説明
&lt;/h3&gt;&lt;p&gt;フラグの定義：ビットシフト演算（&lt;code&gt;1 &amp;lt;&amp;lt; n&lt;/code&gt;）を使用して、各フラグを定義します。例えば、&lt;code&gt;1 &amp;lt;&amp;lt; 0&lt;/code&gt;は&lt;code&gt;bit0&lt;/code&gt;に対応し、&lt;code&gt;1 &amp;lt;&amp;lt; 1&lt;/code&gt;は&lt;code&gt;bit1&lt;/code&gt;に対応します。このように、各フラグに一意な二進数の位置を割り当てます。&lt;/p&gt;
&lt;p&gt;特定のビットを確認する：&lt;code&gt;isBitSet&lt;/code&gt;関数は、ビット演算&lt;code&gt;wInfo &amp;amp; bitMask&lt;/code&gt;によって特定のフラグが1であるかどうかを確認します。そのビットが1であれば、関数は&lt;code&gt;true&lt;/code&gt;を返し、そうでなければ&lt;code&gt;false&lt;/code&gt;を返します。&lt;/p&gt;
&lt;p&gt;設定ビット：&lt;code&gt;setBit&lt;/code&gt;関数は、ビット単位のOR演算&lt;code&gt;wInfo |= bitMask&lt;/code&gt;によって特定のフラグを1に設定します。&lt;/p&gt;
&lt;p&gt;特定のビットをクリアする：&lt;code&gt;clearBit&lt;/code&gt;関数は、ビットAND演算&lt;code&gt;wInfo &amp;amp;= ~bitMask&lt;/code&gt;によって特定フラグを0に設定します。&lt;/p&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h3&gt;&lt;p&gt;ビット演算を用いることで、複数の状態フラグを効率的に処理できます。特に開発現場では、この技術は非常に役立ちます。例えば、組み込み開発、ネットワークプロトコル、システムの状態管理など、多くの場面でビットフラグを用いて複数の二進数状態を表し、スペースの節約と効率向上を図ることがあります。&lt;/p&gt;
&lt;p&gt;このブログが、C++でビット演算を使用してビット単位での値の取得と設定をどのように行うかを理解するのに役立つことを願っています。これらのスキルを習得することは、効率的で保守しやすいコードを作成する上で非常に役立ちます！&lt;/p&gt;</description>
        </item>
        <item>
        <title>デスクトップを2.5Gネットワークカードにアップグレードし、ローカルエリアネットワークの接続を高速化</title>
        <link>https://ttf248.life/ja/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</guid>
        <description>&lt;p&gt;デスクトップPCのハードウェア関連製品が立て続けに登場、前回の記事ではPCIe変換アダプターについて触れましたが、古いSSDはどうなったのでしょうか？もちろん無駄にはしていません。故障もなく、一年前に購入した&lt;code&gt;メカニズムクリエイターMini-3765H&lt;/code&gt;（機械師）に取り付けました。&lt;/p&gt;
&lt;p&gt;新しい機械、ハードウェアのスペックはやはり素晴らしいです。2.5Gデュアルネットワークポート、PCIE4.0、Wi-Fi 6。&lt;/p&gt;
&lt;p&gt;最近引っ越したばかりで、部屋に個別のルーターがなかったので、機器はすべて無線ネットワークに接続していました。ASUSのマザーボード搭載のデスクトップPCの無線LANカードの性能が悪かったのかもしれませんし、ルーターの無線アクセスやローカルネットワーク間のアップロード速度が悪いことが原因で、PC間の通信速度が良くありませんでした。そこで新しい2.5GのNICを購入して、デスクトップPCに取り付けました。&lt;/p&gt;
&lt;p&gt;マザーボードの拡張スロットはこれですべて埋まりました：グラフィックカード、ワイヤレスLANカード、2.5Gネットワークカード、SSD用のPCIEアダプター。&lt;/p&gt;
&lt;h2 id=&#34;ネットワーク説明&#34;&gt;ネットワーク説明
&lt;/h2&gt;&lt;p&gt;２台の機器は引き続き元の無線LANカードでインターネットに接続していますが、両者は有線で直接接続され、両端とも2.5Gのネットワークカードです。有線を介して２台の機器を直接接続する方法については、ここでは詳しく説明しません。オンラインには多くのチュートリアルがありますので、参考にしてください。ファイアウォールも忘れずに開放し、どちらか１台をゲートウェイとして設定してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[机器1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: - &amp;lt;br&amp;gt;自动获取DNS] --&amp;gt;|网线直连（2.5G）| B[机器2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: 192.168.4.1&amp;lt;br&amp;gt;自动获取DNS];
    A --&amp;gt;|无线网卡| Internet;
    B --&amp;gt;|无线网卡| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二つのネットワークセグメントの速度測定&#34;&gt;二つのネットワークセグメントの速度測定
&lt;/h2&gt;&lt;h3 id=&#34;ルーターローカルエリアネットワーク&#34;&gt;ルーター、ローカルエリアネットワーク
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
Connecting to host 192.168.3.237, port 5201
[  4] local 192.168.3.122 port 1656 connected to 192.168.3.237 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.00   sec  9.17 MBytes  76.7 Mbits/sec
[  4]   1.00-2.00   sec  9.91 MBytes  83.2 Mbits/sec
[  4]   2.00-3.00   sec  8.74 MBytes  73.3 Mbits/sec
[  4]   3.00-4.00   sec  10.2 MBytes  85.2 Mbits/sec
[  4]   4.00-5.00   sec  9.23 MBytes  77.1 Mbits/sec
[  4]   5.00-6.00   sec  8.80 MBytes  73.9 Mbits/sec
[  4]   6.00-7.01   sec  8.00 MBytes  66.8 Mbits/sec
[  4]   7.01-8.00   sec  7.69 MBytes  64.9 Mbits/sec
[  4]   8.00-9.01   sec  9.72 MBytes  81.1 Mbits/sec
[  4]   9.01-10.01  sec  7.63 MBytes  63.6 Mbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  sender
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ダイレクトlan&#34;&gt;ダイレクトLAN
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
Connecting to host 192.168.4.1, port 5201
[  4] local 192.168.4.2 port 1524 connected to 192.168.4.1 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.01   sec   178 MBytes  1.48 Gbits/sec
[  4]   1.01-2.00   sec   204 MBytes  1.72 Gbits/sec
[  4]   2.00-3.00   sec   214 MBytes  1.80 Gbits/sec
[  4]   3.00-4.00   sec   229 MBytes  1.92 Gbits/sec
[  4]   4.00-5.00   sec   202 MBytes  1.69 Gbits/sec
[  4]   5.00-6.00   sec   213 MBytes  1.79 Gbits/sec
[  4]   6.00-7.00   sec   230 MBytes  1.93 Gbits/sec
[  4]   7.00-8.00   sec   192 MBytes  1.61 Gbits/sec
[  4]   8.00-9.00   sec   220 MBytes  1.84 Gbits/sec
[  4]   9.00-10.00  sec   230 MBytes  1.93 Gbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  sender
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HugoにMermaidのサポートを追加する&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>華碩マザーボードZ490、ディスクが多くなるとたまに認識しない。</title>
        <link>https://ttf248.life/ja/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/</link>
        <pubDate>Fri, 10 Jan 2025 00:08:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/</guid>
        <description>&lt;p&gt;前回の続きで、無線LANカードが認識されない問題が発生し、パーティションを再構築する前に、オンラインで他の解決策も調べましたが、例えばマザーボードのバッテリーを取り外して15分間電源を切る、最新バージョンのBIOSドライバにアップデートするなど、それらも問題がありました。&lt;/p&gt;
&lt;p&gt;まだ処理しなければいけないことがあったので、低速ネットワークに切り替えて、リビングから部屋までLANケーブルを引っ張ってきたところ、また問題が発生し、有線ネットワークも認識されない。思い切ってシステムを再インストールすると、起動パーティションが見つからない。もしずっと問題が起きていなければ、こんなに手間をかけていないだろう。ASUSのこのディスクの競合は、偶発的なもので、システムの再起動不安定さが引き金になっているのだろう。&lt;/p&gt;
&lt;p&gt;先週、デスクトップに新しいディスクを追加しました。長江メモリの2TBのSSDで、M.2インターフェースです。その後、昨日まで再起動しませんでした。一度シャットダウンしたことがきっかけです。&lt;/p&gt;
&lt;p&gt;ディスクファミリー&lt;/p&gt;
&lt;h2 id=&#34;システムを再インストールする&#34;&gt;システムを再インストールする
&lt;/h2&gt;&lt;p&gt;計算してみると、システムを再インストールしてからも2年が経っていた。Cドライブの容量はもう足りないし、Windows特有の問題も発生している。普段から色々なソフトウェアがCドライブに何かデータを保存したがる。それで、システムを再インストールすることにした。システムを再インストールした後、ネットワークアダプターの問題は正常になった。翌日には日常の開発環境を復旧させ、システムのバックアップを作成しようとしたとき、新しい問題が発生した。システムを再起動すると、ブートパーティションが消えてしまった。&lt;/p&gt;
&lt;p&gt;前の記事の手順に従ってブートパーティションを再構築しましたが、不安定です。再起動後、ブートパーティションが読み込まれない可能性があります。ケースの改造を疑い始めたところ、ハードディスクケーブルが緩んでいたようです。何度か確認しましたが、問題ありませんでした。&lt;/p&gt;
&lt;h2 id=&#34;記憶の回帰&#34;&gt;記憶の回帰
&lt;/h2&gt;&lt;p&gt;数年前にこの機械は一度SSDを増設したことがあり、その際、PCIE変換器（グラフィックカードのインターフェースに接続）を使って、直接マザーボードに取り付けなかった。今回、直接マザーボードに取り付けたので、マザーボードの問題かもしれない。&lt;/p&gt;
&lt;p&gt;固体変換器&lt;/p&gt;
&lt;h2 id=&#34;マザーボード取扱説明書&#34;&gt;マザーボード取扱説明書
&lt;/h2&gt;&lt;p&gt;マザーボードの説明書に問題があり、記載されているSATAインターフェースの位置と実際の場所が異なっている。ディスクが多く、すべてのインターフェースにHDDが取り付けられているため、古いSSDもすべてSATAインターフェースである。マザーボードの説明書によると、これらのインターフェース間には競合が存在するはずだが、実際にテストしたところ、この競合は不安定に発生し、発生すると対応するディスクを読み込めなくなる。まさにそのディスクがシステムディスクであり、ブートローダーも同じディスク上にあるため、システムの起動時にブートロードの失敗が発生する。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/20250110002401.png&#34;
	width=&#34;807&#34;
	height=&#34;847&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Z490&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;228px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;PCIE変換器にSSDを再インストールすると、マザーボードのSATAインターフェースとの競合がなくなり、システムは正常に起動します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ESP パーティション、GPT パーティションテーブル、そして Windows オペレーティングシステムの協調の謎を探る</title>
        <link>https://ttf248.life/ja/p/exploring-esp-gpt-and-windows-cooperation/</link>
        <pubDate>Thu, 09 Jan 2025 23:58:20 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/exploring-esp-gpt-and-windows-cooperation/</guid>
        <description>&lt;p&gt;昨日退社後、自宅に戻り、いつものようにデスクトップPCを起動したところ、システムは正常に起動したが無線LANカードが読み込まれない。カードの接触不良かと思い、分解して無線LANカードを再インストールしたが、さらに問題が悪化し、システムが直接起動せず、ブートローダーが失敗した。&lt;/p&gt;
&lt;p&gt;久しぶりなのでデスクトップPCをいじると、パーティションの構成が少し戸惑う。DisGeniusで空き領域を再パーティション化する（通常はディスクの前方に）、そしてESPパーティションとして割り当てる（デフォルト300M）。PEシステムに入り、ブートを再構築する。関連資料はネットで調べられる。&lt;/p&gt;
&lt;p&gt;新しいESPパーティション&lt;/p&gt;
&lt;p&gt;MSRパーティションを取り除くことはできます。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンピュータのストレージの世界において、ESPパーティション、GPTパーティションテーブル、そしてWindowsオペレーティングシステムは密接に結びついており、それぞれが独自の重要な役割を果たし、システムの安定した動作と効率的な管理を支えています。しかし、それらを深く理解する前に、避けて通れないのがコンピュータのパーティションの歴史における「先輩」ともいえるMBRパーティションテーブル形式です。この形式は、その後の新しい技術と相互に映照し合い、テクノロジーの進化の軌跡を際立たせています。それでは、今日、これらの内なる関連性と巧妙さを深く分析していきましょう。&lt;/p&gt;
&lt;h2 id=&#34;一mbrパーティションテーブル従来のハードディスクの基礎&#34;&gt;一、MBRパーティションテーブル——従来のハードディスクの「基礎」
&lt;/h2&gt;&lt;p&gt;MBR、正式名称はマスターブートレコード（Master Boot Record）であり、パーソナルコンピュータの黎明期から存在し、長年にわたりハードディスクパーティション領域を支配してきた。&lt;/p&gt;
&lt;h3 id=&#34;基本アーキテクチャ&#34;&gt;基本アーキテクチャ
&lt;/h3&gt;&lt;p&gt;それはハードディスクの最初のセクタ、つまり0セクタに位置し、512バイトの領域を占有しています。この512バイトは主に3つの部分に分けられます。まず、ブートローダーコードがあり、コンピュータ起動時にオペレーティングシステムのブートローダをロードする役割を担い、通常446バイトです。次に、ディスクパーティションテーブルがあり、64バイトを占有し、最大で4つのプライマリパーティション情報を定義できます。各パーティション記述は16バイトを占有し、パーティションの開始ヘッド、セクタ、シリンダー、およびパーティションタイプ、サイズなどの重要なパラメータが記録されています。最後に、2バイトがMBR終了フラグ「55 AA」としてあり、このセクタが有効なMBRであることを識別します。&lt;/p&gt;
&lt;h3 id=&#34;歴史的功績と限界&#34;&gt;歴史的功績と限界
&lt;/h3&gt;&lt;p&gt;かつて、MBRパーティションテーブルは、個人用コンピューターの比較的単純なストレージ要件を十分に満たしていました。これにより、オペレーティングシステムはハードディスクのパーティションを円滑に認識し、データの順序付けられた保存と読み込みを実現できました。しかし、時代が進展するにつれて、その限界がますます明らかになってきました。一方、64バイトという制限されたパーティションテーブルスペースにより、最大で4つのプライマリパーティションしか作成できず、より多くのパーティションを作成するには、拡張パーティションや論理パーティションといったやや複雑な方法を用いる必要があり、ディスク管理に不便をきたします。他方、最大2TBのハードディスク容量しかサポートしていないため、現在の数TBから数十TBという大容量ハードディスクの前では力不足であり、ストレージ技術のさらなる発展を制約するボトルネックとなっています。&lt;/p&gt;
&lt;h2 id=&#34;二espパーティションシステムの見えない起動キー&#34;&gt;二、ESPパーティション——システムの「見えない起動キー」
&lt;/h2&gt;&lt;p&gt;ESPは、EFI System Partitionの略で、UEFI（Unified Extensible Firmware Interface）規格に基づくコンピューターに不可欠な特殊なパーティションです。&lt;/p&gt;
&lt;h3 id=&#34;機能特徴&#34;&gt;機能特徴
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;起動ブート&lt;/strong&gt;: コンピュータの電源を入れると、UEFIファームウェアはまずハードディスク上のESPパーティションを探し、そこに保存されている起動ローダー（Windows Boot Managerなど）を読み込み、その上でオペレーティングシステムを起動します。これはまるで精密な鍵のように、システムの起動という扉を開き、これがないとシステムは起動時に戸惑い、方向を見失います。&lt;/li&gt;
&lt;li&gt;ストレージドライバ：ESPパーティションには、システム起動時に不可欠ないくつかのドライバが格納されており、これにより、ハードウェアデバイス（HDDコントローラ、グラフィックカードなど）が初期起動段階で正常に動作し、その後のオペレーティングシステムの円滑な引き継ぎを可能にします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空間要件とフォーマット&#34;&gt;空間要件とフォーマット
&lt;/h3&gt;&lt;p&gt;通常の場合、ESP パーティションの推奨サイズは100MB～500MBの間で、一般的には約200MBを割り当てれば基本的なニーズを満たすことができます。ファイルシステム形式はFAT32である必要があります。これは、UEFIファームウェアが起動ファイルを読み取るためにFAT32形式のみを認識するためであり、互換性とクロスプラットフォーム性を確保します。&lt;/p&gt;
&lt;h2 id=&#34;gptパーティション表ハードディスクのスマート管理係&#34;&gt;GPTパーティション表——ハードディスクの「スマート管理係」
&lt;/h2&gt;&lt;p&gt;GPT（GUIDパーティションテーブル）は、グローバルに固有の識別子を持つパーティションテーブルであり、従来のMBRパーティションテーブルを代替する新しいパーティション方式です。&lt;/p&gt;
&lt;h3 id=&#34;強み発揮&#34;&gt;強み発揮
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大容量サポート&lt;/strong&gt;: データの爆発的な増加が進む現代において、大容量ハードディスクが次々と登場しています。GPTパーティションテーブルはMBRの2TBという容量制限を突破し、理論上は最大9.4ZB（ゼタバイト、1ZB=1024EB、1EB=1024PB、1PB=1024TB）という超大容量ストレージスペースをサポートし、膨大なデータストレージの可能性を開きます。&lt;/li&gt;
&lt;li&gt;MBR とは異なり、最大で 4 つのプライマリパーティションしか作成できないのに対し、GPT では最大 128 個までパーティションを作成できるため、ユーザーやシステム管理者は複数のシステムパーティション、データパーティションを割り当てたり、特殊な用途のためにパーティションを予約したりするなど、非常に柔軟に対応できます。&lt;/li&gt;
&lt;li&gt;信頼性が高い：GPT パーティションテーブルは、冗長バックアップメカニズムを採用しており、ディスクのヘッダー部とテール部にそれぞれパーティションテーブル情報を保存しています。万が一、ある場所のパーティションテーブルが破損した場合でも、システムは別のバックアップから自動的に復旧するため、パーティションテーブルの故障によるデータ損失のリスクを大幅に低減し、データの安全性を確保します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;構造分析&#34;&gt;構造分析
&lt;/h3&gt;&lt;p&gt;GPTパーティションテーブルは複数の部分で構成されており、保護MBR（従来のBIOSとの互換性を保つために残された小さなMBR構造ですが、実際のパーティション管理には使用されません）、GPTヘッダ（パーティションテーブルのバージョン、パーティション数、パーティションテーブルサイズなどの基本的な情報を格納します）、そしてパーティションエントリ配列（各パーティションエントリは、開始セクタ、終了セクタ、パーティションタイプGUID、パーティションの一意な識別子などの重要な情報を詳細に記録します）が含まれます。これらの構造が相互に連携し、ハードディスクのスペースを正確に計画・管理します。&lt;/p&gt;
&lt;h2 id=&#34;四windows-オペレーティングシステムユーザーのデジタルインタラクションの世界&#34;&gt;四、Windows オペレーティングシステム——ユーザーの「デジタルインタラクションの世界」
&lt;/h2&gt;&lt;p&gt;Windowsは、世界中で広く使用されているオペレーティングシステムであり、人とコンピュータハードウェアの間の友好的な橋を架けています。&lt;/p&gt;
&lt;h3 id=&#34;esp-パーティションと-gpt-パーティションテーブルの統合&#34;&gt;ESP パーティションと GPT パーティションテーブルの統合
&lt;/h3&gt;&lt;p&gt;UEFI ベースで起動する Windows システムのインストールプロセスにおいて、インストーラーは自動的に ESP パーティションを作成し、そこにブートファイルをデプロイします。同時に、ディスクは GPT パテーションテーブル形式で初期化され、システム予約パーティション（システム重要ファイルを格納し、従来の BIOS のシステムブートファイル領域に類似）、Windows システムパーティション（システムコアファイルをインストールする場所）、およびその他のユーザーが定義したデータパーティションなどが作成されます。Windows システムは、GPT パーティションテーブルによって各パーティションを正確に識別し、ESP パーティションを通じてスムーズに起動します。これら三者はシームレスに連携し、ユーザーに快適な起動と使用体験をもたらします。&lt;/p&gt;
&lt;h3 id=&#34;システム管理と最適化の基盤&#34;&gt;システム管理と最適化の基盤
&lt;/h3&gt;&lt;p&gt;Windowsは動作中にGPTパーティションテーブルの利点を最大限に活用してディスク管理を行います。例えば、ディスク管理ツールではGPTパーティションを簡単に識別でき、ユーザーはパーティションの作成、削除、フォーマット、サイズ変更などの操作を容易に行い、さまざまな段階でのデータストレージニーズに対応できます。また、システム更新やソフトウェアインストールなどのプロセスもパーティションレイアウトと密接に関連しており、適切なパーティション構成はシステムのパフォーマンスと安定性を向上させ、ディスク容量不足やパーティションの混乱によって引き起こされる問題を軽減するのに役立ちます。&lt;/p&gt;
&lt;h2 id=&#34;五実践のヒント保守とトラブルシューティング&#34;&gt;五、実践のヒント：保守とトラブルシューティング
&lt;/h2&gt;&lt;p&gt;それらの密接な関係を理解することで、日々のメンテナンスとトラブルシューティングに手順が確立される。&lt;/p&gt;
&lt;h3 id=&#34;ディスクスペース管理&#34;&gt;ディスクスペース管理
&lt;/h3&gt;&lt;p&gt;ESP パーティションの空き容量を定期的に確認し、過剰な起動項目関連ソフトウェアのインストールによる容量不足を防ぎ、システム起動への影響を避けてください。GPT パーティション下のデータパーティションについては、適切なストレージ計画を立て、不要なファイルをタイムリーに削除することで、単一パーティションが満杯になりシステム動作に影響を与えるのを防いでください。&lt;/p&gt;
&lt;h3 id=&#34;トラブルシューティングの開始&#34;&gt;トラブルシューティングの開始
&lt;/h3&gt;&lt;p&gt;システムが起動しない場合、まずESPパーティションが破損していないか、ファイルが失われていないかを確認してください。UEFIファームウェアに付属している起動項目修復ツールを使用するか、Windowsのインストールメディアから回復環境に入り、ESPパーティションの起動ファイルを再構築できます。GPTパーティションテーブルの故障が疑われる場合は、専門的なディスクツール（DiskGeniusなど）を使用してパーティションテーブルの完全性を確認し、パーティションテーブル情報をバックアップして失われたパーティションを復元してみてください。&lt;/p&gt;
&lt;p&gt;ESP パーティション、GPT ディスク構造、そして Windows オペレーティングシステムは、まるで精密に連携するチームのように、それぞれの得意分野を発揮し、安定した高効率なコンピューター環境を作り上げています。これらを深く理解することは、システムインストールやメンテナンスをスムーズに進めるだけでなく、コンピューターの基盤となる動作原理を理解し、デジタル世界を自由に旅することを可能にします。同時に、MBR ディスク構造の盛衰を振り返ることは、技術進歩の力に感銘を与えられます。それはストレージ技術を常に前進させ、日々増大するデータストレージの需要に適応させています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>GCC、GLIBC と C&#43;&#43; プログラムの互換性問題に関する深い理解</title>
        <link>https://ttf248.life/ja/p/deep-understanding-gcc-glibc-cpp-compatibility-issues/</link>
        <pubDate>Mon, 06 Jan 2025 19:51:16 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/deep-understanding-gcc-glibc-cpp-compatibility-issues/</guid>
        <description>&lt;p&gt;C++の開発分野において、GCCとGLIBCは避けて通れない重要な要素であり、プログラムのリリース後の互換性の問題も開発者を悩ませることがよくあります。本稿では、これらの本質を深く分析し、互換性の問題の根本原因とその対策について探求します。&lt;/p&gt;
&lt;h2 id=&#34;一gcc堅固なコンパイラ基盤&#34;&gt;一、GCC：堅固なコンパイラ基盤
&lt;/h2&gt;&lt;p&gt;定義と機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC（GNU コンパイラ コレクション）は、GNUプロジェクトが開発したオープンソースのコンパイラスイートです。これは単なるコンパイラではなく、C、C++、Objective-C、Fortran、Ada、Goなど、多様な主要言語をサポートし、クロス言語開発のためのワンストップソリューションを提供します。&lt;/li&gt;
&lt;li&gt;C++ を例にとると、クラス、テンプレート、関数オーバーロードなどの複雑な機能を備えたソースファイルを記述する際、GCC は C++ の厳格な文法と意味規則に基づいて、高度な C++ コードを、基盤となる機械が理解し実行できる命令シーケンスに変換することができます。このプロセスには、語彙解析、構文解析、意味解析、最適化、コード生成など、複数の精緻な段階が含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コンパイルプロセス詳解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前処理段階&lt;/strong&gt;: GCCはまず、ソースファイルを前処理します。この間、 &lt;code&gt;#&lt;/code&gt;で始まるすべてのプリプロセッサディレクティブを処理します。例えば、&lt;code&gt;#include&lt;/code&gt;ディレクティブは、指定されたヘッダファイル（C++の入出力ストリーム操作に使用される&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;など）の内容全体をソースファイルの対応する位置に埋め込み、プログラムがヘッダファイルで宣言されている関数やクラスなどのリソースを使用できるようにします。また、&lt;code&gt;#define&lt;/code&gt;ディレクティブで定義されたマクロもこの段階で展開置換されます。例えば、&lt;code&gt;#define PI 3.14159&lt;/code&gt;の場合、ソースファイル内のすべての&lt;code&gt;PI&lt;/code&gt;の箇所が&lt;code&gt;3.14159&lt;/code&gt;に置き換えられます。前処理後、ソースファイルは初期「拡充」されます。&lt;/li&gt;
&lt;li&gt;コンパイル段階：前処理されたファイルはコンパイルの段階に入り、GCC は C++ 言語標準に基づいてソースファイルをアセンブリ言語コードに変換します。クラスの継承、ポリモーフィズムの実装、関数呼び出しパラメータのマッチングなど、コード構造を厳密にチェックし、文法や意味に合致しないエラーが見つかった場合は、速やかにエラーを出力してコンパイルプロセスを終了します。例えば、関数宣言と定義のパラメータリストが一致しない場合、GCC は問題箇所を正確に指摘します。&lt;/li&gt;
&lt;li&gt;アセンブリ段階：アセンブラは前段階で生成されたアセンブリコードを機械語に変換し、&lt;code&gt;.o&lt;/code&gt;という拡張子のオブジェクトファイルを生成します。これらのオブジェクトファイルには、機械が直接実行できるバイナリ命令が含まれていますが、通常、完全なプログラムは複数のモジュールから構成され、各モジュール間の関数や変数の参照関係が解決されていないため、単独で実行することはできません。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;リンク段階&lt;/strong&gt;：これは実行可能ファイルを生成する最後のスパートです。リンカは複数のオブジェクトファイルと必要なライブラリファイル（静的ライブラリまたは動的ライブラリ）を統合します。例えば、C++標準テンプレートライブラリのコンテナクラスを使用する場合、リンク時には対応するライブラリの実装コードを見つける必要があります。プログラム実行時に&lt;code&gt;vector&lt;/code&gt;や&lt;code&gt;list&lt;/code&gt;などのコンテナ機能を正しく呼び出せるようにし、最終的に完全な実行可能プログラムを生成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二glibccプログラムを支える舞台裏&#34;&gt;二、GLIBC：C++プログラムを支える舞台裏
&lt;/h2&gt;&lt;p&gt;本質と役割&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GLIBC（GNU C Library）は、C標準ライブラリのGNUエコシステムにおける具体的な実装です。名前がCを強調していますが、C++プログラムもそれに強く依存しており、なぜならC++はCの基礎部分を受け継いでいるからです。メモリ管理のための&lt;code&gt;malloc&lt;/code&gt;（動的メモリ割り当て）、&lt;code&gt;free&lt;/code&gt;（メモリ解放）のような膨大な基本関数を提供し、これらはC++で動的な配列やオブジェクトを作成する際に不可欠です。また、&lt;code&gt;strcpy&lt;/code&gt;（文字列コピー）、&lt;code&gt;strcat&lt;/code&gt;（文字列連結）といった文字列処理関数も、C++に&lt;code&gt;string&lt;/code&gt;クラスがあるにも関わらず、Cコードとの連携や最高のパフォーマンスを追求する場合に利用されます。さらに、&lt;code&gt;printf&lt;/code&gt;、&lt;code&gt;scanf&lt;/code&gt;などの標準入出力関数も、C++の初期開発段階や、性能に敏感で簡潔さを追求する場面で頻繁に見られます。
システムとの連携&lt;/li&gt;
&lt;li&gt;GLIBCは、オペレーティングシステムとアプリケーションの間の重要な橋渡し役を果たします。Linuxシステムにおいて、C++プログラムがシステムコールを発行する際、例えばファイルを開く（&lt;code&gt;open&lt;/code&gt;関数を使用し、その基盤としてGLIBCの実装に依存）場合、GLIBCはそのプログラムのリクエストをオペレーティングシステムのカーネルが定める方法でカプセル化し、カーネルに渡します。カーネルの処理が完了すると、GLIBCは結果をアプリケーションに戻します。これにより、アプリケーションはオペレーティングシステムの複雑なシステムコールインターフェースの詳細を深く理解することなく、ファイルシステム、ネットワーク、プロセス管理などの様々なシステムリソースを簡単に利用できるようになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cプログラム公開後の互換性の問題分析&#34;&gt;C++プログラム公開後の互換性の問題分析
&lt;/h2&gt;&lt;p&gt;GLIBCバージョンの違いによる互換性の問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;異なる Linux ディストリビューションは、しばしば異なるバージョンの GLIBC を搭載しています。C++ プログラムが高バージョン GLIBC 環境でコンパイルされると、意図せずしてそのバージョンで新たに追加された関数機能を利用したり、より最適化された関数実装に依存したりすることがあります。例えば、新しい GLIBC バージョンではメモリ割り当てアルゴリズムが改善されており、プログラムは実行時にこの新アルゴリズムを頻繁に利用することでパフォーマンスを向上させます。しかし、このプログラムを低バージョン GLIBC システム上で動作させると、対応する関数が見つからない（低バージョンで導入されていないため）あるいは関数の挙動が異常になる（旧版の関数実装ロジックと新版にずれがある）といった問題が発生し、プログラムがクラッシュしたり、結果が誤ったものになったりする可能性があります。
コンパイラの違いによる互換性の問題&lt;/li&gt;
&lt;li&gt;たとえ同じGCCコンパイラを使用した場合でも、異なるバージョンのGCCでは、コード生成、標準ライブラリのサポート、およびC++機能の実装の詳細に違いがあります。新しいバージョンのGCCは、C++20の新機能（モジュールやコルーチンなど）を完全にサポートしている可能性がありますが、これらの最先端機能を活用したプログラムを古いバージョンのGCCでコンパイルすると、コンパイラが新しい構文構造を認識できないためにエラーが発生します。また、構文エラーがない場合でも、異なるGCCバージョン間の最適化戦略の違いにより、生成される機械語の実行効率やメモリ使用量が大きく異なり、パフォーマンスが重要なシナリオでは、プログラムの動作が異なる環境で大きく異なる結果になる可能性があります。
システムアーキテクチャの差異がもたらす課題&lt;/li&gt;
&lt;li&gt;C++プログラムは、x86、ARM、PowerPCなどの異なるハードウェアシステムアーキテクチャ上で動作する必要がある場合があります。各アーキテクチャには、独自の命令セット、メモリレイアウト、データアライメント要件があります。例えば、データアライメントに関して言えば、x86アーキテクチャで正常に動作する構造体データの格納レイアウトが、ARMアーキテクチャではアライメント規則の違いによりメモリアクセス異常を引き起こし、結果としてプログラムのエラーにつながる可能性があります。さらに、GCCは異なるアーキテクチャ向けにコンパイルすると生成される機械語が大きく異なり、プログラム中にハードコードされたアーキテクチャ固有の命令や仮定が存在する場合、クロスアーキテクチャでの実行時に頻繁な障害が発生するでしょう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四互換性の問題への対応策&#34;&gt;四、互換性の問題への対応策
&lt;/h2&gt;&lt;p&gt;静的リンクライブラリの応用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静的にリンクされたライブラリを使用することを検討してください。プログラムが依存する GLIBC などのライブラリのコードを、実行ファイルに直接パッケージングします。そうすることで、プログラムは実行時にターゲットシステム上の特定の GLIBC のバージョンに依存しなくなり、GLIBC のバージョンの不一致によって引き起こされる問題を効果的に回避できます。ただし、静的リンクは実行ファイルのサイズを大幅に増加させるため、ストレージリソースが限られたシナリオでは、メリットとデメリットを比較検討する必要があります。
コンテナデプロイメント&lt;/li&gt;
&lt;li&gt;Dockerなどのコンテナ化技術を活用し、C++プログラムとその実行環境（特定のバージョンのGCC、GLIBCなど）を独立したコンテナにパッケージングします。これにより、基盤となるオペレーティングシステムが何であれ、コンテナ内部は常にプログラム開発時の環境を維持し、プログラムが期待通りに動作することを保証します。また、異なる環境へのデプロイメントの複雑さを大幅に軽減します。
互換性テストと継続的インテグレーション&lt;/li&gt;
&lt;li&gt;包括さまざまなGLIBCバージョン、GCCバージョン、および一般的なシステムアーキテクチャを網羅した、包括的な互換性テスト体系を構築する。開発プロセス中に、継続的インテグレーションツールを使用して、複数の環境で定期的に自動テストを実施し、互換性の問題が発見された場合は迅速に修正することで、潜在的な問題を初期段階で扼殺し、プログラムのリリース後の安定性を確保する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記を総合すると、GCCとGLIBCの動作メカニズムを深く理解し、C++プログラムの互換性問題の根本原因を正確に把握し、柔軟に対処戦略を用いることは、すべてのC++開発者が堅牢でクロスプラットフォームなアプリケーションを構築するために不可欠なスキルです。そうすることで初めて、私たちのC++作品は多様な技術エコシステムの中で円滑に進むことができるでしょう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Windowsに標準搭載されているディスククリーンアップツール：ストレージ</title>
        <link>https://ttf248.life/ja/p/windows-disk-cleanup-storage/</link>
        <pubDate>Mon, 06 Jan 2025 19:29:45 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-disk-cleanup-storage/</guid>
        <description>&lt;p&gt;どのバージョンからかはっきりとは分からないが、Windows 11ではディスククリーンアップツールが大幅に改善され、よりスマートになっている。&lt;/p&gt;
&lt;p&gt;重要なのは、これは公式ツールであり、ファイルが誤って削除されることはなく、広告もポップアップもバックグラウンドプロセスもなく、不要なものが一切ないということです。&lt;/p&gt;
&lt;p&gt;Windows 11では、「設定」-「システム」-「ストレージ」-「一時ファイル」からディスククリーンアップツールを開くことができます。&lt;/p&gt;
&lt;p&gt;保存画面&lt;/p&gt;
&lt;p&gt;通常ユーザーは「おすすめのクリーンアップ」を選択すればよいです。システムはあなたの利用状況に基づいて、いくつかの提案を提示します。&lt;/p&gt;
&lt;p&gt;私は開発者なので、ディスク上に多くの仮ファイルがあり、「一時ファイル」を選択しました。そこには、例えば「Visual Studio」の仮ファイルや「Windows Update」の仮ファイルなど、たくさんの仮ファイルが含まれています。&lt;/p&gt;
&lt;p&gt;仮ファイル&lt;/p&gt;</description>
        </item>
        <item>
        <title>Docker国内镜像代理失効</title>
        <link>https://ttf248.life/ja/p/docker-domestic-mirror-failure/</link>
        <pubDate>Sat, 04 Jan 2025 18:29:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/docker-domestic-mirror-failure/</guid>
        <description>&lt;p&gt;国内サーバーにDockerをデプロイし、デプロイ後、もし会社がイメージセンターを提供していない場合、開発者がまず行うべきことは、国内のイメージ加速アドレスを設定することです。ちょうど今日、一台のサーバーがあり、イメージ加速アドレスを設定しましたが、イメージのプルダウンがずっとできません。&lt;/p&gt;
&lt;p&gt;エラー応答: デーモンからのエラー: &lt;code&gt;https://registry-1.docker.io/v2/&lt;/code&gt; への接続を待機中にタイムアウトが発生しました (&lt;code&gt;net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;二日ぶりのことですが、全てのサーバーが復旧しました。なぜこれが話題にならないのか、国内のすべてのミラープロキシはダウンしています。&lt;/p&gt;
&lt;h2 id=&#34;トラブルシューティングと修理の試み&#34;&gt;トラブルシューティングと修理の試み
&lt;/h2&gt;&lt;p&gt;当初、別のミラーの加速アドレスに切り替えることを試みましたが、期待した効果はなく、問題は依然として解決されませんでした。&lt;/p&gt;
&lt;p&gt;直ちに、ローカルDNSの設定変更に着手し、ネットワーク解析のレベルで突破口を探りましたが、何度かデバッグしても、問題は依然として解決しませんでした。&lt;/p&gt;
&lt;p&gt;現時点では、ローカルネットワークの安定性が疑われているため、思い切って携帯電話のテザリングに切り替え、考えられるローカルネットワークの問題点を回避しようとしましたが、結果は落胆するもので、問題は全く改善されません。&lt;/p&gt;
&lt;h2 id=&#34;問題が拡大&#34;&gt;問題が拡大
&lt;/h2&gt;&lt;p&gt;現在も&lt;strong&gt;国内にいくつかサーバー&lt;/strong&gt;があり、それらはすべて Docker 環境がインストールされています。これらのサーバーでイメージのプルを試みましたが、別の方法を見つけられるのではないかと考えていましたが、例外なくすべて失敗し、エラーメッセージは全く同じでした。これは問題が特定のデバイスに限られたものではないことを示しています。&lt;/p&gt;
&lt;p&gt;さらに調査したところ、ミラープロキシが一時的に機能しなくなったようです。この緊急事態において、すぐに海外のサーバーに切り替えて試みると、幸いなことに、ここでミラーの取得は正常に戻り、問題はおおむね国内のネットワーク経路または関連設定にある可能性が高いことを意味します。&lt;/p&gt;
&lt;h2 id=&#34;戦術調整間接解決&#34;&gt;戦術調整：間接解決
&lt;/h2&gt;&lt;p&gt;国内の直接リソースミラーリングが様々な妨害を受けている現状と、海外ミラーは正常にアクセスできる状況を踏まえ、プロジェクトを迅速に進めるため、回り道をすることに決定しました。まず海外サーバーへ切り替え、必要なリソースミラーを問題なく取得した後、国内のリソースミラー倉庫へプッシュし、「データブリッジ」を構築します。&lt;/p&gt;
&lt;p&gt;同時に、Dockerfile ファイルも修正し、イメージのアドレスを国内環境に適合したアドレスに置き換えた後、再度イメージを構築し、最終的に正常にデプロイすることができた。&lt;/p&gt;</description>
        </item>
        <item>
        <title>文明資本主義の終焉：英雄リーグeスポーツ時代の終結</title>
        <link>https://ttf248.life/ja/p/end-of-era-league-of-legends-esports/</link>
        <pubDate>Tue, 31 Dec 2024 07:19:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/end-of-era-league-of-legends-esports/</guid>
        <description>&lt;p&gt;eスポーツ産業は、ここ10数年間で目覚ましい発展を遂げ、世界的に無視できない文化現象となっています。特に《英雄联盟》（League of Legends、通称LOL）を代表とするMOBAゲームは、プレイヤーに競技の楽しさを提供するだけでなく、資本に強力な推進力を与え、一連のeスポーツプラットフォームやイベントの活発な発展を促してきました。しかしながら、資本の流入と泛娯楽産業の台頭とともに、これらは徐々に衰退段階に入っています。熊猫TVの隆盛と没落、そして斗魚と虎牙の競争は、「野蛮資本時代」の終焉を意味し、eスポーツ業界の天時地利人和も変化し始めているようです。&lt;/p&gt;
&lt;h2 id=&#34;第一章電競の台頭と資本注入&#34;&gt;第一章：電競の台頭と資本注入
&lt;/h2&gt;&lt;p&gt;初期eスポーツ：草からプロへ&lt;/p&gt;
&lt;p&gt;初期eスポーツ産業は、特に中国市場において、比較的草の根的なスタートを切った。多くのプレイヤーがゲームへの情熱を原動力に、《スタークラフト》やDotaといったゲームの競技に参加した。しかし、eスポーツが真に台頭したのは，《リーグ・オブ・レジェンド》のリリースとプロモーションによるものだった。2011年に《リーグ・オブ・レジェンド》が正式に中国市場に進出以降、eスポーツは徐々に小規模なコミュニティから大衆文化の一部へと発展していった。特に2013年からはLPL（中国プロリーグ）が徐々に形成され，《リーグ・オブ・レジェンド》は中国eスポーツ産業の支柱となった。&lt;/p&gt;
&lt;p&gt;資本が猛烈に流入：パンダTVとeスポーツ配信プラットフォームの台頭&lt;/p&gt;
&lt;p&gt;2015年は、中国eスポーツ業界における転換点となった。資本の流入により、eスポーツは単なる競技大会から、より巨大な産業へと変化した。その代表例の一つであるパンダTVは、過剰な資本が生んだ産物と言える。王思聰（ワン・シーチュン）（パンダTVの創業者の一人）が投資したパンダTVは、革新的なコンテンツと莫大な投資によって急速に成長し、多くの視聴者やユーザーを惹きつけた。しかし、これもまた、資本が「野蛮」に流入する典型例であり、資本が市場を猛追する場合、しばしば忍耐力や長期的な視点が欠けてしまう。パンダTVは、資金と人材への投資によって短期的には一定の成果を上げたものの、経営問題や資本への過度な依存により、最終的に2019年に破産宣告となった。&lt;/p&gt;
&lt;p&gt;ライブ配信プラットフォームの競争：ドールフィッシュと虎牙の「資本戦争」&lt;/p&gt;
&lt;p&gt;熊猫TVの衰退は、eスポーツ配信業界の衰退を招いたのではなく、むしろビリビリと虎牙といったプラットフォームの台頭を促した。ビリビリと虎牙という二大配信プラットフォームは急速にeスポーツ業界のリーダーとなり、互いの競争も激しさを増している。ビリビリは当初、《英雄联盟》プロリーグの配信やトップ配信者の契約により、eスポーツ配信のベンチマークとなった。一方、虎牙はeスポーツイベントへの投資を増やし、自プラットフォームの多様化を進めることで、ビリビリとの差を徐々に縮めてきた。&lt;/p&gt;
&lt;p&gt;この過程で、資本は再び大きな役割を果たしました。Bilibili（ビリビリ）は2018年に上場に成功し、Huya（虎牙）も同年にはIPOを行いました。資本の急速な流れは業界の高濃度化をもたらし、同時にプラットフォーム間での配信者や著作権などの激しい競争を引き起こし、「資本戦争」を形成しました。&lt;/p&gt;
&lt;h2 id=&#34;第2章泛エンタメ化とeスポーツの融合&#34;&gt;第2章：泛エンタメ化とeスポーツの融合
&lt;/h2&gt;&lt;p&gt;泛エンタメ化の波：資金が多様なエンターテイメントプロジェクトへ&lt;/p&gt;
&lt;p&gt;資本がeスポーツ業界に再び注力するにつれて、eスポーツプラットフォームのコンテンツは徐々に多様なエンターテイメントへと変化している。eスポーツ配信者は試合解説やイベント中継にとどまらず、歌唱、ダンス、ライブでのインタラクションなど、さまざまなエンターテイメント形式にまで活動範囲を広げている。プラットフォーム上のコンテンツはより豊かになり、eスポーツを核としつつも、多様なエンターテイメント要素を含むコンテンツエコシステムが徐々に形成されている。&lt;/p&gt;
&lt;p&gt;しかし、万般娯楽化も問題を引き起こした——元々ゲーム文化に特化していたeスポーツが徐々にその地位を失い、代わりに娯楽至上主義の傾向が台頭してきた。この傾向により、元々eスポーツ文化を深く愛していた一部の視聴者が離脱感を感じるようになり、資本もまた他の娯楽分野への目を向けるようになった。資本の過剰な投資と利益追求は、eスポーツ産業の本質を徐々に曖昧にし、元々競技を中核としていた価値理念が弱まりつつある。&lt;/p&gt;
&lt;p&gt;泛エンタメ産業の台頭：資本の撤退と転換&lt;/p&gt;
&lt;p&gt;ショート動画プラットフォームやライブ配信プラットフォーム、芸能界などの泛エンタメ産業の台頭に伴い、資本は徐々に資金をeスポーツからより広範なエンターテイメントコンテンツへとシフトさせている。この過程において、テンセント、アリババ、バイトダンスといった大手企業も、eスポーツプロジェクトだけに依存するのではなく、映画、音楽、ショート動画などの分野への投資を強化している。特にバイトダンスの台頭は、抖音などのショート動画プラットフォームの爆発的な成長により、eスポーツの注目度を他のエンターテイメントコンテンツに覆い隠してきた。&lt;/p&gt;
&lt;h2 id=&#34;第三章青黄不接英雄聯盟時代のボーナスが薄れる&#34;&gt;第三章：「青黄不接」：英雄聯盟時代のボーナスが薄れる
&lt;/h2&gt;&lt;p&gt;2011年に「リーグ・オブ・レジェンド」が中国市場に入って以来、それはほぼ中国eスポーツ業界の代名詞となり、数えきれないほどのプロ選手、チーム、大会を輩出し、巨大なeスポーツ産業チェーンを生み出してきた。しかし、10年以上が経過し、「リーグ・オブ・レジェンド」は中国eスポーツをリードしてきたプロジェクトとして「世代交代」の段階に入っている。特に近年、「リーグ・オブ・レジェンド」の影響力は徐々に低下しており、明らかな衰退の兆候も見え始めている。&lt;/p&gt;
&lt;p&gt;プレイヤー層の「断層」
最も明白な変化は、プレイヤー層の断層です。当初、eスポーツの急速な発展は、大量の若年層プレイヤーの支持に依っていました。その中には多くの人が，《英雄联盟》によってプロゲーマーや観客になりました。あの世代のネット中毒気味の少年たちは、ほとんど「時代の好況」の中で成長し、「LOL」がもたらす競技の魅力に浸り、それによって業界全体の急速な拡大を推進しました。しかし、時間が経つにつれて、これらのプレイヤーは徐々に大人になり、社会に入り、他の生活や職業へと転向していきました。同時に、新しい世代の若年層プレイヤーの《英雄联盟》への関心は、当時は以前ほどではありませんでした。eスポーツの受容者層には、すでに明白な年齢偏差と興味の低下が見られます。&lt;/p&gt;
&lt;p&gt;ゲームコンテンツの「疲弊」
「リーグ・オブ・レジェンド」は何度もアップデートと改編を経て、一定の競技魅力は保っているものの、ゲーム自体のコンテンツ革新はやや行き詰まっているように見受けられる。毎年リリースされるバージョンアップデートやヒーローバランス調整、新しいゲームプレイの導入は、根本的にプレイヤーが求める新鮮さへのニーズを解決できていないようだ。「王者荣耀」「和平精英」といった他のジャンルのゲームが台頭し、大量のプレイヤーを奪い去ったことでMOBA市場は飽和状態に達している。このような競争環境のため、「リーグ・オブ・レジェンド」は常に「追随者」という立場から抜け出すことができていない。&lt;/p&gt;
&lt;h2 id=&#34;結論eスポーツ業界の将来はどこへ向かうのか&#34;&gt;結論：eスポーツ業界の将来はどこへ向かうのか？
&lt;/h2&gt;&lt;p&gt;eスポーツ産業は、まるで突如現れた高層ビルのように見える。過剰な資金がインターネット業界を彷徨い、次の追い風を探している中、eスポーツ産業も彼らのターゲットの一つとなった。国内の人口増進の恩恵を受け、eスポーツ産業は短期間で大きな成功を収めたものの、その成功基盤は必ずしも強固ではない。資本の過剰な流入、人材不足、ゲームコンテンツの疲弊といった問題が、eスポーツ産業の健全な発展を阻んでいる。&lt;/p&gt;
&lt;p&gt;大学時代以前は、ゲームをあまりやったことがないと言ってもいい。リーグ・オブ・レジェンドは、ある世代の成長と共にあったと言えるだろう。多くの決勝戦を見てきたが、外部の人間として、特にFakerのような韓国の選手と比べると、国内の選手たちは、主要大会期間中いつも萎縮しているような印象を受ける。選手の心理的なプレッシャーが大きいことは理解しているし、この業界も10年以上発展してきたので、選手のメンタルヘルスの問題はチームによって重視されるべきだが、そうはなっていない。結局、国内のプレイは選手の才能に頼っているという現状だ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ゲームから家族へ：なぜ私たちは成長するにつれて仮想世界から離れていくのか</title>
        <link>https://ttf248.life/ja/p/from-games-to-family-why-we-drift-away-from-virtual-worlds/</link>
        <pubDate>Tue, 31 Dec 2024 07:11:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/from-games-to-family-why-we-drift-away-from-virtual-worlds/</guid>
        <description>&lt;p&gt;ゲームを一番楽しめた時って聞かれると、子供の頃にこっそり家のテレビでタンクバトルやスーパーマリオ、コンバットゾーンを遊んだ時だろうか、それとも、いとこと一緒にこっそり家のパソコンでエイジオフエンパイアを遊んだ時だろうか、あるいは大学に入ってルームメイトと一緒に鬼泣（ブレットストーム）やリーグ・オブ・レジェンドをプレイした時だろうか？&lt;/p&gt;
&lt;p&gt;子供の頃は生活の悩みもなく、遊ぶ時は本当に心身ともに没頭して、その没入感は、大人になってからはもう二度と見つからないものだ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;時代の変化と社会の進歩に伴い、かつて活発だった仮想世界での私たちですが、次第に気づき始めています。かつては喜びと競争に満ち溢れていたゲームプラットフォームが、まるで私たちの生活から遠ざかっているように思えるのです。ゲームのソーシャルリンクの途絶、それに伴うプレイヤーたちの離脱は、技術の進歩やゲーム自体の代替だけでなく、私たち自身の生活の中心の変化によるものです。年齢を重ねるにつれて、結婚や出産に忙しくなり、人生の主軸は徐々に個人的な娯楽から家族への責任へと移っていきました。今日、この傾向の背後にある深層原因について語りましょう。&lt;/p&gt;
&lt;h2 id=&#34;ゲームソーシャルの消失仮想世界と現実世界の綱引き戦&#34;&gt;ゲームソーシャルの消失：仮想世界と現実世界の綱引き戦
&lt;/h2&gt;&lt;p&gt;多くの人の青春時代において、ゲームは単なる娯楽ではなく、一種のコミュニケーション手段でした。人気のあるオンラインマルチプレイヤーゲームは、ゲーム内での挑戦や競争を提供するだけでなく、世界中のプレイヤーを結びつけ、仮想的なコミュニティを構築しました。その時代、友達と一緒にダンジョンに挑んだり、チームで対戦したりすることは生活の一部でした。深夜のボイスチャットで日常を分かち合った時間は、私たちの記憶の一部となりました。&lt;/p&gt;
&lt;p&gt;しかし、時間が経つにつれて、ますます多くのプレイヤーがこの仮想的なソーシャル体験には永遠の魅力がないことに気づき始めた。ゲームのアップデートや多様化するソーシャルプラットフォームにより、プレイヤーたちは徐々にゲームの外でより多くの交流方法を見つけ出した。ゲーム内の友人たちは次第に私たちの生活から姿を消し、かつて活発だったゲーム内でのソーシャルリンクもまた、気づかないうちに途絶えてしまった。&lt;/p&gt;
&lt;h2 id=&#34;ゲームと責任大人になってからの人生の中心の変化&#34;&gt;ゲームと責任：大人になってからの人生の中心の変化
&lt;/h2&gt;&lt;p&gt;大人になってからは、人生における責任が徐々に増えてきます。かつてはゲームに多くの時間を費やしていた若者もいるかもしれませんが、キャリアをスタートさせたり、パートナーと暮らしたり、家庭を築いたりすると、以前は不可欠に見えた娯楽活動が、現実生活の責任によって圧迫され始めます。結婚や出産、あるいは親御さんの介護など、人生における大きな責任は、活力と時間を選択せざるを得ない状況を生み出します。&lt;/p&gt;
&lt;p&gt;ゲームは過去のものとなり、その代わりに家族のことが優先されるようになった。かつてゲームで「奮闘」していた若者たちは、徐々に現実生活が最も重要な課題だと気づき始めている。特に子供ができたら、生活の中心は完全に家庭に傾き、ゲームは次第に生活の端に追いやられていく。&lt;/p&gt;
&lt;h2 id=&#34;ゲームから家庭へ生活の変化はどのように私たちの娯楽の形を変えてきたのか&#34;&gt;ゲームから家庭へ：生活の変化はどのように私たちの娯楽の形を変えてきたのか
&lt;/h2&gt;&lt;p&gt;私たちの人生経験の中で、家庭は最も重要な要素の一つです。そして、家庭生活に入ると、時間とエネルギーの配分がより具体的で限られたものになります。子供たちの世話やパートナーとの時間を過ごすために、多くの若い親たちは、かつて愛していたゲームに十分な時間を割くことができなくなります。時には、ゲームのアップデートや新しい情報に追うことさえなくなります。次第に、ソーシャルメディアやオフラインでの友人との交流が、より多くの人々のコミュニケーションの中心となります。&lt;/p&gt;
&lt;p&gt;これは、私たちが完全に娯楽活動を諦めたという意味ではありません。単に、現在のライフステージに合った方法を選んだだけです。かつてゲームを通じて交流を保っていた友人たちも、それぞれの生活経路の違いから、家族の集まりや食事会、近場の旅行など、他の方法で繋がりを維持することを選ぶかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;仮想世界のさよなら私たちはこの変化をどのように見なすべきか&#34;&gt;仮想世界のさよなら：私たちはこの変化をどのように見なすべきか？
&lt;/h2&gt;&lt;p&gt;かつてゲームに没頭した経験のある人にとって、ゲームとの別れは容易ではない。なにせ、かつて私たちに喜びと達成感をもたらしてくれた仮想世界は、すでに私たちの記憶の一部となっているからだ。しかし、別れが完全に断ち切ることを意味するわけではなく、生活の変化に伴い、現実生活での役割を調整するために異なる選択肢を選び始めるのだ。年齢を重ねるにつれて、私たちは青臭い少年から責任感のある大人へと成長し、ゲームも依然として価値があるものの、もう人生の主旋律にはなれない。&lt;/p&gt;
&lt;p&gt;実際、この変化は人間の適応力の表れの一つであり、私たちは異なる段階に応じて注意点やライフスタイルを調整できるということです。責任と家庭が人生の中心となる時、ゲームのソーシャル性は優先順位ではなくなり、たまのレジャーとして楽しむようになるのです。&lt;/p&gt;
&lt;h2 id=&#34;未来みらいのゲームもしかしたらまた別の帰属意識きぞくいしきの波なみが来るかもしれない&#34;&gt;未来(みらい)のゲーム：もしかしたら、また別の「帰属意識(きぞくいしき)」の波(なみ)が来るかもしれない。
&lt;/h2&gt;&lt;p&gt;もちろん、社会の発展と技術の進歩に伴い、ゲームの形や内容は常に進化しています。例えば、現在のオンラインマルチプレイヤーゲームは、よりリラックスした柔軟な方向へと発展し始めており、さらに家庭での交流や親子の関係を重視したデザインのゲームも登場してきています。将来的には、もっと多くのゲーム形式が登場し、家庭生活に溶け込みやすく、プレイヤーにより健康的でバランスの取れたソーシャルエクスペリエンスを提供してくれるかもしれません。&lt;/p&gt;
&lt;p&gt;多くの人が「子供の頃のゲーム」を思い出す時、懐かしさと情熱に満たされるように、未来の私たちもまた、あるがかりな瞬間に、かつてプレイしていたゲームを新たな解釈と経験と共に再び手に取り、あの仮想世界に足を踏み入れるかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;変化はあれど愛は変わらない&#34;&gt;変化はあれど、愛は変わらない。
&lt;/h2&gt;&lt;p&gt;ゲームも家庭も、人生の移り変わりは常に私たちの成長と共にあります。その過程で、バーチャル世界が無限の喜びと刺激を与えてくれますが、最終的には現実に戻り、最も温かい場所である家族のもとに帰ってくることに気づきます。ゲームから離れることを後悔する必要はありません。なぜなら、人生の各段階にはそれぞれ独自の意味があるからです。そしてこれらの変化こそが、私たちをより完全な人間へと成長させていく一端なのです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>香港証券取引所、仮想通貨発展史</title>
        <link>https://ttf248.life/ja/p/hong-kong-stock-exchange-virtual-currency-history/</link>
        <pubDate>Tue, 31 Dec 2024 07:00:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-stock-exchange-virtual-currency-history/</guid>
        <description>&lt;p&gt;ドナルド・トランプ氏が再びアメリカ合衆国大統領に選出されると、仮想通貨が再び世間の目に留まることになりました。香港証券取引所も関連事業を積極的に展開しており、ここでは香港証券取引所の仮想通貨に関する発展史について簡単に記録しておきます。&lt;/p&gt;
&lt;p&gt;関連契約リストの詳細を確認したところ、当初導入されたのは現物ではなく先物であることがわかりました。これは理にかなっています。なぜなら、先物市場の方が流動性が高く、機関投資家を導入しやすいからです。その後導入された現物ETFも同様です。ETFはより受け入れられやすい投資ツールだからです。&lt;/p&gt;
&lt;h2 id=&#34;仮想通貨リスト&#34;&gt;仮想通貨リスト
&lt;/h2&gt;&lt;p&gt;香港証券取引所の市場データには、コントラクトが仮想通貨であるかどうかを区別するための識別子は提供されていませんが、コントラクト名によって判断できます。公式サイトの取引明細書には、対応するサブカテゴリ&lt;code&gt;virtualasset&lt;/code&gt;が記載されています。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2022年12月16日&#34;&gt;2022年12月16日
&lt;/h2&gt;&lt;h3 id=&#34;香港証券取引所はアジアで初めての暗号資産etfの上場を歓迎します&#34;&gt;香港証券取引所は、アジアで初めての暗号資産ETFの上場を歓迎します。
&lt;/h3&gt;&lt;p&gt;香港交易及结算有限公司（香港証券取引所）は本日（金曜日）、アジアで初めての暗号資産ETFの上場を歓迎し、製品エコシステムをさらに拡大するとともに、香港および国際的な投資家により多くの選択肢を提供します。&lt;/p&gt;
&lt;p&gt;本日上場した2つの新ETF — 南方東英ビットコイン先物ETF（証券コード：3066）および南方東英イーサリアム先物ETF（証券コード：3068）は、南方東英資産管理有限公司が運用し、それぞれシカゴ商品取引所（CME）で取引されている標準化された現金決済型ビットコイン先物契約およびイーサリアム先物契約を追跡しています。&lt;/p&gt;
&lt;p&gt;香港証券取引所最高運營責任者兼市場共同主管の姚嘉仁氏は、「本日上場した2つの暗号資産ETFは、香港の日益豊かで多様な交易所買収商品エコシステムに彩りを添えるものです。これらの新商品は、アジアで初めて投資家がデジタル資産への投資に参加する機会を提供し、デジタル経済への関心と市場のニーズを反映しています。今後数か月以内に、より多くのテーマ式ETFやデジタル資産の新商品を迎えられることを期待しています。」&lt;/p&gt;
&lt;p&gt;ETFは香港証券取引所傘下の事業の中で最も急速に成長しているものであり、2022年には製品の種類も拡充され、ますます多様化しており、その中で初のメタバースETF、初のカーボン先物ETF、そして初のブロックチェーンETFが新たに登場し、さらに初めて滬港通・深港通にETFを組み入れました。&lt;/p&gt;
&lt;p&gt;さらに、香港証券取引所における商品（ETP、ETFやレバレッジ型・逆張り商品を包含）の今年の最初の11か月の平均日々の取引高は118億元であり、前年の同時期の78億元から大幅な50%増となっており、ETPが投資家により一層支持されていることが示されています。2022年11月までに、香港証券取引所に上場しているETPは合計で168種類あり、時価総額は約3,735億元に達しています。&lt;/p&gt;
&lt;h2 id=&#34;2024年4月30日&#34;&gt;2024年4月30日
&lt;/h2&gt;&lt;h3 id=&#34;香港証券取引所は初の仮想資産現物etfの上場を歓迎します&#34;&gt;香港証券取引所は、初の仮想資産現物ETFの上場を歓迎します。
&lt;/h3&gt;&lt;p&gt;香港交易结算所有限公司（香港証券取引所）は本日（火曜日）、アジアで初めての仮想資産現物 ETF の上場を歓迎し、香港市場の商品多様性を高め、投資家に豊富な選択肢を提供することで、香港がアジア有数の ETF 市場としての地位を確立します。&lt;/p&gt;
&lt;p&gt;香港証券取引所の証券商品開発責任者ロバート・ポーマン氏は、「本日新たに上場する仮想資産現物 ETF は、香港証券取引所の多様かつ活発な ETF 市場のエコシステムを豊かにし、投資家に新たな資産クラスへの投資機会を提供します。1 年前に仮想資産先物 ETF を成功裏に導入したことに続き、アジアで初めての仮想資産現物 ETF は、香港証券取引所の取り扱い商品の種類と流動性をさらに高めます。私たちは市場関係者との緊密な連携を続け、国際的な市場に新たな商品をもたらすことを期待しています。」&lt;/p&gt;
&lt;p&gt;最初の仮想資産先物ETFが2022年に上場して以来、投資家から高い人気を集め、活発な取引が行われている。香港に上場している3つの仮想資産先物ETFの日平均出来高は、2023年の890万港ドルから2024年第1四半期には5,130万港ドルに増加し、同時に5億2,900万港ドルの資金流入も記録した。&lt;/p&gt;
&lt;p&gt;取引所上場商品（ETF、レバレッジ型および逆建て玉商品を含む）は、香港証券取引所の成長が最も速い市場の一つであり、製品の種類も過去一年で着実に増加しています。2023年と2024年初の四半期に新たに16種類のETF商品が上場し、その中にはアジア太平洋地域初のサウジアラビアETFや、香港初の権利確定済みコールオプション連動型ETFが含まれます。現在、香港で取引されているETFは合計179種類です。&lt;/p&gt;
&lt;h2 id=&#34;2024年10月28日&#34;&gt;2024年10月28日
&lt;/h2&gt;&lt;h3 id=&#34;香港証券取引所が仮想資産指数シリーズを発表する&#34;&gt;香港証券取引所が仮想資産指数シリーズを発表する
&lt;/h3&gt;&lt;p&gt;香港交易及結算所有限公司（香港証券取引所）は、本日（月曜日）発表しました。2024年11月15日に香港証券取引所の仮想資産指数シリーズ（指数シリーズ）を導入し、急速に成長している仮想資産という資産カテゴリーに信頼できるベンチマーク価格を提供し、香港がアジア有数のデジタル資産中心地となることを支援します。&lt;/p&gt;
&lt;p&gt;この指数シリーズは、アジア地域のタイムゾーンにおけるビットコインとイーサリアムの価格設定に透明性と信頼性のあるベンチマークを提供し、仮想資産に対して統一された参照価格を提供し、世界中の取引所間での価格差を解消することを目的としています。&lt;/p&gt;
&lt;p&gt;香港交易所グループ最高経営責任者陳翊庭氏は、「当社は、この急成長する資産カテゴリーに対する地域社会のニーズに応えるため、香港証券取引所バーチャルアセット指数シリーズを発表できることを嬉しく思います。透明性と信頼性の高いリアルタイムベンチマークを提供することで、投資家が賢明な投資判断を下し、仮想資産エコシステムの健全な発展を支援するとともに、香港の国際金融センターとしての地位を確立できるよう貢献したいと考えています。」&lt;/p&gt;
&lt;p&gt;香港証券取引所が新たな分野を開拓する取り組みの一環として、この指数シリーズを発表したことは、香港のフィンテック発展を支援するとともに、投資家に対し、常に変化する市場環境において重要なベンチマークツールとソリューションを提供することを意味します。&lt;/p&gt;
&lt;p&gt;指数シリーズには、ビットコインとイーサリアムの参照指数および参照レートが含まれる予定です。&lt;/p&gt;
&lt;p&gt;ビットコインまたはイーサリアムの24時間取引量で加重された、複数の主要仮想資産取引所の集計市場価格に基づき、米ドル建てで算出される基準現物価格を基礎としています。この参照レートは金融商品の決済用に設計されており、香港時間午後4:00に毎日算出されます。&lt;/p&gt;
&lt;p&gt;この指数シリーズは、欧州連合のベンチマーク規制（BMR）に準拠した香港初の仮想資産指数シリーズとなり、英国に登録されたベンチマーク管理機関と仮想資産データおよび指数プロバイダーであるCCDataが共同で管理・算出します。&lt;/p&gt;
&lt;p&gt;香港特別行政区政府は2022年に仮想資産の発展に関する政策声明を発表し、香港に活気に満ちた仮想資産産業とエコシステムを育成することを望んでいます。香港証券取引所の仮想資産指数シリーズの導入により、リアルタイムデータとアジア地域の時差を利用した日々の参照価格を提供することで、一般の人々が仮想資産投資の動向に対する理解を深めることを支援します。&lt;/p&gt;
&lt;p&gt;指数シリーズの設計および計算方法の詳細については、随時発表いたします。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>手数料が下がりました、手数料が下がりました、国内の超大型ETFで手数料の大幅な値下げが行われました。</title>
        <link>https://ttf248.life/ja/p/reduced-fees-large-domestic-etf/</link>
        <pubDate>Thu, 21 Nov 2024 03:08:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/reduced-fees-large-domestic-etf/</guid>
        <description>&lt;p&gt;華泰柏瑞滬深300 ETFなど、総合手数料を同類商品の中で最も低い水準に引き下げると発表しました。&lt;/p&gt;
&lt;p&gt;11月19日、華泰伯瑞基金は公告によると、より多くの投資家の投資および財務ニーズを満たすため、&lt;code&gt;11月22日から&lt;/code&gt;、華泰伯瑞沪深300 ETFおよびその連動ファンドの管理手数料率と托管手数料率を引き下げ、関連するファンド規約の内容を修正します。&lt;/p&gt;
&lt;p&gt;調整後、華泰柏瑞滬深300 ETFおよびその連動ファンドの年間運用報酬率は0.15%に、年間信託保管報酬率は0.05%に引き下げられ、いずれもインデックスファンドにおける最低水準の料率に変更されました。&lt;/p&gt;
&lt;p&gt;ほぼ同時に、業界をリードする華夏滬深300 ETF、華夏上証50 ETF、南方中証500 ETF、嘉実沪深300 ETF、易方達創業板ETFなども、管理費および托管費を引き下げたと発表し、手数料はそれぞれ0.15%と0.05%に引き下げられた。&lt;/p&gt;
&lt;p&gt;これまでの多数のETFとは異なり、今回の一回の費用引き下げは、市場内で規模優位性を持つ銘柄が積極的に動いたことによるものであり、その後の業界への影響は大きくなると考えられます。取引所データによると、11月18日現在、華泰柏瑞沪深300 ETFの規模は3700億元を超えており、現在の市場で最大の規模を誇るETFです。&lt;/p&gt;
&lt;p&gt;大規模なスーパーETFが率先して費用を下げたことは、投資家に譲歩する積極的な姿勢を示しており、投資家はより高いコストパフォーマンスで人気があり、流動性の高いファンドに投資できるようになる。&lt;/p&gt;
&lt;p&gt;業界の専門家の見解によれば、規模のメリットを持つETFがコストを削減することは、一方では、投資信託が幅広い層に金融サービスを提供し、より多くの投資家が保有コストを削減し、収益空間と投資効果を高めるのに役立つ。&lt;/p&gt;
&lt;p&gt;他方、低い手数料は製品自体の競争力をさらに高めることにもつながります。流動性の吸収効果とコスト運営の優位性を活かし、長期的な資金流入を呼び込み、「長資金・長期投資」という健全なエコシステムを構築できる可能性があります。&lt;/p&gt;
&lt;p&gt;近年、取引の柔軟性、高い透明性、強い流動性、低い投資門限などの独自の利点により、コアETFは資金が底値圏で市場に参入し、「長期保有」を行うための主要な手段となっています。&lt;/p&gt;
&lt;p&gt;今回の値下げは、ある程度の「触媒」となり、A株市場への長資金の流入をより円滑にする可能性がある。&lt;/p&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;筆者が予定している天弘基金の公告はまだ出ていませんが、追随するでしょう。更新されない場合は、他のファンドを検討する必要があります。&lt;/p&gt;
&lt;p&gt;旧の管理費：0.5%、運用報酬：0.1%。新管理費：0.15%、運用報酬：0.05%。この下げ幅は依然として大きい。&lt;/p&gt;</description>
        </item>
        <item>
        <title>三者寄付業者監督強化、「抖音株炒り」黒幕の勝利者、粛清か？</title>
        <link>https://ttf248.life/ja/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</link>
        <pubDate>Thu, 21 Nov 2024 02:59:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</guid>
        <description>&lt;p&gt;大ハンマーが落ちてくる。&lt;/p&gt;
&lt;p&gt;動画共有プラットフォームの追い風を受け、金融アドバイザリーサービスは高速車線に入りつつあるかもしれない。&lt;/p&gt;
&lt;p&gt;今年9月の下旬、A株市場が活況を呈した後、抖音の推奨株が各方面から注目を集めた。&lt;/p&gt;
&lt;p&gt;「大藍」などの财经系インフルエンサーが相次いで抖音（ドゥーイン）で人気を博し、間接的に資本市場に一定の変動をもたらした。&lt;/p&gt;
&lt;p&gt;しかし、次々と人気を集める経済ニュースキャスターの背後には、無視できない力がある。それは第三者機関投資顧問会社である。&lt;/p&gt;
&lt;p&gt;複数の第三者投資顧問サービス会社が、ショート動画プラットフォームで複数のアカウントを運営し、資金の流れを利用してユーザーに投資教育ビデオを見てもらい、その結果、関連する投資顧問商品の購入意欲を高めていると報じられている。&lt;/p&gt;
&lt;p&gt;さらに、ある第三者の投資顧問会社が今年の10月だけで10億元（約20億円）の収入を上げたという噂もあります。これは、今年の上半期の収入を上回るものです。&lt;/p&gt;
&lt;p&gt;しかし、「良い日々」はますます多くの変動に直面しつつあります。&lt;/p&gt;
&lt;p&gt;11月以降、複数の部署が相次いで文書を発表し、証券サービス機関に対し、ソーシャルメディアアカウントのコンプライアンス管理強化を求めている。&lt;/p&gt;
&lt;p&gt;11月15日夜、同花順（300033.SZ）は公告を発表し、子会社がライブ配信業務において個別銘柄の推奨をほのめかす行為があったため、証券監督管理局から処罰を受けたことを明らかにした。
規制強化のメッセージを市場に発信しているのかもしれません。
九方智投（9636.HK）などの第三者投資顧問サービス機関の展示活動も、より多くの圧力を受けかねない。&lt;/p&gt;
&lt;h2 id=&#34;厳重な監視下に置かれている&#34;&gt;厳重な監視下に置かれている
&lt;/h2&gt;&lt;p&gt;TikTokなどのショート動画プラットフォームの隆盛は、感情の発声を増幅させ、間接的に取引行動に影響を与えています。&lt;/p&gt;
&lt;p&gt;大量算数によると、取引額が最高を更新した9月27日から10月8日の期間中、抖音（Douyin）の株式に関するキーワード検索指数は423.84万から1277.86万へと急上昇し、2倍以上になりました。&lt;/p&gt;
&lt;p&gt;このような状況下、第三者顧問機関の「推波助瀾」とも言える行動が、規制当局の注目を集めている。&lt;/p&gt;
&lt;p&gt;証券取引業者によるライブ配信での個別株の推奨は、頻繁に規制違反行為となっています。&lt;/p&gt;
&lt;p&gt;11月8日、広東証券監督管理局は、ある会社のライブ配信において「個別株推奨をほのめかす」などの状況が見られたことに対し、新規顧客受け入れの一時停止という規制措置を行いました。&lt;/p&gt;
&lt;p&gt;11月14日夜、中国証券取引所および先物取引業協会は《ライブ配信の管理不足により、機関が業務停止処分》という文書を発表し、一部の証券相談資格を持つ機関がライブ配信による営業活動において、管理不足などの問題があり、かつライブ配信中に個別株を推奨する行為があったことを指摘した。&lt;/p&gt;
&lt;p&gt;ライブでの株式推奨行為を禁止する。ライブ配信は公共メディアの伝播に該当し、ライブ配信者は証券投資顧問として登録しているかどうかに関わらず、ライブ配信中に個別株を推奨してはならない。グアングドンスーケンシュウキヨウカ協会の指摘。&lt;/p&gt;
&lt;p&gt;これは特異な事例ではない。&lt;/p&gt;
&lt;p&gt;以前の11月7日、上海証券監督管理局が発表した罰金処分の中に、ソーシャルメディアプラットフォームで違法な株価推奨に関与していた事例も含まれていました。&lt;/p&gt;
&lt;p&gt;監督調査の結果、海順証券投資顧問有限公司上海支社の顧問員である王永が、WeChatビデオチャンネルで誤解を招く可能性のある動画コンテンツを公開しており、これは業界規範に違反する行為であることが判明しました。&lt;/p&gt;
&lt;p&gt;上海証券監督管理局はこれに対し、王永に対して警告書の発出という監督管理的措置をとった。&lt;/p&gt;
&lt;p&gt;報道によると、資格を持たない一部の投資顧問会社が、証券会社に「かかえ」ることで抖音（ドゥオイン）で株式を推奨していたところ、現在では配信停止となっています。&lt;/p&gt;
&lt;p&gt;業界に抖音でのライブ配信者がいるが、実際には証券会社の下で請負っており、そうすることで投資顧問資格を得て、オンラインのライブ配信で顧客を誘導し、オフラインで投資顧問の商品を販売している。」広東南部の投資顧問の専門家が信風（ID:TradeWind01）に対しこう語った。「しかし、後にライブ配信で株式を紹介したことが発覚し、配信停止となった。正規の証券会社では、投資教育のライブ配信ではセクター状況について言及するものの、個別株には触れない。」&lt;/p&gt;
&lt;p&gt;現在の規制当局は、ソーシャルメディア上での違法な株の推奨に対して高い関心を持っています。&lt;/p&gt;
&lt;p&gt;例えば、深証監局の通知によると、最近、業界内で一部の機関や個人がソーシャルメディアを利用して違法な推奨株などの違反行為を行っていることがあり、管轄区域内の証券投資相談機関のソーシャルメディア運営・管理をさらに規範化するため、各機関は自社のソーシャルメディア運営管理を強化する必要がある。&lt;/p&gt;
&lt;p&gt;これは、多数の第三者顧問サービス機関の事業展開にさらなる挑戦をもたらすかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;トラフィックビジネスは違法です&#34;&gt;トラフィックビジネスは違法です。
&lt;/h2&gt;&lt;p&gt;ショート動画に引き込まれて市場に入った投資家がお金を稼いだかどうかは定かではないが、「水を売る者」としての第三者顧問会社は、二次市場での価値を押し上げており、水面を上げるように利益を得ている。&lt;/p&gt;
&lt;p&gt;「オンライン教育の第一株」として、「九方智投（Jiǔfāng Zhītóu）」の時価総額は、今年9月初めの28億7800万元から11月13日の終値の124億6400万元に急上昇し、49取引日ですでに333.08%の上昇率を記録している。&lt;/p&gt;
&lt;p&gt;半年度報告によると、今年上半期に玖方智投は抖音（ドゥオイン）、小紅書（シャオホンシュー）などのソーシャルメディアプラットフォームでブランド露出を行い、今年6月末までに488のアカウントと0.46億のフォロワーを獲得した。&lt;/p&gt;
&lt;p&gt;例えば、玖方智投のチーフ・インベストメントアドバイザーである「洪幫主」は、抖音（ドウイン）でのフォロワー数が226万に達している。&lt;/p&gt;
&lt;p&gt;「当社はMCN運営に深く注力し、ユーザーを中心に据え、トラフィック、ブランド、そして製品の包括的な発展を協調的に推進しています。玖方智投によると、「ライブ配信やショートビデオなどの新メディアツールを深く融合させ、AI技術を活用することでファンネットワークを構築し、積極的にECモデルを探求することで、トラフィックの効率的な転換を実現します。」」&lt;/p&gt;
&lt;p&gt;九方智投の顧問コースパッケージは、数十元から十数万元まで、様々な価格帯をカバーしています。その中で最も高額なコースパッケージは「スーパー投資家」で、半年の価格は13.96万元/半年です。独占的な見解や顧問の特別サービスなどが含まれています。&lt;/p&gt;
&lt;p&gt;しかし、九方智投の投資顧問プロダクトの返金率は10％以上です。&lt;/p&gt;
&lt;p&gt;2024年上半期、玖方智投フラッグシップシリーズおよび玖方智投擒龍シリーズの返金率はそれぞれ14.7%、18.5%に達した。&lt;/p&gt;
&lt;p&gt;規制の嵐の中で、玖方智投の事業展開がどうなるかは、引き続き注視していく必要があります。&lt;/p&gt;
&lt;p&gt;最近、あるメディアが、玖方智投などの第三者顧問会社傘下の口座に影響が出ていると報じています。&lt;/p&gt;
&lt;p&gt;11月7日、あるメディアが「ホンバンチュウ」のライブ配信停止を報道した。&lt;/p&gt;
&lt;p&gt;しかし、11月15日の午後、シンフォン（ID：TradeWind01）が当該アカウントを検索したところ、「ホンバンチュウ」のライブ配信画面で依然として11月18日のライブ予約が可能であることが確認された。&lt;/p&gt;
&lt;p&gt;関係当局が玖方智投の調査に入ったとの市場の声も出ている。&lt;/p&gt;
&lt;p&gt;しかし、九方智投の関係者から信風（ID:TradeWind01）に、関連する検査は通常の検査であり、すでに終了したと伝えられている。&lt;/p&gt;
&lt;p&gt;これは、最近規制の嵐に巻き込まれたという噂がある唯一の会社ではありません。&lt;/p&gt;
&lt;p&gt;報道によると、東証に上場する同花順が違法な推奨株に関する捜査を受け、業務停止となる可能性があるとのことです。
これに対し、東証が11月15日に回答し、「不正な推奨株の状況はなく、調査機関による立件もされていない。」
しかしその日の夜、東証が同花順の傘下にある浙江同花順雲軟件有限公司は、ライブ配信事業のプロモーション過程におけるコンプライアンス管理が不十分であり、個株推奨を暗示する状況が存在していたため、浙江証券監督管理局から新規顧客の獲得を3ヶ月間停止するという処分を受けたと発表した。
その背景には、規制当局がTikTokライブなどのソーシャルメディアプラットフォーム上での推奨株に関する内容にますます注力していることが示唆されているのかもしれない。&lt;/p&gt;
&lt;p&gt;実際、ショート動画の市場も証券会社を引き付けていますが、コンプライアンス要件により、現状では証券会社はまだ慎重な姿勢を保っています。&lt;/p&gt;
&lt;p&gt;ある証券会社の関係者がトレードウィンド（ID：TradeWind01）に語ったところによると、同社はショート動画の運営や集客方法を模索しており、人員を派遣してショート動画プラットフォーム企業の学習も行っているが、コンプライアンス要件により、現時点では探索段階にあるとのことです。&lt;/p&gt;
&lt;p&gt;実際、規制のさまざまなコンプライアンス要件の背景には、ショート動画プラットフォームの内容が明らかに感情的な色合いを持っているという事実があり、投資はより市場参加者が冷静に扱う必要があるため、両者は本質的に対立している。&lt;/p&gt;
&lt;p&gt;もし感情の奔流が資本市場に影響を与えれば、市場の激しい変動を招きやすく、資本市場の長期的な健全な発展に反することになる。&lt;/p&gt;
&lt;p&gt;証券持牌機関がどのように短動画時代に積極的に対応していくべきか、規制に抵触することなく「レッドライン」を踏むことを避けるかは、関係者にとって難しい課題となっている。&lt;/p&gt;</description>
        </item>
        <item>
        <title>CentOS 8 Stream EOL</title>
        <link>https://ttf248.life/ja/p/centos-8-stream-eol/</link>
        <pubDate>Sat, 16 Nov 2024 23:24:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/centos-8-stream-eol/</guid>
        <description>&lt;p&gt;CentOS Streamは、Red Hat Enterprise Linuxのリリース前のアップストリームオープンソース開発プラットフォームです。
オープンソースオペレーティングシステムのライフサイクル[Red HatおよびCentOSのライフサイクル]({relref &amp;ldquo;/post/2020/07-redhat and centos life cycle&amp;rdquo;})&lt;/p&gt;
&lt;p&gt;期限切れです、何か問題がありますか？セキュリティの問題以外に、DNFが使えなくなりました。最近ツールをインストールしようとしたときにDNFが失敗し、ミラーソースを確認したところ、&lt;code&gt;CentOS 8 Stream&lt;/code&gt;の有効期限が切れていました。&lt;/p&gt;
&lt;h2 id=&#34;centos-streamのご紹介&#34;&gt;CentOS Streamのご紹介
&lt;/h2&gt;&lt;h3 id=&#34;位置付けと役割&#34;&gt;位置付けと役割
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、Fedora Linux（上流開発）とRHEL（Red Hat Enterprise Linux、下流開発）の間で橋渡し役を果たします。&lt;/p&gt;
&lt;p&gt;最新Red Hat Linuxの機能を試すためのバージョンと見なすことができ、最新技術を体験したいユーザーに適しています。&lt;/p&gt;
&lt;h3 id=&#34;誕生と背景&#34;&gt;誕生と背景
&lt;/h3&gt;&lt;p&gt;時が経つにつれて、Red Hat社は企業向けLinuxプラットフォームを成長させるためのより効果的な方法を模索し始め、CentOS Streamを発表しました。&lt;/p&gt;
&lt;p&gt;CentOS 8は2021年末にサポート終了となり、その代替としてCentOS Streamがアップデートされ続け、CentOSプロジェクトの将来的な方向性となっています。&lt;/p&gt;
&lt;h3 id=&#34;特徴と利点&#34;&gt;特徴と利点
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、より迅速なアップデートを提供するローリングリリース型のLinuxディストリビューションです。コミュニティ、パートナー、顧客の参加を促進し、高い透明性と機会を提供することで、ユーザーがRed Hat Enterprise Linuxに、より迅速かつ直接的に貢献できるようになります。&lt;/p&gt;
&lt;p&gt;CentOS Streamの内容は、Red Hatが次期安定版RHELに組み込むことを意図しているソフトウェアであり、コミュニティメンバーが開発およびテストのために安定したABI/APIを利用できるものです。&lt;/p&gt;
&lt;h3 id=&#34;利用シーンとターゲットユーザー&#34;&gt;利用シーンとターゲットユーザー
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、最新のLinux機能アップデートを継続的に受けたいCentOSユーザーや、Red Hat Enterprise Linuxの開発に貢献したい開発者およびパートナーに適しています。&lt;/p&gt;
&lt;p&gt;コミュニティのメンバー、Red Hat パートナー、およびその他の関係者が、より安定し予測可能な Linux エコシステムの中で革新的なオープンソースプログラムを最大限に活用できるよう支援することを目的としています。&lt;/p&gt;
&lt;h2 id=&#34;満了日&#34;&gt;満了日
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release&lt;/th&gt;
&lt;th&gt;Released&lt;/th&gt;
&lt;th&gt;Active Support&lt;/th&gt;
&lt;th&gt;Security Support&lt;/th&gt;
&lt;th&gt;Latest&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3 years ago (15 Sep 2021)&lt;/td&gt;
&lt;td&gt;Ends in 2 years and 6 months (31 May 2027)&lt;/td&gt;
&lt;td&gt;Ends in 2 years and 6 months (31 May 2027)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5 years ago (24 Sep 2019)&lt;/td&gt;
&lt;td&gt;Ended 5 months and 3 weeks ago (31 May 2024)&lt;/td&gt;
&lt;td&gt;Ended 5 months and 3 weeks ago (31 May 2024)&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;面倒なアップグレードの問題を避けるため、Ubuntu 24.04の長期サポートバージョンを選択しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hugoモジュールカスタムテーマ改修：アイデア解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-custom-theme-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-custom-theme-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を振り返ると、サイトは何度もテーマを変更してきた。たびにカスタムした変更があり、ここではその変更のアイデアを記録しておく。筆者のGitHubにもリポジトリがあり、一時的にEvenテーマをメンテナンスしていたが、強迫観念から最新版にHugoコンパイラをアップデートしようとした結果、Evenテーマとの互換性がなくなり、Stackテーマに戻した。&lt;/p&gt;
&lt;h2 id=&#34;ヒューゴのモジュール化&#34;&gt;ヒューゴのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化と聞くと、NginxのモジュールやIDEAプラグインなどが思い浮かぶかもしれません。通常は、いくつかのモジュールをアップロードすることで、私の差別化されたニーズを満たすことができます。皆がこのモジュールを好む主な理由は、十分に柔軟性があり、あまり労せずして自身のニーズを満たせるからです。なぜなら、多くの場合、全体としては似ていても、細部には差異があるからです。これもまた、ソフトウェアの複雑さを物語っており、技術的な複雑さだけでなく、ビジネス上の複雑さも存在します。ほとんどの場合、私たちはビジネス上の複雑さに直面します。これは、ソフトウェア分野における「隔行如隔山」という言葉の最も良い説明です。現在では、インターネット業界だけでなく、金融業界や伝統的な製造業に至るまで、情報化システムを利用して企業の生産と管理を支援しています。同じ休暇申請システムでも、同じ業界であっても、異なる会社ごとに差異が生じることがあります。&lt;/p&gt;
&lt;p&gt;そして、Hugoのモジュールは、皆さんが想像するような機能単位で多様なニーズを満たすものではなく、むしろディレクトリ構造を主とし、同じ構造を識別することに重点を置いています。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo 架构 — Hugo 的模块&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Git サブモジュール方式は引き続き利用可能ですが、本稿では推奨しません。テーマの更新が発生した場合、個別の Git リポジトリでテーマを管理する必要があり、メンテナンスが煩雑になります。&lt;/p&gt;
&lt;h2 id=&#34;テーマの変更ロジック&#34;&gt;テーマの変更ロジック
&lt;/h2&gt;&lt;p&gt;モジュール化の基礎概念を理解した上で、カスタムテーマを理解するのは非常に簡単になります。現在Hugoが提供しているテーマも、複数の異なるモジュールを組み合わせて作られており、もし特定のモジュールを変更したい場合は、対応するテンプレートファイルを特定して修正すれば良いのです。&lt;/p&gt;
&lt;p&gt;Stack公式ドキュメントからの抜粋です。&lt;/p&gt;
&lt;p&gt;Using this method, there won&amp;rsquo;t be any file under &lt;code&gt;themes&lt;/code&gt; directory. In order to modify the theme, you will have to copy the file you want to modify to the same directory under &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, in order to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you will have to copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copy the code from theme&amp;rsquo;s repository). The same applies to &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルを見つけるにはどうすればいいですか&#34;&gt;テンプレートファイルを見つけるにはどうすればいいですか。
&lt;/h2&gt;&lt;h3 id=&#34;正統な発想&#34;&gt;正統な発想
&lt;/h3&gt;&lt;p&gt;テーマのソースファイルを確認し、デザインの意図を理解した上で、対応するテンプレートファイルを修正すればよい。&lt;/p&gt;
&lt;h3 id=&#34;乱暴な考え方&#34;&gt;乱暴な考え方
&lt;/h3&gt;&lt;p&gt;私はフロントエンドコードに詳しくないので、時には乱暴な方法を取ることがあります。例えば、ブラウザで該当のページを開いて、変更したい場所を見つけ、「要素を検証」機能を使って&lt;code&gt;css name&lt;/code&gt;を特定し、テーマソースコード内で検索して、対応するファイルを見つけたら、それをサイトディレクトリにコピーして修正するというものです。&lt;/p&gt;
&lt;h2 id=&#34;ちょっとしたコツ&#34;&gt;ちょっとしたコツ
&lt;/h2&gt;&lt;p&gt;公式デフォルトでスタイルをカスタマイズするためのファイルが用意されており、変更が必要な箇所は複数のファイルに分割し、&lt;code&gt;custom.scss&lt;/code&gt;ファイルから他のファイルをインポートすることで、よりスタイルのファイルを整理して管理できます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hugo-module-custom-theme-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;変更点まとめ6h&#34;&gt;変更点まとめ(6h)
&lt;/h2&gt;&lt;p&gt;現在はすでに「AI」コーディングの元年であり、詳細についてはここでは割愛しますが、簡単な変更点としては、コピーボタンのスタイルの調整やコードブロックのスタイルの再設定などです。「ChatGPT」なら簡単に対応できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバルテキストスタイル。以前の &lt;code&gt;even&lt;/code&gt; と &lt;code&gt;info cn&lt;/code&gt; の表示スタイルを継承し、中国語に親和性がある。&lt;/li&gt;
&lt;li&gt;ホームページ：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;トップページ：記事に要約プレビューを追加しました（時間がかかりすぎるので、多少の裏手回りを経て実現しました）。&lt;/li&gt;
&lt;li&gt;スクロールバー：スタイルを少し修正しました。&lt;/li&gt;
&lt;li&gt;コードブロックに &lt;code&gt;highlight.js&lt;/code&gt; コードハイライトプラグインが導入され、コードブロックのスタイルが改善されました。&lt;/li&gt;
&lt;li&gt;一部内容は転載であり、新規に著作者情報表示と原文リンク表示を追加しました。&lt;/li&gt;
&lt;li&gt;アーカイブページ：上部のカテゴリ画像、テーマに付属するカラーオーバーレイを削除し、オリジナルの画像をそのまま表示します。&lt;/li&gt;
&lt;li&gt;アーカイブページ：年ごとの分類による統計表示パネルを追加しました。&lt;/li&gt;
&lt;li&gt;アーカイブページ：2列表示レイアウト&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スタックのテーマのコンポーネント再利用率が非常に高いため、ホームページの記事に概要プレビューを追加するのに時間がかかりました。対応するコンポーネントを変更した結果、記事の詳細ページも変更され、正文の内容が重複して表示されるようになりました。また、&lt;code&gt;golangテンプレート&lt;/code&gt;の構文にも詳しくなかったので、時間がかかりました。コンポーネント間のパラメータ伝送は最後までうまくいかず、最終的には裏技を使って、ホームページに個別の&lt;code&gt;JavaScript&lt;/code&gt;スクリプトを導入し、カスタム特殊変数を使用して概要プレビューを実現しました。&lt;/p&gt;
&lt;p&gt;コードの再利用率が時々高すぎると問題になることがあります。ある場所を変更すると、他の場所にも影響が出てしまうため、テーマを修正する際は、既存のロジックを壊さないように注意してください。&lt;/p&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;この男の人の修正はさらに完璧になりました：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;このサイトでは簡単な &lt;code&gt;Waline&lt;/code&gt; コメントシステムを導入しています。&lt;code&gt;stack&lt;/code&gt; テーマはデフォルトで &lt;code&gt;Waline&lt;/code&gt; をサポートしており、&lt;code&gt;config.toml&lt;/code&gt; で設定するだけで利用できます。&lt;/p&gt;
&lt;p&gt;推奨ページ、メールお問い合わせ。当サイトではコメント欄は開放しておりません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>県都のバラモン：小さな町の「大物」</title>
        <link>https://ttf248.life/ja/p/county-brahmins-big-shots-in-small-towns/</link>
        <pubDate>Wed, 13 Nov 2024 23:02:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/county-brahmins-big-shots-in-small-towns/</guid>
        <description>&lt;p&gt;最近抖音上的大冰老師がとても人気で、よく動画の切り抜きアカウントを見かける。ライブ配信の中の一部の内容だ。あるリスナーがデュエット中に「大冰老師、西安の家を売って故郷に帰って躺平（タンピン）したいのですが」と尋ねた。大冰老師は答えた。「あなたは今、三十代くらいで、躺平することはできないよ。あなたの親は年老いていく一方だし、子供はまだ自立していない。故郷に帰っても、小さな町の婆羅門（ブラマン）に対処する必要があるだろう」。&lt;/p&gt;
&lt;p&gt;議論の有無や正誤は別として、そもそも「バラモン」とはどういう意味の言葉なのでしょうか。&lt;/p&gt;
&lt;h1 id=&#34;県都のバラモン小さな町の大物&#34;&gt;県都のバラモン：小さな町の「大物」
&lt;/h1&gt;&lt;p&gt;多くの小さな県都市では、「郷土の婆羅門」と呼ばれる人々が話題になる。「婆羅門」という存在は、あたかもその土地社会を象徴するかのようだ。彼らは必ずしも真の宗教指導者ではないし、華やかな肩書きも持っていないことが多い。しかし、一見すると普通の人々に見えるが、実は重要な役割を果たしている。彼らは、その地方における「権力、地位、発言権」を代表し、ある階層の象徴となっている。&lt;/p&gt;
&lt;h2 id=&#34;県都のバラモンとは何ですか&#34;&gt;「県都のバラモン」とは何ですか？
&lt;/h2&gt;&lt;p&gt;まず、最初に「バラモン」という言葉が元々インドの社会階層の中で最も高い階級を指し、知恵、権威、そして精神的な至高性を表していたことを理解する必要があります。そして中国の県都市における「県都市バラモン」という言葉は、それほど複雑な宗教的背景を持つのではなく、むしろ一種の社会現象の比喩として用いられています。&lt;/p&gt;
&lt;p&gt;簡単に言うと、「県城婆羅門」とは、県内の教師、医師、地元の著名な商人、官僚など、いわゆる「文化権威」のことです。彼らの立場は一見すると平凡に見えますが、閉鎖的な環境である県内では、比較的高い社会的地位を享受しており、その意見や行動は無視できない影響力を持っています。&lt;/p&gt;
&lt;h2 id=&#34;誰が県都のバラモンなのか&#34;&gt;誰が「県都のバラモン」なのか？
&lt;/h2&gt;&lt;p&gt;県内では、ほとんど全ての業界にそのような「婆羅門」がいる。彼らは次のいずれかかもしれない：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;教育関係者：特に地方で数十年間教鞭を執ってきた先生方は、必ずしも有名大学の卒業生とは限りませんが、知識を通じていかに信頼を得るか熟知しており、広く尊敬を集めています。&lt;/li&gt;
&lt;li&gt;地方政府の職員：県庁の副県長や科級幹部など、彼らは一定の資源と権力を掌握しており、役職は低くとも、その権限範囲が限定されているため、地域社会における「バラモン」のような存在となり得る。&lt;/li&gt;
&lt;li&gt;地元の「実業家」：県都市の何人かの経営者で、規模は大きくなくても、一定の財産を握り、地域での発言権を持っている。おそらく一軒か二軒の地元で有名な小企業を経営し、県内ではかなりの影響力を持っている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの人々は、大都市の著名人や高級官僚と比べると地位は目覚ましいとは言えないが、郡都という小さな社会においては、「文化長老」や「権力の中枢」とほぼ同等の地位にある。&lt;/p&gt;
&lt;h2 id=&#34;郡の婆羅門ブラフミンの地位は社会にどのような影響を与えるのか&#34;&gt;郡の婆羅門（ブラフミン）の地位は、社会にどのような影響を与えるのか？
&lt;/h2&gt;&lt;p&gt;「県城婆羅門」の真の意味を理解するためには、県都の特殊な環境から考察する必要がある。「県都」では情報流通が都市ほど早くなく、社会階層の流動も比較的固定されている。この地における「婆羅門」たちは、長年地域に深く根ざし、名声、知識、人脈を蓄積した結果として現れることが多い。彼らは地域の政治、経済、文化など様々な側面に影響を与えている。&lt;/p&gt;
&lt;p&gt;文化的強い影響力：地方では、特に教育システムが十分に発達していなかったり、一般の人々にはあまり選択肢がない場合がある。地元の文化を代表する人々が、授業での知識の伝達、メディアの説明、さらには社交的な場での言行によって、静かにその地域の文化的な雰囲気を形作っている。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;社会資源の集中&lt;/strong&gt;：県都市の人口や資源が限られているため、これらの「バラモン」はしばしば地域資源の主な支配者の一人となる。「婆羅門」は、社会福祉、政策実施、あるいは特定のプロジェクトの承認において、その影響力を行使する。彼らの発言権と決定権により、地方社会に確固たる地位を築いている。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;人脈の網目構造：比較的閉鎖的な小さな社会において、人脈はしばしば極めて重要となる。「地方の婆羅門」たちは、強固な社会的ネットワークを構築することで情報伝達と資源配分を支配し、重要な瞬間に決定的な役割を果たしている。&lt;/p&gt;
&lt;h2 id=&#34;郡のバラモンに込められた隠喩&#34;&gt;郡のバラモンに込められた隠喩
&lt;/h2&gt;&lt;p&gt;「郷土の婆羅門」はしばしば尊敬と崇拝を集めるものの、そのような「高貴な立場」にも問題がないわけではない。現代社会において、「婆羅門」が真の能力や革新性を持たず、世襲関係や資源の独占によって地位を維持していることは珍しいことではない。情報化の進展に伴い、これらの「婆羅門」の権力は徐々に崩れつつあり、新たな社会流動性が小さな町の姿を変え始めている。&lt;/p&gt;
&lt;p&gt;全体的に見て、「県都のバラモン」は非常に興味深い社会現象であり、地方社会における権力と文化構造を反映しています。彼らの「権力」が国の統治を直接脅かすものではないとしても、地方においては間違いなく重要な人物です。情報流通が急速に進み、社会変化が加速するこの時代において、県都のこれらの「バラモン」たちは、かつてない課題に直面しているかもしれません。&lt;/p&gt;
&lt;h1 id=&#34;結論&#34;&gt;結論
&lt;/h1&gt;&lt;p&gt;元々この原稿が存在するはずじゃなかったんだけど、ただ「バラモン」って何だろうと気になって、誰か（kimi）に投げたら、これが結構面白い結果になったんだ。ウェブサイトでは検索結果が出たみたいだけど、すぐに「関連コンテンツを表示できません」ってなってしまって。それで、この言葉に何か特別な意味があるのかなと思って、ChatGPTに渡したら、こうして記事ができたというわけさ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Linuxバックエンドサービス、大量文字列データの処理が遅い</title>
        <link>https://ttf248.life/ja/p/linux-backend-slow-string-processing/</link>
        <pubDate>Wed, 13 Nov 2024 19:42:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-backend-slow-string-processing/</guid>
        <description>&lt;p&gt;C++開発の過去プロジェクトにおいて、独自のプロトコルを使用して通信しており、そのプロトコルは二次元配列の形式を採用していました。大量のデータを処理する際、プロトコル内で配列を走査し、シリアライズ操作によってログを生成する必要がありましたが、効率が悪かったため、高負荷時にシステムが顕著にカクつき、業務部門からシステムの動作不良に関するフィードバックがありました。&lt;/p&gt;
&lt;h2 id=&#34;問題特定&#34;&gt;問題特定
&lt;/h2&gt;&lt;p&gt;問題の調査 során、まずシステムのパフォーマンス分析を行い、大量のデータを処理する際に CPU 使用率が大幅に増加し、システム応答時間が長くなることを発見しました。システムのログを分析した結果、大量のシリアライズ操作があり、これらの操作は 2 次元配列の処理において効率が悪く、システムパフォーマンスの低下につながっていました。&lt;/p&gt;
&lt;p&gt;pstackツールでサービスの糸処理情報を取得したところ、ログスレッドの大部分の時間文字列の結合処理に費やされていることがわかった。&lt;/p&gt;
&lt;p&gt;今日の焦点は、異なる累積方法による効率の大きな違いです。過去のコードでは「+」演算子を使用しており、この方法は頻繁に一時オブジェクトを作成するため、非常に非効率的です。それが非効率的だと知っていても、どれほど非効率的なのかを理解していないようなものです。&lt;/p&gt;
&lt;h2 id=&#34;デモ検証&#34;&gt;デモ検証
&lt;/h2&gt;&lt;p&gt;プロジェクトコードに基づいて、業務ロジックを分離し、文字列結合の効率に関する検証のために簡単なデモを作成しました。&lt;code&gt;windows&lt;/code&gt; の &lt;code&gt;vs2022&lt;/code&gt; コンパイラ、&lt;code&gt;linux&lt;/code&gt; の &lt;code&gt;gcc8.5&lt;/code&gt; コンパイラで、&lt;code&gt;Release&lt;/code&gt; モードでコンパイル・実行し、効率を比較します。&lt;/p&gt;
&lt;h3 id=&#34;重要なポイント説明&#34;&gt;重要なポイント説明
&lt;/h3&gt;&lt;p&gt;プロジェクトでは手法4を使用しており、テストデータを入手する前に、読者はどの方法が最も効率的か、またどの方法が最も非効率かを考えてみることができます。結果を見たときには、やはり驚きました。&lt;/p&gt;
&lt;p&gt;方法 1（&lt;code&gt;+=&lt;/code&gt; 連結）：各フィールドを &lt;code&gt;+=&lt;/code&gt; を使って文字列に連結します。
方法 2 ( &lt;code&gt;std::ostringstream&lt;/code&gt; による結合) ：ストリーム (&lt;code&gt;std::ostringstream&lt;/code&gt;) を用いて各フィールドを結合する方法です。この方法は特に、大量のデータを結合する場合に効率的です。
方法3（事前にメモリを割り当てた&lt;code&gt;+=&lt;/code&gt;連結）：&lt;code&gt;reserve&lt;/code&gt;を使って文字列に十分なメモリを事前に割り当てることで、メモリの再割り当てにかかるコストを削減し、パフォーマンスが向上します。
方法 4 ( &lt;code&gt;bodys = bodys + body + &amp;quot;\n&amp;quot;&lt;/code&gt; ) : 毎回新しい一時的な文字列オブジェクトを作成するため、パフォーマンスが低下します。特に大規模な結合の場合、結合ごとに新しいメモリ割り当てとコピーが発生するためです。&lt;/p&gt;
&lt;p&gt;参照結果を見ると、プロジェクトは効率が最も悪い方法が選択されたようです。&lt;/p&gt;
&lt;p&gt;さらに踏み込んで、各プラットフォームのコンパイラ最適化効率を分析してみましょう。MicrosoftのVisual Studioは相変わらず優れており、文字列の最適化効率は非常に高いですが、GCCコンパイラはその点では少し劣ります。&lt;/p&gt;
&lt;p&gt;コードを異なる機械で実行すると、2つのデータには直接的な比較の意味がないため、それぞれの結合方法間の差異を別々に比較できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;windows 平台下的 vs2022 编译器

----------------------------------------
Data Generation Time: 0.054 seconds.
----------------------------------------

----------------------------------------
Data Merging Performance:
----------------------------------------
+ Data merging (+=) took: 0.053 seconds.
+ ostringstream Data merging took: 0.054 seconds.
+ Pre-reserved Data merging took: 0.045 seconds.
+ Data merging (bodys = bodys + body + &amp;quot;\n&amp;quot;) took: 16.108 seconds.

----------------------------------------
Data Merging Complete.
----------------------------------------

Program finished.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;linux 平台下的 gcc8.5 编译器
----------------------------------------
Data Generation Time: 0.108 seconds.
----------------------------------------

----------------------------------------
Data Merging Performance:
----------------------------------------
+ Data merging (+=) took: 0.100 seconds.
+ ostringstream Data merging took: 0.083 seconds.
+ Pre-reserved Data merging took: 0.057 seconds.
+ Data merging (bodys = bodys + body + &amp;quot;\n&amp;quot;) took: 29.298 seconds.

----------------------------------------
Data Merging Complete.
----------------------------------------

Program finished.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完全コード&#34;&gt;完全コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;random&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

typedef std::vector&amp;lt;std::string&amp;gt; DataRow;
typedef std::vector&amp;lt;DataRow&amp;gt; DataGroup;

struct ResponsePackage
{
    std::string ErrorInfo;
    DataRow Head;
    std::string ClientId;
    std::string UUID;
    std::string MsgID;
    std::string SessionID;
    std::string ExtraInfo1;
    std::string ExtraInfo2;
    DataGroup DataBody;
};

// Generate specified length of random string
std::string generateRandomString(size_t length)
{
    const char charset[] = &amp;quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;quot;;
    const size_t max_index = sizeof(charset) - 1;
    std::string random_string;
    random_string.reserve(length);

    std::random_device rd;
    std::mt19937 generator(rd());
    std::uniform_int_distribution&amp;lt;&amp;gt; distribution(0, max_index);

    for (size_t i = 0; i &amp;lt; length; ++i)
    {
        random_string += charset[distribution(generator)];
    }

    return random_string;
}

void create_large_string()
{
    // Example request package with 50 fields
    ResponsePackage requestPackage;

    requestPackage.Head = {
        &amp;quot;Field1&amp;quot;, &amp;quot;Field2&amp;quot;, &amp;quot;Field3&amp;quot;, &amp;quot;Field4&amp;quot;, &amp;quot;Field5&amp;quot;,
        &amp;quot;Field6&amp;quot;, &amp;quot;Field7&amp;quot;, &amp;quot;Field8&amp;quot;, &amp;quot;Field9&amp;quot;, &amp;quot;Field10&amp;quot;,
        &amp;quot;Field11&amp;quot;, &amp;quot;Field12&amp;quot;, &amp;quot;Field13&amp;quot;, &amp;quot;Field14&amp;quot;, &amp;quot;Field15&amp;quot;,
        &amp;quot;Field16&amp;quot;, &amp;quot;Field17&amp;quot;, &amp;quot;Field18&amp;quot;, &amp;quot;Field19&amp;quot;, &amp;quot;Field20&amp;quot;,
        &amp;quot;Field21&amp;quot;, &amp;quot;Field22&amp;quot;, &amp;quot;Field23&amp;quot;, &amp;quot;Field24&amp;quot;, &amp;quot;Field25&amp;quot;,
        &amp;quot;Field26&amp;quot;, &amp;quot;Field27&amp;quot;, &amp;quot;Field28&amp;quot;, &amp;quot;Field29&amp;quot;, &amp;quot;Field30&amp;quot;,
        &amp;quot;Field31&amp;quot;, &amp;quot;Field32&amp;quot;, &amp;quot;Field33&amp;quot;, &amp;quot;Field34&amp;quot;, &amp;quot;Field35&amp;quot;,
        &amp;quot;Field36&amp;quot;, &amp;quot;Field37&amp;quot;, &amp;quot;Field38&amp;quot;, &amp;quot;Field39&amp;quot;, &amp;quot;Field40&amp;quot;,
        &amp;quot;Field41&amp;quot;, &amp;quot;Field42&amp;quot;, &amp;quot;Field43&amp;quot;, &amp;quot;Field44&amp;quot;, &amp;quot;Field45&amp;quot;,
        &amp;quot;Field46&amp;quot;, &amp;quot;Field47&amp;quot;, &amp;quot;Field48&amp;quot;, &amp;quot;Field49&amp;quot;, &amp;quot;Field50&amp;quot;
    };

    requestPackage.ClientId = &amp;quot;ClientID&amp;quot;;
    requestPackage.UUID = &amp;quot;UUID&amp;quot;;
    requestPackage.MsgID = &amp;quot;MsgID&amp;quot;;
    requestPackage.SessionID = &amp;quot;SessionID&amp;quot;;
    requestPackage.ExtraInfo1 = &amp;quot;ExtraInfo1&amp;quot;;
    requestPackage.ExtraInfo2 = &amp;quot;ExtraInfo2&amp;quot;;

    // Start timing for data generation
    auto start_gen = std::chrono::high_resolution_clock::now();

    // Generate 10,000 rows of data, each with 50 fields
    for (size_t i = 0; i &amp;lt; 10000; ++i)
    {
        DataRow dataRow(50, &amp;quot;This is a test string&amp;quot;);
        requestPackage.DataBody.push_back(dataRow);
    }

    // End timing for data generation
    auto end_gen = std::chrono::high_resolution_clock::now();
    std::chrono::duration&amp;lt;double&amp;gt; duration_gen = end_gen - start_gen;

    // Display result generation time
    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Generation Time: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_gen.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;

    // Data merging using different methods
    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Performance:\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;

    {
        // Method 1: Using &#39;+=&#39; string concatenation
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys(&amp;quot;&amp;quot;);
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            for (auto&amp;amp; item : vec)
            {
                body += item + &amp;quot; &amp;quot;;
            }
            bodys += body + &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Data merging (+=) took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 2: Using ostringstream
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::ostringstream bodys;
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::ostringstream body;
            body &amp;lt;&amp;lt; &amp;quot;This is a test string&amp;quot;;
            for (auto&amp;amp; item : vec)
            {
                body &amp;lt;&amp;lt; item &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
            }
            bodys &amp;lt;&amp;lt; body.str() &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ ostringstream Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 3: Pre-allocated memory
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys;
        bodys.reserve(1000 * 50 * 20); // Pre-allocate enough memory
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            body.reserve(50 * 20); // Pre-allocate memory for each row
            for (auto&amp;amp; item : vec)
            {
                body += item + &amp;quot; &amp;quot;;
            }
            bodys += body + &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Pre-reserved Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 4: Using &#39;bodys = bodys + body + &amp;quot;\n&amp;quot;&#39;
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys(&amp;quot;&amp;quot;);
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            for (auto&amp;amp; item : vec)
            {
                body = body + item + &amp;quot; &amp;quot;; // Note the use of &#39;body = body + item&#39;
            }
            bodys = bodys + body + &amp;quot;\n&amp;quot;; // Again, using &#39;bodys = bodys + body&#39;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Data merging (bodys = bodys + body + \&amp;quot;\\n\&amp;quot;) took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Complete.\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;
}

int main()
{
    try
    {
        create_large_string();
    }
    catch (const std::exception&amp;amp; e)
    {
        std::cerr &amp;lt;&amp;lt; &amp;quot;Caught exception: &amp;quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\nProgram finished.\n&amp;quot;;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43;ラムダ式パラメータのライフサイクル</title>
        <link>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</link>
        <pubDate>Wed, 13 Nov 2024 19:23:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</guid>
        <description>&lt;p&gt;C++において、ラムダ式は便利な匿名関数であり、外部変数をキャプチャしてその内部で使用できます。これにより、ラムダ式は柔軟なプログラミングツールとなります。ただし、ラムダ式のパラメータのライフサイクルは特に注意すべき点であり、特にキャプチャおよびパラメータの伝送時にはそうです。&lt;/p&gt;
&lt;h3 id=&#34;ラムダ式のパラメータのライフサイクル&#34;&gt;ラムダ式のパラメータのライフサイクル
&lt;/h3&gt;&lt;p&gt;ラムダ式のパラメータの寿命は、通常、他のC++関数と同様です。関数のパラメータは、関数呼び出し中に存在し、関数呼び出しが終了すると、パラメータの寿命は終了します。しかしながら、ラムダ式が外部変数にキャプチャする場合、パラメータの寿命はキャプチャ方法の影響も受けます。&lt;/p&gt;
&lt;h3 id=&#34;キャプチャとパラメータのライフサイクルとの関係&#34;&gt;キャプチャとパラメータのライフサイクルとの関係
&lt;/h3&gt;&lt;h4 id=&#34;21-外部変数の捕捉&#34;&gt;2.1 外部変数の捕捉
&lt;/h4&gt;&lt;p&gt;C++のラムダ式は、外部変数を2つの方法でキャプチャできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;値キャプチャ：値キャプチャによって、外部変数の値がラムダ関数内にコピーされ、そのコピーのライフサイクルはラムダ関数のライフサイクルによって制御されます。&lt;/li&gt;
&lt;li&gt;参照獲得：参照獲得により、外部変数の参照は保持され、ラムダ内の参照は元の外部変数を示し、寿命はその外部変数に依存します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda_by_value = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // 捕获x的副本
auto lambda_by_reference = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // 捕获x的引用

lambda_by_value();  // 打印10
lambda_by_reference();  // 打印10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;捕捉された変数のライフサイクルは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;値によるキャプチャ：キャプチャされたとき、外部変数の値がラムダにコピーされます。そして、ラムダのライフサイクルが終わると、そのコピーが破棄されます。&lt;/li&gt;
&lt;li&gt;参照によるキャプチャ：ラムダが外部変数への参照を持つ場合、&lt;strong&gt;外部変数はラムダの使用前に有効である必要があり、そうでないと未定義の動作が発生する可能性がある&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ラムダパラメータ&#34;&gt;ラムダパラメータ
&lt;/h4&gt;&lt;p&gt;ラムダのパラメータは通常の関数パラメータと同様で、そのライフサイクルはラムダ関数内に限定されます。つまり、ラムダパラメータはラムダ呼び出し時に作成され、ラムダ呼び出しが終了すると、パラメータのライフサイクルも終了します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto lambda = [](int a, int b) {
    std::cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; std::endl;
};
lambda(5, 10);  // a和b在这里是lambda的参数
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; はラムダ式のパラメータであり、ラムダ式の呼び出し時に作成され、実行終了後に破棄されます。&lt;/p&gt;
&lt;h3 id=&#34;キャプチャした外部変数のライフサイクルに関する問題&#34;&gt;キャプチャした外部変数のライフサイクルに関する問題
&lt;/h3&gt;&lt;h4 id=&#34;キャプチャされた変数はラムダ関数外で有効に利用できるか&#34;&gt;キャプチャされた変数は、ラムダ関数外で有効に利用できるか。
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;値によるキャプチャ：ラムダ呼び出し後に外部変数が破棄されても、ラムダ内部は外部変数のコピーを保持します。したがって、外部変数はもう存在しなくても、ラムダ内部のコピーは安全に使用できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x 在lambda调用后修改
lambda();  // 打印10，捕获的是x的副本
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;参照によるキャプチャ：ラムダが外部変数の参照をキャプチャする場合、ラムダ内部でのその参照へのアクセスは外部変数のライフサイクルに依存します。外部変数がラムダの実行前に破棄されると、ハングリング参照の問題が発生し、未定義の動作につながる可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x 在lambda调用前修改
lambda();  // 打印20，捕获的是x的引用
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ラムダの実行順序が確定しない場合、ラムダが実行される際にキャプチャされた外部変数が有効であることを保証することが非常に重要です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Win11 Logitech G431 ヘッドホン ドライバーのインストール</title>
        <link>https://ttf248.life/ja/p/win11-logitech-g431-headphone-driver-installation/</link>
        <pubDate>Wed, 05 Jun 2024 07:20:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/win11-logitech-g431-headphone-driver-installation/</guid>
        <description>&lt;p&gt;続きは前回の話、戻ってみたらGhubがアップデートされているので少し嬉しい。カスタマーサポートで報告されていた問題駆動が正常にロードできない問題は解決したとのことだったのだが、色々試してインストールとアンインストールを繰り返しても、やはり正常に使えない。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;引き続きカスタマーサポートに連絡して対応方法を確認しましたが、エンジニアによるリモートサポートが可能であるという回答でした。しかし、エンジニアの勤務時間と私の勤務時間が完全に同じで、結局諦めるしかありませんでした。以前の問題切り分けのために残しておいた資料を調べ、手動でのドライバーインストールを試みることにしました。&lt;/p&gt;
&lt;h2 id=&#34;ドライバーのインストールパッケージを取得する&#34;&gt;ドライバーのインストールパッケージを取得する
&lt;/h2&gt;&lt;p&gt;ロジクール公式では個別のデバイスのドライバインストールパッケージは提供していません。どうすればドライバファイルを入手できますか？&lt;/p&gt;
&lt;p&gt;前回のリインストール時に残ったシステムイメージのインストールパッケージを利用して、ローカル仮想マシンで再度システムをリインストールできます。完全にクリーンな状態になったシステムに、個別にGhubをデプロイし、ヘッドホンデバイスを仮想マシンに介入させます。すると、ドライバーのパスを見つけてコピーアウトすれば良いのです。&lt;/p&gt;
&lt;p&gt;関連パス：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\ProgramData\LGHUB&lt;/li&gt;
&lt;li&gt;C:\Windows\System32\DriverStore\FileRepository\logi_audio.inf_amd64_010b035044e24be4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;デバイスマネージャー&#34;&gt;デバイスマネージャー
&lt;/h2&gt;&lt;p&gt;重点は、2つ目のパスをどうやって見つけるかだ。まず、Win11システムで手動でドライバーファイルを管理する方法について簡単に整理しよう。この内容は、&lt;strong&gt;制御変数法を使って識別する。仮想マシンの中で、デバイスの抜き差しを繰り返し、デバイスマネージャーのデバイス情報を分析することで、ヘッドホンに関して3つのドライバーを処理する必要があることが判明した&lt;/strong&gt;。そのうち2つはシステムに付属しているものであり、1つだけがロジテック製だ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ドライバーマネージャー&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上記の画像中の2番目のドライバは、ロジクール製です。現在インストールされているデバイスのドライバを分析し、仮想マシン内で全てのドライバパスを探します。まずlogiで始まるファイルを見つけ、ファイルの比較を行うことで、ドライバファイルを特定できます。フォルダ全体をコピーすれば、ドライバインストーラパッケージを入手したことになります。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ドライバーインストールパッケージ&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ドライバーをインストールする&#34;&gt;ドライバーをインストールする
&lt;/h2&gt;&lt;p&gt;デバイスマネージャーの画面で、ドライバーの更新をクリックし、「私のコンピューターを検索してドライバーを見つける」をクリックすると、次のような画面になります。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ドライバーインストール&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;もちろん、開くと普通のUSBドライバとしてしか見えますが、それが通常のUSBドライバです。ディスクからインストールを選択し、パスは先ほどコピーしたフォルダを指定してください。インストール後、プルダウンメニューにロジテック独自のドライバが表示されるので、デバイスドライバを新しくインストールされたドライバに切り替えてください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ディスクインストール&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;人体の機器駆動&#34;&gt;人体の機器駆動
&lt;/h2&gt;&lt;p&gt;このデバイスのドライバファイルはすべてシステムが提供するものなので、デバイスドライバの前に感嘆符が存在するかどうかを確認するだけです。もし感嘆符があれば、ドライバ選択画面に入り、他のタイプのドライバに任意で切り替えた後、元のドライバに戻せば正常に戻ります。&lt;/p&gt;
&lt;h2 id=&#34;完了&#34;&gt;完了
&lt;/h2&gt;&lt;p&gt;ヘッドホンのマイクの音量が正常に戻り、おなじみのイアホンモニター機能も復活しました。&lt;/p&gt;
&lt;p&gt;サイドサウンド&lt;/p&gt;</description>
        </item>
        <item>
        <title>ロジクールヘッドホン ドライバのインストールに失敗</title>
        <link>https://ttf248.life/ja/p/logitech-headset-driver-installation-failed/</link>
        <pubDate>Fri, 31 May 2024 21:46:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/logitech-headset-driver-installation-failed/</guid>
        <description>&lt;p&gt;もしこれらのことについて全く理解できないなら、最初から公式のカスタマーサポートに連絡していれば、こんなにも時間を費やすことはなかったでしょう。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headset-driver-installation-failed/20240531220709.png&#34;
	width=&#34;693&#34;
	height=&#34;489&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GHUB&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最近、自宅のPC開発用のCドライブの容量が足りなくなったので、特別に256GBの半退役SSDを取り出してCドライブ用に使うことにしたのだが、しょっちゅう色々やらかしてしまっている。上海へ引っ越してからずっと様々な用事で忙しかったのだが、ようやく先週、時間を作ってOSを再インストールした。&lt;/p&gt;
&lt;p&gt;システムのリセットは順調に進み、普段使うソフトウェアのインストールや開発環境の構築にも問題がありませんでした。数日後、リラックスするためにゲームをしようとした時、マウスとヘッドセットのドライバがまだインストールされていないことに気づきました。これらのデバイスはどちらもロジクール製なので、GHUBというソフトウェアをダウンロードして、ハードウェアを自動的に認識し、ドライバをインストールしました。&lt;/p&gt;
&lt;p&gt;しかし、予期せぬことが起こった。マウスのドライバーは問題なくインストールされたが、ヘッドセットのドライバーは「読み込み中」の状態が続いた。最新版のWindows 11システムとロジクスのドライバーが互換性がないことが原因でインストールに失敗したのではないかと疑っている。そこで、資料を探し、手動でドライバーをインストールしようとしたが、問題は解決しなかった。&lt;/p&gt;
&lt;p&gt;これらのデバイスのドライバは、それぞれどのような役割を果たしているのか簡単に説明します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マウスのドライバは主に、マウスの移動速度などの機能を調整するために使用されます。マクロ機能はほとんど使いませんが、以前に記憶されたパラメータを復元するだけで十分です。&lt;/li&gt;
&lt;li&gt;ヘッドホンのドライバは主にモニター機能に使われ、チームボイスチャットで非常に役立つ。自分の声をモニタリングできるからだ。システムのマイク設定にも同様の機能はあるが、ドライバによる実装の方が効果が良い。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何度か試行錯誤しても、イヤホンのドライバーが正常に読み込まれない。今日、ようやくカスタマーサポートに問い合わせて状況を確認してみることにしたところ、最近サーバーに問題があり、その結果、ドライバーのダウンロードが異常になっているとのことだった。現在対応中であり、次回アップデートで問題が解決する見込みだと言われた。&lt;/p&gt;
&lt;p&gt;まだヘッドホンのドライバの問題を解決できていませんが、少なくとも原因はわかりました。早く問題が解決することを願っています。&lt;/p&gt;
&lt;h2 id=&#34;マウスドライバー設定&#34;&gt;マウスドライバー設定
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headset-driver-installation-failed/20240531220930.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headset-driver-installation-failed/20240531220903.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>不動産支援と中央銀行が相次いで4つの措置を発表</title>
        <link>https://ttf248.life/ja/p/promote-real-estate-central-bank-four-measures/</link>
        <pubDate>Fri, 17 May 2024 20:42:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/promote-real-estate-central-bank-four-measures/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;住宅ローン金利上限撤廃&lt;/li&gt;
&lt;li&gt;明日、預貯金利率を0.25%引き下げます。&lt;/li&gt;
&lt;li&gt;頭金と初期費用の割合が15％に引き下げられました。&lt;/li&gt;
&lt;li&gt;3,000億元の中間搾取融資&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;住宅ローン金利の抑制に関する政策初の住宅購入者と2番目以降の住宅購入者の区分なく全国レベルで撤廃される&#34;&gt;住宅ローン金利の抑制に関する政策、初の住宅購入者と2番目以降の住宅購入者の区分なく、全国レベルで撤廃される。
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省、自治区、直轄市及び計画単列市支店；各国有商業銀行、中国郵貯銀行、各股份制商業銀行：&lt;/p&gt;
&lt;p&gt;党中央および国務院の決定に基づき、わが国の不動産市場における需給関係の変化と、質の高い住宅に対する国民の新たな期待に対応し、不動産市場の安定的な健全な発展を促進するため、下記の通り、商業用個人住宅ローン金利政策の調整に関する事項について通知する。&lt;/p&gt;
&lt;p&gt;一、住宅ローン金利の抑制措置を全国レベルで撤廃する。&lt;/p&gt;
&lt;p&gt;中国人民銀行各地方支行は、市を考慮した政策原則に基づき、各地方市場イコールプライシング自己規律メカニズムに対し、管轄区域内の各都市の不動産市場の状況と地方政府の統制要請に応じて、管轄区域内の各都市の住宅ローン金利の下限及びその水準（設定する場合）を自主的に決定する。&lt;/p&gt;
&lt;p&gt;銀行及び金融機関は、各地方の市場金利設定自主規制メカニズムによって決定された金利の下限（もしあれば）に基づき、当機関の経営状況、顧客のリスク状況等の要素を考慮して、各融資の具体的な金利水準を合理的に決定しなければならない。&lt;/p&gt;
&lt;h2 id=&#34;住宅ローンにおける個人向け貸付金利を025パーセント引き下げ&#34;&gt;住宅ローンにおける個人向け貸付金利を0.25パーセント引き下げ
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省、自治区、直轄市及び計画単列市支店；各政策金融機関、国有商業銀行、中国郵貯銀行、各股份制商業銀行：&lt;/p&gt;
&lt;p&gt;中国人民银行决定，自2024年5月18日起，下调个人住房公积金贷款利率0.25个百分点，5年以下（含5年）和5年以上首套个人住房公积金贷款利率分别调整为2.35%和2.85%，5年以下（含5年）和5年以上第二套个人住房公积金贷款利率分别调整为不低于2.775%和3.325%。 中国人民銀行は、2024年5月18日より、個人住宅用積立金ローン金利を0.25パーセントポイント引き下げ、5年以下（5年を含む）および5年超の新規住宅用積立金ローンの金利をそれぞれ2.35%と2.85%、5年以下（5年を含む）および5年超の2回目以降の住宅用積立金ローンの金利を、それぞれ2.775%未満、3.325%未満に調整することを決定しました。&lt;/p&gt;
&lt;h2 id=&#34;頭金の割合は15以下に引き下げられます&#34;&gt;頭金の割合は15％以下に引き下げられます。
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省、自治区、直轄市及び計画単列市支店；国家金融監督管理局各監督局；各国有商業銀行、中国郵貯銀行、各股份制商業銀行：&lt;/p&gt;
&lt;p&gt;党中央および国務院の決定に基づき、わが国の不動産市場における需給関係の変化と、質の高い住宅に対する国民の新たな期待に対応し、不動産市場の安定的な健全な発展を促進するため、下記の通り住宅ローンに関する方針についてお知らせします。&lt;/p&gt;
&lt;p&gt;住宅用融資の購入を目的とした個人宅地における住宅ローンについて、初めての住宅購入の場合は自己資金の最低割合が15%以下に引き下げられ、2つ目の住宅購入の場合は25%以下に引き下げられます。&lt;/p&gt;
&lt;p&gt;この基準に基づき、中国人民銀行各地方分行、国家金融監督管理総局各派出機構は、都市政府の調整要求に応じ、市ごとの状況に応じて、地域内の住宅ローンにおける初めての住宅購入者および2番目の住宅購入者のための最低頭金割合の下限を自主的に決定する。&lt;/p&gt;
&lt;h2 id=&#34;中央銀行が3000億元規模の住宅ローン保証再融資枠を設定する&#34;&gt;中央銀行が3000億元規模の住宅ローン保証再融資枠を設定する
&lt;/h2&gt;&lt;p&gt;午後４時、住宅都市建設部、自然資源部、中国人民銀行、国家金融監督管理局の４部門が国務院政策定例ブリーフィングに集まり、不動産デリバリーを確実に実施するための関連政策に関する状況について説明した。&lt;/p&gt;
&lt;p&gt;会上、中国人民銀行副行長・陶玲は、中央銀行が3000億元の人民幣の住宅ローン保証基金を設置し、地方国営企業が合理的な価格で既に建設されている未販売の新築住宅を取得し、それらを組み合わせた住宅や賃貸住宅として利用することを支援すると発表しました。これにより、5000億元の銀行融資が見込まれます。&lt;/p&gt;
&lt;p&gt;中央銀行によると、保障住居再融資の期間は1年間で4回まで延長でき、金利は1.75％です。これは21家もの全国的な銀行を対象としており、銀行に対し、地方政府が選定した地方国有企業に融資を行い、既に建設され未販売の商品住宅を購入して保障住居として活用することを奨励します。購入される商品住宅は、不動産企業の已建設で未販売の商品住宅に厳格に限定されます。&lt;/p&gt;
&lt;p&gt;この方針について、近日、中央銀行が「保障住居再融資に関する通知」を発表する予定です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>銀行マーケティング戦略と個人財務管理の調和の技</title>
        <link>https://ttf248.life/ja/p/bank-marketing-personal-finance-balance/</link>
        <pubDate>Sun, 31 Mar 2024 01:33:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bank-marketing-personal-finance-balance/</guid>
        <description>&lt;p&gt;最近、家のリフォーム工事で日常の支出が急増しています。普段からクレジットカードを利用していますが、請求サイクル内であれば返済できています。手元には十分な現金もありますが、よりはむしろ、追加の利息収入を得るためにマネーファンドに預けておきたいと考えています。同時に、財務の安定を確保するために、期日までにクレジットカードの請求書を確実に返済できるよう、自動引き落とし機能を設定しています。&lt;/p&gt;
&lt;h2 id=&#34;銀行現状預金が増加し貸出が減少している&#34;&gt;銀行現状：預金が増加し、貸出が減少している。
&lt;/h2&gt;&lt;p&gt;経済の不確実性が高まる中で、人々は貯蓄を好み、消費や投資には向いていません。これにより銀行の預金量は増加しますが、同時に銀行は預金者に多額の利息を支払う必要が生じます。一方、消費と投資活動の減少により、融資需要が低下し、銀行は融資を通じて利息収入を得ることが難しくなります。&lt;/p&gt;
&lt;p&gt;顧客の獲得と維持のため、銀行はより競争力のある預金金利を提供せざるを得ず、これが銀行の金利差をさらに狭めています。同時に、経済成長と消費を刺激するため、中央銀行は政策金利を引き下げる可能性がありますが、これも銀行の貸出金利に影響を与え、結果として銀行の収益性を損なうことになります。&lt;/p&gt;
&lt;h2 id=&#34;銀行マーケティング戦略ユーザー習慣の育成&#34;&gt;銀行マーケティング戦略：ユーザー習慣の育成
&lt;/h2&gt;&lt;p&gt;最近、返済日が近づいてきました。まず、中国工商銀行から連絡があり、無金利の1年間の分割払いサービスが提供されました。それに続いて、中国招商銀行も2.5割引の分割払いの利息を提供し、年換算すると金利はわずか1.9%です。このような特典に直面し、私は両行の分割払いサービスを利用することを選択しました。&lt;/p&gt;
&lt;p&gt;私は銀行がユーザーの習慣を育むために、本当に惜しみなく投資していることに気づいた。銀行の定義に従えば、私は銀行の優良顧客に該当するはずだ。現在の銀行の融資難という状況を踏まえると、私の分割払いの意識を養うことで、銀行は将来私が資金繰りに苦しむ可能性のある状況に備えていると言えるだろう。その時、彼らは私からより多くの利息収入を得ることができるのだ。結局のところ、クレジットカード明細分析の金利は決して低いわけではない。&lt;/p&gt;
&lt;p&gt;銀行は、無利息分割払いサービスや低金利の分割払い特典を提供することで、クレジットカードの使用頻度と利用限度額を増やしただけでなく、顧客にポジティブなイメージを植え付けました。この戦略転換は、市場の変化への迅速な対応と、顧客ニーズに対する深い理解を示しています。このような方法により、銀行は資金貸付の難しさを解決するだけでなく、将来の収益基盤を築いています。&lt;strong&gt;利益を上げることは短期的なものではなく、長期的な視点を持つことが重要です。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;個人の財務管理の重要性&#34;&gt;個人の財務管理の重要性
&lt;/h2&gt;&lt;p&gt;銀行の分割払い特典は魅力的に聞こえるかもしれませんが、ユーザーとしては過度なクレジットカード分割払いに頼ることのリスクを認識する必要があります。自身の返済能力と将来の資金ニーズを十分に考慮し、短期的な財政的な利便性によって長期的な債務問題に陥らないようにすべきです。個人金融管理の鍵は、現在のニーズと将来の計画とのバランスをとることです。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;お支払い分割払い明細&lt;/p&gt;</description>
        </item>
        <item>
        <title>ゲームの多面性：心理発達と社会的娯楽の交差点</title>
        <link>https://ttf248.life/ja/p/games-multidimensionality-psychological-development-social-entertainment-intersection/</link>
        <pubDate>Sat, 30 Mar 2024 15:07:45 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/games-multidimensionality-psychological-development-social-entertainment-intersection/</guid>
        <description>&lt;p&gt;現代のデジタル時代において、ゲームは単なる娯楽手段ではなく、人々の日常生活に欠かせないものとなっています。心理学的な観点から見ると、ゲームは様々な年齢層の人々にとって異なる役割を果たし、また、社交娯楽とも密接に結びついています。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;精神状態&#34;&gt;精神状態
&lt;/h2&gt;&lt;p&gt;若者は自己探求とアイデンティティの確立段階にあり、&lt;strong&gt;ゲームは低コストで試行錯誤できる環境を提供する&lt;/strong&gt;。ゲームを通して、様々な役割や生き方を試し、好奇心や探究心を満たすことができる。しかし、年齢を重ねるにつれて個人の興味や価値観が安定してくると、ゲームはもはや彼らのライフゴールの方向性や興味に合致しなくなるかもしれない。&lt;/p&gt;
&lt;h2 id=&#34;社会性&#34;&gt;社会性
&lt;/h2&gt;&lt;p&gt;同時に、ゲームは社交活動の一部となり、特に若者にとってそうである。彼らはゲームを通じて友達を作り、ソーシャルネットワークを構築し、ゲームはそのための橋渡し役となっている。しかし、年齢とともに人々の交友関係は徐々に安定し、社交のニーズは他のより成熟した方法で満たされるかもしれないため、ゲームの社交における役割は相対的に弱まる。&lt;/p&gt;
&lt;h2 id=&#34;女の子を連れて行く&#34;&gt;女の子を連れて行く
&lt;/h2&gt;&lt;p&gt;国内では、恋愛教育の不足により、幼い頃は親から勉強に集中しろと言われ、卒業したらすぐに恋愛させられるという現象がよく見られます。&lt;/p&gt;
&lt;p&gt;学業や仕事の多忙、またはコミュニケーション能力の不足により、現実世界で安定した感情的な関係を築くことができず、孤独感を感じて注目されたいという欲求を抱いている。&lt;strong&gt;ゲームにおける「妹属性」行為は、彼らにとってそのような欲求を解放する出口を提供する&lt;/strong&gt;。女性プレイヤーを助け、保護することで、必要とされることや尊重されていると感じることができ、感情的な充足感を得ている。&lt;/p&gt;
&lt;p&gt;同時に、ゲーム内のインタラクションルールは明確で、環境もコントロール可能であり、現実生活の複雑さと不確実性に比べて、ゲームは確実性と安心感を提供し、現実世界での交流における不確実性への恐怖を軽減します。しかしながら、ゲーム内での仮想的な充足感に長期的に依存することは、彼らが現実世界で健全な感情的な関係を築き、維持する能力に影響を与える可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;現実のプレッシャー&#34;&gt;現実のプレッシャー
&lt;/h2&gt;&lt;p&gt;ゲームは、プレイヤーが現実のストレス、課題、または不快な感情から一時的に逃避できる仮想世界を提供します。特に、学業のプレッシャー、家族の問題、人間関係の課題に直面している若者にとって、ゲームは慰めとリラックスを求める手段となる可能性があります。&lt;/p&gt;
&lt;p&gt;ゲームは通常、プレイヤーがミッションを完了したり、レベルアップしたり、対戦相手を打ち破ったりすることで、達成感と承認を得られるように設計されています。若者がゲームにのめり込むことがあるのは、現実世界では得られない賞賛や承認といった感情をゲームの中で得られるからかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;年齢が増えると遊ぶのが好きじゃなくなった&#34;&gt;年齢が増えると遊ぶのが好きじゃなくなった。
&lt;/h2&gt;&lt;p&gt;若い頃は、個人が直面する社会的責任やプレッシャーは比較的少なく、ゲームに時間とエネルギーを費やす余裕があった。しかし、職場への参加や家庭の設立など、社会的責任が増えるにつれて、時間やエネルギーはより貴重になり、ゲームは時間つぶしとして見なされ、優先的なレジャー手段とはみなされなくなることがある。&lt;/p&gt;
&lt;p&gt;年齢を重ねるにつれて、人々の認知能力や興味の対象も変化します。若い頃はアクションが速く、グラフィックが華やかなゲームに興味を持つかもしれませんが、経験を積むにつれて、より戦略性があり、ストーリー性が強く、あるいは深みのあるゲームを好むようになるかもしれません。もし市場にあるゲームがこれらの変化したニーズを満たさない場合、自然と興味は薄れてしまいます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>人民元相場が大きく変動し、7.26を突破</title>
        <link>https://ttf248.life/ja/p/renminbi-exchange-rate-volatility/</link>
        <pubDate>Sat, 23 Mar 2024 00:31:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/renminbi-exchange-rate-volatility/</guid>
        <description>&lt;p&gt;人民元の為替レートの変動と市場全体の下げは、世界の各中央銀行の動向、スイス国立銀行の予想外な利下げ、アメリカ経済指標の状況、そしてインフレや利下げに関する市場の見通しの調整などが関係している可能性があります。これらの要因が相まって外国為替市場と株式市場に影響を与え、人民元為替レートの変動とA株市場の下落につながったと考えられます。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;提示されたリンクの内容によると、2024年3月22日に人民元相場が大きく変動しました。詳細はこちらです。&lt;/p&gt;
&lt;p&gt;米ドル／人民元相場が水準を突破：当日、市場が開盤した際、人民元は下落し、米ドル／人民元相場は中間水準で7.24から7.24926に上昇し、7.22から7.22360に上昇して、2023年11月17日以来の高値を更新しました。財聯社記者によると、執筆時点で米ドル／人民元相場は7.26水準を突破し、最低で7.2639まで下落しており、その傾向は続いています。&lt;/p&gt;
&lt;p&gt;中央銀行仲間レート調整：3月22日、中央銀行は人民元／米ドル仲間レートを7.1004と発表、62ベーシスポイントの調整により下落し、調整幅が拡大した。&lt;/p&gt;
&lt;p&gt;A株市場の反応：複数の要因により、当日A株の主要３指数の全てが下落し始め、下げ幅はそれぞれ1%を超えた。&lt;/p&gt;
&lt;p&gt;為替市場の変動要因：香港のある投資機関のベテラン為替トレーダーは、為替市場の変動は主にスイス国立銀行が予想外に利下げを行ったことでドルが上昇したことと、アメリカ経済が好調であり、インフレが粘り強いことから利上げが見送られる可能性があることが相まって、ドル指数の上昇につながったと述べています。&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;strong&gt;世界各国中央銀行動向&lt;/strong&gt;：今週は世界の市場にとって「スーパーセントラルバンクウィーク」であり、米国、日本、英国、オーストラリアなど複数の各国の中央銀行が今週中に利息決定を発表します。スイス国立銀行は予想外に利下げを宣布し、G10諸国の中央銀行としてはパンデミック発生以来初の利下げとなり、市場の均衡を崩しました。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;光大銀行金融市場部の研究員、周茂華氏は、最近人民元にいくらかの変動があったものの、全体的な幅は米ドルなどの主要通貨と比較して明らかに小さく、短期的な変動は年内の人民元の安定的な上昇傾向を変えることはないと述べています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Python辞書にカスタムオブジェクトを格納する際の参照とdeepcopyの重要性</title>
        <link>https://ttf248.life/ja/p/python-dictionary-custom-objects-reference-vs-deepcopy/</link>
        <pubDate>Fri, 22 Mar 2024 01:08:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/python-dictionary-custom-objects-reference-vs-deepcopy/</guid>
        <description>&lt;p&gt;Pythonプログラミングにおいて、辞書は非常に強力なデータ構造であり、キーと値を関連付けて、これらのデータを効率的に検索および操作できます。辞書にカスタムオブジェクトを格納しようとするとき、重要な概念に出くわします。Pythonにおけるオブジェクトの代入は実際には参照による代入であり、オブジェクト自体の深いコピーではありません。つまり、カスタムオブジェクトを辞書に格納すると、辞書に格納されるのはオブジェクトへの参照であり、オブジェクトの新しいコピーではありません。&lt;/p&gt;
&lt;h2 id=&#34;カスタムオブジェクトの保存に関する基本的な例&#34;&gt;カスタムオブジェクトの保存に関する基本的な例
&lt;/h2&gt;&lt;p&gt;仮に、単純な &lt;code&gt;Person&lt;/code&gt; クラスがあるとします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# 创建一个 Person 对象
p1 = Person(&amp;quot;Alice&amp;quot;, 30)

# 将对象存储到字典中
people_dict = {}
people_dict[&amp;quot;alice&amp;quot;] = p1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;code&gt;people_dict&lt;/code&gt; ディクショナリはキーが &lt;code&gt;&amp;quot;alice&amp;quot;&lt;/code&gt; の項目を含み、その値は &lt;code&gt;Person&lt;/code&gt; 型の &lt;code&gt;p1&lt;/code&gt; オブジェクトへの参照です。もし &lt;code&gt;p1&lt;/code&gt; の属性を修正すると:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1.age = 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そうすると、辞書を通してこのオブジェクトにアクセスしたとき、その年齢も更新されていることがわかります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(people_dict[&amp;quot;alice&amp;quot;].age)  # 输出：31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;辞書に格納されているのは、&lt;code&gt;Person&lt;/code&gt;オブジェクトの独立したコピーではなく、同じメモリのアドレスを指す参照です。&lt;/p&gt;
&lt;h2 id=&#34;深いコピーと浅いコピーの違い&#34;&gt;深いコピーと浅いコピーの違い
&lt;/h2&gt;&lt;p&gt;ネストされたデータ構造やカスタムオブジェクトを扱う場合、この参照動作は予期せぬ結果を引き起こす可能性があります。例えば、カスタムオブジェクトに可変型の属性（リストや別のカスタムオブジェクトなど）が含まれている場合、そのようなオブジェクトを直接辞書に格納し、それを変更すると、辞書を通して取得したオブジェクトに影響が及ぶことがあります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Address:
    def __init__(self, street, city):
        self.street = street
        self.city = city

class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

address = Address(&amp;quot;Main St.&amp;quot;, &amp;quot;Springfield&amp;quot;)
p1 = Person(&amp;quot;Bob&amp;quot;, 40, address)
people_dict[&amp;quot;bob&amp;quot;] = p1

# 修改原始地址对象
address.city = &amp;quot;Shelbyville&amp;quot;

# 字典中的人的地址也变了
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 输出：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解決策：ディープコピー&lt;/p&gt;
&lt;p&gt;このような共有状態がもたらす問題を避けるために、辞書にオブジェクトの完全なコピーを格納し、参照ではなく、というようにすることが必要な場合があります。Python の &lt;code&gt;copy&lt;/code&gt; モジュールにある &lt;code&gt;deepcopy&lt;/code&gt; 関数は、この目的を達成するために使用できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import copy

# 使用深拷贝存储对象
people_dict[&amp;quot;bob_deepcopy&amp;quot;] = copy.deepcopy(p1)

# 此时即使修改原始地址对象，深拷贝的对象不会受影响
address.city = &amp;quot;Capital City&amp;quot;
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 输出：Capital City
print(people_dict[&amp;quot;bob_deepcopy&amp;quot;].address.city)  # 输出：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要するに、Pythonで辞書を使ってカスタムオブジェクトを保存する場合、デフォルトではオブジェクトへの参照が格納されることに注意してください。独立した状態を維持する必要がある場合は、共有による予期せぬデータ変更を防ぐために&lt;code&gt;deepcopy&lt;/code&gt;を使用して深いコピーを作成してください。&lt;/p&gt;</description>
        </item>
        <item>
        <title>澱粉腸と路地裏の屋台：資本のニュース影響力</title>
        <link>https://ttf248.life/ja/p/sausages-and-street-vendors-capital-news-influence/</link>
        <pubDate>Mon, 18 Mar 2024 00:31:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/sausages-and-street-vendors-capital-news-influence/</guid>
        <description>&lt;p&gt;315は実際には鶏骨泥の報道をしておらず、この問題自体が中央電視台3・15ガラの一方的な暴露と同時期に発生した他の食糧安全に関するホットな話題を混同している。&lt;/p&gt;
&lt;h2 id=&#34;報道学&#34;&gt;報道学
&lt;/h2&gt;&lt;p&gt;315晩会では計9つのメーカーが挙げられたが、ソーセージは含まれていなかった。しかし今となっては、ノミネートされた大手ブランドの話題性はなく、代わりに国民的な人気（全国各地の屋台街に基本的にはあり、おそらく店舗数も一番多い）スナックであるソーセージを巻き込んでしまったように見える。まるでソーセージがスケープゴートにされたかのようだ。オンラインニュースソースを確認したところ、央广网が3.15の日にハムに関する調査報道をしたものの、いくつかのメーカーの成分を列挙しただけで、問題点は見当たらない。そしてB記者はその情報を工場員の証言「鶏骨泥（チキンボーンペースト）で鶏肉を代用していることがある」という噂に基づいて、淘宝でペットフード店に鶏骨泥を販売している業者に「人間は食べられるか？」と尋ねたのだ。これはバカみたいな質問だろう？ペットフードの店が人間に食べさせるように勧めるはずがないだろう？その後、ソーセージに鶏骨泥が含まれているというデマが広がり、「鶏骨泥は人間には食べられない」という話になった。&lt;/p&gt;
&lt;p&gt;今現在の状況では、多くの工場が閉鎖せざるを得なくなり、全国数十万の露店商人も商品を抱えても売れないという瀬戸際にあるものと見られます。&lt;/p&gt;
&lt;h2 id=&#34;現実は人間に残酷だ&#34;&gt;現実は人間に残酷だ。
&lt;/h2&gt;&lt;p&gt;湘商報17日の報道によると、3月16日、河南省三門峡で「澱粉腸の崩壊」の翌日、ある女性が澱粉腸を売るために出店したが、2時間経っても客がなく、結局自分で黙って澱粉腸を食べた。撮影者は普段、澱粉腸を4、5本は食べられるが、鶏骨泥が入っていると知ってからは絶対に食べないという。彼はその日、暴露された後、誰かが澱粉腸を買うかどうか興味があったが、結果的に2時間で一根も売れなかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;おばさんは、何が原因か知らないけど、今日急に誰も自分の焼きそばを買ってくれなくなったの。&lt;/li&gt;
&lt;li&gt;おばあちゃんは間違っていない、ただ家族を養うためです。おばあちゃんは製品に問題があるかどうかも、品質がどうかもしらないし、骨泥とは何かも知らない。彼女たちはインターネットを知らないだけで、底辺の人々として生きるために知恵を絞っているだけなのです。&lt;/li&gt;
&lt;li&gt;澱粉腸は潰れてしまったけれど、それによって支払うのは一人ひとりの底辺で働く人々だ。これは苦しい過程である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;規制の不備&#34;&gt;規制の不備
&lt;/h2&gt;&lt;p&gt;数年前の午後、ある北京に住む同僚と一緒に昼食を食べに出かけた時、焼きソーセージや鉄板ステーキを売る屋台の前を通りました。&lt;/p&gt;
&lt;p&gt;こんな感じで今時のブラックテクノロジーみたいなソーセージやヒレ肉を食べる人いるのかな？って口にしたんだけど、私の考え方では、最後に澱粉入りソーセージを食べたのは大体10年以上前だったような気がする。&lt;/p&gt;
&lt;p&gt;同僚が少し躊躇して、遠回しに言いました。「たぶん、大都市で暮らしているせいでしょう。実のところ、私たちの故郷のような小さな町では、榨菜（ザーサイ）、インスタントラーメン、パテ缶が毎日の日常です。」&lt;/p&gt;
&lt;p&gt;学校の頃、満点を取らないと、父が通りの途中でソーセージを一つ買ってくれるだけだった。衛生の問題ではないんだ、ただソーセージは結局1.5元だし、それならキャベツ2キロ買えるんだ。&lt;/p&gt;
&lt;p&gt;そういったインスタントラーメンや炭酸飲料、スナック菓子を「ジャンクフード」と呼ぶという話は、北京で学生になった後に初めて聞いた。&lt;/p&gt;
&lt;p&gt;私は自分の発言の無意識のうちの傲慢さに気づき、黙って何も言わなくなった。しかし、この出来事は私に深い印象を与えた。&lt;/p&gt;
&lt;p&gt;実際、これが中国の大部分の人々の日常です。&lt;/p&gt;
&lt;p&gt;彼らの生活には、高級な「地中海式食事」「緑色の有機野菜」「遺伝子組み換えでない大豆」といったものはなかった。彼らが気にかけるのは、安くて美味しく食べられる野菜や肉、お菓子が手に入るかどうかだけだった。家族みんなで少しばかりの幸せな時間を楽しむことだけに。&lt;/p&gt;
&lt;p&gt;棚に並んでいるものが、どのような成分でできているのか、彼らの健康を害する可能性はないか、何か珍しい化学物質が含まれていないか。&lt;/p&gt;
&lt;p&gt;そもそも、彼らが気にかけても理解できることではない。&lt;/p&gt;
&lt;p&gt;彼らは、問題のあるものがもしあれば、誰かが対応してくれるはずで、棚に並ぶことはないだろうと、素直に信じていた。&lt;/p&gt;
&lt;p&gt;しかし、ある315のイベントを見て、皆がそうではないことに気づいた。&lt;/p&gt;
&lt;p&gt;市場の電子秤やガソリンスタンドの給油ポンプには、ハイテク改造のマザーボードが隠されており、動画を撮影するには、アップロード者が殴られる危険を冒す必要があり、初めて規制当局が気づき、対処できるようになる。&lt;/p&gt;
&lt;p&gt;ライブ配信の梅菜肉や露店の澱粉腸には、元々不良肉や骨粉が使われており、中央電視台の記者が潜入調査を行い映像を撮影しなければ、誰にも気づかれず、検証も貨源の行方も追及されない。&lt;/p&gt;
&lt;p&gt;テレビチャンネルや空港の広告で大々的に宣伝されていた「健康酒」が、誰かがビデオを撮影してその裏事情を暴露したことで、一晩にして緊急回収され、市民たちの目の前から姿を消した。&lt;/p&gt;
&lt;p&gt;年に一度の315、毎回抽選で同じように五六個の商品を落として売りさばいているだけで十分だろうか？&lt;/p&gt;
&lt;p&gt;それらの既に食べ尽くし、購入してしまった消費者に対して、誰に再び向かうのだろうか。&lt;/p&gt;</description>
        </item>
        <item>
        <title>新規に敷設されたギガビット回線、なぜ速度測定では100メガのみ？</title>
        <link>https://ttf248.life/ja/p/new-gigabit-fiber-slow-speed/</link>
        <pubDate>Mon, 18 Mar 2024 00:29:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/new-gigabit-fiber-slow-speed/</guid>
        <description>&lt;p&gt;家庭のネットワークを稲妻のように高速にしたいですか？ 鍵は、LANケーブルの選択、ONU（光回線終端装置）とルーターの設定、そして些細に見える小さな工夫を理解することです。 このブログでは、6類LANケーブルでギガビットネットワークを構築する方法や、簡単なデバイスチェックと設定によってネットワーク速度に制限がないようにするための方法を分かりやすく解説します。 さあ、一緒に探求して、家庭のインターネット回線を高速化させましょう！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;手動修復&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第1章ネットワーク伝送媒体の徹底分析&#34;&gt;第1章：ネットワーク伝送媒体の徹底分析
&lt;/h2&gt;&lt;p&gt;ギガビットネットワーク接続を実現するときの、情報高速伝送を支える媒体であるLANケーブルの役割は非常に重要です。以下に、カテゴリー5、カテゴリー6、カテゴリー7のLANケーブルについて詳しく解説します。&lt;/p&gt;
&lt;h3 id=&#34;カテゴリー5ケーブル-cat5&#34;&gt;カテゴリー5ケーブル (CAT5)
&lt;/h3&gt;&lt;p&gt;5種類のLANケーブル、別名CAT5は、比較的初期に普及したツイストペアケーブルの一種で、各芯線が精密な螺旋構造によって設計され、クロストークを低減しています。主に10/100Mbpsの高速イーサネットに適しており、最大伝送周波数はおよそ100MHzです。過去には広く利用されていましたが、現在のギガビット以上の速度に対応するニーズに対しては、物理的な限界から5種類のLANケーブルでは要求を満たすことができません。&lt;/p&gt;
&lt;h3 id=&#34;カテゴリー6ケーブル&#34;&gt;カテゴリー6ケーブル
&lt;/h3&gt;&lt;p&gt;技術の発展に伴い、カテゴリー6ケーブルが登場しました。カテゴリー5ケーブルと比較して、カテゴリー6ケーブルはより厳格な製造基準と高度な構造設計を採用しており、耐干渉性と伝送効率が大幅に向上しています。1Gbpsまでのデータ転送速度をサポートし、理想的な条件下では100メートルの伝送距離を実現します。これはまさにギガビットネットワークのアクセスニーズに合致しています。&lt;/p&gt;
&lt;h3 id=&#34;カテゴリー7ケーブル-cat7&#34;&gt;カテゴリー7ケーブル (CAT7)
&lt;/h3&gt;&lt;p&gt;カテゴリー7のケーブルは、現在のツイストペア技術における最高水準を示しています。これは、伝送速度が飛躍的に向上しているだけでなく、理論上は最大10Gbpsの超高速をサポートし、さらに設計に完全なシールドシステムを採用しており、各線対間のシールドと全体の外側のシールドを含み、外部からの電磁干渉や近接クロストークを大幅に低減することで、データ転送の安定性と正確性を確保しています。ただし、カテゴリー7ケーブルは主に将来の10ギガビットイーサネットまたは特定の高要求なシナリオで使用されます。&lt;/p&gt;
&lt;p&gt;ギガホームネットワーク環境を構築する際、ギガファイバーの潜在能力を最大限に引き出すためには、カテゴリー6ケーブルを選択することが最も経済的かつ効率的な選択です。同時に、すべての接続ケーブルの品質が適切であることを確認し、厳密に標準的な配線方法に従って操作することも、ネットワーク性能を確保するための重要な要素となります。&lt;/p&gt;
&lt;h2 id=&#34;第2章ネットワークの中枢機器における影響onuルーターのlanポート帯域幅の影響&#34;&gt;第2章：ネットワークの中枢機器における影響—ONU、ルーターのLANポート帯域幅の影響
&lt;/h2&gt;&lt;h3 id=&#34;光猫とlanポートの帯域幅の重要性&#34;&gt;光猫とLANポートの帯域幅の重要性
&lt;/h3&gt;&lt;p&gt;光ネコ（こうねこ）、正式名称は光ファイバーモデムであり、家庭ブロードバンド接続の中核となる機器です。その機能は、光ファイバー内の光信号をデジタル信号に変換し、家庭内ネットワーク機器が利用できるようにすることです。ギガビット光ファイバーユーザーにとって、光ネコがギガビット伝送に対応しているかどうかは特に重要です。光ネコのWANポートがギガビットに対応していない場合、戸別線路の光ファイバー速度がどれだけ高くても、このボトルネックによって100Mbps以内に制限されてしまいます。同様に、光ネコのLANポートもギガビット出力能力を備えている必要があります。そうでなければ、接続されたルーターやその他のデバイスは、真のギガビット速度を得ることができません。&lt;/p&gt;
&lt;h3 id=&#34;ルーターのlanポート帯域幅の役割&#34;&gt;ルーターのLANポート帯域幅の役割
&lt;/h3&gt;&lt;p&gt;ルーターのLANポートは、受信したデータを各端末デバイスに配信する役割を担います。ルーターのLANポートが100Mbpsの場合、他の機器の設定が再調整しても、100Mbpsの速度しか実現できないローカルエリアネットワーク通信となります。したがって、ギガホームネットワークを構築する際には、ルーターのWANポートがギガデータを受信できること、そしてLANポートもギガレベルのデータ出力能力を提供できるようにすることが重要です。そうすることで初めて、家庭内のすべてのスマートデバイスが高速ネットワークが生み出す快適な体験を享受できます。&lt;/p&gt;
&lt;p&gt;さらに注意すべき点として、一部の古いまたは低価格帯のルーターにはLANポートの自動速度ネゴシエーション機能が存在する場合があります。これは、ルーター自体がギガビットに対応していても、ケーブルやデバイスの互換性の問題などにより、100Mbpsモードに降格することがあるということです。したがって、ルーターの設定を適切に行い、強制ギガビットモードを有効にし、ギガビットスイッチまたは直接接続されたデバイスと組み合わせることが、全ギガビットネットワークを実現するための重要なステップの一つです。&lt;/p&gt;
&lt;p&gt;アップグレードをギガ光ファイバーに移行後、必ずギガ光回線終端装置（ONU）およびギガルーターに交換し、すべてのデバイスインターフェースがギガビットレベルに達していることを確認してください。&lt;/p&gt;
&lt;h2 id=&#34;第3章隠された謎一本途切れられたサブケーブルがテラビットネットワークにどのように影響するか&#34;&gt;第3章：隠された謎—一本途切れられたサブケーブルがテラビットネットワークにどのように影響するか
&lt;/h2&gt;&lt;h3 id=&#34;海底ケーブルの障害とネットワークパフォーマンスの低下&#34;&gt;海底ケーブルの障害とネットワークパフォーマンスの低下
&lt;/h3&gt;&lt;p&gt;測速期間中、ネットワークは常に接続されており、明確な断線は見られませんでした。新しく導入された回線のため、配電盤内が散らかっており、光モデムのケーブルや電源コンセントの位置を時々調整しているため、稀にギガビットまで速度が出ることがあります。&lt;/p&gt;
&lt;p&gt;先行きの資料に基づき、ケーブルの種類や光回線終端装置のLAN口の速度を分析・検証した結果、ついに原因がケーブル内部の茶色のサブワイヤーの断線であることが判明しました。&lt;/p&gt;
&lt;p&gt;設置の際に、水晶頭を取り付ける職人がこのLANケーブルを少し強く引っ張ったことが原因で、中の細い線が半分ほど切れていました。完全に断ち切られてはいなかったものの、その後、光モデムの位置を何度も調整するたびに移動させることが続き、最終的に完全に断裂しました。&lt;/p&gt;
&lt;h3 id=&#34;6種類のlanケーブルの8本の線の機能解説&#34;&gt;6種類のLANケーブルの8本の線の機能解説
&lt;/h3&gt;&lt;p&gt;カテゴリー6のLANケーブルは、TIA/EIA-568-B規格に準拠しており、8本のツイストペア線を持ち、カラーコードは以下の通りです。&lt;/p&gt;
&lt;p&gt;白橙 / 橙
白緑 / 緑
白藍／藍
白茶 / ほうじ茶&lt;/p&gt;
&lt;p&gt;ギガビットイーサネット（1000BASE-T）の規格において、この8本のケーブルのうち4対が同時に動作し、それぞれ以下の役割を担っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白橙と橙のこのペアの線（1&amp;amp;2）は、データ送信（Tx+/-）に使用されます。&lt;/li&gt;
&lt;li&gt;白緑と緑のこのペア（3&amp;amp;6）は、データ受信（Rx+/-）に使用されます。&lt;/li&gt;
&lt;li&gt;白藍と青のペア（4&amp;amp;5）および白茶と茶のペア（7&amp;amp;8）は、ギガビットイーサネットでは通常はメインで使用されませんが、一部の高機能アプリケーション（例えば、特定のPoE給電や将来的な技術拡張など）において有効になる可能性があります。一方、従来の100Mbpsネットワークでは、1, 2, 3, 6の4本の線を使用するだけで十分です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;切断されたファイバーがネットワーク速度に与える影響&#34;&gt;切断されたファイバーがネットワーク速度に与える影響
&lt;/h3&gt;&lt;p&gt;上記の状況において、もし茶色のサブケーブル（茶線または茶白線）が断線した場合、理論上はギガビットネットワーク環境では確かに速度低下が生じます。なぜならギガビットネットワークは全速を実現するために、4対の線全てで双方向通信を行う必要があるからです。しかしながら、家庭用ネットワーク機器にはオートネゴシエーション機能が備わっていることが多く、ケーブルに問題が発生した際に、正常動作する低いレートモード、つまり100Mbpsモードに切り替えます。これにより、サブケーブルが断線してもネットワークが接続され続け、100Mbpsの速度で動作することが説明できます。&lt;/p&gt;
&lt;p&gt;要言えば、単一の茶色のサブファイバーが切断されても、100Gbpsネットワークの基本的な動作には影響しませんが、ギガビットネットワーク環境下では、それがネットワーク速度を制限する重要な要因となり得ます。徹底的な診断と修復を行うことで初めて、ギガ光ファイバーの潜在能力を最大限に発揮できます。これも、同様の問題に遭遇した場合、一見すると基本的な接続に影響がないように見える小さな故障であっても、潜在的なネットワークインフラストラクチャの問題を無視してはならないことを示唆しています。そうした些細な問題が、高速ネットワーク体験の隠れた障害となる可能性があるからです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>WPFのUIスレッドと、その応答性の問題とその解決策</title>
        <link>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-issues-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-issues-solutions/</guid>
        <description>&lt;p&gt;デスクトップアプリケーションを開発する際、特にWindows Presentation Foundation (WPF) フレームワークを使用してリッチクライアントアプリケーションを構築する場合、ユーザーインターフェース（UI）スレッドを正しく処理することは、アプリケーションの滑らかさと応答性を保証するために非常に重要です。UIスレッドは、メインスレッドとも呼ばれ、ウィンドウやコントロールイベントの処理、レイアウト計算、およびインターフェースの描画を担当するコアスレッドです。UI要素とのインタラクションに関わる操作はすべて、UIスレッド上で実行されるべきであり、これはWPFをはじめとする多くのGUIフレームワークが遵守する基本的な原則です。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドとは何ですか&#34;&gt;UIスレッドとは何ですか？
&lt;/h2&gt;&lt;p&gt;WPFアプリケーションの起動時に、OSによってUIスレッドが作成され、アプリケーションのメインウィンドウが初期化されます。これは、アプリケーション内で直接UIコンポーネントの状態にアクセスおよび変更できる唯一のスレッドです。つまり、ボタンクリック、テキストボックスへの入力、ウィンドウサイズの変更など、すべてのユーザーインタラクションによって発生するイベントは、このスレッドのコンテキストで処理されます。同時に、WPFの依存プロパティシステム、データバインディングメカニズム、およびレイアウトロジックもUIスレッド上で同期的に実行されます。&lt;/p&gt;
&lt;h2 id=&#34;カクつき現象とその原因&#34;&gt;カクつき現象とその原因
&lt;/h2&gt;&lt;p&gt;UIスレッドが長時間占有またはブロックされると、例えば時間のかかる計算や大量のデータ読み込み、データベースクエリなどのI/O集約型のタスクを実行すると、UIスレッドはユーザーからのインタラクションリクエストにタイムリーに応答できなくなり、結果として画面がフリーズ（応答なし）したように見える、「カドゥン」と呼ばれる状態になります。このような状況下では、ユーザーはアプリケーションの遅延や不具合を強く感じることがあり、深刻な場合には「Application Not Responding」（ANR）警告が表示されることもあります。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドの2つの基本的なルール&#34;&gt;UIスレッドの2つの基本的なルール
&lt;/h2&gt;&lt;p&gt;上記のような状況を避けるために、WPF開発者は以下の2つの重要なルールに従うべきです。&lt;/p&gt;
&lt;p&gt;UIスレッドで時間のかかる処理を実行しないでください。UIスレッドがユーザーの入力にタイムリーに応答し、画面の変化をレンダリングできるように、可能な限り時間のかかる操作はバックグラウンドスレッドで実行するようにしてください。
UIスレッド以外のスレッドで直接UI要素を更新しないでください。WPFのセキュリティ機構により、UI要素の変更はUIスレッドのみが許可されています。他のスレッドから直接UIの状態を変更しようとすると例外が発生します。したがって、バックグラウンドスレッドで計算やデータ準備が完了した場合でも、適切なクロススレッド通信メカニズムを通じて結果をUIに表示する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;解決策非同期プログラミングとスレッドセーフな更新&#34;&gt;解決策：非同期プログラミングとスレッドセーフな更新
&lt;/h2&gt;&lt;p&gt;UI のスムーズさを維持しながら、時間のかかるタスクを実行するために、WPF は開発者がこの目標を達成するのを支援するためのさまざまな非同期プログラミングモデルとツールを提供します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ディスパッチャオブジェクト：WPFのDispatcherクラスを使用すると、作業項目をUIスレッドのタスクキューに配置して実行できます。&lt;code&gt;Dispatcher.Invoke&lt;/code&gt;または&lt;code&gt;Dispatcher.BeginInvoke&lt;/code&gt;メソッドを使用して、バックグラウンドスレッドから安全にUIを更新できます。&lt;/li&gt;
&lt;li&gt;C#言語の非同期機能を利用することで、非同期メソッドを記述し、その中で&lt;code&gt;await&lt;/code&gt;キーワードを使用してバックグラウンドタスク完了を待機し、完了後に自動的にUIスレッドで実行して、後続のUI更新コードを実行できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事例&#34;&gt;事例
&lt;/h2&gt;&lt;h3 id=&#34;dispatcherinvokeメソッドを使用してuiを更新する&#34;&gt;&lt;code&gt;Dispatcher.Invoke&lt;/code&gt;メソッドを使用してUIを更新する。
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // 假设这是一个耗时操作
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // 这里是模拟一个耗时计算的方法
        
        // 当耗时操作完成后，在UI线程上更新UI
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 模拟耗时操作
    Thread.Sleep(5000);
    return &amp;quot;已完成&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;asyncawaitキーワードとtaskrunを組み合わせる&#34;&gt;&lt;code&gt;async/await&lt;/code&gt;キーワードと&lt;code&gt;Task.Run&lt;/code&gt;を組み合わせる。
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // 防止用户重复点击

    try
    {
        // 开启后台任务
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // 在后台任务完成后，自动切换回UI线程更新UI
        LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;发生错误: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // 重新启用按钮
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>GCCバージョンアップによりプログラムがクラッシュ：非標準コードの潜在的な問題</title>
        <link>https://ttf248.life/ja/p/upgrade-gcc-version-causes-program-crash-code-irregularities/</link>
        <pubDate>Sun, 10 Mar 2024 23:19:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/upgrade-gcc-version-causes-program-crash-code-irregularities/</guid>
        <description>&lt;p&gt;同一のビジネスコードの場合、プログラムは CentOS 7 環境で正常にコンパイルされ実行されたが、CentOS 8 に切り替えて更新版 GCC でコンパイルするとクラッシュした。問題が発生するのは &lt;strong&gt;Release モード&lt;/strong&gt; のみであり、&lt;strong&gt;Debug モード&lt;/strong&gt; では全く問題がない点が重要である。我々はこのような状況を初めて遭遇し、3 日間の調査の結果、ようやく問題の根本原因を見つけ出した。&lt;/p&gt;
&lt;h3 id=&#34;問題特定&#34;&gt;問題特定
&lt;/h3&gt;&lt;p&gt;一連の調査の結果、問題の根本原因は &lt;strong&gt;関数に返り値がないこと&lt;/strong&gt;です。Release モードでは GCC の新バージョンがより多くの最適化を行うため、元々明示的な返り値のない関数が実行中に予期せぬ動作を起こし、クラッシュを引き起こしています。結論として、&lt;strong&gt;コンパイラの警告を無視することは許されません。特に古いプロジェクトにおいては、一部の警告が無視されている可能性もありますが、すべての警告を遮断することは避けるべきです&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;環境説明&#34;&gt;環境説明
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CentOS 7 GCCバージョン：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
Copyright © 2015 Free Software Foundation, Inc.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CentOS 8 GCCバージョン：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21)
Copyright (C) 2018 Free Software Foundation, Inc.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;クラッシュ現象&#34;&gt;クラッシュ現象
&lt;/h3&gt;&lt;p&gt;プログラムクラッシュのスタックを解析した結果、以下のスタック情報が見られました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[New LWP 1385902]
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib64/libthread_db.so.1&amp;quot;.
Core was generated by `./pstack_main`.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007ffe894b4420 in ?? ()
(gdb) bt
#0  0x00007ffe894b4420 in ?? ()
#1  0x00000000004008e9 in main ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このスタックは直感的ではなく、クラッシュした関数のスタック情報が「??」として表示されているため、問題の特定がより複雑になっています。&lt;/p&gt;
&lt;h3 id=&#34;コード例&#34;&gt;コード例
&lt;/h3&gt;&lt;p&gt;問題をより良く理解するために、クラッシュを再現する最小限のコード例を以下に示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int test() {
    std::cout &amp;lt;&amp;lt; &amp;quot;1&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    test();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのコードの &lt;code&gt;test()&lt;/code&gt; 関数は明らかに値を明示的に返していませんが、戻り値の型は &lt;code&gt;int&lt;/code&gt; です。C++ の仕様によると、関数が &lt;code&gt;int&lt;/code&gt; 型として宣言されている場合、必ず値を返す必要があり、そうしないと未定義の動作を引き起こす可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;コンパイル警告&#34;&gt;コンパイル警告
&lt;/h3&gt;&lt;p&gt;私たちのプロジェクトでは、CMakeスクリプトによって多くのコンパイル時の警告が抑制されており、その中には以下の警告メッセージが含まれています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/root/pstack/main.cpp: In function ‘int test()’:
/root/pstack/main.cpp:7:1: warning: no return statement in function returning non-void [-Wreturn-type]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この警告は、&lt;code&gt;test()&lt;/code&gt;関数が値を返していないことを示しており、これが問題の根本原因です。高度なバージョンのGCC（例えば8.5.0）は、コードを最適化する際に、このような未定義の振る舞いに不安定な最適化を行い、プログラムがクラッシュする可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;アセンブリコードの差異&#34;&gt;アセンブリコードの差異
&lt;/h3&gt;&lt;p&gt;GCCコンパイラ最適化の動作の違いを説明するために、異なるバージョンのGCCが生成するアセンブリコードを比較しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GCC 4.8.5 が生成したアセンブリコード：&lt;/p&gt;
&lt;p&gt;アセンブリコードは比較的冗長であり、標準出力ストリーム（例えば &lt;code&gt;std::cout&lt;/code&gt;）の処理ロジックも含まれています。これはコンパイラがより保守的な最適化を行ったことを示しており、&lt;code&gt;test()&lt;/code&gt; 関数における戻り値がない問題に対して過度な最適化を行わず、その結果、クラッシュを回避できた可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GCC 8.5.0 が生成したアセンブリコード：&lt;/p&gt;
&lt;p&gt;新しいバージョンのGCCでは、より多くの最適化が行われ、コード量が削減されました。しかし、この最適化により、戻り値がない関数の実行時に動作が不安定になり、プログラムがクラッシュする可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論
&lt;/h3&gt;&lt;p&gt;今回の問題の調査を通じて、C++ においては&lt;strong&gt;関数の戻り値が明確に定義されている必要がある&lt;/strong&gt;ということを深く認識しました。特に、関数を &lt;code&gt;int&lt;/code&gt; として宣言した場合、必ず戻り値を返す必要があります。古いバージョンのコンパイラを使用しているプロジェクトでは、新しいバージョンの GCC にアップグレードすると、より多くの最適化や厳格な警告メカニズムが発生する可能性があります。したがって、コンパイル時に&lt;strong&gt;すべての警告を無視するのではなく&lt;/strong&gt;、関数からの戻り値や型の一致など、一般的な問題を中心に選択的に処理することをお勧めします。&lt;/p&gt;
&lt;p&gt;最終、&lt;code&gt;test()&lt;/code&gt;関数に返り値を加えることで問題が解決し、プログラムは正常に動作するようになりました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>VMware仮想マシンCPUリソース使用量異常</title>
        <link>https://ttf248.life/ja/p/vmware-virtual-machine-cpu-resource-usage-anomaly/</link>
        <pubDate>Sun, 10 Mar 2024 22:14:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/vmware-virtual-machine-cpu-resource-usage-anomaly/</guid>
        <description>&lt;p&gt;背景：ローカルマシンにWindows版の業務システムがデプロイされており、CPUリソースの使用率は約5％です。VMwareにインストールされたCentOS8にはLinux版の業務システムがデプロイされていますが、リソース使用量が異常です。&lt;/p&gt;
&lt;h2 id=&#34;問題の説明&#34;&gt;問題の説明
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ホストマシン：Windows 10 エンタープライズ版&lt;/li&gt;
&lt;li&gt;vmware：17.5&lt;/li&gt;
&lt;li&gt;仮想マシン：CentOS 8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仮想マシンリソースの割り当ては&lt;code&gt;4C8GB&lt;/code&gt;、ビジネスシステムを起動します。ビジネスシステムは仮想マシンLinuxシステムにデプロイされており、仮想マシン内部のtopコマンドでシステムリソースの使用状況を確認すると、CPU使用率は高くありません。外側のWindowsシステムではタスクマネージャーでCPUリソースの使用率が高いことが確認され、プロセスを確認した結果、vmwareプロセスがCPUリソースを多く消費していることがわかりました。&lt;/p&gt;
&lt;p&gt;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+
|         Windows           |
|                           |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|   |      VMware        |  |
|   |      Program       |  |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|                           |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/p&gt;
&lt;h2 id=&#34;知識点&#34;&gt;知識点
&lt;/h2&gt;&lt;p&gt;この問題のトラブルシューティングは順調に進まず、原因が通常のビジネスシステムではなく、仮想マシン自体の問題にあったためです。どのようにして思考を通常のビジネスコードからシステム負荷へ、そして負荷データの異常からソフト割り込みへと、最後に重要なポイントである「VMware ソフト割り込みの効率に影響を与えるものは何か？」という点に絞り込むのか。本稿ではまず各知識点を解説し、最後に解決策を示します。&lt;/p&gt;
&lt;h3 id=&#34;hyper-v&#34;&gt;hyper-v
&lt;/h3&gt;&lt;p&gt;Windows オペレーティングシステムの仮想化技術は大きな変革を遂げました。Microsoft が WSL を初めてリリースした際、Hyper-V サービスを有効にすると VMware の仮想マシンを同時に使用できなくなりました。しかし、その後のバージョンでは、VMware は Hyper-V サービスとの互換性が得られるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;システム負荷&#34;&gt;システム負荷
&lt;/h3&gt;&lt;p&gt;Linuxシステムにおいて、「ロード」（load）とは、実行中または実行待ちのプロセスの数を指します。ロードは通常、1分間、5分間、および15分間の実行キュー内の平均プロセス数を示す3つの数字で表されます。これらの数値は、「uptime」コマンドまたは「top」コマンドを実行することで確認できます。&lt;/p&gt;
&lt;p&gt;具体的には、この3つの数字はそれぞれ以下のものを表しています。&lt;/p&gt;
&lt;p&gt;1分間の負荷：システムが過去1分間実行キューにいたプロセスの平均数。
5分間の負荷：システムが過去5分間実行キューにいたプロセスの平均数。
15分間の負荷：システムが過去15分間実行キューに保持していたプロセスの平均数。&lt;/p&gt;
&lt;p&gt;負荷の定義は、システム内で実行待ちのプロセスの数です。この数がシステムの論理CPU数を超えると、システム負荷が高いことを示し、多くのプロセスがプロセッサリソースを待機していることを意味します。これにより、システムが遅くなったり、応答しなくなったりする可能性があります。その程度やシステムの構成・性能によって異なります。&lt;/p&gt;
&lt;p&gt;理想的には、負荷はシステムの論理 CPU 数範囲内に維持されるべきであり、そうすることでシステムのパフォーマンスが最適化されます。もし負荷が継続的に CPU 数を超えた場合、システム内のプロセスをさらに分析し、高負荷の原因となっているものを特定し、それに応じてシステムリソースの割り当てを調整したり、プロセスの実行方法を最適化する対策を講じる必要があるかもしれません。&lt;/p&gt;
&lt;h3 id=&#34;負荷解析-mpstat&#34;&gt;負荷解析 mpstat
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;mpstat&lt;/code&gt; コマンドは、単一または複数のプロセッサに関する様々な情報、例えば平均負荷、CPU 使用率、割り込み、コンテキストスイッチなどを報告するために使用されます。&lt;code&gt;sysstat&lt;/code&gt; パッケージに含まれる &lt;code&gt;mpstat&lt;/code&gt; は、システムの負荷状況を分析するのに非常に役立つツールです。以下に &lt;code&gt;mpstat&lt;/code&gt; を用いた負荷分析の手順を示します。&lt;/p&gt;
&lt;p&gt;sysstat のインストール
もしあなたのシステムに&lt;code&gt;sysstat&lt;/code&gt;がインストールされていない場合は、あなたのシステムに適したパッケージ管理ツールを使ってインストールしてください。&lt;/p&gt;
&lt;p&gt;mpstatを実行する。
&lt;code&gt;mpstat&lt;/code&gt; コマンドを使用して、CPU の使用状況と負荷を確認します。デフォルトでは、&lt;code&gt;mpstat&lt;/code&gt; は CPU 使用率の平均値を毎秒表示します。出力頻度は、時間間隔を指定することで調整できます。例えば、&lt;code&gt;mpstat&lt;/code&gt; を毎秒実行するには、次のコマンドを使用します: &lt;code&gt;mpstat -P ALL 2&lt;/code&gt; 、&lt;code&gt;irq&lt;/code&gt; はリソース使用状況を示します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```shell
01:32:33 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
01:32:35 PM  all    0.00    0.00    0.26    0.00    3.73    0.26    0.00    0.00    0.00   95.76
01:32:35 PM    0    0.00    0.00    0.51    0.00    3.57    0.00    0.00    0.00    0.00   95.92
01:32:35 PM    1    0.00    0.00    0.00    0.00    3.59    0.51    0.00    0.00    0.00   95.90
01:32:35 PM    2    0.00    0.00    0.00    0.00    4.15    0.00    0.00    0.00    0.00   95.85
01:32:35 PM    3    0.00    0.00    0.52    0.00    3.61    0.52    0.00    0.00    0.00   95.36
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分析出力：
mpstat の出力には、各 CPU の使用率とシステムの平均負荷が含まれています。平均負荷と各 CPU の使用率に特に注意を払うことで、システムの負荷状況を把握できます。負荷が高い場合は、どのプロセスが原因であるかをさらに分析し、パフォーマンスのボトルネックが存在するかどうかを確認できます。&lt;/p&gt;
&lt;p&gt;他のツールとの連携：
&lt;code&gt;mpstat&lt;/code&gt; 以外にも、&lt;code&gt;sar&lt;/code&gt;、&lt;code&gt;pidstat&lt;/code&gt;、&lt;code&gt;iostat&lt;/code&gt; などのツールを使用してシステムパフォーマンスを総合的に分析できます。複数のツールの出力を組み合わせることで、システムの負荷状況をより包括的に把握し、パフォーマンス問題の根本原因を見つけることができます。&lt;/p&gt;
&lt;h3 id=&#34;中断&#34;&gt;中断
&lt;/h3&gt;&lt;p&gt;ここでは内容を詳しく説明することは省略します。
推奨：&lt;a class=&#34;link&#34; href=&#34;https://www.codedump.info/post/20200522-sgfap-softirq/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;アプリケーション開発者向けシステムガイド CPU編 ソフトウェア割り込み&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;頻繁なソフト割り込みの発生も、システム負荷に現れます。&lt;/p&gt;
&lt;h2 id=&#34;問題の切り分け&#34;&gt;問題の切り分け
&lt;/h2&gt;&lt;p&gt;CPUの観点だけで問題を特定できない場合、システムに異常が発生しているのではないかと疑うべきでしょうか？ Linuxオペレーティングシステムの負荷が高すぎて、VMwareが過剰なCPUリソースを消費している可能性があります。 &lt;code&gt;mpstat&lt;/code&gt;を使用してローカル仮想マシンを分析した結果、&lt;code&gt;irq&lt;/code&gt;の使用率が異常で、単核は約25%です。正常時には、ビジネスプロセスを開始してもアイドル状態の時、&lt;code&gt;irq&lt;/code&gt;の割合は通常約5%であるべきです。&lt;/p&gt;
&lt;p&gt;グループ内の同僚の開発環境では、彼のCentOS 7はVMware上にデプロイされており、リソース使用量は正常に表示されています。一方、上海の開発環境でも同様にVMwareですが、ホストマシンのCPUリソース状況を直接観察することができません。このとき、私たちはVMware仮想マシン、Linuxオペレーティングシステム、そしてGCCバージョンという複数の変数に直面しています。&lt;/p&gt;
&lt;p&gt;転換してテスト環境を分析すると、深センのテスト環境は物理マシン上にデプロイされており、古いバージョンのGCCコンパイルサービスが稼働しており、CentOS 8上で動作している。興味深いことに、深セン環境では&lt;code&gt;irq&lt;/code&gt;の使用状況は正常である。&lt;/p&gt;
&lt;p&gt;問題の切り分けのため、より新しいバージョンの GCC でコンパイルしたプログラムを深セン環境にデプロイしてテストした結果、すべて正常でした。&lt;/p&gt;
&lt;p&gt;問題はより明確になりつつあり、オペレーティングシステムに問題があるのではないかと疑い始めています。結局のところ、CentOS 8 は公式サポートが終了しているのです。しかし、クリーンな CentOS 7 と CentOS 8 を再デプロイしても、問題は依然として存在します。&lt;/p&gt;
&lt;p&gt;今のところ、唯一の不確定要素であるVMware仮想マシンソフトウェアを疑い始めています。すると突然、Hyper-V技術が頭に浮かびました。以前にHyper-Vが有効になっていて、完全にシャットダウンされなかったために、このような問題が発生したのでしょうか？結局のところ、ソフト割り込みも仮想マシンソフトウェアによって実現されています。異なる仮想化技術にバグは存在しないのでしょうか？これらの問題は深く考察し、調査する価値があります。&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;マイクロソフトの公式マニュアルによると、ローカルのHyper-Vサービスを完全にシャットダウンしたところ、VMwareがホスト上で正常に復旧しました。これで問題はついに解決しました。当初から述べたように、この経験は紆余曲折し、包括的な分析と判断が必要でした。これも初めて問題をトラブルシューティングし、仮想マシンレベルまで特定することになった事例です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor
bcdedit /set hypervisorlaunchtype off
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43;プログラミングの落とし穴：`std::map` の誤った使用によるプログラムクラッシュの詳細解説</title>
        <link>https://ttf248.life/ja/p/cpp-programming-traps-std-map-crash-details/</link>
        <pubDate>Sun, 10 Mar 2024 22:03:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-programming-traps-std-map-crash-details/</guid>
        <description>&lt;p&gt;C++プログラミングにおいて、&lt;code&gt;std::map&lt;/code&gt;コンテナの誤った使用がプログラムをクラッシュさせる可能性があることを明らかにすることを目的としています。角括弧演算子で存在しないキーにアクセスしようとすると、自動的に空要素が追加されます。この誤解について深く分析し、サンプルコードを通じて潜在的なリスクを示します。&lt;/p&gt;
&lt;p&gt;単純な値を格納する分には問題ありませんが、ポインタを格納すると問題が発生します。ポインタはアドレスであり、初期化されていない場合、そのアドレスは未確定となり、プログラムのクラッシュにつながる可能性があります。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;C++標準ライブラリにおいて、&lt;code&gt;std::map&lt;/code&gt;は関連コンテナであり、キーによる昇順に要素を格納し、効率的なキーワード検索機能を提供します。しかし、初心者開発者は、&lt;code&gt;std::map&lt;/code&gt;の角括弧演算子 &lt;code&gt;[]&lt;/code&gt; の動作に関する理解違いから苦労することがあります。実際には、&lt;code&gt;[]&lt;/code&gt;を使って存在しないキーにアクセスすると、&lt;code&gt;std::map&lt;/code&gt;は新しいキーと値のペアを挿入し、デフォルトコンストラクタを使用してそのキーに対応する値の型を初期化します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int main() {
    std::map&amp;lt;std::string, int&amp;gt; myMap;
    
    // 错误的用法：假设这里试图访问一个不存在的键并认为会得到0
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for &#39;nonexistent_key&#39;: &amp;quot; &amp;lt;&amp;lt; myMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;

    // 实际上，上述行代码创建了一个新的键值对，其中值被默认初始化为int的默认值（通常是0）
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコードはプログラムを直接クラッシュさせることはありませんが、このような暗黙的な挿入処理は、リソースリークや予期しない状態変化といった副作用を引き起こす可能性があります。さらに悪いことに、マルチスレッド環境で未初期化のメモリ領域に同時にアクセスすると、プログラムがクラッシュする可能性もあります。&lt;/p&gt;
&lt;p&gt;そのような問題を防ぐために、&lt;code&gt;std::map::find()&lt;/code&gt;または&lt;code&gt;std::map::count()&lt;/code&gt;メソッドを使用してキーの存在を確認するか、&lt;code&gt;std::map::insert()&lt;/code&gt;メソッドを用いて明示的に要素を挿入することを推奨します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::map&amp;lt;std::string, int&amp;gt; safeMap;
if (safeMap.count(&amp;quot;nonexistent_key&amp;quot;) == 0) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Key does not exist.&amp;quot; &amp;lt;&amp;lt; std::endl;
} else {
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for existing key: &amp;quot; &amp;lt;&amp;lt; safeMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;
}

// 或者明确插入一个键值对，指定初始值
safeMap.insert({ &amp;quot;new_key&amp;quot;, 0 });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もしmapコンテナ内にポインタ型のオブジェクトが格納されている場合、要素を自動的に挿入すると初期化されていないポインタが保存され、そのポインタに対するいかなる操作もプログラムのクラッシュにつながる可能性があります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>pstackでプロセスフリーズを調査</title>
        <link>https://ttf248.life/ja/p/pstack-troubleshooting-process-hang/</link>
        <pubDate>Sat, 24 Feb 2024 23:55:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/pstack-troubleshooting-process-hang/</guid>
        <description>&lt;p&gt;ソフトウェア開発と運用において、プロセスがフリーズする状況に遭遇することがよくあります。この状況はシステムパフォーマンスの低下やサービス停止を引き起こす可能性があります。本稿では、pstackツールを使用してプロセスフリーズの問題をトラブルシューティングする方法について説明します。プロセスのスタック情報を分析することで、問題の原因を特定し解決します。&lt;/p&gt;
&lt;p&gt;風控システムの子サービスがフリーズし、風控サービスが利用できなくなった。サービス可用性の監視が不足していたため、プロセスのフリーズをタイムリーに発見できず、システムが利用不能となった。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;プロセスが応答しなくなる現象を「プロセスデッドロック」と呼びます。これは、プロセスが終了することなく停止した状態です。この状況は、デッドロック、リソース枯渇、例外など、さまざまな原因によって引き起こされる可能性があります。このような問題を解決するために、pstackツールを使用してプロセスのスタック情報を分析し、問題の根本原因を特定することができます。&lt;/p&gt;
&lt;h2 id=&#34;手順&#34;&gt;手順
&lt;/h2&gt;&lt;p&gt;pstack は、よく使われるツールで、通常は gdb (GNU デバッガー) と一緒に提供されます。以下のコマンドでインストールできます:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install gdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プロセスIDの取得：まず、スリープ状態のプロセスのプロセスID（PID）を取得する必要があります。psコマンドを使用してすべてのプロセスをリストし、調査対象のプロセスIDを見つけます。
pstack ツールを使用してプロセススタックを分析します。プロセス ID を取得したら、pstack ツールを使用してそのプロセスのスタック情報を取得できます。以下のコマンドを実行してください:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pstack &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロセスが実行している関数呼び出しシーケンスを表示し、スタック情報を出力します。これらの情報から、プロセスの停止位置を特定し、問題の箇所を突き止めることができます。&lt;/p&gt;
&lt;p&gt;スタック情報を解析することで、プロセスの応答なしの原因を特定できます。デッドロック、無限ループ、その他の異常な状況が発見される可能性があります。具体的な状況に応じて、ロックの解放やコードロジックの修正などの適切な対策を講じてください。&lt;/p&gt;
&lt;h2 id=&#34;事例&#34;&gt;事例
&lt;/h2&gt;&lt;p&gt;シンプルなデモで、メイン関数が起動した後、新しいスレッドを作成し、実際の実行関数に入ると無限ループに陥り、プログラムが正常に終了せず、フリーズした状態になります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake_minimum_required(VERSION 3.0.0)
project(pstack_main VERSION 0.1.0 LANGUAGES C CXX)

include(CTest)
enable_testing()

# 查找线程库
find_package(Threads REQUIRED)

add_executable(pstack_main main.cpp)

# 链接线程库
target_link_libraries(pstack_main PRIVATE Threads::Threads)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;
#include &amp;lt;chrono&amp;gt;

void infiniteLoop() {
    while (true) {
        // 主线程进入死循环
    }
}

int main() {
    std::thread thread(infiniteLoop); // 创建一个线程，执行死循环函数
    thread.join(); // 等待线程结束
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プログラムを開始し、pstack の結果を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Thread 2 (Thread 0x7eff3619b700 (LWP 1315017)):
#0  infiniteLoop () at /root/pstack/main.cpp:6
#1  0x0000000000402ca9 in std::__invoke_impl&amp;lt;void, void (*)()&amp;gt; (__f=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:60
#2  0x0000000000402b02 in std::__invoke&amp;lt;void (*)()&amp;gt; (__fn=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:95
#3  0x0000000000403150 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::_M_invoke&amp;lt;0ul&amp;gt; (this=0x2260eb8) at /usr/include/c++/8/thread:244
#4  0x0000000000403126 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::operator() (this=0x2260eb8) at /usr/include/c++/8/thread:253
#5  0x000000000040310a in std::thread::_State_impl&amp;lt;std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt; &amp;gt;::_M_run (this=0x2260eb0) at /usr/include/c++/8/thread:196
#6  0x00007eff36bceb23 in execute_native_thread_routine () from /lib64/libstdc++.so.6
#7  0x00007eff36ea91ca in start_thread () from /lib64/libpthread.so.0
#8  0x00007eff361d58d3 in clone () from /lib64/libc.so.6
Thread 1 (Thread 0x7eff372e1740 (LWP 1315016)):
#0  0x00007eff36eaa6cd in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
#1  0x00007eff36bceda7 in std::thread::join() () from /lib64/libstdc++.so.6
#2  0x00000000004029d2 in main () at /root/pstack/main.cpp:13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;確認すると、プロセスのフリーズの原因は無限ループです。メインスレッドが無限ループに入り、サブスレッドが終了できず、結果としてプロセスがフリーズします。&lt;/p&gt;</description>
        </item>
        <item>
        <title>走ってみれば、どうにかなるものだ。</title>
        <link>https://ttf248.life/ja/p/come-out-and-walk-around-its-always-good/</link>
        <pubDate>Thu, 08 Feb 2024 10:30:43 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/come-out-and-walk-around-its-always-good/</guid>
        <description>&lt;p&gt;もし、当時は家の計画通りに、真面目に電力系統について学んでいたら、きっと私はごく普通の従順な男になっていただろう。&lt;/p&gt;
&lt;p&gt;記憶の埃を払い落としたのは、やはり旧正月が近づいていたことと、ルームメイトとの会話がきっかけだった。それに伴い、数年間の出来事を整理した。&lt;/p&gt;
&lt;h2 id=&#34;第一章&#34;&gt;第一章
&lt;/h2&gt;&lt;p&gt;共通テストの成績は良いとも悪いとも言えないし、211大学を卒業した。父の当初の計画では、私は電力網についてしっかり勉強して、故郷の市にある電力局で働くはずだった。以前にも稿子で書いたように、ITの道に進むまでの経緯については、少し忘れていた部分がある：金銭感覚と自制心。&lt;/p&gt;
&lt;p&gt;初一まだ村の学校に通っていて、初二になったら実家が引っ越し手配で市内の中学校に転校した。まるで劉姥姥が大家園に来たように、市内の華やかさに最初は戸惑った。子供の頃はあまり映画館に行ったことがなかったし、正確には両親と一緒に行ったことがなかった。親戚に連れて行かれたことはあった。幸運はいつか訪れるものだ。その時、気が合う仲間たちに出会えた。その後連絡は少なくなったが、あの頃の少年時代を振り返れば美しい思い出だ。週末の補習が終わると、みんなで教室のペットボトルを集めて、慣れた手つきで足で踏みつぶしてカバンに入れ、母に持って行かせた。集まったら廃品回収業者に持っていった。一緒に将棋やバドミントンをしたり、斗地主（トウチー）をしたり、負けた罰として腕立て伏せを数回する。あの頃は少しありがたかった。父は小さい頃から色々な運動をさせてくれたのだ。この頃から、お金に対する考え方が少しずり上がり、少し自信がなくなった。しかし、これらの小さな不幸はあっという間に過ぎ去った。家計も苦しくなかったわけではないし、実際にはお小遣いはあまりなかった。周りの友達と遊べない時もあったし、特に週末は、親の努力が目に見えるほどだった。村から引っ越して市内へ来たのだ。その時、種はすでに植えられ、芽が出るのを待っていた。&lt;/p&gt;
&lt;p&gt;頭の単純な私ですが、学生時代は全体的にとても幸せでした。まるで多くの人が卒業後に初めて気づくように、勉強はそれほど難しいことではなく、投資と成果が比較的簡単に変換されるものです。&lt;/p&gt;
&lt;p&gt;積み重ねられた幼少期の帝国時代の記憶があり、大学時代に入るとノートパソコンに触れたことで、まるでパンドラの箱を開けたようにゲームに接触し、ゲーム商人という役割との繋がりも生まれた。 最初は下層の営業担当者として、上流から仕入れ物を手に入れ、自分のコミュニティのチャネルを通じて少しずつ商品を販売し、少しお金を稼いだ。 徐々に全体のリンクの動作ロジックが理解されていった。 私たちが販売する商品は、結局は上流プログラムによって大量に孵化されたもので、コストはほぼゼロに近い。 その時、道は少しずれてしまった。 専門分野には細分化された専門があり、左側は電力網、右側は自動化（非常に雑多で、チッププログラミング、工場電気自動化）である。 プログラムがお金を稼げることを理解し、それは小さな金額ではない。 チャネルの上流では確かに多くのお金が稼げている。 さらに、以前からプログラミングの基礎があったため、色々なものをあれこれとやっているうちに少しお金を稼ぎ、分科会で自然と自動化を選んだ。 3年生の専門科目にはほとんど出席せず、毎日頭の中でコードを書いてお金を稼ぐことばかり考えていた。&lt;/p&gt;
&lt;p&gt;昨年の記事で触れたように、ハッカーへの美らな憧れを抱いてプログラミングに触れた非理系のIT担当者が、慈悲の心をもってアセンブリ、ペネトレーションテスト、ゲームチート、DLLハイジャック、アカウント盗難などを行い、様々なブラックビジネスやグレービジネスに精通し理解した。両親は人としての道を示してくれ、法律も忠告してくれたおかげで、道は完全に曲がってはいない。&lt;/p&gt;
&lt;p&gt;前の投稿へのリンク：[あの頃の少年]({&amp;lt; relref &amp;ldquo;/post/2023/01-09-あの頃の少年&amp;rdquo; &amp;gt;}})&lt;/p&gt;
&lt;p&gt;大学時代にも一度恋愛をしたことがありますが、振り返ってみると、それはテレビドラマの恋愛を憧れていたようなもので、未熟な私には、人を愛する方法も、家庭を築くことも理解できなかったのです。&lt;/p&gt;
&lt;h2 id=&#34;第２章&#34;&gt;第２章
&lt;/h2&gt;&lt;p&gt;時代の洪流の中、私もまた幸運だったと言えるだろう。大学での色々を経て、当然ながら研究院に進むことはなく、卒業後すぐに就職し、ITの追い風に乗って、順調に仕事は進んだ。すでに勤めてから8年目に入り、業界の熱い資金は消え去り、終焉を迎えようとしている。時々、当初の選択が間違っていたのではないか、当時父親の言うことを聞いて電力会社に入るのがもっと良い選択だったのではないかと疑うこともある。仕事始めの最初の5年間くらいはそういった考えもあったが、その後は徐々に消えていった。採用面接で恒生に入り、5年間一度も会社を変えず、技術や業界に関する認識、そして自身の能力に関する認識にも一定の欠陥があった。杭州本部の指示に従い、深圳分社へ赴任し、職場の権力闘争を経験した（後になって振り返ってみると、両側とも負け、最終的な勝者は取締役会だった）。技術への愛を抱き、杭州に戻り、少しばかり若さゆえの無自覚さを抱えたまま、杭州から撤退し、上海へ向かった。&lt;/p&gt;
&lt;p&gt;元々杭州で落ち着いて家を建て、物件を購入する計画でしたが、金利のピークと不動産価格の高騰期に参入すると、住宅ローンに絡まってしまいそうになり、貯蓄も少ないので無理はできません。住宅ローンを抱えて結婚するというプレッシャーに加え、業界の不況が重なると、精神的にも不安定になりやすいです。&lt;/p&gt;
&lt;h2 id=&#34;第三章&#34;&gt;第三章
&lt;/h2&gt;&lt;p&gt;長年歳月を過ごし、様々なことを経験し、物غبしいことも、浪費したこともあったが、今のところは穏やかだ。色々な出来事と人々を経験して、ようやく成長できたと言えるだろう。もしずっと家にいれば、性格の欠陥がどんな形で爆発するか分からない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43;関数呼び出しにかかる時間</title>
        <link>https://ttf248.life/ja/p/cpp-function-call-timing/</link>
        <pubDate>Wed, 24 Jan 2024 14:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-function-call-timing/</guid>
        <description>&lt;p&gt;設計のSDKについて、様々なコールバック関数の実装方法で、時間のかかるテストを実施しました。最近はC++の関数プログラミングを見ており、関数がファーストクラスオブジェクトとなり、プログラム内で流通すると、パフォーマンスに違いはありますか？&lt;/p&gt;
&lt;p&gt;先行記事へのリンク：[コンパイラ、コールバック関数、パフォーマンステスト]({&amp;lt; relref &amp;ldquo;/post/2023/02-15-コンパイラ、コールバック関数、パフォーマンステスト&amp;rdquo; &amp;gt;}})&lt;/p&gt;
&lt;p&gt;雷冒大佬正好也做了类似测试，借了代码来用。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;実行プラットフォームは、引き続き弊社の旧友である &lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt; です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cassert&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

int add_one(int input) { return input + 1; }

bool validate_vector_add_one(std::vector&amp;lt;int&amp;gt; const&amp;amp; input_vector,
                             std::vector&amp;lt;int&amp;gt; const&amp;amp; output_vector)
{
    bool is_valid{true};
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        if (output_vector.at(i) != input_vector.at(i) + 1)
        {
            is_valid = false;
            break;
        }
    }
    return is_valid;
}

void reset_vector(std::vector&amp;lt;int&amp;gt;&amp;amp; input_vector)
{
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        input_vector.at(i) = 0;
    }
}

template &amp;lt;typename T, typename Func&amp;gt;
void unitary_function_pass_by_lambda_function(T&amp;amp; output, T const&amp;amp; input,
                                              Func const func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_std_function_value(T&amp;amp; output, T const&amp;amp; input,
                                                 std::function&amp;lt;T(T)&amp;gt; const func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_std_function_reference(
    T&amp;amp; output, T const&amp;amp; input, std::function&amp;lt;T(T)&amp;gt; const&amp;amp; func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_function_pointer(T&amp;amp; output, T const&amp;amp; input,
                                               T (*func)(T))
{
    output = func(input);
}

int main()
{
    // Set floating point format std::cout with 3 decimal places.
    std::cout.precision(3);

    size_t const num_elements{10000000};
    std::vector&amp;lt;int&amp;gt; input_vector(num_elements, 0);
    std::vector&amp;lt;int&amp;gt; output_vector(num_elements, 0);

    auto const lambda_function_add_one{[](int const&amp;amp; input) -&amp;gt; int
                                       { return input + 1; }};
    std::function&amp;lt;int(int)&amp;gt; const std_function_add_one{lambda_function_add_one};

    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a function pointer: &amp;quot; &amp;lt;&amp;lt; sizeof(&amp;amp;add_one)
              &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a std::function pointer: &amp;quot;
              &amp;lt;&amp;lt; sizeof(&amp;amp;std_function_add_one) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a std::function: &amp;quot; &amp;lt;&amp;lt; sizeof(std_function_add_one)
              &amp;lt;&amp;lt; std::endl;

    // Call function frequently in a vanilla way.
    // The compiler knows what function to call at compile time and can optimize
    // the code.
    // This is the best performance we could get.
    std::chrono::steady_clock::time_point const time_start_vanilla{
        std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        output_vector.at(i) = add_one(input_vector.at(i));
    }
    std::chrono::steady_clock::time_point const time_end_vanilla{
        std::chrono::steady_clock::now()};
    auto const time_elapsed_vanilla{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(time_end_vanilla -
                                                             time_start_vanilla)
            .count()};
    float const latency_vanilla{time_elapsed_vanilla /
                                static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass Vanilla: &amp;quot; &amp;lt;&amp;lt; latency_vanilla &amp;lt;&amp;lt; &amp;quot; ns&amp;quot;
              &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // Sometimes, we don&#39;t know what function to call at compile time.
    // We can use std::function to pass a function as an argument.
    // In this case, we pass the std::function by value.
    // Because the size of a std::function is 32 bytes, passing by value
    // results in a lot of copying and bad performance.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_std_function_value{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_std_function_value(
            output_vector.at(i), input_vector.at(i), std_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_std_function_value{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_std_function_value{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_std_function_value -
            time_start_pass_by_std_function_value)
            .count()};
    float const latency_pass_by_std_function_value{
        time_elapsed_pass_by_std_function_value /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Std Function Value: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_std_function_value &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // Instead of passing the std::function by value, we can pass it by
    // reference (pointer). In this case, object copying is eliminated. The
    // performance is better than passing the std::function by value. However,
    // the performance is still not as good as the vanilla way.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_std_function_reference{
            std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_std_function_reference(
            output_vector.at(i), input_vector.at(i), std_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_std_function_reference{
            std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_std_function_reference{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_std_function_reference -
            time_start_pass_by_std_function_reference)
            .count()};
    float const latency_pass_by_std_function_reference{
        time_elapsed_pass_by_std_function_reference /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Std Function Reference: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_std_function_reference &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // std::function is a general purpose wrapper for function pointers,
    // callable objects, and lambda functions. Because it&#39;s general purpose,
    // it&#39;s not as efficient as a function pointer. In this case, we pass a
    // function pointer to a function. The performance is better than passing
    // the std::function by reference.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_function_pointer{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_function_pointer(output_vector.at(i),
                                                  input_vector.at(i), &amp;amp;add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_function_pointer{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_function_pointer{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_function_pointer -
            time_start_pass_by_function_pointer)
            .count()};
    float const latency_pass_by_function_pointer{
        time_elapsed_pass_by_function_pointer /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Function Pointer: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_function_pointer &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // We can also pass a lambda function to a function.
    // The compiler knows what function to call at compile time and can optimize
    // the code. The performance is also better than passing the std::function
    // by reference.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_lambda_function{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_lambda_function(
            output_vector.at(i), input_vector.at(i), lambda_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_lambda_function{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_lambda_function{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_lambda_function -
            time_start_pass_by_lambda_function)
            .count()};
    float const latency_pass_by_lambda_function{
        time_elapsed_pass_by_lambda_function /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Lambda Function: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_lambda_function &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 组里常规也就开启 O2 优化，编译选用了 gcc13，不同版本的 gcc 性能耗时略有不同，版本越高 lambda 效果越好
The size of a function pointer: 8
The size of a std::function pointer: 8
The size of a std::function: 32
Latency Pass Vanilla: 0.418 ns
Latency Pass By Std Function Value: 3.47 ns
Latency Pass By Std Function Reference: 1.36 ns
Latency Pass By Function Pointer: 0.396 ns
Latency Pass By Lambda Function: 0.44 ns
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://leimao.github.io/blog/CPP-Function-Call-Performance/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://leimao.github.io/blog/CPP-Function-Call-Performance/&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>コンピュータがなぜ一般的にリトルエンディアンを採用しているのか</title>
        <link>https://ttf248.life/ja/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;バイトオーダーに関する解説[ホストOS順、ネットワークOS順、デバッガーで直接観察する]({&amp;lt; relref &amp;ldquo;/post/2023/01-10-ホストOS順、ネットワークOS順、デバッガーで直接観察する&amp;rdquo; &amp;gt;}})&lt;/p&gt;
&lt;p&gt;コンピュータ分野で歴史的な経緯から形成されたある種の設計習慣は、おべっか粉の幅がロケット推進器の幅を決める道理と同じで、無理に「利点」「欠点」を分析する必要はなく、単なる慣習です。&lt;/p&gt;
&lt;h2 id=&#34;元のリンク&#34;&gt;元のリンク
&lt;/h2&gt;&lt;p&gt;著者：北極
リンク：&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
出典：知乎
著作権は著者に帰属します。商業目的での転載には、著者に許可を得てください。非商用目的での転載の場合は、出典を明記してください。&lt;/p&gt;
&lt;h2 id=&#34;転載本文&#34;&gt;転載本文
&lt;/h2&gt;&lt;p&gt;現在のビッグエンディアン／リトルエンディアンの状況は、歴史的な慣習と商業化の結果であり、技術そのものとは大きく関係ありません。ARMは、ビッグエンディアンにもリトルエンディアンにも設定できます。TCP/IPヘッダーも現在でもビッグエンディアン（ネットワークバイトオーダー）です。ストレージ分野においても、多くのストレージプロトコル／仕様でデータは大端方式で保存されています。&lt;/p&gt;
&lt;p&gt;ですから、質問者の３つの質問は、今日の視点から見ると：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンピュータがなぜ一般的にリトルエンディアンを採用しているのか？→ 誤り。&lt;/li&gt;
&lt;li&gt;効率は必ずしも高くなるわけではありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;現代の技術をもってしても、これらの問題を論証するのは、矢を放ってから的に当てるような行為だ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;しかし、ビッグエンディアンかリトルエンディアンかの選択に関して言えば、コンピュータの発展史の中で、確かに一定の客観的な要因がありました。ホスト・バイトオーダー（リトルエンディアン）の利点：リトルエンディアンの方が加算回路が作りやすいです。8ビット*4の加算器を作る場合、1つの8ビット加算器で十分で、低位から高位へ順に各バイトを足し合わせれば良いのです。キャリー回路は非常にシンプルですが、ビッグエンディアンの場合、一度に32ビットをロードする必要があり、そうしないと計算できません。現在では、一度に8ビットか32ビットかをロードする違いはそれほど大きくありませんが、数十年前のメモリ価格が高かったため、できるだけシンプルな方が良いので、ホスト・バイトオーダーのリトルエンディアンを選択したのはコストを考慮した結果です。ネットワーク・バイトオーダー（ビッグエンディアン）の利点：初期のデバイスのキャッシュは非常に小さく、上位バイトを受信することで、パケット情報を迅速に判断できました。バッファサイズ（どれくらいのキャッシュを用意する必要があるか）、アドレス範囲（IPアドレスは先頭からマッチングされる）です。初期のネットワークデバイスのキャッシュはバイト単位で動作しており、上位バイトを取得すると確かに少し速くなります。そのため、ネットワークデバイスがビッグエンディアンを使用しているのも、コストを考慮した結果です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;そのため、バイトオーダーの選択は、歴史的に見ると、主にアプリケーションのシナリオやコストを考慮したものでした（例えば、PPC/MIPSはネットワーク機器に適しているなど）。そして、その後の技術発展の中で、互換性のために、リトルエンディアン／ビッグエンディアンの設定が現在まで引き継がれています。&lt;/p&gt;
&lt;p&gt;今日において、これらの利点は完全に消滅しており、単なる慣習となっている。&lt;/p&gt;</description>
        </item>
        <item>
        <title>プログラムがデバッグを回避する方法</title>
        <link>https://ttf248.life/ja/p/program-how-to-anti-debug/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-how-to-anti-debug/</guid>
        <description>&lt;p&gt;ふと思いついて、新しい壁紙を探してみることに。普段は黒系のシリーズを使っているから、一部の領域にカラフルなものを配置し、デスクトップにはアイコンを置きたい。他の配色で壁紙にすると、アイコンがぼやけてしまうだろう。&lt;/p&gt;
&lt;p&gt;上のアセンブリコードをしばらく考えてみたけど、理解できない。AIに頼んでみると、命令は説明してくれたものの、状況の説明はない。これは必ず特定の状況で使われる命令だろう。通常のコードではありえない。&lt;/p&gt;
&lt;p&gt;AIは今のところ検索エンジンに劣りますね、アセンブリ言語の知識が足りていないからです。&lt;/p&gt;
&lt;h2 id=&#34;壁紙&#34;&gt;壁紙
&lt;/h2&gt;&lt;p&gt;黒色の集合壁紙&lt;/p&gt;
&lt;h2 id=&#34;アセンブリコード&#34;&gt;アセンブリコード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現実的な応用シーン&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;説明&#34;&gt;説明
&lt;/h2&gt;&lt;p&gt;TrapFlagは、フラグレジスタ内のフラグであり、このフラグが設定されると例外SINGLE_STEPが発生します。もしコードをトレースしている場合、デバッガによってこのフラグはクリアされるため、この例外を見ることができません。&lt;/p&gt;
&lt;p&gt;実際のテストでは、検出デバッグの関数をステップオーバーで通過すると、デバッグが検出されないことがわかった。検出関数を実行する際にステップインした場合のみ検出される。(資料調査、未検証)&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;関連資料は、ウェブサイトの英語版を翻訳したもので、サイトでは様々なデバッグ対策技術が解説されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>焦点インタビュー/CCTVビデオファイルのダウンロード方法</title>
        <link>https://ttf248.life/ja/p/how-to-download-focus-interview-cctv-video-files/</link>
        <pubDate>Tue, 23 Jan 2024 19:23:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/how-to-download-focus-interview-cctv-video-files/</guid>
        <description>&lt;p&gt;最近、誰かが「焦点訪談の動画をダウンロードするにはどうすればいいか」と問い合わせてきた。頭の中で十に八九はまた &lt;code&gt;m3u8&lt;/code&gt; の形式で暗号化されているのだろうと考えていたので、簡単に処理してみた。&lt;/p&gt;
&lt;h2 id=&#34;ダウンローダー&#34;&gt;ダウンローダー
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/nilaoda/N_m3u8DL-CLI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/nilaoda/N_m3u8DL-CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;m3u8 ダウンローダー。オープンソースのコマンドライン m3u8/HLS/dash ダウンローダーで、標準的な AES-128-CBC 復号化、マルチスレッド、カスタムリクエストヘッダなどをサポートします。簡体中文、繁体中文、英語をサポートしています。English Supported&lt;/p&gt;
&lt;h2 id=&#34;ブラウザ拡張機能&#34;&gt;ブラウザ拡張機能
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://microsoftedge.microsoft.com/addons/detail/ngjclnbcdbahekojpkhancmiobdahemb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Live Stream Downloader&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;蜜に浸した自信&#34;&gt;蜜に浸した自信
&lt;/h2&gt;&lt;p&gt;住所の情報を入手したと思ったのに、結局何も解決せず、セグメントの内容を正常に解析できず。資料を確認すると、公式側でダウンロードアドレスが処理されていることがわかり、プラグインから解析された&lt;code&gt;key&lt;/code&gt;を手動で下のリンクにコピー＆リプレースする必要がある。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;https://newcntv.qcloudcdn.com/asp/hls/2000/0303000a/3/default/***********************/2000.m3u8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2024年1月まで、住所テストは有効です。その後の変更については、ご自身でウェブページを解析してください。&lt;/p&gt;
&lt;p&gt;過去のアドレスのバックアップ：&lt;code&gt;https://hlswx.cntv.kcdnvip.com/asp/hls/main/0303000a/3/default/一連の文字/main.m3u8?maxbr=2000&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://jln.cn/post/517.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jln.cn/post/517.html&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>一括でSQL Serverデータベースディスクファイル権限を変更する</title>
        <link>https://ttf248.life/ja/p/bulk-modify-sqlserver-database-disk-file-permissions/</link>
        <pubDate>Tue, 23 Jan 2024 19:06:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-modify-sqlserver-database-disk-file-permissions/</guid>
        <description>&lt;p&gt;会社のセキュリティポリシー変更により、&lt;code&gt;機械師mini&lt;/code&gt;は結局、バックアップサーバーとして自宅へ移設され、マシンシステムを再インストールしました。&lt;code&gt;Ubuntu&lt;/code&gt;から&lt;code&gt;Windows Server&lt;/code&gt;に移行しましたが、認証の方法が正規ではないため、自宅で使用する分には認証なしでも問題なさそうです。&lt;/p&gt;
&lt;p&gt;非正規品による起動で、Microsoftの検出がトリガーされました（半月ほど正常に動作していました）。サーバーを起動して1時間後に自動的にシャットダウンされ、システムログを確認したところ、違法コピーが原因であることがわかりました。&lt;/p&gt;
&lt;p&gt;どうにもならない、再度OSを入れ直すしかない。&lt;code&gt;SqlServer&lt;/code&gt;も再インストールが必要になりそう。毎回面倒くさいことになり、ファイル権限の管理が厳しすぎて、データベースを正常にアタッチできない。&lt;/p&gt;
&lt;h2 id=&#34;エラーメッセージ&#34;&gt;エラーメッセージ
&lt;/h2&gt;&lt;p&gt;システムを再インストールした後、&lt;code&gt;SqlServer&lt;/code&gt;がデータベースの追加時に5120エラーやオペレーティングシステムのアクセス拒否が発生する可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;スクリプト処理&#34;&gt;スクリプト処理
&lt;/h2&gt;&lt;p&gt;前の関連記事：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/&#34; &gt;ローカルGitリポジトリの一括更新&lt;/a&gt;。またこの馴染み深いスクリプトですが、改造してフォルダをトラバースしながらファイルの権限を変更します。現在、完全に編集する権限を持っています。&lt;/p&gt;
&lt;p&gt;オンラインのチュートリアルはほとんどが手動での修正を求めてくるけど、彼らは毎回数ファイルしか変更しないの？私は毎回大量のファイルを処理しなければならないし、全部手動でやるから精神が疲弊する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$rootDirectory = &amp;quot;D:\data\2013_RujiaInfo&amp;quot;

Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    if ($_ -is [System.IO.DirectoryInfo]) {
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
            # 授予当前用户写入权限
            Invoke-Expression &amp;quot;icacls `&amp;quot;$itemPath`&amp;quot; /grant `&amp;quot;$($currentUserName):(OI)(CI)F`&amp;quot;&amp;quot;
            Write-Host &amp;quot;已授予 $currentUserName 编辑文件夹的权限&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # 授予当前用户写入权限
            Invoke-Expression &amp;quot;icacls `&amp;quot;$itemPath`&amp;quot; /grant `&amp;quot;$($currentUserName):(F)`&amp;quot;&amp;quot;
            Write-Host &amp;quot;已授予 $currentUserName 编辑文件的权限&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Linuxシステムベンチマークテスト</title>
        <link>https://ttf248.life/ja/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;ウィンドウズプラットフォームには、魯大师（ユーエンターマスター）というソフトがあります。データが正確とは言えませんが、まあ参考程度にはなるでしょう。もちろん、他のプロフェッショナルなベンチマークソフトもあります。Linuxシステムでは、特によく合うベンチマークソフトにまだ出会っていません。&lt;/p&gt;
&lt;p&gt;Sysbenchは、CPU、メモリ、ファイルI/O、スレッドパフォーマンスなどをテストできる多機能なベンチマークツールです。さまざまなパフォーマンス・テストのタスクを実行するためにsysbenchを使用できます。&lt;/p&gt;
&lt;p&gt;現在、テスト用にちょうど3つの機械があります：メカニストミニローカルホスト、アリババクラウド開発雲サーバー、ファーウェイクラウド開発サーバー。&lt;/p&gt;
&lt;h2 id=&#34;sysbenchのインストール&#34;&gt;Sysbenchのインストール
&lt;/h2&gt;&lt;p&gt;ほとんどのLinuxディストリビューションでは、パッケージマネージャーを使用してSysbenchをインストールできます。例えば、CentOS 8では、以下のコマンドでインストールできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbenchの使用例&#34;&gt;Sysbenchの使用例
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU性能テスト：&lt;code&gt;sysbench --test=cpu run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;メモリ読み取りパフォーマンスのテスト：&lt;code&gt;sysbench --test=memory run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;テストファイルI/Oパフォーマンス：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッドパフォーマンスのテスト: &lt;code&gt;sysbench --test=threads --num-threads=4 run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MySQLデータベースのパフォーマンスをテストする（データベースの最大接続数を調整する必要があります）。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;データ分散報告&#34;&gt;データ分散報告
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34; style=&#34;width:421px;&#34; class=&#34;column-headers-background&#34;&gt;B&lt;/th&gt;&lt;th id=&#34;0C2&#34; style=&#34;width:398px;&#34; class=&#34;column-headers-background&#34;&gt;C&lt;/th&gt;&lt;th id=&#34;0C3&#34; style=&#34;width:422px;&#34; class=&#34;column-headers-background&#34;&gt;D&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R0&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;本地机械师&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;华为云&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;系统配置&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 23.04&lt;br&gt;  Kernel                        Linux 6.2.0-36-generic x86_64&lt;br&gt;  Model                         Machenike Machenike DT Computer&lt;br&gt;  Motherboard                   Machenike Machenike DT Computer&lt;br&gt;  BIOS                          American Megatrends International, LLC.&lt;br&gt;DB19V012&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel Core i7-12650H&lt;br&gt;  Topology                      1 Processor, 10 Cores, 16 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 154 Stepping 3&lt;br&gt;  Base Frequency                4.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB x 8&lt;br&gt;  L1 Data Cache                 48.0 KB x 8&lt;br&gt;  L2 Cache                      1.25 MB x 2&lt;br&gt;  L3 Cache                      24.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          62.6 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              CentOS Stream 8&lt;br&gt;  Kernel                        Linux 4.18.0-513.el8.x86_64 x86_64&lt;br&gt;  Model                         Alibaba Cloud Alibaba Cloud ECS&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS 449e491&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Platinum&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 4&lt;br&gt;  Base Frequency                2.50 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      33.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          1.65 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 22.04.1 LTS&lt;br&gt;  Kernel                        Linux 5.15.0-60-generic x86_64&lt;br&gt;  Model                         OpenStack Foundation OpenStack Nova&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS&lt;br&gt;rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Gold 6278C CPU @ 2.60GHz&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 7&lt;br&gt;  Base Frequency                2.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      35.8 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          3.64 GB&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R2&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;3&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;CPU&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  4032.48&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              40330&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.25&lt;br&gt;         avg:                                    0.25&lt;br&gt;         max:                                    0.73&lt;br&gt;         95th percentile:                        0.25&lt;br&gt;         sum:                                 9997.55&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           40330.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9975/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1062.51&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0008s&lt;br&gt;    total number of events:              10628&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.91&lt;br&gt;         avg:                                    0.94&lt;br&gt;         max:                                   22.84&lt;br&gt;         95th percentile:                        1.06&lt;br&gt;         sum:                                 9993.46&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           10628.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9935/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1125.56&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0005s&lt;br&gt;    total number of events:              11258&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.86&lt;br&gt;         avg:                                    0.89&lt;br&gt;         max:                                    1.70&lt;br&gt;         95th percentile:                        0.99&lt;br&gt;         sum:                                 9995.40&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           11258.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9954/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R3&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;4&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;内存&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 101993199 (10198146.52 per second)&lt;br&gt;&lt;br&gt;99602.73 MiB transferred (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              101993199&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.03&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4059.50&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           101993199.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.0595/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 48418803 (4841004.79 per second)&lt;br&gt;&lt;br&gt;47283.99 MiB transferred (4727.54 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              48418803&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                   25.26&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4578.95&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           48418803.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 57056904 (5704765.11 per second)&lt;br&gt;&lt;br&gt;55719.63 MiB transferred (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              57056904&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.06&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4556.06&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           57056904.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5561/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R4&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;5&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;硬盘&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 1.81 seconds (1129.59 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      3373.41&lt;br&gt;    writes/s:                     2248.94&lt;br&gt;    fsyncs/s:                     7201.80&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:               35.14&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0127s&lt;br&gt;    total number of events:              128288&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.08&lt;br&gt;         max:                                    5.14&lt;br&gt;         95th percentile:                        0.34&lt;br&gt;         sum:                                 9977.78&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           128288.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9778/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 19.29 seconds (106.16 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1593.12&lt;br&gt;    writes/s:                     1062.08&lt;br&gt;    fsyncs/s:                     3406.64&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  24.89&lt;br&gt;    written, MiB/s:               16.60&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0164s&lt;br&gt;    total number of events:              60600&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                   31.32&lt;br&gt;         95th percentile:                        0.54&lt;br&gt;         sum:                                 9956.30&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           60600.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9563/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 18.29 seconds (111.98 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1665.88&lt;br&gt;    writes/s:                     1110.59&lt;br&gt;    fsyncs/s:                     3563.77&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  26.03&lt;br&gt;    written, MiB/s:               17.35&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0112s&lt;br&gt;    total number of events:              63355&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                  205.01&lt;br&gt;         95th percentile:                        0.78&lt;br&gt;         sum:                                 9972.64&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           63355.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9726/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R5&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;多线程&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0002s&lt;br&gt;    total number of events:              197956&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.16&lt;br&gt;         avg:                                    0.20&lt;br&gt;         max:                                    0.34&lt;br&gt;         95th percentile:                        0.21&lt;br&gt;         sum:                                39970.47&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           49489.0000/5.70&lt;br&gt;    execution time (avg/stddev):   9.9926/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0174s&lt;br&gt;    total number of events:              18360&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:                                   32.77&lt;br&gt;         95th percentile:                        2.61&lt;br&gt;         sum:                                40050.41&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           4590.0000/94.36&lt;br&gt;    execution time (avg/stddev):   10.0126/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              28536&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.23&lt;br&gt;         avg:                                    1.40&lt;br&gt;         max:                                    3.56&lt;br&gt;         95th percentile:                        1.47&lt;br&gt;         sum:                                39975.16&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           7134.0000/39.87&lt;br&gt;    execution time (avg/stddev):   9.9938/0.01&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;ChatGPTは依然として便利なものだ。上の表は、以前習得したMarkdownだけでは完全にレイアウトできず、表にしないと表示効果が非常に悪くなる。カスタムテーマはページ幅の最大値を制限しており、ページの構成を調整し、幅をパーセント制限に変更した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シンプルな方法としては、TablesGeneratorのようなオンラインツールを使ってHTMLテーブルを生成する（複雑なコンテンツには向いていない）。&lt;/li&gt;
&lt;li&gt;またはGoogleドキュメントで作成し、HTML形式でダウンロードして、そのままブログにコピーする。（簡単で直接的、最終的に採用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定でunsafeの設定項目が有効になっていることを確認し、ページごとに幅を設定してください。&lt;/p&gt;
&lt;p&gt;Hugoにおいて、ページごとに幅を設定できます。これは、ページのFront Matterにカスタムパラメータを追加することで実現できます。以下はその例です。&lt;/p&gt;
&lt;p&gt;あなたのMarkdownページのFront Matterセクション（通常ファイルの先頭部分）に、例えば&lt;code&gt;custom_width&lt;/code&gt;のようなカスタムパラメータを追加してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;我的页面&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 设置宽度为 800 像素
---

正文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あなたのHugoテーマで、対応するシングルページテンプレートファイルを見つけたり作成したりしてください（例：&lt;code&gt;layouts/_default/single.html&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;シングルページテンプレートでは、ページのFront Matterに&lt;code&gt;custom_width&lt;/code&gt;パラメータがあるか確認し、あればそれに応じてHTML要素（例：&lt;code&gt;div&lt;/code&gt;）に適用する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、インラインスタイル（&lt;code&gt;style&lt;/code&gt;属性）を使用して&lt;code&gt;div&lt;/code&gt;要素に&lt;code&gt;max-width&lt;/code&gt;属性を設定し、&lt;code&gt;custom_width&lt;/code&gt;パラメータが指定されていない場合に幅を100%のデフォルト値に設定しています。&lt;code&gt;margin: 0 auto;&lt;/code&gt;は、&lt;code&gt;div&lt;/code&gt;要素を中心に配置するために使用されています。&lt;/p&gt;
&lt;p&gt;実際の応用では、テーマ構造やCSSスタイルの詳細に応じて、上記の例を調整する必要があるかもしれません。スタイルを調整する際は、テーマの一貫性と可読性を保つようにしてください。&lt;/p&gt;
&lt;p&gt;有効にしたテーマが少し異なっていたため、サイトのカスタムCSS設定を最終調整しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Gitが無効なHTTPリポジトリ</title>
        <link>https://ttf248.life/ja/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;ソフトウェアのバージョンを更新する習慣があり、どのバージョンの&lt;code&gt;Git&lt;/code&gt;からか不明ですが、&lt;code&gt;Http&lt;/code&gt;リポジトリからのコードのプルが禁止されています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h2&gt;&lt;p&gt;環境：Windowsプラットフォーム、いつもTortoiseGitを使ってgitを操作しており、秘密鍵の設定もTortoiseGit経由で行っています。以前にスクリプトを作成して、ローカルのリポジトリを一括で更新したことがあります。&lt;/p&gt;
&lt;p&gt;前の投稿へのリンク：[ローカルのGitリポジトリを一括更新する]({&amp;lt; relref &amp;ldquo;/post/2023/10-19-批量更新本地git仓库&amp;rdquo; &amp;gt;}})&lt;/p&gt;
&lt;p&gt;今日家に帰ってコードのアップデートを実行したところ、先ほどのエラーが発生し、リポジトリが正常に更新されなくなりました。&lt;code&gt;Git&lt;/code&gt;には設定があるはずだと考え、&lt;code&gt;http&lt;/code&gt;プロトコルで引き続きリポジトリをアップデートできるようにしようと思ったのですが、探しても該当の設定項目は見つかりませんでした。&lt;/p&gt;
&lt;p&gt;最も簡単な解決策は、もちろん &lt;code&gt;ssh&lt;/code&gt; プロトコルに切り替えてリポジトリを更新することです。会社の構成上、&lt;code&gt;gitlab&lt;/code&gt; は当面の間、&lt;code&gt;https&lt;/code&gt; プロトコルを提供しません。&lt;/p&gt;
&lt;h2 id=&#34;遺棄問題&#34;&gt;遺棄問題
&lt;/h2&gt;&lt;p&gt;大量ローカルリポジトリを更新するスクリプトを作成する際に、当初は &lt;code&gt;ssh&lt;/code&gt; でリポジトリをプルすることを考えていましたが、なぜそうしたのか詳しく調べていませんでした。結果として、TortoiseGit の設定情報が &lt;code&gt;config&lt;/code&gt; に同期されていなかったため、コマンドラインで実行すると&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull #提示没有权限，无法正常更新仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コマンドで鍵の設定を確認することも正しいです：&lt;code&gt;ssh -T git@gitlab.yintech.net&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;もしGit Small Turtle (TortoiseGit) でコードを正常にプルできるのに、コマンドラインでgit pull コマンドを実行した際にキーが正しくないというエラーが表示される場合、これは Git Small Turtle が PuTTY の SSH キーを使用しているのに対し、コマンドラインが OpenSSH の SSH キーを使用していることが原因である可能性があります。&lt;/p&gt;
&lt;p&gt;小さなカメの鍵設定は、システム.sshフォルダから鍵ファイル情報を読み込むのではなく、インターフェースのリポジトリ設定時に、個別に鍵ファイルのパスを設定します。便利なテクニックとして、最初にリポジトリを構成した際に鍵を設定すれば、他のリポジトリもこの鍵ファイルを再利用できます。PuTTYが鍵をロードした後、すぐに終了するのではなく、プロキシサービスを開始します。&lt;/p&gt;
&lt;p&gt;グローバル設定を調整し、システムデフォルトの &lt;code&gt;ssh&lt;/code&gt; 設定を使用しないようにすることで、この構成では Git Bash は TortoisePlink を使用して SSH 接続を行います。 このような設定は、TortoiseGit に付属している PuTTY ツールを使用する場合に適しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定されている実行ファイルパスを、必要に応じて小烏龜のパスに合わせて変更してください。完全なパスが設定されているため、システム環境変数への追加は不要です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>AIプログラミングとタスク分解</title>
        <link>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;2年前にサイトに追加したコード領域のコピー機能ですが、あれから半日ほど格闘した結果、最終的なレンダリングの効果は少し期待外れでした。半熟前開発者だったため、改善しようともせず、動けば良いと思っていました。今年は&lt;code&gt;AI&lt;/code&gt;で小程序を開発し、フロントエンドの開発にもより慣れたので、一新（AIによる再設計）。&lt;/p&gt;
&lt;p&gt;悟道：タスクを分解して、多くの小さなタスクに分けました。AIで開発するのはまだスムーズです。すでに閉鎖された小程序ですが、75%のコードはAIによって提供され、複数のタスクに分割して割り当て、人工でプロジェクトコードを組み立てています。&lt;/p&gt;
&lt;h2 id=&#34;前文&#34;&gt;前文
&lt;/h2&gt;&lt;p&gt;簡単なことだと思っていることを、コードコピーボタンを追加する。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;CSSとJavaScriptのコードを設計し、class=&amp;ldquo;highlight&amp;rdquo; のウェブ要素を見つけて、その要素のコンテナ内にコピーボタンを追加して、コードをコピーする機能を実現してください。&lt;/p&gt;
&lt;p&gt;最初のドラフトのコードを見ると問題があり、再生成したところ、ほぼ使えるようになったが、コピーされた内容に誤りがあり、重複するテキストも含まれている。再度最適化を促し、手動で主要なカラーデザインを指定し、どのようなエフェクトが含まれるかを指示した。&lt;/p&gt;
&lt;p&gt;ボタンのサイズと色に関して特定の要件があることを承知いたしました。これらの要件に合わせて、ボタンのスタイルを再設計できます。以下に、ご提供いただいたカラースキームを含め、ボタンのサイズを最適化した調整後のCSSスタイルを示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* 调整位置 */
  right: 2px;
  padding: 3px 6px; /* 缩小尺寸 */
  font-size: 12px; /* 减小字体大小 */
  background-color: #8FD1E1; /* 按钮背景色 */
  color: #272822; /* 文字颜色 */
  border: 1px solid #272822; /* 边框颜色 */
  border-radius: 3px; /* 圆角 */
  cursor: pointer;
  opacity: 0.7; /* 默认半透明 */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* 平滑过渡效果 */
}

.copy-btn:hover {
  opacity: 1; /* 鼠标悬停时不透明 */
  background-color: #A3D4E5; /* 鼠标悬停时的背景色 */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このスタイルでは、ボタンのサイズとフォントサイズを小さくし、より洗練された印象にしました。同時に、ボタンのデフォルト状態は半透明で、マウスがボタンの上にかかると不透明になり、背景色が少し明るくなることで視覚的なフィードバックを提供します。このようなデザインは、お客様の色に関する要件を満たしつつ、モダンさと使いやすさを維持しています。&lt;/p&gt;
&lt;p&gt;対応する簡単な &lt;code&gt;JavaScript&lt;/code&gt; を提供しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // 查找所有 .highlight 元素
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // 创建复制按钮
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;复制&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // 将按钮添加到每个 .highlight 元素中
    highlight.appendChild(copyBtn);

    // 添加点击事件监听器
    copyBtn.addEventListener(&#39;click&#39;, function() {
      // 假设 .highlight 下的第一个 &amp;lt;code&amp;gt; 元素包含要复制的代码
      const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;

      navigator.clipboard.writeText(code).then(() =&amp;gt; {
        // 显示复制成功信息
        copyBtn.textContent = &#39;已复制!&#39;;
        setTimeout(() =&amp;gt; {
          copyBtn.textContent = &#39;复制&#39;;
        }, 2000);
      }).catch(err =&amp;gt; {
        console.error(&#39;复制失败: &#39;, err);
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;コピーボタンをコード領域の右上隅、または上部に新たに追加することを期待していたのですが、フロントエンドについて十分な知識がないため、キーワードに基づいて機能を正確に説明できず、AI と何度かやり取りしても、期待通りの結果が得られませんでした。&lt;/p&gt;
&lt;p&gt;時間が経つにつれて、AIがプログラミング開発にどれほどの影響を与えるか分かりません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>東方甄選の小文風波：文化と商業の衝突</title>
        <link>https://ttf248.life/ja/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</link>
        <pubDate>Wed, 20 Dec 2023 18:57:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</guid>
        <description>&lt;p&gt;東方甄選の小文事件は、東方甄選公式アカウントが配信者・董宇輝が全ての小文の作者ではないと否定したことが引き起こしたネット上の騒動である。真相はどうであれ、既に検証することは不可能であり、会社の権謀術数に争いがこの問題を注目を集めることになった。&lt;/p&gt;
&lt;p&gt;魚の7秒間の記憶について、今後の執筆はAIに任せることにし、&lt;code&gt;Bing AI&lt;/code&gt;と&lt;code&gt;ChatGPT plus&lt;/code&gt;を試してみた結果、前者は資料がより完全で、検索エンジンからの情報収集量も多かったものの、ブログ記事の内容としては不十分で、フォーマットが硬い。後者はキーワードから内容を取得し、生成される内容は必ずしも完全ではないが、完全なブログ記事を作成でき、参考資料のURLを提供することで、生成された原稿を最適化できる。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;東方甄選の小作文事件は、著作権と創作帰属をめぐる論争であり、2023年12月5日に董宇輝（トン・ユーハイ）氏と東方甄選との一連のやり取りが関与しました。この騒動は、単にビジネス運営の複雑さを露呈しただけでなく、現代の商業文化やインターネット社会に対する深い反省を呼び起こしました。&lt;/p&gt;
&lt;h4 id=&#34;2023年12月5日事件発端&#34;&gt;2023年12月5日：事件発端
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;東方甄選が予告動画を公開し、キャスターの董宇輝氏が朗読した「短いエッセイ」が急速に話題となった。&lt;/li&gt;
&lt;li&gt;動画コメントで、東方甄選はこれらの短い文章の多くはコピーライターチームが作成したものであり、全て董宇輝の手によるものではないと声明を発表しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月13日董宇輝の返答&#34;&gt;2023年12月13日：董宇輝の返答
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;董宇輝が長文を発表し、「飯田地（めしわらい）」という名前で誰かを差別することに反対し、事件に対する自身の立場を表明した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月14日経営陣からの対応&#34;&gt;2023年12月14日：経営陣からの対応
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;東方甄選CEOの孫東旭氏が謝罪動画を公開し、経営面での欠陥を認めた。&lt;/li&gt;
&lt;li&gt;東方甄選の会長であるユー・ミンホンも、今回の件について言及し、トン・ユーハイに謝罪した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月16日重要決定&#34;&gt;2023年12月16日：重要決定
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;東方甄選は公式サイトで、孫東旭氏のCEO職を解任し、俞敏洪氏が兼任することを発表しました。&lt;/li&gt;
&lt;li&gt;同年、ユーミンホンは謝罪文を発表し、ライブ配信ルームでブラックリストにされていたネットユーザーを解除すると表明した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月18日董宇輝の新役柄&#34;&gt;2023年12月18日：董宇輝の新役柄
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新東方教育科技集団は、董宇輝氏を新東方教育科技集団文化アシスタントに任命し、同時に新東方文旅集団の副总裁を務める。&lt;/li&gt;
&lt;li&gt;俞敏洪は、董宇輝とスタジオを設立し、新たなライブアカウントとライブ配信スペースを開拓すると明らかにしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論と反省&#34;&gt;結論と反省
&lt;/h2&gt;&lt;p&gt;この騒動は、著作権や創作帰属に関する論争であると同時に、文化と商業の衝突をより深く反映している。デジタル化され断片化された時代背景において、コンテンツ制作の著作権帰属は、深く考察すべきテーマとなっている。東方甄選の小作文事件は、単なるメディア騒動ではなく、現代の商業文化やネットワーク社会に対する深い反省でもある。&lt;/p&gt;
&lt;p&gt;観察者として、私たちはどのようにこの文化と商業の衝突を見なすべきか？商業的な利益を追求しながら、いかにしてクリエイターの労働成果を保護し、尊重していくべきだろうか？これらの問題は、私たち一人ひとりが深く考察に値する。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ゲーム心理学：競技ゲーム</title>
        <link>https://ttf248.life/ja/p/game-psychology-esports/</link>
        <pubDate>Mon, 11 Dec 2023 10:26:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/game-psychology-esports/</guid>
        <description>&lt;p&gt;課金型のゲームについては、ここでは議論しません。ゲーム業界では、このようなタイプを「人民币戦士」と呼びます。ゲームの仕組みを理解する必要はなく、ただ十分な財力が必要です。彼らが楽しむのは、周囲の部下からの敬愛や、「都市破壊」の快感です。&lt;/p&gt;
&lt;p&gt;広大な受衆を持つ競技ゲーム、例えば：リーグ・オブ・レジェンド、ドータ、王者栄耀、パブジーなど、この手のゲームは、世界観の設定が確立され、ゲームの大会も健全な循環に入っています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ゲームデザインにおいて、心理学は確かに重要な分野であり、特に社会心理学はその中でも重要です。人々の行動、欲求、動機を理解することで、より魅力的なゲーム体験を作り出すことができます。「見せかけ」と社会心理学の関係についてですが、以下のいくつかの観点から見ていきましょう。&lt;/p&gt;
&lt;p&gt;社会的帰属意識：人々はしばしば社会的なグループの中で帰属意識を築こうとします。ゲームにおいて、プレイヤーが何らかの面で優れていると感じられるように設計したり、他のプレイヤーの注目を集めるような要素があれば、彼らの社会的帰属意識を高める可能性があります。これは、スキルをひけらかしたり、獲得した報酬を見せびらかしたりといった形で現れるかもしれません。&lt;/p&gt;
&lt;p&gt;ソーシャル競争：いくつかのゲームでは、ソーシャル競争の要素を採用し、プレイヤーがソーシャルネットワークで自分の成果をアピールすることを奨励しています。これは、ランキング、実績システム、または対戦モードなどの方法で実現できます。このようなデザインは、プレイヤー間の競争心を刺激し、一部のプレイヤーが社会的認知を得るために、より優れたパフォーマンスを発揮する可能性があります。&lt;/p&gt;
&lt;p&gt;自己表現：いくつかのゲームでは、プレイヤーはキャラクターのカスタマイズやバーチャルアイテムなどを通して自分を表現できます。この自己表現は、単なる見せつけではなく、個性や社会的な交流を表現する手段にもなり得ます。&lt;/p&gt;
&lt;p&gt;チームワーク：一部のゲームはチームワークを重視し、ソーシャルインタラクションを通じてゲーム目標を達成します。そのような状況では、ひけらかすような行動は推奨されず、むしろチームでの協調性と相互サポートが強調されます。&lt;/p&gt;
&lt;p&gt;心理報酬システム：ゲームデザインは心理報酬システムを採用し、プレイヤーの積極的なソーシャル行動を促すことができる。例えば、プレイヤーに報酬や特典を与え、積極的にソーシャルインタラクションに参加するように奨励する。&lt;/p&gt;
&lt;p&gt;全体として、ゲームデザインにおける社会心理学は、プレイヤー間の交流やソーシャルエクスペリエンスを形作るために利用できる。ブラバネ（見せかけ）行為が状況によっては存在するかもしれないが、ゲームデザイナーは通常、そのような行動を調整し、すべてのプレイヤーにとってポジティブで楽しいゲーム体験になるように努める。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;考えながら書くので、完全なアウトラインがなく、少し散漫しています。&lt;/p&gt;
&lt;p&gt;著者はよくプレイする英雄联盟は、私たち世代の青春の記憶と言えるでしょう。多くの親が子供にゲームをすることを好まないのは、この手のゲームを深く理解したり体験したりしていないからです。もちろん、ゲームの設定も関係しています。各ゲームは新たな始まりであり、多くの子供にとって、プレイ中はあまり深く考えずに、自律的に探索するようなプレイスタイルです。このようなモードでは、ゲームの勝敗は子供自身のゲームの才能に大きく左右されます。筆者の実際の経験から言うと、かなりの数のプレイヤーがこのタイプに属します。彼らにとっては。&lt;/p&gt;
&lt;p&gt;最大のコストは、お金ではなく時間です。&lt;/p&gt;
&lt;p&gt;ゲーム内にはエンターテイメントモードもあり、娯楽を求めるプレイヤーのニーズを満たすために用意されている。&lt;/p&gt;
&lt;p&gt;英雄联盟这种竞技ゲームは、私にとって、より多くは「三国志の夢」を叶えたようなものです。ゲーム開始時にポケットは空っぽで、自分の理解力、ラストヒット、成長、経済的投資、視界のコントロール、相手への罠や待ち伏せなど、脳を使うゲームです。並外れたゲームセンスがなくても、十分に楽しめます。全体を統括する「支配感」、逆境を乗り越えて勝利する喜び。「雲プレイヤー」と呼ばれる人々もたくさんいますね。彼らはもうゲームはやっていませんが、世界大会の期間になると必ず試合を見ます。&lt;/p&gt;
&lt;p&gt;ここでもはや言及せざるを得ないのが、「ゲーム時間」だ。「ゲーム時間」とは、単なる一局のゲームの時間のことではなく、ログインする時間のことだ。週末の午後、あるいは平日の夜7時から10時までの間であれば、仲間たちとほとんどの場合、正常にコミュニケーションが取れる。君が送った信号は仲間にも理解され、返信もらえる。他の時間帯、例えばオールナイトでのゲームだと、より多く出会うのは「ゲーム中毒の少年」たちだ。順風の場合は何も起こらず、逆風の場合は、家族を罵倒してくる。画面越しでも、その「いらいら」がひしひしと伝わってくる。&lt;/p&gt;
&lt;p&gt;元々IT業界に携わっているので、ゲームは色々触れてきたし、たくさんプレイしてきた。色々なタイプを試しているので、対戦ゲームでは、反射速度ではなく、頭を使ってプレイするのが癖になっている。才能があるわけではないが、プロや若者と比べると反応はやはり少し遅い。普段は、チームを率いるのが得意なのだ。最初プレイした時は、学生の頃で、ギルドの先輩たちに教えてもらった。&lt;/p&gt;
&lt;p&gt;今のゲームの環境って、なんだか落ち着きがないし、以前のような純粋さがないんだよね。&lt;/p&gt;
&lt;p&gt;レベルが上がってから、高レートの対局をやってみると本当に疲れる。常に高い集中力を維持し、相手の戦略を読み解き、相手の罠を解除する必要がある。まるで、終わった後にはもうやりたくないような状態になる。&lt;/p&gt;
&lt;p&gt;本当にお上手ですね、もしプロの試合に出ないなら、人生の軌道としては、ほとんど意味がないでしょう。社交の手段としては使えるかもしれませんが、生活を成り立てることはできず、社会に立つことも難しいでしょう。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;シングルプレイヤーゲームとオンラインゲームは、ゲームプレイ、体験、技術において著しい違いがある2つの異なる種類のゲームです。以下に、シングルプレイヤーゲームとオンラインゲームの違いを理解するための重要な側面を示します。&lt;/p&gt;
&lt;p&gt;接続方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オフラインゲーム（またはシングルプレイヤーゲーム）：このゲームはローカルデバイスで一人でプレイするもので、インターネット接続は必要ありません。ネットワーク接続なしでもゲームを楽しめます。&lt;/li&gt;
&lt;li&gt;オンラインゲーム：これらのゲームは通常、プレイヤーが他のプレイヤーとリアルタイムでインタラクションするためにインターネット接続を必要とします。オンラインゲームは、複数人での協力や対戦があり、オンラインでの交流や競技が含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プレイヤーインタラクション：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オフラインゲーム：プレイヤーは主にゲーム内の人工知能、あらかじめ設定されたミッション、または敵対的な要素とインタラクションします。ゲーム体験は通常、よりパーソナライズされ、ゲーム内デザインやストーリーに影響を受けます。&lt;/li&gt;
&lt;li&gt;オンラインゲーム：プレイヤーは世界中の他の実際のプレイヤーと交流できます。これには、協力してミッションを完了したり、対立したり、競技的な試合をしたり、チャットやギルドシステムなどのソーシャル要素が含まれる場合があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ゲームデザインとコンテンツ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オフラインゲーム：ゲームデザインは、完全で独立したストーリーとゲーム体験を提供する事に重点が置かれています。ゲーム内容は通常、事前に設計されており、プレイヤーはゲーム内で探索、パズルを解いたり、戦闘を楽しんだりします。&lt;/li&gt;
&lt;li&gt;オンラインゲーム：ゲームデザインは、リアルタイムのインタラクションとプレイヤー間の競争または協力に配慮する必要がある。ゲームの内容はより動的になる可能性があり、定期的なアップデート、オンラインイベント、ソーシャルインタラクションなどが含まれる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技術要件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オフラインで動作することが多く、デバイスの性能やインターネット接続に対する要求は比較的低い。&lt;/li&gt;
&lt;li&gt;オンラインゲーム：強固なインターネット接続が必要であり、リアルタイムインタラクションをスムーズに進めるために、サーバーとネットワークのパフォーマンスに高い要件が求められます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ビジネスモデル：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;オフラインゲーム：通常、一度購入またはダウンロードすることで利用でき、プレイヤーはゲームを購入するとローカルデバイスで完全にプレイできます。&lt;/li&gt;
&lt;li&gt;オンラインゲーム：フリープレイ、広告、アイテム購入、またはサブスクリプションなど、さまざまなビジネスモデルを採用し、サーバーの運営とゲームコンテンツの継続的なアップデートを維持することがあります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの違いを理解することは、プレイヤーがゲームを選択する際に自分の好みを確認し、ゲームデザイナーがプレイヤーの期待に適切に応えるのに役立ちます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>クラウドサーバーとスクリプトキッド</title>
        <link>https://ttf248.life/ja/p/cloud-servers-and-script-kids/</link>
        <pubDate>Mon, 20 Nov 2023 15:08:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cloud-servers-and-script-kids/</guid>
        <description>&lt;p&gt;ダブルイレブンに合わせてキャンペーンを実施中、アリババクラウドが新たに一台のサーバーを入手しました。経済的なバージョンで、年間99元です。スペックは高くありませんが、踏み台として自宅のサービスを代理するのにも良いでしょう。キャンペーンは2026年まで続きます。&lt;/p&gt;
&lt;p&gt;上海地域のサーバーを特別に選び、自宅の機械に低遅延プロキシを設定しました。win11とwindows server 2022ですが、serverバージョンは後からデプロイしたもので、使用しようとしたところ、突然アクセス拒否メッセージを受け取りました。サーバーの更新だと思って待っていたのですが、しばらくすると正常に戻ると考えました。5分経って再度試してみたところ、やはりログインできず、関連のエラーを検索したところ、誰かがログインを試みていることと、パスワードの入力ミスが多すぎるため、現在ログインできないとのことでした。&lt;/p&gt;
&lt;p&gt;以前にもセキュリティ攻撃のスクリプトに触れたことがあり、すぐにこれらのログインは正常な行動ではないと気づいた。誰かがサービスを攻撃し、ログインサーバーをブルートフォースでクラックしようとしているのだろう。サーバーのファイアウォール設定が手抜きだったため、ホワイトリストを設定していなかった。2台のマシンの3389ポートをプロキシ化し、それを公衆ネットワークに晒してしまっていた。まさに池の中の餌のようなものだ。スクリプトキッドが攻撃していることが分かったので、次のことは簡単だ。ファイアウォールにホワイトリストを設定し、会社のIPアドレスと自宅のIPアドレスのみがプロキシサービスにアクセスできるようにする。&lt;/p&gt;
&lt;p&gt;frps 代理服务端以前も実行ログを設定していなかったが、ログを有効にすると見ていて楽しかった。全国各地のプロキシIPアドレスが私のサーバーへのログインを試みている。幸いなことに、serverバージョンだったので問題に気づいた。そうでないと、win11 のそのマシンはいつか必ず突破されてしまうだろう。パスワードの設定は比較的簡単だった。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [101.43.98.211:50486]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [218.93.202.63:56970]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.179.106.174:60812]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [58.16.204.238:2839]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [124.223.47.24:50274]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.248.128.22:55883]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.143.53.138:56955]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.228.7.250:61550]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [125.76.228.9:55842]
2023/11/17 16:51:17 [I] [proxy.go:204] [4dfcc2259937dcb9] [winserver-remote] get a user connection [91.240.118.187:49326]
2023/11/17 16:51:17 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [91.240.118.187:49324]
2023/11/17 16:51:17 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [89.248.163.79:51712]
2023/11/17 16:51:18 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [218.63.75.24:62387]
2023/11/17 16:51:19 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [103.186.109.227:51396]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [116.233.234.104:51567]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.187.193.202:51585]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [59.48.98.42:57489]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [146.56.241.134:53558]
2023/11/17 16:51:21 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.179.106.174:30620]
2023/11/17 16:51:23 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [183.14.214.51:62128]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ついでにLinuxサービスのログインログを確認したところ、阿里云のサーバー以外に、友人のHuawei Cloudのサーバーもあった。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo grep &amp;quot;Failed password&amp;quot; /var/log/secure  centos系列
sudo grep &amp;quot;Failed password&amp;quot; /var/log/auth.log  ubuntu系列
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Nov 16 04:46:34 aliyun-sh sshd[156625]: Failed password for root from 120.55.164.64 port 53410 ssh2
Nov 16 04:46:34 aliyun-sh sshd[156623]: Failed password for root from 111.16.215.122 port 36548 ssh2
Nov 16 04:46:58 aliyun-sh sshd[156630]: Failed password for invalid user share from 139.9.233.78 port 53872 ssh2
Nov 16 04:47:23 aliyun-sh sshd[156634]: Failed password for invalid user spark from 139.9.233.78 port 36134 ssh2
Nov 16 04:47:26 aliyun-sh sshd[156636]: Failed password for root from 120.55.164.64 port 46142 ssh2
Nov 16 04:47:47 aliyun-sh sshd[156640]: Failed password for root from 111.16.215.122 port 42962 ssh2
Nov 16 04:48:24 aliyun-sh sshd[156652]: Failed password for root from 120.55.164.64 port 38868 ssh2
Nov 16 04:48:25 aliyun-sh sshd[156654]: Failed password for root from 111.16.215.122 port 46164 ssh2
Nov 16 04:48:39 aliyun-sh sshd[156657]: Failed password for invalid user test from 139.9.233.78 port 39386 ssh2
Nov 16 04:48:50 aliyun-sh sshd[156659]: Failed password for root from 111.16.215.122 port 38892 ssh2
Nov 16 04:48:53 aliyun-sh sshd[156662]: Failed password for root from 120.55.164.64 port 49348 ssh2
Nov 16 04:48:53 aliyun-sh sshd[156664]: Failed password for invalid user test from 139.9.233.78 port 49864 ssh2
Nov 16 04:50:02 aliyun-sh sshd[156672]: Failed password for root from 111.16.215.122 port 45294 ssh2
Nov 16 04:50:30 aliyun-sh sshd[156680]: Failed password for invalid user zabbix from 139.9.233.78 port 52206 ssh2
Nov 16 04:50:50 aliyun-sh sshd[156683]: Failed password for root from 120.55.164.64 port 34820 ssh2
Nov 16 04:50:51 aliyun-sh sshd[156685]: Failed password for root from 111.16.215.122 port 58978 ssh2
Nov 16 04:51:18 aliyun-sh sshd[156689]: Failed password for root from 120.55.164.64 port 45306 ssh2
Nov 16 04:51:25 aliyun-sh sshd[156692]: Failed password for root from 111.16.215.122 port 33938 ssh2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ファーウェイのクラウドのマシンは起動してから時間が経っており、辞書攻撃の中盤に入りつつあり、奇妙なユーザーが次々と現れ始めています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Nov 16 20:30:35 hecs-411458 sshd[182965]: Failed password for invalid user oeh from 39.129.9.180 port 26459 ssh2
Nov 16 20:32:17 hecs-411458 sshd[182967]: Failed password for invalid user dnu from 39.129.9.180 port 27079 ssh2
Nov 16 20:34:12 hecs-411458 sshd[182971]: Failed password for invalid user rq from 39.129.9.180 port 27742 ssh2
Nov 16 20:36:07 hecs-411458 sshd[182979]: Failed password for invalid user zw from 39.129.9.180 port 28415 ssh2
Nov 16 20:37:59 hecs-411458 sshd[182981]: Failed password for invalid user egi from 39.129.9.180 port 29068 ssh2
Nov 16 20:39:52 hecs-411458 sshd[182984]: Failed password for invalid user bjb from 39.129.9.180 port 29723 ssh2
Nov 16 20:41:53 hecs-411458 sshd[182988]: Failed password for invalid user hna from 39.129.9.180 port 30375 ssh2
Nov 16 20:43:46 hecs-411458 sshd[182994]: Failed password for invalid user gar from 39.129.9.180 port 31036 ssh2
Nov 16 20:45:40 hecs-411458 sshd[183003]: Failed password for invalid user mze from 39.129.9.180 port 31703 ssh2
Nov 16 20:47:35 hecs-411458 sshd[183007]: Failed password for invalid user tmh from 39.129.9.180 port 32381 ssh2
Nov 16 21:23:01 hecs-411458 sshd[183047]: Failed password for invalid user amax from 112.4.65.118 port 41188 ssh2
Nov 16 22:31:20 hecs-411458 sshd[183116]: Failed password for root from 211.228.203.123 port 60213 ssh2
Nov 16 22:53:44 hecs-411458 sshd[183162]: Failed password for root from 112.132.249.164 port 39272 ssh2
Nov 17 11:44:26 hecs-411458 sshd[184811]: Failed password for invalid user jsh from 43.157.103.27 port 54608 ssh2
Nov 17 11:47:23 hecs-411458 sshd[184818]: Failed password for invalid user mrunal from 43.157.103.27 port 50448 ssh2
Nov 17 11:48:46 hecs-411458 sshd[184820]: Failed password for invalid user robertsheen from 43.157.103.27 port 50560 ssh2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;自作のサーバーを開発する場合、Windows の公衆網アクセスにはホワイトリストを設定し、Linux ではパスワードログインを禁止して、秘鍵ファイルによるログインを有効にすることを推奨します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>一括でローカルのGitリポジトリと、過去の権限問題を更新する</title>
        <link>https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/</guid>
        <description>&lt;p&gt;チーム内のプロジェクト間には依存関係があり、過去の経緯から&lt;code&gt;submodule&lt;/code&gt;を利用して依存関係を管理していなかったため、日々の開発では倉庫コードを手動で順番に更新する必要がある。そうしないと、様々な奇妙な問題が発生する可能性がある。&lt;/p&gt;
&lt;p&gt;オンラインの資料を参考に、構造は基本的に似ているので、ローカルで手動で倉庫ディレクトリ &lt;strong&gt;git_list.txt&lt;/strong&gt; を維持し、スクリプトを作成してディレクトリをトラバースし、一度実行して更新し、その後作業を開始する前にスクリプトを実行します。&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ 更新仓库 ===================&amp;quot;

# 检查 git_list.txt 是否存在
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。&amp;quot;
  exit 1
else
  echo &amp;quot;============ 检测到了 git 仓库清单文件 ====&amp;quot;
fi

# 逐行读取 git_list.txt 中的 URL，并执行拉取操作
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url 完成！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;目录 $url 不存在，跳过拉取。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;windows
&lt;/h2&gt;&lt;p&gt;create a new file: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem 进入脚本所在目录
cd /d &amp;quot;%~dp0&amp;quot;

rem 检查 git_list.txt 是否存在
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。
  exit /b 1
) else (
  echo ============ 检测到了 git 仓库清单文件 ====
)

rem 逐行读取 git_list.txt 中的 URL，并执行拉取操作
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i 完成！
    echo ========================================
  ) else (
    echo 目录 %%i 不存在，跳过拉取。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;歴史的遺棄問題&#34;&gt;歴史的遺棄問題
&lt;/h3&gt;&lt;p&gt;システムを再インストールした後で遭遇した&lt;code&gt;git&lt;/code&gt;フォルダの権限ファイルに関する問題：&lt;strong&gt;&amp;ldquo;unsafe repository (&amp;rsquo;/home/repon&amp;rsquo; is owned by someone else)&amp;ldquo;という致命的なエラー&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;オンラインで推奨されている方法は、ほとんどの場合 &lt;code&gt;stack overflow&lt;/code&gt; から来ています。&lt;/p&gt;
&lt;p&gt;リポジトリディレクトリへの信頼追加：&lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;
手動で設定ファイル&lt;code&gt;.gitconfig&lt;/code&gt;を修正し、ディレクトリを追加して信頼を設定する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;処理が終わった後、倉庫のアップデートは正常になりましたが、毎回 &lt;code&gt;git pull&lt;/code&gt; を実行すると、コンソールに多くの警告メッセージが表示され、ユーザー権限のエラーを促されています。&lt;/p&gt;
&lt;h3 id=&#34;デスクトップのosを入れ替える&#34;&gt;デスクトップのOSを入れ替える
&lt;/h3&gt;&lt;p&gt;開発した機械、あまりにも長い間再インストールしていないのでシステムディスクのゴミファイルが爆発してしまい、どうしようもない。時間を作って再インストールしたらまたこの権限の問題に遭遇し、昔のスクリプトが動かず、修正した権限が不完全だった。&lt;/p&gt;
&lt;p&gt;新しいプランを使って、直接&lt;code&gt;*&lt;/code&gt;を追加すれば、&lt;code&gt;git&lt;/code&gt;はすべてのディレクトリを自動的に信頼する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;不明瞭です、ユーザー権限の問題なのか、それとも皆さんが&lt;code&gt;windows&lt;/code&gt;プラットフォームにも&lt;code&gt;chown&lt;/code&gt;のようなコマンドがあることに慣れていないのか。フォルダの所有者を変更するには、ディレクトリが少ない場合は手動で所有者を変更しても良いのですが、このワークステーションにはドメイン情報が追加されています。会社のドメインに異常があるのか、それともローカルシステムの設定に異常があるのかわかりません。ユーザーリストにはログインに使用しているユーザーが見つかりませんでした。結局、コマンドラインで処理しました。&lt;/p&gt;
&lt;p&gt;管理者権限で、&lt;code&gt;powershell&lt;/code&gt;スクリプト&lt;code&gt;change_ower.ps1&lt;/code&gt;を実行してください。スクリプトファイルのエンコーディングを&lt;code&gt;gbk&lt;/code&gt;に調整することを忘れずに。中国語のオペレーティングシステムなので、そうしないと文字化けします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 获取当前用户的用户名
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# 设置 PowerShell 的字符编码为 UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 要更改所有者的根目录路径
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 替换为实际的目录路径

# 递归遍历目录并更改文件和文件夹的所有者
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # 检查是文件还是文件夹
    if ($_ -is [System.IO.DirectoryInfo]) {
        # 如果是文件夹，使用 icacls 更改所有者权限
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        # 如果是文件，使用 icacls 更改所有者权限
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;已更改文件 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;予期せぬ事態が発生し、やはり予想外のことが起きた。スクリプト実行時の中国語情報が文字化けし、コンソールの文字コード設定やスクリプトのエンコーディング調整を試みたが、すべて文字化けした。頭が働いていないのだろうか。試しにコントロールパネル-地域-言語設定のベータ機能を有効にし、グローバルでUnicodeエンコーディングを有効にしたところ、スクリプトは正常に実行されるようになった。しかし、いくつかの開発ソフトウェアが正常に動作しなくなった。後で資料を整理したところ、ようやくスクリプトファイルのエンコーディングを&lt;code&gt;gbk&lt;/code&gt;に設定する必要があることに気づいた。&lt;/p&gt;
&lt;h2 id=&#34;資料&#34;&gt;資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>WPF学習資料</title>
        <link>https://ttf248.life/ja/p/wpf-learning-resources/</link>
        <pubDate>Tue, 17 Oct 2023 10:49:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-learning-resources/</guid>
        <description>&lt;p&gt;小程序的開発設計の穴はまだ埋まっていないのに、新たに&lt;strong&gt;WPF&lt;/strong&gt;を掘り起こし、最近会社も動揺しているので、遠隔での共同作業やコミュニケーションは効率があまり良くないため、思い切ってクライアント側のインターフェースの開発を引き受けた。&lt;/p&gt;
&lt;h2 id=&#34;wpf&#34;&gt;WPF
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8&amp;amp;preserve-view=true&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF マイクロソフト公式学習資料の推奨&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;WPF基礎まとめ（学習アドバイス）&lt;/li&gt;
&lt;li&gt;WPF中文网&lt;/li&gt;
&lt;li&gt;WPF 個人まとめと学習推奨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WPFインターフェース設計で使用される多くのコンセプトは、ウェブフロントエンド設計に似ており、可能な限りUIデザインとビジネスロジックを分離し、UIのデザインを独立させることは、インターネット企業が期待する分工方法です。今年ちょうど小程序を色々試しましたが、多くのコンセプトで共通点があり、比較的簡単に習得できます。これらは現代のUIデザインにおける&lt;strong&gt;道&lt;/strong&gt;であり、基本的なフレームワークの概念を理解していれば、後の道のりは間違えにくくなります。&lt;/p&gt;
&lt;p&gt;以前に&lt;code&gt;Winform&lt;/code&gt;の開発経験がある読者の皆様へ、&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zh7791/p/11502696.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 基礎まとめ(学習アドバイス)&lt;/a&gt; をおすすめします。内容は短く、経験豊富な読者の方々の学習ルートの計画に役立つでしょう。&lt;/p&gt;
&lt;p&gt;ゼロからの学習者向けに推奨するサイトです。&lt;a class=&#34;link&#34; href=&#34;http://www.wpfsoft.com/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 中国語サイト&lt;/a&gt; は、基礎概念、発展の歴史、そして基盤となるクラスの理解について、ゼロから解説しています。このサイトは偶然にも今年8月に作者が公開したばかりで、こちらのタイミングとちょうど合致しました。もう少し遅れていたら、おそらく縁はなかったでしょう。&lt;/p&gt;
&lt;p&gt;最も正統な学習資料は、もちろんマイクロソフトの公式サイトにあるものです。少し退屈かもしれませんが、新しい読者は辛抱強く待つ必要があります。&lt;/p&gt;
&lt;p&gt;古典的な電子書籍もたくさんありますが、あまりお勧めできません。日々の仕事が忙しく、じっくりと読書に集中する時間がなかなかありません。一度に読み進めるのは難しいため、プロジェクト演習の方が向いています。&lt;/p&gt;
&lt;h2 id=&#34;c-と-net-のリリース履歴&#34;&gt;C# と .NET のリリース履歴
&lt;/h2&gt;&lt;p&gt;以前学習した言語に比べて、ここ数年で新機能が少し多いのと、文法も毎年バージョンアップされています。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;公式学習資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/csharp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/csharp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>金融汚職の幕開け</title>
        <link>https://ttf248.life/ja/p/financial-anti-corruption-curtain/</link>
        <pubDate>Mon, 09 Oct 2023 14:53:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/financial-anti-corruption-curtain/</guid>
        <description>&lt;p&gt;中国共产党中央政治局：要加大对国有企业和金融领域的腐败问题的打击力度，并深入整治“四风”问题。&lt;/p&gt;
&lt;h2 id=&#34;中国共产党中央政治局&#34;&gt;中国共产党中央政治局
&lt;/h2&gt;&lt;p&gt;中共中央政治局9月27日召开会议，审议《关于二十届中央第一轮巡视情况的综合报告》。中共中央总书记习近平主持会议。会议强调，要以巡视整改为契机，进一步加强党的全面领导，督促被巡视党组织提高政治站位，认真履行党中央赋予的职责使命，不断增强国有企业核心功能和核心竞争力，夯实中国特色社会主义的重要物质基础和政治基础，加大金融企业服务实体经济和国家战略力度，推动高质量发展。要统筹发展和安全，树牢底线思维、极限思维，采取有力措施防范化解重大风险，牢牢守住安全底线。要推动全面从严治党向纵深发展，压紧压实党委（党组）书记第一责任人责任、领导班子成员“一岗双责”、纪检监察机构监督责任，突出加强对各级“一把手”的监督，加大国有企业、金融领域反腐败力度，深入纠治“四风”，深化以案促改、以案促治，一体推进不敢腐、不能腐、不想腐。要认真贯彻新时代党的组织路线，加强领导班子建设、干部人才队伍建设和基层党组织建设。要综合用好巡视成果，深化改革、完善制度，推进源头治理，促进标本兼治。（新华社）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深刻な金融リスクを引き起こす！中国銀行元党委書記・会長の劉連舸氏が党籍を剥奪された。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中央紀律検査委員会国家監察委員会ウェブサイトによると、中国共産党中央の承認を得て、中央紀律検査委員会国家監察委員会は、中国銀行股份有限公司元党委 secretário、会長である劉連舸に対する重大な規律違反・違法行為の問題について立案調査を行った。
厳格な調査の結果、劉連舸は理想と信念を喪失し、初心と使命を背棄しました。党中央の決定・方針に不十分かつ割引くように実施し、金融リスクの防控責任を放棄し、大規模な違法介入による融資プロジェクトへの介入、違法な融資を行って重大な金融リスクを生じさせました。また、全面厳格な党的統治における主体責任を怠り、所在単位の政治生態を深刻に破壊し、私的に禁書を国外へ持ち込み、組織調査に対抗しようと画策しました。中央八項規定精神を無視し、違法に贈与品や資金を受け取り、私設クラブに出入りし、スキーや旅行を手配されました。長期間、管理対象の車両を借用し、規定通りに個人に関する事項を報告せず、組織からの問い合わせに対し真実を述べず、私情で採用・昇進を行いました。違法に商事活動を行い、資金融資への不正介入、機密資料の私的保持を行いました。道徳が退廃し、家族風紀も正していません。規律と法律の底線がなく、権力を乱用し、「金融に頼って金融を食う」という形で、職務上の便宜を利用して他人に対し融資・プロジェクト協力などで利益を謀り、不正な巨額の財産を受け取りました。&lt;/p&gt;
&lt;p&gt;劉連舸は、党の政治規律、組織規律、廉潔規律、勤務規律及び生活規律を著しく違反し、重大な職務上の違法行為を行い、収賄及び不正な融資供与犯罪に関与した。また、第十八回党大会以降も是正せず、手を緩めなかった。その性質は深刻であり、悪影響を及ぼしているため、厳格な処分が必要である。関係規定に基づき、中央紀律検査委員会の常務委員会で検討し、中共中央の承認を得た結果、劉連舸に対し、党籍剥奪処分を下すことが決定された。規定に従い、享受していた待遇を取消し、第20回党大会代表資格を終了させる。不正な所得を没収し、犯罪に関与した問題については検察機関へ移送し、法に基づき捜査・起訴を行い、関係する財産も併せて移送する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中国光大集团元党委書記・董事長李暁鵬が、不正行為及び違法行為により厳重な処分を受け、党籍および公職を剥奪された。（中央電視台ニュース）&lt;/li&gt;
&lt;li&gt;中国共産党中央規律検査委員会国家監察委員会ウェブサイトの報道によると、貴州省紀律検査委員会監察委員会の情報によりますと、貴州銀行元党委書記・董事长である李志明は重大な不正行為及び違法行為に関与した疑いが現にあり、現在、貴州省紀律検査委員会監察委員会の懲戒処分及び調査を受けているとのことです。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;時隔八年匯金は四大銀行への株式保有をさらに増やした&#34;&gt;時隔八年、匯金は四大銀行への株式保有をさらに増やした。
&lt;/h2&gt;&lt;p&gt;10月11日、中国工商銀行、農業銀行、中国銀行、建設銀行の四大国有商業銀行はそれぞれ発表したところによると、匯金公司による株式増加がそれぞれ2761万株、3727万株、2489万株、1838万株あった。匯金公司は今後6ヶ月以内に、引き続き二次市場で四大行の株式を増強する予定である。&lt;/p&gt;</description>
        </item>
        <item>
        <title>抽選による収益化モデル</title>
        <link>https://ttf248.life/ja/p/traffic-monetization-business-models-lottery/</link>
        <pubDate>Tue, 19 Sep 2023 07:04:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/traffic-monetization-business-models-lottery/</guid>
        <description>&lt;p&gt;配信者がiPhoneをプレゼント？ミニプログラムのランキング報酬？様々なライブ配信プラットフォームでのギフト抽選？&lt;/p&gt;
&lt;p&gt;上記の3つは一見するとあまり関連性がないように見えるが、実質的には無料トラフィックをマネタイズする異なる方法であり、少し金融ゲームのような意味合いがある。&lt;/p&gt;
&lt;h2 id=&#34;プラットフォームでの抽選でプレゼントを獲得&#34;&gt;プラットフォームでの抽選でプレゼントを獲得
&lt;/h2&gt;&lt;p&gt;通常のシナリオでは、ユーザーはプラットフォームの通貨をリセットして獲得し、気に入った配信者にギフトを贈り、各プラットフォームには別のゲームプレイがあります。ユーザーがプラットフォームの通貨を獲得した後、直接ギフトを送るのではなく、一定量の通貨を使って抽選イベントに参加し、限定の高額ギフトを獲得します。&lt;/p&gt;
&lt;p&gt;今時点で問題は発生しています。オンライン抽選と簡単に言うならプラットフォームがカジノを開業しているようなものです。参加人数が十分であれば、絶対に赤字になることはありません。&lt;strong&gt;底辺&lt;/strong&gt;ユーザーは、一攫千金を夢見て、当たればプレゼントをして、面子を立てて、大物になりたいという気持ちで参加しています。&lt;/p&gt;
&lt;h2 id=&#34;配信者からプレゼント現物&#34;&gt;配信者からプレゼント（現物）
&lt;/h2&gt;&lt;p&gt;上記プラットフォームの抽選は、ユーザー自身の文章作成を対象としています。配信者は毎月、視聴者数やギフトに関するタスクがあります。ギフト抽選機能を有効にすると、ファンが指定されたギフトを送るか、指定額以上のギフトを送ることで、抽選に参加するチャンスがあり、賞品は高級スマートフォンや現金などが考えられます。&lt;/p&gt;
&lt;p&gt;人気のある配信者にとっては、このイベントは非常に儲かる。一時的な無料キャンペーンのようなものだが、参加者が十分なため、配信者も稼げる。ここが配信者の運営能力を試すことになる。&lt;/p&gt;
&lt;p&gt;もちろん、まだ別のやり方もあります。高い報酬（現金価値）がもらえるので、多くの屋外配信者はこの方法で、一種のオンラインギャンブルをしているようなものです。視聴者はライブの内容には誰も興味がなく、自分が当たるかどうかだけに気を配っています。&lt;/p&gt;
&lt;p&gt;ショータイプのアナウンサーを除けば、PKモードを通じてファンに消費やチャージを誘導しても、普通のゲーム配信者はプレイヤーの消費意欲を高めるのは難しい。ゲームをしてライブを見ることは娯楽であり、追加の金銭支出をしたくないし、特に&lt;strong&gt;対戦型ゲーム&lt;/strong&gt;では、抽選方式でユーザーの課金習慣や消費習慣を育て、時折衝動買い（多くの賞品を用意して当選したいという気持ち）も促すことができる。&lt;/p&gt;
&lt;h2 id=&#34;ミニプログラムランキング報酬&#34;&gt;ミニプログラムランキング報酬
&lt;/h2&gt;&lt;p&gt;小さなプログラムを設計し、あまり役に立たないプロセスをいくつか導入したり、ゲーム関連の補助サービスを提供したりする。これらはすべてごまかしで、テンセントの審査に通過するために、ミニプログラム内の遊び方にランキングメカニズムを取り入れる。ユーザーは奨励広告を閲覧し、タスクを完了し、ポイントを獲得し、バックエンドはポイントに基づいてランキングを設定する。上位のランキングのユーザーが指定された報酬を得る。&lt;/p&gt;
&lt;p&gt;コアロジック：広告収入＞運営コスト＋報酬費用&lt;/p&gt;
&lt;p&gt;小程序也能以正常方式运作，提供合理的服务，通过适当的广告赚取收入。虽然可能不多，但聚沙成塔，也是一种方法。&lt;/p&gt;</description>
        </item>
        <item>
        <title>場所を問わないローカルエリアネットワークZeroTier</title>
        <link>https://ttf248.life/ja/p/zero-tier-remote-lan/</link>
        <pubDate>Tue, 19 Sep 2023 04:58:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/zero-tier-remote-lan/</guid>
        <description>&lt;p&gt;オフィスに新しいminiサーバーを購入しました。環境構築が簡単で、時々自宅からアクセスするニーズもあるので、一時的に内網穿通をデプロイします。これまでの経験から、frpサービスをデプロイし、ポートフォワードを指定します。通常は公衆回線上のサーバーが必要で、接続の品質は公衆回線の帯域幅に依存します。新しいZerotier仮想マシンローカルエリアネットワークを試してみます。VPNに似ており、ローカルに仮想NICを作成し、すべてのマシンを仮想ネットワークに追加します。&lt;/p&gt;
&lt;h2 id=&#34;ゼロティアとは何ですか&#34;&gt;ゼロティアとは何ですか。
&lt;/h2&gt;&lt;p&gt;ZeroTierは、さまざまな地理的な場所にあるデバイス間でセキュアな仮想ネットワークを作成できる、ソフトウェア定義の広域ネットワーク（SD-WAN）ソリューションです。ZeroTierを使用すると、複数のコンピューター、サーバー、およびデバイスをあたかも同じローカルエリアネットワークにいるかのように、仮想的で暗号化されたネットワークに簡単に接続できます。これにより、プログラマーやIT専門家は、複雑なネットワーク設定やVPN構成なしに、さまざまな場所間で安全にデータとリソースを共有できます。&lt;/p&gt;
&lt;p&gt;ゼロティアネットワークは、仮想的なグローバルなローカルエリアネットワークであり、異なるデバイスがインターネット経由で接続し、あたかも同じ物理ネットワーク上に存在するかのように動作します。このネットワークは複数のサブネットを含み、すべてのデバイスはゼロティアの技術によって接続されています。&lt;/p&gt;
&lt;p&gt;惑星サーバー：惑星サーバーはZerotierネットワークの重要なコンポーネントの一つです。これはグローバルであり、Zerotierネットワーク全体のトポロジー構造、ルーティング情報、およびネットワーク状態を維持・管理する役割を担います。惑星サーバーはネットワーク全体を制御する中心的な役割を果たしますが、データそのものを直接転送しません。ユーザーのデバイスはZerotierネットワークに参加するために、少なくとも1つの惑星サーバーに接続する必要があります。&lt;/p&gt;
&lt;p&gt;転送サーバー：転送サーバーはZerotierネットワーク内の補助ノードであり、デバイス間のダイレクト接続を確立するのを支援します。デバイスが直接接続できない場合、データは転送サーバーを通じて送信されます。これにより、ネットワークの到達性とパフォーマンスが向上します。転送サーバーは通常、世界中に配置され、データの転送地点として機能します。&lt;/p&gt;
&lt;p&gt;全体的に見て、Zerotierは、惑星サーバーとリレーサーバーの協力を通じて、デバイスが世界中で仮想ローカルエリアネットワークを構築し、安全かつ高速なデバイス間の通信を実現します。惑星サーバーはグローバルネットワーク管理を担当し、リレーサーバーは必要に応じてデバイス間の通信接続を確立するのに役立ちます。&lt;/p&gt;
&lt;h2 id=&#34;インストールとデプロイ&#34;&gt;インストールとデプロイ
&lt;/h2&gt;&lt;p&gt;ZeroTierの公式サイト（&lt;a class=&#34;link&#34; href=&#34;https://www.zerotier.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zerotier.com/&lt;/a&gt;）にアクセスして、インストールファイルとドキュメントを入手してください。
お客様のオペレーティングシステムに応じて、ZeroTier Oneクライアントをダウンロードしてインストールしてください。Windows、macOS、Linuxなど、多くのプラットフォームで利用可能です。
インストールが完了したら、ZeroTier Oneクライアントを起動してください。
ZeroTierアカウントを登録してください。まだアカウントをお持ちでない場合は。クライアントで作成できます。
ZeroTierアカウントにログインし、新しいネットワークを作成してください。ネットワークには一意の16桁のIDが割り当てられ、それを覚えておく必要があります。
あなたのデバイスにこのネットワークを追加してください。クライアントでネットワークIDを入力するか、QRコードスキャン機能を使用できます。
ZeroTierクライアントをインストールして設定したデバイスは、同じ仮想ネットワークに追加されます。これらのデバイス間では、あたかも同一のローカルエリアネットワークに接続されているかのように直接通信できるようになります。
ZeroTierのコントロールパネルで、ネットワーク設定の管理、デバイスの追加、ネットワークトラフィックの監視などを行うことができます。&lt;/p&gt;
&lt;h2 id=&#34;moon-のインストールとデプロイ&#34;&gt;moon のインストールとデプロイ
&lt;/h2&gt;&lt;p&gt;国内の通信事業者は多くの場合、&lt;code&gt;UDP&lt;/code&gt;ポートフォワードを禁止しています。&lt;code&gt;frp&lt;/code&gt;サービスは安定しており、&lt;code&gt;TCP&lt;/code&gt;プロトコルを使用しているため、&lt;code&gt;Zerotier&lt;/code&gt;のリレーサーバーをデプロイすることで同様の効果を実現できます。ファイアウォールで&lt;code&gt;udp 9993&lt;/code&gt;を開放する必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -s https://install.zerotier.com/ | sudo bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールが正常に完了しているか確認してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ローカルネットワークに参加する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli join network-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;moon&lt;/code&gt; を作成する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /var/lib/zerotier-one &amp;amp;&amp;amp; sudo zerotier-idtool initmoon identity.public &amp;gt; moon.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定ファイルを編集し、&lt;code&gt;stableEndpoints&lt;/code&gt;ノードを「サーバーのグローバルIPアドレス/9993」に調整してください。&lt;/p&gt;
&lt;p&gt;署名設定を生成し、&lt;code&gt;moons.d&lt;/code&gt;フォルダを作成。そこにファイルを移動後、サービスを再起動する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo zerotier-idtool genmoon moon.json
mkdir moons.d &amp;amp;&amp;amp; mv 000000eb444ec0d8.moon moons.d/
systemctl restart zerotier-one.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クライアントノードはmoonサーバーに参加し、IDは前のJSON設定ファイル内のidフィールドから取得されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli.bat orbit ztaddr ztaddr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 观察是否出现新的 mooon 节点，id 和信息为服务器配置的相同
[root@idv-36f9d5 ~]# zerotier-cli listpeers
200 listpeers &amp;lt;ztaddr&amp;gt; &amp;lt;path&amp;gt; &amp;lt;latency&amp;gt; &amp;lt;version&amp;gt; &amp;lt;role&amp;gt;
200 listpeers 0cccb***** 35.236.*.*/64393;110;10726 327 1.6.3 LEAF
200 listpeers 3a46f***** 185.180.*.*/9993;110;757 -1 - PLANET
200 listpeers 3ed7c***** 39.97.*.*/9993;172;79 32 1.6.3 MOON
200 listpeers 4f838***** - -1 - LEAF
200 listpeers 62f86***** 50.7.*.*/9993;110;4796 351 - PLANET
200 listpeers 778cd***** 103.195.*.*/9993;5148;4887 253 - PLANET
200 listpeers 992fc***** 195.181.*.*/9993;10161;4921 226 - PLANET
200 listpeers 9d2b5***** - -1 - LEAF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Windows プラットフォームでは管理者権限でターミナルを起動し、zerotier-cli.bat コマンドライン操作を行い、Linux プラットフォームでは zerotier-cli 操作を行います。peers サブコマンドで接続状況を確認し、listpeers で全てのノードを表示します。「moon」ノードが正常に表示されていれば、接続は成功しています。&lt;/p&gt;
&lt;h2 id=&#34;どうやってアンインストールしますか&#34;&gt;どうやってアンインストールしますか。
&lt;/h2&gt;&lt;p&gt;Windowsプラットフォームのアンインストール方法はここでは割愛します。通常の操作で、コントロールパネルからアンインストールできます。Ubuntuについては重点的に説明します。&lt;/p&gt;
&lt;p&gt;dpkgを使ってzerotier-oneサービスを削除します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dpkg -P zerotier-one
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ゼロタイアーワンフォルダを削除してください。このフォルダにはアドレスが保存されており、削除後に再インストールすると新しいアドレスが割り当てられます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo rm -rf /var/lib/zerotier-one/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;元々全てアンインストール済みだったのですが、サーバーが到着しても適切なプロキシノードとなるサービスがなく、アリババクラウドが業績のために開発限定のサーバーを提供してくれました。スペックはそれほど高くありませんが、年間99元と手頃な価格で、2年ほど利用しています。重視したのは、サーバーが提供する帯域幅です。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.wnark.com/archives/152.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.wnark.com/archives/152.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Yogile/p/12642423.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/Yogile/p/12642423.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>VMware仮想マシンディスクスペース最適化</title>
        <link>https://ttf248.life/ja/p/vmware-virtual-disk-space-optimization/</link>
        <pubDate>Wed, 21 Jun 2023 18:35:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/vmware-virtual-disk-space-optimization/</guid>
        <description>&lt;p&gt;VMware仮想マシンをインストールして開発システムを使用する際、通常はディスクスペースを多めに確保しますが、使用期間が長くなると、ローカルで占有するディスクスペースは仮想マシンの実際のファイルの内容を大幅に上回ることがあります。&lt;/p&gt;
&lt;h2 id=&#34;シーン描写&#34;&gt;シーン描写
&lt;/h2&gt;&lt;p&gt;df -h コマンドで現在の機械のディスク情報を確認したところ、実際に使用しているのは 60GB であり、全てのスナップショットとクローンイメージを削除しても、ローカル仮想マシンが占有するディスクスペースは依然として 60GB を大幅に上回る。すでに逼迫していたハードディスクの状況を悪化させることになった。&lt;/p&gt;
&lt;h2 id=&#34;前提条件&#34;&gt;前提条件
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;仮想マシンをインストールする際に、予約割り当てディスクにチェックが入っていませんでした。&lt;/li&gt;
&lt;li&gt;仮想マシンのディスクを保存するローカルディスクの空き容量が、現在の仮想マシンが使用している容量よりも大きい場合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;残りのスペースが足りないため、一時的に仮想マシンを外付けハードディスクに移動し、ディスクを最適化した後に移行に戻すことを検討してください。&lt;/p&gt;
&lt;h2 id=&#34;道具&#34;&gt;道具
&lt;/h2&gt;&lt;p&gt;公式が &lt;code&gt;open-vm-tools&lt;/code&gt; パッケージを提供しており、yum でインストールするか、VMware Tools のイメージパッケージでインストールできます。&lt;/p&gt;
&lt;h2 id=&#34;命令&#34;&gt;命令
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vmware-toolbox-cmd disk shrink /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行後、仮想マシンは自動的にシャットダウンされ、VMwareのホストプログラムがディスク圧縮を実行します。 処理時間は、仮想マシンのサイズとディスクのアクセス速度によって異なります。&lt;/p&gt;
&lt;p&gt;実行結果はまだかなり良いです。仮想マシンのディスクスペース使用量は、&lt;code&gt;df -h&lt;/code&gt;のディスク情報とほぼ等しいです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Stable Diffusion - ゼロからのインストールにおける愛憎劇</title>
        <link>https://ttf248.life/ja/p/stable-diffusion-zero-install-saga/</link>
        <pubDate>Thu, 13 Apr 2023 00:23:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/stable-diffusion-zero-install-saga/</guid>
        <description>&lt;p&gt;国内の資料は、基本的に&lt;strong&gt;秋葉&lt;/strong&gt;大佬の一括デプロイパッケージを推奨している。&lt;code&gt;Python&lt;/code&gt;ベースのオープンソースプロジェクトなので、デプロイもそれほど複雑ではないはずだ。ゼロからやってみるか。&lt;/p&gt;
&lt;p&gt;AI生成画像の作成に手間取って、わざとグラフィックカードを交換した。エントリーモデルの&lt;code&gt;3060 12g&lt;/code&gt;です。7年間活躍してきた&lt;code&gt;960&lt;/code&gt;は退役しました。&lt;/p&gt;
&lt;p&gt;コアの&lt;code&gt;pytorch cuda&lt;/code&gt;インストールですが、以前Pythonゲームアシスタントスクリプトを書く際にローカルにインストールしたことがありますが、やはり問題が発生し、&lt;code&gt;cuda&lt;/code&gt;のライセンス認証がどうしてもできません。&lt;/p&gt;
&lt;h2 id=&#34;保留&#34;&gt;保留
&lt;/h2&gt;&lt;p&gt;記事の構成を再計画し、まずpytorchについて、バージョン対応関係、そしてバージョン確認方法を紹介する。
ローカル環境で仮想環境を新たに作成し、PyTorch をデプロイするにはどうすればよいか。
翻訳資料、ゼロから始めるStable Diffusion &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;
資料を整理する&lt;/p&gt;
&lt;h2 id=&#34;手順&#34;&gt;手順
&lt;/h2&gt;&lt;p&gt;中国語で検索しても、ステップバイステップのインストールチュートリアルが見つからないかもしれません。Googleで英語で検索すると、最初から始めるチュートリアルがたくさんあります。必要なものを説明した後、gitをインストールし、pythonをインストールする必要があることが説明されています。それから、リポジトリをダウンロードして、スクリプトをダブルクリックするだけで終わりました。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;詳細な使い方とFAQについては、&lt;code&gt;issues&lt;/code&gt; を参照し、&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&lt;/a&gt; をご確認ください。&lt;/p&gt;
&lt;p&gt;なぜか誰もこの倉庫が何のためにあるのか説明してくれない。実は名前からでもわかるように、これはインターフェースコンソールで、使う私たちをより便利にするものだ。実際、インストール時に公式の倉庫の内容をダウンロードし、実際の&lt;code&gt;SD&lt;/code&gt;コードを入手する。&lt;/p&gt;
&lt;p&gt;倉庫でも、インストール起動スクリプトを作成しました。現在のフォルダに &lt;code&gt;Python&lt;/code&gt; 仮想環境があるかどうかを自動的に認識し、もしあれば、そのパスの &lt;code&gt;python&lt;/code&gt; をデフォルトで使用します。&lt;/p&gt;
&lt;p&gt;もし完全に初心者の方でしたら、こちらをご覧ください。&lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;pytorch
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こここそが今日私が言いたかったことです。まず、彼らの手順に従ってスクリプトを直接起動しないでください。Pythonはrequirementファイルで依存ライブラリをインストールします。これは些細な問題です。重要なのは、グラフィックカードのドライバーバージョンとPyTorchが対応していること。これについても多くの人が説明していますので、ネットで検索すればすぐに見つかります。&lt;/p&gt;
&lt;p&gt;参照：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_40660408/article/details/129896700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_40660408/article/details/129896700&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仮想環境を作成し、空の仮想環境にして、そこで直接公式サイトでスクリプトを実行して、PyTorchをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.version.cuda)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.__version__, torch.cuda.is_available())&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の2つのスクリプトは、インストールする必要があるCUDAのバージョンを確認したり、インストールが成功したかどうかを確認したりできます。&lt;/p&gt;
&lt;p&gt;ここでは、ごちゃごちゃした操作は推奨しません。まずは公式ページのロジックに従ってコピーしてきて、そのままインストールしてください。pipでインストールしようとすると、うまくいかないか、CUDAが有効にならない可能性が高いです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重要：フォルダのパスに余計なものが含まれていると、PyTorchが正常に使えない可能性があります。&lt;/p&gt;
&lt;p&gt;何度も中間でやり直しを重ね、公式のインストールファイルをダウンロードして手動でインストールすることも試しました。2.0版にアップデートしようとしたのですが、公式ドキュメントには2.0の方が速度が速いと書いてあったからです。ただ、以前からあまり使っていなかったので、Pythonのバージョンやこれが影響しているのかもわかりません。その間、公式のマニュアルも確認し、3.8のバージョンを使うことを推奨していました。そこで少し競合が発生しました。以前はワンクリックインストールパッケージを使っていて、そこには3.10のバージョンが入っていました。最終的には、最初からすべてやり直しで、まず新しいフォルダを作成し、仮想環境を作成して、torchが正常にインストールされていることを確認しました。&lt;/p&gt;
&lt;p&gt;インストールした仮想環境を、Web UIのフォルダの中に移動してください。その後でスクリプトのインストールを開始すれば、他の依存関係の問題はほとんどなくなります。&lt;/p&gt;
&lt;p&gt;移動後に、実行する必要があります：python -m pip install &amp;ndash;upgrade &amp;ndash;force-reinstall pip で、pip を修正してください。&lt;/p&gt;
&lt;p&gt;見た目はなんだかよくわからないかもしれませんが、この場所でかなり色々試しました。私のtorchが正しく認識されなかったからです。すべての干渉要因を排除するために、まずこれをインストールしてから、他の依存関係ライブラリをインストールすることにしました。&lt;/p&gt;
&lt;h2 id=&#34;xformers&#34;&gt;Xformers
&lt;/h2&gt;&lt;p&gt;推奨します。画像生成を高速化し、既存の占有量を減らすことができます。副作用は、同じパラメータグループを使用した場合、&lt;strong&gt;生成される画像の安定性がそれほど高くない&lt;/strong&gt;ことです。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stable-diffusion-webui:Xformers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/diffusers/optimization/xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huggingface optimization&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Optimization Ratio&lt;/th&gt;
&lt;th&gt;Time taken&lt;/th&gt;
&lt;th&gt;Torch active/reserved&lt;/th&gt;
&lt;th&gt;Sys VRAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100.00%&lt;/td&gt;
&lt;td&gt;2m 57.03s&lt;/td&gt;
&lt;td&gt;7440/10058 MiB&lt;/td&gt;
&lt;td&gt;12288/12288 MiB (100.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;51.02%&lt;/td&gt;
&lt;td&gt;1m 29.21s&lt;/td&gt;
&lt;td&gt;4547/7164 MiB&lt;/td&gt;
&lt;td&gt;9298/12288 MiB (75.67%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;((masterpiece)),((best quality)),((high detial)),((realistic,))
Industrial age city, deep canyons in the middle,chinese architectural streets,bazaars, Bridges, (rainy days:1.2), (steampunk:0.8), chinese architecture
Negative prompt: nsfw,((cowboy)),(((pubic))), ((((pubic_hair))))sketch, duplicate, ugly, huge eyes, text, logo, monochrome, worst face, (bad and mutated hands:1.3), (worst quality:2.0), (low quality:2.0), (blurry:2.0), horror, geometry, bad_prompt, (bad hands), (missing fingers), multiple limbs, bad anatomy, (interlocked fingers:1.2), Ugly Fingers, (extra digit and hands and fingers and legs and arms:1.4), crown braid, ((2girl)), (deformed fingers:1.2), (long fingers:1.2),succubus wings,horn,succubus horn,succubus hairstyle, (bad-artist-anime), bad-artist, bad hand, borrowed character, text focus, watermark, sample watermark, character watermark, lofter username, photo date watermark, movie poster, magazine cover, journal, cover, cover page, doujin cover, album cover, manga cover, brand name imitation, EasyNegative,Tights, silk stockings,shorts
Steps: 35, Sampler: DPM adaptive, CFG scale: 5.5, Seed: 2223996555, Size: 1088x1088, Model hash: 543bcbc212, Model: base_Anything-V3.0-pruned, Clip skip: 2, ENSD: 31337
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;なぜ、あのワンクリックデプロイパッケージをおすすめしないかというと、そのパッケージには作者が独自にカスタマイズした設定が含まれており、公式のものをそのままコピーしたものではないからです。もしあなたが初心者であれば、なぜパラメータを設定する必要があるのか理解できないかもしれませんが、まずは公式のものから使い始めるのが一番です。使用時間が長くなるにつれて、公式のマニュアルをよく読んでみれば、どのパラメータを調整すれば良いか分かるようになるでしょう。&lt;/p&gt;
&lt;h2 id=&#34;グラフィックカードの選択&#34;&gt;グラフィックカードの選択
&lt;/h2&gt;&lt;p&gt;データマイニングが終わった後は、グラフィックカードの価格は以前ほど高くはないので、初心者の方は3060と3060tiの間で迷うことが多いですが、一般的には大容量12GB版の3060が推奨されます。なぜなら、より高解像度の画像を作成できるからです。高い解像度が必要なのは、生成時に解像度を高く設定することで、より鮮明で繊細な画像を生成できるからです。もし小さな画像を作成したいのであれば、8GBのVRAMでも十分です。&lt;/p&gt;
&lt;p&gt;まだ一点、&lt;strong&gt;高精細拡大&lt;/strong&gt;オプションは、ディテールを具体化し、映像のディテールをより豊かにしますが、より多くのビデオメモリも必要となります。&lt;/p&gt;
&lt;p&gt;以下はNVIDIA GeForce GTX 970、GeForce RTX 3060 Ti、GeForce RTX 3060、GeForce RTX 3080およびGeForce RTX 3080 Tiの単精度（FP32）、半精度（FP16）および倍精度（FP64）浮動小数点演算能力の仕様概要表です。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GPUモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算性能 (TFLOPS)&lt;/th&gt;
&lt;th&gt;複精度浮動小数点演算性能 (TFLOPS)&lt;/th&gt;
&lt;th&gt;倍精度浮動小数点演算性能 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce GTX 970&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;3.49&lt;/td&gt;
&lt;td&gt;87.2&lt;/td&gt;
&lt;td&gt;0.109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060 Ti&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;16.2&lt;/td&gt;
&lt;td&gt;32.4&lt;/td&gt;
&lt;td&gt;0.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;12.7&lt;/td&gt;
&lt;td&gt;25.4&lt;/td&gt;
&lt;td&gt;0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;29.8&lt;/td&gt;
&lt;td&gt;58.9&lt;/td&gt;
&lt;td&gt;0.93&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080 Ti&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;34.8&lt;/td&gt;
&lt;td&gt;68.7&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;引用した、&lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/spreadsheets/d/1Zlv4UFiciSgmJZncCujuXKHwc4BcxbjbSBg71-SdeNk/edit#gid=0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;様々なグラフィックカードの性能テストデータ&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;アップデート&#34;&gt;アップデート
&lt;/h2&gt;&lt;p&gt;半年の間が空いたので、本来ならインストール手順を整理したり、もっと基本的な概念を紹介したかったのですが、結果として、一般の人々がAIで絵を描くというのは、結局のところ、大佬が提供する画像パラメータに基づいて調整したり、既存の画像を元にフォーマットされたリレンダリングを行うだけなのだということが分かりました。&lt;/p&gt;
&lt;p&gt;途中でプロジェクトがあり、AIを使ってミニプログラムのUI素材を描くことを試みましたが、色々手間取った結果、効果は期待通りではありませんでした。むしろ、公式のミニプログラムからリソース画像を引き出した方が良いでしょう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>プログラム最適化は、ハードウェアに逆らうようなことはしないこと。</title>
        <link>https://ttf248.life/ja/p/program-optimization-dont-fight-hardware/</link>
        <pubDate>Fri, 07 Apr 2023 16:30:15 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-optimization-dont-fight-hardware/</guid>
        <description>&lt;p&gt;ワンループスレッドの処理時間はすでにマイクロ秒レベルにあり、サーバーを入れ替えたことで、最大で6万パケットが溜積される状態から、ほとんど溜積しなくなった。&lt;/p&gt;
&lt;p&gt;シングルスレッドでデータを処理する場合、CPUの性能はクロック周波数、キャッシュサイズ、命令セットアーキテクチャなどの要素に左右されます。一般的に、クロック周波数が高く、キャッシュが大きく、命令セットアーキテクチャが高度なCPUほど、シングルスレッドでのデータ処理性能が高いと言えます。&lt;/p&gt;
&lt;h2 id=&#34;シングルスレッド&#34;&gt;シングルスレッド
&lt;/h2&gt;&lt;p&gt;パフォーマンスの向上は、スレッドを増やすことが必ずしも必要なわけではありません。プロジェクトのプロセスを見直し、ボトルネックとなっている箇所を特定し、シングルスレッドで要件を満たせるかどうか検討しましょう。シングルスレッドであれば考慮すべき点が少なく、問題が発生しにくいという利点もあります。&lt;/p&gt;
&lt;p&gt;来てすぐ、何か言われたり、追加の作業を頼まれたりする。少しばかり問題がある。&lt;/p&gt;
&lt;h2 id=&#34;事件&#34;&gt;事件
&lt;/h2&gt;&lt;p&gt;扱っているのは&lt;strong&gt;市場データで、遅延が重要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ぐったりしながら徹夜で頑張って、新しい最適化バージョンをリリース。ローカルでインターフェースを分離してテストしたところ、速度もまあまあ。TPS: 4.2万&lt;/p&gt;
&lt;p&gt;サーバーにデプロイするとTPSが急落：2.1万。自宅でデスクトップPCを試すと、TPS：7.9万。内部サービス仮想化に何か問題があるのではないかと疑い始めた。まずCPUのクロック周波数が原因ではないかと思われ、家庭用デスクトップPCとサーバーの&lt;code&gt;CPU&lt;/code&gt;の違いは、主にクロック周波数にある。&lt;/p&gt;
&lt;p&gt;テストサーバーA&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 47
model name	: Intel(R) Xeon(R) CPU E7- 4807  @ 1.87GHz
stepping	: 2
microcode	: 0x34
cpu MHz		: 1866.733
cache size	: 18432 KB
physical id	: 1
siblings	: 4
core id		: 3
cpu cores	: 4
apicid		: 7
initial apicid	: 7
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 popcnt aes hypervisor lahf_lm pti dtherm arat
bugs		: clflush_monitor cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 3733.46
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;テストサーバーB&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 63
model name	: Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz
stepping	: 2
microcode	: 0x3c
cpu MHz		: 2599.998
cache size	: 20480 KB
physical id	: 14
siblings	: 1
core id		: 0
cpu cores	: 1
apicid		: 14
initial apicid	: 14
fpu		: yes
fpu_exception	: yes
cpuid level	: 15
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cpuid_fault epb pti fsgsbase smep xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 5199.99
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;openaiに問い合わせる&#34;&gt;OpenAIに問い合わせる
&lt;/h2&gt;&lt;p&gt;まず、コア数とクロック周波数についてですが、Intel(R) Xeon(R) CPU E7-4807 @ 1.87GHzは6つの物理コアと12個の論理コアを持ち、クロック周波数は1.87GHzです。一方、Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHzは8つの物理コアと16個の論理コアを持ち、クロック周波数は2.60GHzです。したがって、コア数とクロック周波数に関して見ると、E5-2640 v3は単スレッドでのデータ処理において、E7-4807よりも優位性があると考えられます。&lt;/p&gt;
&lt;p&gt;次に、キャッシュサイズに関して、E7-4807は12MBのキャッシュサイズであり、E5-2640 v3は20MBです。したがって、E5-2640 v3の方がキャッシュスペースが大きく、データのアクセス速度とキャッシュヒット率を向上させることができます。&lt;/p&gt;
&lt;p&gt;最後にアーキテクチャについてですが、E5-2640 v3はより高度なHaswellアーキテクチャを採用しており、一方、E7-4807は古いNehalemアーキテクチャを採用しています。HaswellアーキテクチャはNehalemアーキテクチャと比較して性能が向上しており、このことがE5-2640 v3のシングルスレッドでのデータ処理性能に影響を与える可能性があります。&lt;/p&gt;
&lt;p&gt;したがって、総合的に考えると、シングルスレッドでデータを処理するシナリオでは、E5-2640 v3の方がE7-4807よりも優れた性能を発揮するはずです。ただし、具体的な性能差は、データ処理のアルゴリズム、メモリ帯域幅、システム負荷など、さまざまな要因の影響を受けます。そのため、個別の問題に対して個別に分析する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア資料&#34;&gt;ハードウェア資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7%e2%80%934807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7–4807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Specification&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Price&lt;/td&gt;
&lt;td&gt;Search Online  $78 - BUY&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Socket Type&lt;/td&gt;
&lt;td&gt;LGA1567&lt;/td&gt;
&lt;td&gt;LGA2011-v3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Class&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clockspeed&lt;/td&gt;
&lt;td&gt;1.9 GHz&lt;/td&gt;
&lt;td&gt;2.6 GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Turbo Speed&lt;/td&gt;
&lt;td&gt;Not Supported&lt;/td&gt;
&lt;td&gt;Up to 3.4 GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# of Physical Cores&lt;/td&gt;
&lt;td&gt;6 (Threads: 12)&lt;/td&gt;
&lt;td&gt;8 (Threads: 16)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cache&lt;/td&gt;
&lt;td&gt;NA2&lt;/td&gt;
&lt;td&gt;NA2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max TDP&lt;/td&gt;
&lt;td&gt;95W x 2&lt;/td&gt;
&lt;td&gt;90W x 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Yearly Running Cost&lt;/td&gt;
&lt;td&gt;$34.68&lt;/td&gt;
&lt;td&gt;$32.85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Other&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First Seen on Chart&lt;/td&gt;
&lt;td&gt;Q3 2020&lt;/td&gt;
&lt;td&gt;Q3 2014&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# of Samples&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Value&lt;/td&gt;
&lt;td&gt;69.1&lt;/td&gt;
&lt;td&gt;225.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single Thread Rating&lt;/td&gt;
&lt;td&gt;721 (-59.2%)&lt;/td&gt;
&lt;td&gt;1767 (0.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Mark&lt;/td&gt;
&lt;td&gt;6223 (-64.6%)&lt;/td&gt;
&lt;td&gt;17600 (0.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
        </item>
        <item>
        <title>プロンプトエンジニア</title>
        <link>https://ttf248.life/ja/p/prompt-engineer/</link>
        <pubDate>Sun, 26 Mar 2023 20:46:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/prompt-engineer/</guid>
        <description>&lt;p&gt;かつて検索エンジンのテクニックを学ぶように、私たちもAIとコミュニケーションをとるためのテクニックを学び、合理的で十分な制約を与え、必要な答えを効率的に得る必要があります。&lt;/p&gt;
&lt;p&gt;もし別の角度から考えると、現在のAIは記憶力の良い子供のようなもので、一度見たものはすべて覚える能力があり、宿題を写すような能力があります。私たちがやるべきことは、AIと正しく効果的にコミュニケーションを取り、ニーズを正確に記述し、AIが期待される結果を生み出すのを助けることです。&lt;/p&gt;
&lt;h2 id=&#34;科学普及&#34;&gt;科学普及
&lt;/h2&gt;&lt;p&gt;火が出天际の&lt;code&gt;AI&lt;/code&gt;、正確に言うと&lt;code&gt;Generative Pre-Training（生成事前学習）&lt;/code&gt;です。直訳すると生成的な事前訓練となります。これは、インターネットで利用可能なデータでトレーニングされたテキスト生成深層学習モデルであり、質問応答、テキスト要約生成、機械翻訳、分類、コード生成、対話AIなどのタスクに使用されます。現在ではGPT-1、GPT-2、GPT-3、GPT-4など、さまざまなバージョンのモデルが存在し、各バージョンは前のバージョンよりも大きく、強力です。&lt;/p&gt;
&lt;h2 id=&#34;結局知能は存在するのか&#34;&gt;結局、知能は存在するのか。
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;類似度が十分高いほど、精度も上がる。&lt;/li&gt;
&lt;li&gt;基本的な、反復的な作業は、特定の訓練を経れば、もはや手作業の介在は不要となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成AIとは、既存のテキスト、音声、画像などのデータを利用して新しいコンテンツを作成する技術です。テキスト生成、音声合成、画像生成、対話システムなど、さまざまなタスクに使用できます。生成AIの論理性は、トレーニングデータとモデル構造に依存します。一般的に、生成AIは文法、論理、常識をある程度遵守できますが、誤り、偏見、または虚偽の内容を生み出す可能性もあります。したがって、生成AIの出力には人間の判断と検証が必要であり、盲目的に信じたり使用したりすることはできません。&lt;/p&gt;
&lt;h2 id=&#34;プロンプトエンジニア&#34;&gt;プロンプトエンジニア
&lt;/h2&gt;&lt;p&gt;時の流れは二度と戻らない、人は時代の流れに適応する必要がある。あなたはAIが賢くないとか、論理的ではないとか考えるかもしれない。それは、しばしば役に立たないコードを生成するからだ。&lt;/p&gt;
&lt;p&gt;もし別の角度から考えると、現在のAIは記憶力の良い子供のようなもので、一度見たものはすべて覚える能力があり、宿題を写すような能力があります。私たちがやるべきことは、AIと正しく効果的にコミュニケーションを取り、ニーズを正確に説明し、AIが期待される結果を生み出すのを助けることです。&lt;/p&gt;
&lt;h2 id=&#34;対話モード&#34;&gt;対話モード
&lt;/h2&gt;&lt;p&gt;2 年前 Github Copilot が発表されたとき、誰しも 2 年後に OpenAI が突如として現れ、人間が大規模言語モデルの能力に気づくとは思いもしなかった。&lt;/p&gt;
&lt;p&gt;アノテーションベースのプログラミングと対話型プログラミングに基づく場合、インタラクションロジックは完全に異なり、対話形式は初心者ユーザーにとってフレンドリーな体験を提供します。この点において、NewBingが各質問の後で提示する追質問の提案は言及せざるを得ません。これは、Microsoftがユーザーを誘導し、AIナレッジベースからより多くの情報を取得しようとする試みです。&lt;/p&gt;
&lt;h2 id=&#34;例えば&#34;&gt;例えば
&lt;/h2&gt;&lt;p&gt;長時間の新幹線の移動中、コーディングは良い選択肢だ。データ通信量が限られているので、画像を数枚処理し、画像素材を入手した。ソフトウェアをダウンロードして画像を処理するのは少し贅沢すぎるし、ネットワーク環境もそれを許さない。&lt;/p&gt;
&lt;p&gt;要件：一連の画像素材があり、それらは透明な背景を持つものとします。これらの画像をミニプログラムのナビゲーションバーに使用し、選択された状態はカラー表示、未選択の状態は白黒表示にしたいと考えています。素材自体はすべてカラーなので、事前に処理する必要があります。&lt;/p&gt;
&lt;p&gt;フォルダ内のすべての画像を読み込み、画像を白黒に変換し、透明な背景を維持し、画像の品質を最適化してファイルサイズを縮小しながら画像を保存するPythonコードを作成してください。コンソールには、最適化前のファイルサイズと最適化後のファイルサイズの比較を表示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 导入必要的库
import os
import PIL
from PIL import Image

# 定义一个函数，将图片转换成黑白，维持透明背景，保存图片，并返回文件体积
def convert_and_save(image_file):
    # 打开图片
    image = Image.open(image_file)
    # 获取图片的模式，如果是 RGBA 模式，说明有透明背景
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 创建一个和图片大小一致的白色背景图片
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 将原图片粘贴到白色背景上，忽略透明像素
        background.paste(image, mask=image.split()[3])
        # 将合成的图片转换成灰度模式
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # 将灰度图片再转换成 RGBA 模式，以便保留透明背景
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # 如果不是 RGBA 模式，直接将图片转换成灰度模式
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 获取原图片的文件名和扩展名
    file_name, file_ext = os.path.splitext(image_file)
    # 定义新图片的文件名，添加 _bw 后缀表示黑白
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 保存新图片，并优化质量，减少文件体积
    final_image.save(new_file_name, optimize=True)
    # 获取原图片和新图片的文件体积，并返回
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return old_size, new_size

# 定义一个文件夹路径，存放所有的图片
folder_path = &amp;quot;images&amp;quot;
# 遍历文件夹中的所有文件
for file in os.listdir(folder_path):
    # 拼接完整的文件路径
    file_path = os.path.join(folder_path, file)
    # 判断是否是图片文件，根据扩展名判断，可以根据需要添加或修改扩展名
    if file_path.endswith((&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;)):
        # 调用函数，转换并保存图片，并获取文件体积
        old_size, new_size = convert_and_save(file_path)
        # 在控制台展示优化前后的文件体积大小对比
        print(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AIはすぐに答えを出力し、見た目も良く問題なく動作するものの、経験豊富なプログラマーなら、下記のコードが十分に汎用的ではなく、本番環境にデプロイするには向いていないと感じるだろう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パラメータが固定されました。&lt;/li&gt;
&lt;li&gt;ログファイルはなく、情報はすべてコンソールに出力されています。&lt;/li&gt;
&lt;li&gt;画像の処理タスクは、マルチスレッドモデルに適しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ニュービングが登場し、プロンプトに従って質問を選びました。&lt;strong&gt;このコードには改善できる点はありますか？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今回いただいた回答は、正直言って、完全に予想を上回っています。一般的なプログラマーが思いつくような最適化策に対して、AI が対応する提案を出してくるほどです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;这段代码可能还有一些可以改进的地方，比如：

可以使用 argparse 库，让用户可以通过命令行参数指定文件夹路径和扩展名，而不是写死在代码里。
可以使用 logging 库，记录程序的运行情况，而不是直接打印到控制台。
可以使用 try-except 语句，捕获可能出现的异常，比如文件打开失败，图片转换失败等，并做相应的处理。
可以使用 multiprocessing 库，利用多核处理器，加速图片的转换和保存过程。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;非常にフレンドリーな対応で、デプロイ環境の違いを考慮し、マルチプロセスをサポートしていないことを許可します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;当然，我很乐意帮你修改一下代码。我尝试添加了 argparse, logging 和 try-except 语句，但没有添加 multiprocessing 库，因为我不确定你的电脑是否支持多核处理。修改后的代码如下：
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 导入必要的库
import argparse
import logging
import multiprocessing
import os

from PIL import Image


# 定义一个函数，将图片转换成黑白，维持透明背景，保存图片，并返回文件体积
def convert_and_save(image_file):
    # 打开图片
    try:
        image = Image.open(image_file)
    except Exception as e:
        logging.error(f&amp;quot;Failed to open {image_file}: {e}&amp;quot;)
        return None, None
    # 获取图片的模式，如果是 RGBA 模式，说明有透明背景
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 创建一个和图片大小一致的白色背景图片
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 将原图片粘贴到白色背景上，忽略透明像素
        background.paste(image, mask=image.split()[3])
        # 将合成的图片转换成灰度模式
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # 将灰度图片再转换成 RGBA 模式，以便保留透明背景
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # 如果不是 RGBA 模式，直接将图片转换成灰度模式
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 获取原图片的文件名和扩展名
    file_name, file_ext = os.path.splitext(image_file)
    # 定义新图片的文件名，添加 _bw 后缀表示黑白
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 保存新图片，并优化质量，减少文件体积
    try:
        final_image.save(new_file_name, optimize=True)
    except Exception as e:
        logging.error(f&amp;quot;Failed to save {new_file_name}: {e}&amp;quot;)
        return None, None
    # 获取原图片和新图片的文件体积，并返回
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return file_name, old_size, new_size

# 定义一个函数，解析命令行参数，并返回文件夹路径和扩展名列表
def parse_args():
    # 创建一个解析器对象
    parser = argparse.ArgumentParser(description=&amp;quot;Convert images to black and white and optimize quality.&amp;quot;)
    # 添加一个必选的位置参数，表示文件夹路径
    parser.add_argument(&amp;quot;folder_path&amp;quot;, help=&amp;quot;The path of the folder that contains the images.&amp;quot;)
    # 添加一个可选的参数，表示扩展名列表，默认为 png, jpg, jpeg 和 gif
    parser.add_argument(&amp;quot;-e&amp;quot;, &amp;quot;--extensions&amp;quot;, nargs=&amp;quot;+&amp;quot;, default=[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;], help=&amp;quot;The extensions of the image files.&amp;quot;)
    # 解析命令行参数，并返回结果对象
    args = parser.parse_args()
    return args.folder_path, args.extensions

# 定义一个函数，打印优化前后的文件体积大小对比
def print_result(result):
    # 如果结果不为空，说明转换和保存成功
    if result:
        # 解包结果为文件名和文件体积元组
        if len(result) == 3:
            file, old_size, new_size = result
            # 在控制台展示优化前后的文件体积大小对比
            logging.info(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
        else:
            logging.info(f&amp;quot;{result}&amp;quot;)

# 配置日志记录器，将日志输出到控制台和文件中，设置日志等级为 INFO
logging.basicConfig(level=logging.INFO,
                    format=&amp;quot;%(asctime)s %(levelname)s %(message)s&amp;quot;,
                    handlers=[logging.StreamHandler(),
                              logging.FileHandler(&amp;quot;log.txt&amp;quot;)])

# 调用函数，获取文件夹路径和扩展名列表
folder_path, extensions = parse_args()

if __name__ == &amp;quot;__main__&amp;quot;:
    # Windows 需要这个函数的原因是 Windows 缺乏 fork() 函数（这不完全正确）。
    # 因此，在 Windows 上，fork() 是通过创建一个新的进程来模拟的，这个新的进程中运行的代码，在 Linux 上是在子进程中运行的。
    # 由于这些代码要在技术上无关的进程中运行，所以它必须在运行之前被传递到那里。
    # 传递的方式是先将它们序列化，然后通过管道从原始进程发送到新的进程。
    # 另外，这个新的进程被通知它必须运行通过管道传递的代码，通过向它传递 --multiprocessing-fork 命令行参数。
    # 如果你看一下 freeze_support() 函数的实现，它的任务是检查它运行在哪个进程中，是否应该运行通过管道传递的代码
    multiprocessing.freeze_support()

    # 创建一个进程池，根据电脑的核心数自动分配进程
    pool = multiprocessing.Pool()
    # 创建一个空列表，用于存放异步任务的结果对象
    results = []
    # 遍历文件夹中的所有文件
    for file in os.listdir(folder_path):
        # 拼接完整的文件路径
        file_path = os.path.join(folder_path, file)
        # 判断是否是图片文件，根据扩展名判断，可以根据需要修改扩展名列表
        if any(file_path.endswith(ext) for ext in extensions):
            # 调用函数，转换并保存图片，并获取文件体积，使用异步方式，不阻塞主进程
            result = pool.apply_async(convert_and_save, args=(file_path,), callback=print_result)
            # 将结果对象添加到列表中
            results.append((file, result))
    # 关闭进程池，不再接受新的任务
    pool.close()
    # 等待所有的任务完成
    pool.join()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;ローカル開発環境が&lt;code&gt;Windows&lt;/code&gt;システムであるため、&lt;code&gt;AI&lt;/code&gt;が最初に提示した回答には&lt;code&gt;main&lt;/code&gt;関数も&lt;code&gt;multiprocessing.freeze_support&lt;/code&gt;も含まれていませんでした。質問への対応でエラーが発生し、それによってコードを修正しました。&lt;/p&gt;
&lt;p&gt;かつて検索エンジンのテクニックを学ぶように、私たちもAIとコミュニケーションをとるためのテクニックを学び、合理的で十分な制約を与え、必要な答えを効率的に得る必要があります。&lt;/p&gt;
&lt;p&gt;注意：プログラミング初心者の方で、与えられたコメントに基づいて理解できない部分があれば、関連コードについてさらに質問してください。&lt;/p&gt;</description>
        </item>
        <item>
        <title>WeChatミニプログラムの背景と開発環境</title>
        <link>https://ttf248.life/ja/p/wechat-mini-program-background-and-development-environment/</link>
        <pubDate>Fri, 24 Mar 2023 21:59:11 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wechat-mini-program-background-and-development-environment/</guid>
        <description>&lt;p&gt;微信ミニプログラムの紹介と開発準備&lt;/p&gt;
&lt;h2 id=&#34;なぜ小程序があるのか&#34;&gt;なぜ小程序があるのか
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;より良い体験：埋め込みウェブページの読み込みが遅い、白い画面が表示される。ネイティブアプリの体験は、より高速な読み込みを実現します。&lt;/li&gt;
&lt;li&gt;規格と管理：WeChatにとって、接続と管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小番組がリリースされる前に、微信は「JSSDK」というSDKを公開し、微信のネイティブ機能の一部（微信決済、カード）を開放していました。しかし、開発者はWeb開発言語のロジックに基づいて開発を行っていたため、微信の一部の規制を回避することができました。小番組には独自の記述言語があります。&lt;/p&gt;
&lt;h2 id=&#34;ミニプログラムとは何ですか&#34;&gt;ミニプログラムとは何ですか。
&lt;/h2&gt;&lt;p&gt;ミニプログラムは、ダウンロードやインストールが不要で利用できるアプリケーションであり、アプリケーションを&lt;strong&gt;誰でも手の届く範囲に置く&lt;/strong&gt;という夢を実現しています。&lt;/p&gt;
&lt;p&gt;ユーザーがスキャンするか検索するだけでアプリが開くことからも、&lt;strong&gt;使ってすぐに去る&lt;/strong&gt;というコンセプトが伝わります。&lt;/p&gt;
&lt;p&gt;ユーザーは、インストールしすぎたアプリについて心配する必要はありません。アプリはどこにでもあり、いつでも利用できるけれど、&lt;strong&gt;インストールやアンインストールは不要&lt;/strong&gt;です。&lt;/p&gt;
&lt;h2 id=&#34;小程序とモバイルアプリの違い&#34;&gt;小程序とモバイルアプリの違い
&lt;/h2&gt;&lt;p&gt;インストール不要、メモリを占有しない、拡散しやすい：QRコード、ミニプログラムカード、検索&lt;/p&gt;
&lt;h2 id=&#34;微信ミニプログラムは何ができますか&#34;&gt;微信ミニプログラムは何ができますか。
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;コンテンツツール：知乎ホットトピック、微博トレンド、モバイクシェアサイクル、今日ヘッドライン、テンセントマップ、テンセント翻訳&lt;/li&gt;
&lt;li&gt;小売：ピンタオドゥオ、ジーディーモール、モゴグマオ、メルアイフレッシュ、シャオミストア、クエションシー&lt;/li&gt;
&lt;li&gt;ゲーム：跳一跳、欢乐斗地主、欢乐麻将、斗鱼直播、YYライブ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コースの内容は2018年のもので、今となっては、一部のアプリケーションベンダーがすでに倒産しています。&lt;/p&gt;
&lt;h2 id=&#34;開発準備&#34;&gt;開発準備
&lt;/h2&gt;&lt;p&gt;小さなプログラムのアカウント登録：通常通り情報を入力すれば登録できます。メールの認証リンクをクリックして有効にしてください。
情報登録
3. ミニプログラム管理后台にログインする。
小程序情報を完善する
開発者バインディング：個人開発者は、ログインするWeChatアカウントが管理者アカウントであるため、追加のバインド作業は不要です。&lt;/p&gt;
&lt;p&gt;メールアドレスには制限があり、新しいメールアドレスが必要ですが、&lt;code&gt;QQ&lt;/code&gt;メイルはエイリアスを申請できます。WeChatの管理画面では検証されません。試してみたところ、ミニプログラムの名前はやや面倒でしたが、商標に関わるものは審査に落ちやすいようです。&lt;/p&gt;
&lt;p&gt;サービスカテゴリは選択可能で、カスタム追加もできます。1つのミニプログラムでは5つのカテゴリを追加できます。&lt;/p&gt;
&lt;p&gt;設定内で、ミニプログラムの&lt;code&gt;ID&lt;/code&gt;情報を確認できたり、メッセージプッシュを有効にしたりできます。メッセージプッシュを有効にすると、メッセージテンプレート機能が利用できるようになります。&lt;/p&gt;
&lt;h2 id=&#34;開発者ツール筆者の記述&#34;&gt;開発者ツール（筆者の記述）
&lt;/h2&gt;&lt;p&gt;通常通りダウンロードとインストールは問題なく、特に注意点はありません。簡単に理解し、そのままゲストモードで入ります。もし携帯電話のデバッグを有効にしたい場合は、つまり携帯電話からミニプログラムの開発バージョンを確認したい場合は、ミニプログラムの開発者アカウントにログインし、設定をクリックして、プロジェクトの詳細内で指定されたミニプログラムIDに切り替えてください。&lt;/p&gt;
&lt;h2 id=&#34;コード構造&#34;&gt;コード構造
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JS: 双方向インタラクション&lt;/li&gt;
&lt;li&gt;JSON：データ設定&lt;/li&gt;
&lt;li&gt;wXML：インターフェースの要素&lt;/li&gt;
&lt;li&gt;スタイルシート&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>オフィス移転のため、サーバーにアクセスできません。</title>
        <link>https://ttf248.life/ja/p/office-migration-server-unavailable/</link>
        <pubDate>Sat, 11 Mar 2023 01:42:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/office-migration-server-unavailable/</guid>
        <description>&lt;p&gt;周知いたします。オフィスが変更になり、元の2階から15階へ移転します。これは通常の席の移動です。&lt;/p&gt;
&lt;h2 id=&#34;デザイン性&#34;&gt;デザイン性
&lt;/h2&gt;&lt;p&gt;オフィスビル&lt;/p&gt;
&lt;h2 id=&#34;移動&#34;&gt;移動
&lt;/h2&gt;&lt;p&gt;退社して荷物をまとめて、慣れた手つきで新しい席へ。パソコンの配線を整えて、楽な姿勢で作業開始。&lt;/p&gt;
&lt;p&gt;（´д`||）！、ネットケーブルを繋いでみたけど、チームでよく使うサーバーにアクセスできない。無線ネットワークに切り替えたら、またアクセスできるようになった。&lt;/p&gt;
&lt;p&gt;当初はサーバーのネットワークセグメント設定の問題かと思った。新しい作業場所の有線ネットワークが、ファイアウォールの設定リストに登録されていないだけだろうと。IT担当者に連絡して調整すれば良いはずだ。しかし、このネットワークセグメントには一台のサーバーだけでなく、他のサーバーにもアクセスしてみると正常だったため、徐々に疑問が生じた。専門的なことは専門の人に任せることにし、最終的に運用部門の担当者が調査した結果、このサーバーが&lt;code&gt;docker&lt;/code&gt;をデプロイしていたために、サービスのデフォルトネットワーク&lt;code&gt;docker0&lt;/code&gt;とオフィス有線ネットワークの設定セグメントが衝突しており、送信されたデータパケットが応答を受け取れずに&lt;code&gt;docker&lt;/code&gt;サービスにルーティングされてしまっていたことが判明した。&lt;/p&gt;
&lt;p&gt;他のサーバーには&lt;code&gt;docker&lt;/code&gt;サービスはデプロイされていないので、この台だけが利用できており、よく使う。時々コンテナでテストサービスをデプロイすることもあるが、まさかこんな状況に遭遇するとは思いもよらなかった。後で考えると、グループ全体が同じオフィスビルに入っているため、IT部門の同僚がネットワークセグメントを分けて&lt;code&gt;172&lt;/code&gt;から始まるアドレスを使っているのも不思議ではない。&lt;/p&gt;
&lt;h2 id=&#34;docker0&#34;&gt;docker0
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# vim /etc/docker/daemon.json
{
    &amp;quot;bip&amp;quot;:&amp;quot;172.200.0.1/24&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サービスを再起動し、新しいネットワークに切り替えると、サーバーは通常通りアクセスできるようになります。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;Docker 入門から実践 - docker0&lt;/p&gt;</description>
        </item>
        <item>
        <title>組み込み入門 1 - 専門用語</title>
        <link>https://ttf248.life/ja/p/embedded-introduction-professional-terms/</link>
        <pubDate>Tue, 07 Mar 2023 13:42:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/embedded-introduction-professional-terms/</guid>
        <description>&lt;p&gt;組み込みシステムといえば、やはり昔から学校の実験室にあった51マイクロコントローラーやfreescaleが思い浮かぶ。&lt;/p&gt;
&lt;p&gt;LPA3399Proは、ルネテックRK3399Proプラットフォームをベースとしたビジョンホストであり、大量のビジョンプrocessingを必要とするポータブルコンピューティングホスト向けに開発されました。NPU計算ユニットを内蔵し、3.0TOPSの演算能力を持ち、様々なアルゴリズムモデルをサポートしています。&lt;/p&gt;
&lt;p&gt;RV1109は、聯芯科技（RuiXinTech）のAIおよびマシンビジョン分野に特化したSoCであり、内蔵型NPUを搭載しています。RV1109は、1TOPSの演算能力を提供します。&lt;/p&gt;
&lt;h2 id=&#34;system-on-chip&#34;&gt;System on Chip
&lt;/h2&gt;&lt;p&gt;SoCは、System on a Chipの略で、「チップ上のシステム」を意味します。これは、複数の電子システムを1つのチップに統合する技術です。この技術により、電子製品のサイズと重量を大幅に削減しながら、性能を向上させ、消費電力を抑えることができます。&lt;/p&gt;
&lt;p&gt;SoC（システムオンチップ）とCPU（中央処理装置）は、どちらもコンピューターシステムの重要な構成要素ですが、いくつかの違いがあります。&lt;/p&gt;
&lt;p&gt;CPUはコンピュータシステムの主要なプロセッサであり、プログラム命令の実行を担います。演算ユニット、制御ユニット、レジスタなどの基本的な部品で構成されています。&lt;/p&gt;
&lt;p&gt;SoCは、複数の電子システムを1つのチップに統合したものであり、CPUの他に、メモリ、グラフィックプロセッサ、入出力インターフェースなどの他のコンポーネントも集積できます。これにより、電子製品のサイズと重量を大幅に削減しつつ、性能を向上させ、消費電力を低減することができます。&lt;/p&gt;
&lt;p&gt;要するに、CPUはSoCの構成要素であり、SoCはより複雑で集積度の高い電子システムです。&lt;/p&gt;
&lt;h2 id=&#34;microcontroller-unit&#34;&gt;Microcontroller Unit
&lt;/h2&gt;&lt;p&gt;SoC（システムオンチップ）とMCU（マイクロコントローラーユニット）は、複数の電子システムを1つのチップに統合する技術ですが、それらにはいくつかの違いがあります。&lt;/p&gt;
&lt;p&gt;MCUは、CPU、メモリ、入出力インターフェースなどの基本的な部品を含むマイクロコントローラーの一種です。家電製品や自動車の電子システムなど、他の電子機器を制御するために一般的に使用されます。&lt;/p&gt;
&lt;p&gt;SoCは、より多くの電子システムを1つのチップに統合したものであり、MCUの基本的な構成要素に加え、グラフィックプロセッサや無線通信モジュールなどの他のコンポーネントも集積できます。これにより、電子製品のサイズと重量を大幅に削減しつつ、性能を向上させ、消費電力を低減することができます。&lt;/p&gt;
&lt;p&gt;要するに、MCUはシンプルなマイクロコントローラーであり、SoCはより複雑で統合度の高い電子システムです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>AI支援によるプログラミング、生産性の進化</title>
        <link>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;GitHub Copilotのリリースから2年も経っていないうちに、ChatGPTが登場しました。その裏側の仕組みはよく分かりませんが、しばらく使っています。この二つのツールは補助的な面で全く異なりながらも、いずれも生産性を大きく向上させています。&lt;/p&gt;
&lt;p&gt;あまりに複雑なことは、AIではまだできません。結局のところ、彼らには論理がないからです。パターンが決まっていることや、固定されたパラダイムのようなことに対しては、学習データが十分であれば、AIの効果は9割程度期待できます。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;github copilot
&lt;/h2&gt;&lt;p&gt;公開されたとき、公式サイトのデモを見て、あまり賢そうではないし、試してみたけれど使い勝手が悪く、諦めた。&lt;/p&gt;
&lt;p&gt;2022年以前、暇な時に新しいバージョンを試してみたら、すでに効果はかなり良いです。ただ、国内の速度が少し遅いので、おそらくネットワークの問題でしょう。&lt;code&gt;Python&lt;/code&gt;のような言語で、コメントを参照して書かれたコードはなかなか良く、自分で資料を探して書くよりもずっと速いです。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;GitHub Copilotはまだ、プログラマー、つまり開発の視点から製品を設計している段階で、プログラミングの方法を知り、徐々にコメントを通じてAIによる補助的なプログラミングを促す必要があります。&lt;/p&gt;
&lt;p&gt;ChatGPT が次のレベルに進化し、&lt;strong&gt;素人でもすぐに使いこなせる&lt;/strong&gt;ようになりました。 会話形式のインタラクティブなデザインなので、どんな質問や要望でも気軽に投げかけられ、わからないことがあれば、遠慮なく追加で質問できます。&lt;/p&gt;
&lt;p&gt;単純な例として、トークン化の概念は知っているけれど、どのようにコーディングすればいいのかわからない。文字列の類似度を計算したいと考えている場合：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python 分词计算 維天運通 LOGORY 和 合肥維天運通信息科技股份有限公司 两个字符串的相似度；
比较前，统一处理字符串，英文转换为小写；
第二个字符中如果能找到第一个字符的首字符，将第二个字符串截位，截位的长度为第一个字符串的长度
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんにちは、これはBingです。😊&lt;/p&gt;
&lt;p&gt;オンラインの情報によると123、Pythonの形態素解析には、jiebaライブラリを使用できます。jiebaライブラリは、厳密モード、フルモード、そして検索エンジンモードという3つの形態素解析モードをサポートしています。ニーズに合わせて適切なモードを選択してください。&lt;/p&gt;
&lt;p&gt;文字列の類似度を比較するためには、まず文字列をトークン化し、次に単語ベクトルや編集距離などの指標を計算する必要があります。numpy や scipy などのライブラリを使用して数学演算を行うことができます。&lt;/p&gt;
&lt;p&gt;文字列を統一的に処理するために、英字を小文字に変換するには、Python の組み込み関数lower()を使用できます。&lt;/p&gt;
&lt;p&gt;2番目の文字列を切り出すには、Pythonのスライス演算子[]を使用できます。&lt;/p&gt;
&lt;p&gt;以下はサンプルコードです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jieba
import numpy as np
from scipy.spatial.distance import cosine

# 定义两个字符串
str1 = &amp;quot;維天運通 LOGORY&amp;quot;
str2 = &amp;quot;合肥維天運通信息科技股份有限公司&amp;quot;

# 统一处理字符串，英文转换为小写
str1 = str1.lower()
str2 = str2.lower()

# 找到第二个字符串中第一个字符的位置
index = str2.find(str1[0])

# 如果找到了，截取第二个字符串
if index != -1:
    str2 = str2[index:index+len(str1)]

# 使用 jieba 库进行分词
words1 = list(jieba.cut(str1))
words2 = list(jieba.cut(str2))

# 计算两个字符串的词向量（以词频作为权重）
vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))

for i, word in enumerate(words1):
    vector1[i] += 1 # 统计第一个字符串中每个词出现的次数
    if word in words2:
        vector2[i] += 1 # 统计第二个字符串中每个词出现的次数

# 计算两个字符串的相似度（以余弦距离作为指标）
similarity = 1 - cosine(vector1, vector2)

print(&amp;quot;两个字符串的相似度是：&amp;quot;, similarity)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;さらに進めて、実行結果について問い合わせたところ、問題が見つかりました。結果はでっち上げられており、実際にはコードが実行されていないようですが、なかなか良い結果を返してきます。&lt;/p&gt;
&lt;h3 id=&#34;くり&#34;&gt;くり
&lt;/h3&gt;&lt;p&gt;質問：SQL文で、製品コード表から、製品コードが80000～89999の範囲にあるレコードを抽出するにはどうすればよいでしょうか。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;你好，这是 Bing。😊

根据搜索结果12，你可以使用 SQL BETWEEN 运算符来选择给定区间内的值。BETWEEN 运算符包含了开始和结束的值。

你需要先指定要查询的表名和列名，然后在 WHERE 子句中使用 BETWEEN 运算符和区间值。

例如，如果你要查询产品代码表中，产品代码在 80000 到 89999 之间的记录，你可以使用以下语句：

SELECT * FROM product_code
WHERE code BETWEEN 80000 AND 89999;
这里，* 表示选择所有列3。如果你只想选择特定的列，比如产品名称和价格，你可以用逗号分隔它们，如下：

SELECT name, price FROM product_code
WHERE code BETWEEN 80000 AND 89999;
希望这能帮助到你。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引き続き質問し、否定してください。製品コードは文字列です。あなたのコードが間違っています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;抱歉，我没有注意到产品代码是字符串。如果是这样的话，你需要在区间值两边加上单引号，如下：

SELECT * FROM product_code
WHERE code BETWEEN &#39;80000&#39; AND &#39;89999&#39;;
请原谅我的错误。🙏
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おめでとうございます、間違えるでしょう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>いくつかのあまり使われないGitコマンドまとめ</title>
        <link>https://ttf248.life/ja/p/git-less-common-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-less-common-commands-summary/</guid>
        <description>&lt;p&gt;あまり使わないけれど役に立つ&lt;code&gt;git&lt;/code&gt;コマンド&lt;/p&gt;
&lt;h3 id=&#34;システム再インストールによりwindows上のフォルダの所有者情報が変更されました&#34;&gt;システム再インストールにより、Windows上のフォルダの所有者情報が変更されました。
&lt;/h3&gt;&lt;p&gt;新しいバージョンの&lt;code&gt;git&lt;/code&gt;にセキュリティチェックが追加され、警告が表示されるため、操作を続行できません。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;新しいコンピューターにアカウントとパスワードの情報を保存します&#34;&gt;新しいコンピューターにアカウントとパスワードの情報を保存します。
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;情報が更新される必要があれば、まず古い記録を削除してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>香港ドル・人民元両方対応</title>
        <link>https://ttf248.life/ja/p/hk-rmb-dual-counter-mode/</link>
        <pubDate>Thu, 16 Feb 2023 20:25:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hk-rmb-dual-counter-mode/</guid>
        <description>&lt;p&gt;香港証券取引所は12月13日に発表したところによると、傘下の証券市場では「香港ドル・人民元デュアルカウンテシステム」（以下、「デュアルカウンテシステム」と称する）及びデュアルカウンテマーケットメイカーメカニズムを導入し、これにより香港における人民币カウンターの新規上場、取引、決済をさらに支援することになる。&lt;/p&gt;
&lt;h2 id=&#34;両カウンターモデル及び両カウンターディーラーメカニズム&#34;&gt;両カウンターモデル及び両カウンターディーラーメカニズム
&lt;/h2&gt;&lt;p&gt;香港証券取引所によると、規制当局の承認と市場の準備が整い次第、新たな措置の登録手続きは2023年上半期に開始される見込みです。デュアルカントリーモデルの下で、香港証券取引所は関連する取引および決済の手配を最適化し、投資家が同じ発行体が発行する香港ドルカウンターと人民元カウンターの証券を交換できるようにします。&lt;/p&gt;
&lt;p&gt;香港証券取引所は、人民元カウンターの流動性を高め、両カウンター間のスプレッドを縮小するため、デュアルカウンターマーケットメイカーメカニズムを導入する。関連法案が立法会で可決され次第、通量供給活動を行う市場のマーケットメイカーは、特定の取引において印花税が免除されるようになる。同時に、これらの新たな措置は、今後の中国本土投資家による香港経由での人民元価格設定の証券取引のための準備段階となるものと見られる。&lt;/p&gt;
&lt;p&gt;香港証券取引所の最高執行責任者兼市場共同責任者であるウォン・カワイエン氏は、「香港ドル-人民元両カウンターモデルと両カウンターディーラーメカニズムの導入は、当社の市場発展における重要な取り組みです。この手配は、他の市場取り組みとの連携により、より多くの両カウンター証券を香港での上場に誘致し、香港証券取引所が既に有する中国本土製品との良好な相乗効果を生み出すでしょう。香港証券取引所は、人民元の国際化プロセスを積極的に推進し、香港の世界的な主要オフショア人民元ハブとしての地位を向上させることに尽力しています。」&lt;/p&gt;
&lt;p&gt;香港株式市場の現行の新規上場、取引、清算および決済の手配は、人民元カウンター制度下の人民元圏証券にもおおむね適用される予定です。香港証券取引所は、ダブルカウンターモデルの実施日と、指定投資家メカニズムに組み入れが可能な資格のあるダブルカウンター証券の一覧を適宜発表します。&lt;/p&gt;
&lt;h2 id=&#34;香港ドル人民元取引カウンターの見分け方&#34;&gt;香港ドル・人民元取引カウンターの見分け方
&lt;/h2&gt;&lt;p&gt;香港証券取引所の書類によると、香港ドル・人民元両方通貨でのデュアルカウンテートレードの手配は、既存の株式コード割り当て計画を大まかに遵守し、香港ドルのカウンター株コードは「0」で始まる5桁の数字、人民元のカウンター株コードは「8」で始まる5桁の数字とする。香港ドルおよび人民元両方のカウンター株コードの最後の4桁は同じになる。人民元カウンター株の銘柄名は、「-R」を后缀として付加する。&lt;/p&gt;
&lt;p&gt;取引手配に関して、人民幣および香港ドルのカウンターで取り扱われる証券が同一カテゴリーであり相互に換算可能な場合、もしあるカウンター（例えば香港ドルカウンター）が空売りを許可される指定証券であれば、もう一方のカウンター（例えば人民幣カウンター）も取引所規則に従って空売りを許可される指定証券として組み込まれることになり、それに応じて両カウンターとも取引所が公表する空売りを許可される指定証券リストに掲載されます。&lt;/p&gt;
&lt;p&gt;両カウンターの株式が同一カテゴリーに属し、相互に換算可能であるため、香港ドルで購入し人民元で売却するか、またはその逆は、いずれもホールドアンドスリップ（持貨沽売）とみなされます。両カウンター間の決済期間はT+2です。&lt;/p&gt;
&lt;p&gt;指定株式に対する空売り資格を満たす場合、例えば香港ドルで借り入れた株式を人民元カウンターで売却する場合、担保付きの空売りとみなされ、その逆も同様です。&lt;/p&gt;
&lt;p&gt;両カウンター方式の場合、人民元カウンターは取引および決済のみに利用されるため、現物の株式の預け入れや引き出しサービスは提供されません。現物の株式は香港ドルカウンターに預け入れられた後で初めて人民元カウンターに換金できます。同様に、人民元カウンターから現物の株式を引き出すには、香港ドルカウンターに換金する必要があります。&lt;/p&gt;
&lt;p&gt;関連取引の清算および決済にかかる費用は、香港の決済手数料を除き、配当受取サービス料および利息受取サービス料以外のものはすべて香港ドルで計算され徴収されます。配当受取サービス料および利息受取サービス料は、当該証券に採用されている資格のある通貨で計算されます。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Trading/Securities/Overview/Trading-Mechanism/HKD-RMB-Dual-Counter-Model?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKD-RMB-Dual-Counter-Model&lt;/a&gt;
出所：香港証券取引所パルス/HKEx Pulse、証券中国&lt;/p&gt;</description>
        </item>
        <item>
        <title>コンパイラ、コールバック関数、パフォーマンス テスト</title>
        <link>https://ttf248.life/ja/p/compiler-callback-function-performance-testing/</link>
        <pubDate>Wed, 15 Feb 2023 13:59:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/compiler-callback-function-performance-testing/</guid>
        <description>&lt;p&gt;昨年、SDKを設計しました。いくつかのイベントの処理とカプセル化を担当し、クラスインターフェースとして外部に提供します。サービス初期化時に、呼び出し元は対応するクラスを実装し、オブジェクトポインタをモジュールに渡します。
C11に触れたことがあり、好奇心から、これらのインターフェースをラムダ関数オブジェクトのコールバックで実装するとどうなるだろうかと考えた結果、純粋な仮想関数のインターフェース定義と比較して、より柔軟になるように思えた。
疑問が生じました。二つの異なる文法、パフォーマンスの観点から言えば、どちらがより高速でしょうか？コンパイラ原理は理解していませんが、コードを書いて試してみます。&lt;/p&gt;
&lt;h2 id=&#34;まえがき&#34;&gt;まえがき
&lt;/h2&gt;&lt;p&gt;オンラインのウェブサイトで、さまざまなコンパイラやコンパイルパラメータを選択し、Linuxプラットフォーム上でコードを実行したり、対応するアセンブリコードを確認したりできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wandbox.org：時々技術検証をする際に、ウェブページ上で短いコードの実行が手間を省くのに便利です。&lt;/li&gt;
&lt;li&gt;Godbolt.org は、異なる色で異なるアセンブリコードに対応するコードを区別するため、ローカルのデバッガーよりも見やすくなります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;標準委員会は文法の規則を策定し、コンパイルレベルでの実装方法は各々のコンパイラに依存しますが、ここで言及せざるを得ないのは、Microsoftのコンパイラが非常に優れていることだ。シンタックスシュガーは万能ではなく、コールバックインターフェースも多くはないので、&lt;code&gt;lambda&lt;/code&gt;を使用する方がより便利であり、空のコールバック関数インターフェースを定義する必要もない。コールバックインターフェースの種類が多くなる場合は、従来の仮想関数の方がビジネスインターフェースの統一に有利である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windowsプラットフォームですが、両者の性能はほぼ同等で、大きな違いはありません。&lt;/li&gt;
&lt;li&gt;Linuxプラットフォーム、仮想関数とラムダの比較、単回で1.35ns増加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常のビジネスシステム開発においては、このレベルのパフォーマンス損失は無視できる。&lt;code&gt;lambda&lt;/code&gt;を導入することで、設計においてより多くの利便性が得られる。特に多信号処理を行う場合、その効果が顕著になる。イベントトリガーがあり、ログを記録する必要がある場合は、ログオブジェクトの処理関数が必要となる。より多くのビジネス処理インターフェースが必要な場合は、&lt;code&gt;vector&lt;/code&gt;で&lt;code&gt;lambda&lt;/code&gt;オブジェクトを保存し、イベントトリガー時に順に呼び出す。これは、&lt;code&gt;QT&lt;/code&gt;におけるシグナルとスロットに似ており、ログ、監視、ビジネス1、ビジネス2などが完全に疎結合になる。&lt;/p&gt;
&lt;h2 id=&#34;コード&#34;&gt;コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Counter: 1000000
Time: 3966us
Counter: 1000000
Time: 5316us
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;atomic&amp;gt;
#include &amp;lt;string&amp;gt;

std::atomic_int64_t counter = 0;

// 定义回调接口
class UserInterface
{
public:
    virtual void name() = 0;
    virtual void full_name() = 0;
};

class User : public UserInterface
{
public:
    void name() {}
    void full_name() { counter++; }
};

void to_string(UserInterface* user)
{
    user-&amp;gt;name();
    user-&amp;gt;full_name();
}

using name_handler = std::function&amp;lt;void()&amp;gt;;
using full_name_handler = std::function&amp;lt;void()&amp;gt;;

class Test
{
    name_handler name_;
    full_name_handler full_name_;

public:
    void set_name_handler(name_handler name)
    {
        name_ = name;
    }

    void set_full_name_handler(full_name_handler full_name)
    {
        full_name_ = full_name;
    }

    void to_string()
    {
        name_();
        full_name_();
    }
};

int main()
{
    User user;

    auto start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++)
    {
        to_string(&amp;amp;user);
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;Counter: &amp;quot; &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;Time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

    counter = 0;
    auto name = []() {};
    auto full_name = []() { counter++; };

    Test test;
    test.set_name_handler(name);
    test.set_full_name_handler(full_name);

    start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++)
    {
        test.to_string();
    }

    end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;Counter: &amp;quot; &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;Time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;資料を探しているとき、似たようなコードスニペット&lt;a class=&#34;link&#34; href=&#34;https://gist.githubusercontent.com/benloong/8050171/raw/fa577ec923b460862078b8b40233a42a1c619eeb/functionperformance.cpp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;functionperformance.cpp&lt;/a&gt;にたどり着きました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

using namespace std;
using namespace std::chrono;

class Base
{
public:
	Base(){}
	virtual ~Base(){}
	virtual int func(int i) = 0;
};

class Derived : public Base
{
public:
	Derived(int base = 10) : base{base}
	{

	}
	~Derived(){}

	virtual int func(int i)
	{
		return i*base;
	}
private:
	int base;
};

struct Func
{
	int base;
	int operator()(int i)
	{
		return i*base;
	}
	Func(int base) : base {base}
	{

	}
};
const int base = 10;
int calculate(int i)
{
	return base*i;
}

int main()
{
	const int num = 10000;
	Base *p = new Derived{10};
	int total = 0;
	auto start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += p-&amp;gt;func(i);
	}
	auto end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nvirtual call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += calculate(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\ndirect function call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	Func functor{10};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += functor(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nfunctor call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	int base = 10;
	function&amp;lt;int(int)&amp;gt; lambda = [base](int i)
	{
		return i*base;
	};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += lambda(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nlambda call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	return 0;
}

/*
test on mac mini i7 2.7GHz
clang++ -std=c++11 chronotest.cpp -O0
output:
result: 499950000
virtual call elapsed: 	43171 nanoseconds.

result: 499950000
direct function call elapsed: 	31379 nanoseconds.

result: 499950000
functor call elapsed: 	41497 nanoseconds.

result: 499950000
lambda call elapsed: 	207416 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O1
output:
result: 499950000
virtual call elapsed: 	26144 nanoseconds.

result: 499950000
direct function call elapsed: 	22384 nanoseconds.

result: 499950000
functor call elapsed: 	33477 nanoseconds.

result: 499950000
lambda call elapsed: 	55799 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O2
result: 499950000
virtual call elapsed: 	22284 nanoseconds.

result: 499950000
direct function call elapsed: 	36 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	28292 nanoseconds.

===================================================
clang++ -std=c++11 chronotest.cpp -O3
result: 499950000
virtual call elapsed: 	18975 nanoseconds.

result: 499950000
direct function call elapsed: 	29 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	22542 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O4

result: 499950000
virtual call elapsed: 	22141 nanoseconds.

result: 499950000
direct function call elapsed: 	30 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	22584 nanoseconds.
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここに2つのモード、普通の関数とラムダ関数が増えましたが、インターフェースコールバック方式と直接呼び出しの比較、パフォーマンス損失は桁違いの差異があります。ラムダ関数の性能は関数に近く、場合によってはラムダ関数の性能の方が優れています。コンパイラ原理に関しては知識の空白ですが、推測ではアクセスする変数のアドレスと関数が隣接しているため、CPU処理に有利であると考えられます。&lt;/p&gt;
&lt;p&gt;添付した &lt;code&gt;wandbox&lt;/code&gt; の実行結果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result: 499950000
virtual call elapsed: 6143 nanoseconds.

result: 499950000
direct function call elapsed: 30 nanoseconds.

result: 499950000
functor call elapsed: 31 nanoseconds.

result: 499950000
lambda call elapsed: 15134 nanoseconds.
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>ホストオーダー、ネットワークオーダー。デバッガーで直接観察。</title>
        <link>https://ttf248.life/ja/p/host-order-network-order-debugger-observation/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/host-order-network-order-debugger-observation/</guid>
        <description>&lt;p&gt;コンピュータの発展史の中で、データをどのように保存するかという統一された基準はありませんでした。&lt;/p&gt;
&lt;p&gt;バイトの配置には、2つの一般的な規則があります。例えば、多桁数の下位を小さいアドレスに、上位を大きいアドレスに配置する場合をリトルエンディアンと呼び、その逆をビッグエンディアンと呼びます。ネットワークアプリケーションでは、異なるマシンタイプが異なる標準のエンディアンを採用する可能性があるため、バイトオーダーは考慮すべき要素であり、すべてネットワーク標準に変換されます。&lt;/p&gt;
&lt;p&gt;読み方の習慣に則して、ビッグエンディアンのバイトオーダーは左から右への読書順に合致する。&lt;/p&gt;
&lt;h2 id=&#34;プロセッサアーキテクチャ&#34;&gt;プロセッサアーキテクチャ
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;x86、MOS Technology 6502、Z80、VAX、PDP-11などのプロセッサはリトルエンディアンです。&lt;/li&gt;
&lt;li&gt;モトローラ6800、モトローラ68000、PowerPC 970などのプロセッサは大Endianです。&lt;/li&gt;
&lt;li&gt;ARM、PowerPC（PowerPC 970を除く）、DEC Alpha、SPARC V9、MIPS、PA-RISCおよびIA64のバイトオーダーは構成可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ネットワークまえがき&#34;&gt;ネットワークまえがき
&lt;/h2&gt;&lt;p&gt;ネットワーク転送では通常、ビッグエンディアンが採用され、ネットワークバイトオーダーまたはネットワーク順とも呼ばれます。IPプロトコルでは、ビッグエンディアンをネットワークバイトオーダーとして定義しています。
バークレーソケットは、ネットワークバイトオーダーとローカルバイトオーダーの間での16ビットおよび32ビット整数の変換を行うための変換関数群を定義しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); //把uint32_t类型从主机序转换到网络序
uint16_t htons(uint16_t hostshort); //把uint16_t类型从主机序转换到网络序
uint32_t ntohl(uint32_t netlong); //把uint32_t类型从网络序转换到主机序
uint16_t ntohs(uint16_t netshort); //把uint16_t类型从网络序转换到主机序
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もし&lt;code&gt;asio&lt;/code&gt;をネットワークライブラリとして選択した場合、組み込みのネームスペースにはクロスプラットフォーム対応の関数名が存在します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ビジュアルスタジオ-デバッガー&#34;&gt;ビジュアルスタジオ デバッガー
&lt;/h2&gt;&lt;p&gt;デバッグモードで、デバッグメニューのウィンドウを選択し、メモリウィンドウにチェックを入れます。&lt;/p&gt;
&lt;p&gt;Visual Studio では、デバッガー内でメモリ内のデータを確認できます。以下のような図を参照してください。&lt;/p&gt;
&lt;p&gt;デバッグメニュー&lt;/p&gt;
&lt;h3 id=&#34;メモリの確認方法&#34;&gt;メモリの確認方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ウィンドウで変数名を直接出力し、対応する変数のアドレスにジャンプします。&lt;/li&gt;
&lt;li&gt;もし変数が元々ポインタであれば、変数を選択し、メモリウィンドウにドラッグすると、そのアドレスの内容が表示されます。&lt;/li&gt;
&lt;li&gt;もし変数がポインタでない場合、計算ウィンドウに追加し、アドレスを取得後、手動でメモリウィンドウにコピーする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例えば&#34;&gt;例えば
&lt;/h3&gt;&lt;p&gt;データを受信し、&lt;code&gt;buffer&lt;/code&gt;オブジェクトに格納しました。ネットワークバイト順からホストバイト順に変換し、&lt;code&gt;body_length&lt;/code&gt;を30としました。サーバー側では、このデータを送信するために4バイトが割り当てられています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // 网络序转成主机序
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;ビッグエンディアン：メモリウィンドウで &lt;code&gt;buffer_&lt;/code&gt; の内容を観察する。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-order-network-order-debugger-observation/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;リトルエンディアン：メモリウィンドウで &lt;code&gt;body_length_&lt;/code&gt; の内容を確認してください。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-order-network-order-debugger-observation/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>その頃の少年、才能はあったかもしれないが、それほどでもなかった。</title>
        <link>https://ttf248.life/ja/p/then-boy-talent-not-much/</link>
        <pubDate>Mon, 09 Jan 2023 13:45:09 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/then-boy-talent-not-much/</guid>
        <description>&lt;p&gt;仕事七年目、コードを書くことに対するポジティブなフィードバックも以前ほど多くない。どうして「コーディング」という道を選んだのか振り返ってみる。
幼少期における人々の選択において、ポジティブなフィードバックに従い、積極的に危険を避け利益を追求する傾向が強い。&lt;/p&gt;
&lt;h2 id=&#34;一つ子供の頃&#34;&gt;一つ、子供の頃
&lt;/h2&gt;&lt;p&gt;引っ越して市内に出て、コンピュータの本に触れたり、ハッカーの資料を知ったり、Windowsシステムを理解したりしたこと。これらは後の話だ。&lt;/p&gt;
&lt;p&gt;幼い頃、兄貴分とこっそり実家のパソコンでゲームをしていた時間。兄貴の叔父さんはコンピューター街で店を経営していた。
幼い頃から二人ともコンピュータに触れる時間が比較的早かったので、基本的な認識も確立され、その後学校でパソコンの授業を受ける際にも興味を持って取り組んだ。
中学校でコンピュータコンテストの話を聞いて、とてもかっこいいと思ったけど、転校してからそのことは置いておいた。
私が中学校に入学した頃、パソコンの基本的な操作に慣れていて、コンピュータの授業では比較的目立つことができた。
もし、まだ慣れていて、ええ、間違いない、熟練とは違って、Office のオフィスソフトに慣れているなら、それはもっとすごいですね。&lt;/p&gt;
&lt;h2 id=&#34;引っ越し&#34;&gt;引っ越し
&lt;/h2&gt;&lt;p&gt;引っ越しの件ですが、市内に入ってきてから、隣人のために図書館に触れる機会がありましたが、小説はたくさん読みましたが、雑誌もたくさん読みました。
コンピューターレポート、大众ソフトウェア
コンピュータという産物への興味がますます湧き、幼い頃からハッカーに対する憧れがあり、学校で関連知識を積極的に学んでいた。
オペレーティングシステムの基本的なこと：コントロールパネル、CMDコマンド、VBSスクリプトを理解した。&lt;/p&gt;
&lt;p&gt;パソコン雑誌の「电脑报」の初心者向けの記事は、事例形式でシステムの使い方を解説しているので、とても向いている。
様々なソフトウェア、業界ニュースを「大众软件」が推薦しています。もちろんゲームのニュースもあります。最初の動機にも、ゲームの種を植え付けました。&lt;/p&gt;
&lt;h2 id=&#34;第三&#34;&gt;第三
&lt;/h2&gt;&lt;p&gt;高校2年の時、&lt;strong&gt;ボウ哥が転校してきて、前の2年間でコンピュータコンテストの推薦で数人の先輩が入学&lt;/strong&gt;していたので、学校の方々もこのコンテストを重視していました。
まだ前提となるハードウェアの基盤があり、アメリカにいる卒業生が学校に一棟のビルを寄付してくれた。新しい図書館、新しいマイクロコンピューター室、すべてが偶然の一致だった。
博さんの解説が加われば、その人はきっと学級でコンピュータの達人になるだろう。&lt;/p&gt;
&lt;p&gt;学力万能型でコンピューターの達人。人のパソコンをハッキングしたり、学校の監視システムを破壊する方法を知っている。&lt;/p&gt;
&lt;p&gt;競合は苦戦の連続でしたが、なんとか決勝まで進みました。学んでいる内容はあまり理解できていませんが、基本的なアルゴリズムの問題ばかりでした。それでも少しは収穫がありました。&lt;/p&gt;
&lt;p&gt;半分も知らないようなものだ、旅行に行ったようなものだ。&lt;/p&gt;
&lt;h2 id=&#34;四大学&#34;&gt;四、大学
&lt;/h2&gt;&lt;p&gt;大学の専門を選ぶことになり、実家の意向で自動化を選んだのだが、実際は強電をやりたかった。帰ってからは電力局に入り、専門課程はほとんど勉強しなかった。
自己推進型の学習能力は専門コースではほとんどないが、大規模な授業のコンピューター科目は、とても習得しやすい。&lt;/p&gt;
&lt;p&gt;専門科目の授業をサボり、コンピュータの授業は真面目に学び、普段から《精易フォーラム》、《吾愛破解》のようなフォーラムに浸っている。
専門知識であるプログラミングやC++の知識を活かし、フォーラムで仕事を受注して稼ぎ、良い反応を得て、どんどん遠ざかってしまい、もとに戻れない。
最終的に、小专业的選択は、チップにコードを書くことに決まり、家も特に何も言わなかったので、自分で決められた。&lt;/p&gt;
&lt;p&gt;その時、&lt;strong&gt;3人目のキーパーソン：タン・ゲ&lt;/strong&gt;が高学歴で百度に入社
姉さんも私のことよく分かってくれるし、あの時は何も考えずに研究する気分じゃなかったから、叔父の息子さんに話してみることにした。
今後の進路を決め、夏休みは実家に帰らず、指導教官についていてプロジェクトに取り組み、経験を積む。
自分のまだ使える成績で、恒生電子に入ることができた。&lt;/p&gt;
&lt;h2 id=&#34;卒業&#34;&gt;卒業
&lt;/h2&gt;&lt;p&gt;ここに鍵があります。私は壁を乗り越え、選択しました：コンピュータ情報検索。資料や問題の迅速な検索と特定方法を知っています。
仕事の中で良い人が現れた、&lt;strong&gt;硕哥&lt;/strong&gt;（ショウコ）。時間をくれて私に自分で勉強させ、問題の根本原因を突き止めさせ、研究開発センターの大物を紹介してくれた。
これも準備ができたし、深セン支社では、外からは私をとても優秀だと見ている。取引チャネルグループの責任者を務めたのだから。&lt;/p&gt;
&lt;p&gt;ここに問題があります。コンピュータのオペレーティングシステムやアルゴリズムといった基礎知識、ソフトウェアエンジニアリング設計について
体系的な学習はなく、すべて自分の経験によるものだ。
簡単に現れる、自分のコード設計を後から否定する、モジュール設計のためのルールがない、7年目に入り、疲れ始めた。&lt;/p&gt;</description>
        </item>
        <item>
        <title>中国の新型コロナウイルス感染症解除</title>
        <link>https://ttf248.life/ja/p/china-coronavirus-unlocking/</link>
        <pubDate>Thu, 22 Dec 2022 19:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/china-coronavirus-unlocking/</guid>
        <description>&lt;p&gt;政策の発表は非常に突然で、実施も迅速でした。健康コードが使用されなくなり、公共の場所でも緑色のコードのチェックは行われなくなりました。&lt;/p&gt;
&lt;p&gt;ニューヨークタイムズの中国語サイトを閲覧すると、全ページで中国のロック解除について議論されている。&lt;/p&gt;
&lt;p&gt;政策を評価せず、周囲の状況を記録する。&lt;/p&gt;
&lt;p&gt;北京は元々クリアゼロではなかったし、政策によって制限が開放されたことで急速に拡大し、広範囲の感染が発生している。知人の中には重症者はいません。&lt;/p&gt;
&lt;p&gt;深センは広州に隣接しており、急速な発展を遂げている。上海在住だが、会社が郊外にあるため、この原稿を書いている時点では、大規模な感染は発生していない。&lt;/p&gt;
&lt;p&gt;古い家の防護策はあまりなく、すぐに広範囲に拡大した。&lt;/p&gt;
&lt;p&gt;ほとんど同じような感じだろう、急に解放された感じがした。週ごとに政策が変わっていき、最終的に完全に開放されるまで。&lt;/p&gt;
&lt;p&gt;認めざるを得ない三年間のゼロコロナ政策の効果、成り行きまかせで安んじて暮らす。&lt;/p&gt;</description>
        </item>
        <item>
        <title>C11: sleep for vs yield</title>
        <link>https://ttf248.life/ja/p/c11-sleep-for-vs-yield/</link>
        <pubDate>Tue, 20 Sep 2022 20:54:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/c11-sleep-for-vs-yield/</guid>
        <description>&lt;p&gt;コードを見返しているとき、&lt;code&gt;std::this_thread::yield()&lt;/code&gt;が突然目に飛び込んできた。&lt;code&gt;C11&lt;/code&gt;の文法糖化は結構使われているけど、&lt;code&gt;yield&lt;/code&gt;自体は初めて見かける。今まで気にしてなかった。&lt;/p&gt;
&lt;p&gt;マニュアルを確認する前に、最初に考えたのは非同期処理との関連性だった。「yield」がBoostライブラリのコルーチンの実装で使用されているため、ここではコルーチンとは関係ないだろう。制御ロジックは通常のスレッドに関連している。&lt;/p&gt;
&lt;h2 id=&#34;文書&#34;&gt;文書
&lt;/h2&gt;&lt;h3 id=&#34;yield&#34;&gt;yield
&lt;/h3&gt;&lt;p&gt;この関数の正確性は、実装に依存し、特に使用されているOSスケジューラメカニズムとシステムの状態に左右されます。例えば、先着順のリアルタイムスケジューラ（Linux の SCHED_FIFO ）は、現在のスレッドを中断し、同じ優先度のスレッドが実行可能になるキューの末尾に配置します（他のスレッドがない場合、yield は効果がありません）。&lt;/p&gt;
&lt;h3 id=&#34;sleep_for&#34;&gt;sleep_for
&lt;/h3&gt;&lt;p&gt;スレッドの実行をブロックし、指定されたsleep_duration時間だけ待機します。
この関数は、スケジューリングやリソースの競合が遅延させるため、sleep_durationよりも長い時間ブロックされる可能性があります。
標準ライブラリでは、安定したクロックで時間を計測することを推奨します。実装がシステム時間を使用する場合、待ち時間もクロック調整に影響される可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析
&lt;/h3&gt;&lt;p&gt;二つの関数は、現在のスレッドがスレッドを占有しなくなるようにするもので、効果はプラットフォームによって異なるようですね。ここまでの説明だけではまだよく分からないので、コードを実行して実行結果を確認してみます。&lt;/p&gt;
&lt;p&gt;シンパッド ノートPC（Visual Studio Community Edition 2022）、テンセントクラウド S2 スタンダードサーバー（gcc8.5）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/μs&lt;/th&gt;
&lt;th&gt;第2回/μs&lt;/th&gt;
&lt;th&gt;第3回/μs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;9872&lt;/td&gt;
&lt;td&gt;1884&lt;/td&gt;
&lt;td&gt;11302&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;119&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;171&lt;/td&gt;
&lt;td&gt;168&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;実行結果から容易に理解できるように、オペレーティングシステムの実現方法によって、高精度スリープの &lt;code&gt;sleep_for&lt;/code&gt; の安定性は大きく異なります。高精度なスリープが必要な場合は、 &lt;code&gt;yield&lt;/code&gt; の使用がより適切です。&lt;/p&gt;
&lt;p&gt;時間精度が&lt;code&gt;ms&lt;/code&gt;に向上しても、両者の差はそれほど顕著ではない。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;thread&amp;gt;
 
// 建议其他线程运行一小段时间的“忙睡眠”
void little_sleep(std::chrono::microseconds us)
{
    auto start = std::chrono::high_resolution_clock::now();
    auto end = start + us;
    do {
        std::this_thread::yield();
    } while (std::chrono::high_resolution_clock::now() &amp;lt; end);
}
 
int main()
{
    auto start = std::chrono::high_resolution_clock::now();
 
    little_sleep(std::chrono::microseconds(100));
    std::this_thread::sleep_for(std::chrono::microseconds(100));
 
    auto elapsed = std::chrono::high_resolution_clock::now() - start;
    std::cout &amp;lt;&amp;lt; &amp;quot;waited for &amp;quot;
              &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(elapsed).count()
              &amp;lt;&amp;lt; &amp;quot; microseconds\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照&#34;&gt;参照
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Linuxサーバー、MySQLパスワードリセット</title>
        <link>https://ttf248.life/ja/p/linux-server-reset-mysql-password/</link>
        <pubDate>Tue, 20 Sep 2022 14:27:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-server-reset-mysql-password/</guid>
        <description>&lt;p&gt;台に余っているテンセントクラウドのサーバーがあり、年末で契約が満了するので、更新する気もなく、開発用のデータベースとしてMySQLをデプロイしました。OSを再インストールした際、手間を省くため、テンセントクラウドが提供しているサードパーティ製のイメージを選択し、MySQLデータベースはすでにインストールされていました。システム内にReadmeのようなファイルがデフォルトで付属しているだろうと予想していたのですが、パスワードやデプロイメントパスなどが記載されていないようです。&lt;/p&gt;
&lt;p&gt;テンスンクラウドのシステムを再インストールすると、すぐに、1分くらいで再インストール完了の通知が来る。ログインして &lt;code&gt;systemctl status mysql&lt;/code&gt; サービスを確認すると起動している。パスワードはどこにあるか探したが見つからない。徐々に落ち込んでいく。&lt;/p&gt;
&lt;p&gt;そのように考えていると、すでにサーバーにアクセスし、&lt;code&gt;root&lt;/code&gt;権限を持っているのだから、きっとパスワードをリセットする方法はあるはずだ。資料を調べてみると、アリババクラウドのフォーラムに投稿があり、さらに試してみることにした。&lt;/p&gt;
&lt;h2 id=&#34;パスワードリセット&#34;&gt;パスワードリセット
&lt;/h2&gt;&lt;p&gt;設定ファイルを編集します。&lt;code&gt;vim /etc/my.cnf&lt;/code&gt;、&lt;code&gt;mysqld&lt;/code&gt;ノードに以下の設定を追加します。&lt;code&gt;skip-grant-tables&lt;/code&gt;、コマンドを実行してデータを再起動します。&lt;code&gt;systemctl restart mysql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;再利用&lt;code&gt;mysql&lt;/code&gt;で直接データにログインし、あとは通常通り操作します。&lt;code&gt;root&lt;/code&gt;ユーザーのパスワードをリセットし、ついでにリモートログインを有効にします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;USE mysql;
UPDATE user SET authentication_string = password (&#39;pass&#39;) WHERE User = &#39;root&#39;;
grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;pass&#39; with grant option;
flush privileges;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定ファイルを戻して変更し、データベースを再起動すれば大丈夫です。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://help.aliyun.com/document_detail/42520.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://help.aliyun.com/document_detail/42520.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>夜の命名術</title>
        <link>https://ttf248.life/ja/p/night-naming-art/</link>
        <pubDate>Thu, 11 Aug 2022 22:10:14 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/night-naming-art/</guid>
        <description>&lt;p&gt;広大な漢字の世界において、「命」という文字は唯一無二であり、同音の字一つ存在しない。もしかすると、これはどこまでも暗示しているのかもしれない—すなわち、人々の生命は一度きりで、複製も再現もできないということだ。&lt;/p&gt;
&lt;p&gt;暇な時間に起点中文网のランキングを眺めると、「夜の命名術」の月票数が群を抜いており、堂々と首位を走り、2位との間に大きな差をつけている。到底追いつくことはできない。これまで長年、唐家三少や耳根といった有名作家の作品ばかり読んでいたのだが、今回は新しい作者の作品に挑戦して、異なる読書体験をしてみたいと思った。&lt;/p&gt;
&lt;p&gt;８月上旬時点で、『夜の命名術』の月チケット数は200万に達し、２位は8万と、その差は驚くべきものだ。&lt;/p&gt;
&lt;p&gt;自分の才能は限られているので、この本の筆力について評価するだけの力量はないのですが、十数章を読み終えてみると、物語の展開が緊迫していて、伏線が張り巡らされており、引き込まれるような内容でした。これほどの月票を獲得できたのは、当然の結果と言えるでしょう。&lt;/p&gt;
&lt;p&gt;興味深いことに、「命」という文字と同様に、「死」という文字にも同音の字が見つかりません。これは、生命の終焉もまた唯一無二で、代替できない深い意味を内包しているのではないでしょうか？&lt;/p&gt;</description>
        </item>
        <item>
        <title>自動テストの簡単な考察</title>
        <link>https://ttf248.life/ja/p/shallow-discussion-on-automation-testing/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/shallow-discussion-on-automation-testing/</guid>
        <description>&lt;p&gt;金融取引システムにおけるテストへの投資は、他のシステムを大きく上回っており、煩雑なテスト手順が繰り返され、&lt;code&gt;ROI&lt;/code&gt; が低すぎる。プロジェクトや人員の交代に伴い、避けられない形で多くの制御不能な要因が導入され、よくあるのはAインターフェースの出力する特定のフィールドを変更した結果、Bインターフェースの結果に影響が出てしまうというケースだ。バージョンリリースごとにリスクも蓄積している。&lt;/p&gt;
&lt;h2 id=&#34;理論知識&#34;&gt;理論知識
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;自動化の価値をどのように測るか？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自動化テストケースのROI = （手動実行時間）*（実行回数） / （開発コスト + メンテナンスコスト）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どの機能を自動テストする必要がありますか？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ユーザーがよく使う機能、頻繁に変更されない機能。このタイプのインターフェースに対して自動テストコードを書くことで、最も効果が得られます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;なぜこのタイミングで自動テストを推進するのか。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プロジェクトのリリースが近づいている時期では、明らかに不適切です。遠い水を近くの渇きを癒すことはできず、自動化は長期的な収益モデルです。プロジェクトはすでに&lt;strong&gt;本番環境&lt;/strong&gt;にリリースされ、安定したリリースサイクルに入っており、まさにこのタイミングが最適です。&lt;/p&gt;
&lt;h2 id=&#34;フレームの選択&#34;&gt;フレームの選択
&lt;/h2&gt;&lt;p&gt;関連する実践経験がないまま、自動テストというタスクを得て、典型的な始め方：検索エンジンを開いて、現在のシステム&lt;strong&gt;技術スタック&lt;/strong&gt;で利用できるツールやフレームワークを探し、マニュアルを一度通して、作業開始だ。すぐに適切なツールが見つかれば、おめでとうございます、&lt;strong&gt;完璧なスタート&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;先に謝罪いたします。関連資料を調べたところ、存在しないというわけではなく、単にフレームワーク自体が複雑で、デプロイに必要なリソースも多すぎるようです。初心者向けのものは小さくて簡潔なものが求められます。テストチームの同僚に相談したところ、&lt;code&gt;Python&lt;/code&gt; で自作のフレームワークを作るという提案があり、簡単に言うと、既存のユニットテストフレームワークを使い、自動テストフレームワークとしてパッケージ化するというものです。&lt;/p&gt;
&lt;p&gt;このプロジェクトのデザインのアイデアを参考にしてください：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;フレームが必要な理由は何ですか&#34;&gt;フレームが必要な理由は何ですか？
&lt;/h2&gt;&lt;p&gt;サービスには複数の異なるデプロイ環境があり、開発環境、テスト環境、本番環境があります。フレームワークの役割は、これらの環境を分離し、テストケースとデータを切り離すことです。異なる環境ごとに異なるテストデータが設定されており、もちろん共通データもサポートしています。&lt;/p&gt;
&lt;p&gt;根本的なロジックは、自動化の活用率を向上させるためのものです。 シナリオがいくら複雑になっても、異なる環境間のデータは互換性がなく、全く関係ありません。 設定事例データを追加する際は、&lt;code&gt;label&lt;/code&gt;タグを追加して、現在のデータがサポートしている環境を指定してください。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;最もコストパフォーマンスの高い自動テストをする&lt;/p&gt;</description>
        </item>
        <item>
        <title>新しい言語を学ぶ必要があるのはなぜか。</title>
        <link>https://ttf248.life/ja/p/why-learn-a-new-language/</link>
        <pubDate>Thu, 04 Aug 2022 11:27:30 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/why-learn-a-new-language/</guid>
        <description>&lt;p&gt;学校時代から数えても、すでに10年以上前からC++に触れているのに、他のプログラミング言語を学ぶ必要性がどこにあるのだろうか。&lt;/p&gt;
&lt;p&gt;仕事経験：エレガントなモジュール設計の経験は乏しいが、&lt;code&gt;C++&lt;/code&gt; の文法は自由度が高く、他の言語を学ぶことでよりエレガントな設計を書けるようになる。&lt;/p&gt;
&lt;p&gt;ツールを開発するときに、よく使う。&lt;/p&gt;
&lt;p&gt;基盤ライブラリの設計も、ビジネスモジュールの実装も、設計の原則は同じです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ビジュアルスタジオのコンパイル文字セット[転]</title>
        <link>https://ttf248.life/ja/p/visual-studio-compilation-character-set-translation/</link>
        <pubDate>Thu, 04 Aug 2022 10:51:43 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/visual-studio-compilation-character-set-translation/</guid>
        <description>&lt;p&gt;C++のクロスプラットフォーム開発で、中国語OSではよく「エラーC2001 定数に改行が含まれています」という問題に遭遇することがあります。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio&#34;&gt;visual studio
&lt;/h2&gt;&lt;p&gt;CMakeはプロジェクトのビルドスクリプトを構成し、Windowsシステムでの開発時に一時的にソリューションファイルを生成します。プラットフォーム間の互換性のために、ファイルエンコーディングはUTF-8を選択しています。&lt;/p&gt;
&lt;p&gt;参照資料は、原因を詳細に説明するために、原理から出発して解説している。&lt;/p&gt;
&lt;p&gt;コーディングに関して、&lt;code&gt;MSVC&lt;/code&gt;には専用のコンパイルオプション&lt;code&gt;/source-charset&lt;/code&gt;と&lt;code&gt;/execution-charset&lt;/code&gt;があり、前者はファイルのエンコードを表し、後者はコンパイル後の文字配列内のバイトがどのようなエンコードであるかを示すもので、これらのオプションでエンコードの問題を基本的に解決できます。&lt;/p&gt;
&lt;p&gt;例えば、&lt;code&gt;windows&lt;/code&gt;の&lt;code&gt;cmd&lt;/code&gt;コンソールはデフォルトでは&lt;code&gt;GBK&lt;/code&gt;エンコーディングしか表示できないが、コードファイル自体は&lt;code&gt;UTF-8&lt;/code&gt;であるため、プラットフォーム間の互換性の問題で直接&lt;code&gt;GBK&lt;/code&gt;に変換するのが都合悪い。もちろん、ここでは異なるプラットフォーム向けにエンコーディング変換コードを書くという方法論は含めない。&lt;code&gt;Win10&lt;/code&gt;では、コンパイラオプションを&lt;code&gt;/source-charset:utf-8 /execution-charset:gbk&lt;/code&gt;に設定することで、コンパイラが&lt;code&gt;UTF-8&lt;/code&gt;エンコーディングでファイルを読み込み、それを&lt;code&gt;GBK&lt;/code&gt;に変換して配列内に保存し、その結果、&lt;code&gt;printf&lt;/code&gt;を使って&lt;code&gt;cmd&lt;/code&gt;コンソール上で漢字を正常に表示できる。&lt;/p&gt;
&lt;h2 id=&#34;cmake-visual-studio-設定&#34;&gt;CMake Visual Studio 設定
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;if( WIN32 )
    message( STATUS &amp;quot;Configuring trade on WIN32&amp;quot;)
    set( CMAKE_CXX_FLAGS &amp;quot;${CMAKE_CXX_FLAGS} /source-charset:utf-8 /execution-charset:gbk&amp;quot;)
endif()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/146543940&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/146543940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ペロシ氏、台湾訪問</title>
        <link>https://ttf248.life/ja/p/pelosi-visits-taiwan/</link>
        <pubDate>Tue, 02 Aug 2022 22:57:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/pelosi-visits-taiwan/</guid>
        <description>&lt;p&gt;政治に精通していないのでコメントはしません。ただ、このインターネット上の「狂騒」を記録します。&lt;/p&gt;
&lt;h2 id=&#34;随筆&#34;&gt;随筆
&lt;/h2&gt;&lt;p&gt;数週間前の&lt;strong&gt;唐山ピ打ち事件&lt;/strong&gt;や、&lt;strong&gt;人教版小学校教科書における文化侵入問題&lt;/strong&gt;と、まだ覚えている人はいるのだろうか。ニュースのこうした話題はすでに慣れてしまい、あまり感触もない。帰宅して普段通りドラマを見る。この出来事をただ楽しんでいるだけだ。経済状況もそうなのだから、戦争が勃発しても生活は変わらないだろう。政治には手を出さず、コメントもしない。このインターネット上の「狂騒」を記録しておくことにする。&lt;/p&gt;
&lt;h2 id=&#34;ウィキ概要&#34;&gt;ウィキ概要
&lt;/h2&gt;&lt;p&gt;2022年のナンシー・ペロシの台湾訪問、通称ペロシ訪台とは、アメリカ合衆国第52代下院議長であるナンシー・ペロシが2022年のアジア諸国訪問の一環として台湾を訪問した行程を指す。&lt;/p&gt;
&lt;p&gt;アメリカ合衆国下院議長が、アメリカ第三の人物と見なされ、台湾訪問を計画していることに対し、日付が8月1日の中国人民解放軍建軍記念日に短期的に接近し、長期的には中国共産党第二十回全国代表大会、2022年アメリカ選挙及び2022年中華民国地方公職人員選挙に近づくことから、中華人民共和国側は政府として強く抗議し、海軍駆逐艦部隊を台湾海峡の北東海域へ派遣、山東艦と遼寧艦という二つの空母戦団を動員。東部戦区と南部戦区はそれぞれ東海と南中国海で大規模な実兵実弾演習を実施した。一方、アメリカ側は、ロナルド・レーガン号空母戦団を台湾海峡周辺に派遣し、ペロシ議長の可能となる訪問行程を警護するとともに、複数の偵察機や空中給油機を在日米軍嘉手納基地へ待命させた。&lt;/p&gt;
&lt;p&gt;中国国家主席習近平と米国大統領ジョー・バイデンは、訪問前に関係ビデオ会談を行い、内容は台湾問題に関するものだった。台湾および国際メディアによると、ペロシ議長及び衆議院訪問団は2日台北松山空港に到着し、宿泊した後、3日に中華民国総統蔡英文氏ら政府高官と面会する予定だ。有識者の間では、今回のペロシ氏の台湾訪問が1996年の台湾海峡ミサイル危機以来、26年ぶりの台湾海峡における新たな危機を引き起こす可能性があるという見方がある。&lt;/p&gt;
&lt;h2 id=&#34;08-11&#34;&gt;08-11
&lt;/h2&gt;&lt;p&gt;今日をもって事態は落ち着いたと言えるでしょう。ここしばらくの間、トップニュースは主に各国の海軍演習に関するものであり、知恵袋も毎日熱い話題のランキングを更新し、皆でこのことについて議論しています。編集者の皆様、お疲れ様でした。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Windows プラットフォームでのフォルダサイズ高速統計</title>
        <link>https://ttf248.life/ja/p/windows-platform-quick-folder-size-statistics/</link>
        <pubDate>Mon, 01 Aug 2022 19:54:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-platform-quick-folder-size-statistics/</guid>
        <description>&lt;p&gt;Linux プラットフォームなら簡単です。「du -sh *」たった一行のコードで終わります。Windows はどうでしょうか？ディスクがたくさんあって、整理したいとき、ファイルが大量にある場合、標準のリソースエクスプローラーではフォルダサイズを統計的に算出するのも遅くて、諦めたくなります。&lt;/p&gt;
&lt;h2 id=&#34;everything&#34;&gt;Everything
&lt;/h2&gt;&lt;p&gt;Windows プラットフォームで開発をしている方なら、自分で使ったことがなくても、友人から聞いたことがあるはずです。「Everything」は、標準のファイルエクスプローラーを大きく上回る検索速度を誇ります。システムレベルでファイルの高速インデックスがサポートされているのであれば、同様のツールを見つけて、ファイルのインデックスを作成すると同時に、ファイルサイズも統計的に把握できるはずです。&lt;/p&gt;
&lt;h2 id=&#34;wiztree&#34;&gt;WizTree
&lt;/h2&gt;&lt;p&gt;公式サイト：&lt;a class=&#34;link&#34; href=&#34;https://www.diskanalyzer.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.diskanalyzer.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;標準的なインストールモードまたはグリーン版の展開実行&lt;/p&gt;
&lt;p&gt;高速で、データ表示の種類が豊富です。左側はツリー図モード、右側はファイルタイプで、もちろんグラフィカルな表示もあり、ソフトウェアの最下部にあります。&lt;/p&gt;
&lt;h2 id=&#34;spacesnifferアップデート2023でサポート終了&#34;&gt;SpaceSniffer（アップデート2023でサポート終了）
&lt;/h2&gt;&lt;p&gt;ソフトウェア公式サイト：&lt;a class=&#34;link&#34; href=&#34;http://www.uderzo.it/main_products/space_sniffer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.uderzo.it/main_products/space_sniffer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;操作は簡単です。対応するディスクを選択すると、ソフトウェアがグラフィカルにフォルダの容量を表示します。容量が大きいほど、画像内のマトリックスも大きくなります。その他の操作は、クリックすれば理解できるはずです。ファイルに対して条件フィルタリングをサポートしています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルサイズフィルタ&lt;/li&gt;
&lt;li&gt;書類の日付フィルタ&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;基本の使い方&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;高度な使い方&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://moe.best/software/spacesniffer.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://moe.best/software/spacesniffer.html&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>ウェブページのスタイルシート（CSS）をコピーする方法：要素の検査</title>
        <link>https://ttf248.life/ja/p/how-to-copy-webpage-css-element-inspection/</link>
        <pubDate>Sun, 31 Jul 2022 23:36:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/how-to-copy-webpage-css-element-inspection/</guid>
        <description>&lt;p&gt;海外のテンプレートをベースにして修正・調整するものが主流で、中国語コンテンツのレイアウトについてはあまり考慮されていない。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;半月ほど前にブログのスタイルシートを調整しました。長年バックエンドサービスの開発をしていて、フロントエンドは初心者です。色々試しましたが、デザインがよくわかりません。ふと、いつも参考にしている技術ブログ：infoq、开源中国のようなサイトのデザインはとても良いなと思い、もし借用できるだろうかと考えました。しばらくソースコードを見ましたが、関連要素を特定してしまい、混乱しました。&lt;/p&gt;
&lt;p&gt;ここにいるフロントエンドエンジニアは、ここまで読んで笑っているかもしれませんね…指定の要素を特定することさえわからない。わからなくても大丈夫です。週末に時間があるので、立ち止まって考えてみましょう。昔、Pythonでスクレイピングしていたときには、似たようなものを使ったような気がします。&lt;/p&gt;
&lt;h3 id=&#34;元素審査&#34;&gt;元素審査
&lt;/h3&gt;&lt;p&gt;その通りです。ブラウザに標準搭載されている要素検査ツールを使えば、スタイルシートのコピーや特定要素の位置特定もあっという間にできます。&lt;code&gt;selector&lt;/code&gt; で要素を特定し、&lt;code&gt;hugo&lt;/code&gt; で &lt;code&gt;user define css&lt;/code&gt; を作成します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要素を複製する&lt;/li&gt;
&lt;li&gt;outerHTMLをコピーする&lt;/li&gt;
&lt;li&gt;セレクタを複製&lt;/li&gt;
&lt;li&gt;JS パスをコピーする&lt;/li&gt;
&lt;li&gt;スタイルを複製する&lt;/li&gt;
&lt;li&gt;XPathをコピー&lt;/li&gt;
&lt;li&gt;XPathを完全にコピーします。&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Windowsプラットフォーム向け、巨大ファイルの編集：EmEditor（テキストエディタ）</title>
        <link>https://ttf248.life/ja/p/windows-platform-editing-large-files-emeditor-text-editor/</link>
        <pubDate>Sun, 31 Jul 2022 23:21:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-platform-editing-large-files-emeditor-text-editor/</guid>
        <description>&lt;p&gt;上海国安データベース事件は、ハッカー界隈で騒がしくなっているが、真偽は定かではない。2年後も覚えていれば、また振り返ってみよう。過去の経験から、ローカルの社会員データベース資料を更新したところ、巨大なSQLファイル：17.9Gを発見した。普通のテキストエディタではプレビューですら問題があり、ましてや開くことなどできない。ネットユーザーとの雑談で：EmEditorという名前が出てきた。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;公式サイト：&lt;a class=&#34;link&#34; href=&#34;https://www.emeditor.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.emeditor.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;週末に時間を作って試してみたところ、なかなか便利だった。デザインも大規模ファイルの編集に対応していて、メモリが十分な場合、ファイル全体をメモリに読み込めるので、検索や編集の速度も速いし、ファイルの分割にも対応している。&lt;/p&gt;</description>
        </item>
        <item>
        <title>上海鴛鴦鍋が封鎖</title>
        <link>https://ttf248.life/ja/p/shanghai-yuanyang-pot-closure/</link>
        <pubDate>Wed, 30 Mar 2022 23:03:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/shanghai-yuanyang-pot-closure/</guid>
        <description>&lt;p&gt;リーダーシップ層は先日まで「上海は封鎖しない、上海は重要だ」と面子をかけていましたが、結果的に現状に迫られたり、自分の帽子（地位）を守るために、川向こうの地域から封鎖を開始し、その後、こちらの側も封鎖するという事態になりました。&lt;/p&gt;
&lt;h2 id=&#34;封鎖&#34;&gt;封鎖
&lt;/h2&gt;&lt;p&gt;幼い頃にSARSのパンデミックを経験したが、あまり記憶に残っていない。後になって関連資料を見たところ、潜伏期間が短かったため、全国的な拡大が発生する前に終わったようだ。当時小学生だった私は、毎日早く下校し、教室にはいつも消毒液の匂いが漂っていたのを覚えている。&lt;/p&gt;
&lt;p&gt;2019年末から現在まで、新型コロナウイルス感染症のパンデミックもあと3年が近いですね。仕事で外出している人たちは、マスクを着用する時間帯にはマスクをするなど、慣れました。上海での今回のパンデミックは、当初は香港が原因で、その後、国境ゲートを通じて深圳に広がりました。上海でも、香港からの輸入事例が原因です。当局は最終的に、隔離ホテルにおける感染対策が不十分であったことがパンデミックの原因であると発表しました。変異株の毒性は弱まりましたが、拡散速度は速くなり、ホテルの換気システムを通じて拡散されました。当初はそれほど深刻ではなく、管理できたはずです。&lt;/p&gt;
&lt;p&gt;人は皆、自信がある。上海のリーダーたちもそうだ。彼らは私たちにできる網格化されたリスク管理と、精密なリスクコントロールを選び取るだろう。&lt;/p&gt;
&lt;p&gt;今の結果は皆さんも見ているように、新規感染者はすでに2万人を突破し、やむなく都市封鎖という選択に至った。しかし、これは海外に対して「都市封鎖」という言葉を使わずに伝えた。なぜなら、以前の記者会見で、上海は封鎖する必要はないと発表しており、最後の面子を残そうとしたからだ。&lt;/p&gt;
&lt;h2 id=&#34;買い物&#34;&gt;買い物
&lt;/h2&gt;&lt;p&gt;宅配ビジネスというのは、インターネットが生み出した新しい産業です。要点は、誰かが配達してくれる必要があるということですよね。しかし、今回のパンデミックの影響で広範囲が封鎖されたため、お店は営業できるものの、配達する人がいないという状況になり、最後の环节が途絶えてしまいました。外にいる人は理解できないかもしれませんが、「国際都市である上海で、なぜみんなが一斉に野菜を買うのか」と不思議がるかもしれません。しかし、よく考えるとわかると思います。大部分の人も、他から出てきて仕事をしている人で、賃貸アパートに住んでおり、普段は会社で食事をしたり、外食したりすることが多く、ほとんど自炊はしません。そうした外出が困難になったため、条件の良い人は野菜を買うようになりました。今回の封鎖の告知は事前にありませんでしたし、みんな日常的に十分な食料や野菜を備蓄しているわけでもないので、動画に映っていたように一斉に野菜を買いに行きました。その結果、人が集まったことが、パンデミックの再拡大につながってしまいました。&lt;/p&gt;
&lt;h2 id=&#34;業界&#34;&gt;業界
&lt;/h2&gt;&lt;p&gt;IT業界で働いているので、コロナの影響で在宅勤務を体験しました。19年の頃、ほとんど一ヶ月間自宅にいて、何度も新幹線のチケットを変更しましたが、いつ深圳に戻れるか全く分かりませんでした。飲食や観光、その他サービス業の方々が、この数年どのように生きてきたのか想像もできません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>お金を稼ぎたいときに</title>
        <link>https://ttf248.life/ja/p/when-you-want-to-make-money/</link>
        <pubDate>Sun, 27 Mar 2022 03:23:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/when-you-want-to-make-money/</guid>
        <description>&lt;p&gt;普通の人も皆、社会的な動物だ。間違いない、君は人間であり、直立して歩く動物で、強い社会的属性を持っている。自卑心や虚栄心があり、社会は常に変化し、そして君の&lt;strong&gt;平常心&lt;/strong&gt;を蝕み続けている。偉人たち、社会や国のために身を燃やすことを厭わない人々については議論しない。&lt;/p&gt;
&lt;h2 id=&#34;今の私&#34;&gt;今の私
&lt;/h2&gt;&lt;p&gt;平均賃金で見ても、実家の方の給料で見ても、今の私の収入は平均を大きく上回っている。これ以上何が不満があるのだろうか？&lt;/p&gt;
&lt;p&gt;稼ぐと1万元になったら、次は100万元を目指し、100万元を稼ぐと次は1000万元を目指す。これは人間の本能であり、人は自分の内面と向き合う必要がある。&lt;/p&gt;
&lt;p&gt;目が赤いのは何だろう、より簡単に稼ぐ方法：ショート動画&lt;/p&gt;
&lt;p&gt;誰だって業界に入るのが簡単じゃないことは分かっている。皆さんが見ているのは短い動画ですが、その裏側にある撮影や脚本の作成は見ていないでしょう。でも、誰にでも自分が天才だという夢があって、「この業界が自分には合っている」「天職だ」と思いたいものだ。&lt;/p&gt;
&lt;h2 id=&#34;開始接触&#34;&gt;開始接触
&lt;/h2&gt;&lt;p&gt;そんなにたくさんの動画を見て、自分の頭で少しだけ映像を分析してみると、明らかにプロの編集技術が使われていて、強い映画的な色合いがある。つまり、彼らはある程度、専門学校出身ということだ。もちろん、無名の人がいきなり人気者になるということもあり得るけど、それは一般人には当てはまらないだろうね？&lt;/p&gt;
&lt;p&gt;TikTok（ティックトック）では、動画の作り方を教えてくれる動画がたくさんあります。この時になって初めて人が正気を取り戻します。もし本当に稼げるなら、なぜ彼自身がやらないのに、あなたに教えるのでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;非人道的推薦アルゴリズム&#34;&gt;非人道的推薦アルゴリズム
&lt;/h2&gt;&lt;p&gt;以前、抖音のアルゴリズムが映画の編集やアニメの編集を私に推薦するたびに、見ているうちに面白いと感じるようになるのですが、私が抖音でお金を稼ぐ方法について調べ始めたとき、推薦されるのは様々な教育ビデオばかりで、しかも途切れることなく、私の推薦フィード全体を埋め尽くします。私もIT業界にいる人間です。その時、アルゴリズムを作っている人たちは頭がおかしいのではないかと思わざるを得ません。このような推薦は、私をバカだと思っているのでしょうか？それとも、あなた自身がバカなのでしょうか？しかも、抖音でお金を稼ぐ方法のビデオを色々な角度から、様々な種類のものを次々と推薦してきます。この原稿は、私が深夜3時に書いていますが、元々書くつもりはありませんでした。このようなビジネスモデルがどれくらいの期間持続するのだろうか？どれくらいの時間、人々の時間を奪うのだろうか？&lt;/p&gt;
&lt;h2 id=&#34;生き抜く&#34;&gt;生き抜く
&lt;/h2&gt;&lt;p&gt;人に物事を教えるときは口調がいつも変わっているのに、自分で物事をする時はコントロールできない。笑話だ。純粋な技術ブログの書き手ではないので、いくつかのことは国内に送っていない。ここでは適当に不満を言ってみる。いつか封鎖されたら、場所を変えればいいのかも。抖音（ドゥイェイン）が何もしていないとは言えない。少なくとも今のリアルタイムニュースの伝達や、国家のいくつかの政策の宣伝には積極的に協力している。結局のところ、中国では党の方針に背くことはできないだろうか？&lt;/p&gt;
&lt;p&gt;今になって考えると、昔読書をしていた頃のことだ。人生の意味が本当に見つからないときは、静かに本を読むだけで十分なのだ。今の時代に、どれだけの人が心を落ち着けて静かに本を読めるだろうか。&lt;/p&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;ここでも科学技術の進歩に感謝しなければなりません。この行が見えるなら、文章全体が非常に口語的であることに気づくでしょう。そして私は、ただ読みながら書き終えてしまいました。普段使っている入力法は搜狗（ソウグ）入力法で、7,8年も使っています。しかし音声入力に関しては、やはり科目はプロの域に達しています。&lt;/p&gt;
&lt;p&gt;2022年の文章の番号が002に変更された。なぜ二つのゼロが増えたのだろうか？今年の文章で百を超えることを願っている、それが夢だ。まさしく、文章というには言えない、ただの記録にすぎない。「吾日三省」のように、あなたはきっと何かを思いつくはずだよね？&lt;/p&gt;</description>
        </item>
        <item>
        <title>思ったより簡単なことだが、コードコピーボタンを追加する。</title>
        <link>https://ttf248.life/ja/p/add-code-copy-button/</link>
        <pubDate>Fri, 25 Feb 2022 01:23:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/add-code-copy-button/</guid>
        <description>&lt;p&gt;四時間も格闘して、この文を見たときは笑ってしまった。こんなに時間がかかるなんてありえないと思ったのに。よく見たら三時間だった。&lt;/p&gt;
&lt;p&gt;算是二零二二年開年の第一篇稿子，要搞的東西不複雜，就和標題說的一模一樣（此時的我還很年輕），以為照抄 &lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;作業&lt;/a&gt; 就行，放到收藏夾裡面，拖拖拉拉等了一個多月，終於想起來這件事情。 算是二零二年年初的第一篇文章，要搞的東西不複雜，和標題完全一樣（當時的我還很年輕），以為照抄&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;作業&lt;/a&gt;就夠了，放進收藏夾裡，拖拖拉拉等了一個多月，終於想起來這件事。&lt;/p&gt;
&lt;p&gt;Hugoに移行したときから、プラグインが少なすぎると感じていました。コードのコピー＆ペーストができず、多くのノートを印象ノートからブログへ移行する際に、コードのコピーに関する作業が煩雑になり、ブログを書くモチベーションを著しく損ねてしまいました。&lt;/p&gt;
&lt;h2 id=&#34;前章&#34;&gt;前章
&lt;/h2&gt;&lt;p&gt;まずは原著者の稿をよく見て、一度通読してから作者紹介を見てみよう。うわー、すごい人だ。清華大学の在校生で、早い段階からコンピュータに触れている。あー、なんとなく、まずこのブログを見てみよう。完全に何をしようとしていたか思い出せない。ついでに作者の&lt;code&gt;Github&lt;/code&gt;リポジトリも見てみよう。この修正された&lt;code&gt;even&lt;/code&gt;テーマは今のものよりずっといいし、機能も多い。やってみるか。まずは関連コードをマージしてしまおう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/add-code-copy-button/2022-02-25-02-08-19.png&#34;
	width=&#34;215&#34;
	height=&#34;150&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;344px&#34;
	
&gt; &lt;img src=&#34;https://ttf248.life/p/add-code-copy-button/2022-02-25-02-08-40.png&#34;
	width=&#34;217&#34;
	height=&#34;167&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;新機能記事履歴の確認関連提出記録の閲覧&#34;&gt;新機能：記事履歴の確認、関連提出記録の閲覧
&lt;/h3&gt;&lt;p&gt;効果はまだ良いです、記事の最後に引っ張れば体験できます。&lt;/p&gt;
&lt;p&gt;手を出す前に作者の元のリポジトリの履歴を細かく見ていなかった、単純なマージで済むだろうと思っていた。結局、大量のコードをマージしてしまい、途中で何度もコンフリクトが発生し、無駄に上書きしてしまった。すべてはフロントエンドとレンダリングのテンプレートコードで、私の望むものが優先された。&lt;/p&gt;
&lt;p&gt;倉庫アドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/TianlongXiang/hugo-theme-even&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/TianlongXiang/hugo-theme-even&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中国の一つの落とし穴ですが、&lt;code&gt;git&lt;/code&gt;でこのパラメータを調整しないと、現在の記事の&lt;code&gt;コミットハッシュ&lt;/code&gt;が取得できず、過去のリンクの生成に失敗します。完全な記事履歴を生成する際も、自動統合スクリプトを変更する必要があり、現在のリポジトリ全体の履歴レコードを必ずプルしてください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;機能：完全なGitHubリポジトリの取得を試み、記事の最終更新記録を動的に更新する&lt;/li&gt;
&lt;li&gt;パスが存在する中国語です。HugoのGitInfoの設定を有効にする必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;name: Build Github
run: git config --global core.quotePath false &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;スタイル調整&#34;&gt;スタイル調整
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;サイトコンテンツの幅を調整する。以前のデザインはモバイルとPC向けだったが、実際には誰もスマホで見ていないし、私もPCで見ている。&lt;/li&gt;
&lt;li&gt;目次バーは自動伸縮に対応しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;参照 &lt;code&gt;ouuan&lt;/code&gt; のコード記録を半時間以上見ていても、どうやってコピーボタンを追加しているのかよくわからなかった。&lt;/p&gt;
&lt;p&gt;時間が過ぎて、一ヶ月後、またこのことを思い出した。&lt;/p&gt;
&lt;p&gt;既然この課題が理解できないなら、別の課題を写し転がせば、なんとかなるだろう。検索した結果は結構意外だった。&lt;code&gt;hugo&lt;/code&gt;の公式フォーラムにもコピーボタンを追加する方法についての投稿があったので行ってみると、論理は明確だった。そして、驚いたことに、再現されたコードブロックのスタイルが資料の説明と異なっていた。このあたりは少し面倒なので、簡単に記録しておく。&lt;/p&gt;
&lt;p&gt;基本的なフロントエンド開発がほとんど分からないので、分からない箇所はブラウザの「要素を検証」を開き、コードと右側のスタイル情報を見て、少しずつ論理を理解しました。「JavaScript」は理解できませんでしたが、コンソールにログを出力しました。分からないことはたくさんありましたが、落ち着いてゆっくりと論理を整理・分解することで、必ず解決策が見つかります。&lt;/p&gt;
&lt;p&gt;プレタグが複数あり、ここでは単一のコードブロックを指しますが、テーマ自体が行番号を出力しているため、コピーボタンが2つ表示されるようになります。
コードハイライトのレンダリングをテーマに組み込みたいのだが、このテーマの設定がよくわからない。
Hugoの公式サイトで資料を見たところ、半分くらい理解できた。コードハイライトを制御できる&lt;code&gt;markup&lt;/code&gt;設定があることは分かった。
設定ファイルを調整しても、どうにもうまくいかず、レンダリング結果が期待と異なっている。
この設定&lt;code&gt;pygmentsOptions&lt;/code&gt;の山をいくつか見つけたので、さらに資料を調べ、設定を調整する。とりあえず行番号は取り除く。
カスタムの&lt;code&gt;css&lt;/code&gt;スタイルシートとカスタムの&lt;code&gt;js&lt;/code&gt;スクリプトを設定します。
色々やらかしてしまったので、ふと最近見た配色図が良さそうだなと思い、ボタンのスタイルを少し変更してみることに。中国風の天青色でやってみるか。&lt;/p&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:20%&#34; src=&#34;2022-02-25-02-01-22.png&#34; /&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:20%&#34; src=&#34;2022-02-25-02-01-33.png&#34; /&gt;
&lt;p&gt;四時間かけてやったのに、この文を見たときは笑ってしまった。こんなに時間がかかるなんてありえないと思った。でもよく見たら三時間だった。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ouuan.github.io/post/from-hexo-to-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/configuration-markup#highlight&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/configuration-markup#highlight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>私たちが一生をかけて追い求めるものは何か。</title>
        <link>https://ttf248.life/ja/p/we-exhaust-ourselves-chasing/</link>
        <pubDate>Tue, 31 Aug 2021 21:09:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/we-exhaust-ourselves-chasing/</guid>
        <description>&lt;p&gt;王羲之は言う。「人の交わりとは、見上げ見て下し一生を過ごすことであり、胸中に宿るものから得たり、言葉を通して悟りを得たり、一つの部屋の中に現れることもあるし、託されたものを託して、身を任せて形骸の外に放つこともある。」&lt;/p&gt;
&lt;p&gt;人生は、一瞬の幻のごとし。草木の春の緑もまた、枯れて栄えることもあれば、朝日が昇り沈むように過ぎ去る運命である。&lt;/p&gt;
&lt;p&gt;偏にこの世で多くの欲がある。&lt;/p&gt;
&lt;p&gt;幼い頃、小川のほとりで蓮の花弁をむき、東風に乗せて凧を揚げ、追いかけるように黄色い蝶々を追いかけた。&lt;/p&gt;
&lt;p&gt;傍に桑の陰で学問を種る、帰り来ては腹を満たし黄昏の後、脱がずに蓑をまとい月を臥す。&lt;/p&gt;
&lt;p&gt;将来は、科挙に合格し、美しい伴侶を得て、財産が絶えず、昇進を続け、多くの友人が集まり、毎晩宴を楽しむことを願う。&lt;/p&gt;
&lt;p&gt;年を取り、健康長寿を願うならば、童守人を迎え、幼き子が戸口に待つ。将棋盤一つ、知る友一人、酒器一つ、中庭一つ。これらがあれば、穏やかな時を過ごすことができる。&lt;/p&gt;
&lt;p&gt;人々が慌ただしく走り回っているのは、わずかな銀貨を求めているだけだ。しかし、そのわずかな銀貨は、世の中のあらゆる憂鬱を癒すことができる。&lt;/p&gt;
&lt;p&gt;多くの人はまだ日々の生活に苦しんでいるのに、どこに意味を追い求める時間があるのだろうか。&lt;/p&gt;
&lt;p&gt;実際、人の一生とは、ただの一つの体験に過ぎず、草木や日月のように、欲望の輪廻を経験するのです。&lt;/p&gt;
&lt;p&gt;生きることが分からなければ、儚い露を天地に漂わせ、広大な大海の一粒砂のように感じるだろう。自分の短い生涯を嘆き、長江の尽きることのない流れを羨むだろう。しかし、生きることを悟れば、出会えたことに喜び、一時的なものであっても自分にとって有益だと感じ、満足して過ごし、老いの訪れも知らないだろう。&lt;/p&gt;
&lt;p&gt;あなたは金銭や名声を追い求めることもできますし、詩や酒や花や茶を追い求めることもできます。あなたは川の上での爽やかな風を追い求めることもできますし、山の上の明るい月を追い求めることもできます。&lt;/p&gt;
&lt;p&gt;しかし、結果を追い求めることに過度に気を配る必要はありません。結果はいつか過ぎ去ります。&lt;/p&gt;
&lt;p&gt;一生をかけて、この世に身を置くことによって、可能な限り世の喜び悲しみ、生老病死を経験する。&lt;/p&gt;
&lt;p&gt;この映画「ビッグ・フィッシュ」のセリフがとても好きです。&lt;/p&gt;
&lt;p&gt;人生は短い、いずれ失ってしまうものだから、思い切って誰かを愛して、山を登り、夢を追いかけよう。答えのないこともたくさんあるのだから、思い切ってしまおう。&lt;/p&gt;
&lt;p&gt;とても《蘭亭集序》と《赤壁賦》が好きです。&lt;/p&gt;
&lt;p&gt;毎に往時の人の興感の由を思うと、あたかも一契を結ぶが如く、未だ筆を取ることを悼まず、能わさと解せられず。固より一生死は虚誕であり、斉彭殇は妄作である。後の見る今のありさまも、今の見る昔のありさまに似たり。悲しむべきことよ！&lt;/p&gt;</description>
        </item>
        <item>
        <title>証券コードの特殊形式に関する説明</title>
        <link>https://ttf248.life/ja/p/interactive-brokers-stock-code-format-explanation/</link>
        <pubDate>Mon, 30 Aug 2021 17:35:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/interactive-brokers-stock-code-format-explanation/</guid>
        <description>&lt;p&gt;めったにないですが、時間が経てば必ず出会います。関連株式コード：バークシャー&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;一部分の株式コード名に「.」やその他の特殊文字が含まれている場合、Interactive Brokers (IB) に送信する際に、株式コード名の変換が必要となることがあります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BRK/B -&amp;gt; BRK B&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;凸通証券の場合、規則は固定されているため、分析して変換できれば、コーディングで実装すればよいでしょう。規則が固定されていない場合は、通常、システム内で対応するマッピング関係を保存し、業務オペレーターが定期的に更新する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ibkr.info/article/462&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How do I enter the symbol for Berkshire Hathaway Class B shares onto TWS?&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>途方に暮れた</title>
        <link>https://ttf248.life/ja/p/lost-and-confused/</link>
        <pubDate>Thu, 26 Aug 2021 18:01:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/lost-and-confused/</guid>
        <description>&lt;p&gt;人生のある段階で、人はしばしば迷いを感じることがある。自分が何を求めているのかわからなくなり、仕事の細かな日々のなかで、次第に仕事の意味を求めることを忘れがちになる。振り返れば、新卒の頃は心に熱い憧れを抱いていた。その時、私は躊躇なく言った。「コードを書くこと、人目を引く、素晴らしいコードを生み出すことが欲しい」と。しかし、今の仕事では、より多くの業務レベルの事柄に触れるようになり、それは業界発展がもたらした恩恵によるものが多い。&lt;/p&gt;
&lt;p&gt;生活観についていえば、結婚や出産、家庭を築くといったことが視野に入ってきているというわけではありません。頭の中はほとんど空っぽで、今を楽しむことばかり考えています。週末になると、静かにゲームをして過ごすのが好きで、一日中家にこもって自分の小さな世界に浸ることがよくあります。&lt;/p&gt;
&lt;p&gt;人は、やはり何か熱中し、心を込めて打ち込めることが必要だ。&lt;/p&gt;
&lt;h2 id=&#34;家を買う&#34;&gt;家を買う
&lt;/h2&gt;&lt;p&gt;前年まで、私は一生懸命お金を貯めて自分の家を買おうと考えていて、毎日その目標のために節約していました。しかし、住宅価格が右肩上がりに高騰し、当初の不安や不満から、徐々に無気力になり、家を買っても重荷になるだけだと感じて、結局この考えを諦めました。&lt;/p&gt;
&lt;h2 id=&#34;貯金する&#34;&gt;貯金する
&lt;/h2&gt;&lt;p&gt;当初は、高性能なデスクトップパソコンを買ったり、欲しいカメラをかったり、気ままに旅行に行ったりといった小さな目標を達成するために貯金していました。でも今は、貯金に対してもっと穏やかな考え方をするようになり、日々の出費についてあまり心配しなくなり、食べたいものを見たら食べるようにし、珍しいものにも積極的に挑戦するようになりました。&lt;/p&gt;
&lt;h2 id=&#34;帰宅&#34;&gt;帰宅
&lt;/h2&gt;&lt;p&gt;結局、私は心の奥底で最も望んでいるのは、家に帰ることだと気づいた。特別なことをする必要はない、ただあの馴染みのある場所に帰り、家族の温もりと静寂を感じるだけだ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>香港株式先物基礎概念</title>
        <link>https://ttf248.life/ja/p/hong-kong-futures-basics/</link>
        <pubDate>Wed, 18 Aug 2021 10:54:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-futures-basics/</guid>
        <description>&lt;p&gt;金融市場が常に変化するにつれて、投資家は投資収益を増やすために、より効果的な投資ツールを求めるようになりました。投資家のニーズに応えるため、香港証券取引所（香港交易所）は一連の株式先物コントラクトを導入しました。これらのコントラクトは、香港証券取引所の全子会社である香港聯合交易所有限公司（聯交所）に上場している株式を表しており、流通量が高く、活発な取引が行われています。株式先物に投資することで、投資家は個別の上場企業のパフォーマンスに参加できるだけでなく、デリバティブ市場が提供する空売りやレバレッジ効果などの利点も享受できます。&lt;/p&gt;
&lt;p&gt;株式先物が代表する銘柄は、いずれも属する業界の代表的なものなので、投資家が特定の業界のパフォーマンスが市場全体を上回ると予想される場合や、下回ると予想される場合には、その業界の株式先物を選択して投資することができる。&lt;/p&gt;
&lt;h2 id=&#34;基本的な定義&#34;&gt;基本的な定義
&lt;/h2&gt;&lt;p&gt;株式先物契約は、将来の特定日に特定価格（約定価格）で買入または売却することを示す、特定の株式数を表す一定の金融価値を対象とする取引協定です。&lt;/p&gt;
&lt;p&gt;全株式先物契約は現金決済であり、満期時に株の交付はありません。&lt;/p&gt;
&lt;h3 id=&#34;契約満了&#34;&gt;契約満了
&lt;/h3&gt;&lt;p&gt;契約満了時に、約定成立時の価格と最終決済価格の差にコントラクト乗数を掛けた損益額は、契約保有者の保証預金口座から差し引かれる。&lt;/p&gt;
&lt;p&gt;最終清算価格は、関連株式が最終取引日の当日、香港証券取引所に提示された正式な終値です。&lt;/p&gt;
&lt;p&gt;株式先物の投資家が、満期前にポジションを決済したい場合、売り建ての投資家は単に1枚の先物契約を買い戻せばよく、買い建ての投資家はその契約を1枚売却すればよい。&lt;/p&gt;
&lt;h3 id=&#34;保証金&#34;&gt;保証金
&lt;/h3&gt;&lt;p&gt;先物取引を行う際、買い手と売り手は共に、契約を履行するための保証として、まず一定の仮渡金を支払う必要があります。清算所は毎日市場が閉じる後に、未決済の全ての契約について市価で損益を計算し、投資家の預金口座から差し引く根拠とします。もし市況が悪化して投資家が損失を被り、預金が定められた水準を下回った場合、取引所は投資家に指定された期間内に追加の入金を求め、預金を元の仮渡金のレベルに維持させます（追証）。&lt;/p&gt;
&lt;h2 id=&#34;長所&#34;&gt;長所
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;取引手数料は割安です。株式先物契約は、数千株に相当する価値を持ちながら、取引手数料は契約数によって変動するため、契約価値と比較して取引コストは非常に低くなります。&lt;/li&gt;
&lt;li&gt;株式の空売りがより便利になりました。投資家は手軽に株式先物を空売りできるため、下落相場では株式先物の空売りによって利益を得ることができます。&lt;/li&gt;
&lt;li&gt;証券取引所のマーケットメーカー制度：市場の流動性を確保するため、香港証券取引所は、指定された価格差内で同時に買いと売りの価格を提供するマーケットメーカーを義務付けており、これにより株先物市場の流動性が維持されます。&lt;/li&gt;
&lt;li&gt;レバレッジ効果：投資家が株式先物契約を売買する際、契約額のほんの一部である保証金を支払うだけで済むため、ヘッジや取引がよりコスト効率を高めることができる。&lt;/li&gt;
&lt;li&gt;海外投資家の為替リスクを軽減する：株式先物契約は、海外投資家がローカルの優良株に投資するための手段を提供します。株式先物を売買するには、全額ではなく保証金のみが必要となるため、海外投資家が直面する為替リスクを大幅に軽減できます。&lt;/li&gt;
&lt;li&gt;電子取引システムを通じて売買：株式先物契約は、期交所の電子取引システムを通じて売買されます。全ての売り買い注文は、価格と時間の優先順位に従って執行され、リアルタイムで入札価格、約定価格を表示し、市場の透明性を最大限に高めます。&lt;/li&gt;
&lt;li&gt;清算公司提供履約保証：股票先物契約は、期交所が全額を所有する香港先物清算有限公司（清算会社）によって登録、決済され、履約保証が提供されます。清算会社がすべての未約定契約の相手方であるため、取引所参加者は相手方リスクを負う必要はありません。ただし、保証の範囲は取引所参加者が顧客に対して有する財務責任には及びません。投資家は証券業者を選択する際には慎重に検討する必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;庄家制度&#34;&gt;庄家制度
&lt;/h3&gt;&lt;p&gt;市場参加者は、個別の先物取引銘柄に対してマーケットメーカーとして登録し、指定された最大スプレッド内で買い気配と売り気配を同時に提示することができます。取引所参加者およびその顧客は、個別の先物取引銘柄にマーケットメーカーが登録されていない場合があり、その売買は市場板単位で行われる可能性があることに注意する必要があります。&lt;strong&gt;投資家は、マーケットメーカー登録のない先物取引銘柄には流動性リスクが伴う可能性があることを留意し、投資前には慎重に検討すべきです。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;株式および先物の取引のリスク&#34;&gt;株式および先物の取引のリスク
&lt;/h2&gt;&lt;p&gt;株式先物は高いリスクを伴います。株式先物の売買によって生じる損失は、初期に預けた保証金を超える可能性があり、短時間で追加の保証金を支払う必要が生じることがあります。もし保証金を支払えない場合、保有ポジションが強制的に決済され、その際の損失はご自身で負担することになります。したがって、株式先物の取引にはリスクが伴うことを十分に理解し、ご自身に適しているかどうかを検討する必要があります。取引を行う前に、ご自身の財務状況や投資目標に基づいて、証券会社またはファイナンシャルアドバイザーに相談し、期货およびオプション契約の売買が適切であるか確認することをお勧めします。&lt;/p&gt;
&lt;h2 id=&#34;コメント調整&#34;&gt;コメント調整
&lt;/h2&gt;&lt;p&gt;株式会社が増配や紅字株の発行などの形で資本構成を変更する場合、純資産額の計算時または効力発生日に株価が変動し、それによって未決済のオプションも影響を受ける可能性がある。&lt;/p&gt;
&lt;p&gt;他の条件が同じであれば、株主が保有するポートフォリオの価値は清算日に変化することはありませんが、株式先物の買い手や保有者にとっては状況は異なります。期近契約において適切な調整が行われなければです。約定価格を変更せず、株式先物コントラクトの倍率を維持した場合、株価の変動は株式先物ポジションの価値に不当かつ不公平な影響を与える可能性があります。&lt;/p&gt;
&lt;p&gt;清算所は、先物契約の公正な価値を維持することを原則とし、大幅な変更が生じた場合にのみ比率を調整することに決定しました。香港取引所が調整の詳細を発表し、取引所参加者は顧客に対しその変更点を通知する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;株式先物契約概要&#34;&gt;株式先物契約概要
&lt;/h2&gt;&lt;p&gt;株式先物契約概要&lt;/p&gt;
&lt;h2 id=&#34;情報提供者コード&#34;&gt;情報提供者コード
&lt;/h2&gt;&lt;p&gt;情報提供元コード&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;香港証券取引所 - デリバティブ製品/個別株/株式先物
&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/-/media/HKEX-Market/Products/Listed-Derivatives/Single-Stock/Stock-Futures/Stock-Futures-Information-Sheets/HKEX_Stock_Futures_SC.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKEX_Stock_Futures_SC.pdf&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>資本独占とオンライン教育業界の終焉</title>
        <link>https://ttf248.life/ja/p/capital-monopoly-and-the-fall-of-online-education/</link>
        <pubDate>Wed, 28 Jul 2021 14:59:08 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/capital-monopoly-and-the-fall-of-online-education/</guid>
        <description>&lt;p&gt;ここ数日の株式市場の大幅な下落で、新規参入した「韭菜（きゅうさい）」たちは市場のリスクを目の当たりにした。我国はまもなく高齢化段階に入り、出生率のデータも惨憺々たるものであり、低下率は関連専門家の予想を大幅に上回っている。出生率を下げる足かせとなる産業に対し、我が党は強力な対策を講じるだろう。&lt;/p&gt;
&lt;h2 id=&#34;生徒の負担軽減&#34;&gt;生徒の負担軽減
&lt;/h2&gt;&lt;p&gt;九十年代に生まれた私たちは、あまり多くの習い事や補習授業もなく、放課後にはわいわい騒いで遊んだ。それはまず家庭の状況がそれを許さなかったこと、そして次に当時の補習授業はまだブランド効果を生んでおらず、親からの信頼を得られていなかったからだ。気がつけば二十年が過ぎ、19年から始まったK12教育の資本化により、猿輔導などのオンライン補習授業が次々と登場し、資本の支援のもと、優秀な資源を集めて様々な名門補習授業を作り上げた。天文学的な費用も親たちの熱意を止めることはできなかった。&lt;/p&gt;
&lt;p&gt;都市化の過程で、多くの親は読書という道を通して貧困から抜け出し、階級を向上させてきました。サラリーマンとしての仕事に多忙な日々を送る中で、自分自身が競争に追われ、子どもも同世代に遅れを取らせたくないと思っています。「寒門（かんなご）から出世」という言葉があるように、適切な学歴がないと、普通の家庭では現在の階級を維持したり、再び階級を向上させることは難しくなります。職業高校に進むとなれば、今の社会環境下では、それが階級の下降と見なされ、ほとんどの親が受け入れられません。&lt;/p&gt;
&lt;p&gt;なぜ放課後授業が必要なのか、親がなぜ放課後授業を必要とするのかを振り返ってみましょう。教科書の知識や例題は一目瞭然ですが、多くの科目は範囲が広く、概念も浅く、深入りしていません。才能の選抜メカニズムにはある程度の区別が必要であり、これが矛盾を生み出しています。試験問題は単に教科書の知識から出発しているだけでは、ふるいにかけるという役割を果たせず、横方向への拡張、縦方向への拡張が必要です。これらの内容は、先生が授業で網羅できない領域であり、この空間の存在が放課後授業を育む土壌を作り出しています。&lt;/p&gt;
&lt;p&gt;書類の内容は非常に多く、三十条の細則が複数の側面を規定し、指導ファイルの大綱概要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全般的に課題の総量と時間を削減し、生徒の過剰な負担を軽減する。&lt;/li&gt;
&lt;li&gt;学校の放課後サービス水準を向上させ、生徒たちの多様なニーズに応える。&lt;/li&gt;
&lt;li&gt;厳格な管理から堅持し、校外教育の行動を全面的に規範化する。&lt;/li&gt;
&lt;li&gt;教育教学の質を大幅に向上させ、生徒が学校でしっかりと学び、習得できるようにする。&lt;/li&gt;
&lt;li&gt;強化配套施策、支援体制を向上させる。&lt;/li&gt;
&lt;li&gt;綿密に計画し実行し、実効性を確保する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;エリート教育&#34;&gt;エリート教育
&lt;/h2&gt;&lt;p&gt;教育業界にはもう一つ現象があります。それは、優秀な私立中学校が増え続けており、公立学校の質の高い資源が追いついていないということです（学区住宅が発生する）。様々な規模の教育グループは、高額な給与で優秀な教師を引きつけ、質の高い学習環境を構築し、徐々にそれぞれのブランドを確立しています。最も有名なのは&lt;strong&gt;衡水モデル&lt;/strong&gt;です。実家では平均して3千人程度の会社ですが、優秀な私立小学校では、年間費用が9千から1万になります。教育グループは善性のサイクルを形成します。授業料が高くても、先生が優秀で、生徒の成績が良いので、授業料を上げても、親は子供を送り続けてきます。公立学校の資源（教師）も徐々に私立学校に引き寄せられ、最終的には質の低い教育の代名詞となってしまいます。&lt;/p&gt;
&lt;h2 id=&#34;アルゴリズム搾取&#34;&gt;アルゴリズム搾取
&lt;/h2&gt;&lt;p&gt;データによると、美団（ミーツァン）に契約している配達員は400万人に迫り、活動中の配達員は40～50万人いるとのことです。多くの人がこの仕事に頼って生計を立てていますが、終わりのないアルゴリズムが配送時間を圧迫し、人々を計測可能な単位へと置き換えて、アルゴリズムの中で計算され、配達員の限界点を探り尽くそうとします。まるで自分が賢いかのように、&lt;strong&gt;人性を無視し、資本に奉仕する&lt;/strong&gt;のです。市場はここにありますから、皆でうまくやっていき、持続可能な発展を目指すべきです。&lt;strong&gt;独占や特権を振り乱すのではなく、資本主義のやり方で、むやみやたらに成長しても結局は終焉を迎えます&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;株式市場の変動&#34;&gt;株式市場の変動
&lt;/h2&gt;&lt;p&gt;二〇二一年七月二十四日、新東方に代表される教育株がトリッキーなパフォーマンスを見せ、米国市場の事前取引で好未来がそれに続き、&lt;strong&gt;株価は半減した&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我が国は段階的に高齢化に入っており、計画出産に影響を与える様々な社会現象は必ず是正されなければならない。独占や長時間労働を強いるインターネット企業には罰金が科せられ、資本が集積した教育業界も是正されている。&lt;/p&gt;
&lt;p&gt;資本化を禁じるという教育業界への規制により、新規株式公開による資金調達が完全に拒否され、悲鳴が上がっている。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;新東方腰斬&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;腰斬の新東方&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;暴落する美団&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大暴落する美団&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;規制が相次ぎ、オンライン教育は急ブレーキ
【国務院事務局が『義務教育段階における児童の宿題負担と放課後学習支援負担をさらに軽減することに関する意見』を発布】&lt;/p&gt;</description>
        </item>
        <item>
        <title>カオスエンジニアリング</title>
        <link>https://ttf248.life/ja/p/chaos-engineering/</link>
        <pubDate>Wed, 28 Jul 2021 14:35:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chaos-engineering/</guid>
        <description>&lt;p&gt;システムを破壊するパターン、システム安定性テストを行う&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;国内のインターネット業界はいつも何か新しいものを生み出したがるので、時々名前を聞いて、それが何なのか全く想像できないことがある。&lt;/p&gt;
&lt;p&gt;記事の一部を読んだのですが、カオスエンジニアリング初期の定義に関する記述が一番受け入れやすいです。&lt;/p&gt;
&lt;p&gt;カオスエンジニアリングの初期的な探求は、業界では以前から存在しており、障害テストやディザスタリカバリー演習といった形で存在していました。しかし、マイクロサービスアーキテクチャの発展と分散システムの拡大に伴い、カオスエンジニアリングはその頭角を現し始め、ますます重視されるようになりました。Netflixが正式にカオスエンジニアリングの概念を提起したことで、関連理論も急速に豊かになり、Netflixの実践は、安定性という分野におけるカオスエンジニアリングの大きな意義を証明しました。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;バイトダンスの混沌エンジニアリング実践まとめ&lt;/p&gt;</description>
        </item>
        <item>
        <title>Kubernetesポッドの一時停止</title>
        <link>https://ttf248.life/ja/p/kubernetes-pause-pod/</link>
        <pubDate>Mon, 12 Jul 2021 11:23:09 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/kubernetes-pause-pod/</guid>
        <description>&lt;p&gt;デプロイメントコントローラーは、Kubernetesクラスタにおいて非常に重要な機能である、Podの水平的な拡張と縮小機能を実装しています。この機能は、従来のクラウド時代プラットフォームにとって不可欠な能力です。&lt;/p&gt;
&lt;p&gt;業務シーンで、データベース内のデータを修正し、調整後にPodノードを再起動する必要がある。しかし、Podの実行中にテーブルのフィールドをずっと変更しており、一時的にアプリケーションへのテーブル更新を停止し、データを調整した後、Podを復旧させる必要がある。&lt;/p&gt;
&lt;p&gt;暴力削除のデプロイメント以外に、同様の効果を実装する方法はありますか？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl scale --replicas=0 deployment/&amp;lt;your-deployment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;答えを見て初めて、多くの人は思いもよらなかったでしょう。答えを見ると、思わず微笑み、頭がなかなか回らず、まだプロセスを直接操作する時代に思考が留まっている。直接ビジネスプロセスを操作しようとするのです。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/54821044/how-to-stop-pause-a-pod-in-kubernetes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;how to stop/pause a pod in kubernetes&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>投資信託と固定収益プライベートマネー</title>
        <link>https://ttf248.life/ja/p/fund-and-fixed-income-wealth-management/</link>
        <pubDate>Fri, 09 Jul 2021 11:27:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/fund-and-fixed-income-wealth-management/</guid>
        <description>&lt;p&gt;90年代に生まれた私たちの世代は、08年の金融危機、ほとんど何も感じなかった。まだ若くて、投資をする頃でもなかったから。2015年の強気相場は活気に満ち溢れ、終盤も大きな動きを見せたが、結局は国家の介入で市場を救った。同時に、投資信託という概念が一般の人々の視野に入ってきた。&lt;/p&gt;
&lt;h2 id=&#34;アリババフィナンシャルとアリペイ&#34;&gt;アリババ・フィナンシャルとアリペイ
&lt;/h2&gt;&lt;p&gt;支付宝はアリババ傘下の自然なトラフィックエントリーとして、決済ツールという位置づけで生まれました。ファンドの購入においては、支付宝で購入する方が多いです。支付宝はファンド販売を普通の買い物に成功させました。2019年の相場の上昇とファンドマネージャーによる団結的な暖取りは、根本的にはパンデミックが引き起こした大規模な金融緩和によって導かれたものです。参入した人は皆儲かりましたが、参入しなかった人も羨望の眼差しを送り、急いで参入しました。新ファンドの規模が100億を突破するスピードはますます速くなり、主婦層もファンドを買うようになった状況では、千億円規模のファンドも間近です。&lt;/p&gt;
&lt;p&gt;アリババのコードを基盤とするインターネットファンド販売プラットフォームが隆盛する以前は、一般の人々がファンド販売に触れる機会は、銀行で預金をする際に、支店の行員が熱心に各種金融商品を説明することくらいでした。しかし、インターネットによる魅力的なパッケージングやプロモーションページの誘導、そしてファンド販売機関が費やす莫大な広告費によって、アリペイのファンド広告は合理性を逸脱してしまいました。&lt;/p&gt;
&lt;p&gt;通常の銀行定期預金の利回りは4％、かつては猛威を振るっていたP2P投資は8％、クレジットカードの返済金利は12％。当社の主人公は、アリペイが宣伝しているファンドで150%、250%という高揚した数字だ。市場の上昇に誰もが喜びますが、市場の下落は？アリペイは火遊びをしているようです。提示された上昇幅データには、机上では直近3年間の収益図しか書かれておらず、老舗ファンドは年平均の収益のみを記載している。なぜ毎年平均の収益を個別に記載しないのか？計算が難しいからでしょうか？答えはノーです。データが良くないため、顧客にファンド購入を促すのが難しいためです。&lt;/p&gt;
&lt;h2 id=&#34;固定収益投資&#34;&gt;固定収益投資
&lt;/h2&gt;&lt;p&gt;中国はまだマイナス金利時代には入っていないが、銀行預金や国債は最も確実な固定収益商品であり、純債のファンドも良いだろう。中国の平均賃金を調べたい場合は、各地方統計局が発表しているデータを確認すればよい。筆者は簡単なシナリオを想定する。資産規模200万元で、年換算4%の利回りで計算すると、毎年の収益はほとんどの都市の平均賃金を超える。&lt;/p&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;p&gt;個人的な経験から出発して書けることはたくさんありますが、もっと知りたい場合は、経済学関連の書籍を自分で調べてみることをお勧めします。安易に飛びつらずに。普通の家庭では、資産を守ることが理財の中核であり、一攫千金を夢見ることではありません。&lt;/p&gt;
&lt;p&gt;おじいちゃんがよく言っていたこと：&lt;/p&gt;
&lt;p&gt;適切な時に適切なことをすれば、価値が最大になる。本を読む時は真剣に読み、良い学歴を得ることが、チラシ配りで小遣い稼ぎするよりもずっと良い。新卒の頃は真面目に仕事をし、給料の上がり幅が豊かなリターンをもたらす。家庭を持つ時は、家事を世話することを学ぶべきだ。&lt;/p&gt;
&lt;p&gt;興味があれば、このスピーチの原稿を見てみてください。時間について、答えを見つけるには多くの本を読む必要があります。当サイトにテキストがあります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>有孚証券：取引停止</title>
        <link>https://ttf248.life/ja/p/interactive-brokers-trading-interruption/</link>
        <pubDate>Tue, 22 Jun 2021 10:51:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/interactive-brokers-trading-interruption/</guid>
        <description>&lt;p&gt;取引の中断とは、取引が実行され、IB が取引所から実行情報を受け取った後に発生するものです。その後、取引所が何らかの誤り（価格、電子処理プロセス、明白なエラーなど）に気付き、取引を中断（取り消し）することに決定した場合です。このプロセスは完全に取引所によって決定され、制御されます。&lt;/p&gt;
&lt;p&gt;A busted traderefers to a situation where an execution occurs and IB receives the execution messagefrom the exchange. The exchange then realizes some type of error (Pricing,electronic, obvious error, etc) and rules to bust (cancel) the trade. Theexchange makes these rulings entirely on their own.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;取引の観点から見ると、香港証券取引所の取引キャンセルと取引修正に相当します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>取引所インターフェースドキュメントまとめ</title>
        <link>https://ttf248.life/ja/p/exchange-interface-documentation-summary/</link>
        <pubDate>Wed, 27 Jan 2021 14:35:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/exchange-interface-documentation-summary/</guid>
        <description>&lt;p&gt;金融ソフトウェア開発5年目、日々接しているのが各種取引所のインターフェースドキュメントであり、慣れ親しんでいるのも香港証券取引所のドキュメントです。最近は中華通業務を取り扱っており、その関連で深圳証券取引所と上海証券取引所の資料を調べてみました。&lt;/p&gt;
&lt;h2 id=&#34;香港証券取引所&#34;&gt;香港証券取引所
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式サイト&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;よく使う&#34;&gt;よく使う
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;取引時間、取引及び決済カレンダー&lt;/li&gt;
&lt;li&gt;取引メカニズム&lt;/li&gt;
&lt;li&gt;香港証券取引所 金融用語集&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;沪港通および深港通取引カレンダーPDF&lt;/li&gt;
&lt;li&gt;沪港通および深港通取引カレンダーCSV&lt;/li&gt;
&lt;li&gt;【香港金融用語対照表PDF】&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;市場メカニズムによるクーリングオフ期間トリガー記録&lt;/li&gt;
&lt;li&gt;証券リスト：基本情報、証券分類&lt;/li&gt;
&lt;li&gt;清算競り取引時間中の証券&lt;/li&gt;
&lt;li&gt;市場変動調整メカニズム（市調メカ）証券&lt;/li&gt;
&lt;li&gt;空売り可能な指定証券&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;証券リスト：基本情報、証券分類 XLSX&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;市場データインターフェースドキュメント香港株--中国証券&#34;&gt;市場データインターフェースドキュメント：香港株 + 中国証券
&lt;/h3&gt;&lt;p&gt;市場データサービス インフラ 概要へのリンク&lt;/p&gt;
&lt;p&gt;よくあるご質問、開発マニュアル、過去の取引履歴インターフェースドキュメントは検索バーからダウンロード先を取得でき、過去のバージョン番号も検索可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;香港株式市場データフィード仕様書&lt;/li&gt;
&lt;li&gt;中国における株式接続に関するインターフェースドキュメント&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&#34; &gt;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Developers_Guide_1_11.pdf&#34; &gt;HKEX_OMDC_Developers_Guide_1_11.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMDC_Connectivity_Guide_Securities_Market-_Index_datafeed_%28v2_2%29.pdf&#34; &gt;OMDC_Connectivity_Guide_Securities_Market-&lt;em&gt;Index_datafeed&lt;/em&gt;(v2_2).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Interface_Specification_China_Connect_Securities-%28v1-3%29.pdf&#34; &gt;OMD_Interface_Specification_China_Connect_Securities-(v1-3).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Connectivity_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Connectivity_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Developers_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Developers_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;報値インターフェースドキュメント香港株--ユーロトラベラー&#34;&gt;報値インターフェースドキュメント：香港株 + ユーロトラベラー
&lt;/h3&gt;&lt;p&gt;報盤インターフェースドキュメント集リンク&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;香港証券取引所FIXプロトコルインターフェース仕様書PDF&lt;/li&gt;
&lt;li&gt;香港証券取引所 オプション・コール・オプション二重執行システム インターフェース仕様書PDF&lt;/li&gt;
&lt;li&gt;香港証券取引所エラーコードリスト（XLSX）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;香港証券取引所CCCG FIX取引インターフェース仕様書 v1.3 (清掃済み).pdf&lt;/li&gt;
&lt;li&gt;香港証券取引所CCCG二進数取引インターフェース仕様書PDF&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;上海証券取引所&#34;&gt;上海証券取引所
&lt;/h2&gt;&lt;p&gt;市場情報報盤インターフェースドキュメント&lt;/p&gt;
&lt;p&gt;エラーインターフェースのドキュメントは他のメニューから入手できます。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;SSE_IS111_ErrorCode_CV3.15.xlsx&#34; &gt;報盤エラーコードリファレンスXLSX&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;深圳证券交易所&#34;&gt;深圳证券交易所
&lt;/h2&gt;&lt;p&gt;市場サービス・技術サポート＞市場データインターフェース&lt;/p&gt;
&lt;p&gt;取引所は個別のエラー情報を提供しておらず、入札インターフェースドキュメントの第6章に補足説明があります。&lt;/p&gt;
&lt;p&gt;深セン証券取引所バイナリー取引データインターフェース仕様書（Ver1.18）PDF&lt;/p&gt;
&lt;h2 id=&#34;ナスダック&#34;&gt;ナスダック
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;祝日スケジュール&lt;/li&gt;
&lt;li&gt;新規株式公開情報&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;買値&#34;&gt;買値
&lt;/h2&gt;&lt;p&gt;世界市場終値データ&lt;/p&gt;</description>
        </item>
        <item>
        <title>Dockerの豆知識</title>
        <link>https://ttf248.life/ja/p/docker-two-three-things/</link>
        <pubDate>Thu, 21 Jan 2021 09:26:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/docker-two-three-things/</guid>
        <description>&lt;p&gt;長年作業で触れてきたのは&lt;code&gt;CentOS&lt;/code&gt;オペレーティングシステムばかりなので、もし&lt;code&gt;Mac&lt;/code&gt;ユーザーや&lt;code&gt;Ubuntu&lt;/code&gt;ユーザーであれば、一部の内容が適用できない場合があります。&lt;/p&gt;
&lt;p&gt;インストール手順については、清華大学のマニュアルを参照してください：[https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/]&lt;/p&gt;
&lt;h2 id=&#34;設置&#34;&gt;設置
&lt;/h2&gt;&lt;p&gt;未知な神秘的な力により、ローカルにDockerをインストールする際は、クラウドプロバイダーが提供するリポジトリのアドレスを設定することを推奨します。ここでは&lt;strong&gt;アリババクラウド&lt;/strong&gt;の使用をお勧めします。&lt;/p&gt;
&lt;h3 id=&#34;倉庫ソースアドレスを設定する&#34;&gt;倉庫ソースアドレスを設定する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install yum-utils device-mapper-persistent-data lvm2 &amp;amp;&amp;amp; \
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;部署最新バージョン&#34;&gt;部署最新バージョン
&lt;/h3&gt;&lt;p&gt;Dockerはよく使用されるバックグラウンドサービスなので、推奨としては起動時に自動的に開始するように設定し、現在のコマンドはCentOS 7に適用されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install -y docker-ce docker-ce-cli containerd.io &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;部門指定バージョン&#34;&gt;部門指定バージョン
&lt;/h3&gt;&lt;p&gt;KubernetesとDockerのリリースは完全に同期していないため、次にKubernetesをデプロイする場合は、Kubernetesのデプロイ手順を参照し、指定されたバージョンのDockerをインストールしてください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum list docker-ce --showduplicates | sort -r
sudo yum install -y docker-ce-18.09.2-3.el7 docker-ce-cli-18.09.2-3.el7 containerd.io-18.09.2-3.el7 &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;通常ユーザーにdocker権限を追加する&#34;&gt;通常ユーザーにDocker権限を追加する
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo usermod -aG docker ${USER}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;アンインストール&#34;&gt;アンインストール
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum erase -y docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日常利用&#34;&gt;日常利用
&lt;/h2&gt;&lt;h3 id=&#34;ミラーアクセラレーション&#34;&gt;ミラーアクセラレーション
&lt;/h3&gt;&lt;p&gt;依然未知な神秘的な力が存在するせいで、イメージの引き出しがうまくいかないことがあります。そこで、国内のクラウドベンダーが多くのアクセラレーションサービスを提供してくれました。やはり&lt;strong&gt;阿里云&lt;/strong&gt;をおすすめします。&lt;/p&gt;
&lt;p&gt;加速されたアドレスは、ご自身でアカウントを登録してAliyun（アリババクラウド）から入手してください。このサービスは無料で、Aliyunは無料のイメージ構築サービスも提供しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt;EOF
{
  &amp;quot;registry-mirrors&amp;quot;: [
    &amp;quot;https://docker.nju.edu.cn&amp;quot;,
    &amp;quot;https://mirror.baidubce.com&amp;quot;,
    &amp;quot;https://docker.m.daocloud.io&amp;quot;,
    &amp;quot;https://docker.mirrors.sjtug.sjtu.edu.cn&amp;quot;
  ]
}
EOF
systemctl daemon-reload &amp;amp;&amp;amp; \
systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;強く推奨されるコントロールパネル&#34;&gt;強く推奨されるコントロールパネル
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume create portainer_data &amp;amp;&amp;amp; \
docker run -d --name=portainer --restart=always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.20.3-alpine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;よく使うミラーの引き出しまとめ&#34;&gt;よく使うミラーの引き出しまとめ
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull rancher/rancher:stable &amp;amp;&amp;amp; docker pull  portainer/portainer-ce:2.0.1 &amp;amp;&amp;amp; \
docker pull centos:7 &amp;amp;&amp;amp; docker pull ubuntu:20.04 &amp;amp;&amp;amp; docker pull ubuntu:18.04 &amp;amp;&amp;amp; \
docker pull redis:5 &amp;amp;&amp;amp; docker pull redis:6 &amp;amp;&amp;amp; \
docker pull alpine:3.11 &amp;amp;&amp;amp; docker pull busybox:1.32 &amp;amp;&amp;amp; \
docker pull rabbitmq:3.7-management &amp;amp;&amp;amp; \
docker pull mariadb:10.2 &amp;amp;&amp;amp; \
docker pull nginx:1.18 &amp;amp;&amp;amp; docker pull nginx:1.19 &amp;amp;&amp;amp; \
docker pull mysql:5.6 &amp;amp;&amp;amp; docker pull mysql:8 &amp;amp;&amp;amp; \
docker pull elasticsearch:6.8.11 &amp;amp;&amp;amp; docker pull logstash:6.8.11 &amp;amp;&amp;amp; docker pull kibana:6.8.11 &amp;amp;&amp;amp; \
docker pull zookeeper:3.4 &amp;amp;&amp;amp; \
docker pull influxdb:1.7 &amp;amp;&amp;amp; docker pull grafana/grafana:7.3.1 &amp;amp;&amp;amp; \
docker pull percona:8 &amp;amp;&amp;amp; docker pull percona:5.6 &amp;amp;&amp;amp; \
docker pull cloverzrg/frps-docker:0.34.3 &amp;amp;&amp;amp; docker pull cloverzrg/frpc-docker:0.34.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;よく使うコマンドの組み合わせ&#34;&gt;よく使うコマンドの組み合わせ
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/reference/commandline/docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/engine/reference/commandline/docker/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンテナの実行状態を確認し、&lt;code&gt;format&lt;/code&gt;パラメータを追加して詳細なコンテナ情報を確認します。この際、イメージ情報は気にしません。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker ps --format &amp;quot;{{.Names}}: {{.Ports}}: {{.Size}}&amp;quot;
#portainer: 0.0.0.0:8000-&amp;gt;8000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp: 0B (virtual 172MB)
#influxdb: 0.0.0.0:8086-&amp;gt;8086/tcp: 183B (virtual 311MB)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;全コンテナを停止&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ワンクリックですべてのイメージを削除します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dokcer rmi $(docker images -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;イメージエクスポート&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; &amp;gt; -o XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージをエクスポートして圧縮する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; | gzip &amp;gt; XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージのインポート&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker load -i XXX.tar
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>LinuxでJMeterテスト環境を構築する</title>
        <link>https://ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</link>
        <pubDate>Tue, 22 Dec 2020 10:12:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</guid>
        <description>&lt;p&gt;著者はハードウェアに強い興味を持ち、Jmeterを用いて負荷テストを実施し、CentOS 7上にJmeter、InfluxDB、Grafanaをデプロイした過程を記録した。Jmeterのインストールとコマンドの使用方法、InfluxDBの特徴とDockerのインストール方法、そしてGrafanaの簡単なデプロイと設定について共有している。高性能プログラムのパターンに関する経験と参考文献をまとめた。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;周知の通り、私はハードウェアに強い興味があります。たまたまテストチームがJmeterでパフォーマンステストを行っているところを見かけ、性能が上がらないというので、好奇心旺盛な私が早速乗り出し、会社のパフォーマンステストを試してみることにしました。 ここでちょっとしたエピソードがあります。ある昔のことですが、OSC（开源中国）で記事を拝見し、より高尚に見えるパフォーマンステストのグラフを描く方法について学んだことがあります。Windows版のテストを実行しているところを見学し、TPSデータを可視化するまで来ています。それに加えてWebパネルを設定することにどのようなメリットがあるのでしょうか？&lt;/p&gt;
&lt;p&gt;考えたことがすべて思い込みで、試してみないとわからない。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t use GUI mode for load testing! only for Test creation and Test debuggin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公式的には、コマンドラインで結果を取得し、GUIで表示する方法ではデータの誤差が生じる可能性があるとのことです。JMeterについてはあまり詳しくないのですが、せめてLinux版のコンソールパネルを試してみる理由にはなります。&lt;/p&gt;
&lt;p&gt;オープンソース中国のフォーラムでの投稿ですが、主要コンポーネントのデプロイメントは友好的ではありません。必要なファイルも公众号をフォローしないとダウンロードできないので、新しい世代として当然Dockerで代替しました。結局のところ、自分のサーバーが国内にあること、そしてクロスボーダーのソースアドレスへのアクセス速度が非常に遅いことが原因です。少なくともイメージサービスに関しては、アリババクラウドには無料のアクセラレーションがあります。&lt;/p&gt;
&lt;p&gt;Dockerのインストールとデプロイについては、ここでは詳細を述べません。以前の記事をご参照ください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今後の内容は大きく分けて二つです。基本的なテスト環境コンポーネントの構築と、各コンポーネントの簡単な説明。&lt;/p&gt;
&lt;h2 id=&#34;jmeter&#34;&gt;Jmeter
&lt;/h2&gt;&lt;p&gt;Apache JMeterは、Apache Foundationが開発したJavaベースの負荷テストツールです。ソフトウェアの負荷テストに用いられ、当初はWebアプリケーションのテスト用に設計されましたが、その後他のテスト分野にも拡張されています。静的なリソースや動的なリソースなど、さまざまなものをテストできます。例えば、静的ファイル、Javaマイクロサービス、CGIスクリプト、Javaオブジェクト、データベース、FTPサーバーなどです。JMeterは、サーバー、ネットワーク、またはオブジェクトに対して巨大な負荷をシミュレートし、さまざまなプレッシャーカテゴリー下での強度をテストし、全体的なパフォーマンスを分析するために使用できます。また、アサーションを含むスクリプトを作成することで、アプリケーションの機能/回帰テストを行い、プログラムが期待される結果を返すことを検証できます。最大限の柔軟性を実現するため、JMeterは正規表現を使用してアサーションを作成することを許可しています。&lt;/p&gt;
&lt;p&gt;Apache JMeterは、静的なリソースと動的なリソース（ファイル、サーブレット、Perlスクリプト、Javaオブジェクト、データベースおよびクエリ、FTPサーバーなど）のパフォーマンスをテストするために使用できます。サーバー、ネットワーク、またはオブジェクトに過剰な負荷をかけて強度をテストしたり、さまざまな種類のプレッシャー下での全体的なパフォーマンスを分析したりすることができます。パフォーマンスのグラフ解析や、高並行負荷テストでサーバー/スクリプト/オブジェクトを使用することも可能です。&lt;/p&gt;
&lt;h3 id=&#34;jmeter-部署-centos7&#34;&gt;JMeter 部署 CentOS7
&lt;/h3&gt;&lt;p&gt;JDKランタイム環境をインストールし、Jmeterのインストーラパッケージをダウンロードする。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install java-1.8.0-openjdk -y &amp;amp;&amp;amp; \
wget https://mirrors.bfsu.edu.cn/apache//jmeter/binaries/apache-jmeter-5.4.tgz &amp;amp;&amp;amp; tar -xf apache-jmeter-5.4.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;環境変数を設定する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export JMETER_HOME=$HOME/jmeter/apache-jmeter-5.4
export PATH=$JMETER_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;jmeter-コマンド&#34;&gt;JMeter コマンド
&lt;/h3&gt;&lt;p&gt;最後に&lt;code&gt;Grafana&lt;/code&gt;コントロールパネルと接続し、&lt;code&gt;-l&lt;/code&gt;パラメータを入力せずに&lt;code&gt;web&lt;/code&gt;コンソールでデータを観察できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jmeter -n -t /tmp/order-500-10s.jmx -l /tmp/jmeter-order-report-20200109/order-500-10s.jtl
# 一般不用测试结果和测试报告，简化命令
jmeter -n -t /tmp/order-500-10s.jmx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;influxdb&#34;&gt;InfluxDB
&lt;/h2&gt;&lt;p&gt;InfluxDBは、外部依存関係なしにGo言語で記述されたオープンソースの分散型時系列、イベント、および指標データベースです。現在、このデータベースは主に、DevOpsモニタリングデータ、APPメトリクス、IoTセンサーデータ、リアルタイム解析データなど、大量の時間スタンプデータを保存するために使用されています。&lt;/p&gt;
&lt;h3 id=&#34;influxdbの特徴&#34;&gt;InfluxDBの特徴
&lt;/h3&gt;&lt;p&gt;InfluxDBの特徴は、以下の9つの側面からまとめられます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構造（パターン）なし：任意の数の列が可能です。&lt;/li&gt;
&lt;li&gt;メトリクスの保存期間を設定できます。&lt;/li&gt;
&lt;li&gt;時間に関連する関数（最小値、最大値、合計、カウント、平均、中央値など）をサポートし、統計処理に便利です。&lt;/li&gt;
&lt;li&gt;サポートされているストレージポリシー：データの削除と変更に使用できます。（InfluxDBはデータの削除および変更の方法を提供していません。）&lt;/li&gt;
&lt;li&gt;継続クエリのサポート：データベース内で自動的にスケジュールされた一連の文であり、ストレージポリシーと組み合わせることでInfluxDBのシステムリソース使用量を削減できます。&lt;/li&gt;
&lt;li&gt;ネイティブなHTTPサポート、組み込みHTTP API。&lt;/li&gt;
&lt;li&gt;SQLに類似した構文をサポートします。&lt;/li&gt;
&lt;li&gt;クラスタ内のデータレプリカ数を設定する機能をサポートします。&lt;/li&gt;
&lt;li&gt;定期サンプリングデータをサポートし、別のmeasurementに書き込むことで、細分化されたデータストレージを容易にする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;influxdb-docker-インストール&#34;&gt;InfluxDB Docker インストール
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir influxdb &amp;amp;&amp;amp; cd influxdb &amp;amp;&amp;amp; \
docker run -p 8086:8086 -d --name influxdb -v $PWD:/var/lib/influxdb influxdb:1.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンテナに入り、コマンドを実行して、手動でデータベースを作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@bce0a55bbc72:/# influx
Connected to http://localhost:8086 version 1.7.10
InfluxDB shell version: 1.7.10
&amp;gt; 交互面板执行命令
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;influxdb-データベースとユーザーの作成&#34;&gt;InfluxDB データベースとユーザーの作成
&lt;/h3&gt;&lt;p&gt;データベースを作成します：create database jmeter_t2
データベースを確認する：show databases
データベースを切り替えます：use jmeter_t2
ユーザーを作成：パスワード&amp;rsquo;admin&amp;rsquo;でユーザー&amp;quot;admin&amp;quot;を全権限で作成する
ユーザーを表示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; show users
user  admin
----  -----
admin true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ユーザー権限&lt;code&gt;admin&lt;/code&gt;が&lt;code&gt;true&lt;/code&gt;に表示されれば、データベースの準備は完了です。&lt;/p&gt;
&lt;h2 id=&#34;grafana&#34;&gt;Grafana
&lt;/h2&gt;&lt;p&gt;テストケースを作成していると、グラフ表示はそれほど必須ではないことがわかった。インターフェースの&lt;code&gt;tps&lt;/code&gt;データはコマンドラインで実行すれば確認できるし、むしろプログラム内部の処理時間を知りたいだけだ。&lt;/p&gt;
&lt;p&gt;シンプルな&lt;code&gt;Grafana&lt;/code&gt;コントロールパネルをデプロイし、設定ファイルをインポートして&lt;code&gt;InfluxDB&lt;/code&gt;に接続する。&lt;/p&gt;
&lt;p&gt;コントロールパネルでは、タグによるテスト結果のフィルタリングが可能で、通常は &lt;code&gt;InfluxDB&lt;/code&gt; データベースを一つ設定するだけで済みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーション名&lt;/li&gt;
&lt;li&gt;テストケース名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/linux-setup-jmeter-testing-environment/Snipaste_2021-03-09_19-44-22.png&#34;
	width=&#34;861&#34;
	height=&#34;357&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;grafana&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name=grafana -p 3000:3000 grafana/grafana:7.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ウェブ版では、サンプラー間隔により計算される&lt;code&gt;TPS&lt;/code&gt;や関連数値が&lt;code&gt;Jmeter&lt;/code&gt;の集約レポートと一致しない場合があります。参考リンク：&lt;a class=&#34;link&#34; href=&#34;https://www.vinsguru.com/jmeter-real-time-results-influxdb-grafana/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.vinsguru.com/jmeter-real-time-results-influxdb-grafana/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;資料には、リスナーをカスタマイズする方法についても説明されています。&lt;/p&gt;
&lt;h2 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;高性能なプログラムパターンは必ずしもone loop threadであり、ロック、キューへの入列と退列は不要なパフォーマンス損失を引き起こす。&lt;/li&gt;
&lt;li&gt;コアビジネスロジックの処理時間よりも、他のコードを導入する時間が長くなる場合がある。並行処理によってのみ効率を効果的に向上させることができ、コア処理時間が十分短い場合に限って、他のコードの導入は慎重に行うべきである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JMeterシリーズ：JMeter+Grafana+InfluxDBによるリアルタイム監視&lt;/li&gt;
&lt;li&gt;InfluxDB公式イメージ&lt;/li&gt;
&lt;li&gt;Grafana公式イメージ&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://jmeter.apache.org/download_jmeter.cgi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JMeter公式サイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@jasonli.studio/to-install-apache-jmeter-in-centos7-294bc72a97ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;To install Apache JMeter in CentOS7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Red Hat と CentOS のライフサイクル</title>
        <link>https://ttf248.life/ja/p/redhat-centos-lifecycle/</link>
        <pubDate>Tue, 21 Jul 2020 20:02:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/redhat-centos-lifecycle/</guid>
        <description>&lt;p&gt;オンラインの生産環境オペレーティングシステムでは、Red HatとCentOSが主流な選択肢です。2つのシステムのライフサイクルに関する公式ウェブサイトへのリンクを記録し、CentOS 8からCentOS 8 Streamへのアップグレード経験を共有しています。&lt;/p&gt;
&lt;h2 id=&#34;まえがき&#34;&gt;まえがき
&lt;/h2&gt;&lt;p&gt;オンライン生産環境のオペレーティングシステムですが、現在の中国国内では、Red HatとCentOSが主流です。数年前にはRed Hat 6のEOL（End of Life）がありましたが、この記録として両システムのライフサイクル公式ウェブサイトへのリンクを記載します。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://access.redhat.com/support/policy/updates/errata&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Red Hat Enterprise Linux Life Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CentOS 製品仕様&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Red Hat Enterprise Linux（RHEL）とCentOSは、エンタープライズサーバーオペレーティングシステムの主要な選択肢です。RHELは安定したサポートとアップデートサイクルを提供し、企業向けアプリケーションに適しています。CentOSはRHELのコミュニティ版であり、同様の機能と安定性を提供しますが、公式サポートはありません。&lt;/p&gt;
&lt;h2 id=&#34;追い続き&#34;&gt;追い続き
&lt;/h2&gt;&lt;p&gt;この記事を公開した時、2年後にアップデートすることになるとは思ってもみませんでした。先日、普段使っている仮想マシンをCentOS 8からCentOS 8 Streamにアップグレードしました。本番環境でどう選ぶかは言及しないことにしますが、ローカル環境では最新バージョンを追求しています。&lt;/p&gt;
&lt;p&gt;CentOS 8 Streamは、ローリングリリース版であり、従来のCentOSよりも速いアップデートと新機能を提供するため、開発およびテスト環境での利用に適しています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>米中貿易戦争</title>
        <link>https://ttf248.life/ja/p/us-china-trade-war/</link>
        <pubDate>Tue, 21 Jul 2020 19:52:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/us-china-trade-war/</guid>
        <description>&lt;p&gt;まず少し話題とは別の話をします。中国の特色ある社会主義と資本主義の違いについてです。先輩たちの口から「豊になりたいなら、まずは道路を整備せよ」という言葉を聞いたことがあります。中国のインフラ建設は、すべて国家が費用を出して行いますが、資本主義社会であれば、これらはすべて請負制になります。利益がない僻地では、会社が請け負うことに気が進みません。あまり話すと、現在の記事のテーマから逸れてしまいます。一般の人々は貿易戦争があまり生活に影響を与えないと感じるかもしれませんが、実際には、我が国の上級製造業は常に相対的に弱いものでした。私が従事しているIT業界では、メモリ、ハードディスク、CPU、グラフィックカードなど、一台のコンピュータの中核構成要素はすべて海外の工場からのものです。これらの部品の費用も全体の価格の50%を占めており、上級製造は不可欠です。中国とアメリカとの衝突も避けられません。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;米中貿易戦争&lt;/li&gt;
&lt;li&gt;中国製造2025&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ウィキペディア&#34;&gt;ウィキペディア
&lt;/h2&gt;&lt;p&gt;2018年から2020年までの米中貿易戦争（英語：China–United States trade war）は、通称米中貿易戦争、または米中貿易紛争、米中貿易摩擦、米中貿易問題、米中貿易対立とも呼ばれ、中華人民共和国とアメリカ合衆国間の貿易戦争である。&lt;/p&gt;
&lt;p&gt;米国のドナルド・トランプ大統領が2018年3月22日に覚書に署名し、「中国は米国から知的財産と商業秘密を盗んでいる」と宣言したことが、貿易紛争のきっかけとなった。そして、1974年の貿易法第301条に基づき、米通商代表部が中国からの輸入品に対して関税を課すよう求められ、その対象となる商品の総額は約600億ドルに達した。2018年7月6日には、米国が340億ドルの中国製品に対し25%の追加関税を課し、これに対し中国商務部は同日、340億ドルの米国製品に対して25%の追加関税を報復措置として課した。その中には、米国から中国へ最も輸出されている大豆が含まれていた。&lt;/p&gt;
&lt;p&gt;米中両者はかつて2018年5月に貿易戦争の一時停止で合意し、和解を求める共同声明を発表した。しかし、米国通商代表部がその後6月16日に、500億ドル分の中国からの輸入品に対する最初の課税リストを発表し、既存の10%の税率を25%に引き上げた。これに対し、中国国務院関税税則委員会は報復措置として対等な対応を行い、中国商務部は米国への輸出多岐商品の反ダンピング調査を再開した。7月6日、トランプ政権は正式に最初の課税リストに含まれる340億ドル分の中国からの輸入品に対し25%の関税を賦課し、トランプ政権による対中関税政策が正式に実施された（残りの160億ドルの商品は8月23日に25%の関税が賦課された）。その後、中国商務部は声明で、「米国は世貿規則に違反し、史上最大規模の貿易戦争を発動した」と指摘した。また、中国海関総署は、報復措置は米国の関税賦課措置の発効後直ちに実施されたと発表した。&lt;/p&gt;
&lt;p&gt;12月1日、G20ブエノスアイレス首脳会合で、両国首脳である習近平国家主席とドナルド・トランプ大統領は合意し、90日間交渉を行うこと、そして交渉期間中に新たな貿易措置を停止することで同意した。2019年3月1日の期限が到来した後、米国側は大きな進展があったとして、新たな貿易措置の停止期間を延長した。&lt;/p&gt;
&lt;p&gt;2019年5月5日、米国大統領ドナルド・トランプは、新たに約2000億ドル相当の中国からの輸入品に対し25%の関税を課すことを発表した。この措置は6月1日から、米国港に到着する中国製品に正式に適用された。5月13日、中国国務院関税税則委員会は、6月1日以降、原産地が米国である一部の輸入品に対し、5%から25%への関税を課すことを発表した。6月1日、米通商代表部（USTR）は、米国の関税賦課措置を6月15日まで延期すると発表し、中国国務院関税税則委員会は、中国側の関税賦課措置は6月1日に予定通り発効すると表明した。&lt;/p&gt;
&lt;p&gt;6月29日、両国の首脳である習近平国家主席とドナルド・トランプ大統領は、G20大阪サミットで会談し、経済貿易交渉の再開に合意した。また、米国側は中国製品に対する新たな関税を課すことはしないことで合意した。&lt;/p&gt;
&lt;p&gt;8月1日、トランプ政権が中国政府による米国農産物の購入進捗への不満から、トランプはツイッターで2019年9月1日から、残りの3000億ドル規模の全中国からの米国輸出品に10%の関税を課すことを発表した。8月5日には、人民元／米ドルの為替レートが7を割り込んだ。同日、米国財務省は中国を為替操作国として指定した。その後、中国政府は米国農産物の購入を停止し、8月24日に約750億ドル規模の米国製品に10%または5%の関税を課し、米国自動車およびその部品に対する関税を再開すると発表。一方、米国も翌日には、すでに課せられていた3000億ドル規模の中国製品の税率を15%に引き上げ、現在25%の関税が課されている2500億ドル規模の中国製品の関税を30%に引き上げる報復措置を発表したが、その後は保留となった。&lt;/p&gt;
&lt;p&gt;2020年1月16日、米中両国は第1段階貿易協定に署名した。&lt;/p&gt;</description>
        </item>
        <item>
        <title>パソコンの組み立てあれこれ</title>
        <link>https://ttf248.life/ja/p/computer-assembly-tips/</link>
        <pubDate>Sat, 18 Jul 2020 14:33:46 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/computer-assembly-tips/</guid>
        <description>&lt;p&gt;著者は幼い頃からパソコンの組み立てに興味を持ち、大学に進学してからはハードウェアの組み立てに触れるようになりました。CPU、SSD、HDD、メモリ周波数など、ハードウェア性能比較サイトや購入のアドバイスを紹介しています。ハードウェア選びの経験と注意点について共有しています。&lt;/p&gt;
&lt;h3 id=&#34;ご縁言葉では言い表せない&#34;&gt;ご縁、言葉では言い表せない。
&lt;/h3&gt;&lt;p&gt;幼い頃から自分のパソコンを組み立てたいと思っていたのだが、経済的な状況がそれを許してくれなかった。なんとか大学に進学できたものの、持ち運びの都合上、ノートパソコンを選んだ。具体的にいつからパソコンを組み立てることにしたのかという話をするなら、実家近くの図書館に遡ることになるだろう。それは市区レベルの図書館であり、電子閲覧室（実際に行ったことはなく、時間課金らしい）だけでなく、雑誌閲覧室もあった。そこで《大众软件》、《电脑报》といった雑誌をめくったのだ。パソコンにほとんど触れたことがなかった私にとって、それはまさに神のような科普資料だった。ダンジョン攻略の章を見ると、自分もパソコンを手に入れてモンスを集め、主力アタッカーになりたいと思った。そして、ブラックテクノロジーを見かけると、本に書かれている通りにやってみれば、説明されている効果を達成できるのではないか（ハックツールの使用について）という夢を見た。高校の授業は忙しかったが、当時の私の認識では、勉強もしたいし遊びもしたいので、「天真爛漫」な日々を送っていた。図書館に行く口実で、時々小さなバッグを持って歩いて行った。市内の規模は大きくないので、ほとんど徒歩で向かった。着くとエアコンの効いた空間で、小説や漫画、ゲーム雑誌を見たり、たまに真面目な本を読んだりした。&lt;/p&gt;
&lt;p&gt;年を取ると忘れっぽくなるのはよくあることですが、図書館での出来事は今回初めてではありません。中学校の頃、親戚の家でパソコンを組み立てたことがありますが、なぜあの時その機械を組み立てたのか思い出せません。オペレーティングシステムはWindows 2003で、ゲームは標準搭載のトランプとエイジオフエンパイアがありました。色々な「知恵比べ」をして、鍵を盗んで弟と一緒にゲームをするのが楽しみでした。&lt;/p&gt;
&lt;p&gt;中学に入ったばかりの頃から、学校ではコンピュータの初級トレーニングがあり、転校した際にもコンピュータコンテストの概念に触れました。高校に進学すると、NOIPを一度経験しました。そこで言及せざるを得ないのは、同窓会の力です。高校のコンピュータ棟は同窓会からの寄付で、コンピュータ教室と図書館を含んでいます。実際、その頃は国内のインターネットブームの最初の波でした。学校のリーダーシップもコンピュータコンテストへの参加を支援しており、前々回までの先輩たちがコンピュータを通じて重点大学に特待生として進学しているのですから。&lt;/p&gt;
&lt;p&gt;今まで、自分とパソコンの関係をこんな風に振り返ったことがなかった。卒業後に自動化専攻からコンピュータ業界へ固執して転身したのも無理はないことだ。種はすでに植えられていて、関係者は気づいていないだけだろう。小さい頃からよく触れていたので、自分がとても得意だと考えていたが、実際には表面的な知識しかなく、最大の強みは最初の熱意だった。&lt;/p&gt;
&lt;h3 id=&#34;ハードウェア組み立て&#34;&gt;ハードウェア組み立て
&lt;/h3&gt;&lt;p&gt;カードの掲示板やChiphell、知乎のパソコン組み立てスレッドを色々見て回ると、初心者でも比較的簡単に自分に必要なパーツリストを作成できます。2019年以降にCPUを選ぶ場合、経済状況があまり良くない中でより高いパフォーマンスを求めるなら、AMDが第一候補です。&lt;/p&gt;
&lt;p&gt;よく使われるハードウェア性能比較サイトを紹介します：&lt;a class=&#34;link&#34; href=&#34;https://cpu.userbenchmark.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cpu.userbenchmark.com/&lt;/a&gt; 。価格については、メルカリの米国版と比較できるくらいです。本気の方ならメルカリで中古を探すと、かなり安く手に入るかもしれません。しかし、あまり詳しくない場合はメルカリはおすすめしません。私も偽メモリを買ってしまいましたが、今のところ問題なく使えているので、詳細はよくわかりません。型番やスペックが全く合っていないのです。&lt;/p&gt;
&lt;h4 id=&#34;sn550-vs-sn750&#34;&gt;SN550 VS SN750
&lt;/h4&gt;&lt;p&gt;SN550 1TBとSN750 1TBの違いは、持続的な読み書き速度が倍違うことくらいで、それぞれ850MBと1.6GBです。しかし日常使いでは違いを感じないでしょう。なぜなら4Kの性能はどちらも同じだからです。もちろんこれは1TB容量のSN550について言及しているのですが、500Gや250Gだとシーケンシャルリードライトはさらに遅くなります。正直、お金を気にしないのでなければ、日常使いであればSN550で十分だと思います。私がこれを買わなかった最大の理由は、シーケンシャルリードライトの速度ではなく、最大容量が1TBしかないことでした。一方、SN750は2TB容量があります。私にとって、追加購入なしに考えると、マザーボードのM.2 Nvmeスロットの方が、これらのSSDの価格差よりも価値があると感じます。&lt;/p&gt;
&lt;p&gt;ネットユーザーの意見を総合すると、変換アダプターを購入すれば、B150マザーボードでもM.2インターフェースに対応したSSDが利用できる。&lt;/p&gt;
&lt;h4 id=&#34;機械式ハードディスクの選び方&#34;&gt;機械式ハードディスクの選び方
&lt;/h4&gt;&lt;p&gt;機械式ハードディスクは現在価格が安定しており、大量のストレージを必要とするユーザーには、適切な機械式ハードディスクを選択する必要があります。頻繁にコンテンツをダウンロードするユーザーには、エンタープライズ向けのハードディスクをお勧めします。一般的なものとしては：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;西数字金盤&lt;/li&gt;
&lt;li&gt;シージェーエグゾス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大容量の機械式ハードディスクは、パーティション分割を推奨します。頻繁なダウンロード作業は特定のパーティションに固定し、故障が発生した場合もそのパーティションに集中させることで、現在のパーティションを廃棄すれば、機械式ハードディスクの寿命を効果的に延ばすことができます。&lt;/p&gt;
&lt;p&gt;シーゲイトシリーズ&lt;a class=&#34;link&#34; href=&#34;https://www.seagate.com/cn/zh/enterprise-storage/exos-drives/exos-e-drives/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式サイト紹介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;シーゲ이트エンタープライズHDD概要&lt;/p&gt;
&lt;p&gt;シーゲ이트エンタープライズHDD概要&lt;/p&gt;
&lt;h4 id=&#34;メモリクロック&#34;&gt;メモリクロック
&lt;/h4&gt;&lt;p&gt;日常業務の観点からは、頻度はパフォーマンスに大きな影響を与えないでしょう。&lt;/p&gt;
&lt;p&gt;メモリタイミング(メモリアクセスタイミング) メモリ(放置されたメモリ)&lt;/p&gt;
&lt;p&gt;メモリタイミング（英語：Memory timingsまたはRAM timings）は、同期動的メモリアクセスストレージ（SDRAM）のパフォーマンスを記述する4つのパラメータ：CL、TRCD、TRP、TRASです。単位はクロックサイクルで、通常は7-8-8-24のようにハイフンで区切られた4つの数字で表記されます。第4パラメータ（RAS）は省略されることが多く、場合によっては第5パラメータであるコマンドレート（Command rate）が追加されます。これは通常2Tまたは1Tと表記され、2N、1Nとも書かれます。これらのパラメータは、ランダムアクセスメモリの速度に影響を与える潜伏時間（レイテンシ）を指定します。数値が小さいほど、一般的にパフォーマンスは向上します。システムパフォーマンスを決定する最終的な要素は、実際のレイテンシであり、通常ナノ秒で表されます。&lt;/p&gt;
&lt;p&gt;メモリタイミングを実際の遅延に変換する際、最も重要なことは、それがクロックサイクル単位で表されていることに注意することです。クロックサイクルの時間を把握していない場合、一連の数値が別の数値よりも高速であるかどうかを理解することはできません。&lt;/p&gt;
&lt;p&gt;例えば、DDR3-2000メモリのクロック周波数は1000MHzで、その周期は1nsです。この1nsの周期を基準にすると、CL=7の場合、絶対的な遅延は7nsとなります。一方、より高速なDDR3-2666（クロック1333MHz、サイクルごとに0.75ns）では、CL=9という大きな値を用いるかもしれませんが、それでも絶対的な遅延は6.75nsと短くなります。&lt;/p&gt;
&lt;p&gt;現代のDIMMには、シリアルプレゼンスディテクト（SPD）ROMチップが搭載されており、その中に自動構成を推奨するメモリタイミング情報が含まれています。PCのBIOSでは、ユーザーがタイミングを調整してパフォーマンスを向上させること（安定性が低下するリスクがある）、または特定の状況下で安定性を高めること（推奨タイミングを使用する場合など）が可能です。&lt;/p&gt;
&lt;p&gt;注意：メモリの帯域幅はメモリのスループットを測定するものですが、通常はレイテンシではなく転送速度によって制限されます。SDRAM の複数の内部バンクに交番してアクセスすることで、ピークレートで連続的なデータ転送が可能になります。帯域幅を増やすために、レイテンシを増加させる可能性があります。具体的には、新しい世代のDDRメモリは高い転送速度を備えていますが、絶対遅延は大きく変化しません。特に市場に出回った最初の新世代製品では、通常、前の世代よりも長い遅延になっています。&lt;/p&gt;
&lt;p&gt;メモリのレイテンシが増加しても、メモリ帯域幅を増やすことで、マルチプロセッサまたは複数の実行スレッドを持つコンピュータシステムのパフォーマンスを向上させることができます。より高い帯域幅は、専用ビデオメモリを持たない統合グラフィックスカードのパフォーマンスも向上させます。&lt;/p&gt;
&lt;p&gt;メモリタイミングパラメータの説明&lt;/p&gt;
&lt;h3 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;メモリタイミングパラメータの説明&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ウェブサイトの高速化とドメイン設定</title>
        <link>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</link>
        <pubDate>Sat, 20 Jun 2020 10:36:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</guid>
        <description>&lt;p&gt;国内アクセスがGitHub Pagesよりも遅いため、著者は個人ドメインを申請し、国内クラウドプロバイダーのCDNアクセラレーションサービスを購入しました。設定中に、wwwサブドメインにアクセスできない問題が発生しましたが、最終的にワイルドカードドメイン解析を削除し、セカンダリドメインを個別に設定することで解決しました。また、著者はCDNアクセラレーションの原理と設定経験、Nginxのリバースプロキシの試みと教訓についても共有しています。&lt;/p&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景
&lt;/h3&gt;&lt;p&gt;GitHub Pagesにサイトをホストしているため、周知の理由により、国内からのGitHub Pagesへのアクセスは少し遅いです。そこで、個人ドメインを申請し、国内クラウドプロバイダーのCDN加速サービスを購入しました。加速サービスを設定する際に、開発マシンにあるDocker、frp、k8sなどのサービスが思い浮かびました。これらのサービスにはそれぞれダッシュボードがあるので、無駄にしないという考えで、いくつかのリバースプロキシを設定し、すべてを二级ドメインに割り当てました。&lt;/p&gt;
&lt;p&gt;サブドメインを快適に使っていると突然、wwwサブドメインにアクセスできなくなりました。アリババクラウドでは、www.xiangtianlong.comとxiangtianlong.comの両方をDNSで同時に解析するように設定しており、CDN加速が有効になっていないときは両方のドメインとも正常に使用できていました。&lt;/p&gt;
&lt;p&gt;CDN加速設定時に、セカンダリドメインが多すぎるため汎用ドメインルールを有効にし、すべて開発マシンにルーティングした結果、wwwというセカンダリドメインもダウンしてしまいました。はい、勘違いではありません、wwwプレフィックスはセカンダリドメインです。実際のウェブサイトはGitHub Pagesにデプロイされており、開発マシンにはウェブサイトのキャッシュ情報が一切ありません。&lt;/p&gt;
&lt;p&gt;開発マシンにサイトをデプロイしないのは、静的ブログで、GitHubの提供するアクションと組み合わせることで、自動的に統合して公開できるからだ。最高だ。&lt;/p&gt;
&lt;h3 id=&#34;ドメイン&#34;&gt;ドメイン
&lt;/h3&gt;&lt;p&gt;非専門的なウェブ開発では、ドメインの理解はSEOやクロスドメインの問題には及びません。ブログサイトとして、ベアドメインを使うことでブログ主のサイトが際立ちやすくなります。これは私のように漢字のピンインをドメインにしているような者にとって、それに加え現在のモバイルアクセスが多いことを考えると、入力できる文字数を減らせるというメリットがあります。&lt;/p&gt;
&lt;p&gt;パソコンでは、ショートカットキーを使えばwwwとcomの入力を省略できます。&lt;/p&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN
&lt;/h3&gt;&lt;p&gt;アリババクラウドとテンセントクラウドの両方使ったことがあり、初心者でも使いやすいです。テンセントクラウドには関連する概念を個別に解説した動画もあります。CDNの加速原理は京東（ジードン）の倉庫と同じで、新商品を発売したら、事前に全国各地の倉庫に一斉配送し、配送リクエストが発生した際に、最寄りの倉庫から発送します。&lt;/p&gt;
&lt;p&gt;元のURL：ウェブサイトのリソースが最初に保存されていたアドレス&lt;/p&gt;
&lt;p&gt;キャッシュファイル設定、ブラウザのF12、管理コンソール、静的リソースと動的リソースの簡単な分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全件0日有効&lt;/li&gt;
&lt;li&gt;.php;.jsp;.asp;.aspx 0日有効期限&lt;/li&gt;
&lt;li&gt;.jpg;.png;.js;.css;.woff2 有効期限1日&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンセントクラウド設定ルール：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャッシュの有効期限ルールは最大で10条まで設定可能です。&lt;/li&gt;
&lt;li&gt;複数のキャッシュ失効ルールの優先順位は、下位ルールから適用されます。&lt;/li&gt;
&lt;li&gt;キャッシュの有効期限は最大365日まで設定可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛ましい告白&#34;&gt;痛ましい告白
&lt;/h3&gt;&lt;p&gt;以前使ったことがなかったのでNginxを理解しているつもりでしたが、ウェブサイトを検索すればリバースプロキシの設定がわかると思っていました。しかし、結果は混乱し、半日かけても302のリダイレクトを理解できませんでした。結局、何も成果が出ませんでした。そこで、思いつきでDNS解析からワイルドカードの汎用ドメイン解析を削除し、個々のセカンドレベルドメインを独立して設定しました。その時、突然、阿里云のDNS解析に「表示URLリダイレクト」というモードがあることに気づきました。試してみたところ、これがまさに私が求めていた302のリダイレクトでした。&lt;/p&gt;
&lt;p&gt;最初の二階建てドメインの設定は問題なくアクセスできたのに、2つ目の設定をしたら動かない。しばらく待ってみたら急に使えるようになったので、阿里云のDNS伝播が時々不安定になるようだ。&lt;/p&gt;
&lt;h3 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;なぜ最近、ウェブサイトのドメイン名に「www」という接頭辞が付いていないものが増えているのか？&lt;/li&gt;
&lt;li&gt;wwwとしないドメインに違いはありますか？&lt;/li&gt;
&lt;li&gt;Docker nginx リバースプロキシ設定&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ブログのIDE環境とつぶやき</title>
        <link>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;この記事では、Markdown の基本的な概念と様々なソフトウェアでの応用について説明し、VSCode を IDE として推奨しています。また、推奨されるプラグインもリストアップされています。著者は Hexo から Hugo への移行経験を共有し、Hugo の柔軟性とカスタマイズ能力を強調しています。最後に、新しい技術を始めるためのヒントと、Hugo テーマのスタイルが更新されない問題を解決する小技を提供しています。&lt;/p&gt;
&lt;h2 id=&#34;まえがき&#34;&gt;まえがき
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;軽量なマークアップ言語で、人々が読みやすく書きやすいプレーンテキスト形式でドキュメントを作成できるようにするものです。&lt;/p&gt;
&lt;p&gt;詳細なMarkdownの文法については、この文章では余分な説明は省きます。電子書籍を推薦します。&lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;こちらをクリック&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;市場にはすでに多くのソフトウェアがmdを記述方法としてサポートしています。csdnのブログシステムはmd文法に対応したオンラインエディタをリリースし、初めて使用する際にはmd文法の紹介記事がデフォルトで用意されており、筆者はなかなか良いと感じました。印象ノートは2018年にmdノートへの対応を追加し、クイックバーには様々なmdマークアップのオプションがあり、普通の文章を編集するのとほぼ同じように使え、全体的な操作の流れは初心者にも優しいです。&lt;/p&gt;
&lt;h3 id=&#34;ide推奨&#34;&gt;IDE推奨
&lt;/h3&gt;&lt;p&gt;この記事を書いている時点ですでに2020年ですが、VSCodeなら当然聞いたことがあるでしょう。結局のところ、Git Pageを使ってブログシステムを構築しようと思えるのは、業界関係者だからです。昔はSublimeやAtomも良い選択肢でしたが、2年のオープンソースコミュニティの推進により、VSCodeは急速に発展し、初心者にとって最初の選択肢となりつつあります。&lt;/p&gt;
&lt;p&gt;マイクロソフトという巨大企業とオープンソースコミュニティの関係が、対立状態から順調に蜜月期へと移行した：オープンソースを積極的に受け入れるようになった。筆者が所属する会社もここ2年間でJavaエコシステムを積極的に導入しており、言い換えれば、現在のJavaのエコシステムは国内でのビジネス開発において非常に魅力的だ。&lt;/p&gt;
&lt;h3 id=&#34;vs-code-拡張機能の推奨&#34;&gt;VS Code 拡張機能の推奨
&lt;/h3&gt;&lt;p&gt;プラグインリスト&lt;/p&gt;
&lt;p&gt;プラグインにはそれぞれReadmeが付属しており、基本的な使い方や主要な機能について説明されています。一部のプラグイン作成者は、動的な効果を解説する画像も提供しています。&lt;/p&gt;
&lt;p&gt;貼り付けた画像、Hugoの画像プラグインと組み合わせることで、非常に手軽に画像を挿入できます。&lt;/p&gt;
&lt;p&gt;ショートカットキーを覚えていないので、VSCodeのショートカット管理メニューを開き、「md」を検索して何度か確認する。プラグインの使い方説明書をもう一度見る。&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;hugo
&lt;/h2&gt;&lt;p&gt;私はHexoからHugoに乗り換えたのですが、いじくり回すのが私の性格なので、結局は我慢できずに黙々と記事を書こうとしました。&lt;/p&gt;
&lt;p&gt;ヒューゴは、画像とmdドキュメントを個別のフォルダに配置することをサポートしています。
学術的なテーマは、デザインにおいて様々な種類の記事スタイルをサポートしています。
様々な便利なカスタマイズ拡張機能&lt;/p&gt;
&lt;h2 id=&#34;academic&#34;&gt;academic
&lt;/h2&gt;&lt;p&gt;公式サイトのデフォルトは&lt;code&gt;exampleSite&lt;/code&gt;、メニューの導入は&lt;code&gt;#コンポーネント&lt;/code&gt;方式を採用し、&lt;code&gt;url&lt;/code&gt;の使用を推奨します。&lt;/p&gt;
&lt;p&gt;URLのパターンで、ナビゲーションバーをクリックすれば単一ページへのジャンプが可能で、トップページでのスクロールではない。これは完全に個人的な好みによるものだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スタイル：エッセイ、スピーチ、電子書籍&lt;/li&gt;
&lt;li&gt;柔軟性：全体スタイルをカスタマイズ、CSSスタイルをカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このテーマは中国語のサポートがまだ完全ではありません。主に視覚的な面で、フォントサイズが中国語の読書習慣にあまり合っていないことと、Hexoの開発者はほとんど中国人なので、その点でHugoよりも優れています。&lt;/p&gt;
&lt;p&gt;しかし、自分でやって服を整え、ブラウザで要素を検証する。要素の位置を特定したら、変更する必要があるCSSスタイルの名前を知りたいので、サイドバーで「Insert Style Rule Below」をクリックすると、ネストされた複数のCSSでも簡単にノード名を取得できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムCSSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/#add-scripts-js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;カスタムJSの導入&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テーマに組み込まれた文法ハイライト設定、&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;公式リンク&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結び&#34;&gt;結び
&lt;/h2&gt;&lt;p&gt;子供はやたらと文句を言い出す、どうして最初から最後まで曖昧なことばかり言って、具体的なことは何も言わないんだ。&lt;/p&gt;
&lt;p&gt;これがあれば、十分使えるはずです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式マニュアル&lt;/li&gt;
&lt;li&gt;プラグインの説明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい技術を早く習得するには、まず公式サイトのドキュメントを読むことをお勧めします。&lt;strong&gt;大まかに目を通すだけで&lt;/strong&gt;、全てを一度で理解しようとしなくても構いません。少なくとも概要を把握することが重要です。検索エンジンの結果は、最新バージョンと一致していない場合があり、誤解を招く可能性があります。新刊を読む場合も同様です。まず目次を見て、著者が何を説明しようとしているのかを理解しましょう。時には序章から読むのが良いこともあります。特に海外の著作を翻訳したものは、翻訳者の序文が書籍の内容や核心部分を網羅していることがあります。&lt;/p&gt;
&lt;h2 id=&#34;イースターエッグ&#34;&gt;イースターエッグ
&lt;/h2&gt;&lt;p&gt;Hugo Academicの組み込みスタイルシートを変更し、サイトに公開しても、スタイルが変化しません。賢い人はすでに気づいているでしょう。ローカルブラウザのキャッシュをクリアすれば解決できます。そして、私が機智を発揮して、F12の開発者モードを開き、&lt;code&gt;network&lt;/code&gt;に切り替えて、&lt;code&gt;disable cache&lt;/code&gt;にチェックを入れて、リフレッシュ！これで完了です！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>自動統合システム切り替え</title>
        <link>https://ttf248.life/ja/p/auto-integration-system-switch/</link>
        <pubDate>Sun, 29 Mar 2020 02:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/auto-integration-system-switch/</guid>
        <description>&lt;p&gt;GitHub Actionsを使用して、HugoブログをGitHub PagesとGiteeに自動デプロイします。&lt;/p&gt;
&lt;h4 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h4&gt;&lt;p&gt;昨日ブログを更新した際、Travisのサービスが利用できないことに気づきました。Travisのウェブページを確認すると、進捗状況がソースコードの取得で止まっていることがわかり、GitHubが以前に発表したActionsサービスのことを思い出しました。&lt;/p&gt;
&lt;p&gt;その頃はかなり忙しく、アクションを使うためには申請が必要になるため、今は正式にオンラインになりました。週末に暇な時に、新しいおもちゃを試してみるか？&lt;/p&gt;
&lt;p&gt;公式資料は各自ウェブサイトでご確認ください。本文ではこれ以上の転載はいたしません。以前Kubernetesを使ったことがある人ならわかると思いますが、actionのYAMLファイルの設定とKubernetesがよく似ています。&lt;/p&gt;
&lt;p&gt;入門チュートリアル、あるいは中国語の紹介資料についてですが、&lt;strong&gt;阮一峰のブログ&lt;/strong&gt;を検索することをお勧めします。そこには2つの記事があり、1つ目は基本的な文法解説で、2つ目は実際の事例です。&lt;/p&gt;
&lt;h4 id=&#34;正文&#34;&gt;正文
&lt;/h4&gt;&lt;p&gt;必要な知識点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github secrets&lt;/li&gt;
&lt;li&gt;アクション文法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既存のコンポーネントでコアとなるジョブを完了させ、コマンドを使用して国内のGiteeにプッシュする。このコマンド部分はかなり荒っぽく、強制プッシュであり、Travisを使用していた際のロジックを引き継いでいる。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: github pages and gitee pages

on:
  push:
    branches:
      - hugo

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;
          extended: true

      - name: Build Github and Gitee ## 单个step只能写一个run命令
        run: hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;gitee_public&amp;quot; &amp;amp;&amp;amp; ls

      - name: Deploy Github
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.BLOG_TOKEN }}
          publish_dir: ./github_public
          publish_branch: master
          cname: xiangtianlong.com

      - name: Deploy Gitee
        run: cd ./gitee_public &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git config user.name &amp;quot;TianlongXiang&amp;quot; &amp;amp;&amp;amp; git config user.email &amp;quot;tianlongxiang51@gmail.com&amp;quot; &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update TianlongXiang&#39;s Blog&amp;quot; &amp;amp;&amp;amp; git push --force &amp;quot;https://xiangtianlong:${{ secrets.GITEE_PASSWORD }}@gitee.com/xiangtianlong/xiangtianlong.git&amp;quot; master:master   
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;あとがき&#34;&gt;あとがき
&lt;/h4&gt;&lt;p&gt;公式ストアで提供されているアクションを見ると、現時点でサポートされている機能は豊富です。Dockerイメージを構築すれば、Docker Hubが提供するサービスに依存しなくなることもできます。&lt;/p&gt;
&lt;p&gt;Hugoのissueを確認したところ、GitHub Actionsを使ってGit Pagesを自動デプロイする場合、最終的に公開されるウェブページはmasterブランチに必要です。もし他のブランチにデプロイすると、設定画面でGitHubがウェブページの構文エラーを示唆します。&lt;/p&gt;
&lt;p&gt;実際は、hugoのソースファイルがmasterブランチに置かれていたため、GitHubがjellyブログのソースコードとしてそれを検出し、チェックやビルドができなかったためにエラーが発生したものです。&lt;/p&gt;
&lt;p&gt;解決策も簡単で、Hugoのソースファイルを別のブランチに置き、静的ファイルはマスターブランチで公開する。&lt;/p&gt;</description>
        </item>
        <item>
        <title>未来の素晴らしい中国には、良い老人たちがいるだろう。</title>
        <link>https://ttf248.life/ja/p/future-good-china-with-elderly/</link>
        <pubDate>Sat, 15 Feb 2020 11:28:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/future-good-china-with-elderly/</guid>
        <description>&lt;p&gt;二十年後、愛らしい老人になっていて、愛らしい老婦人と一緒にいたい。大金持ちになることは求めないけれど、健康で、どこへでも行けるように。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;ユークゥーの検索で大丈夫です。以降、リンクは提供しません。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;十年後、愛らしい老人になるのが私です。愛らしい老人になるために努力します。未来の中国は、きっと良い老人たちで満たされるでしょう。たとえ十年後に60歳になっても、この世界の第三国の中で一番若い存在です。&lt;/p&gt;
&lt;p&gt;率直に言うと、皆さんが50歳の中国人の男がこんな体型になるなんて結構良いと思っているようだけど、この体型の裏には「規律を守れば守るほど自由になる！」という信念があるんだ。雨が止みそうになったら走りたいと思ったし、明日の午後はサッカーをする予定だ。50歳になっても、まだまだ大舞台でやれる。冗談じゃないよ、むしろよくプロと一緒にプレーするんだ。でも、その裏には何がある？規律があるんだ。残りの時間は走り続ける。そして、走ることは誰にとっても退屈なことかもしれない。でも「規律を守れば守るほど自由になる」。だから僕は規律を守り、自由に走ることができる。音楽は聴かない。自分の呼吸が、僕にとって一番美しい音楽だからだ。&lt;/p&gt;
&lt;p&gt;他に、私は基本的にトレッドミルは走らないのですが、北京の空気がそんなにひどいのに、週5日は走ります。2日は霞対策として確保しています。他の人と違うところを冗談で言うと、多分、私は中断したことがないのでしょう。毎月、日記というか、私の経験の中で1日走るごとに1日マークします。毎月18日以上は必ず走り、走っている間はあっという間に過ぎていきます。走るときはメガネをしていないのですが、もっと重要なのは、毎週サッカーもやっていることです。私の研究室の最後の授業は、我が家で開くことにしました。テーマは「楽しさ」です。楽しさはとても重要だと思います。私は、何の楽しみや趣味もない人と付き合うことはありません。&lt;/p&gt;
&lt;p&gt;敬遠するのが妥当だ、こういう人は恐ろしいほどで、楽しさがない。あなたが何を楽しんでいるのか、私も特に何もありません。どんな仕事が好きですか？今年初めの頃、私の学生は中国新聞周刊に分かれていました。私たちは「致」という特集があり、10年後、私の学生が毎年卒業する時、最後の課題として、彼らに10年後の未来を書いてもらうようにしていました。私はそれを残しておき、10年後、彼らを順次展開し、私も50歳から60歳の手紙を書きました。60歳とは、かつて私が考えたこともなかった遠い場所、地図の向こうでしたが、気がつけば私の次の目的地です。20歳から30歳への学生たちへの手紙は、春が夏に宛てるラブレターですが、50歳から60歳への私の手紙は、夏の終わりが秋にささやく喃喃自語でした。今、私は10年後の未来に向けて、世界全体から自分のベッド、食事、家族のそばへと書いているのです。これは当然のことです。&lt;/p&gt;
&lt;p&gt;しかし、60歳になってどのような人間になるか、私のテーマは明確です。心温まる序文に書かれているように、この文章は非常に長いです。私は10年後には愛すべき老人になろうと努力し、中国が愛されるようになるためには、将来的に多くの市民として成熟した若者が現れるだけでなく、ルールを理解し、元気な若者が必要なのです。良い未来の中国とは、良い老人たちに支えられた中国です。現在、中国の60歳以上の人口はすでに2億3千万人を超えており、10年後には3億人を超えるでしょう。つまり、60歳以上の人口だけで見れば、中国は単独国家として世界5位以内に入る可能性があり、もしかすると世界3位になるかもしれません。考えてみてください、それはどれほど恐ろしいことでしょうか？&lt;/p&gt;
&lt;p&gt;私はそうは思いません。皆さんが今日ネットで見た表をご覧になったでしょうか。中国の各省市直轄市の平均寿命ですが、上海と北京では80歳を超えており、男女合わせた平均寿命です。平均寿命ですから、男性が女性からかなり有利な立場にあることは確かでしょう。つまり、10年後私が60歳になっても、この世界の第三国の中では最も若い一人と言えるかもしれません。将来的に考えて、女性が55歳で退職し、平均年齢80歳まで25年間過ごすのに対し、男性は60歳で退職し、平均年齢80歳まで20年間です！何かしないと、ただ踊るだけで終わってしまいます。それに、今日踊っているお姉さん方や、お兄様方は、時代がもたらした文化習慣と娯楽方法なのです。&lt;/p&gt;
&lt;p&gt;また20年後、次の世代もまだプラザダンスをする人はいるかもしれないが、大幅に減るだろう。なぜなら、次の世代は集団活動の積極的な参加者ではなくなるからだ。高齢者が団体旅行を好むように、今の若者は個人旅行やバックパッカー旅行を増やす傾向にある。将来もプラザダンスは存在するだろうが、その範囲は確実に狭まり、良いとも悪いとも言えない。ただ時代が入れ替わり、常に変化しているだけだ。私が60歳の時、私はチームの中で最も若いメンバーの一人だった。これから私はどういう人間になるべきか？中国画では60歳は耳が良いと言われるが、私はその時はきっと聞きたくないことを聞くし、喜んでいても不機嫌になることもあるだろう。何よりも重要なのは、若者たちのために何をするのかだ！&lt;/p&gt;
&lt;p&gt;良いことをするために何をすべきだろうか？怠らず、安易に妥協せず、反対すべきものを反対する。若い者が彼の利益を傷つける可能性があるとき、あなたは彼らの前に立ちふまれることができるだろうか？私は今よく鏡を見ている。私の良い友人が亡くなった。陶偉がよく集まってきて、うちで集まり、ある時真実の話をしてくれたことがある。私たちは皆、痛んだ。陳の世代の人々はすべてを家に蓄えていた。箱を開けると30以上のものをベッドの下に詰め込むのはなぜだろう？この服は500以上買ったのに、供え物として、毎日香を焚くのだ。だから、私たちの世代は親と知恵比べをするのが当たり前になった。700以上買ってきて、いくらになるのだろうか？&lt;/p&gt;
&lt;p&gt;220。でも、物事が起こりやすい。陶偉は一度、400元以上出して父親にTシャツを買ってあげた。そのTシャツは本当に良いね、いくらだった？99円のあの服を着たら、次の日大変なことになった。夜帰ってきた時、陶偉に400元を払い戻して、同じものを4枚買ってきてほしいと言われた。今日着て出かけたところ、李大爷や張さんたちみんなが褒めてくれた。後で言われたのは、このような嘘はリスクが大きいということだ。将来、こういうことはしないように、老人になってください。具体的な誰かが病院の整形外科に入院しているという話ですが、高齢者が骨折した原因を調べると、よく見ると地元の露店で購入した靴であることがわかった。もちろんこれは物質的な面の話に過ぎない。年老いても精神生活は大切だ、好奇心を持ち続け、若い世代のために風雨を挡(かく)してあげたい。毎日元気に過ごしたい。&lt;/p&gt;
&lt;p&gt;自分の60歳になる時が来るのを、好奇心と期待感で待ち望んでいます。それは素晴らしい時代の始まりだと感じています。&lt;/p&gt;
&lt;p&gt;皆様、ありがとうございます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>私の18歳は、あなた方と少し違うかもしれません。</title>
        <link>https://ttf248.life/ja/p/my-18th-might-be-different/</link>
        <pubDate>Sat, 15 Feb 2020 11:19:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/my-18th-might-be-different/</guid>
        <description>&lt;p&gt;よくある言葉&lt;strong&gt;情報の断片化&lt;/strong&gt;ですが、高校を卒業して以来、小説を読む時間も手放し、長い間、真剣に静かに本を読んでいません。時々振り返ってみると、こんなにも長い間働いているのに、毎年何をしたのか覚えていないこともあります。多くの場合、下半年になると、上半期のことをすっかり忘れてしまっています。ブログを書くのは良い習慣です。たとえ私が書いた多くのものが表舞台に出ないとしても、問題ありません。元々、自分自身のために書いているのですから。&lt;/p&gt;
&lt;p&gt;最も忠実な読者は私自身です。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;ユークゥーの検索で大丈夫です。以降、リンクは提供しません。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;誰もが自分の18歳を待ち望み、問いかける視線のように見つめる。時折、皆は自分の18歳に問いかけてしまうだろう。「あなたは、かつて自分が生きたいと思っていた姿だったのか？」 私は恐れている。今の時代、多くの人がSNSには無数の「友達」がいるのに、心を通わせる相手がいない。毎日チャットしているけれど、誰とも本音を語らない。知識は無限に手に入るのに、知恵とは程遠い。皆、自分の18歳を振り返って自問自答すべきだ。「人を騙すのは簡単だが、自分自身を欺くのは難しい！」&lt;/p&gt;
&lt;p&gt;あなたが自分の18歳を見る時、それは期待と問いかけの眼差しのように感じられます。あなたは他人を騙すことができるかもしれませんが、自分の18歳を騙すことはできません。今のあなたはその18歳の頃に望んでいた姿ですか？まあいいでしょう。今では物質や名声など、私が18歳の時に考えていたよりもずっと多くのものが存在し、それらを手に入れた一方で、常に道を進んでいます。18歳の時、私は放送学院でジャーナリズムを専攻していました。最高の記者になることを願っていました。今日でもその道を歩んでいるのです。だからこそ、多くの人が白老師に「なぜあなたはCCTVにいるのですか？最高のジャーナリストになりたいからでしょう」と言います。ジャーナリズムはまだ続いているのです。それが私の18歳の眼差しです。ですから、時々自分の18歳を振り返り、自分が当初望んでいたように生きているのか自問自答する必要があると思います。&lt;/p&gt;
&lt;p&gt;これは本当に人を騙すことはできない。これが私が18歳の時の姿です。気がつけば32年が過ぎてしまいました。北京で大学に通う人は誰でもこのような写真を持っているはずです。あの時代には、天安門広場ではシワシワのスーツを着て、校章を胸に付けていました。大学生は少なかったため、校章を付けないことは特に誇らしげでした。当時の髪は長かったのですが、それでも18歳の時の姿が好きです。何年も経ち、ふと気づくと、私は18歳だった時に直面したこと々に感謝しています。なぜなら、それは静かに私を形作ってきたからです。1986年の5月8日、私は王府井書店で「朦胧詩選」を買いました。同じ年、工体では崔健の「一无所有」を聞きました。そして今日、ふと気づくと私の文章スタイルは最大の影響を受けていることに気づきました。性格も同様です。朦胧詩、ロック音楽、そして古龍の武侠小説の影響です。&lt;/p&gt;
&lt;p&gt;18歳の時、あなたは何に遭遇したのか？そして、何を持って旅に出るのか。今日の18歳の若者たちが何に遭遇しているのか、特に知りたい。まるで刀や斧で彫刻するように、形作られているように見える。しかし、彼はどんな道具を使ったのだろうか？どんな風に磨き上げられたのだろうか。今の人は皆、無数のSNSの友達がいるのに、本当の友達がいない。毎日チャットはするけれど、心を通わせる相手はいない。知識は無限に手に入るのに、知恵とは程遠い。何を知っていても、何も知らないような気がする。一見すると、誰もが個性を主張しているように見える。しかし、傍観者である私から見ると、今の若者たちは非常に似た者同士だ。どうすればいいのだろうか？18歳の君は、彼に何を遭遇させればいいのか？私は1986年が大好きだ。なぜなら、1986年は1966年を解決する最良の方法だからだ。&lt;/p&gt;
&lt;p&gt;1966年の文化大革命は、76年の四人暴動の打倒によって終結したが、偶然性があった。啓蒙と人性の目覚め、そして一人ひとりの成長があって初めて、本当に心配している根本的な部分を取り除くことが可能になる。まだ啓蒙を経験する必要があるし、人性に対する十分な理解を深める必要がある。中国社会がどれほど大きな経済的進歩や変化を蓄積しても、真に人性を理解し、人性の悪面を抑制し、善面を活性化しなければ、依然として多くの心配事があるだろう。私の18歳もまたこの時代の18歳であり、遠回りしすぎた結果、出発当初の目的を忘れてしまい、今は「初心を忘れるな」という4文字に凝縮されている。&lt;/p&gt;
&lt;p&gt;だから、どこまで行っても、誰でも自分の18歳の頃を振り返ってみるべきだと思うし、18歳の写真を持っているのは良いことだ。時々取り出して自分に問いかけるんだ。他人の言うことはどうでもいい。人を騙すなんて簡単だよ。しかし、自分自身を騙すのは難しい。さっき言ったように、私が18歳の時に20歳の人に言いたいのは、自分の18歳を常に自分を見つめる目にしてほしいということだ。あと、20代にも言ったけど、いろいろな扉を開いて試してみるべきだ。何が一番自分に合っているか分からないからね。現在の中国では奇妙なことに、20代の老人や70代の若者によく会うんだ。&lt;/p&gt;
&lt;p&gt;皆様、ありがとうございます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>この社会にどんなジャーナリストが必要だろうか？</title>
        <link>https://ttf248.life/ja/p/what-kind-of-journalists-does-society-need/</link>
        <pubDate>Sat, 15 Feb 2020 11:08:38 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/what-kind-of-journalists-does-society-need/</guid>
        <description>&lt;p&gt;著者はジャーナリズムに対する見解を語り、記者が社会良心、知識の蓄積、そして長距離走のような精神を持つべきだと強調しています。また、50歳を迎えた際の自身の気づきも共有しており、好奇心の維持、物質と精神のバランス、そして未来への考察について述べています。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;ユークゥーの検索で大丈夫です。以降、リンクは提供しません。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;最高のジャーナリストはまず社会良心を持ち、次に知識を蓄え、そして持続力があるべきだ。100メートル走っただけで満足してはいけない。私はこの三者が組み合わさることで、人々が期待しているのはワクチンの安全性に関する問題を完全に解決することであり、それはまるで昔の粉ミルク事件のように、問題が発生し、解決し、完全に解決するという論理的な循環の中で進むことだ。そうでなければ、ジャーナリストは何のためにいるのか？&lt;/p&gt;
&lt;p&gt;最高のジャーナリストはまず社会良心を持ち、次に知識を蓄え、そして3つ目は、100メートル走で満足して止まるのではなく、走り続けることだ。私はこの三者が合わさって今年50歳になった。これで私が新聞業界に向いていることがわかるだろう。私は中国の改革40年と密接に結びついており、30歳の誕生日に松花江の岸に立ち、40歳の時にはオリンピックの生中継に入り、そして生中継から出てきた。今年50歳になり、全国が改革開放40周年を記念している。確かに対応がある。大時代40歳、中国の改革40歳は、無惑か困惑か？&lt;/p&gt;
&lt;p&gt;40年の歳月を費やした中国は、物質的には皆に十分なものを提供し、国にも十分な貢献をしてきたように感じるが、不安と困惑は増え、減ることはなかった。私たちは豊かになれば全てうまくいくと思っていたのだが、実際には物質的な貧困からの脱却は容易だったものの、精神的に豊かになり、真の大国となるのは難しいことが分かった。アメリカですら高科技を攻撃してくるのだから、我々はおそらく農産物を武器にするしかない。この世界では「2番目」になることは難しいという法則が存在する。アメリカで何個の「2番目」が改造されただろうか？したがって、私たちは長い年月を経て、この「2番目」ではなく、自分自身を超えなければならない。私は全てを手に入れることはできないのだから。&lt;/p&gt;
&lt;p&gt;テレビを始めるのが25歳だったことは幸運だったと思う。最初は人物インタビューからで、数百から数千という、様々な光に包まれた人々を取材した。その時、若い私はこの光がきっと彼女たちを幸せにしてくれると思っていた。しかし、近づいてみると全く違った。光と彼らの幸福は必ずしも比例するわけではなく、むしろ反比例することさえあった。最近、郭沫若の最後の29年間を読み終えたばかりだ。彼は副首相や政治協商委員会副主席、副委員長など、要職に就いていたにも関わらず、ほとんど批判を受けたことがない。しかし、彼の息子二人、一人は自殺し、もう一人は屋上から突き落とされたかのように亡くなった。彼が幸せだったのだろうか？&lt;/p&gt;
&lt;p&gt;幸福をどう測るのか？自分の六七十歳で、数年の間に息子二人を相次いで亡くした副総理ですら幸せになれる。多くの名画書が人を幸せにするし、自分を守ってきた年月があれば幸せになれる。何が必要なんだろうか？だから私は人の本質を見るのに、読書こそ最高の鏡だと思う。少し強調するなら、今の多くの人が抱える不安は、考えすぎることと、あまりにも少ない読書から来ていると思う。これは楊绛さんが若い人に返信した言葉で、本を読まずにファストフードばかりを求めて、スマホで大衆薬を見つけようとしているようなものだ。どうしてそんなことが可能なのか？私は一冊一冊の本との笨拙な取り組みの中で賢くなったし、減法は、多くの本を読む中で行われる減法なんだ。&lt;/p&gt;
&lt;p&gt;だから、私は全ての人に頼ることはできないけれど、より多くの中国人たちが読書を通して自分を向上させられるようにしたい。それが一番大切なことだ。誰もが地面に座って空を見上げながら、物事をすべて理解できるわけではない。私にはできない。しかし、鏡を見ることはできる。数年前、BBCのニュースキャスターが北京に来たときのことだ。彼はBBCで最高と言われるキャスターだったらしい。すると、誰かが彼と中国のニュースキャスターとの対話をホテル国際で企画した。その男は会話の中で私にこう尋ねた。「BBCはCCTVから何を学ぶべきだと思いますか？」私は冗談めかして答えた。「もちろん、まず中国語を学ぶべきです。」&lt;/p&gt;
&lt;p&gt;これから冗談交じりで言うと、BBCがCCTVから学ぶべきは、この世界への好奇心だと言ったんです。ここ数年、私たちは急速に世界へ進出しました。様々な拠点ができていて、すでに70以上の記者ステーションがあります。学生たちは、海外の新しいものを見るたびにとても好奇心を抱き、大きな好奇心を持って世界を観察しています。しかしBBCはイギリス自体を世界として捉えすぎていて、もはや好奇心が薄れているようです。すると、隣の人がテーブルを叩いて、「君の言う通りだ。私たちに必要なのはまさにこれだ」と言いました。2007年に日本で取材した作家が私にこう言ったことがあります。「この国には希望がない以外は何もない」と。後になって理解しましたが、その言葉はとても深い意味を持っていました。別の角度から見ると、10年ほど前は、中国には希望がないかのように感じられましたが、希望だけはありました。誰もが将来への期待を感じていました。&lt;/p&gt;
&lt;p&gt;しかし、いつか私たちも希望以外に何もない豊かな国になってしまうのではないかと心配です。率直に言って、中国が一度負の状況になり、何でも手に入るようになったときに初めて自分が本当に貧しいことに気づくことを恐れています。50歳になる頃には、物質的には満たされるものの、精神的に非常に貧しい人間にならないように恐れています。現実生活では、高学歴なのに教養のない人がたくさんいますし、預金通帳にたくさんの数字があるのに貧しいと感じている人もたくさんいます。これが今の時代の問題です。本当に貧しいことは怖いことではありません。なぜなら、前には目標があり、希望があるからです。それが私が道徳赤字や人性の欠如について言っている理由です。だから、科学者が多くのものを発明したのは、最初から偉大な使命などを背負っていたのではなく、好奇心によるものだと思います。&lt;/p&gt;
&lt;p&gt;私が彼をどうやって作れるのか興味があるのだろうか？それで私はいつも50歳くらいから自分を励ましていた、もっと知りたくなった。だからとても嬉しい。今困っていることの一つは、粘り強くあることだ。さっきお話している時にも言っていたけど、あなたはまだ粘っていますね。私は「やめましょう」と言いたい。一度粘り始めたら死に近づくようなものなんです。昔は私たちは「粘りこそが勝利だ」と言っていました。中国サッカーでは、黒い3分間を粘れば、歯を食いしばって、楽しさもなくなり、方法もなくなって、ただ粘るだけです。粘ることも時には重要ですが、かなりの時においてはこの言葉には裏面があります。私は何かをしている時に、それを粘り強く続けることが怖いのです。例えば、皆さんとお話している時、私は残りを終わらせるために粘ります。実際、今時間は過ぎてしまっていますが、どうなるのか興味があります。皆さんの交流をどんな風に結びつけることができるのだろうか？&lt;/p&gt;
&lt;p&gt;自分自身に小さなキーワードを与え、皆さんと交流しながら話すこと。50歳になっても好奇心を保っていられれば大丈夫です。私は面白いものが大好きですが、必ずしも今の流行りのものだけではありません。今日の流行は一瞬で変わるかもしれません。毎年流行語がありますが、覚えていますか？今日のインターネットのメディアが10年後には伝統的なメディアを凌駕するでしょうか？面白いものは常に面白い内面を持っています。皆さんの好みを尊重します。きっと理由があるでしょう。しかし長期的には、結局中国人が一番好きなのは麻雀です。ファストフードが好きになる時、大料理を提供するレストランは自然と衰退していくでしょう。&lt;/p&gt;
&lt;p&gt;たくさんのものがただ感傷を抱いて過ぎ去るだけではない。あなたは毎日、スマホの断片的な読書にどれだけの時間を費やしているのか？少し長めの文章はどれくらい読むのか？しかしこれもまたプロセスだ。スマホが私たちの手錠になりつつある。だから短いものをたくさん見ていると、徐々に近視になるように感じるけれど、これもまたプロセスだ。私はコンテンツが王であることについては心配したことがない。あなたはいつか戻ってくるだろう。毎日娯楽に溺れ続け、自分の40歳まで。まるで10代の子供がコーラを飲むのを私が目撃するようなものだ。彼に少し飲まないように言っても、彼は必ず飲むだろう。しかし一方で私は楽観的だ。40歳になったときには、彼は必ずお茶の世界に戻ってくるだろう。それが中国人の人生なのだ。&lt;/p&gt;
&lt;p&gt;それは普通のことですが、今後の変化はもっと早く進むことを願っています。今のところ調査報道をする人が少ないので、感嘆していますね。&lt;/p&gt;
&lt;p&gt;皆様、ありがとうございます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>20年後の中国サッカーはどうなるだろうか？</title>
        <link>https://ttf248.life/ja/p/chinese-football-in-20-years/</link>
        <pubDate>Sat, 15 Feb 2020 10:59:32 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chinese-football-in-20-years/</guid>
        <description>&lt;p&gt;付け加えた読書感想文はほとんど2021年に書き留めたもので、白岩松先生の講演稿を文字に起こした時は、まだパンデミックが始まったばかりでした。二十年後というよりも、一年後、二年後でも、世界の変わり方はいつも人々の予想を超えています。現在、国内のパンデミックは終息に向かいつつありますが、海外では依然として騒ぎっています。サッカーに関しては、数年間で国足は良い成績を残し、監督も攻撃的な戦術を積極的に採用しています。昔、おじいちゃんと一緒に見ていた頃に比べて、少し面白くなりました。国家代表の試合を見て、おじいさんがチャンネルを変えようとするのは一体どんな体験なのでしょうか？&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;ユークゥーの検索で大丈夫です。以降、リンクは提供しません。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;中国サッカーにまだ興味がありますか？とても興味があります。ここまで駄目になるなんて信じられない。中国サッカーがうまくいかない理由はたくさんあるのですが、そのうちの1つは、誰も自分の手元でボールを落とすことを恐れて、他の人にパスしないことなんです。自分はいいのですが、そういうやり方はありません。&lt;/p&gt;
&lt;p&gt;もちろんこれはほんの一つの原因に過ぎません。20年間のサッカーについて話すと、20年後には中国のサッカーがとても遠いように感じられます。第1次拡大で48チームになりました。中国は行くかもしれませんが、行かない可能性もあります。国家代表として最高の年齢は26～30歳です。つまり、今日から6～10歳の子供たち、20年後にはきっと大丈夫でしょう。私が今日から6～10歳の子供たちのことを話すと、あなたはすぐに表情を曇らせます。ですから、因果応報です。私たちは今何を作っているのでしょうか？私たちは今日、国家代表がリーグ戦を蹴る大豆を作るのを逃げかけました。何ができるでしょうか？この動きを実行した人は、解雇の準備をする必要があります。これは法則に違反しているので、あまり考えませんでした。&lt;/p&gt;
&lt;p&gt;しかし、本当に今日6～10歳の子供たちのことを考えてみてください。彼らはサッカーを蹴っていますか？ 20年後の中国サッカーがどうなるか、あなたにもわかるでしょう？&lt;/p&gt;</description>
        </item>
        <item>
        <title>道徳的赤字、人性の欠如</title>
        <link>https://ttf248.life/ja/p/moral-deficit-humanity-loss/</link>
        <pubDate>Sat, 15 Feb 2020 01:20:34 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/moral-deficit-humanity-loss/</guid>
        <description>&lt;p&gt;人に何かをするとき、まず大切なのは良心の呵無であり、そうすれば安心して眠れるようになる。些細な病気であっても、大原則の問題においては、間違った判断をしてはならない。本当に間違いを犯してしまった場合は、できる限り挽回に努め、隠したりごまかしたりするのではなく、自分が忘れてしまうことを期待してはいけない。人は善忘れであり、記憶力も高い種族だ。心が安らぎこそが帰る場所であり、自分自身への問いに答えられるように生きることができれば、少し楽になれるだろう。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;動画のオリジナルリンクはこちらをクリックしてください。&lt;a class=&#34;link&#34; href=&#34;https://v.youku.com/v_show/id_XNDI5MzA4NjQ4NA==.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://v.youku.com/v_show/id_XNDI5MzA4NjQ4NA==.html&lt;/a&gt; 。著作権侵害がある場合は、ご連絡いただければ削除いたします。この文は文字稿の翻訳のみです。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;私は八文字で言えば、今の私たちには道徳的な赤字があり、人間性が損なわれていると感じています。時代は常に問題が発生し、それを解決する論理的な循環の中で進んでおり、あなたはそれの再編を待つ必要があります。中国のような国にとって、多くのことは緩やかな再編のプロセスであり、変化や再編に悲観的になる必要はありません。&lt;/p&gt;
&lt;p&gt;ここ数日、中国は2つの台風と戦っています。1つは目に見えない台風で、もう1つは具体的な台風です。目に見えない台風とはワクチンであり、それは私たちの心の安全という堤防を揺さぶります。そして、上海に上陸して北京や天津を巻き込み、3つの直轄市が共同で直面する台風は、数十年の間にほとんど経験されていません。これはさておき、次にあなたが考えるべきことは、あなた自身の幸福についてです。あなたは大きく変わりましたし、多くの答えを持っています。もし周囲の環境が変わらなければ、あなたは幸せですか？私は8文字を使って表現しましたが、今の私たちは道徳赤字であり、人道的損失です。これが現在最大の赤字と損失なのです。&lt;/p&gt;
&lt;p&gt;しかし、人々が期待しているのは、ワクチンの安全性に関する問題が完全に解決されることだ。それはまるで昔の粉ミルク事件のようなもので、だから時々歴史を振り返り、アメリカの食品医薬品局（FDA）の設立と法整備が、当時の粉ミルクや乳製品の安全性の問題と密接に関連していることを理解する必要がある。三鹿集団の粉ミルク事件は、中国における乳製品分野の大変革を促した。ワクチンに関しては、連続して問題が発生するとは言えないまでも、今回は中断することを望む。時代は常に問題が生じ、解決され、完全に解決されるという論理的な循環の中で進歩していくのだ。そうでなければ、ジャーナリストは何のためにいるのか？市民は何のために存在するのか？&lt;/p&gt;
&lt;p&gt;ですから、私たち一人ひとりができることは気にかけることだと思います。しかし問題は、中国人は物事を忘れやすいことです。先ほど言ったように、他人の車にぶつかって、その場を飛び去ってしまうような人がいます。誰も止めようとしません。私たちの隣人や同僚にも、そのような人が大勢います。ですから、少しずつ変えていく必要があります。そして、私たちのような普通の市民ができることは、彼らに気を配り、忘れずにいることです。物事が不足しているときには理想について話しても説得力がないかもしれませんが、皆が食べ物に困らないようになり、暖かく暮らせるようになったとき、世界一の糖尿病大国、高血圧大国など、多くの「一番」になってしまうと、中国人は走り始め、ダイエットを始めます。ここにいる皆さんのお嬢さんにも、一度食べると元気がなくなるような厳しい経験があるのではないでしょうか。これこそが小さな変化です。&lt;/p&gt;
&lt;p&gt;話している精神的なレベルもきっと同じ道理です。食べ物に困らない、着るものに困らないようになったら、走り始めたり、ダイエットを始めたりする頃になると、徐々に精神的な欲求も増えてきます。例えば昔は喫煙していたのですが、走りはじめてから、ぼんやりと気づくと20日以上タバコを吸ってないことに気がつきました。それ以来、吸っていません。もちろん、わざわざ完全にやめると言ったりはしません。儀式感を演出しすぎたくないので、年に数本くらい吸う可能性もあります。生活習慣が変わると、色々なものが変わってくるものですが、中国人としては、辛抱強く待って、その入れ替わりを待ちましょう。&lt;/p&gt;
&lt;p&gt;ますます多くの人が自分は幸せではないと感じ、それを楽しむことができない。うつ病が増えている一方で、より多くの人々が前向きな生き方を探し求めているのではないだろうか。そのため、精神的なものが成長していくのだから、悲観的に考えないように。同じ出来事でも、どう見るかだ。私はよく道で割り込みをする車を見て落ち込むことがあるが、すぐに楽観的になる。なぜなら、向こう側の列は以前よりも長くなっているからだ。これも一つのプロセスだ。ここに集まっている皆さんも、雨上がりのこの夜に、こんなにも無意味なことを話すためにここに来ているのだ。これだけでも面白いことではないだろうか？&lt;/p&gt;
&lt;p&gt;これもまた変化の一種であり、多くのことを考え方を変えて考える必要がある。もちろん、将来的に徐々に増えていくものはたくさんある。例えば、あなたが起業について言っているように、誰の人生も起業である。誰もが自分の人生で起業していると言える。今の私たちは、起業に時代的なものをあまりにも与えすぎている。実際には、起業は常に存在する。蘇軾は起業していないだろうか？李白は起業していないだろうか？一生を通して多くの創造があり、最終的に自分のブランドを作り出す。ほとんどが成功しないことは問題ない。あなたが十分に味のある人生を送っていて、それが価値があると感じる限り。今の私は、中国が特に欠けているのは、良い失敗を別の形の成功と見なす価値観だ。中国人だけが成功した結末を受け入れる。良い失敗は一種の成功であり、受け入れられない。&lt;/p&gt;
&lt;p&gt;そう思います、それは難しいことなので、中国サッカーがうまくいかない理由はたくさんあると思いますが、そのうちの1つは、誰も自分のミスを恐れてボールをパスすることを避けることです。そのようなプレースタイルがないことは確かですが、これはほんのわずかな理由に過ぎません。ですから、30歳を超えてから、序文で「急がないこと」について書きましたが、今50歳になり、少し焦りを感じています。時が経つのはあっという間です。期待していた多くのことが現実になっていません。しかし一方で、中国のような国にとって、多くのことは緩やかな変化のプロセスであることを理解しています。親を見ていると、昔は信号機を存在しないものとしていましたが、時々子供が父親の手を引きずっているのを見ることがあります。変化し、カードを入れ替えています。ですから、少し忍耐が必要です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>時間を理解するには、多くの本を読む必要がある。</title>
        <link>https://ttf248.life/ja/p/about-time-and-books/</link>
        <pubDate>Fri, 14 Feb 2020 07:27:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/about-time-and-books/</guid>
        <description>&lt;p&gt;全体的に見て国は良くなり、豊かになりつつあります。人の虚栄心があれば問題ありませんが。90年代から現在まで、私が接した家庭の中で、皆さんの生活水準は以前よりずっと向上し、同時に富裕層も増えました。市場経済の発展過程では、避けられない貧富の差の拡大がありました。&lt;/p&gt;
&lt;p&gt;皆がよく言う階級固定化や上昇チャンネルの閉塞というのは、現代社会の共通の問題であり、わが党が人民の基本的な福利厚生や社会保障において行った貢献は、皆も目にすべきです。小規模な生活はますます良くなります。もしあなたが家を買いたくないなら賃貸すればいいですし、子供たちの教育についても教育資源の配分に不均衡がある問題があり、時には選択を迫られることもあります。より良い仕事の機会や環境を選ぶか、それとも家族と過ごす時間を選ぶか。自分の考えを他人、ましてや子供や家族に押し付けないでください。座って、ゆっくり話し合いましょう。生活は必ず良くなります。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;動画のオリジナルリンクはこちらです。&lt;a class=&#34;link&#34; href=&#34;https://v.youku.com/v_show/id_XNDI5MzA4NjcyNA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://v.youku.com/v_show/id_XNDI5MzA4NjcyNA&lt;/a&gt; 。著作権侵害がある場合は、ご連絡ください。削除いたします。この文は文字稿の翻訳です。&lt;/p&gt;
&lt;h2 id=&#34;三十歳&#34;&gt;三十歳
&lt;/h2&gt;&lt;p&gt;三十歳&lt;/p&gt;
&lt;p&gt;今年ですでに50歳になりました。昔は考えたこともなかったのですが、まさか自分がそんな老人になるなんて。今になって思えば、本当に老い人です。これは30歳の時の写真ですね。30歳の時は、自分が若くて美しいとは感じませんでした。でも、50歳になって振り返ってみると、なかなか良いものです。30代の頃の最大の人生の発見は何だったでしょうか？振り返ってみれば、それは「引き算」だと感じます。キーワードはまさに「引き算」です。ある意味、痛みと喜びもまた引き算であり、多くのことを経験し、考え、書き出して残し、新しい白紙に走り出すこと。でも私にとって、30代は、自分自身のためにも、そして皆さんのためにも、引き算をすることが非常に重要だったと感じています。&lt;/p&gt;
&lt;p&gt;今私は、聯大（リンドン）の学生を送り届けている途中です。彼らにいつも言っているのは、30歳になる前に命懸けて加算すべきこと、色々なことを試すべきだということです。あなたは自分がどれだけの可能性を持っているか知らないし、運命があなたにどんな機会をもたらすかも分からない。だから、どう知るかは別として、20代の頃から必死になって様々な加算を積み重ねる人はいるけれど、減算をすることを忘れてしまうことがあります。30歳前後というのは人生において非常に重要な時期であり、一連の加算をして色々な場所を走り回った後、必ず一度減算すべき大切な時間です。さもなくば、遅れるでしょう。なぜ減算が必要なのか？あなたは全てが自分に合っているわけではないし、自分に合わないこともあります。全てのことは試すべきですが。&lt;/p&gt;
&lt;p&gt;８本の鎖があなたを縛り付けている、どれくらい走れるだろうか？互いに牽制し合うかもしれない。&lt;/p&gt;
&lt;p&gt;安価&lt;/p&gt;
&lt;p&gt;30歳になったとき、抜擢で昇進していた。学術的には教授、ジャーナリストなら上級記者といったところだ。29歳の時に抜擢され、今となってはそうしたことが珍しくなったが、その時、大きな困惑を感じ始めた。シドニーオリンピックまであと少しの2000年頃、喝采も多かったが、急に何かがおかしいと感じた。「お前は何をしたいんだ？」と自分に問いかけた。手放すべきものは何か？ その年、非常に重要な「引き算」をした。自分の番組を停めたのだ。1年間、海外への出演は一切なかった。周りからは「アナウンサーの世界では、一ヶ月くらい休めば何とかごま張れるが、半年もいないと誰も覚えていなくなるぞ」と言われた。それに対し私は、「私の顔ってこんなに安っぽいのか」と答えた。&lt;/p&gt;
&lt;p&gt;その年から新番組の開発を始めたんです。痛みを乗り越え、楽しんだ後、01年にまる一年間完全に休んでいたのですが。今日私が歩んでいる道はすべて、あの頃の「引き算」という考え方から来ていると感じています。当時の私は、スポーツやE（エンタメ）、その他色々な面白いこと、プロデューサーなど、たくさんできることがあったんです。でも、断りました。結局、私はニュースしかできないし、一番やるべきことはニュースだと気づいたんです。それで、当時私は3つの番組のプロデューサーだったのですが、全てを一夜にして辞め、今の私になったのです。シンプルになりました。先日同僚と話していて、「20代後半に下した非常に重要な決断」について言及しました。多くの選択肢があったにも関わらず、私はニュースをやることに決めました。この深い井戸のような仕事は、副主任への昇進の可能性もあったのですが、それを断って、普通の人のレベルに戻ったのです。&lt;/p&gt;
&lt;p&gt;学部学生&lt;/p&gt;
&lt;p&gt;これまで私は中央電視台の連股級幹部であり、絶対的に学士課程卒業の群众ではありません。あなたは私たちの体制を理解していますが、私はそれを拒否しました。学士課程の人がどこまで行けるのか見てみたかったのです。学士課程の学位でなぜ継続して学習し、研究生を指導することができないのでしょうか？ええ、今では研究生を指導しており、毎年11人指導しています。これは結果的に減算の結果です。もちろん、振り返っての感慨だと思います。それに、若い頃は特に奔波の中で、最終的にどのような感覚が生まれるのかといえば、何でも手に入れたいというものです。何か得ていないことや、何か少しでも欠陥があることがあれば、心がとても落ち着かないのです。&lt;/p&gt;
&lt;p&gt;座敷の皆様、減法を学ぶことも大切です。28歳くらいの時、1996年のオリンピックを見た時に、「完璧には欠点があって初めて成り立つ。この世に完璧なものなどない」という言葉を作りました。曾国藩の長編小説にも、人生最高の境地とは何か？という問いがあり、彼は書斎を「求闕（きゅうけつ）の間」と名付けようと考えました。花が完全に開いていない時こそ最高であり、月が完全に満ちていない時こそ最高なのです。しかし、常人にとっては、それは欠点のように感じられ、完璧さに達していない、極致に足りないと思われがちです。人を最も良く破壊する方法は、彼を完璧主義にし、極致を目指させることなのです。&lt;/p&gt;
&lt;p&gt;花はまだ咲ききっていない。&lt;/p&gt;
&lt;p&gt;この世界はそうじゃない、花が完全に咲いていない時こそ最高なんだ。花が完全に開くと、散るのが近いし、月が満ちてしまうと、徐々に欠けていくのが近い。だから私はこれが30歳の自分への非常に重要な後押しと啓示だと感じている。40歳はもう美しくなくなる。でも、リラックスしたし、自由になったからいいんだ。なぜなら、スーツを着た姿ではなく、白黒の世界ではなく、幸せを求め始めたからだ。&lt;/p&gt;
&lt;h2 id=&#34;四十歳&#34;&gt;四十歳
&lt;/h2&gt;&lt;p&gt;四十歳&lt;/p&gt;
&lt;p&gt;中国人の言い方で「四十不惑」というのがありますが、30歳は引き算、40歳は苦悩、という意味です。しかし今の時代では、40歳で苦悩している人が一番多いのではないでしょうか。私の場合は、中年危機が早めにやってきてしまい、36、7歳の頃から、自分がやっていることは本当に価値があるのだろうか、と悩んでいます。&lt;/p&gt;
&lt;p&gt;意味があるだろうか？結局、私が何を幸せとしたいのだろうか？この本は、そのような困惑の中から生まれた。30歳になると、あなたの多くの幸福の目標が物質的なものと結びついていることに気づくでしょう。「三十而立」という言葉は、学歴を立てることを指します。車や家がないと、義母はあなたに妻を嫁に出さないだろうし、とても現実的だ。しかし、「四十不惑」は難しい。昔の人は平均寿命が今ほど長らぬので、40歳で「不惑」になる必要があったのだろう。私も40歳にして困っているのだが、&lt;strong&gt;物質は私に幸福をもたらしてくれなかった。そう思っていたのに&lt;/strong&gt;。同じように40歳の時に、多くの人が私に尋ねる。「あなたは幸せですか？」&lt;/p&gt;
&lt;p&gt;その本のタイトルは「幸福な波」ですか？疑問符で、それは私の心の葛藤を表しています。中年危機の誕生です。40歳になる前に、たくさんの疑問に答えなければなりません。40歳前後には、自分自身とよく話し合い、多くのものを読み、自分自身に答えを与えましょう。私が三十六七歳の時に「道德経」の世界に入れたことを幸運に思っています。《白話》の中で既に述べましたが、40歳の時にまだ考える必要があるなら、周囲の環境が変わらない場合、特にソフトな環境が変化しない場合、気分良く家を出て行くと、至る所で信号無視をする人がいて、何かを買っても偽物だし、ワクチンも信用できないのです。&lt;/p&gt;
&lt;p&gt;ここ数日、中国は2つの台風と戦っているという。1つは目に見えない台風で、もう1つは具体的な台風だ。目に見えない台風とはワクチンであり、それは私たちの心の安全を脅かす堤防を揺さぶるものだ。もう1つの台風だが、上海に上陸する台風は中国では珍しい話である。さて、これからあなたが考えるべきことは、あなたは自分自身のために良いことをしているのか、あなたは大きく変わったのか、多くの答えを持っているのに、周りの環境が変わらなければ、幸せになれるだろうか？**私は8文字で「道徳赤字、人性の喪失」と表現した。これが今の最大の赤字であり、最大の損失だ。**先日、ここからそう遠くないところで、2台の車が衝突するのを自分の目で見た。衝突はそれほどひどくなかったが、責任を取るべき人が別の車にぶつかり、相手に「路肩に停めておきます」と言ったところ、相手もゆっくりと停めようとしたときだった。しかし、前の車が急に走り去り、誰も彼を止めなかった。&lt;/p&gt;
&lt;p&gt;これは責任感のある父親になるだろうか？責任感のある息子になるだろうか？ましてや、彼があなたの同僚である可能性もあるのに、どうして責任感のある市民になれるのだろう。道徳の欠如と人間性の喪失は、必ずあなたに影響を与える。あなたがどんなに偉大な人物であろうとも、家から出なければならない。しかし問題は、家にいなくても、子供たちは予防接種を受ける必要があるし、もしあなたが宅配便を配達するなら、その食べ物にも問題があるかもしれないということだ！&lt;/p&gt;
&lt;p&gt;そのため、中国人がどのようにして一般の人々から市民へと変わっていくのか、という問いは、私自身の40歳という節目において、自分自身にも、そして社会にとっても重要な課題として問われているのかもしれない。&lt;/p&gt;
&lt;p&gt;もし30歳が引き算なら、40歳が困惑なら、50歳は自分自身に贈る言葉として「好奇心」を選ぶべきだと思う。50歳は気まずい、前には村がなく、後ろにも店がない、攻めることもできるし、退くこともできる。あるものを獲得してから10年間過ごし、そのまま定年まで混ねるのも悪くないかもしれない。&lt;/p&gt;
&lt;p&gt;最近一本書を読んでいたら、その中にとても面白いことが書いてあった。シリコンバレーで本当に成功した起業家は、五六十代が多いというのだ。これは私たちの考え方とは違う。中国も、起業をすべて若者の事業とみなすのではなく、ボランティアをすべて青年ボランティアとみなすべきではないように、いつからそうなるのか。先週、番組に出演したのだが、中国では間もなく退職した小学校・中学校の教師を採用する予定で、毎年二三万元ほどの補助金が出て、村に行って教師をするのだが、優秀な人に限られている。まさにこれが、退職後の再就業の先駆けだと言えるだろう。もちろん慈善活動だけではないが、50歳に戻るとまだ少し距離がある。どうやって前進していくのか？&lt;/p&gt;
&lt;h2 id=&#34;五十大寿&#34;&gt;五十大寿
&lt;/h2&gt;&lt;p&gt;五十歳&lt;/p&gt;
&lt;p&gt;さらに重要なのは、50歳の人々が直面する2つの課題です。1つ目の課題は自分自身であり、あなたはまだ多くのことに好奇心を持っているか、あなたの人生観はどういうものかということです。私の50歳で得られた最大の収穫、あるいは私が今どのような生き方をしているかと言えば、&lt;strong&gt;私は今日を大切にします。20代の頃は明日のことを考えがちですが、気がつくと50代にして昨日のことばかり考えてしまうものです。しかし、私は自分を克制し、明日にも昨日にも生きるのではなく、今日を大切にしています。50歳の人々は、いつも「明日ならいい」とか「昔の方が良かった」と考えるべきではありません！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;蔡琴のコンサート盤を見ることが今日の気分かな。蔡琴が言った言葉で、「写真を見るたびに、2年前の自分は本当に美しかったと思う。でも、あの時の一日、私は一度も自分が美しいと思ったことがない」という言葉がとても良い。この言葉には何か味がする。30歳の時はそう感じなかったけど、その時はなかなか男前だったし、自分の欠点がたくさんあると思っていた。でも今日、20年経って振り返ってみると。&lt;/p&gt;
&lt;p&gt;昔も私も若い頃はあった、髪がたくさんあって。だからあなたの今日を大切にしてあげて、二年後またあなたの今日を見れたら最高だね。&lt;/p&gt;
&lt;p&gt;まるで史铁生が言ったように、私の足が歩けなくなったばかりの頃、車椅子に座りながら毎日、走ってバスケットボールをしていた頃を懐かしみ、その思い出に浸る日々は非常に辛い。
数年が経ち、車いすに座ったまま褥瘡になり、全身が辛く、その頃は毎日懐かしく思う、数年前の痛みもなく、静かに車いすに座れていた日々を。
また数年が経ち、私が腎不全になり、透析に通うようになりました。その時、私はただ褥瘡があっただけの車椅子生活を懐かしみます。もしこの先、50歳まで生きられないとしたら、これまでの50年間が無駄だったような気がします。&lt;/p&gt;
&lt;p&gt;本当は50歳になって初めてこの道理に気づく必要はないと思います。30代、40代で気づくべきです。何事も簡単に見過ごしてしまうことがあります。旅行中の食事だってそうです。食べずに済ませてしまうと、30年後には味が変わってしまうかもしれません。だからこそ、私は50歳になった時に「今日を大切にする」という気持ちが最初の感想でした。&lt;/p&gt;
&lt;p&gt;好奇心が二つ目です。私はいつでも多くのことに対して興味を持つことをやめることができることに気づきました。なぜなら、たくさんのものを見て経験してきたからです。しかし、自分を好奇心旺盛に保とうと努めています。ですから、今私がやることはすべて、好奇心を持って行っています。携帯電話は縦にも横にも撮影できますし、現場取材に行ったり、一見すると非常に大きく厳粛な会議に出席したりすることもできます。電話回線はもっと気軽に、もっと楽しく、人々の印象に残るようにすることはできないか？新しいメディアを使って発信することもできる。好奇心は人類の進歩を促す最も重要な原動力だと思います。なぜ、個人の進歩を促す最も重要な原動力にならないのか？ ある民族が好奇心を失えば、その文明は終焉を迎えます。もう一つの大きなレベルでは、50歳は重要な試練です。40代から50代にかけて、中国でどのような既得権益者になるのか？ 多くの人が若い頃に夢を実現しようと希望を持っていましたが、一度夢を実現して既得権益者になると、他の誰かが夢を叶えるのを妨げる人になってしまうのではないかと心配しています。そうではないはずですよね？ 彼はあっという間に、かつて最も嫌っていた方法で若者や物事をとらえています。&lt;/p&gt;
&lt;p&gt;数年前から、自分自身が毎年11人の大学院生をボランティアとして迎え入れ、2年間面倒を見てきましたが、今では5期で55人の純粋な大学院生が卒業しています。このような恩恵を受ける立場になれたことは非常に幸せです。ある種の感触を持ち、彼らを導く力も与えられます。毎日授業が終わった後、夕食に誘うのですが、大した費用はかかりません。しかし、これは良い恩恵を受ける者がやるべきことです。恩恵を受ける者は、一方では道標となることができ、かつて言ったことがあります。「あまり助けてくれた人に感謝の言葉を述べたくない。なぜなら、新しい若者を倍返しの方法で扱うことが、私の感謝の表れだからです。」&lt;/p&gt;
&lt;p&gt;毎日「ありがとう」と言ってばかりいると、それが妨げになる。次に、他者の道を切り開くことだ。中国の既得権益者、物質的、経済的、思想的、文化的、あらゆる分野においてそうであるとしても、あなたがそうなった時、どうすべきかを考えるべきだ。昨日の列車を押しやった人が、今日になって列車を止める人になっている。振り返れば中国の歴史はそこかしこでそうだ。今日もまた繰り返されるだろう。そんなことではない、時にはもっとひどくなることもあるので、全ての既得権益者に呼びかける。若き日のあなたに期待したような人間になるように行動してほしい。そのような人間になれていないかもしれないが、少なくとも私は考え、行動し、発言している。&lt;/p&gt;</description>
        </item>
        <item>
        <title>標準ライブラリコンテナのメモリ割り当て器：allocator</title>
        <link>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</link>
        <pubDate>Mon, 30 Dec 2019 13:26:19 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</guid>
        <description>&lt;p&gt;カスタムアロケータは、パフォーマンスの向上、メモリ効率の改善、および頻繁な小規模メモリ割り当ての問題解決に役立ちます。&lt;/p&gt;
&lt;h4 id=&#34;前の原因&#34;&gt;前の原因
&lt;/h4&gt;&lt;p&gt;最近、ネットワークデータパケットの開発に携わり、頻繁に小さなメモリ領域を確保・解放する必要がある。元々メモリプールを使用しようと考えていたが、既存のメモリプールをいくつか調べてみたところ、これを発見した&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/cacay/MemoryPool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cacay/MemoryPool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インターフェースを見たときから、ちょっと違和感がある。このメモリプールの実装がどうも奇妙だ。&lt;code&gt;MemoryPool&lt;/code&gt;の実装ロジックは、固定サイズのメモリ空間を確保している。Boostのメモリプールインターフェースを見ると、テンプレートで、使用時にインスタンス化される。ちょうどこのライブラリについてはすでに記事があり、&lt;code&gt;allocator&lt;/code&gt;という概念が言及されている。&lt;/p&gt;
&lt;h4 id=&#34;wikihttpszhwikipediaorgwikie58886e9858de599a8_c2b2b&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_%28C%2B%2B%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wiki&lt;/a&gt;
&lt;/h4&gt;&lt;p&gt;C++プログラミングにおいて、アロケータ（allocator, 英語）はC++標準ライブラリの重要な構成要素です。C++ライブラリには、連結リストや集合など、さまざまな「コンテナ」と呼ばれるデータ構造が定義されており、これらのコンテナに共通する特徴の一つとして、そのサイズをプログラム実行時に変更できることが挙げられます。この実現のためには、動的なメモリ割り当てが不可欠であり、アロケータはそのメモリの割り当てと解放のリクエストを処理するために使用されます。言い換えれば、アロケータは標準テンプレートライブラリ（STL）コンテナにおけるメモリ管理の低レベルの詳細をカプセル化するものです。デフォルトでは、C++標準ライブラリは独自の汎用アロケータを使用しますが、必要に応じて、プログラマは独自のカスタムアロケータを作成して置き換えることもできます。&lt;/p&gt;
&lt;p&gt;アロケータは当初、アレクサンドル・ステパノフによってC++標準テンプレートライブラリ（STL）の一部として考案され、その目的は「ライブラリをより柔軟にし、基になるデータモデルに依存しない方法」を提供し、プログラマがカスタムのポインタや参照型をライブラリで利用できるようにすることであった。しかし、C++標準委員会が標準テンプレートライブラリをC++規格に組み込む際に、データモデルの完全な抽象化は許容できないパフォーマンス損失をもたらす可能性があることに気づき、その折衷案として、規格におけるアロケータの制限が厳しくなった。そして、これに鑑みて、現在の規格で記述されているアロケータのカスタマイズ性は、ステパノフの当初の構想と比較して大幅に制限されている。&lt;/p&gt;
&lt;p&gt;割り当てのカスタマイズには制限があるものの、多くの状況ではカスタムアロケータが必要となる場合があり、これは通常、共有メモリや回収済みメモリなどの異なる種類のメモリ空間へのアクセス方法をカプセル化するため、あるいはメモリプールを使用したメモリ割り当て時のパフォーマンス向上を目的として行われる。さらに、メモリ使用量と実行時間の観点からは、頻繁に少量ずつメモリを割り当てるプログラムにおいて、そのために特化したアロケータを導入することで大きな恩恵を得られる場合がある。&lt;/p&gt;
&lt;h4 id=&#34;利用要件&#34;&gt;利用要件
&lt;/h4&gt;&lt;p&gt;定義カスタムアロケータの主な理由の一つは、パフォーマンスの向上です。専用のカスタムアロケータを使用することで、プログラムのパフォーマンスを向上させたり、メモリ使用効率を高めたり、あるいはその両方を実現できます[4][8]。デフォルトのアロケータはnew演算子を使用してストレージ空間を割り当てますが、これはしばしばC言語のヒープ割り当て関数（malloc()）によって実装されます[9]。ヒープ割り当て関数は、頻繁に大量のメモリを割り当てるために最適化されていることが多いため、一度に大量のメモリを割り当てるコンテナ（ベクトルや双方向キューなど）の場合、デフォルトのアロケータは一般的に効率的です[8]。しかし、連想コンテナや双方向リンク付きリストなどの、頻繁に少量ずつメモリを割り当てる必要があるコンテナの場合、デフォルトのアロケータを使用すると通常、効率が非常に低くなります[4][9]。さらに、malloc()ベースのデフォルトアロケータには、参照局所性の低下[4]や、メモリ断片化を引き起こす可能性[4][9]などの問題も存在します。&lt;/p&gt;
&lt;p&gt;簡単に言うと、この部分（……）は、まるでこの規格がディスペンサーに対して行う「私には夢がある」という演説のようです。夢が実現するまでは、可搬性を気遣うプログラマーは、（使用に）ステートレスなカスタムディスペンサーに自分を限定してしまうでしょう。
——スコット・メイヤーズ『Effective STL』
この状況を鑑みると、頻繁な少量メモリ割り当ての問題を解決するために、メモリプールベースの割り当て器がよく用いられる[8]。デフォルトの「オンデマンド割り当て」とは異なり、メモリプールベースの割り当て器を使用する場合、プログラムは事前に大きなメモリブロック（「メモリプール」）を割り当てておき、メモリが必要な際には、カスタム割り当て器は単にプールのメモリへのポインタを要求者に返すだけです。オブジェクトが破棄される際にも、実際にメモリを解放する必要はなく、メモリプールのライフサイクルが終了した時点で初めてメモリを解放します[注 1][8]。&lt;/p&gt;
&lt;p&gt;「カスタムアロケータ」という話題に関して、すでに多くのC++専門家や関連著者が議論に参加しており、例えばスコット・メイヤーズの『Effective STL』やアンドレイ・アレクサンドレスクの『Modern C++ Design』にも言及されています。メイヤーズは、ある型Tに対するアロケータのすべてのインスタンスが等しいと要求する場合、可搬性のためのアロケータのインスタンスには状態が含まれてはならないことに気づきました。C++標準は、ライブラリの実装者がステートフルなアロケータをサポートすることを推奨していますが[文 4]、メイヤーズは関連する段落が「（一見）素晴らしい考え」であるものの、ほとんどナンセンスであり、アロケータの制限は「あまりにも厳しすぎる」と述べています[4]。例えば、STLのlistはspliceメソッドを許可しており、これはlistオブジェクトAのノードが直接別のlistオブジェクトBに移動できることを意味します。これにより、Aのアロケータによって割り当てられたメモリが、Bのアロケータによって解放される必要があり、それによりAとBのアロケータインスタンスが等しいことが推論されます。メイヤーズの結論は、アロケータを静的方法を使用する型として定義するのが最適であるということです。例えば、C++標準によると、アロケータはrebindメソッドを実装したotherクラステンプレートを提供する必要があります。&lt;/p&gt;
&lt;p&gt;另外、C++プログラミング言語の著者であるビヤニ・ストロストループは、「各オブジェクトの情報が異なることを防ぐための厳格なアロケータの制限」については「問題ない」（大意）と述べ、ほとんどのアロケータには状態が必要なく、むしろ状態がない方が性能が向上することさえあると指摘しています。彼は、メモリプール型アロケータ、共有メモリ型アロケータ、ガベージコレクション型アロケータという3つのカスタムアロケータの利用例を提示し、内部メモリプールを利用して少量メモリを迅速に割り当て/解放するアロケータの実装を示しました。しかし、彼はそのような最適化は既に彼が提供しているサンプルアロケータで実現されている可能性があると述べています[3]。&lt;/p&gt;
&lt;p&gt;カスタムアロケータの別の用途は、メモリ関連のエラーをデバッグすることです[10]。これを実現するには、割り当て時に追加のメモリを割り当てて、そこにデバッグ情報を格納するアロケータを作成できます。このようなアロケータは、メモリが同じ種類の割り当て/解放アロケータによって割り当て/解放されることを保証するだけでなく、ある程度プログラムをバッファオーバーフローから保護することもできます[11]。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
