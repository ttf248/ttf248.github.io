<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>向叔の手帳</title>
        <link>https://ttf248.life/ja/</link>
        <description>Recent content on 向叔の手帳</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://ttf248.life/ja/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GitHub Pages のサプライズ：複数の Pages をデプロイする</title>
        <link>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;最近、体内時計が少し狂っていて、深夜2時過ぎまでGitHub Pagesのデプロイに手を出していた。&lt;/p&gt;
&lt;p&gt;終わった後、やっとご飯を食べに行ったんだけど、食べた直後に眠くなり、食べて帰ってきて8時半くらいには、眠くて、少し仮眠ったらそのまま寝てしまい、起きたらもう午前2時過ぎだった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;まだ始動もせず消滅したカテゴリー：AI 研習社&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ツッコミ&#34;&gt;ツッコミ
&lt;/h2&gt;&lt;p&gt;昨日まで「フロントエンドをいじらない」と言っていたのに、今日はフロントエンドではなく、UI/UXの体験についていじっている。&lt;/p&gt;
&lt;h2 id=&#34;プロジェクト&#34;&gt;プロジェクト
&lt;/h2&gt;&lt;p&gt;ご紹介いたします、旧友の&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;その通り、元々選択した株のプロジェクトですね。このプロジェクトで全体の構造を再構築し、今後のAIプログラミング関連の内容はこちらに統合します。&lt;/p&gt;
&lt;h2 id=&#34;複数のpagesを配置する&#34;&gt;複数のPagesを配置する
&lt;/h2&gt;&lt;p&gt;プロジェクトは &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/ai-coding-demo&lt;/a&gt; にホストされていますが、よく知られた理由により、中国国内では Pages の公開がサポートされていません。そのため、海外の GitHub で公開する必要があります。&lt;/p&gt;
&lt;p&gt;ブログは海外のGithubに公開されているものです。まだ試したことがなく、複数のプロジェクトでpagesを公開しようとしています。現在取り組んでいるプロジェクトは従来のブログサイトではなく、単に多くのドキュメントがあり、いくつかの静的なhtmlデザインが重ねられています。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;はい、このページは私が最初にクリックして気づいたのですが、複数のプロジェクトをデプロイしたpagesはブログの公開に影響を与えず、ブログのドメイン下に新しいパスが追加されるだけです。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ai-coding-demo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ttf248.life/ai-coding-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここ見ると思わず「完璧」と叫んでしまう。&lt;/p&gt;
&lt;h2 id=&#34;エーアイけんしゅうしゃ&#34;&gt;エーアイけんしゅうしゃ
&lt;/h2&gt;&lt;p&gt;昨日新設したカテゴリーで、AIを使って多くのコンピュータのコースを学習しようと考えた。例えば、アルゴリズムや LeetCode の問題演習など。&lt;/p&gt;
&lt;p&gt;毎回の学習記録をブログに投稿し、知識データベースを構築。新カテゴリ「AI 研習会」を作成しました。&lt;/p&gt;
&lt;p&gt;今のところ、異なるコースごとに新しいプロジェクトを作成し、学習ノートは各プロジェクトのReadme.mdにまとめて記述するのが良いようだ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>古い弱点、花の華やかさに目が奪われる。</title>
        <link>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</link>
        <pubDate>Mon, 26 May 2025 23:54:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/old-ailment-stunning-flowers/</guid>
        <description>&lt;p&gt;長年バックエンド開発に注力してきましたが、最近、フロントエンドインターフェースを実現するために &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 编程，并涉足了一些前端相关的内容。然而，在这段折腾的过程中，我逐渐意识到自己又陷入了一个老毛病——繁花迷人眼。总想着用 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; を試み始めましたが、実際には、そのような試みは現在の仕事にほとんど役立たず、むしろ気を散らすだけでした。&lt;/p&gt;
&lt;h2 id=&#34;aiの適用シーン&#34;&gt;AIの適用シーン
&lt;/h2&gt;&lt;p&gt;小規模プロジェクトにおいて、AIツールは特に大きな効果を発揮します。独立性が高く、システムとの結合度が低く、ビジネスロジックが単純な関数を記述する際には、いっそうその手腕が光ります。これらのタスクは通常、明確な入力と出力があり、コンテキスト依存性が少ないため、現在のAIによるプログラミング支援の能力範囲に最適です。&lt;/p&gt;
&lt;p&gt;しかし、複雑なシステムアーキテクチャや高度なビジネスロジックに直面すると、AIの限界が徐々に明らかになる。一見妥当に見えるが、実際にはプロジェクトの真のニーズからかけ離れたコードを生成したり、原因究明が困難な潜在的な問題を導入したりする可能性がある。そのような状況では、AIは完全なコードジェネレーターとしてではなく、むしろ補助ツールとして活用すべきである。生成されたコードについては厳格なレビューとテストを行い、実際の要件を満たしていることを確認する必要がある。&lt;/p&gt;
&lt;h2 id=&#34;間違いと学習の代償&#34;&gt;間違いと学習の代償
&lt;/h2&gt;&lt;p&gt;AIによるフロントエンドコード生成を試みる中で、多くの課題に直面しました。フロントエンドは得意分野ではないため、問題の特定には時間と労力がかかります。プロンプトを調整してAIにコードを書き直しても、初級的なエラーを避けることは難しいです。この繰り返しの試行錯誤は時間を浪費するだけでなく、現在のリソースを慣れない領域での模索ではなく、バックエンドのビジネスロジックに集中すべきだと気づかされました。&lt;/p&gt;
&lt;p&gt;週末に完了したプロジェクトを振り返ると、バックエンド開発とユーザーインタラクションロジックに集中し、コンソールで機能を実装することが現時点で最も効率的な選択だと確信する。より多くの時間とエネルギーがある時に、フロントエンドの知識を体系的に学ぶ方が良い戦略かもしれない。&lt;/p&gt;
&lt;h2 id=&#34;フロントエンド学習計画&#34;&gt;フロントエンド学習計画
&lt;/h2&gt;&lt;p&gt;フロントエンド技術のスタックは複雑で多様なため、すぐに習得することは現実的ではありません。まずは Vue.js や React.js のようなフレームワークを一つ選び、そのコアコンセプトと使い方を深く学習する予定です。基礎知識に慣れてからこそ、AI を活用してフロントエンドコードを生成することで初めて、不慣れによるエラーや時間浪費を効果的に回避できます。&lt;/p&gt;
&lt;p&gt;結局、現段階ではバックエンド開発に重点を置き、着実にコアスキルを向上させることが重要だ。時機が整ったら、フロントエンドとAIの組み合わせを探求するのも良いかもしれないし、より大きな成果が得られるかもしれない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>クロード4リリース、試作：Hugoタグ、ハイパーリンク翻訳アシスタント</title>
        <link>https://ttf248.life/ja/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;このサイトはHugoで開発されているのですが、筆者はいつも中国語のタイトルを使っているため、生成される記事のハイパーリンクが親しみやすくありません。要するに、発信したときに見栄えが悪く、中国語の文字がハイパーリンク内で%E4%BD%A0%E5%A5%BDのような形式に変換されてしまうのです。Slugを設定すれば解決できるのですが、毎回手動で設定する必要があり、面倒です。&lt;/p&gt;
&lt;p&gt;そこで、今日はClaude4を使って翻訳アシスタントを開発してみようと思います。中国語のタイトルを自動的に英語のスラッグに変換し、記事中にハイパーリンクを追加することで、手動設定の手間を省きます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;クロード4は素晴らしい、文脈理解能力と複雑なタスク処理の効率が大幅に向上している。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;プロジェクトの場所&#34;&gt;プロジェクトの場所
&lt;/h2&gt;&lt;p&gt;国内プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
海外プロジェクトアドレス：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;コード実装&#34;&gt;コード実装
&lt;/h2&gt;&lt;p&gt;実装のアイデアですが、まず全ての記事をスキャンし、タグ情報と記事タイトルを抽出後、ローカルの大規模言語モデル（gemma-3-12b-itなど）を用いて翻訳します。&lt;/p&gt;
&lt;p&gt;実際の開発では、前世代の大規模モデルと比較して、&lt;code&gt;Claude4&lt;/code&gt;BOLD_3__INLINE_CODE_1__ 自动设计了交互式菜单，全面考虑了各种使用场景。例如，在标签处理方面，&lt;strong&gt;INLINE_CODE_2&lt;/strong&gt; 不仅支持标签的统计与分析，还包括分类统计，甚至能够检测&lt;strong&gt;タグなしの記事のプレビュー&lt;/strong&gt;とタグページの生成機能。&lt;/p&gt;
&lt;p&gt;ローカルLLMとの連携や翻訳キャッシュの追加、広範囲にわたるコードのリファクタリングであっても、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 都一次性完成，几乎没有出现任何问题。尽管项目规模不大，但包含了许多小功能。以往在开发过程中，大模型经常会遗忘前面的内容，而这次的 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 表现非常出色，**文脈を忘れずに機能する事例がほとんどです。&lt;/p&gt;
&lt;p&gt;要するに、知能が向上し、次の段階として &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; への移行を進め、日常的なコーディングの主力モデルとする予定です。&lt;/p&gt;
&lt;h2 id=&#34;翻訳キャッシュ&#34;&gt;翻訳キャッシュ
&lt;/h2&gt;&lt;p&gt;この点に関しては、大規模言語モデルの呼び出し回数を減らすだけでなく、実際にローカルで12Bモデルを実行すると、効率は高く、作業を妨げることはありません。しかし、毎回大規模言語モデルを呼び出すと少し遅くなることがあります。また、記事の関連性を固定するために全量更新を行う際、記事のタイトルが長い場合、時々、翻訳結果が異なり、記事のリンクが変わってしまうという事態が発生することがあります。これは非常に困ったことです。&lt;/p&gt;
&lt;h2 id=&#34;機能改善&#34;&gt;機能改善
&lt;/h2&gt;&lt;p&gt;プロジェクト全体を &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; に任せ、分析・最適化の余地を探った結果、以下の提案を得た：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;配置外置化 - 提高可维护性和灵活性
结构化日志 - 便于问题排查和监控
性能监控 - 了解系统运行状况
用户体验 - 进度条等视觉反馈
错误处理 - 更完善的异常处理机制
代码组织 - 更清晰的模块划分
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードを確認しました、全て問題ありません。例えば設定ファイルですが、元のコードの設定をデフォルト設定に変換し、設定ファイルを読み込む際に、対応する設定ファイルがない場合、自動的にデフォルトの設定ファイルが生成されるため、ユーザーの誤りを避けることができます。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;
&lt;/h3&gt;&lt;p&gt;要件：本文を翻訳する際、現在の翻訳効率を動的に計算し、残りの時間を予測し、関連情報をコンソールに出力すること。現在、記事の文字数を取得済み。各行を翻訳する際に、現在の翻訳文字数、時間、100字あたりの翻訳時間の推定値を算出し、同時に記事全体の翻訳にかかる残り時間を予測する。&lt;/p&gt;
&lt;p&gt;コードは対応できたけど、あまり満足いかないので、AIに新しいデザイン案を提供してもらった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多様な効率計算方法を提供：リアルタイム効率、平均効率、スライディングウィンドウ効率&lt;/li&gt;
&lt;li&gt;表示方法を改善：プログレスバー、段階別統計、動的更新&lt;/li&gt;
&lt;li&gt;より多くの有用な指標を追加する：API呼び出し回数、成功率など&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;コードが完了した後、新たな驚きがありましたが、翻訳効率の統計情報がリアルタイムで表示され、しかし無駄にスクロールすることはありませんでした。&lt;/p&gt;
&lt;p&gt;翻訳本文を英語へ（合計7163文字）…
検出された翻訳が必要な行は53行です。
[1/53] ステージ1/6 [░░░░░░░░░░░░░░░░░░░░░░░░░] 1.9% 翻訳 354 文字…
完了 (3.1秒) | API呼び出し #1
完了 (1.5秒) | API呼び出し #2
完了 (0.9秒) | API呼び出し #3
完了 (0.2秒) | API呼び出し #4
完了 (1.0秒) | API呼び出し #5
完了 (1.0秒) | API呼び出し #6
完了 (0.2秒) | API呼び出し #7
進捗：行 13.2% (7/53) | 文字 12.9% (925/7163) 114.6 字/秒
効率：リアルタイム76.4 | 平均117.9 | 最新109.0 | ステージ113.6 文字/秒 📊
成功率：100.0%（7/7）| 残り：46 行 7 秒] 9.4% 翻訳 110 文字…
残り時間: 55秒 | 推定完了: 00:10:19 8秒] 進捗 11.3% 翻訳 114文字…
処理速度: 3211.3 行/分 | 合計時間: 8秒] 13.2% 翻訳 16 文字…
[8/53] ステージ1/6 [███░░░░░░░░░░░░░░░░░░░░░░] 15.1% 翻訳 166 文字…&lt;/p&gt;
&lt;p&gt;以前は制御プログラムをあまり書いていなかったので、どのように実現されているのか興味があり、コードを確認した。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// 清屏并重新显示 (动态刷新效果)
if translationCount &amp;gt; 1 {
   fmt.Print(&amp;quot;\033[6A\033[K&amp;quot;) // 上移6行并清除
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;性能統計メニュー&#34;&gt;性能統計メニュー
&lt;/h3&gt;&lt;p&gt;新たに追加された&lt;strong&gt;性能统计菜单&lt;/strong&gt;、自分でデザインするよりも完成度が高いかもしれない。&lt;/p&gt;
&lt;p&gt;パフォーマンス統計：
翻訳回数: 360
キャッシュヒット率：1.4%（5/365）
平均翻訳時間: 315.927234ms
ファイル操作：73
試行回数：0&lt;/p&gt;
&lt;h3 id=&#34;進捗状況表示&#34;&gt;進捗状況表示
&lt;/h3&gt;&lt;p&gt;新たに追加された&lt;strong&gt;进度条显示&lt;/strong&gt;では、詳細な進捗状況、経過時間、および残りの時間の予測を確認できます。&lt;/p&gt;
&lt;p&gt;機能を選択してください (0-13): 10
翻訳目標を収集中です。
キャッシュファイルが読み込まれました。翻訳記録は 0 件です。&lt;/p&gt;
&lt;p&gt;翻訳キャッシュ統計:
🏷️ ラベル総数：229個
記事総数：131 編
キャッシュ済み: 0 個
360個&lt;/p&gt;
&lt;p&gt;確認しますか？ 全量翻訳キャッシュを生成しますか？ (y/n): y
🚀 全量翻訳キャッシュを生成中…
キャッシュファイルが読み込まれました。翻訳記録は 0 件です。
翻訳をキャッシュから確認中…
🔄 360個の新しいタグを翻訳する必要があります。
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - 時間: 3秒 - 残り時間: 3分8秒💾 キャッシュファイル保存済み、翻訳記録5件を含む
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2.8%) - 時間: 6秒 - 残り時間: 3分28秒💾 キャッシュファイル保存済み、翻訳記録10件を含む
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - 時間: 9秒 - 残り時間: 3分30秒💾 キャッシュファイル保存済み、翻訳記録15件を含む
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - 時間: 13秒 - 残り時間: 3分36秒💾 キャッシュファイル保存済み、翻訳記録20件を含む
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - 時間: 16秒 - 残り時間: 3分33秒💾 キャッシュファイル保存済み、25件の翻訳記録を含む
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8.3%) - 時間: 19秒 - 残り時間: 3分30秒💾 キャッシュファイル保存済み、30件の翻訳記録を含む
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - 時間: 22秒 - 残り時間: 3分25秒💾 キャッシュファイル保存済み、35件の翻訳記録を含む&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;=== Hugo 博客管理工具 ===

🚀 核心功能
  1. 一键处理全部 (完整博客处理流程)

📝 内容管理
  2. 生成标签页面
  3. 生成文章Slug
  4. 翻译文章为多语言版本

💾 缓存管理
  5. 查看缓存状态
  6. 生成全量翻译缓存
  7. 清空翻译缓存

  0. 退出程序
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>計画生育政策の多面的影響：社会構造から経済・政治の深層変革まで</title>
        <link>https://ttf248.life/ja/p/planned-parenthood-multidimensional-impact-social-structure-economic-political-transformation/</link>
        <pubDate>Sat, 24 May 2025 02:36:49 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/planned-parenthood-multidimensional-impact-social-structure-economic-political-transformation/</guid>
        <description>&lt;p&gt;中国の計画生育政策は、人口増加を抑制する一方で、家系による発展を封じ込め、伝統的な社会構造に衝撃を与え、家族経営企業や政界における家族勢力の拡大を抑えました。韓国財閥やインドの家族独占と比較すると、その独自性が際立ちます。現在、出生制限を緩和しても、少子化などの課題に直面していますが、新たな寡占のリスクにも警戒し、多方面でバランスを取る必要があります。&lt;/p&gt;
&lt;h4 id=&#34;人口統制と家族型発展の盛衰&#34;&gt;人口統制と家族型発展の盛衰
&lt;/h4&gt;&lt;p&gt;計画生育政策は、中国で40年近くにわたる基本国策として実施され、その直接的な効果は顕著である。データによると、1978年から2007年の間に、中国の人口自然増減率は12‰から5.2‰へ低下し、4億人以上が生まれなかった。また、世界の人口における中国の割合は22.2%から20.1%に減少した。このような人口増加率の急激な低下は、中国社会の家族構成を深く再構築した。例えば、家業の場合、計画生育政策の実施後、経営者の子供の出生数は大幅に減少した。政策以前では3人以上の子供を持つ割合が40.63%であったのが、政策後は18.46%に急降下し、一人っ子の割合は6.25%から32.31%へと上昇した。このような構造的な変化は、直接的に家業が選択できる内部後継者の範囲を大幅に縮小させ、客観的に家業の世代間拡大能力を抑制した。&lt;/p&gt;
&lt;p&gt;韓国とインドの状況を比較すると、その違いは顕著です。韓国は厳格な計画生育を実施していないものの、出生率は長らく低迷しています（2023年は0.7）。しかし、財閥グループはクロス持ち株や相続税回避などの手段で、依然として国家経済の命脈を握っています。5大財閥の総収入は韓国GDPの50%を超え、サムスン電子単体でも全国GDPの20%を占めます。一方、インドは79%の経済産出が家族企業によって支えられており、6つの財閥が通信や鉄鋼などの主要分野を支配し、トップ20社の利益が全国企業の利益の80%を占めています。この違いの中核にあるのは、中国の計画生育政策が家族規模を制限することで、家族企業拡大の人材基盤を根本から弱めたことですが、韓国とインドは異なる政策環境下で、家族勢力が経済領域に継続的に浸透しています。&lt;/p&gt;
&lt;h4 id=&#34;独占の抑制と社会構造の転換&#34;&gt;独占の抑制と社会構造の転換
&lt;/h4&gt;&lt;p&gt;計画生育政策が経済分野に与える影響は、特に独占の抑制として顕著です。中国の家族経営企業は、娘の数が減少したため、韓国のような財閥グループを形成することが難しくなっています。韓国では、財閥が「再投資」によって一族による支配権を維持しており、サムスン家はグループ全体の株式の2%しか保有していませんが、複雑な株主構成を通じて全体を掌握しています。一方、中国では計画生育後、家族経営企業は普遍的に「子承父業」の難境に直面し、職業マネージャーを導入したり、株式の多様化改革を行わざるを得なくなりました。澎湃新聞の研究によると、計画生育後、家族経営企業の女性の後継人割合は13.85%から34.21%に上昇し、さらに後継人の学歴も著しく向上しており、学士号以上の割合は43.75%から98.46%に上昇しています。この転換は一族による支配を完全に排除するものではありませんが、単一の家族による市場独占の可能性を大幅に低下させます。&lt;/p&gt;
&lt;p&gt;社会構造のレベルにおいて、計画生育政策は伝統的な家族中心のモデルを加速的に解体した。中国の世帯規模は1982年の4.41人/世帯から2020年には2.62人/世帯に縮小し、小規模化世帯は経済的、教育的、社会的なサポート機能といった家族機能を弱めた。対照的にインドでは、依然として世帯規模は約4人であり、カースト制度と家族の力が深く結びついており、社会流動性が低い状況にある。中国における家族構造の変化は個人主義の発達を促進し、2023年には2億4000万人の独身成年者が存在し、消費市場では「一人経済」が台頭する傾向が見られる。この変化はさらに家族の影響力を希薄化させている。&lt;/p&gt;
&lt;h4 id=&#34;権力分立政治分野&#34;&gt;権力分立（政治分野）
&lt;/h4&gt;&lt;p&gt;計画生育政策は、政治生態にも大きな影響を与えた。伝統的に、家族勢力は血縁や姻俗関係を通じて基層政治に浸透してきた。例えば、河南省新野県では161の政治家族がほぼ全ての政府部門を掌握し、副科級以上の幹部の中20%が「官二代」（公務員の息子）であった。しかし計画生育政策の実施により、家庭規模が縮小したことで家族ネットワークの拡大は制限された。北京大学の研究によると、計画生育後、役人の子どもの数は減少し、家族政治ネットワークの複雑さが大きく低下した。さらに、政策が推進する教育普及（一人当たりの平均受教育年限が1982年の5.2年から2023年の10.9年に向上）は社会流動を促進し、家族勢力が政治資源を独占することを弱めた。&lt;/p&gt;
&lt;p&gt;韓国とインドとの比較において、韓国財閥と政治の深い癒着（サムスングループ幹部と政府の権力と金銭の取引など）や、インドのカースト制度下での家系による政治世襲は、中国政策の独自性を際立たせる。中国は計画生育政策により、客観的に権力世襲の可能性を減少させた。地方レベルでは依然として家系現象が見られるものの、全体的な傾向としては権力構造の分散化である。2025年の全国両会期間中には、政協委員から「人口と計画生育法」を「人口と生育法」に改称し、全面的に少子化政策を解除するという提案があり、この動きは今後の政治生態の変化にさらなる影響を与える可能性がある。&lt;/p&gt;
&lt;h4 id=&#34;政策変更後の課題と機会&#34;&gt;政策変更後の課題と機会
&lt;/h4&gt;&lt;p&gt;2016年の二子供政策、そして2021年の三子供政策の実施は、中国の少子化政策における大きな転換点を示すものだった。しかし、その効果は限定的であり、2022年の出生率はわずか1.18と、世代交代水準（2.1）を大きく下回っている。出生制限緩和が家族経営企業に与える影響は二面性を持つ。一方では、多子を生むことで家族の事業承継能力を高めることができるかもしれない。例えば、浙江娃哈哈グループの宗慶后氏の娘である宗馥莉氏が独生女として後を任されている。他方で、高い育児費用（一線都市で子供を18歳まで養育する平均費用は100万元に達する）や、キャリアウーマンの出産意欲低下により、家族規模の拡大は制限される傾向にある。&lt;/p&gt;
&lt;p&gt;経済分野において、出生率の開放は新たな寡占形態を生み出す可能性がある。三児政策が、母子・保育などの業界集約を促進し、2025年には乳幼児保育市場規模は約1621.3億円に達すると予測され、大手企業による中小企業の合併・統合により、CR5の市場集中度は55%を超える。この集約化は効率をもたらすかもしれないが、新たな寡占リスクには警戒が必要である。政府は、出生を奨励しつつ、市場集中を防ぐバランスを取る必要があり、独占禁止法による規制強化と同時に、育児補助（例えば杭州市で三児家庭が毎月3000元の粉ミルク補助金を受け取れる）を提供し、家計の負担を軽減することが求められる。&lt;/p&gt;
&lt;p&gt;政治の領域において、出生制限の緩和は一族勢力に微妙な影響を及ぼす可能性がある。短期的に伝統的な一族政治ネットワークが回復することは困難だが、長期的には多子の一族が地方政治で新たな影響力を形成するかもしれない。したがって、幹部選抜メカニズムの改善や監督強化（親族就任制限制度の確立など）は、権力世襲を防ぐ上で依然として重要である。&lt;/p&gt;
&lt;h4 id=&#34;五国際鏡鑑と将来展望&#34;&gt;五、国際鏡鑑と将来展望
&lt;/h4&gt;&lt;p&gt;韓国とインドの経験が示すように、財閥勢力の興亡は政策との密接な関連性がある。韓国は財閥を支援して経済発展を遂げたものの、社会的不公平が生じた代償を払った。一方、インドは有効な政策がなく家族による独占を抑制できなかったため、貧富の格差が拡大した。中国の計画生育政策は人口を抑制する一方で客観的に財閥勢力の拡大を抑えたが、高齢化の加速や労働力不足といった問題も引き起こしている。&lt;/p&gt;
&lt;p&gt;今後、中国は人口政策と社会経済発展のバランスを新たに模索する必要がある。一方では、育児支援策（出産休暇延長や包括的な保育施設の建設など）を通じて出生率を高め、他方で独占禁止法の執行を強化し、家族経営企業による資本操作を通じた新たな独占を防ぐ。政治面においては、地方民主主義の構築をさらに進め、監督メカニズムを改善し、権力行使の透明化を図る必要がある。&lt;/p&gt;
&lt;p&gt;要するに、計画生育政策は中国社会の変革における重要な推進力であり、その影響は人口分野を超えている。それは家族構造、経済モデル、そして政治環境を再構築し、中国が韓国やインドのような一族による独占の罠に陥ることを避けるための道筋を示した。政策調整に伴い、新たな人口構成の下で効率と公平性、自由と秩序をどのように調和させるかは、中国が直面する長期的な課題となるだろう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>AIを使いすぎたせいか、少し後遺症が出ている。</title>
        <link>https://ttf248.life/ja/p/ai-overuse-side-effects/</link>
        <pubDate>Wed, 14 May 2025 19:39:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-overuse-side-effects/</guid>
        <description>&lt;p&gt;新しい___INLINE_CODE_0__ができて以来、色々なものの試しにAIで記録し発信するものが増えたため、静まって自分自身で考える時間が増えていない。今後はこの欄の産出を少しコントロールし、月刊形式にまとめるのが良いだろう。毎月一記事の発行で十分である。&lt;/p&gt;
&lt;p&gt;まるで何らかの後遺症や副作用のようで、効率は上がったものの、思考の深さと広がりが低下している。&lt;/p&gt;
&lt;h2 id=&#34;効率向上否定できない&#34;&gt;効率向上：否定できない
&lt;/h2&gt;&lt;p&gt;以前はあまりメンテナンスしていなかったこのコーナーだが、時事問題に対しては面倒がらずにインターネットで情報を検索し、記録としてまとめなかった。しかし今では様々なAIツールがあり、アウトラインを作成するだけで、AIが自動的に関連イベントを検索・記録し、必要な記事を生成してくれる。簡単なフォーマット調整をして公開すれば良い。&lt;/p&gt;
&lt;p&gt;まるで怠け者の救いもの、効率が大幅に上がり、まさに少ない労力で大きな成果だ。&lt;/p&gt;
&lt;p&gt;コーディングに集中すると、執筆作業を脇に置いた時と比べて、効率が確実に向上します。以前はAPIインターフェースドキュメントを詳細に読む必要があったコードの記述も、今は直接スキップできることが多くなり、そのスキップは非常に重要です。APIへの習熟は&lt;code&gt;体力劳动&lt;/code&gt;，而不是&lt;code&gt;脑力劳动&lt;/code&gt;であり、AIにこの部分を任せるのがちょうど良いです。&lt;/p&gt;
&lt;h2 id=&#34;ゴミ情報&#34;&gt;ゴミ情報
&lt;/h2&gt;&lt;p&gt;多くの原稿だが、内容はそれほど良くなく、完全に無価値というわけではないものの、どこか活気が感じられず、以前から好まない傾向のある、味が無いような内容だ。&lt;/p&gt;
&lt;p&gt;別の視点で見ると、AIが生成したコンテンツは確かに、まるでベルトコンベアで大量生産されたようなもので、魂がないように感じる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新しい時代のインターネットゴミ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;忘却性&#34;&gt;忘却性
&lt;/h2&gt;&lt;p&gt;この手の原稿は、すべてAI生成で、読者の状況も不明なため、時間が経つと私の記憶も曖昧になり、忘れそうになる。&lt;/p&gt;
&lt;p&gt;類似の問題は、コードを書く時にも起こる。コードのコミット履歴を見ないと、自分が当時どう考えていたのか、なぜそう書いたのか全く分からない。特に、コードが通るまでAIと何度もやり取りして生成されたコードは、当初の考え方と大きく異なったり、全く違うものだったりする。&lt;/p&gt;
&lt;h2 id=&#34;検索&#34;&gt;検索
&lt;/h2&gt;&lt;p&gt;最近、Googleや百度を開く回数が明らかに減った。多くの問題をAIで検索すると、インタラクションも検索結果も、従来の検索エンジンよりもずっと良い。&lt;/p&gt;
&lt;p&gt;現在、生存しているかどうか定かではない__INLINE_CODE_0__に追悼を捧げましょう。これは大手企業で最初にリリースされた、インターネット検索が可能なAIツールです。&lt;/p&gt;
&lt;p&gt;グーグルを使う人が減り、アクセス数も減っている。多くの質問はAIに直接聞けるし、このサイトも時代に取り残されていくだろう。&lt;/p&gt;
&lt;h2 id=&#34;結びに&#34;&gt;結びに
&lt;/h2&gt;&lt;p&gt;ブログは現在もメンテナンス中で、以前からアクセス数は少なかったのですが、今はさらに期待できません。むしろ、自分用の記録として、自分自身に見るための場所です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>貿易戦争が突然一時停止</title>
        <link>https://ttf248.life/ja/p/trade-war-pauses/</link>
        <pubDate>Mon, 12 May 2025 19:07:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/trade-war-pauses/</guid>
        <description>&lt;p&gt;2025年の貿易摩擦関税の推移は「エスカレート—報復—協議」のサイクルをたどり、米中対立は関税闘争からルールベースの競争へと転換した。短期的な緩和は市場圧力を和らげたものの、長期的な不確実性は依然として存在し、WTO裁決、サプライチェーン調整、地政学的変化が世界経済に与える継続的な影響を注視する必要がある。&lt;/p&gt;
&lt;p&gt;人が自分の認識を超えるお金を稼ぐことはできない。昨年の貿易戦争勃発による株価の大幅下落だが、現在ではほとんど反発しており、その間にどれだけの個人投資家が犠牲になったのか計数もつかない。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2025年の貿易戦争関税タイムライン整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2025年の貿易戦争関税のタイムラインを整理し、米中をはじめとする各国の主要な出来事と合わせて、関税政策の動向変化を明らかにします。&lt;/p&gt;
&lt;h3 id=&#34;一2025年4月関税の全面的な引き上げと報復措置&#34;&gt;一、2025年4月：関税の全面的な引き上げと報復措置
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;トランプ政権が第14257号行政命令に署名し、中国からの輸入品に対して34％の「報復関税」を課すことを発表しました。対象には香港とマカオの商品も含まれます。&lt;/li&gt;
&lt;li&gt;米国はさらに、中国に対する「同等関税」の税率を34％から84％に引き上げ、第14259号および第14266号行政命令を発布し、より多くの商品に関税を課す。&lt;/li&gt;
&lt;li&gt;ホワイトハウスは制令を修正し、中国に対する関税総額を145％に引き上げ、また800ドル以下の小口貨物に関する関税率を90％から120％に引き上げる。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;中国は、米国産の全製品に対し34％の関税を賦課すると発表した。農産物、自動車、エネルギー分野などが含まれる。&lt;/li&gt;
&lt;li&gt;中国は、報復関税の税率を34％から84％に引き上げ、米国との同調を図った。&lt;/li&gt;
&lt;li&gt;中国は、米国製品に対する関税の91％を撤廃（米国側の撤廃に応じた部分）、24％関税の実施を90日間停止し、10％は維持する。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;アメリカはカナダの鉄鋼・アルミニウム製品に対し25%の関税を課し、カナダは報復措置として298億カナダドルの米国製品に課税し、WTOへ訴えた。&lt;/li&gt;
&lt;li&gt;欧州連合は米国製品に対し最大25％の関税を課し、日本は対米自動車関税に懸念を示し、「貿易戦争は双方に損害をもたらす」と語った。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二2025年5月ジュネーブ協議と関税緩和&#34;&gt;二、2025年5月：ジュネーブ協議と関税緩和
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;米中がスイスのジュネーブで16時間の協議を行い、《米中ジュネーブ経貿協議共同声明》を合意した。&lt;/li&gt;
&lt;li&gt;両側が一部関税の停止を発表：&lt;/li&gt;
&lt;li&gt;米国は中国に対する関税を24％停止（90日間）、10％を維持し、4月8日と9日の追加課税を取り下げた。&lt;/li&gt;
&lt;li&gt;中国は、報復関税を24％停止し、10％を維持するとともに、非関税措置を解除する。&lt;/li&gt;
&lt;li&gt;両者は、関税削減とルールの策定に焦点を当て、中国、米国、または第三国で定期的に経貿協議を開催することで合意した。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;高い関税が中小企業の倒産を招く（例：アマゾン出店者の関税高騰による廃業）、インフレ期待も高まる（コアPCEは3.3%に上昇見込み）。&lt;/li&gt;
&lt;li&gt;中国はレアアース輸出規制を強化し、密輸を取り締まる。これにより、米国の軍需産業や新エネルギー産業に影響が及び、レアアースなどの主要鉱物に対する関税免除を余儀なくされている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;その他の重要な出来事と長期的な影響&#34;&gt;その他の重要な出来事と長期的な影響
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;カナダと中国は、それぞれWTOに米国の鉄鋼・アルミニウム関税および「報復関税」が非差別原則に違反すると訴えた。&lt;/li&gt;
&lt;li&gt;ＷＴＯ事務局長エビラは、米国の関税が2025年の世界貿易量を1％縮小させ、発展途上国の窮状を悪化させる可能性があると警告した。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;レアアース、黒鉛、医療用CT球管など、37ページのリストが戦略物資を網羅し、サプライチェーンの脆弱性を露呈する。&lt;/li&gt;
&lt;li&gt;米国が輸入自動車に25％の関税を課したことにより、世界の自動車生産量は2％減少し、北米での生産量は9％減少すると予想される。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;トランプ政権は「報復関税」を掲げ国際貿易秩序の再構築を図ったが、一方的な強要と批判され、同盟国（EU、日本など）的反発を招いた。&lt;/li&gt;
&lt;li&gt;中国は、保護主義に対抗し、発展途上国との協力を促すため、市場開放の拡大（例：輸入博覧会、関税免除の約束など）に応じている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;タイムラインまとめ&#34;&gt;タイムラインまとめ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;重要な&lt;/th&gt;
&lt;th&gt;非常に興味深い&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;米国が中国に対し34％の「同等関税」を賦課、香港・マカオ関連商品も対象。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;米国が中国に対し関税を84%に引き上げ、新たな追加税制を導入する。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;中国は34％の関税を課す措置に対抗し、後日84％に引き上げ；米国は関税を145％に修正。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;アメリカは一部の商品（テクノロジー製品など）に免除措置を適用し、中国はこれらの品物に対する91％の報復関税を取り消しました。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;米中日のジュネーブ協議、24％の関税を一時停止する共同声明に合意。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;両側は関税停止と協議メカニズムを宣言し、貿易の緊張を緩和した。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;五傾向と課題&#34;&gt;五、傾向と課題
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;米中関税停止措置は好材料だが、構造的な対立（ハイテク、エネルギーなど）は依然として存在し、中間選挙が政策の継続性に影響を及ぼす可能性がある。&lt;/li&gt;
&lt;li&gt;企業はサプライチェーンの調整を加速しており、メキシコや東南アジアは「ニアショアリング」から恩恵を受ける一方、コスト上昇が回復を抑制する可能性がある。&lt;/li&gt;
&lt;li&gt;WTO紛争解決メカニズムの機能不全、地域貿易協定（米英間の協定など）が代替案となる一方、断片化を悪化させる。&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>2020～2025年、江西省の特別枠・公務員採用教員に関するデータ：傾向と変革の洞察</title>
        <link>https://ttf248.life/ja/p/jiangxi-specialized-post-and-national-cadre-teacher-recruitment-data-trends-and-transformation-insights-2020-2025/</link>
        <pubDate>Mon, 12 May 2025 18:59:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/jiangxi-specialized-post-and-national-cadre-teacher-recruitment-data-trends-and-transformation-insights-2020-2025/</guid>
        <description>&lt;p&gt;2020年から2025年の江西省の教師採用は大幅な縮小傾向：特別職教員採用数は6,617人から32人へ激減（99.5%減）、一般公務員教員も11,324人から2,146人へ減少（81.1%減）。主要科目は割合は安定しているものの、全体量は縮小。音体美などの科目は割合が増加したが、絶対数は限られている（2025年は各2名のみ採用）。政策面では「退一補一」による人員削減が推し進められ、教員資源は職業教育や僻地へ傾斜することで、伝統的な中小学校のポストは大幅に縮小。2025年には一部の科目で採用計画数がゼロとなっている。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;江西省の特別職教員採用数、過去5年間のデータを教科目ごとに集計し、表にまとめる。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;——————&lt;/p&gt;
&lt;p&gt;江西省教育庁、人事社会保障庁等の公式発表の採用公告及び公開データに基づき、2020年から2025年までの特任教員と国公立教員の採用状況を以下にまとめます。&lt;strong&gt;2025年数据为计划招聘数&lt;/strong&gt;についてはご留意ください。また、一部年度の学科細分情報は完全に公開されておらず、「未細分」と注記されている学科は、合計統計またはデータ不足です。&lt;/p&gt;
&lt;h3 id=&#34;一20202025年江西省特別職教員採用データ&#34;&gt;一、2020～2025年江西省特別職教員採用データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年度&lt;/th&gt;
&lt;th&gt;合格者数&lt;/th&gt;
&lt;th&gt;国語&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;社会科&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;保健体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;その他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;6,617&lt;/td&gt;
&lt;td&gt;1,200&lt;/td&gt;
&lt;td&gt;1,100&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;317&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;6,020&lt;/td&gt;
&lt;td&gt;1,100&lt;/td&gt;
&lt;td&gt;1,000&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;450&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;3,835&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;3,146&lt;/td&gt;
&lt;td&gt;650&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024&lt;/td&gt;
&lt;td&gt;2,008&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2025&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;20202025年江西省公教編入教員採用データ&#34;&gt;2020～2025年江西省公教編入教員採用データ
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;年度&lt;/th&gt;
&lt;th&gt;合格者数&lt;/th&gt;
&lt;th&gt;国語&lt;/th&gt;
&lt;th&gt;数学&lt;/th&gt;
&lt;th&gt;英語&lt;/th&gt;
&lt;th&gt;物理&lt;/th&gt;
&lt;th&gt;化学&lt;/th&gt;
&lt;th&gt;生物&lt;/th&gt;
&lt;th&gt;社会科&lt;/th&gt;
&lt;th&gt;歴史&lt;/th&gt;
&lt;th&gt;地理&lt;/th&gt;
&lt;th&gt;音楽&lt;/th&gt;
&lt;th&gt;保健体育&lt;/th&gt;
&lt;th&gt;美術&lt;/th&gt;
&lt;th&gt;情報技術&lt;/th&gt;
&lt;th&gt;その他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;11,324&lt;/td&gt;
&lt;td&gt;2,200&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;1,800&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;524&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;13,324&lt;/td&gt;
&lt;td&gt;2,500&lt;/td&gt;
&lt;td&gt;2,300&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;624&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;10,200&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;1,800&lt;/td&gt;
&lt;td&gt;1,500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;7,821&lt;/td&gt;
&lt;td&gt;1,500&lt;/td&gt;
&lt;td&gt;1,400&lt;/td&gt;
&lt;td&gt;1,200&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;421&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024&lt;/td&gt;
&lt;td&gt;3,957&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;257&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2025&lt;/td&gt;
&lt;td&gt;2,146&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;データについて&#34;&gt;データについて
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;江西省教育庁・人事社会保障庁の過去の採用告知および公式統計（2020～2024年は実態採用数、2025年は計画数）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学科分类&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;専門職教員は、主に農村義務教育段階の教科を対象とし、2025年には主要科目ポストを少数のみ維持する。&lt;/li&gt;
&lt;li&gt;国教員は全ての学年をカバーし、教科の設置もより網羅的で、幼児教育や特別支援教育などを含みます（データが細かく分類されていないため、個別に列挙されていません）。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;趋势分析&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;2025年の特別職教員採用数は2020年に比べて99.5%減少し、国費負担教員も81.1%減少。これは人口構造の変化と教育資源の調整を反映している。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学科冷热&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;主要科目（国語、数学、英語）の割合は安定しているものの、採用数は年々減少している。&lt;/li&gt;
&lt;li&gt;音体美などの学科の割合は増加しているものの、絶対数は限られている（例えば2025年の音体美では各2名のみ採用予定）。&lt;/li&gt;
&lt;li&gt;一部の学科（英語など）で、生徒数減少のため入学停止が発生している。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;政策背景&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;「退一補一」政策を推進し、新規採用を厳しく管理した結果、2024年の定員外ポストの割合は68.6%に達した。&lt;/li&gt;
&lt;li&gt;教員採用は職業教育や遠隔地に重点が置かれ、従来の中小学校の採用は大幅に縮小される。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完全なデータ取得のご提案&#34;&gt;完全なデータ取得のご提案
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;官方渠道&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;江西省教育庁ウェブサイト（http://jyt.jiangxi.gov.cn）&lt;/li&gt;
&lt;li&gt;江西省人事社会保障庁ウェブサイト（http://rst.jiangxi.gov.cn）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;工具推荐&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;江西省人事試験網（http://www.jxpta.com）：過去の採用職種一覧ダウンロード。&lt;/li&gt;
&lt;li&gt;江西省の特任教員に関するデータ。（江西智慧教育プラットフォーム：http://www.jxedu.gov.cn）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;注意事项&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;2025年度の一部専攻（情報技術など）の募集人数は0となる予定ですが、補足として編入学生を受け入れる可能性があります。&lt;/li&gt;
&lt;li&gt;専門分野の分類は年度によって異なる場合がある（例：「道徳と法」と「思想政治」の統合）。当年の告示による。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;より詳細な学科別職位分布や地域細分データが必要な場合は、地元の教育委員会に直接連絡するか、公式採用システムでご確認ください。&lt;/p&gt;</description>
        </item>
        <item>
        <title>フォークされたリポジトリへのPull Requestのマージ</title>
        <link>https://ttf248.life/ja/p/merge-pullrequest-to-fork-repository/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/merge-pullrequest-to-fork-repository/</guid>
        <description>&lt;p&gt;GitHub プロフィール統計情報ジェネレーターで、ユーザーは自身の GitHub プロフィールに様々な統計情報やグラフを表示できます。多様なカスタマイズオプションが用意されており、ユーザーのニーズに合わせて調整可能です。&lt;/p&gt;
&lt;p&gt;筆者は倉庫の管理をプロジェクトごとに分けていますが、GitHubでは倉庫のグループ化がサポートされていないため、異なる組織に分割して対応しています。最新ブランチは複数の組織にまたがる倉庫の統計に対応していないため、筆者はフォークしたブランチに該当コードをマージしました。&lt;/p&gt;
&lt;h2 id=&#34;最終効果&#34;&gt;最終効果
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;プルリクエスト元のurl&#34;&gt;プルリクエスト元のURL
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adds the ability to include data from organization repositories&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;フォークされたリポジトリへのpull-requestのマージ&#34;&gt;フォークされたリポジトリへのPull Requestのマージ
&lt;/h2&gt;&lt;p&gt;特定の &lt;strong&gt;Pull Request (PR)&lt;/strong&gt; をあなたの &lt;strong&gt;fork 的仓库&lt;/strong&gt; に統合する方法はいくつかあり、それは何をしたいかによります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;フォークにPRをマージしますか、それとも？&lt;/li&gt;
&lt;li&gt;他の人のフォークからPRをあなたのフォークにマージする、または&lt;/li&gt;
&lt;li&gt;フォークされたリポジトリからのプルリクエストをマージする (例：誰かがあなたのフォークにプルリクエストを提出した場合)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;まず、最も一般的なシナリオをご紹介します：&lt;strong&gt;你 fork 了一个仓库，想把上游的某个 PR 合并到你的 fork&lt;/strong&gt;。手順は以下の通りです👇：&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方法一コマンドライン方式最も汎用的&#34;&gt;方法一：コマンドライン方式（最も汎用的）
&lt;/h3&gt;&lt;h4 id=&#34;ステップ1自分のフォークをクローンする&#34;&gt;ステップ1：自分のフォークをクローンする
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/你的用户名/仓库名.git
cd 仓库名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ-2upstreamオリジナルリポジトリのアドレスを追加&#34;&gt;ステップ 2：upstream（オリジナルリポジトリのアドレス）を追加
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/原作者用户名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ3アップストリームのprブランチをリベースする&#34;&gt;ステップ3：アップストリームのPRブランチをリベースする。
&lt;/h4&gt;&lt;p&gt;PR番号（例：PR#123）を見つけます。&lt;/p&gt;
&lt;p&gt;このPRのコードは、次のように取得できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;ステップ４ブランチの切り替えとマージ&#34;&gt;ステップ４：ブランチの切り替えとマージ
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # 或者你自己的目标分支
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もしすべてが正常であれば、あなたのフォークしたGitHubリポジトリにプッシュできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;方法二github-网页界面简单但有限-第二の方法githubウェブインターフェース簡単だが機能は限られている&#34;&gt;方法二：GitHub 网页界面（简单但有限） 第二の方法：GitHubウェブインターフェース（簡単だが機能は限られている）
&lt;/h3&gt;&lt;p&gt;GitHubのウェブページで、あるPRがアップストリームリポジトリへのものである場合、あなたは：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PRページにアクセスしてください。&lt;/li&gt;
&lt;li&gt;右上隅の「&lt;strong&gt;Commits&lt;/strong&gt;」または「&lt;strong&gt;Files changed&lt;/strong&gt;」をクリックして、このPRがどのブランチに基づいているかを確認してください。&lt;/li&gt;
&lt;li&gt;あなたのフォークページで新しいブランチを作成し、手動でPRのコミットをcherry-pickしてください。（Gitの知識が必要です。）&lt;/li&gt;
&lt;li&gt;または「&lt;strong&gt;Open in GitHub Desktop&lt;/strong&gt;」をクリックし、GUIツールで結合してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-他の人があなたのフォークにprをリクエストしてきた場合&#34;&gt;🚀 他の人があなたのフォークにPRをリクエストしてきた場合。
&lt;/h3&gt;&lt;p&gt;PRページに直接入り、「&lt;strong&gt;Merge pull request&lt;/strong&gt;」ボタンをクリックしてください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今の状況（例えばPRリンクや、ウェブページかコマンドラインか）に合わせて、手順を詳しく説明しましょうか？具体的なURLを送っていただければ、一番簡単な方法を分析します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>コミットメッセージの修正履歴（Git）</title>
        <link>https://ttf248.life/ja/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;スクリプトは、git filter-branch を使用して、Git の履歴コミットの作成者情報を一括で修正するものです。&lt;/p&gt;
&lt;p&gt;提供されたスクリプトは、Git リポジトリの過去のコミットをまとめて変更するためのもので、全体的なコンセプトは正しいですが、(&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 的 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 中使用数组（如 &lt;strong&gt;INLINE_CODE_2&lt;/strong&gt;）可能会导致兼容性问题，因为某些 shell 环境（如 &lt;strong&gt;INLINE_CODE_3&lt;/strong&gt;）では配列構文はサポートされていません。&lt;/p&gt;
&lt;p&gt;互換性を高めるため、配列をスペースで区切られた文字列に置き換え、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; ループを使用して各古いメールアドレスを反復処理することを推奨します。以下は修正後のスクリプト例です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;スクリプト実行前に、予期せぬ事態を防ぐため、リポジトリのバックアップを推奨します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この操作はGitの履歴を上書きし、コミットの作成者情報を変更するため、コミットハッシュ値が変化する可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;変更をリモートリポジトリにプッシュ済みの場合は、強制プッシュが必要です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --force --tags origin &#39;refs/heads/*&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;強制プッシュは慎重に行ってください。特に複数人で共同作業しているプロジェクトでは、他者に影響を与えないよう注意が必要です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;倉庫内の重複しない著者メールアドレスを統計する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>医学教育の天国と、董襲瑩事件のバタフライ効果</title>
        <link>https://ttf248.life/ja/p/medical-education-sky-dong-xiying-butterfly-effect/</link>
        <pubDate>Wed, 07 May 2025 01:08:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/medical-education-sky-dong-xiying-butterfly-effect/</guid>
        <description>&lt;p&gt;北京協和「4+4」プロジェクト（4年間の非医学系学部 + 4年間の医学博士課程）は、学際的なエリート育成を謳いながら、2025年の董襲瑩事件によって、家庭環境（医学/研究家世帯）を利用した入学、学歴の曖昧性、論文の盗用疑惑が露呈し、このモデルのエリート採用と公平性の矛盾、学習期間の短縮およびインターンシップに関する論争が未解決となっている。&lt;/p&gt;
&lt;h2 id=&#34;プロンプト&#34;&gt;プロンプト
&lt;/h2&gt;&lt;p&gt;ブログ執筆：協和4+4の来歴と真相。ポイントは、天宮の一角、俗人が見ること、董（トウ）さんのご家族のバックグラウンド。通常の医学博士では8年間で卒業は不可能、董さんのご家族と学歴。&lt;/p&gt;
&lt;h2 id=&#34;協和44解体された医学教育の天宮&#34;&gt;協和4+4：解体された医学教育の「天宮」
&lt;/h2&gt;&lt;p&gt;北京協和医学院の「4+4」プロジェクトは、2018年の開始以来、中国医学教育の「天宮（てんきゅう）」と見なされています。このアメリカの医学教育システムを模倣したプロジェクトは、「多様な専門知識を持つ人材を受け入れ、医療への情熱を持つ者を迎え入れ、天下の英才を集める」という理念のもとに、伝統的な医学教育システムに新たな風穴を開こうとしています。その核心となる論理は、&lt;strong&gt;学際的なバックグラウンドを持つ学生を育成し、学際的な医学リーダーを養成する&lt;/strong&gt;ことです。&lt;/p&gt;
&lt;p&gt;このモデルの「天宮」属性は、3つの次元に現れています。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当初は、QS、タイムズ、USニュースのランキングで上位50校、またはUSニュース文理大学院トップ10（バーナードカレッジなど）からの応募者を求めていましたが、その後、ランキング100位以内まで対象を拡大し、GPA 3.6以上、もしくは成績上位30％以内という条件は維持しています。&lt;/li&gt;
&lt;li&gt;アメリカ式の臓器・システム統合型カリキュラム、PBL（課題ベーストラーニング）を採用し、学生は4年間で解剖学、病理学などのコア科目を修了し、臨床実習に参加する必要があります。&lt;/li&gt;
&lt;li&gt;医師国家試験の合格率は若干下回るものの（95.2% vs 98.5%）、卒業生は多くが総合病院に進み、キャリアパスに大きな違いは見られない。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;董襲瑩事件凡人が垣間見る天宮の罅割れ&#34;&gt;董襲瑩事件：凡人が垣間見る「天宮」の罅割れ
&lt;/h2&gt;&lt;p&gt;2025年4月、中日友好病院の胸部外科医である肖飛が結婚中に不倫をしていたという告発を受け、その事件は意外にも協和4+4プロジェクトの「神秘的なベール」を剥がした。関係者である董襲瑩の経歴に対して三重の疑問が生じている：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;学历背景的模糊性&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;董襲瑩はコロンビア大学卒業と称するが、実際には独立カレッジのバーナード・カレッジ（2025年US News文理学院ランキング14位）を卒業している。同校は「文理学院トップ20」に該当するものの、卒業証書には「バーナード・カレッジ」と「コロンビア大学」の両方が記載されており、国内採用市場ではコロンビア本部の卒業生と誤認される可能性がある。&lt;/li&gt;
&lt;li&gt;経済学の学士+臨床医学の博士というルートは、4+4プロジェクトにおける「多岐にわたる分野」の位置づけには合致するものの、医学予備教育の基礎が欠如していると疑問視されている。また、博士論文『クロスモーダル画像融合技術が医療画像解析に応用される研究』は、北京科技大学の発明特許との高度な類似性が指摘され、不正行為の疑いがある。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;家庭背景的特殊性&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;父親は中冶建研院の书记、母親は北京科技大学工学技術研究院の副院长、祖父は協和医科大学影像学の院士、外祖父は材料学分野の外籍院士、そして叔父と叔母も北京科技大学の博導である。この「医学＋科研＋高校」という複合的な家庭環境が、推薦状（生物医学の副教授2名の推薦が必要）、科研協力（北京科技大学の特許など）といった潜在的な資源を提供している。&lt;/li&gt;
&lt;li&gt;研修期間中に胸外科から泌尿外科へ異動し、整形外科、消化器内科、画像診断など多岐にわたる分野を研究していることから、「資源の利用」と疑問視されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;学制争议的放大&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;伝統医学の博士号取得には11年（5+3+3）が必要だが、4+4プログラムではその期間を8年に短縮できる。順天堂大学は「カリキュラム統合」と「早期臨床」を強調しているものの、一部医師は、臨床実習時間（12ヶ月）が従来の8年制（18ヶ月）よりも短いことを指摘しており、技能の蓄積に影響が出る可能性があると懸念している。&lt;/li&gt;
&lt;li&gt;一部の技能実習基地で、4+4卒業生に1年の技能実習免除が認められ、業界の公平性を損なうとの批判が出ている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;論争の背景にある医学教育の現状&#34;&gt;論争の背景にある医学教育の現状
&lt;/h2&gt;&lt;p&gt;董襲瑩事件は、中国の医学教育における根深い矛盾を映し出す。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;精英化与公平性的冲突&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;4+4プロジェクトの「申請・審査制」は、本質的にアメリカの医学部モデルを移植したものであり、中国にはMCATのような標準化試験がなく、推薦状や研究経験といった主観的な評価は家庭環境の影響を受けやすい。&lt;/li&gt;
&lt;li&gt;データによると、2023年の4+4卒業生の中で、30％が清華・北京大・復旦の出身で、25％が海外の名門大学出身。家庭環境が申請に大きく影響していることが示されている。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;学制改革的现实困境&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;4+4学生による研究成果（論文数など）は、従来型の8年制に比べて著しく低く、「臨床重視で研究がおろそか」と指摘されている。&lt;/li&gt;
&lt;li&gt;三甲医院は協和のブランド名を重視する一方、基層病院は4+4制度卒業生の臨床能力に慎重な姿勢を示している。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;医学教育的国际接轨之惑&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;アメリカの4+4モデルはMCAT試験と3〜7年の研修が必要ですが、中国の4+4プログラムは入学と研修のプロセスを簡略化し、「形は似て中身は違う」という結果になっています。&lt;/li&gt;
&lt;li&gt;文部科学省のデータによると、2024年の全国医博入学において、4+4プログラムの占める割合は5%未満で、その大規模な普及には依然として抵抗がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論医学教育の天宮秩序の再構築&#34;&gt;結論：医学教育の「天宮」秩序の再構築
&lt;/h2&gt;&lt;p&gt;協和4+4プロジェクトの論争は、本質的にエリート教育と大衆の期待との衝突である。 「天宮」の一角が一般人によって垣間見られたことで露呈したのは、単なる個別事例の瑕疵だけでなく、医学教育システム全体の深層矛盾である。 今後の改革は、3つのレベルで力を入れる必要がある：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;標準化試験（中国版MCATなど）を導入し、推薦状などの主観的な要素の影響を軽減する。&lt;/li&gt;
&lt;li&gt;卒業生の臨床研修期間を3年に戻し、臨床能力の基準達成を確実にする。&lt;/li&gt;
&lt;li&gt;学術誠実性の審査メカニズムを構築し、学際的研究について厳格な新規性検証を行う。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;医学教育の「天宮」は、ごく少数の特権ではなく、真に医学のエリートを育成する揺りかごとなるべきだ。「選抜メカニズムの公平性」「養成プロセスの厳密さ」「キャリア発展の規範性」が全面的に保障されなければ、「天宮実験」は真に根付かない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>関税嵐、株式市場の暴落</title>
        <link>https://ttf248.life/ja/p/tariffs-storm-stock-market-crash/</link>
        <pubDate>Tue, 08 Apr 2025 03:49:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/tariffs-storm-stock-market-crash/</guid>
        <description>&lt;p&gt;最近、世界株式市場は急激な変動を経験しており、その主な原因は米国大統領ドナルド・トランプ氏が発表した新たな包括的な関税措置によるもので、市場では世界貿易戦争と景気後退への懸念が高まっている。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;トランプ大統領は先週、全ての輸入品に高額な関税を課すことを発表しました。特に中国からの輸入品には最大50%の関税が追加され、彼自身が「不公平」と主張するグローバル貿易体制を修正することを目的としています。この措置により、世界市場ではパニック売りが発生し、投資家は貿易緊張の高まりが世界経済成長を抑制するのではないかと懸念しています。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;アメリカで主要株価指が大幅に下落しました。ダウ工業平均は1,200点以上、ナスダック総合指数は4％、S&amp;amp;P500指数は3.8％の下落となり、ベアマーケット圏に入りました。アジアとヨーロッパ市場も同様に影響を受け、日経平均株価は約8％、欧州株式市場は6％下落しました。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;市場の変動を受け、投資家は債券や円などの安全資産にシフトしている。しかしながら、市場のボラティリティ指数（VIX）が60を上回っており、市場のパニック心理が高まっていることを示唆している。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;経済学者は、関税政策が米国経済を「スタグフレーション」に陥れる可能性があると警告している。「スタグフレーション」とは、経済成長の停滞、インフレの上昇、そして高い失業率が同時に存在する状況を指す。モルガン・スタンレーは、2025年の米国経済の景気後退確率を60%に引き上げた。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;各国の政府は相次いで報復措置を表明している。例えば、EUの貿易担当者は4月15日から米国製品への報復関税を発動すると述べた。また、企業界も懸念を示しており、高盛などのウォール街の金融機関は米国経済の景気後退確率を45%に引き上げた。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;現在、世界市場はかつてない課題に直面しており、投資家は貿易政策の動向と市場の変化を注視し、リスク管理と資産配分を行う必要があります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>暇つぶしに、中国の水墨画風のテーマをデザインしてみようかな。</title>
        <link>https://ttf248.life/ja/p/chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;カラフルなホームページを見飽きたので、急にシンプルなデザインにしたくなり、中国の水墨画風のテーマを作りたい。&lt;/p&gt;
&lt;p&gt;スタイルシートは現在、要素ごとに特定のスタイルが設定され、テーマのデフォルトスタイルを上書きするように変更されています。&lt;/p&gt;
&lt;p&gt;再構築なしでAIに直接新しいテーマを生成させると、結果は非常に不安定です。&lt;/p&gt;
&lt;p&gt;たまたまtrae claudeの大規模言語モデルの待ち行列に遭遇し、VSCodeエージェントモードに切り替えたところ、効果は非常に悪く、修正したものはデザイン性が全くない。&lt;/p&gt;
&lt;p&gt;結局、やはり自分自身がフロントエンドを理解していないため、AIに効果的にタスクを分解して割り当てることができない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>幅広いインデックス投資：証券ETF、ハン・セン・テック指数</title>
        <link>https://ttf248.life/ja/p/etf-wide-index-dzt-broker-etfs-hangsheng-tech-index/</link>
        <pubDate>Thu, 27 Mar 2025 21:58:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/etf-wide-index-dzt-broker-etfs-hangsheng-tech-index/</guid>
        <description>&lt;p&gt;前からやりたいと思っていたこと、相応しい優良株を買ってあとはほったらかしにするはずだったのに、下落したときは様子を見て買い増しもしないで、上昇したら売ってしまう。結局、それができなかった。&lt;/p&gt;
&lt;p&gt;良い青色株を探すのも面倒なら、広い範囲のインデックスを選んでETFを買えばいい。現在の計画は、証券ETFとハンガリーテック指数。&lt;/p&gt;
&lt;p&gt;上記のような取引手法には、専門用語で「左方高仕（さほうこうし） 」があります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后续呢计划选择一个宽基指数来彻底的实践一下，能跑赢定期存款的收益率就行&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;証券etf&#34;&gt;証券ETF
&lt;/h2&gt;&lt;p&gt;証券ETFとは、主に中国の証券会社を投資対象とする上場投資信託（ETF）のことです。中国株式市場に上場している証券会社の株式を中心に投資し、中国証券会社指数など特定の指数を追跡することが一般的です。&lt;/p&gt;
&lt;p&gt;以前買ったことがありますが、その時は高値に乗ってしまい、結局損して手放しました。中国の市場は、毎回強気相場になると証券会社は必ず上昇します。どれだけ上がるかは、投資家心理次第です。&lt;/p&gt;
&lt;h2 id=&#34;恒生科技指数&#34;&gt;恒生科技指数
&lt;/h2&gt;&lt;p&gt;恒生科技指数は、香港証券取引所が提供する株式指数であり、香港市場におけるテクノロジー業界全体の動向を反映することを目的としています。インターネット、電子商取引、クラウドコンピューティング、人工知能など、複数の分野を網羅する香港に上場している主要なテクノロジー企業で構成されています。&lt;/p&gt;
&lt;p&gt;2025年5月20日現在、香港ハンセン・テクノロジー指数（コード：800700）の構成銘柄上位10銘柄とその構成比率は以下の通りです（複数の信頼できる情報源からのデータ）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;小米集团-W&lt;/strong&gt;（01810.HK）：約8.82%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;腾讯控股&lt;/strong&gt;（00700.HK）：約8.14%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阿里巴巴-W&lt;/strong&gt;（09988.HK）：約7.72%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;京东集团-SW&lt;/strong&gt;（09618.HK）：約7.60%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;美团-W&lt;/strong&gt;（03690.HK）：約7.35%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快手-W&lt;/strong&gt;（01024.HK）：約6.10%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理想汽车-W&lt;/strong&gt;（02015.HK）：約6.09%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中芯国际&lt;/strong&gt;（00981.HK）：約5.70%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网易-S&lt;/strong&gt;（09999.HK）：約4.59%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;携程集团-S&lt;/strong&gt;（09961.HK）：約4.48%&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;約66.6%（一部の情報では上位10社の合計が68%-69%とのこと。統計時期による差異が生じている）。&lt;/p&gt;
&lt;h3 id=&#34;主な注意点&#34;&gt;主な注意点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;恒生科技指数は、個別銘柄のウエイトに8%の上限を設定しています。例えば、中芯国際は2025年3月の調整前に8%を超えるウエイトでしたが、その後パッシブ戦略によりコンプライアンス範囲内に減らされました。&lt;/li&gt;
&lt;li&gt;2025年5月16日、恒生指数会社はBYD股份（01211.HK）を指数に組み入れ、阅文集团（00772.HK）を除外し、調整は6月6日に発効すると発表。したがって、現時点（5月20日）では、構成銘柄は調整前のリストに基づき、BYDは未計上である。&lt;/li&gt;
&lt;li&gt;上位10銘柄では、インターネットテクノロジー企業（テンセント、アリババ、美団など）が中心であり、新エネルギー車（小米、理想）や半導体（中国集積回路製造国際）の比重も大きく、指数がテクノロジーと新経済を網羅していることが反映されている。&lt;/li&gt;
&lt;li&gt;データソースの違いは、主に統計時点の差異によるものである。例えば、2025年3月のデータでは上位10社の合計が約69.4%を占める一方、5月14日のデータでは68.82%であり、市場変動が重みに与える影響を示す。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;左側下落のカバー買い&#34;&gt;左側下落のカバー買い
&lt;/h2&gt;&lt;p&gt;「左方安着法」とは、株式価格が継続的に下落する中で、投資家が株価が底圏に近づくことを予想し、保有コストを削減するために積極的に段階的に買い入れ、将来の価格上昇による利益を期待する投資戦略のことです。&lt;/p&gt;
&lt;p&gt;この手法は「左側取引」に分類され、市場が明確な底を付ける前に逆行する取引です。具体的な操作では、投資家は通常、「ピラミッド式」の積立戦略を採用し、株価下落とともに買い増しの数量を段階的に増やして平均購入単価を薄めます。例えば、最初に一定数の株式を購入した後、株価がさらに下落した場合は、より低い価格で買い付け量を増やし、この方法を繰り返します。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下落中に段階的に買い入れを行い、平均購入単価を抑え、将来の利益を生み出すための準備をする。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;市場が転換する前（まだ転換していない段階）にポジションを構築すれば、判断が正しければ、相場が好転した際に大きな利益を得ることができる。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;株価が下落し続けると、より大きな損失につながる可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;十分な資金サポートによる継続的な買い付けが必要であり、資金が長期的に拘束される可能性もあります。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相対的に、「右側取引」は、市場トレンドが明確になり、株価の回復兆候が見てから買いを入れる手法で、リスクは比較的低いものの、反発初期の利益を逃す可能性がある。したがって、投資家は自身の許容できるリスク、資金状況、そして市場判断に基づき、適切な取引戦略を選択すべきである。&lt;/p&gt;
&lt;h2 id=&#34;評価理論&#34;&gt;評価理論
&lt;/h2&gt;&lt;p&gt;評価理論は、金融学における主要な概念であり、資産や企業の本来の価値を評価し、投資決定の根拠を提供することを目的としています。評価を通じて、投資家は資産の現在の市場価格が妥当かどうかを判断し、それに応じて投資戦略を策定することができます。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;その手法は、将来見込まれる資産からのキャッシュフローを基礎とし、適切な割引率で現在価値に換算するものです。DCF法は、企業の内在価値を重視し、収益性が安定しており予測可能な企業の実評価に適しています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;この手法は、目標会社と競合他社のバリュエーション指標（PER、PBR、PSRなど）を比較することで、企業の相対的な価値を評価する。相対評価法は手軽に実施でき、迅速な評価や業界比較に広く用いられる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;その方法は、企業の純資産価値（総資産から負債を差し引いた残高）を評価することで、企業の価値を決定する。資産基礎法は、不動産会社や資本集約型企業などの資産主導型の企業に適している。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;評価を通じて、投資家は割安または過大評価の資産を特定し、売買戦略を立てることができます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M&amp;amp;A取引において、企業評価は取引価格を決定する上で重要であり、その成否に影響を与える。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;公正価値評価を実施し、財務諸表の正確性と透明性を確保する必要がある。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;評価結果は、市場環境、企業運営状況、マクロ経済指標など、様々な要因の影響を受けます。そのため、評価を行う際は、これらの要素を総合的に考慮し、定性的・定量的な分析を組み合わせることで、より正確な評価結果を得ることが重要です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>コードを書かずに、カスタム銘柄選択モジュールを設計・開発する。</title>
        <link>https://ttf248.life/ja/p/no-code-design-develop-custom-stock-module/</link>
        <pubDate>Thu, 27 Feb 2025 23:20:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/no-code-design-develop-custom-stock-module/</guid>
        <description>&lt;p&gt;先月、Cursor を試用しましたが、無料枠の制限により、複雑な機能開発は行わず、簡単なテストにとどまりました。その際、ByteDance も同様の商品をリリースしていることがわかり、両者とも基盤となる大規模言語モデルは Claude-3.5 です。&lt;/p&gt;
&lt;p&gt;バイトのプロダクトTrae、まずMac版が先行してリリースされ、今年の2月になってようやくWindows版も登場しました。大手企業のものはやはり良いですね。無料で利用でき、お金を払わずにClaude-3.5を無制限に使えるのは素晴らしいです。このモデルの効果はなかなか良いです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;結局、K線図の開発でつまずいてしまいました。Reactの知識がほとんどないため、諦めざるを得ませんでした。開発を続けたい場合は、筆者がフロントエンドの基礎知識を補強し、タスクをより細かく分割する必要があります。いきなり「K線図の開発」という大きな課題を与えるのではなくです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;発見された問題&#34;&gt;発見された問題
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;海外のAIモデルを利用するため、Vue3 + Element-Plus の学習データが不足しているため、React をフロントエンドフレームワークとして採用しました。&lt;/li&gt;
&lt;li&gt;可能性はありますが、文法的な誤りが発生する可能性があり、手動での修正が必要です。&lt;/li&gt;
&lt;li&gt;複雑な問題の解決には、手動での指示が必要です。&lt;/li&gt;
&lt;li&gt;コード構造の最適化には人的指導が必要です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最も時間がかかったのは、フロントエンドコードをコンテナにパッケージ化することです。筆者は全くの初心者__INLINE_CODE_0__ __INLINE_CODE_1__で、概念がありませんでした。途中で助けを借りたおかげで、ようやく対応するロジックを理解することができました。フロントエンドの開発環境（devモード）とビルドモードでは、コードのチェックに関して大きな違いがあります。バックエンドデータベースとサービスのコンテナスクリプトは、合わせて5分で終わりました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI 目前更多的提高开发的效率，你有基础是最好的，并不是 AI 会帮你解决所有的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;倉庫住所&#34;&gt;倉庫住所
&lt;/h2&gt;&lt;p&gt;タイトル通り、今回は書かずにAIと直接対話し、独自の株式モジュールを設計・開発します。最終的に何ができるか見てみましょう。&lt;/p&gt;
&lt;p&gt;倉庫住所：&lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/trae-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/trae-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;詳細な使用方法は、リポジトリのREADME.mdファイルを参照してください。&lt;/p&gt;
&lt;p&gt;倉庫には多くの提出記録が含まれており、そのほとんどが私とTraeとの会話記録、そして私がTraeのいくつかの機能をテストした記録です。それぞれの機能を実現するために手動介入を行ったかどうかを注記しています。&lt;/p&gt;
&lt;h2 id=&#34;prompt&#34;&gt;Prompt
&lt;/h2&gt;&lt;p&gt;プロジェクトはゼロから作成され、以下にプロンプトを示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;基于项目原型图，开发功能：自选股，需要支持合约的新增、删除、修改、查询。自选股界面需要展示基础的行情数据。支持多个不同的市场切换。

前端：react
后端：golang gin gorm
数据库：PostgreSQL

服务端需要支持跨域请求，同时需要考虑数据的校验和错误处理，如果后端服务不可用，前端需要告警提示。

后端需要展示请求和应答的日志；前端也打印通讯的日志，方便排查问题。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ユーザーインターフェースとインタラクションの最適化&#34;&gt;ユーザーインターフェースとインタラクションの最適化
&lt;/h2&gt;&lt;p&gt;フロントエンドの設計は完全にGrokに依存しており、まずTraeでプロダクトの原型を作成しましたが、デザイン性は欠けていました。使用しているモデルはコード生成能力は高いものの、他の能力が弱いので、Grokを使ってフロントエンドUIを最適化する必要があります。&lt;/p&gt;
&lt;p&gt;現在のインターフェースのスクリーンショットをGrokにアップロードし、UI最適化のアドバイスをもらう。その中から手動で評価したものをTaeにコピーして実行し、効果を確認する。&lt;/p&gt;
&lt;h3 id=&#34;技術スタック&#34;&gt;技術スタック
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;フロントエンド：React + TypeScript&lt;/li&gt;
&lt;li&gt;バックエンド：Golang + Gin + GORM&lt;/li&gt;
&lt;li&gt;データベース：PostgreSQL 17&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;システムアーキテクチャ&#34;&gt;システムアーキテクチャ
&lt;/h2&gt;&lt;h2 id=&#34;バックエンドアーキテクチャ&#34;&gt;バックエンドアーキテクチャ
&lt;/h2&gt;&lt;p&gt;バックエンドはGolangのGinフレームワークでRESTful APIを実装しており、主なモジュールは以下の通りです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GORM を ORM フレームワークとして使用する。&lt;/li&gt;
&lt;li&gt;環境変数でデータベース接続を設定することを推奨します。&lt;/li&gt;
&lt;li&gt;自動データベーステーブル移行&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RESTful API 設計&lt;/li&gt;
&lt;li&gt;統一されたエラー処理メカニズム&lt;/li&gt;
&lt;li&gt;内蔵リクエストログ&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ローカル開発環境でのクロスドメインをサポート&lt;/li&gt;
&lt;li&gt;設定可能なCORSポリシー&lt;/li&gt;
&lt;li&gt;Cookie 跨ドメイン対応&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;フロントエンドアーキテクチャ&#34;&gt;フロントエンドアーキテクチャ
&lt;/h2&gt;&lt;p&gt;React + TypeScript を使用して構築され、以下の機能を実装しています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;株式リスト表示&lt;/li&gt;
&lt;li&gt;銘柄選択管理&lt;/li&gt;
&lt;li&gt;市場データ表示&lt;/li&gt;
&lt;li&gt;エラー通知メカニズム&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>AI 開発二年：ドッカーリリース前の状態に似ている。</title>
        <link>https://ttf248.life/ja/p/ai-development-two-years-docker-pre-release/</link>
        <pubDate>Thu, 20 Feb 2025 18:16:37 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-development-two-years-docker-pre-release/</guid>
        <description>&lt;p&gt;人工知能（AI）は近年、技術分野で最も議論されている話題の一つであり、特に過去2年間でAI技術は急速な進歩を遂げました。深層学習、自然言語処理、コンピュータビジョン、自動化意思決定システムなど、AIの応用範囲は広がり続けています。しかしながら、技術が不断に突破口を開いても、AIはDockerリリース前のボトルネックと同様に、市場を真に引き金となるような画期的なアプリケーションが不足しているという課題を抱えています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AIの発展も2年ほど経ち、Dockerがリリースされる前のような状況で、現状では決定的なキラーアプリケーションは存在しない。しかし、既存技術を基盤として、完璧な実用化シナリオを作り出すことができれば、Dockerのように、必ずしも新しい技術に頼る必要はなくとも、運用や開発のワークフローを変革するような、合理的な全体像が実現するだろう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;aiの現状技術は成熟しているが応用はまだブレークスルーが必要&#34;&gt;AIの現状：技術は成熟しているが、応用はまだブレークスルーが必要。
&lt;/h2&gt;&lt;p&gt;技術的な側面から見ると、AIは過去2年間で著しい進歩を遂げています。OpenAIのGPTシリーズやGoogleのBERT、DeepMindのAlphaシリーズなど、AIの処理能力は以前の予想を大きく上回っています。特に自然言語処理分野においては、GPT-4などのモデルが強力な生成能力に加え、理解と推論においても驚くべきパフォーマンスを示しています。&lt;/p&gt;
&lt;p&gt;しかしながら、技術は日進月歩とは言えども、AIの現実的な応用には一定の課題が残る。Dockerリリース前の状況に似ており、AIの潜在能力は大きいものの、広範な普及や産業を変革する真に画期的なアプリケーションはまだ登場していない。多くの人がAIの将来性について語っているが、革命的な変化をもたらす直接的な応用事例を見つけるのは容易ではない。多くのAIアプリケーションは依然として初期段階にとどまっており、大部分はさらなる統合と最適化が必要である。&lt;/p&gt;
&lt;h2 id=&#34;dockerとaiの類似点技術そのものではなく解決策が重要&#34;&gt;DockerとAIの類似点：技術そのものではなく、解決策が重要
&lt;/h2&gt;&lt;p&gt;もしDockerリリース前の歴史を振り返れば、当時の技術環境とAIの現状には多くの類似点が見て取れることに気づくでしょう。Dockerが登場する以前から、コンテナ技術は決して新しいものではありませんでした。LXC（Linux Containers）や仮想化技術など、すでにコンテナ化に必要な基本的な機能は存在していました。しかし、Dockerは既存技術を巧みに統合・最適化し、よりシンプルで直感的かつ効率的なソリューションを提示しました。画期的な技術ではありませんでしたが、運用や開発プロセスにおける多くの課題を解決し、ソフトウェアのデプロイ、拡張、管理プロセスを大幅に簡素化しました。&lt;/p&gt;
&lt;p&gt;同様に、AI分野も類似の状況に直面している。「目新しさ」は薄れたものの、現在のAI技術が真に大規模な応用を実現するには、Dockerのように既存技術を統合・最適化し、合理的な応用プランを構築する必要がある。画期的なAIアプリケーションとは、必ずしも新しい技術革新に依存するものではなく、むしろ既存技術を統合して、実際のビジネスにおける課題やニーズを解決することにあるかもしれない。&lt;/p&gt;
&lt;h2 id=&#34;aiのdocker瞬間はどう見つけるか&#34;&gt;AIの「Docker瞬間」は、どう見つけるか？
&lt;/h2&gt;&lt;p&gt;AI技術が真に広く普及するためには、いくつかの側面から取り組む必要があります。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
現在多くのAIの応用事例は実験的な性質が強く、大規模な実用化には至っていません。例えば、AIカスタマーサービスやスマートレコメンデーションといった分野では幅広い応用があるものの、機能には依然として多くの制約があり、業界のボトルネックを突破できていません。真のブレークスルーは、従来の方法に悩まされてきた医療、製造業、物流などの業界から生まれるかもしれません。AIは、より効率的なデータ処理や予測分析を通じて、これらの複雑な状況下で企業の効率向上とコスト削減に貢献できるでしょう。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
Dockerのように、コンテナ化プロセスを簡略化して運用効率を高めるように、AIプロダクトの使いやすさも同様に重要です。AIの普及は技術の普及であると同時に、製品化の普及でもあります。AIを日常業務に統合し、ユーザーが深い技術理解なしにこれらのツールを簡単に使えるようにすることが、AIを実用化するための重要な一歩です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
新しい技術の広範な応用は、エコシステムの構築なしには成り立ちません。Dockerが急速に台頭できたのは、そのオープン性と互換性のおかげで、開発者が様々なクラウドプラットフォーム、ツール、サービスとの連携を容易にできたからです。同様に、AIの未来もエコシステム構築にかかっています。AIの標準化、モデルの共有、データの公開、そして技術の統合性は、AIが広範な産業応用を形成するかどうかを左右します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;結論aiの未来は可能性に満ちているがより完善した着地点が必要である&#34;&gt;結論：AIの未来は可能性に満ちているが、より完善した着地点が必要である。
&lt;/h2&gt;&lt;p&gt;AI技術はここ2年で目覚ましい進歩を遂げたものの、現状では「決定版アプリケーション」とは言えない段階です。Dockerの登場以前のコンテナ化技術と同様に、AIも現実的な応用シナリオを見出し、既存技術とビジネスニーズを深く融合させることで初めて大規模な展開と普及を実現できます。技術革新は重要ですが、プロセスを簡素化し効率を高めるソリューションこそが、技術の普及と発展を促進します。&lt;/p&gt;
&lt;p&gt;未来、AIはDockerのように、画期的な技術革新ではなく、既存技術の統合によって完璧なアプリケーションシーンを構築し、最終的に私たちの仕事や生活様式を変える可能性がある。&lt;/p&gt;</description>
        </item>
        <item>
        <title>プロトバッファのゼロ値の落とし穴：デフォルト値がビジネスロジックを密かに破滅させる</title>
        <link>https://ttf248.life/ja/p/protobuf-zero-value-traps/</link>
        <pubDate>Thu, 20 Feb 2025 15:26:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/protobuf-zero-value-traps/</guid>
        <description>&lt;p&gt;米国株には3つの取引時間帯があり、それぞれ盤前、盤中、盤後です。データインターフェースは、可能な限り帯域幅を節約するため、最初に全量データを送信し、その後はすべてのフィールドで増分データのみをプッシュするロジックを採用しています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;なぜ最適な方法を使わないのか？異なるプロジェクトチームが関わっていて、すでに何年も稼働しているものもある。当方は新規連携なので、できる限り互換性を保つしかない。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一連の問題&#34;&gt;一連の問題
&lt;/h2&gt;&lt;p&gt;概要だけ見れば、まだ問題なさそうに見えるかもしれない。しかし、システムアーキテクチャに問題が持ち込まれ、一連の問題を引き起こしている。先の問題を解決したと思えば、また新しい問題が発生し、それは以前の問題が原因だ。&lt;/p&gt;
&lt;h3 id=&#34;取引期間を識別できません&#34;&gt;取引期間を識別できません。
&lt;/h3&gt;&lt;p&gt;既知ディスク上の段階定義は、&lt;code&gt;protobuf&lt;/code&gt; 中定义为 0，但是在收到数据的时候由于是增量推送，业务方无法有效识别这个__INLINE_CODE_1__がデフォルト値か、実際のビジネス値かを指すものとします。&lt;/p&gt;
&lt;p&gt;毎回0を受け取ると、この0が新しいクォート設定の値なのか、protobufのデフォルト値なのかを判断できない。&lt;/p&gt;
&lt;h3 id=&#34;オプション導入&#34;&gt;オプション導入
&lt;/h3&gt;&lt;p&gt;Since protobuf release 3.15, proto3 supports using the optional keyword (just as in proto2) to give a scalar field presence information&lt;/p&gt;
&lt;p&gt;グループ内の通信プロトコルは、&lt;strong&gt;&lt;em&gt;5&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;3&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;6&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;4&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;7&lt;/em&gt;&lt;/strong&gt; に基づいており、プロジェクトの基盤が静的ライブラリとして提供されているため、コンパイルチェーン全体をアップグレードする必要があり、コストは非常に高い。&lt;/p&gt;
&lt;h3 id=&#34;gccのバージョン問題&#34;&gt;GCCのバージョン問題
&lt;/h3&gt;&lt;p&gt;なんとか案を思いついたものの、基盤で2つの異なるバージョンをリリースし、可能な限り &lt;code&gt;protobuf&lt;/code&gt; 新版本的编译依赖传播。但是在编译的时候，发现 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 版本太低，不支持 &lt;strong&gt;INLINE_CODE_2&lt;/strong&gt; の新機能を抑制する。&lt;/p&gt;
&lt;p&gt;チーム内でよく使用されるサーバーの種類：CentOS 7、CentOS 8。CentOS 7 のデフォルトバージョンは 7.4 以上であるため、CentOS 7 はサポートできません。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bug 82461 - [7 Regression] Temporary required for brace-initializing (non-literal-type) member variable&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最終、関連サービスのデプロイやコンパイルサーバーをCentOS 8に移行することで、この問題が解決した。&lt;/p&gt;
&lt;h2 id=&#34;合理な列挙&#34;&gt;合理な列挙
&lt;/h2&gt;&lt;p&gt;問題全体を振り返ると、実はもっと簡単で効率的な解決策があります。それは、列挙の定義を0からではなく1から始めるように調整することです。これにより、デフォルト値とビジネス値を効果的に区別でき、上記の様々な問題を回避できます。&lt;/p&gt;
&lt;h3 id=&#34;なぜ1から始めるのが妥当だろうか&#34;&gt;なぜ1から始めるのが妥当だろうか？
&lt;/h3&gt;&lt;p&gt;__INLINE_CODE_0__において、列挙型のデフォルト値は常に0に固定されています。もしビジネス上の意味を持つ値を0として定義した場合（例えば「盤中」）、増分プッシュ時に受信した0がビジネス値なのか未設定のデフォルト値なのかを判断することができません。しかし、列挙型を1から開始して定義すれば、0を有意義でないデフォルト値や「不明」な状態として保持できるため、問題は解決されます。&lt;/p&gt;
&lt;p&gt;推奨される実践：&lt;/p&gt;
&lt;p&gt;プロトバッファの列挙型を設計する際は、常に 0 を無意味なデフォルト値として定義してください（例：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 或 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;）。
実際のビジネス値を1から割り当て、デフォルト値の0と区別する。&lt;/p&gt;
&lt;p&gt;この小さな調整により、取引セッションの識別問題を解決するだけでなく、将来のプロトコル設計のための貴重な経験となりました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>祝日前の株式市場は「氷と炎の二重世界」：急上昇と急落の劇的な転換</title>
        <link>https://ttf248.life/ja/p/national-holiday-stock-market-rollercoaster/</link>
        <pubDate>Sat, 15 Feb 2025 03:42:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/national-holiday-stock-market-rollercoaster/</guid>
        <description>&lt;p&gt;2024年の国慶節前夕、中国株式市場は目覚ましい急騰を経験したが、祝日明けには劇的な暴落に見舞われた。「氷と火の二重世界」とも言えるこの状況は、投資家をジェットコースターのように翻弄するばかりでなく、政策、経済、そして市場の法則に対する深い考察を促した。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;昨年国慶節前の株式市場の急騰をテーマにブログ記事を作成し、最後に国慶節後の株価の大幅下落を盛り込むこと。報道記事のような文体で。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;祝祭日前株市場の急騰政策主導の熱狂&#34;&gt;祝祭日前株市場の急騰：政策主導の熱狂
&lt;/h2&gt;&lt;p&gt;2024年の国慶節前の５営業日で、中国株式市場は低迷から一転、「沸騰モード」に突入した。9月30日にはA株市場が底上げし、主要指数はいずれも過去最高値を更新。上海総合指数は8.06%、深証成指は10.67%、創業板指は15.36%の上昇となり、北証50指数に至っては史上最大の単日の上昇率22.84%を記録した。市場の熱狂的な高揚感から、滬深北三市場の日々の取引額は2兆6115億元に達し、前日比で1兆1559億元の大幅な増加となった。大半の5300超の銘柄が上昇し、「一斉赤字」の様相を呈した。&lt;/p&gt;
&lt;p&gt;今回の市場を牽引する原動力は、政府による一連の予想以上の政策発表と、それに伴う市場期待の変化に起因する。9月24日には中国人民銀行が預金準備率引き下げ、利下げ、既存住宅ローン金利の引き下げ、そして住宅ローンの最低頭金比率の統一を発表。9月26日の中央政治局会議では、財政・金融政策による逆周期調整を強化し、資本市場の活性化を目指すと強調。9月30日には4つの不動産支援策が相次いで発表された。これらの政策は、政府が市場と成長の安定に全力を尽くす決意を示すものだ。&lt;/p&gt;
&lt;h2 id=&#34;祝日後の株式市場の急落熱狂後の冷静と調整&#34;&gt;祝日後の株式市場の急落：熱狂後の冷静と調整
&lt;/h2&gt;&lt;p&gt;しかしながら、国慶節の祝祭期間明けから市場センチメントは急転直下した。10月8日、A株はほぼ上放映限の幅で強勢に始まり、大幅な高進捗後、市場は激しい変動に見舞われ、最終的に高値をつけて安値で終了した。それ以降、市場の中心は不断に下方へシフトし、10月16日までに沪指の振幅は15%を超え、累積では470点以上下落した。10月8日から10日まで、A株の中核指数は全面安調となり、そのうち創業板指は6.21%の下落を記録した。
今回の急落は、主に前期の急騰によって蓄積されたリスクの消化と、市場が政策に対する期待を調整したことによるものである。一部投資家は、政策の効果は短期的に現れているものの、長期的な効果はまだ見極められないと考えている。加えて、海外市場の変動もA株に影響を与えた。10月9日には、香港ハンセン指数が9.41%、A50先物が10.4%それぞれ急落し、市場の下落をさらに悪化させた。&lt;/p&gt;
&lt;h2 id=&#34;市場の反省と展望&#34;&gt;市場の反省と展望
&lt;/h2&gt;&lt;p&gt;国慶前後の株式市場の急激な変動は、市場に政策、経済、そして市場の法則に対する深い反省を促した。 一方で、政策の効果は短期的に顕著であるが、長期的な効果はまだ見極められない。 另一方面、市場の急騰と急落は、投資家に対し冷静さを保ち、感情的な投資を避けるよう警告している。&lt;/p&gt;
&lt;p&gt;将来、A株市場が真の「長牛」相場を迎えられるかどうかは、依然として政策の効果的な伝達によって実体経済が活性化し、最終的に経済の基礎的改善につながるかどうかにかかっています。投資家は、政策の具体的な実施状況や経済データの変化に注意深く留意し、合理的に投資戦略を調整する必要があります。&lt;/p&gt;
&lt;p&gt;国慶前後の株式市場の急騰と急落は、政策と市場の攻防であり、投資家心理を試す試練でもあった。この「極端な状況」の中で、私たちは市場の力と政策の影響力を目の当たりにした。今後の展開から目が離せない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ネザーザ、旧正月の興行収入で大躍進</title>
        <link>https://ttf248.life/ja/p/chinese-new-year-nizha-breakthrough/</link>
        <pubDate>Sat, 15 Feb 2025 03:40:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chinese-new-year-nizha-breakthrough/</guid>
        <description>&lt;p&gt;私たち中国人にとって、旧正月（春节）になると、家族団らんの際に映画を見ることが欠かせない娯楽となっている。今年の旧正月に公開された『哪吒』は爆発的な人気を博し、街中が話題になっている。その盛り上がりは、かつての『戦狼』に似ており、どちらも愛国的なテーマが感じられ、自然と民族自豪感が湧いてくる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;春节档の「哪吒」の大ヒットと、予想外の民族自豪感。以前の映画『戦狼』や愛国テーマ作品に似ているが、目に見える進歩はあれど、ここまでとは言えない。ゲーム経験者としては、多くの面で脂ぎった感じがする。特に格闘シーンはMMORPG風が強く、何だかんだで「哪吒」の興行収入のために映画を買い、見ない人が続出している。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;格闘シーンの質感が生々しくない&#34;&gt;格闘シーンの質感が生々しくない。
&lt;/h2&gt;&lt;p&gt;ゲーム党なので普段はネットゲームの世界に浸っているため、映画には期待していませんでした。《哪吒》の熱風だけが理由で、周りの人が皆言っていたので、試しに見に行ってみました。映画館に入り、映像が始まると、心臓が「ドスン」と下がりました。映像制作は以前よりずいぶん進歩しているとはいえ、どこかベタベタした感じがします。アクションシーンは特に、ネットゲームのような雰囲気が強すぎて、まるでゲームのシーンを見ているようで、映画としての質感が足りません。&lt;/p&gt;
&lt;h2 id=&#34;熱狂的な映画ファン&#34;&gt;熱狂的な映画ファン
&lt;/h2&gt;&lt;p&gt;映画を見た後、出てみると、なんとかなりの人が「哪吒」の興行収入のためにチケットを買ったのに映画を見ないと言っている。この手のやり方はすごいな、と思った。どうやら皆、「哪吒」への熱い支持があり、何かしたいと考えているようだ。&lt;/p&gt;
&lt;h2 id=&#34;物語の展開&#34;&gt;物語の展開
&lt;/h2&gt;&lt;p&gt;思い出せば、「ワイルド・ハンター」の頃、呉京が「わが国を犯す者、たとえ遠くても必ず処罰する」と叫んだ時、どれだけ多くの人が熱血に沸き立ち、中国の軍人たちはとても強く、我が国はとても強いと感じたでしょう。この「哪吒」は、そこまでストレートな愛国的なスローガンではありませんが、中国の伝統文化を鮮やかに表現しています。哪吒や敖丙といった神話上の人物は、子供の頃からその物語を聞いて育ちましたし、映画では彼らの恩讐や成長過程が血肉となって描かれており、これこそが中国文化の魅力なのでしょう。&lt;/p&gt;
&lt;p&gt;哪吒の話をするといいでしょう。子供の頃から誤解され、白眼視されながらも、彼は決して諦めず、「我の命は私が決める、天に左右されない」と叫びました。その精神と、私たち中国人の中にあるあの粘り強さによく似ていますね。どんな困難にも屈せず、自分の努力で運命を変えるのです。アオ丙も同じです。彼は家族の使命を背負い、一見冷酷に見えますが、実のところ心優しい人で、友のために犠牲さえ惜しみません。そんな友情、そんな責任感は、現実世界でもよく目にしませんか？&lt;/p&gt;
&lt;h2 id=&#34;アニメ映画の進歩&#34;&gt;アニメ映画の進歩
&lt;/h2&gt;&lt;p&gt;言わずもがな、《哪吒》に完璧とは言えない点もあるものの、中国の伝統文化と現代映画技術をうまく融合させ、中国のアニメーション映画の進歩を感じさせてくれる。かつて《戦狼》が皆に中国映画の动作映画における突破を見せたように。この進歩は、中国映画も国際舞台で頭角を現し、外国人にも中国文化の魅力を伝えられるようになるだろうという希望を与えてくれる。&lt;/p&gt;
&lt;p&gt;私たち中国人にとって、どこへ行っても心には自分の国と文化がいつもあります。《哪吒》や《戦狼》のような映画は、まるで鍵のように、私たちの心の奥底にある民族の誇りの扉を開きます。歓声と笑いの中で、国の強大さ、文化の魅力を感じると同時に、それぞれの職場で努力を重ね、国の繁栄昌盛に貢献するモチベーションを高めてくれます。これがこれらの映画が大ヒットし、私たちに民族の誇りを感じさせる理由でしょう。これからも、このような映画がもっとたくさん現れ、私たちのこの民族の誇りを常に満たしてくれることを願っています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>バックエンドサービスTCP通信異常のトラブルシューティング</title>
        <link>https://ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</link>
        <pubDate>Fri, 14 Feb 2025 22:54:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/backend-service-tcp-communication-troubleshooting/</guid>
        <description>&lt;p&gt;ビジネスモデル：バックエンドサービスはTCP経由でグループのマーケットデータゲートウェイと接続を確立します。接続時にはまず認証リクエストを送信し、その後、継続的にハートビートパケットを送信して接続状態を維持します。
しかし、ある日、サービス接続が切れたという警告メッセージを受け取りました。詳細なログ調査の結果、バックグラウンドサービスは継続的にハートビートを送信しているものの、相手からの応答はなく、それでも接続は切断されませんでした。&lt;/p&gt;
&lt;h2 id=&#34;現場概説&#34;&gt;現場概説
&lt;/h2&gt;&lt;p&gt;元々会社で残業中、プロジェクトの進捗を詰めていたところ、仕事グループに突然警告メッセージが飛び込んできた。最初はよくあるエラーかと思ったが、ネットワークタイムアウトで心跳送信が失敗し、結果としてサービス接続が切れたのだろうと推測した。しかし、ログを詳しく調査した結果、実際はそうではなかった。バックエンドから認証ログインメッセージは送信されているものの、応答がないまま、心跳パケットは継続的に送られ続けており、相手側からは一切の心跳データが返されていない。ログを詳細に分析した結果、以下の重要な問題点が明らかになった：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;認証メッセージに対する応答なし：相手のシステムが再起動中の可能性が高く、認証メッセージがタイムリーに処理されなかったと考えられます。&lt;/li&gt;
&lt;li&gt;認証に失敗したにも関わらずハートビートデータが送信される事象について調査した結果、プログラムのロジック上の欠陥であることが判明しました。ハートビート送信関数における判断ロジックに問題があり、接続状態のみを検証し、認証状態の検証を怠っていました。&lt;/li&gt;
&lt;li&gt;サービス接続が切断されない場合、切断を促すことで再接続メカニズムを起動し、再度認証メッセージを送信できます。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;現在、まだ最後の解決すべき問題が残っています — なぜサービスが切断されていないのかです。この問題を解決するには、より詳細な調査が必要です。&lt;/p&gt;
&lt;h2 id=&#34;ネットワークデータパケットの解析&#34;&gt;ネットワークデータパケットの解析
&lt;/h2&gt;&lt;p&gt;ネットワークデータパケットを捕捉し、さらに分析するために。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/backend-service-tcp-communication-troubleshooting/20250220151952.png&#34;
	width=&#34;1126&#34;
	height=&#34;202&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcpdump&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;557&#34;
		data-flex-basis=&#34;1337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;グラフのデータから、心拍は常に正常に送信されていることがわかりますが、相手サーバーからの応答はなく、代わりに &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; が与えられているため、接続は自動的に切断されません。&lt;/p&gt;
&lt;h2 id=&#34;一般的なフラグの説明&#34;&gt;一般的なフラグの説明
&lt;/h2&gt;&lt;p&gt;TCPプロトコルにおいて、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;（Push）和 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;（Acknowledgment）は、データ転送とフロー制御を管理する上で重要なフラグです。その役割は以下の通りです。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-pshpush-flag&#34;&gt;&lt;strong&gt;1. PSH（Push Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;:
受信側は、バッファ内のデータを可能な限り速やかに上位アプリケーションへプッシュし、オペレーティングシステムバッファに一時保存しないこと。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;典型场景&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;クライアントがリクエストを送信する際（例えば、&lt;code&gt;GET /index.html&lt;/code&gt;）会设置 &lt;code&gt;PSH&lt;/code&gt;）、サーバーに即時応答を期待します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;入力時に毎回 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; がトリガーされ、入力文字がリアルタイムで送信されます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;動画ストリーミングやオンラインゲームなどの低遅延シーンでは、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; を用いて遅延を削減することがあります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PSH&lt;/code&gt; は必須ではなく、受信側は無視しても構いません（ただし、データは通常通り処理する必要があります）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;送信者は &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; を設定しない場合があるため、受信者は自身のバッファリングポリシーに基づいてデータをいつプッシュするか決定します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-ackacknowledgment-flag&#34;&gt;&lt;strong&gt;2. ACK（Acknowledgment Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;:
受信確認（前続データセグメントの受信が完了したことを示す）であり、次を受信するべきバイトのシーケンス番号です。これはTCP信頼性のある転送の中核をなすメカニズムです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作原理&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受信者は、送信者がデータセグメントを送信する際に添付する情報（&lt;code&gt;ACK&lt;/code&gt; 值（例如 &lt;code&gt;ACK = 序列号 + 数据长度&lt;/code&gt;）を持つ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受信側はデータを受信後、__INLINE_CODE_0__メッセージを生成し、受信確認済みデータのシーケンス番号を示す。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;送信者は、対応する &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; を受信した場合のみ、未確認のデータを再送します。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;送信者は、インラインのイタリック体5、太字4、インラインのイタリック体6、太字3、インラインのイタリック体7を送信しました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;受信者が &lt;code&gt;100~199&lt;/code&gt; 中的某些数据，会通过 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; を受け取らない場合、送信者は再送を通知する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;p&gt;TCPパケットにおいて、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 和 __INLINE_CODE_1__は同時に出現することがあり、主に以下の状況で確認されます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP 请求响应&lt;/strong&gt;:
クライアントが、&lt;code&gt;POST&lt;/code&gt; 请求时（含数据），会设置 &lt;code&gt;PSH&lt;/code&gt; 和 &lt;strong&gt;INLINE_CODE_2&lt;/strong&gt;（以前の応答を確認）を送信します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Client → Server: SYN, ACK=1 → 建立连接
Client → Server: PSH, ACK=1, 数据 → 发送请求数据
Server → Client: PSH, ACK=数据长度+1 → 返回响应
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSH 握手后传输命令&lt;/strong&gt;:
クライアントがコマンドを入力後、&lt;code&gt;PSH&lt;/code&gt;BOLD_2&lt;code&gt;ACK&lt;/code&gt; が含まれるデータセグメントを送信し、コマンドの即時伝送とサーバーでの処理を保証します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-1&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;フラグ&lt;/th&gt;
&lt;th&gt;名&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;同期　初期化接続（三次握手）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIN&lt;/td&gt;
&lt;td&gt;終了&lt;/td&gt;
&lt;td&gt;エレガントな接続のクローズ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;リセット&lt;/td&gt;
&lt;td&gt;強制終了 (異常時)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URG&lt;/td&gt;
&lt;td&gt;緊急&lt;/td&gt;
&lt;td&gt;緊急ポインタをマークする（ほとんど使用しない）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-2&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;遅延の低減に焦点を当てる。&lt;/li&gt;
&lt;li&gt;データの完全性と順序を保つことが重要です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;両者は協調して働き、TCPプロトコルの効率と信頼性のバランスを取っています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>お金を稼ぐなんて、焦してもだめ。焦っても無駄だ。</title>
        <link>https://ttf248.life/ja/p/investing-takes-time/</link>
        <pubDate>Fri, 14 Feb 2025 20:30:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/investing-takes-time/</guid>
        <description>&lt;p&gt;長年の株式投資の経験を振り返ると、大金を稼いだわけではないものの、大きな損失を出したわけでもない。最大の課題は資金の流れの計画が不合理で、精神状態が不安定だったことだ。現在の段階では、主な収入源は仕事であり、毎日働いて固定給を得ているため、金銭の変動に対する耐性は債券や銀行預金のレベルに留まっている。しかし、人は皆欲深いので、買わなすぎると値上がりしてもお金にならないし、買いすぎると下落した際に損失を出すことになる。この時こそ、精神的な安定が特に重要であり、それは私たちの財産を守る船を安定させるのに役立つだろう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;株式投資におけるメンタルヘルスの問題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;過去の損失事例&#34;&gt;過去の損失事例
&lt;/h2&gt;&lt;p&gt;新規参入時に小型株や話題の銘柄に手を出したことがありますが、その後は主に中国工商銀行、中国聯通、恒生電子、中興通信といった大型株や、各種の大規模インデックスファンドを扱っています。&lt;/p&gt;
&lt;p&gt;実際は、欲張ってもっと多くを望んでいた結果です。当初のポジション積み増しに急ぎ、後にキャッシュフローが枯渇してしまいました。保険の購入、住宅購入、結婚式などは資金の流れの大頭であり、全体的な計画において十分なキャッシュフローを確保していなかったため、後々の資金不足につながりました。&lt;/p&gt;
&lt;p&gt;青いチップを買うことは、__INLINE_CODE_0__追いつくこと：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恒大が出問題を起こした時、銀行株が暴落し、その状況で上手く利益を確定できた人は、経済全体に対する認識に欠陥があったと言えるだろう。不動産は国家経済において比重が大きすぎるため、関連するものは無視できない。その後も株式市場の下落や、配当株のようなものが2年ほど持続的に上昇した。&lt;/li&gt;
&lt;li&gt;貿易戦争の初期段階で、&lt;strong&gt;中兴&lt;/strong&gt;は大きな打撃を受け、株価も大きく下落しましたが、その後徐々に回復しました。&lt;/li&gt;
&lt;li&gt;以前の会社のもので、アリババグループから分離した後、株価は大きく下落しましたが、この銘柄は仕手株であり、毎年何度か上昇することがあります。適切なポジション管理をすれば、大して損をすることはありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;強欲理性をもむす怪物&#34;&gt;強欲：理性をもむす「怪物」
&lt;/h2&gt;&lt;p&gt;株式市場が上昇し、投資家の利益が着実に増加すると、貪欲さが静かに生まれる。多くの人々は株価がすでに高い水準にあるにもかかわらず、さらなる上昇を夢見て、より多くの利益を得ようと損切りを躊躇する。彼らは貪欲に惑わされ、市場の法則やリスクを忘れてしまう。例えば、ある人気テーマ株の過熱相場において、短期的に数倍の上昇を見たとある投資家が、さらに深く入り込み、買い増しを続けることで最後の勝者になろうとする。しかし、市場はいつまでも狂ったままでいるわけではない。バブルが崩れ、株価が急落すると、貪欲に突き動かされたこれらの投資家は甚大な損失を被ることが多い。貪欲さは彼らの合理的な分析と意思決定能力を奪い、「ギャンブラー」にしてしまい、賢明な投資家とはならなかった。&lt;/p&gt;
&lt;h2 id=&#34;恐怖足かせとなる鎖&#34;&gt;恐怖：足かせとなる「鎖」
&lt;/h2&gt;&lt;p&gt;貪欲の反対は恐れだ。恐れもまた、株式市場において強力な破壊力を持つ。市場が急落し、株価が大幅に下落すると、投資家は容易にパニックに陥る。その恐れから、彼らは市場への信頼を失い、手元の銘柄のファンダメンタルズが良好であっても、さらなる損失を恐れて慌てて売却してしまう。例えば、世界的な金融危機が発生した際、多くの優良株の株価も市場全体と共に大幅に下落した。一部の投資家は恐れに取り囲まれ、これらの企業の長期的な価値を見抜けず、非常に低い価格で株式を売り払い、その結果、その後の市場反発や企業業績の成長による豊かなリターンを逃してしまった。恐れは投資家が短期的に損失を被らせるだけでなく、長期的な心理的影を落とし、再び市場に参入することを躊躇させ、投資機会を逃してしまう可能性もある。&lt;/p&gt;
&lt;h2 id=&#34;盲追-दग喪する霧&#34;&gt;盲追： दिग्喪する「霧」
&lt;/h2&gt;&lt;p&gt;株式投資におけるもう一つの心理的な難題は、盲目的な群動性です。情報過多の時代において、様々な投資アドバイスや市場の噂、話題が押し寄せます。多くの投資家は独立した思考力と判断力を欠き、盲目的に他人を追随します。周囲が見た人がある株式を買って利益を得ているのを見ると、深く考えずに追随したり、「インサイダー情報」と呼ばれるものに飛びついたりします。このような盲目的な群動性は、株式そのものの研究や分析を無視するため、投資家は霧の中で迷った船のように、方向性を失います。例えば、ある種のコンセプト株は市場の炒め物に初期段階で利益をもたらすかもしれませんが、炒め物が落ち着くと株価が暴落し、状況を理解せず盲目的に追随した投資家が「後付け購入者」となってしまいます。彼らは、各投資家のリスク許容度、投資目標、投資期間はそれぞれ異なり、他人にとって有効な投資戦略が必ずしも自分に合わないということに気づいていません。&lt;/p&gt;
&lt;h2 id=&#34;過信潜伏する暗礁&#34;&gt;過信：潜伏する「暗礁」
&lt;/h2&gt;&lt;p&gt;過度な自信も、株式投資における心構えとして無視できない問題です。いくつかの投資で成功した後、自己を膨れ上がらせ、市場の法則を理解していると思い込み、正確に株価の動向を予測できると考える投資家がいます。彼らは市場の複雑さと不確実性を無視し、過剰な取引を行い、盲目的に投資規模を拡大したり、さらには高レバレッジで投機したりします。しかし、市場は変わりやすく、過度な自信を持つ投資家は、予期せぬ市場変動によって大きな損失を被ることがあります。例えば、経験が浅いにもかかわらず初期の戦いで勝利した投資家が、プロの投資能力があると信じ込み、頻繁に株式を売買し、投資額を増やします。市場でシステムリスクが発生したり、個別株で突発的なネガティブなニュースが出た場合、彼らは過度な自信から損失を止めることができず、資本が大幅に目減りしてしまいます。過度な自信は、まるで海面下の暗礁のように、一見穏やかですが、気づかないうちに投資家の富の船を沈めてしまうことがあります。&lt;/p&gt;
&lt;h2 id=&#34;心の持ち方を整え着実に資産を管理するには&#34;&gt;心の持ち方を整え、着実に資産を管理するには。
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;正しい投資理念を確立する：投資家は、株式投資・資産運用が、一朝一夕の富を得ることではなく、資産の長期的な安定増強を目的とすることを明確にすべきです。投資に関する知識を学び、市場の法則を理解し、バリュー投資や長期投資の理念を確立することで、短期的な利益や市場の感情に左右されることを避けることができます。例えば、企業のファンダメンタルズを深く調査し、収益性、業界地位、経営陣などの要素に注目することで、長期的な投資価値のある株式を選択し、盲目的に短期的な話題を追い求めることは避けるべきです。&lt;/li&gt;
&lt;li&gt;合理な投資計画の策定：ご自身の財務状況、リスク許容度、投資目標に基づき、科学的で合理的な投資計画を立てましょう。投資金額、投資期間、期待収益、損切りポイントなどの重要な要素を明確にし、計画に厳密に従って実行します。これにより、投資中の感情の変動による衝動的な意思決定を避けることができます。例えば、各株式への投資割合を総資産の一定割合を超えないように設定し、株価が上昇して期待収益に達した際には利確し、下落が損切りポイントに触れた場合には断固として損切りを行います。&lt;/li&gt;
&lt;li&gt;感情をコントロールし、冷静さを保つ：市場の変動に直面する際、自分の感情をコントロールし、冷静さと合理性を保つことが重要です。注意をそらすこと、運動、他人との交流などを通じて投資ストレスを軽減し、感情が投資判断に悪影響を与えることを避けてください。市場が大きく変動した場合は、まず原因を冷静に分析し、自身の投資戦略と株式の基礎に基づいて合理的な判断を下すことが重要です。盲目的に追随したり、パニック売りをすることは避けてください。&lt;/li&gt;
&lt;li&gt;継続的な学習と反省：株式市場は常に発展・変化するため、投資家は新しい投資知識やスキルを継続的に学び、マクロ経済動向、業界ニュース、企業情報などに注意を払い、自身の投資水準を向上させる必要があります。同時に、定期的に自身の投資行動を反省し、経験から教訓を引き出し、心構えや意思決定における問題点を発見し、迅速に調整・改善することが重要です。例えば、投資後には必ずその投資プロセス全体を振り返り、成功と失敗の原因を分析し、将来の投資で同様の過ちを避けるためにどのようにすべきかを考察します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;株式投資は、長く困難な道のりであり、心構えが非常に重要です。冷静さ、謙虚さ、そして独立した思考を保つことで、市場の波に揺るぎなく立ち向い、資産価値の維持・向上を実現できます。投資家は、良好な心構えを養うことを投資プロセスにおける必須科目として捉え、心の準備を整えた上で、株式投資の道を安定的に進むべきです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>時の積み重ねた異質な幻想と感情の依りがり</title>
        <link>https://ttf248.life/ja/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</link>
        <pubDate>Thu, 13 Feb 2025 22:12:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</guid>
        <description>&lt;p&gt;最初のネット小説の読者が中年に入ると、彼らに向けた「爽文」も変化した。主人公は父親、師匠、老人といった形で多く登場し、中年読者の生活や感情に対する異なるニーズに応えている。これらの作品は、単にレベルアップや逆転を追求するのではなく、感情との共鳴や人生の悟りにもっと重点を置いている。&lt;/p&gt;
&lt;h2 id=&#34;読者層の変化時の流れに沿った変遷&#34;&gt;読者層の変化：時の流れに沿った変遷
&lt;/h2&gt;&lt;p&gt;かつてのネット小説の読者は、今や多くが中年を迎えています。彼らは人生の試練を経験し、価値観や考え方が変化しました。若い頃に追い求めていた熱血や冒険といった要素だけではもう十分ではなく、現在の生活状況と共鳴する感情や、過去への追憶、未来への期待を読書から得たいと考えています。中年向けの爽文小説は、まさにこうした心理的なニーズに基づいて生まれ、彼らの生活や価値観に近い設定で、この特定の層の読者を魅了しています。&lt;/p&gt;
&lt;h2 id=&#34;転換少年ヒーローから中年へ&#34;&gt;転換：少年ヒーローから中年へ
&lt;/h2&gt;&lt;p&gt;師匠となった陸州は、個性豊かで力強い弟子たちに直面する。彼らは善と悪の間で彷徨い、陸州は彼らを正しい道へと導く必要があった。この小説は、主人公と弟子たちの交流を通して、中年者が次世代を教える際に直面する挑戦と苦悩を描き出す。同時に、弟子たちの成長と変化は読者に希望と未来を感じさせ、自身の子供や若者世代への期待を映し出す。&lt;/p&gt;
&lt;h2 id=&#34;感情の共鳴人生の悟りと家族への責任&#34;&gt;感情の共鳴：人生の悟りと家族への責任
&lt;/h2&gt;&lt;p&gt;人生六十、システムを手に、新たな旅が始まる。この設定は中年読者に「まだ遅くない」という希望と活力を与える。晩年であっても、システムを通じて自己実現や夢を叶えられる主人公の姿は、読者が人生で取りこぼした機会や未完の夢を思い起こさせると同時に、前向きな生き方を促し、いかなる年齢でも諦めずに目標を追いかけることの大切さを伝えている。&lt;/p&gt;
&lt;h2 id=&#34;物語の構成中年生活のリズムと面白さに寄り添う&#34;&gt;物語の構成：中年生活のリズムと面白さに寄り添う
&lt;/h2&gt;&lt;p&gt;中年爽文のプロットは、しばしば生活の細部や感情の繊細な表現をより重視するようになる。若い頃の爽文のようにテンポの良いレベルアップや冒険を追い求めるのではなく、人物間の関係性や感情的な葛藤に重点が置かれる。例えば『史上最强师傅』では、主人公と弟子との師徒愛着、同門同士の兄弟情誼などが丁寧に描かれている。このようなプロットは、中年読者に温かさと親近感を与え、自身の生活における親情、友情、愛情を投影させる。&lt;/p&gt;</description>
        </item>
        <item>
        <title>旧正月の映画チケット価格の謎：オンラインと実店舗での価格差</title>
        <link>https://ttf248.life/ja/p/spring-festival-movie-tickets-price-mystery-online-vs-offline/</link>
        <pubDate>Tue, 11 Feb 2025 00:02:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/spring-festival-movie-tickets-price-mystery-online-vs-offline/</guid>
        <description>&lt;p&gt;旧正時代の間、家族（7～8人）で映画を見に行こうとしたところ、淘票票や猫眼でチケットを買おうとすると60元。たまたま手持ちの映画館のチャージカードがあったので、窓口で購入する必要があり、何か割引がないか尋ねてみると、同じ回なのに窓口では35元で買えた。この価格差には正直驚きました。&lt;/p&gt;
&lt;h2 id=&#34;プラットフォーム手数料の隠れ手数料&#34;&gt;プラットフォーム手数料の「隠れ手数料」
&lt;/h2&gt;&lt;p&gt;オンラインチケット購入プラットフォームは便利だが、手数料は無視できない。正確な座席選択やいつでも確認できる購入履歴など、ユーザーに便利な体験を提供するために投資が必要であり、そのコストがサービス料として料金に上乗せされ、オンラインチケットの価格を押し上げている。&lt;/p&gt;
&lt;h2 id=&#34;映画の差別化運営戦略&#34;&gt;映画の差別化運営戦略
&lt;/h2&gt;&lt;p&gt;春节商戦の映画鑑賞需要が爆発的に伸び、劇場は収益最大化のため差別価格戦略を採用しています。オンラインプラットフォームのトラフィックが大きいので、多くの人が事前にオンラインでチケットを購入する習慣があり、劇場はオンラインチケットの価格を高く設定します。一方、窓口で購入する散客に対しては、この層を引きつけるために低い価格を提供しています。&lt;/p&gt;
&lt;h2 id=&#34;協力分与の裏にある価格論理&#34;&gt;協力分与の裏にある価格論理
&lt;/h2&gt;&lt;p&gt;オンラインプラットフォームと映画館の協力による分配モデルがチケット料金に影響を与えます。オンラインプラットフォームは興行収入から分け前を得る必要があり、利益を確保するためにチケット料金を引き上げます。一方、映画館の窓口では中間マージンがなく、コストが下がるため、チケット料金は自然と安価になります。&lt;/p&gt;
&lt;h2 id=&#34;購入のコツ&#34;&gt;購入のコツ
&lt;/h2&gt;&lt;p&gt;チケットを買うときは、オンラインのプラットフォームばかり見ないで、劇場に電話して料金を尋ねたり、直接窓口で相談してみると、お得な情報があるかもしれません。よく映画を見るなら、劇場会員カードを作って会員特典を利用するのも、結構節約になりますよ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>2025年春節映画における政治的要素の分析</title>
        <link>https://ttf248.life/ja/p/political-elements-in-chinese-new-year-films-2025/</link>
        <pubDate>Mon, 10 Feb 2025 23:49:42 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/political-elements-in-chinese-new-year-films-2025/</guid>
        <description>&lt;p&gt;久しぶりにお正月映画を見に行ったけど、ちょっと違った感じだった。&lt;/p&gt;
&lt;p&gt;本作は2025年の春节档映画の新たな変化を論じ、「唐人街探案1900」と「哪吒之魔童闹海」に焦点を当てる。「唐人街探案1900」は、1900年アメリカ・サンフランシスコのチャイナタウンを舞台に、華人が受ける人種差別や抑圧を描き、社会政治環境を反映する。「哪吒之魔童闹海」はアニメーション映画として、玉虚宮が五角大楼を影射するアメリカ政治体系、天元鼎上のドル記号がドルの覇権を象徴、仙人玉牌がアメリカのグリーンカードを示唆する身分格差、滅魂丹が生化兵器を暗示する悪意ある行為など、豊富な隠喩要素で現実の国際政治体制を皮肉している。両映画は新たな鑑賞体験をもたらし、映画芸術と政治的表現の関係についての考察を喚起する。&lt;/p&gt;
&lt;h2 id=&#34;春节映画のスタイル刷新&#34;&gt;春节映画のスタイル刷新
&lt;/h2&gt;&lt;p&gt;従来の旧正月の映画は、気軽に楽しめる娯楽作品や家族向けのものが多く、観客が休日に心身をリラックスさせることを目的としており、機微な政治的な話題にはほとんど触れなかった。しかし2025年の旧正月映画は、《唐人街探案1900》と《哪吒之魔童闹海》が豊富な政治的要素を取り入れ、観客の幅広い議論を呼び起こし、旧正月の映画に新たな風を起こした。&lt;/p&gt;
&lt;h2 id=&#34;時代政治を鮮やかに描く&#34;&gt;時代政治を鮮やかに描く。
&lt;/h2&gt;&lt;p&gt;「唐人街探案1900」は、1900年のアメリカ・サンフランシスコのチャイナタウンを舞台に、華人が海外で深刻な人種差別と抑圧を受けていた時代を描く。事件解決だけでなく、社会からの差別や不当な扱いにも直面する主人公たち。本作が描く人種差別と権力闘争は、当時の社会政治環境をリアルに反映しており、動盪の時代に華人移民が生存と尊厳のために戦った苦難と、その背景にある政治的問題について深く考察したくなる。&lt;/p&gt;
&lt;p&gt;このような歴史的背景は、TikTokと周受資の件のように、現代の海外華人がビジネス分野で直面している困難を思い起こさせる。&lt;/p&gt;
&lt;p&gt;現地時間2024年12月6日、アメリカ合衆国コロンビア特別区連邦巡回上訴裁判所はTikTokの要請を退け、国家安全保障の名目で制定された強制売却法が憲法上の審査に耐えたと判断した。TikTok CEOの周受資氏は従業員宛てのメモで、「差し止めを求め、米最高裁判所の審査を待つ」と述べた。この一連の流れは、アメリカ合衆国が施行した「アメリカ国民を外国敵対勢力の支配から保護するための法律」に起因し、同法に基づき、TikTokの運営企業であるByteDanceは、法案成立後270日以内に米国のTikTok事業を売却する必要があり、強制的な売却期限は2025年1月19日となっている。&lt;/p&gt;
&lt;p&gt;これまで様々な公聴会で、周受資氏は数々の嫌がらせを受けてきました。現地時間 2024 年 1 月 31 日、米国議会上院司法委員会は「大手テクノロジー企業とオンライン小児性的搾取の危機」に関する公聴会を開催し、著名な対中強硬派議員トム・コートン氏が周受資氏に対し、国籍に関する8つの質問を連続して投げかけました。彼の国籍は何か、中国国籍や米国国籍を申請したことはあるか、さらには妻や子供の国籍まで問い詰めたのです。本来、公聴会のテーマは「オンライン小児性的搾取」であるにも関わらず、議員は話題をTikTokが中国企業バイトダンスに属しているという点に移し、周受資氏にテーマと無関係な質問をさせました。映画『唐人街探案1900』における海外華人の不当な差別と同様に、周受資氏はTikTokの背景から、商業分野において不公正な扱いと疑問を受けます。一連の出来事は、異なる時代において、海外華人が自己の発展と権利の擁護を追求する際に直面してきた外部からの重圧を反映しており、100年前の民族差別も、現代におけるビジネス上の政治的策略も、私たちに深く反省させるべきものです。&lt;/p&gt;
&lt;h2 id=&#34;哪吒の魔童波濤を騒がせるに見る神話に潜む政治的示唆分析&#34;&gt;『哪吒の魔童、波濤を騒がせる』に見る神話に潜む政治的示唆分析
&lt;/h2&gt;&lt;p&gt;この映画『哪吒の魔童、波濤を騒がせる』は一見すると普通の動畫映画だが、数多くの設定やエピソードには政治的な暗示が含まれている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;玉虚宮は仙界至高権力の中枢として構築され、建築様式はアメリカ国防総省に類似している。内部は白を基調とし、「普遍価値」を掲げる西側の覇権主義を象徴する。無量仙翁が統括する「除妖隊」の配下にある鹿男鶴女は、アメリカの同盟国体系における日韓に対応すると見られている。「玉虚宮」の「オンライン会議」の場面では、十二金仙が「封神大戦」について議論し、まるでアメリカ主導のNATO会議のように、「秩序維持」を名目に他国を抑圧している。&lt;/li&gt;
&lt;li&gt;玉虚宮の丹錬に使う天元鼎には、入り口にドルマークがあり、アメリカが経済覇権によって他国の資源を「錬化」することを暗示している。映画では無量仙翁が「替天行道（タイテンコウドウ）」の名のもとに龍族を鼎の中に投入して錬化させ、まるでいくつかの国が「国際ルール」を借りて利益を得るかのようだ。&lt;/li&gt;
&lt;li&gt;哪吒が手に入れた仙人の身分証明の玉牌は、アメリカのグリーンカードと非常に似た色合いと模様のデザインをしており、仙界における「異種族」への排斥と階級分けを象徴し、現実世界における異なる国や集団間の身分の違いや不平等な扱いを示唆している。&lt;/li&gt;
&lt;li&gt;無量の仙翁が哪吒に飲ませようとした滅魂丹は、生化学兵器のように見え、ある国の「救済」という名の破壊と、他国への破滅を皮肉っている。&lt;/li&gt;
&lt;li&gt;七色宝蓮は、哪吒と敖丙の肉体を再構築する上で不可欠な鍵であり、大国によるエネルギーと技術の独占を象徴する。その「瓊漿玉液」は、玉虚宮の「成仙試験」を経て入手され、現実における発展途上国の核心資源への依存と、覇権体制下での「規則的な略奪」を反映している。宝蓮の一時的な失效とその回復条件は、エネルギー危機下における小国の存続困難を暗示する。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;映画芸術と政治表現の深掘り&#34;&gt;映画芸術と政治表現の深掘り
&lt;/h2&gt;&lt;p&gt;春节期間の映画鑑賞ブームの中で、これらの作品は政治的な要素を盛り込み、観客に新たな体験をもたらした。単なる娯楽作品ではなく、歴史と現実における政治問題を映し出す鏡のように感じられる。これは映画芸術と政治的表現の関係について深く考察させる。今後の映画制作において、監督が映画を通じて社会や政治に対する見解をより多く伝えようとするだろうか？ 映画という強力な文化伝達媒体は、芸術的な表現と同時に、社会の現実へのより多くの関心と考察を担えるだろうか？ これらの問題は映画鑑賞時に深く探求する価値があり、映画業界が芸術と現実の融合においてさらに素晴らしい作品を生み出すことを期待したい。&lt;/p&gt;
&lt;h2 id=&#34;サプライズ&#34;&gt;サプライズ
&lt;/h2&gt;&lt;p&gt;豆包の大規模言語モデル、今日は頼りないな。何度か引っかかるし、文章が半分まで来たらそこで止まってしまう。続きも書けなくて、新しいセッションを始めないと。&lt;/p&gt;</description>
        </item>
        <item>
        <title>アメリカの二大政党、民主党と共和党</title>
        <link>https://ttf248.life/ja/p/us-two-major-parties-democrats-republicans/</link>
        <pubDate>Mon, 10 Feb 2025 23:40:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/us-two-major-parties-democrats-republicans/</guid>
        <description>&lt;p&gt;民主党と共和党は、政治理念、政策主張、社会価値観の面で著しい違いがあります。&lt;/p&gt;
&lt;h2 id=&#34;政治理念と政策主張&#34;&gt;政治理念と政策主張
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自由主義的な傾向を持ち、経済および社会問題において政府が積極的に役割を果たすべきだと主張し、社会福祉、環境保護、多様な文化を支持する。税制政策においては、中間所得者層以下の減税を支持すると同時に、高所得者や企業の税率を引き上げる。社会問題に関しては、中絶の権利、同性婚を支持し、厳格な銃規制を提唱する。外交政策においては、多角主義と外交手段を重視し、国際協力を通じて地球規模の問題解決を目指す。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保守的な傾向があり、政府の介入を制限し、個人の自由と市場経済を重視する。税制においては減税を支持し、所得に関わらず全ての人に適用されるべきだと考えている。社会問題に関しては、中絶や同性婚には反対し、銃を持つ権利を支持する。外交政策においては強硬な姿勢を取り、軍事力によって国益を守ることを支持する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;トランプ政権の意義&#34;&gt;トランプ政権の意義
&lt;/h2&gt;&lt;p&gt;ドナルド・トランプが2024年に再びアメリカ合衆国大統領に選出されたことは、共和党のアメリカ政治における優位性を示すものとなる。トランプの政策には以下が含まれる：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;トランプ氏は、減税と規制緩和によって経済成長を促し、特に伝統的な製造業やエネルギー産業の発展を支援すると主張しています。また、アメリカの経済的利益を守るため、保護主義的な貿易政策を採用し、既存の貿易協定の再交渉または離脱に傾倒する傾向があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;トランプ氏は、国境警備の強化、不法移民の制限、合法的移民に対する厳格な審査と制限を実施する計画だ。また、難民や亡命申請を制限し、国家安全保障を維持することを支持している。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;トランプ氏は、単独主義を志向し、「アメリカ第一」を強調、国際組織への依存を減らし、同盟国との関係を見直し、必要に応じてより強硬な外交手段を取ることがあります。また、化石燃料の生産と使用拡大、環境保護規制の緩和も計画しています。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;トランプ氏の再選は、アメリカ国内政策の大幅な転換を招き、世界的な政治・経済に大きな影響を与える可能性がある。特に貿易、環境、人権などの分野において、国際社会からの注目と反応を引き起こすことが予想される。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ローカルにDeepSeek-R1をデプロイ</title>
        <link>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</link>
        <pubDate>Fri, 07 Feb 2025 22:41:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ollama-local-deployment-deepseek-r1/</guid>
        <description>&lt;p&gt;Ollamaは、ユーザーがローカルで大規模言語モデル（LLM）を実行・デプロイできるように設計されたオープンソースのAIツールです。クラウドサービスに依存することなく、GPTのようなモデルをローカルマシン上で利用するための、便利で効率的な方法を提供し、様々なモデルに対応しています。また、パフォーマンスの最適化に重点を置いており、リソースが限られたデバイスでもスムーズに動作するようにしています。&lt;/p&gt;
&lt;p&gt;Ollama を使用すれば、ユーザーはテキストベースのAIアプリケーションを利用でき、データプライバシーや高額なAPI利用料金を心配することなく、ローカルにデプロイされたモデルと対話できます。様々なモデルをコマンドラインインターフェース（CLI）から呼び出し、自然言語処理や質問応答などのタスクを実行できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ollamaは様々なモデルの試用に向いていますが、Windows版をテストしたところ、ハードウェアの性能を十分に発揮できませんでした。原因はWindows版にあるのかもしれません。Linux版の方が良いかもしれません。32bパラメータのモデルをデプロイしても、メモリやGPUの負荷が低いにも関わらず、応答速度が非常に遅いです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ハードウェア概要&#34;&gt;ハードウェア概要
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;OS：Win11&lt;/li&gt;
&lt;li&gt;CPU：i7-10700K&lt;/li&gt;
&lt;li&gt;メモリ：40GB&lt;/li&gt;
&lt;li&gt;グラフィックボード：RTX 3060 12GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;環境準備&#34;&gt;環境準備
&lt;/h2&gt;&lt;p&gt;新たにシステム環境変数を追加し、今後の利用を容易にします。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_MODELS=E:\ollama&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
この変数は、Ollamaモデルの保存パスを指定します。&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; はフォルダパスであり、すべてのローカルモデルファイルがそのディレクトリに格納されます。Ollamaは、このパスに基づいてダウンロードまたはデプロイした言語モデルを読み込み使用します。モデルファイルを別の場所に保存する場合は、このパスを変更するだけです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_HOST=127.0.0.1:8000&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
この環境変数は、Ollama サービスが利用するホストとポートを設定します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; はローカルアドレス（localhost）を意味し、Ollama サービスはローカルからのリクエストのみを待ち受けます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; は、指定されたポート番号で、Ollamaサービスが8000ポートでリクエストを待機し処理することを示します。必要に応じてポート番号を変更できますが、そのポートが他のアプリケーションによって使用されていないことを確認してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_ORIGINS=*&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
この環境変数は、Ollama サービスにアクセスできるリクエストのソースを制御します。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;あらゆるソース（すべてのドメインとIPアドレス）からのアクセスを許可します。これは通常、開発およびデバッグ環境で使用され、本番環境ではセキュリティを高めるために、特定のドメインまたはIPのみがサービスにアクセスできるように制限することが一般的です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deepseek-r1-モデルのデプロイ&#34;&gt;DeepSeek-R1 モデルのデプロイ
&lt;/h2&gt;&lt;p&gt;インストールは簡単ですので、詳細は割愛します。&lt;/p&gt;
&lt;p&gt;インストール後の検証：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core&amp;gt;ollama -v
ollama version is 0.5.11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;モデルのデプロイについては、公式ウェブサイトのモデルページを参照し、対応するパラメータを持つモデルを選択してください。&lt;/p&gt;
&lt;p&gt;14bパラメータは会話コンテキストを効果的に記憶できるが、より小さいパラメータのバージョンでは記憶できない。32bパラメータ版はローカル環境での動作が重く、さらなるテストは実施していない。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ollama.com/library/deepseek-r1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ollama.com/library/deepseek-r1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/x18990027/article/details/145368094&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/x18990027/article/details/145368094&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>PowerShell 7 と永続化設定コマンドライン予測ビュー</title>
        <link>https://ttf248.life/ja/p/powershell-7-persisting-settings-command-line-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/powershell-7-persisting-settings-command-line-prediction-view/</guid>
        <description>&lt;p&gt;Linuxのzshに慣れていましたが、ブログを書こうとしてPowerShell 7がコマンドライン予測ビューの永続化もサポートしていることを知り、試してみたところ、なかなか便利でした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;何らかの操作をしたのか、機能が有効になったのかは不明だが、とにかく存在するようになった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現代の多様なオペレーティングシステム環境において、システム管理者や開発者は、システム管理および自動化タスクに対応できる、クロスプラットフォームで効率的かつ強力なツールを求めています。PowerShell 7はまさに、そうした注目を集めているツールであり、強力なスクリプト作成機能に加え、Windows、Linux、macOSといった複数のオペレーティングシステム上で動作し、ユーザーに前例のない利便性をもたらします。&lt;/p&gt;
&lt;h2 id=&#34;powershell-7クロスプラットフォームの強力なツール&#34;&gt;PowerShell 7：クロスプラットフォームの強力なツール
&lt;/h2&gt;&lt;h3 id=&#34;クロスプラットフォーム機能&#34;&gt;クロスプラットフォーム機能
&lt;/h3&gt;&lt;p&gt;PowerShell 7は、プラットフォームの制約を取り払い、Windows環境でのエンタープライズサーバー管理、Linux環境でのシステム運用、macOS上での日常的な開発タスクまで、統一されたPowerShell 7ツールで利用できます。これにより、作業効率が向上し、プラットフォームの違いによる学習コストや操作の複雑さが軽減されます。&lt;/p&gt;
&lt;h3 id=&#34;強力な機能&#34;&gt;強力な機能
&lt;/h3&gt;&lt;p&gt;強力なスクリプト作成機能を備え、オブジェクト指向プログラミング、関数、モジュールなどの高度なプログラミング機能に対応しています。PowerShell 7を通じて、ユーザーはファイルシステムを容易に操作し、ファイルの作成、削除、コピー、移動などを行うことができます。レジストリへのアクセスと修正も可能で、システムの構成を詳細に調整できます。また、プロセスやサービスを管理し、システム動作状態の効率的な監視と制御を実現します。さらに、PowerShell 7はActive Directoryでのユーザーおよび権限管理、Azureクラウドプラットフォーム上でのリソース割り当てと管理など、様々なWindowsおよび非Windows技術との連携も可能です。&lt;/p&gt;
&lt;h3 id=&#34;オープンソースエコシステム&#34;&gt;オープンソースエコシステム
&lt;/h3&gt;&lt;p&gt;PowerShell 7はオープンソースであり、その特性により、世界中の開発者や愛好家が積極的に開発と改善に参加できます。多数のオープンソースモジュールやツールが次々と登場し、PowerShell 7 の機能と応用範囲を広げています。ユーザーはニーズに合わせてオープンソースコミュニティから適切なモジュールを見つけたり、コードを寄稿してコミュニティ全体の発展に貢献したりすることができます。&lt;/p&gt;
&lt;h3 id=&#34;互換性と安定性&#34;&gt;互換性と安定性
&lt;/h3&gt;&lt;p&gt;PowerShell 7は、古いバージョンのPowerShellとの互換性を維持しつつ、多くの新機能と改善を導入しています。これらの改善はパフォーマンスの向上に加え、安定性も強化しており、ユーザーはよりスムーズにタスクを完了でき、ソフトウェアの不具合による中断を減らすことができます。&lt;/p&gt;
&lt;h2 id=&#34;コマンドライン予測ビューを開く&#34;&gt;コマンドライン予測ビューを開く
&lt;/h2&gt;&lt;p&gt;PowerShell 7の多くの便利な機能の中でも、__INLINE_CODE_0__コマンドは、ユーザーのコマンドライン入力体験を向上させる実用的なツールです。&lt;/p&gt;
&lt;p&gt;コマンドの実行なしでもオートコンプリートは機能しますが、それは行内での補完に限られます。有効にすると予測ビューが表示され、考えられるすべての補完候補をリスト形式で表示します。ユーザーは上下キーで必要な候補を選択でき、入力の正確性と効率が向上します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;コマンドを永続的に有効にする方法&#34;&gt;コマンドを永続的に有効にする方法
&lt;/h2&gt;&lt;p&gt;PowerShellを起動するたびに &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; コマンドが有効になるようにするには、PowerShellのプロファイルにそれを追加できます。PowerShellのプロファイルは特別なスクリプトで、PowerShellの起動時に自動的に実行されます。&lt;/p&gt;
&lt;h3 id=&#34;設定構成ファイルパス&#34;&gt;設定構成ファイルパス
&lt;/h3&gt;&lt;p&gt;PowerShellでは、__INLINE_CODE_0__変数を使って設定ファイルのパスを確認できます。そのパスにファイルが存在しない場合、ユーザーは手動で作成できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;設定ファイルを開く&#34;&gt;設定ファイルを開く
&lt;/h3&gt;&lt;p&gt;テキストエディタ（強力なNotepad++や軽量のVisual Studio Codeなど）で、__INLINE_CODE_0__変数から取得される設定ファイルパスに対応するファイルを開きます。&lt;/p&gt;
&lt;h3 id=&#34;追加命令&#34;&gt;追加命令
&lt;/h3&gt;&lt;p&gt;開いている設定ファイルに、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; コマンドを追加してください。コマンドの記述ミスがないように注意し、設定ファイルが実行時に正しく有効になるようにしてください。&lt;/p&gt;
&lt;h3 id=&#34;設定ファイルを保存&#34;&gt;設定ファイルを保存
&lt;/h3&gt;&lt;p&gt;コマンドが完了したら、設定ファイルを保存し、テキストエディタを閉じます。これで、設定ファイルには毎回 PowerShell を起動する際に実行したいコマンドが含まれています。&lt;/p&gt;
&lt;h3 id=&#34;設定確認&#34;&gt;設定確認
&lt;/h3&gt;&lt;p&gt;現在のPowerShellウィンドウを閉じ、再起動します。新しく起動したPowerShellでコマンドを入力すると、コマンドライン入力予測ビューがリスト形式で表示されるはずです。これにより、設定が正常に適用されていることが確認できます。&lt;/p&gt;
&lt;p&gt;上記の手順を通じて、私たちは PowerShell 7 の強力な機能と特徴を深く理解するだけでなく、コマンドライン入力による予測ビューのスタイル設定によって操作性を向上させる方法や、これらの設定を持続的に有効にする方法も習得しました。これらの知識が、PowerShell 7 を使用する際にスムーズに作業を進め、様々なシステム管理および自動化タスクを効率的に完了できるよう役立つことを願っています。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ディープシーク、春節前に急成長、NVIDIA株が暴落：背景にある機関投資家の動きと大規模言語モデルの推論チェーン</title>
        <link>https://ttf248.life/ja/p/deepseek-chinese-new-year-nvidia-stock-drop-institutional-operations-large-language-model-chain/</link>
        <pubDate>Fri, 07 Feb 2025 20:36:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/deepseek-chinese-new-year-nvidia-stock-drop-institutional-operations-large-language-model-chain/</guid>
        <description>&lt;p&gt;旧正月前夜、DeepSeekが一度話題の中心となり、数日のうちにSNSで広く注目を集めました。この突如の急上昇は驚くべきものであり、市場に連鎖的な反応を引き起こしました。一方、NVIDIA株は暴落し、多くの投資家がその見通しを疑心暗鬼に陥りました。一部機関は期間中に大規模な空売りを行い、まるで全てが「周到に計画された」状況を示唆しているかのようでした。&lt;/p&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;p&gt;DeepSeekは、深層学習モデルの最適化に特化したAIツールであり、特に自然言語処理（NLP）や画像生成分野での応用を重視しています。旧正月の数日前、このプロジェクトは突如として多くの投資家や技術者の注目を集めました。その開発チームの実績と技術成果が、多くの人々から強い関心を引き起こしました。開発者コミュニティはもちろんのこと、ソーシャルメディアプラットフォームにおいても、DeepSeekに関する議論が技術界の話題を席巻しています。&lt;/p&gt;
&lt;p&gt;しかし、DeepSeekの突如たる爆発的な人気は偶然ではない。分析の結果、多くの人が背後に何らかの組織の操作が関与しているのではないかと疑い始めている。特に、その人気に沸騰した後、NVIDIA株価が著しい下落を見せていることから、明らかに何らかの要因がこの変化を促していることが見て取れる。&lt;/p&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-1&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;p&gt;NVIDIAは、世界をリードするGPUメーカーであり、長らく大規模モデルやAI計算の主要なハードウェアサプライヤーとして機能してきました。AI市場の急速な成長とともに、同社の株価は長期的に好調で、多くの投資家の注目を集めていましたが、DeepSeekの急上昇と市場からの高い関心により、NVIDIA株は暴落しました。&lt;/p&gt;
&lt;p&gt;この現象の背景には、機関投資家の空売り戦略が関わっているかもしれない。近年、AI技術の普及に伴い、NVIDIA株価は大きく上昇し、多くの投資家が過剰なバブルのリスクを感じ始めていた。特にDeepSeekのような技術が爆発的に広まった後、一部の機関はNVIDIA株を空売りすることで、大きな利益を得た可能性がある。正確な市場タイミングの把握とDeepSeekの影響力への予測により、彼らは成功裏に利益を上げた。&lt;/p&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-2&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;p&gt;伝統的なAI応用では、多くの専門家や投資家は生成された画像やテキストといったAIモデルの「結果」に注目していましたが、DeepSeekに関連する議論の中で、より多くの人々が、大規模言語モデル（LLM）背後にある推論連鎖こそが、より注力すべき核心的内容であることに気づき始めています。これまで私たちはモデルの出力結果しか見ることができませんでしたが、今やその背後にあるロジック、アルゴリズムを理解し、これらの要素を調整してモデルのパフォーマンスを最適化することが求められています。&lt;/p&gt;
&lt;p&gt;この思考様式の転換は、AI研究と応用に対する深い考察と言えるでしょう。単純なブラックボックス操作から、モデル内部の動作メカニズムを真に理解することへの転換は、多くの技術者や投資家が人工知能の将来的な発展方向を改めて見直すきっかけとなりました。DeepSeek の人気は、まさにこの思考の突破口であり、人々は最終的な出力結果だけでなく、モデル全体の構築と最適化プロセスに関心を向けるようになりました。&lt;/p&gt;
&lt;h3 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-3&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h3&gt;&lt;p&gt;DeepSeekの急激な人気、NVIDIA株式の大幅下落、そして市場背景にある機関投資家の空売り操作。これらはすべて、巧妙に仕組まれた陰謀なのかもしれません。大規模言語モデルの思考回路を深く理解することで、AI技術の応用は単なる表面的な積み重ねではなく、モデル内部の論理を探求し最適化することであることが分かります。技術の進歩に伴い、今後DeepSeekのような革新的なツールがさらに多く登場し、AI研究と応用の発展を新たな高みに導くことが期待されます。&lt;/p&gt;
&lt;p&gt;この現象は、AI技術の巨大な可能性を私たちに見せてくれるだけでなく、その背景にあるビジネス対立や資本運用のあり方を考えさせるものとなりました。今後の市場動向は、技術と資本との駆け引きの継続的な注目点となるでしょう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>現代貨幣理論は、世界の経済の未来ですか？</title>
        <link>https://ttf248.life/ja/p/modern-monetary-theory-future-global-economy/</link>
        <pubDate>Thu, 06 Feb 2025 23:16:34 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/modern-monetary-theory-future-global-economy/</guid>
        <description>&lt;p&gt;米国の株式市場の強気相場は、米国自身の「実力」を除けば、ドル大量供給の影響が大きい。&lt;/p&gt;
&lt;p&gt;現代貨幣体系は、&lt;strong&gt;BOLD_0&lt;/strong&gt;以降、多くの経済体の重要な理論的支柱となり、その主な特徴として、政府の市場介入における主体的能動性をより強調し、政府財政赤字を主要なツールとして活用することで、雇用の完全性とインフレの安定を実現する。&lt;/p&gt;
&lt;p&gt;大政府大家更熟悉的是&lt;strong&gt;大胆の財政政策&lt;/strong&gt;、経済周期における&lt;strong&gt;積極的な&lt;/strong&gt;役割を強調し、過熱時には抑制、そして景気縮小時には刺激を行うこと。政府支出の&lt;strong&gt;乗数効果&lt;/strong&gt;に重点を置き、同じ金額の貨幣がどれだけ消費乗数を増加させるかという点に注目する。政府支出1元は企業や個人の収入を1元増やし、企業は生産を拡大して雇用を増やし、個人は消費を拡大することで景気縮小を防ぐ。同時に、財政赤字の上限と持続可能性に対しては比較的保守的であり、&lt;strong&gt;市場の回復&lt;/strong&gt;は政府の収入を増加させ、特に経済過熱期の抑制は、次回の景気を刺激するための資金を蓄積することができる。例えば、政府の債務潜在力や金利水準などである。&lt;/p&gt;
&lt;p&gt;現代の貨幣体系は、極端なケインズ主義の延長線上にあると言えるが、その最大の特徴は政府債務の制限問題であり、中央銀行は独立性を有すべきではない。主な目標は&lt;strong&gt;通胀和充分就业&lt;/strong&gt;、資源と生産力が限られた場合のインフレである。つまり、政府は無制限の財政赤字を通じて、技術進歩に伴う生産効率の向上とともに、市場に購買力を不断的に供給し、理想的な完全雇用と生産ボトルネックに到達する。その後、通貨を増加させるとインフレを引き起こすため、財政赤字の上限を選択的に抑制する。市場に余剰な生産資材が残る限り、政府による赤字の拡大はインフレを引き起こさない。&lt;/p&gt;
&lt;h2 id=&#34;金融危機後&#34;&gt;金融危機後
&lt;/h2&gt;&lt;p&gt;もちろん現実とは理想世界ではないので、各段階の実行には人の関与が伴い、ケインズ主義も選択的に適用されるため、結果として経済下行を刺激する方が多く、経済過熱を抑制する方は少ない。経済不振を刺激することで政績を得ることもできるし、経済過熱も同様で、根本的に抑制することは難しく、それに伴う多くの経済問題や新たな金融危機が生じさえする。それは伝統的な過剰生産による経済的ショックに匹敵するほどである。2008年の世界金融危機は、極端なケインズ主義の下での市場の自己強化によってもたらされたバブルであり、不動産やそれを底子とする金融投資商品など、多数のポンジスキーム金融投資品が出現した。危機の勃発前には、学界、政界、市場レベルを含め、リスクに対する認識が不足しており、債務を支えた繁栄を政績と見なしていた。多くはそこから利益を得ており、巨大な金融システムはその典型例だ。「損失はあなた方のもの、配当は私たちのもの」という状況で破綻しても、すでに大いに稼いでいるため、お金を吐き出すことは不可能であり、最終的に多数の参加者が、先行者の各段階での利益を負担することになった。&lt;/p&gt;
&lt;p&gt;このとき、現代の通貨体系が金融危機を経て示す典型的な特徴は、急速な&lt;strong&gt;财政赤字货币化和央行的无限量化宽松&lt;/strong&gt;と、いわゆる緊急時の中央銀行貸付政策です。中央銀行は最後の貸し手として無限に資金を供給し、政府も不断的に債務を負うことができます。中央銀行と財政政策が協調して連携し、中央銀行は国債の購入などを通じて政府の財政赤字支出を支援し、政策目標の一致性を確保します。これが、現代の金融政策と財政政策の境界線がますます曖昧になる理由です。マネーサプライに関しては、中央銀行が直接国債を購入することに大きく依存しており、左手で紙幣を刷り、右手で支出するという状況になっています。&lt;/p&gt;
&lt;p&gt;ユーロ圏と米国は同様の傾向を見せている。2008年のEUの政府債務は約6.7兆ユーロ、レバレッジは約66%で、一般的に警戒線とされる60%をわずかに上回っていた。救済策を実施した5年間の2014年には、債務規模は9.5兆ユーロに、レバレッジは93%に達している。一方、米国はさらに深刻で、2008年の政府債務は約10兆ドル、2014年には約18兆ドルまで増加し、最近では政府債務上限を再び引き上げている。この度に「政府機能停止」という名目で騒ぎになるものの、結果として債務限度額は突破され、現在36兆ドルに達しており、2008年の金融危機から26兆ドル増加している。GDPの成長を考慮しても、レバレッジは60%から120%以上へと上昇している。FRBは最終貸出者として、何度も救済策において重要な役割を果たし、政府債務の主要な買い手の一角でもある。&lt;/p&gt;
&lt;h2 id=&#34;現代貨幣制度の欠点と限界&#34;&gt;現代貨幣制度の欠点と限界
&lt;/h2&gt;&lt;p&gt;このような政府主導の経済刺激策は、計画経済とは言えないまでも、直面する問題点は共通している。市場の全知全能と、全ての段階に関わる者の利他的行動をどう保証するのか？最も簡単な例を挙げると、もし政府が特定の方向への予算を100万増やした場合、それは幹部の甥のためか、それともコストパフォーマンスの高い市場競争なのか？もちろん現実にはより複雑な形で利益が流れてしまう結果となり、政府は債務と支出を拡大しても、その流れは完全に制御不能となる。最近アメリカで騒動になっている政府効率化部門の設立も、まさに此类問題の延長線上にある。もちろんこれらは様々な腐敗指数経済体において、その現れ方は様々だが、ここではより普遍的な問題を議論する。&lt;/p&gt;
&lt;h3 id=&#34;インフレ問題&#34;&gt;インフレ問題
&lt;/h3&gt;&lt;p&gt;現代の情報ネットワークの発展に伴い、政府は市場情報の掌握度において過去を大きく上回っているものの、全知全能ではないことに加え、市場自体には変動があり、常に予測に基づいて変化し、入れ子構造に入る。私はあなたの予測を予測した。実際のパフォーマンスを見てみれば、2008年～2020年の間、現代貨幣理論は目覚ましい経済回復とインフレ安定を実現し、ユーロ圏では一時的なデフレーション問題さえ発生したが、アメリカのインフレも概ね1〜3%という予測範囲内に維持された。これにより、人々はかつてケインズ主義を信じたように、より過激なツールを信じるようになった。&lt;/p&gt;
&lt;p&gt;実際、振り返ってみると、これは主に2008年以降も高い成長傾向を維持した発展途上国の製造業によるものだ。例えば、この間にグローバルな生産地位を確立した中国をはじめ、新興の東南アジアやインドなどの経済体も、高い製造業付加価値を維持しており、まさに現代貨幣理論における最大の制約である資源供給制限を相殺し、産業空洞化と過剰な金融化が進み、政府債務と通貨供給が増大する中で、欧米が比較的安定したインフレを維持することを可能にした。&lt;/p&gt;
&lt;p&gt;しかし、2020年以降、より大規模な景気刺激策が実施されたことにより、ユーロ圏と米国では顕著なインフレが発生し、最高で10%前後を記録しました。今日に至るまで、利上げから3年近く経ったにもかかわらず、米国の雇用市場は依然として異常なほど過熱しており、金融市場は金融支援の下で経済成長との乖離した過剰な繁栄を示しています。基準効果が薄れるにつれて、米国のインフレは再び3%に向かっており、この利上げにおける過熱ぶりは財政赤字と密接に関連しています。利上げは金融政策の収縮ですが、財政政策は確かに拡大しており、2020年の超大規模な資金供給と重なり合い、米国のインフレを異常に頑固なものにしています。現代貨幣理論の最大の制約は、高インフレです。&lt;/p&gt;
&lt;h3 id=&#34;政府債務問題&#34;&gt;政府債務問題
&lt;/h3&gt;&lt;p&gt;原則上、政府は債務償還のために債務を抱えて債務を返済することを無制限に行うことができるが、その前提は&lt;strong&gt;央行彻底沦为傀儡&lt;/strong&gt;、すなわち現代通貨体系における&lt;strong&gt;财政政策和货币政策的目标一致性&lt;/strong&gt;である。明らかに、FRBは政府に完全に権限を与えるつもりはない。数十年にわたって積み重なった政府の債務残高、特に利息支出と合わせると、高金利と高負債は徐々に財政の巨大な負担となっている。&lt;/p&gt;
&lt;p&gt;2023会計年度：米国は2023会計年度の税収が4兆4390億ドル、そのうち利子支払いは税収に占める約15%。2024年も同様の高金利状態が続いている。米国財務省発表によると
2024会計年度：米国の連邦政府の財政赤字は1兆8330億ドルに達し、利払い費は8820億ドルとなり、米国の連邦歳入の約18%を占めるほど、社会保障給付支出さえ上回った。&lt;/p&gt;
&lt;p&gt;これが財政の持続可能性の問題であり、低金利と低インフレを長期的に維持し、高債務（例えば日本の場合）を抱え続けると、長期的には準現代貨幣理論のような応用が生まれる可能性がある。72の法則によれば、金利が十分に低い限り、財政による借金まじりの増加は非常に緩やかである。もし資金コストが1%であれば、純粋な借金まじりでは72年で債務が倍増する。インフレがこの微妙な均衡を崩すと、債務の利息償付が積み重なる過程で複利効果により将来の債務が増え続け、元本は二の次になる。中央銀行が政権目標と一致しない場合、これらの問題はさらに深刻化するだろう。トランプ政権の政治的主張は、現在のFRB（連邦準備制度理事会）のタカ派との明確な違いであり、これがこの任期中に米国政府とFRBの関係が悪化した重要な要因となっている。皆が最も注目しているのは、現職議長が任期満了までスムーズに就任できるかどうかだろう。&lt;/p&gt;
&lt;h3 id=&#34;金融バブルと通貨信用問題&#34;&gt;金融バブルと通貨信用問題
&lt;/h3&gt;&lt;p&gt;理想的には、政府支出拡大が住民や企業部門に波及し、誰もが支出を増やして有効需要を喚起するはずだが、皆は2000年以降の数々の金融バブルの当事者であり、投資と消費の選択において、明らかに投資による価値向上への強い傾向が生じる。特に、極めて高い価値向上の期待を持つ商品が出現した際には、人々は一斉に金融市場でより高い価値を求め、生活水準を犠牲にしたり、レバレッジをかけて購入したりすることを厭わない。これは、日本、米国、我が国における不動産の高成長期に限らず共通の現象であり、政策刺激や従事者の利益最大化の追求、劣質貸付といった問題が多発し、多くのいわゆる市場救済策は実際には債務を奨励しているに過ぎない。&lt;/p&gt;
&lt;p&gt;そのため、歴史は驚くほど一貫性を示し、金融政策と財政政策が大規模に力を入れるときには、多くの場合、&lt;strong&gt;BOLD_0&lt;/strong&gt;、資産バブルが先行し、富の再分配が後を追い、それが別の問題、すなわち極端なケインズ主義や現代貨幣理論の長期的な使用によって引き起こされる経済ポンジスキーム（ミン スキーモーメント）へとつながる。熱いマネーが存在する限り、資産価格は上昇し続け、その上昇が新たな投資者を惹きつけ、通貨による支出の変化を測るCPIは目立って変化しない。資金が特定の分野で空回りし、後発の投資者は資金不足に陥り、&lt;strong&gt;BOLD_1&lt;/strong&gt;、すなわちミン スキーモーメントの裁きが、間違いなく繰り返される。&lt;/p&gt;
&lt;p&gt;さらに、通貨自体も需給の関係にあります。市場の供給が過剰になったり、伝統的な投資対象が吸収しきれなくなったり、あるいは何度も収穫を繰り返して資金を吸い込めなくなった場合（日本人は数十年間不動産投資には手を出していません）、税制などの抑制策や、投機的需要を下げるために不動産の保有税を増やすといった措置は、金融投機のコストを高めます。そうした通貨供給過多の状況下では、市場は急いで&lt;strong&gt;吸金且免税&lt;/strong&gt;な投資対象を必要とし、様々な仮想投資商品が生まれてきます。アメリカ大統領とその妻さえも参入し、一食分を手に入れています。ある見方によると、これは米ドルの壁から資金を引き出すことですが、実際には、世界的な通貨の乱発と金融の空転による法定通貨の信用失墜という必然的な結果と言えます。現代貨幣理論が最も依存している国家による独占的権利に基づく信用通貨の地位ですら、挑戦を受けるかもしれません。どのような土壌があれば、どのような金融ゲームが生じるのでしょうか。&lt;/p&gt;
&lt;p&gt;要するに、現代貨幣理論（MMT）はケインズ主義と連続・代替の関係にあると言え、政府による市場への積極的な介入をより重視し、財政赤字や中央銀行の独立性に対する姿勢もより急進的です。ケインズ主義の過剰な使用がスタグフレーションと金融危機を引き起こし、その反動としてMMTは2008年以降に台頭しました。経済のグローバル化下での生産性の向上により、短期的に成長を回復し、インフレ率を維持しましたが、同時に莫大な政府債務と金融バブルも蓄積されました。インフレが反発し、中央銀行と政府の目標が一致せず、高金利と高レバレッジが並立すると、政府の利払い負担は増大し、財政持続可能性は低下します。また、過剰な政府による基礎通貨の発行は金融バブルを引き起こし、無制限な貨幣印刷は貨幣自体の信用を損ないます。ドル高に見えるのは、単なる相対的な評価であり、実際にはグローバル経済の縮影です。巨大な投資需要が様々な新しい金融投資・投機ツールを生み出し、従来の金融投資商品の課税制限を逃れることもあります。MMTは未来ではなく、2008年から使用されていた過去の政策と言えるでしょう。逆グローバリゼーションと相まって、過去の金融バブルの大きさ、政府債務の蓄積度合い、そして投機ツールの狂気が大きければ大きいほど、歪んだ富の分配効率が高まり、ハードランディングのリスク（経済的・社会的リスクを含む）は高まります。ケインズ主義であれMMTであれ、どれだけ貨幣を供給しても、真に構造的な問題解決にはならず、むしろ資産バブルやモラルハザードの中でリスクを激化させるだけです。人々は同じ過ちを様々な形で繰り返しますが、そこから学ぶことはありません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>atopツールによるLinuxシステム指標の監視：インストール、設定と利用完全ガイド</title>
        <link>https://ttf248.life/ja/p/using-atop-to-monitor-linux-system-metrics-installation-configuration-and-usage-guide/</link>
        <pubDate>Thu, 06 Feb 2025 22:48:55 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/using-atop-to-monitor-linux-system-metrics-installation-configuration-and-usage-guide/</guid>
        <description>&lt;p&gt;Linuxシステム運用において、システムリソースとプロセス状態をリアルタイムかつ包括的に監視することは非常に重要です。atopは強力な監視ツールであり、この目標を容易に達成するのに役立ちます。本稿では、Linuxインスタンスにおけるatop監視ツールのインストール、設定、使用方法について詳細に説明します。&lt;/p&gt;
&lt;h2 id=&#34;一atopツール紹介&#34;&gt;一、atopツール紹介
&lt;/h2&gt;&lt;p&gt;atopは、Linuxシステムのリソースとプロセスを監視するためのツールです。システムおよびプロセスの活動を記録し、すべてのプロセスの実行状況を報告します。CPU、メモリ、ディスク、ネットワークなどのリソース使用状況やプロセス状態に関するデータを収集し、ログファイルとして保存できます。各プロセスについて、CPU使用率、メモリ増加量、ディスク使用率、優先度、ユーザー名、状態、終了コードなどの主要な情報を取得可能です。さらに、atopの設定ファイルを通じて、ログの収集頻度、ログファイルの保存パス、ローテーションポリシーなどのパラメータをカスタマイズできます。&lt;/p&gt;
&lt;h2 id=&#34;二atopツールのインストール&#34;&gt;二、atopツールのインストール
&lt;/h2&gt;&lt;p&gt;様々なLinuxディストリビューションでのatopのインストール方法は若干異なります。以下では、一般的なOSを例として説明します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Alibaba Cloud Linux 3/2、CentOS 7/8、Fedora、Rocky Linux 9&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;実行インストールコマンド：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始します。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu / Debian&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ソフトウェアリポジトリの更新：&lt;/li&gt;
&lt;li&gt;実行インストールコマンド：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始します。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;CentOS Stream 9&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ダウンロードしてインストール：&lt;/li&gt;
&lt;li&gt;atopサービスを開始します。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;openSUSE&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;実行インストールコマンド：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;atopサービスを開始します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もし上記に挙げられているオペレーティングシステムに利用しているディストリビューションが含まれていない場合は、atop公式サイトでインストール情報を確認してください。&lt;/p&gt;
&lt;h2 id=&#34;監視期間とログ保持期間の設定&#34;&gt;監視期間とログ保持期間の設定
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Alibaba Cloud Linux 3/2、CentOS 7/8およびFedoraシステムでは、atopの構成ファイルは*&lt;strong&gt;；在Ubuntu、Debian和openSUSE系统中，配置文件是&lt;/strong&gt;*です。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ログファイル記録オプションを制御します。デフォルトは空です。&lt;/li&gt;
&lt;li&gt;監視期間はデフォルトで600秒です。過去のログを追跡する場合は、必要に応じてこの頻度を調整することをお勧めします。&lt;/li&gt;
&lt;li&gt;ログ保持期間、デフォルト28日。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;strong&gt;太字&lt;/strong&gt;&lt;em&gt;斜体&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;コマンドを実行して設定ファイルを開きます。&lt;/li&gt;
&lt;li&gt;Alibaba Cloud Linux 3/2、CentOS 7/8、Fedoraシステムにおいて：&lt;/li&gt;
&lt;li&gt;Ubuntu、Debian、openSUSE、CentOS Stream 9、Rocky Linux 9 システムにおいて：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;__INLINE_CODE_0__を選択して編集モードに入り、必要に応じて設定パラメータを調整します。例えば、監視サイクルを30秒に修正し、ログ保持期間を7日に設定し、ログパスはデフォルトのままにします。&lt;/li&gt;
&lt;li&gt;押して、保存して終了します。&lt;/li&gt;
&lt;li&gt;サービスを再起動して設定を有効にする：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LOGOPTS=&amp;quot;&amp;quot;
LOGINTERVAL=30
LOGGENERATIONS=7
LOGPATH=/var/log/atop 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;四atopツールを使用する&#34;&gt;四、atopツールを使用する
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;対話型コマンドモードでは、以下のよく使用されるコマンドがあります。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;デフォルトの統合出力ビューに戻ります。&lt;/li&gt;
&lt;li&gt;プロセスの一覧を完全なコマンドラインと共に表示します。&lt;/li&gt;
&lt;li&gt;プロセスメモリ使用率で降順にフィルタリングします。&lt;/li&gt;
&lt;li&gt;プロセスディスク使用率で降順にフィルタリングします。&lt;/li&gt;
&lt;li&gt;プロセス資源の総合利用率で降順にフィルタリングします。&lt;/li&gt;
&lt;li&gt;プロセスネットワーク利用率で降順にフィルタリングします。&lt;/li&gt;
&lt;li&gt;次の監視収集ポイントへ移動します。&lt;/li&gt;
&lt;li&gt;前の監視ポイントへ移動します。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;strong&gt;太字&lt;/strong&gt;&lt;em&gt;斜体&lt;/em&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ホスト名、情報サンプリングの日付と時刻。&lt;/li&gt;
&lt;li&gt;プロセス全体の実行状況。カーネルモードおよびユーザーモードの実行時間、プロセスの総数、各種状態のプロセス数などを含む。&lt;/li&gt;
&lt;li&gt;CPU全体の利用状況で、各フィールドの数値の合計は__INLINE_CODE_0__（NはCPUコア数）です。カーネルモード、ユーザーモード、割り込み、アイドル、ディスクI/O待ちなどの時間割合を含みます。&lt;/li&gt;
&lt;li&gt;CPU負荷状況：過去1分間、5分間、15分間の実行キューの平均プロセス数、コンテキストスイッチ回数、割り込み発生回数。&lt;/li&gt;
&lt;li&gt;メモリ使用状況。物理メモリ合計、空きメモリ、ページキャッシュメモリ、ファイルキャッシュメモリ、カーネル使用メモリなどを含む。&lt;/li&gt;
&lt;li&gt;スワップ領域の使用状況を示します。割り当てられた合計サイズと利用可能なスワップ領域のサイズが含まれます。&lt;/li&gt;
&lt;li&gt;仮想メモリのページング状況、例えばスワップインおよびスワップアウトされたページ数。&lt;/li&gt;
&lt;li&gt;ディスクの使用状況。各ディスクデバイスごとに1行で、デバイス識別子、ビジー状態の時間割合、読み書きリクエスト数を示します。&lt;/li&gt;
&lt;li&gt;ネットワーク状況を表示し、転送層のTCPとUDP、IP層、および各アクティブポートでの受信・送信パケットサイズを示します。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;5秒ごとにシステム指標を確認する。&lt;/li&gt;
&lt;li&gt;現在時刻の5分後（合計30回、10秒間隔）にシステム指標を確認します。&lt;/li&gt;
&lt;li&gt;現在時刻の10分後のシステム指標を確認し（10回、60秒間隔で）、結果をファイルに書き込む：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;起動後、データはデフォルトで__INLINE_CODE_0__ディレクトリに保存されます。確認する際は、指定した日付のログファイルが存在することを確認してください。存在しない場合、エラーが発生します。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当日の履歴指標ログを確認：&lt;/li&gt;
&lt;li&gt;昨日のヒストリ指標ログを見る：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;指定日の過去の指標ログを確認します。例：2024年11月06日&lt;/li&gt;
&lt;li&gt;指定された日付から指定時間以降の履歴指標ログを表示します。例：2024年11月06日14:00以降：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;指定された日付範囲内の過去の指標ログを表示します。例えば、2024年11月5日の00:04～00:08：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;現在のシステムにおけるCPU使用率レポートを1分間（12回、5秒間隔で）：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当日指定時間帯のメモリ指標レポートを確認します。例：18:00～18:01。&lt;/li&gt;
&lt;li&gt;指定された日付の指定時間帯におけるメモリ指標レポートを確認します。例えば、2024年11月5日18:00～18:01：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;その他操作&#34;&gt;その他操作
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;毎日atop指標ログファイルを生成したい場合は、以下の手順を実行してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;必要に応じて、監視期間、ログ保持時間、およびログ保存パスを調整できます。&lt;/li&gt;
&lt;li&gt;コマンド実行で、毎日ログローテーション関連サービスの起動設定を行い、サービスを開始します。&lt;/li&gt;
&lt;li&gt;ビジネスがログ処理に複雑な要件を持つ場合、logrotateやカスタムスクリプトを組み合わせてログ管理を実現できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;加载可选的netatop内核模块&lt;/strong&gt;: ネットワーク利用率の監視が必要な場合は、netatopモジュール（atopではデフォルトでインストールされていません）をインストールします。例として、Alibaba Cloud Linux 3システムの場合：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;カーネル開発パッケージのインストールとコンパイルに必要なソフトウェア環境：&lt;code&gt;sudo yum install -y kernel-devel dkms elfutils-libelf-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最新バージョンのnetatopソースコードを、指定のディレクトリにダウンロードします。&lt;/li&gt;
&lt;li&gt;ソースコードを解凍し、ソースディレクトリへ移動します。&lt;/li&gt;
&lt;li&gt;ソースコードからモジュールとデーモンを構築・インストール：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;netatopサービスを開始します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;atopツールは機能が強力で柔軟性があり、適切なインストール、設定、利用によって、Linuxシステムの稼働状況をより深く理解し、潜在的な問題を早期に発見・解決できます。本稿が皆様のLinuxシステム監視スキル向上の一助となれば幸いです。&lt;/p&gt;
&lt;h2 id=&#34;参考リンク&#34;&gt;参考リンク
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>為替レートの「買値」と「売値」を理解する。</title>
        <link>https://ttf248.life/ja/p/understanding-exchange-rates-buy-and-sell-rates/</link>
        <pubDate>Thu, 06 Feb 2025 22:32:10 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/understanding-exchange-rates-buy-and-sell-rates/</guid>
        <description>&lt;p&gt;外国為替市場、特に銀行や両替所では、「買いレート」と「売りレート」という言葉をよく見かけますね。これらの概念に馴染みがない、あるいは混同している方もいるかもしれません。そこで今日は、簡単な例を通して、これらのレートの意味と役割について解説していきます。&lt;/p&gt;
&lt;h2 id=&#34;買値レートと売値レートは何ですか&#34;&gt;「買値レート」と「売値レート」は何ですか？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;銀行や両替機関は、このレートで外貨を購入する意思があり、つまり、あなたが外貨（例えばドル）を銀行に売却すると、銀行は買値レートで人民元を支払います。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;銀行や両替所がこのレートで外貨を売る意思があるということ、つまり、あなたが人民幣で購入する際に、銀行は売りレートで外貨を販売します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡単に言うと：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;購入レート&lt;/li&gt;
&lt;li&gt;販売価格。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意点として、銀行の買値と売値には通常差があり、売値は買値よりも高い傾向にあります。この差額が銀行の利益源となります。&lt;/p&gt;
&lt;h2 id=&#34;具体的な事例分析&#34;&gt;具体的な事例分析
&lt;/h2&gt;&lt;p&gt;具体的な例を挙げて、これらの為替レートの実際の応用が皆さんに分かりやすくなるようにしましょう。&lt;/p&gt;
&lt;p&gt;もし銀行でドルに両替すると、そのレートは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1ドル = 7.0人民元&lt;/li&gt;
&lt;li&gt;1ドル = 7.2人民元&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;状況一あなたが銀行にドルを売る&#34;&gt;状況一：あなたが銀行にドルを売る。
&lt;/h3&gt;&lt;p&gt;もしあなたが手元に1000ドルあり、それを銀行で両替すると、銀行は買値レートで計算します。&lt;/p&gt;
\[
1000ドル × 7.0元/ドル = 7000元
\]
&lt;p&gt;つまり、銀行はあなたに7000人民幣を支払います。この為替レートは&lt;strong&gt;买入汇率&lt;/strong&gt;です。なぜなら、あなたは銀行にドルを売るからです。&lt;/p&gt;
&lt;h3 id=&#34;状況２あなたは人民幣でドルを購入する&#34;&gt;状況２：あなたは人民幣でドルを購入する。
&lt;/h3&gt;&lt;p&gt;もしあなたが7000人民幣を持っているとして、それを米ドルに換金したい場合、銀行は販売レートで計算します。&lt;/p&gt;
\[
7000 人民币 ÷ 7.2 人民币/ドル = 972.22 ドル
\]
&lt;p&gt;この場合、7000人民元で約972.22ドルに換金できます。為替レートは&lt;strong&gt;卖出汇率&lt;/strong&gt;です。これは銀行で購入しているためです。&lt;/p&gt;
&lt;h2 id=&#34;なぜ買値と売値が異なるのですか&#34;&gt;なぜ、買値と売値が異なるのですか？
&lt;/h2&gt;&lt;p&gt;為替相場についてですが、銀行の買値（7.0元/ドル）が売値（7.2元/ドル）よりも低いのはご存知かと思います。これは、銀行が外国為替取引で利益を得るために、このスプレッドを利用しているためです。つまり、銀行は高い売値と低い買値の差額から利益を上げているのです。&lt;/p&gt;
&lt;p&gt;例えば、上記のケースでは、銀行の差額は：&lt;/p&gt;
\[
売相場レート（7.2）－買入レート（7.0）＝0.2 人民币
\]
&lt;p&gt;この差額が銀行の利益源です。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;銀行は、この換算レートであなたから外貨を購入します（あなたが外貨を売る際のレート）。&lt;/li&gt;
&lt;li&gt;銀行は、この換金レートで外国為替をあなたに販売します（あなたが外国為替を購入する際のレート）。&lt;/li&gt;
&lt;li&gt;為替売買による差金が銀行の利益となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為替レートの概念を理解すれば、外国通貨をどれだけ手に入れることができるか、あるいは外国通貨を購入するためにいくら必要になるかを、為替取引の際に明確に把握できます。この簡単な例が、皆さんの為替レートの基本原則への理解を深めるのに役立つことを願っています！&lt;/p&gt;</description>
        </item>
        <item>
        <title>Visual Studio で「非対応」の PDB ファイルを読み込む</title>
        <link>https://ttf248.life/ja/p/visual-studio-loading-unmatched-pdb-files/</link>
        <pubDate>Thu, 23 Jan 2025 20:04:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/visual-studio-loading-unmatched-pdb-files/</guid>
        <description>&lt;p&gt;Windows 環境で Visual Studio でプログラムをデバッグする際、pdb ファイルと実行ファイルが一致しない場合、「シンボルファイルを読み込めません」というエラーが表示されます。プログラムがクラッシュし、ダンプファイルが生成された場合でも、不一致の pdb ファイルが存在すると、Visual Studio は正常にクラッシュ現場に入りません。&lt;/p&gt;
&lt;h2 id=&#34;pdbファイルとは何か&#34;&gt;pdbファイルとは何か。
&lt;/h2&gt;&lt;p&gt;PDBファイルは、Microsoftが提供するデバッグ情報ファイルで、プログラムのデバッグに用いられます。PDBファイルには、プログラムのシンボルテーブル、ソースコードファイル名、行番号などの情報が含まれます。プログラムのコンパイル時に生成され、デバッグに使用されます。&lt;/p&gt;
&lt;h2 id=&#34;windbg-デバッグ&#34;&gt;WinDbg デバッグ
&lt;/h2&gt;&lt;p&gt;WinDbgは、Microsoftが提供するデバッグツールで、Windowsプログラムのデバッグに利用できます。WinDbgは互換性のないpdbファイルを読み込めますが、手動でのロードが必要です。__INLINE_CODE_0__コマンドを使用することで、互換性のないpdbファイルを強制的にロードできます。&lt;/p&gt;
&lt;p&gt;しかし、WinDbg は Visual Studio ほど使いやすくないので、Visual Studio でもミスマッチの PDB ファイルをロードできるようにしたいと考えています。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-で互換性のない-pdb-ファイルを読み込む&#34;&gt;Visual Studio で互換性のない PDB ファイルを読み込む
&lt;/h2&gt;&lt;p&gt;ソースコードは通常、gitで管理されているため、対応するバージョンのコードを容易に見つけられ、再コンパイルして対応するpdbファイルを生成できます。なぜロードできないのでしょうか？主な原因はメタデータが一致しないことです。&lt;/p&gt;
&lt;p&gt;小さなツールがあり、実行可能ファイルの情報に基づいてメタデータを修正し、Visual Studioが読み込める新しいpdbファイルを生成する。&lt;/p&gt;
&lt;p&gt;ダウンロード先：&lt;a class=&#34;link&#34; href=&#34;https://www.debuginfo.com/tools/chkmatch.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.debuginfo.com/tools/chkmatch.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;サイトキャッシュアドレス：&lt;a class=&#34;link&#34; href=&#34;chkmatch.zip&#34; &gt;chkmatch.zip&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ChkMatch utility can be used to check whether an executable and debug information file match. It can also be used to enforce matching between an executable and debug information file, if they are compatible.

For more information about debug information matching and related issues, see this article.

Supported debug information formats: DBG, PDB 2.0, PDB 7.0.

chkmatch [-c ExeFile DebugInfoFile ] |
         [-m ExeFile DebugInfoFile]
-c
Check matching between the executable and the debug information file.
-m
Make the executable and the debug information file match.
ExeFile
The name of the executable file.
DebugInfoFile
The name of the debug information file.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chkmatch-を使用する&#34;&gt;chkmatch を使用する
&lt;/h2&gt;&lt;p&gt;まずチェック処理を実行し、不一致の原因を分析後、署名不一致を通知します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -c &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb

Executable:
TimeDateStamp: c26d9be3
Debug info: 2 ( CodeView )
TimeStamp: f86b0a4f  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 122  RVA: 001cdc44  FileOffset: 001cbe44
CodeView format: RSDS
Signature: {428c9b95-39a3-4a8d-a8e5-7be453684757}  Age: 1
PdbFile: D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
Debug info: 16 ( Unknown )
TimeStamp: 00000000  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 0  RVA: 00000000  FileOffset: 00000000

Debug information file:
Format: PDB 7.00
Signature: {06fae08e-c0a2-4f3d-9c7c-dfc684445dd1}  Age: 1

Result: Unmatched (reason: Signature mismatch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;その後、pdbファイルとexeファイルを一致させるよう修正を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -m &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb

Executable:
TimeDateStamp: c26d9be3
Debug info: 2 ( CodeView )
TimeStamp: f86b0a4f  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 122  RVA: 001cdc44  FileOffset: 001cbe44
CodeView format: RSDS
Signature: {428c9b95-39a3-4a8d-a8e5-7be453684757}  Age: 1
PdbFile: D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
Debug info: 16 ( Unknown )
TimeStamp: 00000000  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 0  RVA: 00000000  FileOffset: 00000000

Debug information file:
Format: PDB 7.00
Signature: {06fae08e-c0a2-4f3d-9c7c-dfc684445dd1}  Age: 1

Writing to the debug information file...
Result: Success.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/38147487/forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Cursor AI プログラミングIDE 体験版</title>
        <link>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</link>
        <pubDate>Thu, 23 Jan 2025 19:30:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cursor-ai-programming-ide-trial/</guid>
        <description>&lt;p&gt;あっという間に一年が過ぎ、仕事において最も大きな変化は、やはりAIの関与が顕著に高まっていることだ。これまで、開発言語間の切り替えには、それぞれの言語特有のAPIインターフェースを理解する必要があったが、今ではこれらの基礎コードもAIによって生成されるようになった。これは開発者にとって非常にありがたいことだ。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;23年にも簡単な入門記事を2つほど書いた頃から、気がつけばもう25年。目に見えるような進歩は感じられず、自分自身の理解を確立し、タスクを適切に分割でき、何よりもAI生成コードのバグを見抜くことが重要だ。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;Github copilot
&lt;/h2&gt;&lt;p&gt;いつだったか覚えていないが、シンガポールにサーバーを設置したという資料を見た。これにより、ローカルで利用でき、それ以来、長期間VPNを使用する必要はなくなった。ログイン時のみVPNが必要だが、ログイン後であれば閉じることもできる。&lt;/p&gt;
&lt;p&gt;普段使いでは、より多くの場合は Github Copilot を使っています。このプラグインは、VS Code や Visual Studio で直接使用でき、2つのソフトウェア間での切り替えが不要です。ChatGPT と比較して、Github Copilot の方がプロジェクトのサポートが充実しており、操作性も優れています。さらに、ローカルファイルの一部を &lt;strong&gt;“训练”AI&lt;/strong&gt; として提供することで、プロジェクトに合ったコードを生成できます。&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;最近、新しいAIプログラミングIDEのCursor AIを見ました。このIDEはGithub Copilotをベースにしていますが、さらにスマートで、ファイル作成も支援してくれます。&lt;/p&gt;
&lt;p&gt;軽く使ってみたところ、まだ悪くない感じだが、既存プロジェクトの理解はまだ足りない。ローカルプロジェクトファイルが多い場合や、大規模なリファクタリング・最適化調整には、やはり&lt;strong&gt;开发者拆分任务&lt;/strong&gt;が必要だ。&lt;/p&gt;
&lt;p&gt;curso のプロジェクトに切り替えて、以下の内容を入力してください：個人用履歴書ウェブページの作成、複数の異なるスタイルへの切り替えをサポートし、データ表示用の個人情報を忘れずに埋めてください。&lt;/p&gt;
&lt;p&gt;何度か試行錯誤をすれば、次のようなウェブページを入手できます。もちろん、このウェブページはまだシンプルですが、初心者には良いでしょう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;現在、新規登録ユーザーは高機能APIを150回無料で試用できます。有料ユーザーは高機能APIの利用回数が5000回に制限されます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43; ビット演算の基礎：ビットごとの値の取得とフラグ設定</title>
        <link>https://ttf248.life/ja/p/cpp-bitwise-operations-basics-flags/</link>
        <pubDate>Fri, 17 Jan 2025 02:23:56 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-bitwise-operations-basics-flags/</guid>
        <description>&lt;p&gt;実際のC++開発において、ビット演算は一般的な技術であり、特にシステム状態、フラグ、または制御ビットを扱う際には、非常に効率的な解決策を提供します。本稿では、例を通して、ビット演算を使用して特定のフラグを取得および設定する方法について解説します。&lt;/p&gt;
&lt;h3 id=&#34;ビット演算の基本概念&#34;&gt;ビット演算の基本概念
&lt;/h3&gt;&lt;p&gt;コンピュータでは、データは2進数のビット（0と1）で保存されます。ビット演算とは、これらの2進数ビットに対して行う操作のことです。C++にはいくつかの一般的なビット演算子があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按位与（&amp;amp;）&lt;/strong&gt;: あるビットが1であるかを確認するためのもの。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按位或（|）&lt;/strong&gt;: あるビットを1に設定する。&lt;/li&gt;
&lt;li&gt;反転操作用。&lt;/li&gt;
&lt;li&gt;すべてのビットを反転する。&lt;/li&gt;
&lt;li&gt;すべての桁をいくつかずらす。&lt;/li&gt;
&lt;li&gt;すべての桁をいくつかずらす。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この例では、一連のビット演算を __ 类型的变量 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; に適用し、異なるフラグによって異なる状態を表します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR
    A[原始数值: 00010000] --&amp;gt; B[左移: 00010000 &amp;lt;&amp;lt; 1]
    B --&amp;gt; C[结果: 00100000]
    C --&amp;gt; D[右移: 00100000 &amp;gt;&amp;gt; 1]
    D --&amp;gt; E[结果: 00010000]

    subgraph 左移操作
        direction LR
        A --&amp;gt; B --&amp;gt; C
    end

    subgraph 右移操作
        direction LR
        C --&amp;gt; D --&amp;gt; E
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;要求分析&#34;&gt;要求分析
&lt;/h3&gt;&lt;p&gt;題の説明に基づき、異なる状態を表す16ビットのフラグがあります。これらの状態は、様々な二進数のビットによって示され、各ビットは特定の意味に対応しています。例えば：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;失敗したか&lt;/li&gt;
&lt;li&gt;圧縮されていますか？&lt;/li&gt;
&lt;li&gt;増分は必要ですか？&lt;/li&gt;
&lt;li&gt;続編はありますか？&lt;/li&gt;
&lt;li&gt;通常のリクエストまたはログアウト&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ビット演算を使用する&#34;&gt;ビット演算を使用する
&lt;/h3&gt;&lt;p&gt;これらのフラグは、ビット演算を用いて設定および取得します。具体的には：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;あるビットの値（0または1）を取得する。&lt;/li&gt;
&lt;li&gt;あるビットを1に設定する。&lt;/li&gt;
&lt;li&gt;設定特定のビットを0にする。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まず、これらのフラグを保存するために、ある__INLINE_CODE_0__ 类型的变量 __INLINE_CODE_1__を定義します。その後、ビット演算を用いて、対応するフラグをチェックし設定します。&lt;/p&gt;
&lt;h3 id=&#34;cサンプルコード&#34;&gt;C++サンプルコード
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;bitset&amp;gt;

// 定义标志位常量
const unsigned short BIT_0_FAIL = 1 &amp;lt;&amp;lt; 0;    // bit0 是否失败
const unsigned short BIT_1_COMPRESSED = 1 &amp;lt;&amp;lt; 1; // bit1 是否压缩
const unsigned short BIT_2_INCREMENT = 1 &amp;lt;&amp;lt; 2;  // bit2 是否增量
const unsigned short BIT_3_HAS_MORE = 1 &amp;lt;&amp;lt; 3;   // bit3 是否有后续包
const unsigned short BIT_5_CANCEL = 1 &amp;lt;&amp;lt; 5;     // bit5 正常请求(0)或注销(1)

// 检查某一位是否为1
bool isBitSet(unsigned short wInfo, unsigned short bitMask) {
    return (wInfo &amp;amp; bitMask) != 0;
}

// 设置某一位为1
void setBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo |= bitMask;
}

// 清除某一位（设置为0）
void clearBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo &amp;amp;= ~bitMask;
}

int main() {
    // 假设wInfo的初始值为0
    unsigned short wInfo = 0;

    // 设置bit0（失败标志）
    setBit(wInfo, BIT_0_FAIL);
    
    // 设置bit1（压缩标志）
    setBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印wInfo的二进制值
    std::cout &amp;lt;&amp;lt; &amp;quot;wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    // 检查各个标志位
    std::cout &amp;lt;&amp;lt; &amp;quot;bit0 (是否失败): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_0_FAIL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit1 (是否压缩): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_1_COMPRESSED) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit2 (是否增量): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_2_INCREMENT) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit3 (是否有后续包): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_3_HAS_MORE) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit5 (是否注销): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_5_CANCEL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;

    // 清除bit1（压缩标志）
    clearBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印更新后的wInfo
    std::cout &amp;lt;&amp;lt; &amp;quot;Updated wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コードを実行し、旧友を推薦します：&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wInfo (in binary): 0000000000000011
bit0 (是否失败): 是
bit1 (是否压缩): 是
bit2 (是否增量): 否
bit3 (是否有后续包): 否
bit5 (是否注销): 否
Updated wInfo (in binary): 0000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;コード解説&#34;&gt;コード解説
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;変位操作（インラインitalic_10、インラインitalic_11、インラインitalic_12、インラインitalic_13、インラインitalic_14など）を使用します。これにより、各フラグビットにユニークな二進数位置を割り当てることができます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;太字_4：斜体_8____太字_5：斜体_9____太字_6：斜体_10____太字_7：斜体_11____。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指定されたフラグの位置を1にする。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特定のフラグの位置を0にする。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;まとめ&#34;&gt;まとめ
&lt;/h3&gt;&lt;p&gt;ビット演算を用いることで、複数の状態フラグを効率的に処理できます。特に、組み込み開発やネットワークプロトコル、システムの状態管理など、多くの場面で役立ちます。ビットフラグは、複数の二進数状態を表す際に、省スペースかつ高効率を実現します。&lt;/p&gt;
&lt;p&gt;このブログが、C++ でのビット演算を使ったビット値の取得と設定を理解するのに役立つことを願っています。これらのスキルを習得することは、効率的で保守しやすいコードを書く上で非常に役立ちます！&lt;/p&gt;</description>
        </item>
        <item>
        <title>デスクトップPCを2.5Gネットワークカードにアップグレードし、ローカルエリアネットワークの接続を高速化。</title>
        <link>https://ttf248.life/ja/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</guid>
        <description>&lt;p&gt;デスクトップPCのハードウェア、立て続けに登場。以前の記事で言ったPCIe変換アダプターだが、古いSSDはどうなったのだろう？もちろん無駄にしたわけにはいかない。故障もなく、新たに購入した&lt;code&gt;机械师创物者Mini-3765H&lt;/code&gt;（昨年）に取り付けた。&lt;/p&gt;
&lt;p&gt;新しいマシン、ハードウェアのスペックはやはり素晴らしい。2.5Gデュアルポート、PCIE4.0、Wi-Fi 6。&lt;/p&gt;
&lt;p&gt;最近引っ越したため、部屋に個別のルーターがなく、全てを無線ネットワークで接続しています。ASUSのマザーボード搭載デスクトップPCの無線LANカードの性能がイマイチだったり、ルーターの無線アクセスやローカルネットワーク間のアップロード速度が遅いことが原因で、PC間の通信速度が十分ではありません。そこで新しい2.5GのNICを購入し、デスクトップPCにインストールしました。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;h2 id=&#34;ネットワーク説明&#34;&gt;ネットワーク説明
&lt;/h2&gt;&lt;p&gt;両方のマシンは引き続き元の無線LANカードでインターネットに接続しているが、マシンの間は有線LANで直接接続し、両端とも2.5Gのネットワークカードを使用している。有線LANでの直接接続方法はここでは説明しない。オンラインには多くのチュートリアルがあるので、検索して確認すること。ファイアウォール設定を忘れずに解除し、どちらかのマシンをゲートウェイとして指定すればよい。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[机器1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: - &amp;lt;br&amp;gt;自动获取DNS] --&amp;gt;|网线直连（2.5G）| B[机器2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: 192.168.4.1&amp;lt;br&amp;gt;自动获取DNS];
    A --&amp;gt;|无线网卡| Internet;
    B --&amp;gt;|无线网卡| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二つのネットワークセグメントの速度測定&#34;&gt;二つのネットワークセグメントの速度測定
&lt;/h2&gt;&lt;h3 id=&#34;ルーターlan&#34;&gt;ルーター、LAN
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
Connecting to host 192.168.3.237, port 5201
[  4] local 192.168.3.122 port 1656 connected to 192.168.3.237 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.00   sec  9.17 MBytes  76.7 Mbits/sec
[  4]   1.00-2.00   sec  9.91 MBytes  83.2 Mbits/sec
[  4]   2.00-3.00   sec  8.74 MBytes  73.3 Mbits/sec
[  4]   3.00-4.00   sec  10.2 MBytes  85.2 Mbits/sec
[  4]   4.00-5.00   sec  9.23 MBytes  77.1 Mbits/sec
[  4]   5.00-6.00   sec  8.80 MBytes  73.9 Mbits/sec
[  4]   6.00-7.01   sec  8.00 MBytes  66.8 Mbits/sec
[  4]   7.01-8.00   sec  7.69 MBytes  64.9 Mbits/sec
[  4]   8.00-9.01   sec  9.72 MBytes  81.1 Mbits/sec
[  4]   9.01-10.01  sec  7.63 MBytes  63.6 Mbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  sender
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;ダイレクトlan&#34;&gt;ダイレクトLAN
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
Connecting to host 192.168.4.1, port 5201
[  4] local 192.168.4.2 port 1524 connected to 192.168.4.1 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.01   sec   178 MBytes  1.48 Gbits/sec
[  4]   1.01-2.00   sec   204 MBytes  1.72 Gbits/sec
[  4]   2.00-3.00   sec   214 MBytes  1.80 Gbits/sec
[  4]   3.00-4.00   sec   229 MBytes  1.92 Gbits/sec
[  4]   4.00-5.00   sec   202 MBytes  1.69 Gbits/sec
[  4]   5.00-6.00   sec   213 MBytes  1.79 Gbits/sec
[  4]   6.00-7.00   sec   230 MBytes  1.93 Gbits/sec
[  4]   7.00-8.00   sec   192 MBytes  1.61 Gbits/sec
[  4]   8.00-9.00   sec   220 MBytes  1.84 Gbits/sec
[  4]   9.00-10.00  sec   230 MBytes  1.93 Gbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  sender
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>華碩マザーボードZ490、ディスクが多くなるとたまに認識しない。</title>
        <link>https://ttf248.life/ja/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/</link>
        <pubDate>Fri, 10 Jan 2025 00:08:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/</guid>
        <description>&lt;p&gt;前回の続きで、無線LANカードが認識されない問題が発生しました。パーティションを再構築する前に、ネットで他の解決策も調べましたが、例えばマザーボードの電池を取り外して15分間断電したり、最新バージョンのBIOSドライバにアップデートしたりといった方法がありましたが、どれも効果はありませんでした。&lt;/p&gt;
&lt;p&gt;まだやるべきことがあると思って、モバイルデータ通信に切り替えて、リビングから部屋までLANケーブルを引っ張ったところ、また問題が発生し、有線ネットワークも認識されない。思い切ってOSを再インストールしたが、起動パーティションが見つからない。もしずっと問題が起きていなければ、こんなに色々試していない。ASUSのこのディスクの競合は、偶発的に発生し、システム再起動時に不安定になることが原因だ。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先週、卓上に長江メモリの2TB M.2インターフェースSSDを設置したところ、その後再起動できず、昨日まで電源を切ることができなかった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20250110002801.png&#34; &gt;磁盘全家福&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;システム再インストール&#34;&gt;システム再インストール
&lt;/h2&gt;&lt;p&gt;計算によると2年ぶりにOSを再インストールしたことになる。Cドライブの容量が足りなくなったので、Windows特有の問題で、日々のソフトウェアがCドライブに何かデータを保存したがる。そこで、OSを再インストールすることにした。OSを再インストールした後、ネットワークカードの問題は正常になり、次の日には普段の開発環境に戻し、システムバックアップの準備をしたところ、新しい問題が発生した。システムの再起動後、ブートパーティションが見つからない。&lt;/p&gt;
&lt;p&gt;前の記事の手順に従ってブートパーティションを再構築しましたが、不安定で、再起動後にブートパーティションが読み込まれない可能性があります。ケースの改造を疑いつつ、HDDケーブルに問題がないか確認しましたが、何度調べても異常は見当たりませんでした。&lt;/p&gt;
&lt;h2 id=&#34;記憶の回帰&#34;&gt;記憶の回帰
&lt;/h2&gt;&lt;p&gt;数年前にこの機械は一度SSDを増設したことがあり、その際、PCIE変換器（グラフィックカードのインターフェースに接続）を使用して、直接マザーボードに取り付けませんでした。今回、直接マザーボードに取り付けたため、マザーボードの問題かもしれません。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20250110002148.png&#34; &gt;固态转换器&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;マザーボード取扱説明書&#34;&gt;マザーボード取扱説明書
&lt;/h2&gt;&lt;p&gt;マザーボードの説明書に問題があり、記載されているSATAインターフェースの位置と実際の場所が異なっている。ディスクが多く、すべてのインターフェースにHDDが取り付けられており、古いSSDもSATAインターフェースであるため、マザーボードの説明書によるとインターフェース間に競合が発生するはずだが、実際にテストしたところ、この競合は不安定に発生し、発生すると対応するディスクを読み込めなくなる。まさにそのディスクがシステムディスクであり、ブート領域も同じディスク上にあるため、起動時にブートロードの失敗が発生する。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/20250110002401.png&#34;
	width=&#34;807&#34;
	height=&#34;847&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Z490&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;228px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;PCIE変換器にSSDを再インストールすると、マザーボードのSATAポートとの競合がなくなり、システムは正常に起動する。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ESPパーティション、GPTパーティションテーブル、そしてWindowsオペレーティングシステムの協調の秘密を探る</title>
        <link>https://ttf248.life/ja/p/exploring-esp-gpt-and-windows-cooperation/</link>
        <pubDate>Thu, 09 Jan 2025 23:58:20 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/exploring-esp-gpt-and-windows-cooperation/</guid>
        <description>&lt;p&gt;昨日の退勤後、帰宅していつものようにデスクトップPCを起動したところ、システムは正常に起動したがワイヤレスLANカードが読み込まれない。カードの接触不良かと思い、分解してワイヤレスLANカードを再インストールしたが、さらに問題が悪化し、システムが直接起動せず、ブートローダーが失敗した。&lt;/p&gt;
&lt;p&gt;久しぶりなのでデスクトップPCのいじり、ちょっとパーティションの知識が薄れてる。DisGeniusで空き領域を再パーティション化（通常はディスク前方）、ESPパーティションとして割り当てる（デフォルト300M）、PEシステムに入ってブートを再構築。関連情報はネットで調べれば見つかる。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20250110000433.png&#34; &gt;新建ESP分区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20250110000509.png&#34; &gt;可以去掉MSR分区&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンピュータのストレージの世界において、ESPパーティション、GPTパーティションテーブル、そしてWindowsオペレーティングシステムは密接に結びついており、それぞれが独自の重要な役割を果たし、システムの安定稼働と効率的な管理を支えています。しかし、それらを深く理解する前に、必ず言及しなければならないのが、「先駆者」であるMBRパーティション形式です。この形式は、その後の技術との相互映照によって、テクノロジーの進化の軌跡を際立たせています。それでは、今日、これらの内在的な関連性と巧妙さを詳しく見ていきましょう。&lt;/p&gt;
&lt;h2 id=&#34;一mbrパーティションテーブル従来のhddの基礎&#34;&gt;一、MBRパーティションテーブル──従来のHDDの「基礎」
&lt;/h2&gt;&lt;p&gt;MBR（マスターブートレコード）は、パソコン黎明期から存在する技術で、長らくハードディスクのパーティション領域を支配してきました。&lt;/p&gt;
&lt;h3 id=&#34;基本アーキテクチャ&#34;&gt;基本アーキテクチャ
&lt;/h3&gt;&lt;p&gt;それはハードディスクの最初のセクタ、すなわち0セクタに位置し、512バイトの領域を占有します。この512バイトは主に3つの部分で構成されます。まず、コンピュータ起動時にオペレーティングシステムのブートローダをロードする責任を持つブートプログラムコードがあり、通常446バイトです。次に、ディスクパーティションテーブルがあり、64バイトを占有し、最大4つのプライマリパーティション情報を定義できます。各パーティション記述は16バイトを占有し、パーティションの開始ヘッド、セクタ、シリンダ、およびパーティションタイプ、サイズなどの重要なパラメータを記録します。最後に、2バイトがMBR終了フラグ「55 AA」としてあり、このセクタが有効なMBRであることを示しています。&lt;/p&gt;
&lt;h3 id=&#34;歴史的功績と限界&#34;&gt;歴史的功績と限界
&lt;/h3&gt;&lt;p&gt;かつてMBRパーティションテーブルは、個人用コンピューターの比較的単純なストレージ要件を十分に満たしていました。これにより、オペレーティングシステムはハードディスクのパーティションを円滑に認識し、データの順序付けられた保存と読み込みを実現できました。しかし、時代が進むにつれて、その限界がますます明らかになりました。一方、64バイトという制限されたパーティションテーブルスペースにより、最大で4つのプライマリパーティションしか作成できず、より多くのパーティションを作成するには、拡張パーティションや論理パーティションといったやや複雑な方法が必要となり、ディスク管理の利便性を損ないました。他方、最大2TBまでのハードディスク容量しかサポートしておらず、現在の数TBから数十TBという大容量ハードディスクに対しては力不足であり、ストレージ技術のさらなる発展を阻害するボトルネックとなっていました。&lt;/p&gt;
&lt;h2 id=&#34;espパーティション---システムの見えない起動キー&#34;&gt;ESPパーティション - システムの「見えない起動キー」
&lt;/h2&gt;&lt;p&gt;ESPは、EFI System Partitionの略で、UEFI（Unified Extensible Firmware Interface）規格に基づくコンピューターに不可欠な特殊なパーティションです。&lt;/p&gt;
&lt;h3 id=&#34;機能-特徴&#34;&gt;機能 特徴
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;コンピューターの電源を入れると、UEFIファームウェアはまずHDD上のESPパーティションを探し、そこに保存されているブートローダー（Windows Boot Managerなど）を読み込み、OSを起動します。これは正確な鍵であり、システム起動への扉を開きます。これがないと、システムは起動時に迷い、方向性を見失います。&lt;/li&gt;
&lt;li&gt;ESP パーティションには、システム起動時に不可欠なデバイスドライバが格納されており、これにより、ハードウェア（HDD コントローラ、グラフィックカードなど）が初期起動段階で正常に動作し、その後のオペレーティングシステムの円滑な引き継ぎを可能にします。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;空間要件とフォーマット&#34;&gt;空間要件とフォーマット
&lt;/h3&gt;&lt;p&gt;通常、ESPパーティションの推奨サイズは100MB～500MBで、一般的に200MB程度割り当てれば基本的な要件は満たされます。ファイルシステム形式はFAT32である必要があり、これはUEFIファームウェアが起動ファイルを読み取るためにFAT32形式のみを認識するため、互換性とクロスプラットフォーム性を確保します。&lt;/p&gt;
&lt;h2 id=&#34;gptパーティション表ハードディスクのスマート管理係&#34;&gt;GPTパーティション表──ハードディスクの「スマート管理係」
&lt;/h2&gt;&lt;p&gt;GPT（GUIDパーティションテーブル）は、従来のMBRパーティションテーブルに代わる新しいパーティション方式です。&lt;/p&gt;
&lt;h3 id=&#34;強み発揮&#34;&gt;強み発揮
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;現代のデータ爆発時代において、大容量ハードディスクが次々と登場しています。GPTパーティションテーブルはMBRの2TBという容量制限を突破し、理論上は最大9.4ZB（ゼタバイト、1ZB=1024EB、1EB=1024PB、1PB=1024TB）という超大容量のストレージスペースを実現し、膨大なデータストレージを可能にします。&lt;/li&gt;
&lt;li&gt;MBR とは異なり、最大で4つのプライマリパーティションしか作成できないのに対し、GPTでは最大128個までのパーティションを作成できるため、ユーザーやシステム管理者は複数のシステムパーティションやデータパーティションを割り当てたり、特殊な用途のためにパーティションを予約したりするなど、非常に柔軟に対応できます。&lt;/li&gt;
&lt;li&gt;GPTパーティションテーブルは冗長バックアップ機構を採用しており、ディスクのヘッダー部とテール部にそれぞれ1つずつパーティションテーブル情報を保存しています。これにより、万が一、パーティションテーブルが破損した場合でも、別のバックアップから自動的に復旧できるため、パーティションテーブルの故障によるデータ損失のリスクを大幅に低減し、データの安全性を確保します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;構造分析&#34;&gt;構造分析
&lt;/h3&gt;&lt;p&gt;GPTパーティションテーブルは、保護MBR（従来のBIOSとの互換性を保つために残された小規模なMBR構造ですが、実際のパーティション管理には使用されません）、GPTヘッダー（パーティションテーブルのバージョン、パーティション数、パーティションテーブルサイズなどの基本情報を格納）、そしてパーティションエントリ配列（各パーティションのエントリは、開始セクタ、終了セクタ、パーティションタイプGUID、パーティションの一意な識別子などの重要な情報を詳細に記録）で構成されます。これらの構造が連携し、ハードディスクスペースを正確に計画・管理します。&lt;/p&gt;
&lt;h2 id=&#34;windowsオペレーティングシステムユーザーのデジタルインタラクション空間&#34;&gt;Windowsオペレーティングシステム──ユーザーの「デジタルインタラクション空間」
&lt;/h2&gt;&lt;p&gt;Windowsは、世界中で広く利用されているオペレーティングシステムであり、人とコンピューターハードウェア間の友好的な橋渡しをしています。&lt;/p&gt;
&lt;h3 id=&#34;espパーティションとgptパーティションテーブルの統合&#34;&gt;ESPパーティションとGPTパーティションテーブルの統合
&lt;/h3&gt;&lt;p&gt;UEFI起動のWindowsシステムインストールプロセスでは、インストーラが自動的にESPパーティションを作成し、起動ファイルをそこに展開します。同時に、ディスクはGPTパーティションテーブル形式で初期化され、システム予約パーティション（システム重要ファイルを格納する領域、従来のBIOSにおけるシステムブートファイル領域に類似）、Windowsシステムパーティション（システムコアファイルをインストールする場所）、およびその他のユーザー定義データパーティションが作成されます。WindowsシステムはGPTパーティションテーブルによって各パーティションを正確に識別し、ESPパーティションを通じてスムーズに起動します。これら三者がシームレスに連携し、ユーザーに快適な起動と使用体験を提供します。&lt;/p&gt;
&lt;h3 id=&#34;システム管理と最適化の基盤&#34;&gt;システム管理と最適化の基盤
&lt;/h3&gt;&lt;p&gt;Windowsは動作中にGPTパーティションテーブルの利点を最大限に活用してディスク管理を行います。例えば、ディスク管理ツールではGPTパーティションを容易に識別でき、ユーザーはパーティションの作成、削除、フォーマット、サイズ変更などの操作を簡単に行い、様々な段階でのデータストレージニーズに対応できます。また、システム更新やソフトウェアインストールといったプロセスもパーティション構成と密接に関連しており、適切なパーティション設計はシステムのパフォーマンスと安定性を向上させ、ディスク容量不足やパーティションの混乱による問題発生のリスクを軽減します。&lt;/p&gt;
&lt;h2 id=&#34;五実践のヒント保守とトラブルシューティング&#34;&gt;五、実践のヒント：保守とトラブルシューティング
&lt;/h2&gt;&lt;p&gt;それらの密接な関係性を理解すれば、日々のメンテナンスとトラブルシューティングに手順がある。&lt;/p&gt;
&lt;h3 id=&#34;ディスクスペース管理&#34;&gt;ディスクスペース管理
&lt;/h3&gt;&lt;p&gt;ESP パーティションの空き容量を定期的に確認し、過剰な起動項目関連ソフトウェアのインストールによる容量不足を防ぎ、システム起動への影響を避けてください。GPT パーティション下のデータパーティションでは、適切なストレージ計画を立て、不要なファイルを適宜削除し、単一パーティションの容量オーバーによるシステム動作への影響を防いでください。&lt;/p&gt;
&lt;h3 id=&#34;トラブルシューティング開始&#34;&gt;トラブルシューティング開始
&lt;/h3&gt;&lt;p&gt;システム起動に失敗した場合、まずESPパーティションが破損していないか、ファイルが失われていないかを確認してください。UEFIファームウェアに付属の起動項目修復ツールを使用するか、Windowsインストールメディアから回復環境に入り、ESPパーティションの起動ファイルを再構築できます。GPTパーティションテーブルの故障が疑われる場合は、ディスクツール（DiskGeniusなど）を使用してパーティションテーブルの完全性を確認し、バックアップされたパーティション情報を利用してパーティションテーブルを修復し、失われたパーティションを見つけ直してください。&lt;/p&gt;
&lt;p&gt;ESP パーティション、GPT ディスク構造、そして Windows オペレーティングシステムは、まるで精密に連携するチームのように、それぞれの得意分野を発揮し、安定かつ効率的なコンピューター環境を作り上げています。これらを深く理解することで、システムインストールやメンテナンスをスムーズに行えるだけでなく、コンピューターの基盤となる動作原理を把握し、デジタル世界を自由に旅することができます。同時に、MBR ディスク構造の盛衰を振り返ることは、技術進歩の力に感銘を与えられます。それは、増大するデータストレージのニーズに対応するため、ストレージ技術を常に前進させています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>GCC、GLIBC と C&#43;&#43; プログラムの互換性問題に関する深い理解</title>
        <link>https://ttf248.life/ja/p/deep-understanding-gcc-glibc-cpp-compatibility-issues/</link>
        <pubDate>Mon, 06 Jan 2025 19:51:16 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/deep-understanding-gcc-glibc-cpp-compatibility-issues/</guid>
        <description>&lt;p&gt;C++開発において、GCCとGLIBCは欠かせない主要な要素であり、プログラム公開後の互換性の問題も開発者を悩ませることがよくある。本稿では、これらの本質を深く分析し、互換性の問題の根本原因とその対策について探求する。&lt;/p&gt;
&lt;h2 id=&#34;一gcc堅固なコンパイラの基礎&#34;&gt;一、GCC：堅固なコンパイラの基礎
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GCC（GNU コンパイラ コレクション）は、GNUプロジェクトが開発したオープンソースのコンパイラスイートです。C、C++、Objective-C、Fortran、Ada、Goなど、多様な主要言語に対応し、クロス言語開発のためのワンストップソリューションを提供します。&lt;/li&gt;
&lt;li&gt;C++ を例にとると、クラス、テンプレート、関数オーバーロードといった複雑な機能を含むソースファイルを記述した際、GCC は C++ の厳格な文法と意味規則に基づいて、高レベルの C++ コードを、基盤となる機械が理解し実行できる命令シーケンスに変換します。このプロセスには、語彙解析、構文解析、意味解析、最適化、コード生成といった複数の精緻な段階が含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GCCはまず、ソースファイルを前処理します。この際、すべての&lt;code&gt;#&lt;/code&gt;、&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;、&lt;strong&gt;INLINE_CODE_3&lt;/strong&gt;、&lt;strong&gt;INLINE_CODE_4&lt;/strong&gt;、&lt;strong&gt;INLINE_CODE_5&lt;/strong&gt;、&lt;code&gt;3.14159&lt;/code&gt;を処理し、前処理後、ソースファイルは初期段階で「拡充」されます。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译阶段&lt;/strong&gt;: プリプロセスされたファイルはコンパイル段階に入り、GCC は C++ 言語標準に基づいてソースファイルをアセンブリ言語コードに変換します。クラスの継承、ポリモーフィズムの実装、関数呼び出しパラメータのマッチングなど、コード構造を厳密にチェックし、文法や意味に合致しないエラーが見つかると、速やかにエラーを出力してコンパイルプロセスを停止します。例えば、関数宣言と定義のパラメータリストが不一致の場合、GCC は問題箇所を正確に特定します。&lt;/li&gt;
&lt;li&gt;アセンブラは、前段階で生成されたアセンブリコードを機械語に変換し、__INLINE_CODE_0__という拡張子のオブジェクトファイルを生成します。これらのオブジェクトファイルには、機械が直接実行できるバイナリ命令が含まれていますが、通常、完全なプログラムは複数のモジュールから構成され、関数や変数の参照関係が解決されていないため、単独で実行することはできません。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链接阶段&lt;/strong&gt;：これは実行可能ファイルを生成する最後のスプリント段階です。リンカは、複数のオブジェクトファイルと必要なライブラリファイル（静的ライブラリまたは動的ライブラリ）を統合します。例えば、C++標準テンプレートライブラリのコンテナクラスを使用する場合、リンク時に対応するライブラリの実装コードを見つける必要があり、プログラム実行時に__INLINE_CODE_0__、__INLINE_CODE_1__などのコンテナ機能を正しく呼び出せるようにし、最終的に完全な実行可能プログラムを生成します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二glibccプログラムを支える舞台裏&#34;&gt;二、GLIBC：C++プログラムを支える舞台裏
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GLIBCは、GNU C Libraryのことであり、C標準ライブラリのGNUエコシステムにおける具体的な実装です。名前がCを強調していますが、C++プログラムも同様に強く依存しており、なぜならC++はCの基礎部分を受け継いでいるからです。メモリ管理など、膨大な基礎関数を提供し、C++初期の開発や、パフォーマンスを重視し、簡潔さを追求する場面で頻繁に使用されます。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GLIBCは、OSとアプリケーションをつなぐ重要な橋渡し役です。Linuxシステムにおいて、C++プログラムがファイルを開くといったシステムコールを行う際（例えば、__INLINE_CODE_0__関数を使用し、その基盤としてGLIBCの実装に依存する場合）、GLIBCはプログラムのリクエストをOSカーネルが定める方法でラップしてカーネルに渡し、カーネル処理完了後、結果をアプリケーションに返します。これにより、アプリケーションはOSの複雑なシステムコールインターフェースの詳細を深く理解することなく、ファイルシステム、ネットワーク、プロセス管理などの様々なシステムリソースを容易に使用できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cプログラム公開後の互換性問題の考察&#34;&gt;C++プログラム公開後の互換性問題の考察
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;異なる Linux ディストリビューションは、しばしば異なるバージョンの GLIBC を搭載しています。C++ プログラムが高バージョン GLIBC 環境でコンパイルされると、意図せずしてそのバージョンで新たに追加された関数機能を利用したり、より最適化された関数実装に依存したりすることがあります。例えば、新しい GLIBC バージョンではメモリ割り当てアルゴリズムが改善されており、プログラムはその新アルゴリズムを頻繁に利用することでパフォーマンスを向上させます。しかし、このプログラムを低バージョン GLIBC システムで実行すると、対応する関数が見つからない（低バージョンで導入されていないため）あるいは関数動作が異常になる（旧版の実装ロジックと新版のずれ）といった問題が発生し、プログラムがクラッシュしたり、誤った結果を生み出したりする可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;同じGCCコンパイラを使用した場合でも、バージョンによってコード生成、標準ライブラリのサポート、C++機能の実装に差異があります。最新バージョンのGCCは、C++20の新機能（モジュールやコルーチンなど）を完全にサポートしていますが、古いバージョンのGCCでこれらの機能を活用したプログラムをコンパイルすると、構文エラーが発生したり、最適化戦略の違いにより生成される機械語の効率やメモリ使用量が大きく異なり、パフォーマンスが要求される環境下では、異なる環境での挙動に大きな違いが生じる可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;C++プログラムは、x86、ARM、PowerPCなどの異なるハードウェアシステムアーキテクチャ上で動作する必要がある場合があります。各アーキテクチャには独自の命令セット、メモリレイアウト、データアライメント要件があります。例えば、データアライメントに関して、x86アーキテクチャで正常に動作する構造体データの格納順序が、ARMアーキテクチャではアライメント規則の違いによりメモリアクセス異常を引き起こし、プログラムエラーにつながる可能性があります。また、GCCは異なるアーキテクチャ向けにコンパイルすると生成される機械語が大きく異なり、プログラム中にハードコードされたアーキテクチャ依存の命令や仮定があれば、クロスアーキテクチャでの動作時に頻繁な障害が発生します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;互換性の問題への対応策&#34;&gt;互換性の問題への対応策
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;静的にリンクされたライブラリを使用することを検討してください。プログラムが依存する GLIBC などのライブラリコードを直接実行ファイルにパッケージングすることで、プログラムの実行時に特定の GLIBC のバージョンに依存する必要がなくなり、GLIBC のバージョン不一致による問題を効果的に回避できます。ただし、静的リンクは実行ファイルのサイズを大幅に増加させるため、ストレージリソースが限られている場合は、メリットとデメリットを比較検討する必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Dockerなどのコンテナ化技術を活用し、C++プログラムとその実行環境（特定のバージョンのGCC、GLIBCなど）を独立したコンテナにパッケージングします。これにより、基盤となるOSが異なってもコンテナ内部は開発時の環境を維持し、プログラムの期待通りの動作を保証するとともに、異なる環境へのデプロイメントの複雑さを大幅に軽減できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;包括様々なGLIBCバージョン、GCCバージョン、および一般的なシステムアーキテクチャを網羅した、包括的な互換性テスト体系を構築する。開発プロセスにおいて、継続的インテグレーションツールを用いて、複数の環境で定期的に自動テストを実施し、互換性の問題を早期に発見・修正することで、潜在的なリスクを未然に防ぎ、リリース後の安定性を確保する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記を総合すると、GCCおよびGLIBCの動作メカニズムを深く理解し、C++プログラムの互換性問題の根本原因を正確に把握し、柔軟な対応策を用いることは、あらゆるC++開発者が堅牢でクロスプラットフォームなアプリケーションを構築するために不可欠なスキルです。そうすることで初めて、私たちのC++作品は多様な技術エコシステムの中で円滑に進むことができるでしょう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Windowsに標準搭載されているディスククリーンアップツール：ストレージ</title>
        <link>https://ttf248.life/ja/p/windows-disk-cleanup-storage/</link>
        <pubDate>Mon, 06 Jan 2025 19:29:45 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-disk-cleanup-storage/</guid>
        <description>&lt;p&gt;どのバージョンからかはっきりしないが、__INLINE_CODE_0__において、ディスククリーンアップツールは大幅に改善され、よりスマートになった。&lt;/p&gt;
&lt;p&gt;公式ツールなので、ファイルは誤って削除されることはなく、広告やポップアップ、バックグラウンドプロセスなど、不要なものは一切ありません。&lt;/p&gt;
&lt;p&gt;ディスククリーンアップツールを開くには、上記手順に従ってください。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20250106194453.png&#34; &gt;存储界面&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通常ユーザーは、&lt;code&gt;清理建议&lt;/code&gt;を選択すればよいです。システムはあなたの利用状況に応じて、いくつかの提案を提示します。&lt;/p&gt;
&lt;p&gt;開発者として、筆者はディスク上に多くの仮ファイルを持っているため、&lt;code&gt;临时文件&lt;/code&gt;，里面包含了很多临时文件，比如&lt;code&gt;Visual Studio&lt;/code&gt;的临时文件，&lt;code&gt;Windows Update&lt;/code&gt;のような仮ファイルを削除しています。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;Snipaste_2024-12-19_13-39-51.png&#34; &gt;临时文件&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Docker国内镜像代理切れ</title>
        <link>https://ttf248.life/ja/p/docker-domestic-mirror-failure/</link>
        <pubDate>Sat, 04 Jan 2025 18:29:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/docker-domestic-mirror-failure/</guid>
        <description>&lt;p&gt;国内サーバーにDockerをデプロイし、デプロイ後、もし社内イメージレジストリがない場合、開発者がまず行うべきことは、国内のイメージ加速アドレスを設定することです。今日、ちょうどサーバーがあり、イメージ加速アドレスを設定しましたが、イメージのpullができません。&lt;/p&gt;
&lt;p&gt;エラー情報：&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;h2 id=&#34;トラブルシューティングと修理の試み&#34;&gt;トラブルシューティングと修理の試み
&lt;/h2&gt;&lt;p&gt;当初、別のミラーの加速アドレスに切り替えることを試みましたが、期待した効果はなく、問題は依然として解決していません。&lt;/p&gt;
&lt;p&gt;続いて、ローカルDNS設定の修正に取り組み、ネットワーク解析レベルで突破口を探りましたが、試行錯誤の結果、残念ながら問題は解消されませんでした。&lt;/p&gt;
&lt;p&gt;現時点でローカルネットワークの安定性が疑われているため、すぐにスマートフォンWi-Fiスポットに切り替えて、考えられるローカルネットワークの問題点を回避しようとしましたが、結果は落胆するもので、問題は全く改善しませんでした。&lt;/p&gt;
&lt;h2 id=&#34;問題の拡大&#34;&gt;問題の拡大
&lt;/h2&gt;&lt;p&gt;手元に&lt;strong&gt;几台部署于国内的服务器&lt;/strong&gt;がいくつかあり、それぞれにDocker環境はインストールされています。これらのサーバーでイメージのpullを試みましたが、別のアプローチを期待していたのですが、例外なくすべて失敗し、エラーメッセージも全く同じでした。これは問題が特定のデバイスに限定されたものではないことを示しています。&lt;/p&gt;
&lt;p&gt;さらに調査した結果、ミラープロキシが一時的に機能しなくなったようです。この緊急時に、すぐに海外のサーバーに切り替えて試してみたところ、幸いなことに、ミラーからの取得はここで正常に戻りました。これは、問題の原因が国内のネットワーク経路または関連設定にある可能性が高いことを意味します。&lt;/p&gt;
&lt;h2 id=&#34;戦術変更間接解決&#34;&gt;戦術変更：間接解決
&lt;/h2&gt;&lt;p&gt;国内の直接的なミラーからのイメージ取得経路が重重なる阻害を受けている一方、海外ミラーは正常にアクセスできるため、プロジェクトを迅速に進めるため、回り道をすることに決定しました。まず海外サーバーへ切り替え、必要なイメージをスムーズに取得した後、国内ミラーリポジトリへプッシュし、「データブリッジ」を構築します。&lt;/p&gt;
&lt;p&gt;同時に、Dockerfile ファイルを修正し、イメージのアドレスを国内環境に適合するものに変更後、再度ビルドを行い、最終的にデプロイに成功しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>電信資本主義の終焉：英雄リーグeスポーツ時代の終結</title>
        <link>https://ttf248.life/ja/p/end-of-era-league-of-legends-esports/</link>
        <pubDate>Tue, 31 Dec 2024 07:19:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/end-of-era-league-of-legends-esports/</guid>
        <description>&lt;p&gt;eスポーツ産業は、ここ10数年間で目覚ましい発展を遂げ、世界的な文化現象として無視できない存在となりました。特に《英雄联盟》（League of Legends、通称LOL）に代表されるMOBAゲームは、プレイヤーに競技の楽しさを提供するだけでなく、資本に強力な推進力を与え、一連のeスポーツプラットフォームやイベントの活発な発展を促しました。しかしながら、資本の流入と泛娯楽産業の台頭に伴い、これらは徐々に衰退段階に入っています。熊猫TVの隆盛と没落、そして斗魚（ドゥーユー）と虎牙（フーター）の競争は、「野蛮資本時代」の終焉を告げ、eスポーツ業界の天時地利人和も変化し始めています。&lt;/p&gt;
&lt;h2 id=&#34;第一章電競の勃興と資本注入&#34;&gt;第一章：電競の勃興と資本注入
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;初期eスポーツ業界は、特に中国市場において、比較的草の根的なスタートを切った。多くのプレイヤーがゲームへの愛を込めて《スタークラフト》やDotaといったゲームの競技に参加した。しかし、eスポーツが真に台頭したのは，《リーグ・オブ・レジェンド》のリリースとプロモーションによるものだ。2011年に《リーグ・オブ・レジェンド》が正式に中国市場に進出以降、eスポーツは徐々に小規模なコミュニティから大衆文化の一部へと発展した。特に2013年からはLPL（中国プロリーグ）が徐々に形成され，《リーグ・オブ・レジェンド》は中国eスポーツ業界の支柱となった。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;2015年は、中国eスポーツ業界における転換点となった。資本の流入により、eスポーツは単なる競技大会から、より巨大な産業へと変化した。その代表格であるPandaTVは、過剰な資本が生んだ産物と言える。王思聰（ワン・シーチュン）氏が投資したPandaTVは、革新的なコンテンツと莫大な投資により急速に成長し、多くの視聴者やユーザーを惹きつけた。しかし、これもまた、資本が「野蛮」に流入する典型例であり、市場への過度な追跡は、しばしば忍耐力や長期的な視点が欠如している。PandaTVは、資金と人材を投入した結果、短期的には一定の成果を上げたものの、経営問題や資本への過度な依存により、2019年に破綻した。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;熊猫TVの衰退は、eスポーツライブ配信業界の衰退を招いたのではなく、むしろDouyu（ドゥオユ）やHuya（フイヤ）といったプラットフォームの台頭を促した。DouyuとHuyaという二大プラットフォームが急速にeスポーツ業界のリーダーとなり、競争も激化している。Douyuは当初、《英雄联盟》プロリーグの配信やトップ配信者の契約により、eスポーツライブ配信のベンチマークとなった。一方、Huyaはeスポーツイベントへの投資拡大と自社プラットフォームの多様化により、Douyuとの差を徐々に縮めている。&lt;/p&gt;
&lt;p&gt;この過程で、資本が再び大きな役割を果たした。Bilibiliは2018年に上場に成功し、Huyaも同年にはIPOを行った。資本の急速な流れは業界の高濃度化をもたらし、配信者や著作権などの面でプラットフォーム間の激しい競争を招き、「資本戦争」という状況を生み出した。&lt;/p&gt;
&lt;h2 id=&#34;第2章泛エンタメ化とeスポーツの融合&#34;&gt;第2章：泛エンタメ化とeスポーツの融合
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;資本がeスポーツ業界に再び注力するにつれて、eスポーツプラットフォームのコンテンツは徐々に多様なエンターテイメントへと移行している。eスポーツ配信者は試合解説やイベント中継にとどまらず、歌唱、ダンス、視聴者とのインタラクションなど、様々なエンターテイメント形式に活動範囲を広げている。これにより、プラットフォーム上のコンテンツはより豊かになり、eスポーツを核としつつも多様なエンターテイメント要素を含むコンテンツエコシステムが形成されつつある。&lt;/p&gt;
&lt;p&gt;しかし、万般娯楽化は問題も引き起こした——元来ゲーム文化に特化した esports が徐々にその地位を失い、娯楽至上主義の傾向が席巻している。この傾向により、一部の esports 文化を深く愛する視聴者が離脱し、資本も他の娯楽分野へと目を向けるようになった。過剰な資本流入と利益追求性が esports の本質を曖昧にし、元々競技を中核とする価値理念が弱まりつつある。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;ショート動画プラットフォームやライブ配信プラットフォーム、そして娱乐圈などの泛エンタメ産業の隆盛に伴い、資本は徐々に資金をeスポーツからより広範なエンターテイメントコンテンツへとシフトしている。この過程において、テンセント、アリババ、バイトダンスといった大手企業も、eスポーツプロジェクトに単独で依存するのではなく、映画、音楽、ショート動画などの分野への投資を強化している。特にバイトダンスの躍進は、抖音などのショート動画プラットフォームの大爆発的な成長により、eスポーツの注目度を他のエンターテイメントコンテンツによって覆い隠してきた。&lt;/p&gt;
&lt;h2 id=&#34;第三章青黄不接英雄リーグの時代は終焉を告げる&#34;&gt;第三章：「青黄不接」：英雄リーグの時代は終焉を告げる
&lt;/h2&gt;&lt;p&gt;2011年に「リーグ・オブ・レジェンド」が中国市場に入って以来、それは中国eスポーツ業界の代名詞となり、数多くのプロ選手、チーム、大会を輩出し、巨大なeスポーツ産業を生み出してきた。しかし、10年以上が経過し、「リーグ・オブ・レジェンド」は中国eスポーツをリードするプロジェクトとして「世代交代」の段階に入っている。特に近年、「リーグ・オブ・レジェンド」の影響力は徐々に低下しており、明らかな衰退の兆候も見られる。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
最も顕著な変化は、プレイヤー層の世代交代です。当初、eスポーツの急速な発展は、多大な数の若年層プレイヤーの支持に支えられており、その中には「英雄联盟」を通じてプロゲーマーや観戦者になった人も多くいました。彼らはまさに「時代の好影響」の中で成長し、LOLがもたらす競技の魅力に没頭した結果、業界全体の急速な拡大を後押ししました。しかし、時間が経つにつれて、これらのプレイヤーは徐々に大人になり社会に進み、他の生活や職業へと方向転換していきました。同時に、新世代の若年層プレイヤーの「英雄联盟」への関心は、かつてほど熱くありません。eスポーツの受容者層には、すでに明らかな年齢偏差と興味の低下が見られます。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
「リーグ・オブ・レジェンド」は何度もアップデートと改編を経て、一定の競技魅力は保っているものの、ゲーム自体のコンテンツ革新はやや行き詰まっている印象だ。毎年リリースされるバージョン更新やヒーローバランス調整、新システムの導入も、根本的にプレイヤーの新鮮さへの欲求を満たすことができていない。同時に、MOBAジャンルの市場は飽和状態に達し、「王者荣耀（キングオブファイターズ）」や「和平精英（PUBGモバイル）」といった他のゲームが台頭し、「リーグ・オブ・レジェンド」の多くのプレイヤーを奪っている。「リーグ・オブ・レジェンド」はこの競争状況から、常に「追随者」としての役割を逃れることができていない。&lt;/p&gt;
&lt;h2 id=&#34;結論eスポーツ業界の将来はどうなるのだろうか&#34;&gt;結論：eスポーツ業界の将来は、どうなるのだろうか。
&lt;/h2&gt;&lt;p&gt;eスポーツ業界は、まるで突如現れた高層ビルのように見える。過剰な資金がインターネット業界を彷徨い、次の追い風を探している中、eスポーツはそのターゲットの一つとなった。国内の人口動員を背景に、eスポーツは短期間で大きな成功を収めたものの、その基盤は必ずしも強固ではない。資本の過剰な流入、人材不足、ゲームコンテンツの疲弊といった問題が、eスポーツの健全な発展を阻んでいる。&lt;/p&gt;
&lt;p&gt;大学時代以前は、ゲームをあまりやらなかったのですが、リーグ・オブ・レジェンドはまさに一世代の成長を見守ってきたと言えるでしょう。多くの決勝戦を見てきましたが、傍観者として見ていて、特にFakerと比較すると、中国の選手たちは、大型競技会期間中、いつも萎縮しているように見えます。選手の心理的なプレッシャーが大きいことは理解していますが、この業界も10年以上発展しているので、選手のメンタルヘルスの問題はチームによって重視されるべきです。しかし、現状では、依然として選手の才能に頼るプレイが主流となっています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ゲームから家庭へ：大人になるにつれて、なぜ私たちは徐々に仮想世界から離れていくのか。</title>
        <link>https://ttf248.life/ja/p/from-games-to-family-why-we-drift-away-from-virtual-worlds/</link>
        <pubDate>Tue, 31 Dec 2024 07:11:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/from-games-to-family-why-we-drift-away-from-virtual-worlds/</guid>
        <description>&lt;p&gt;どれが一番楽しいかといえば、幼い頃にこっそり家のテレビでタンクバトルやスーパーマリオ、コンバットゾーンを遊んだ時だろうか、それとも、従弟と一緒にこっそり家のパソコンでエイジオフエンパイアズを遊んだ時だろうか、あるいは大学でルームメイトと鬼泣やリーグ・オブ・レジェンドをプレイした時だろうか？&lt;/p&gt;
&lt;p&gt;幼い頃は悩みもなく、遊ぶ時は心身ともに没頭して、その没入感は、大人になってからもう二度と見つからないものだ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;時代の変化と社会の進歩に伴い、かつて活発だった仮想世界での私たちですが、次第に気づかされるのは、あの楽しさと競争に満ちたゲームプラットフォームが、私たちの生活から遠ざかりつつあることだということです。ゲームのソーシャルリンクの途絶は、プレイヤーの離脱を伴い、それは技術の進歩やゲーム自体の代替だけでなく、私たち自身の生活の中心の変化によるものです。年齢とともに、結婚や出産に忙しくなり、人生の主軸が個人の娯楽から家族への責任へと移っていくのです。今日、この傾向の背後にある深層原因について語りましょう。&lt;/p&gt;
&lt;h2 id=&#34;ゲームソーシャルのかげり仮想世界と現実世界の綱引き戦&#34;&gt;ゲームソーシャルのかげり：仮想世界と現実世界の綱引き戦
&lt;/h2&gt;&lt;p&gt;多くの人の青春時代において、ゲームは単なる娯楽ではなく、一種のコミュニケーション手段だった。人気のあるオンラインマルチプレイゲームは、ゲーム内での挑戦や競争を提供するだけでなく、世界中のプレイヤーを結びつけ、仮想的なコミュニティを構築した。その時代、友達とダンジョンに挑んだり、チームで対戦したりすることは日常の一部だった。深夜のボイスチャットで互いの日常を分かち合った時間は、私たちの記憶の一部となった。&lt;/p&gt;
&lt;p&gt;しかし、時が経つにつれて、ますます多くのプレイヤーがこの仮想的なソーシャル体験は永遠の魅力を持ち得ないことに気づき始めた。ゲームのアップデートや多様化するソーシャルプラットフォームにより、プレイヤーたちは徐々にゲームの外でより多くの交流方法を見出し、ゲーム内の友関係は次第に視野から消え去り、かつて活発だったゲーム内でのソーシャルリンクもまた、形なく途絶えていった。&lt;/p&gt;
&lt;h2 id=&#34;ゲームと責任大人になることによる人生の重心的移動&#34;&gt;ゲームと責任：大人になることによる人生の重心的移動
&lt;/h2&gt;&lt;p&gt;大人になり、責任が増え始めます。かつてはゲームに多くの時間を費やしていた若者も、キャリアをスタートさせたり、パートナーと暮らしたり、家庭を築いたりすると、以前は不可欠だと思っていた娯楽が、現実の責任によって圧迫されるようになります。結婚、出産、親の介護といった人生における大きな責任は、エネルギーと時間において選択を迫られます。&lt;/p&gt;
&lt;p&gt;ゲームは過去のものとなり、その代わりに家族のことが優先されるようになった。かつてゲームで「奮闘」していた若者たちは、徐々に現実生活が最も重要な課題だと気づき始めている。特に子供ができたら、生活の中心は完全に家庭に寄り、ゲームは次第に余計なものへと追いやられている。&lt;/p&gt;
&lt;h2 id=&#34;ゲームから家庭へ生活の変化が私たちの娯楽にどう影響するか&#34;&gt;ゲームから家庭へ：生活の変化が私たちの娯楽にどう影響するか
&lt;/h2&gt;&lt;p&gt;私たちの人生において、家庭は最も重要な要素の一つです。しかし、家庭生活に入ると、時間やエネルギーの配分がより具体的かつ限られたものになります。子供の世話やパートナーとの時間を過ごすために、多くの若い親は、かつて愛していたゲームに十分な時間を割くことができなくなります。時には、ゲームのアップデートや新しい情報にも興味を示さなくなることもあります。次第に、ソーシャルメディアや友人との交流が、より多くの人々のコミュニケーションの中心となります。&lt;/p&gt;
&lt;p&gt;これは、娯楽活動を完全に諦めたという意味ではありません。単に、現在のライフステージに合った方法を選んだだけです。かつてゲームを通じて交流していた友人たちが、それぞれの生活環境の変化により、家族の集まりや食事、近場の旅行など、他の方法で繋がりを保つことを選んでいるのかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;仮想世界のさよなら私たちはこの変化をどう見るか&#34;&gt;仮想世界のさよなら：私たちはこの変化をどう見るか？
&lt;/h2&gt;&lt;p&gt;かつてゲームに没頭していた多くの人々にとって、ゲームとの別れは容易ではない。畢竟、かつて私たちに喜びと達成感をもたらした仮想世界は、すでに記憶の一部となっているからだ。しかし、別れは完全に断ち切ることではなく、生活の変化とともに異なる選択を始め、現実生活での役割を調整していくこと。年齢と共に、私たちは青臭い少年から責任ある大人へと成長し、ゲームも依然として価値があるものの、もう人生の主旋律にはなれない。&lt;/p&gt;
&lt;p&gt;実際、この変化は人間の適応力の表れであり、異なる段階に応じて注意点やライフスタイルを調整できる能力を示しています。責任と家庭が生活の中心になると、ゲームやソーシャルな活動は優先順位ではなくなり、時折の娯楽に過ぎなくなります。&lt;/p&gt;
&lt;h2 id=&#34;未来ゲーム新たな帰属意識の波が来るかもしれない&#34;&gt;未来ゲーム：新たな「帰属意識」の波が来るかもしれない。
&lt;/h2&gt;&lt;p&gt;もちろん、社会の発展と技術の進歩に伴い、ゲームの形や内容は常に進化しています。例えば、現在のオンラインマルチプレイヤーゲームは、より気軽で柔軟な方向へ発展し始めており、家庭での交流や親子の関係を重視したデザインのゲームも登場しています。将来的には、もっと多くのゲームが登場し、家庭生活に溶け込みやすく、プレイヤーにより健康的でバランスの取れたソーシャルエクスペリエンスを提供することが期待されます。&lt;/p&gt;
&lt;p&gt;まるで多くの人が「子供の頃のゲーム」を話す時に、懐かしさと情熱に満ちているように、未来の私たちもまた、あるがかりな瞬間に、かつてプレイしたゲームを新たな解釈と経験と共に再び手にとり、仮想世界へと戻ることができるかもしれない。&lt;/p&gt;
&lt;h2 id=&#34;変化はあれど愛は変わらない&#34;&gt;変化はあれど、愛は変わらない。
&lt;/h2&gt;&lt;p&gt;ゲームも家庭も、人生の移り変わりは常に私たちの成長と共にあります。その過程で、バーチャル世界が無限の喜びと刺激を与えてくれますが、最終的には現実に戻り、最も温かい場所である家族のもとに帰ります。ゲームから離れることを後悔する必要はありません。人生の各段階には独自の意味があり、これらの変化こそが私たちをより完全な存在にさせていくのです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>香港証券取引所、仮想通貨発展史</title>
        <link>https://ttf248.life/ja/p/hong-kong-stock-exchange-virtual-currency-history/</link>
        <pubDate>Tue, 31 Dec 2024 07:00:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-stock-exchange-virtual-currency-history/</guid>
        <description>&lt;p&gt;ドナルド・トランプ氏が再びアメリカ合衆国大統領に就任すれば、仮想通貨も改めて世間の注目を集めるでしょう。香港証券取引所も関連事業を積極的に展開しています。以下に香港証券取引所の仮想通貨に関する取り組みの変遷を簡単にまとめます。&lt;/p&gt;
&lt;p&gt;関連契約リストを確認したところ、当初導入されたのは現物ではなく先物であることが分かった。これは妥当なことだ。なぜなら、先物市場の方が流動性が高く、機関投資家の導入が容易だからである。その後導入された現物ETFも同様に妥当であり、ETFはより受け入れられやすい投資ツールだからである。&lt;/p&gt;
&lt;h2 id=&#34;仮想通貨リスト&#34;&gt;仮想通貨リスト
&lt;/h2&gt;&lt;p&gt;香港証券取引所の市場データには、コントラクトが仮想通貨であるかどうかを区別するための識別子は提供されていませんが、コントラクト名から判断できます。公式サイトの取引リストでは、対応するサブカテゴリ__INLINE_CODE_0__ が提供されています。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2022年12月16日&#34;&gt;2022年12月16日
&lt;/h2&gt;&lt;h3 id=&#34;香港証券取引所はアジア初となる暗号資産etfの上場を歓迎&#34;&gt;香港証券取引所は、アジア初となる暗号資産ETFの上場を歓迎
&lt;/h3&gt;&lt;p&gt;香港取引所（香港交易所）は本日（金曜日）、アジアで初めての暗号資産ETFの上場を歓迎し、製品エコシステムを拡大するとともに、香港および国際的な投資家により多くの選択肢を提供します。&lt;/p&gt;
&lt;p&gt;本日上場した2つの新ETF — 南方東英ビットコイン先物ETF（銘柄コード：3066）および南方東英イーサリアム先物ETF（銘柄コード：3068）は、南方東英資産管理有限公司が運用し、それぞれシカゴ商品取引所（CME）で取引されている標準化された現金決済型ビットコイン先物契約およびイーサリアム先物契約を追跡しています。&lt;/p&gt;
&lt;p&gt;香港証券取引所最高運營責任者兼市場共同責任者、姚嘉仁氏は、「本日上場した2つの暗号資産ETFは、香港のますます豊かで多様な交易所買収商品エコシステムに彩りを添えるものとなる。これらの新商品は、アジアで初めて投資家がデジタルアセットへの投資に参加できる機会を提供するとともに、デジタル経済への関心と市場ニーズを反映するものである。今後数ヶ月で、より多くのテーマ式ETFやデジタルアセットの新商品を迎えられることを期待している。」&lt;/p&gt;
&lt;p&gt;ETFは香港証券取引所傘下の事業の中で最も急成長しており、2022年には製品の種類も拡充され、多様化が進んでいます。メタバースETF、カーボンフューチャーズETF、ブロックチェーンETFといった初の製品が投入されたほか、初めて滬港通にETFが組み入れられました。&lt;/p&gt;
&lt;p&gt;また、香港証券取引所における上場投資信託商品（ETP、ETFやレバレッジ・リバース型商品を包含）の今年の最初の11か月の平均日々の取引高は118億元であり、前年の同時期の78億元から50%増加したことは、ETPが投資家の間でますます人気を集めていることを示しています。2022年11月までに、香港証券取引所に上場しているETPは合計168種類で、時価総額は約3,735億元に達しました。&lt;/p&gt;
&lt;h2 id=&#34;2024年4月30日&#34;&gt;2024年4月30日
&lt;/h2&gt;&lt;h3 id=&#34;香港証券取引所は初の仮想資産現物etfの上場を歓迎します&#34;&gt;香港証券取引所は、初の仮想資産現物ETFの上場を歓迎します。
&lt;/h3&gt;&lt;p&gt;香港取引结算有限公司（香港証券取引所）は本日（火曜日）、アジア初の仮想資産現物ETFの上場を歓迎し、香港市場の多様性を高め、投資家により豊かな選択肢を提供するとともに、香港がアジア有数のETF市場としての地位を確立します。&lt;/p&gt;
&lt;p&gt;香港証券取引所のプロダクト開発責任者ロバート・ロー氏は、「本日新たに上場する仮想資産現物ETFは、香港証券取引所の多様かつ活発なETF市場エコシステムを豊かにし、投資家に新たな資産クラスへの投資機会を提供します。1年前に仮想資産先物ETFを成功裏に導入したことに続き、アジアで初めての仮想資産現物ETFは、香港証券取引所の売買商品の種類と流動性をさらに高めます。私たちは市場関係者との緊密な連携を続け、国際的な市場に新たな製品を導入していくことを期待しています。」&lt;/p&gt;
&lt;p&gt;初の仮想資産先物ETFが2022年に上場して以来、投資家から高い人気を集め、活発な取引を記録している。香港に上場した3つの仮想資産先物ETFの日平均出来高は、2023年の890万港ドルから2024年第1四半期には5,130万港ドルに増加し、同時に5億2,900万港ドルの資金流入を呼び込んだ。&lt;/p&gt;
&lt;p&gt;取引所上場商品（ETF、レバレッジ型・逆立回り商品を含む）は、香港証券取引所の成長が最も速い市場の一つであり、ここ一年間も製品の種類は増加し続けています。2023年と2024年前半に新たに16種類のETFが追加され、その中にはアジア太平洋地域初のサウジアラビアETFや、香港初のウォレントークン型ETFが含まれます。現在、香港で上場しているETFの総数は179です。&lt;/p&gt;
&lt;h2 id=&#34;2024年10月28日&#34;&gt;2024年10月28日
&lt;/h2&gt;&lt;h3 id=&#34;香港証券取引所が仮想資産指数シリーズを発表する&#34;&gt;香港証券取引所が仮想資産指数シリーズを発表する。
&lt;/h3&gt;&lt;p&gt;香港取引所（香港交易所）は本日（月曜日）、2024年11月15日に香港証券取引所仮想資産指数シリーズ（以下、指数シリーズ）を発表しました。これは、急成長する仮想資産という資産クラスに信頼できるベンチマーク価格を提供し、香港がアジアをリードするデジタル資産中心地となることを支援します。&lt;/p&gt;
&lt;p&gt;この指数シリーズは、アジア時間帯におけるビットコインとイーサリアムの価格に透明性と信頼性をもたらし、仮想資産に対する統一された参照価格を提供することで、世界中の取引所間での価格差を解消することを目指します。&lt;/p&gt;
&lt;p&gt;香港証券取引所グループ最高経営責任者チェン・イクティン氏は、「当社は、この急成長する資産カテゴリーに対する地域ニーズに応えるため、香港証券取引所の仮想資産指数シリーズを発表できることを嬉しく思います。透明性と信頼性の高いリアルタイムのベンチマークを提供することで、投資家が賢明な投資判断を下し、仮想資産エコシステムの健全な発展を支援するとともに、香港の国際金融センターとしての地位を確立できるよう努めます。」&lt;/p&gt;
&lt;p&gt;香港証券取引所は、新たな分野の開拓に注力しており、この指数シリーズの導入はその一環です。これは、香港のフィンテック発展を支援するとともに、投資家に対し、変化し続ける市場環境下で重要なベンチマークツールとソリューションを提供します。&lt;/p&gt;
&lt;p&gt;ビットコインとイーサリアムの指標指数および参照レートを含むシリーズです。&lt;/p&gt;
&lt;p&gt;ビットコインまたはイーサリアムの24時間取引量で加重された、主要な仮想資産取引所における市場価格を基に算出され、米ドル建てで表示される基準現物価格。金融商品の決済用に設計されており、香港時間午後4:00に毎日算出される参照レートです。&lt;/p&gt;
&lt;p&gt;この指数シリーズは、欧州連合のベンチマーク規制（BMR）に準拠した香港初の仮想資産指数シリーズとなり、英国に登録されたベンチマーク管理機関と仮想資産データおよび指数プロバイダーCCDataが共同で管理・算出します。&lt;/p&gt;
&lt;p&gt;香港特別行政区政府は2022年に仮想資産の発展に関する政策声明を発表し、香港に活気に満ちた仮想資産産業とエコシステムを育成することを目標としています。香港証券取引所の仮想資産指数シリーズは、リアルタイムデータとアジア時間帯の日次参照価格を提供することで、仮想資産投資動向への理解促進に貢献します。&lt;/p&gt;
&lt;p&gt;詳細な指数シリーズの設計および計算方法については、随時発表いたします。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>手数料が下がりました、手数料が下がりました、国内の超大型ETFで手数料一括下げが行われました。</title>
        <link>https://ttf248.life/ja/p/reduced-fees-large-domestic-etf/</link>
        <pubDate>Thu, 21 Nov 2024 03:08:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/reduced-fees-large-domestic-etf/</guid>
        <description>&lt;p&gt;華泰柏瑞滬深300 ETFなど、総合手数料を同類商品の中で最も低い水準に引き下げると発表しました。&lt;/p&gt;
&lt;p&gt;11月19日、華泰柏瑞基金は公告、より多くの投資家の投資および財務ニーズを満たすため、__INLINE_CODE_0__を調整し、華泰柏瑞沪深300ETFおよびその連動ファンドの運用報酬率・托管報酬率を引き下げ、関連するファンド規約の内容を修正します。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;ほぼ同時に、華夏滬深300 ETF、華夏上証50 ETF、南方中証500 ETF、嘉実沪深300 ETF、易方達創業板ETFなど、業界有数の規模を誇るETFも、信託報酬と管理費を引き下げ、それぞれ0.15%と0.05%に統一された。&lt;/p&gt;
&lt;p&gt;これまでの多数のETFとは異なり、今回は市場における規模優位性を持つ銘柄が主導して費用を削減したものであり、その後の業界への影響は大きいだろう。取引所データによると、11月18日現在、華泰柏瑞沪深300 ETFの規模は3700億元を超え、現在の市場で最大規模のETFとなっている。&lt;/p&gt;
&lt;p&gt;大規模なスーパーETFが先に手数料を下げたことは、投資家に利益をもたらす積極的な姿勢を示しており、投資家はより高いコストパフォーマンスで人気があり、流動性の高いファンドに投資できるようになる。&lt;/p&gt;
&lt;p&gt;業界関係者の見解によれば、規模のメリットを持つETFによるコスト削減は、一方では投資家が保有コストを低減し、収益空間と投資効果を高める上で、より広範な投資者を支援するファンドサービス機能の発揮に貢献する。&lt;/p&gt;
&lt;p&gt;低い手数料はまた、製品自体の競争力をさらに高める上で有益であり、流動性の吸収効果とコスト運営の優位性を活かし、長期的な資金流入を呼び込み、「長銭長投」の健全なエコシステムを構築することが期待されます。&lt;/p&gt;
&lt;p&gt;近年、取引の柔軟性、高い透明性、強い流動性、低い投資門限などの特有の利点により、コアETFは資金が底値で市場に参入し、「長期保有」を行う主要な手段となっています。&lt;/p&gt;
&lt;p&gt;今回の値下げは、ある程度の「触媒」となり、A株市場への大型資金の流入を促進する可能性がある。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;筆者が予定している天弘基金の発表はまだですが、追随する可能性が高いです。更新がない場合は、他のファンドを検討する必要があるでしょう。&lt;/p&gt;
&lt;p&gt;旧の管理費：0.5%、運用報酬：0.1%。新管理費：0.15%、運用報酬：0.05%。それでも大幅な削減です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>三者寄付業者への監督強化、Dōyīn（TikTok）での株取引を裏で操る勢力への粛清か？</title>
        <link>https://ttf248.life/ja/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</link>
        <pubDate>Thu, 21 Nov 2024 02:59:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</guid>
        <description>&lt;p&gt;大ハンマーが落ちてくる。&lt;/p&gt;
&lt;p&gt;動画共有プラットフォームの追い風を受け、富裕層向けコンサルティングサービスは加速期に入りつつある。&lt;/p&gt;
&lt;p&gt;９月末、A株市場が活況を呈した後、抖音（ドゥイイン）の推奨銘柄が注目を集めた。&lt;/p&gt;
&lt;p&gt;「大藍」などの财经系インフルエンサーが相次いで抖音（ドゥーイン）で人気を博し、間接的に資本市場に一定の変動を与えた。&lt;/p&gt;
&lt;p&gt;しかし、次々と人気を集める経済ニュースキャスターの背後には、第三者機関委託サービス会社という無視できない存在がある。&lt;/p&gt;
&lt;p&gt;複数の第三者投資顧問サービス会社が、ショート動画で複数のアカウントを運営し、資金の流れを利用してユーザーに投資教育ビデオを見てもらい、投資顧問商品の購入意欲を高めていると聞きます。&lt;/p&gt;
&lt;p&gt;さらに、ある第三者の投資顧問会社が今年の10月だけで10億元の収入を上げたという噂もあり、これは今年の上半年の収入を上回る。&lt;/p&gt;
&lt;p&gt;しかし、「良い日々」はますます不確実な状況に直面している。&lt;/p&gt;
&lt;p&gt;11月以降、複数の部門が相次いで文書を発表し、証券サービス機関に対し、ソーシャルメディアアカウントのコンプライアンス管理強化を求めている。&lt;/p&gt;
&lt;p&gt;11月15日夜、同花順（300033.SZ）は発表、子会社がライブ配信における個別株推奨などの行為により証券監督管理局から処分を受けたことを表明した。
規制強化のメッセージを市場に発信しているのかもしれない。
九方智投（9636.HK）などの第三者投資顧問サービス機関の販促活動も、さらなる圧力を受けかねない。&lt;/p&gt;
&lt;h2 id=&#34;厳重な監視下にある&#34;&gt;厳重な監視下にある
&lt;/h2&gt;&lt;p&gt;TikTokなどのショート動画プラットフォームの隆盛は、感情の発声を増幅させ、間接的に取引行動に影響を与えている。&lt;/p&gt;
&lt;p&gt;巨量算数によると、取引額が最高を更新した9月27日から10月8日の期間中、抖音（Douyin）の株式に関するキーワード検索指数は423.84万から1277.86万へと急上昇し、2倍以上になりました。&lt;/p&gt;
&lt;p&gt;このような状況下、第三者顧問機関の「推波助瀾」的な行動が、規制当局の注目を集めている。&lt;/p&gt;
&lt;p&gt;証券アナリストがライブ配信で様々な方法を用いて個別株を推奨することは、頻繁に規制違反となる行為です。&lt;/p&gt;
&lt;p&gt;11月8日、広東証券監督管理局は、ある企業によるライブ配信で「個別銘柄の推奨をほのめかす」などの状況が見られたため、新規顧客受け入れの一時停止という規制措置を行いました。&lt;/p&gt;
&lt;p&gt;11月14日夜、広東証券先物業界協会が「ライブ配信の管理不足により、機関の業務停止」という文書を発表し、一部の証券相談資格を持つ機関がライブ配信による営業活動において、管理不足などの問題があり、配信中に個別株を推奨する行為があったことを指摘した。&lt;/p&gt;
&lt;p&gt;ライブでの株式推奨行為を禁止する。ライブ配信は公共メディアの伝播であり、登録された証券投資顧問であっても、ライブ配信者はライブ中にて個別株を推奨してはならない。 - 广东证券期货业协会&lt;/p&gt;
&lt;p&gt;これは特異な事例ではない。&lt;/p&gt;
&lt;p&gt;以前の11月7日、上海証券監督管理局が発表した処分票にも、ソーシャルメディアプラットフォームでの違法な株価推奨に関する事例が含まれていました。&lt;/p&gt;
&lt;p&gt;規制当局の調査により、海順証券投資顧問有限会社上海支社の顧問員である王永が、WeChatビデオチャンネルで誤解を招く動画コンテンツを公開していることが判明し、これは業界規範に違反する行為です。&lt;/p&gt;
&lt;p&gt;上海証監局はこれに対し、王永に対して警告書の発出という監督管理的措置をとった。&lt;/p&gt;
&lt;p&gt;資格のない一部の顧問機関が、証券会社に依存する形で抖音で株式を推奨していたところ、すでに配信停止されています。&lt;/p&gt;
&lt;p&gt;業界に抖音でのライブ配信者がいるが、実際には証券会社に傘下であり、そうすることで投資顧問資格を得ている。そしてオンラインライブで集客し、オフラインで投資顧問の組み合わせ商品（投顧型組成）を販売している。」華南地方の一投資顧問（投顧）从业者（信風：ID:TradeWind01）が語る。「しかし、ライブ配信中に株を推奨したことが発覚し、配信停止となった。正規の証券会社では、投資教育（投教）のライブ配信は板块（セクター）状況について言及するものの、個別銘柄には触れない。」&lt;/p&gt;
&lt;p&gt;現在の規制当局は、ソーシャルメディア上での違法な株の推奨に高い関心を示しています。&lt;/p&gt;
&lt;p&gt;例：深証監局は最近、業界内で一部の機関や個人がメディアを利用して違法な推奨銘柄などを行っているという通知を発し、管轄区域内の証券投資相談機関のメディア運営・管理をさらに規範化するため、各機関は自社のメディア運営管理を強化する必要がある。&lt;/p&gt;
&lt;p&gt;これは、多数の第三者顧問サービス機関の事業展開にさらなる課題をもたらすかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;否&#34;&gt;否
&lt;/h2&gt;&lt;p&gt;ショート動画に誘われた個人投資家がお金を稼いだかどうかはさておき、第三者機関投資顧問会社は二手市場での価値を上げている。&lt;/p&gt;
&lt;p&gt;「オンライン教育の第一株」として知られる九方智投は、今年9月初旬の28億7800万元から11月13日の終値で124億6400万元に急騰し、49取引日間の上昇率はすでに333.08%に達している。&lt;/p&gt;
&lt;p&gt;半年の報告書によると、今年上半期に玖方智投は抖音（ドゥオイン）、小紅書（シャオホンシュー）などのソーシャルメディアプラットフォームでブランド露出を行い、今年6月末までに488のアカウントと0.46億のフォロワーを獲得した。&lt;/p&gt;
&lt;p&gt;例えば、玖方智投のチーフ・インベストメントアドバイザーである「洪幫主」は、抖音（Douyin）でのフォロワー数が226万人に達している。&lt;/p&gt;
&lt;p&gt;MCN運営に深く注力し、ユーザー中心のアプローチで、トラフィック、ブランド、製品の包括的な発展を協調的に推進しています。玖方智投は指摘します。「ライブ配信やショートビデオなどの新メディアツールを深く融合させ、AI技術を活用することでファンネットワークを構築し、積極的にECモデルを探求することで、トラフィックの効率的な転換を実現します。」&lt;/p&gt;
&lt;p&gt;九方智投の顧問コースパッケージは、数十元から十数万元まで、様々な価格帯をカバーしています。その中でも最も高額な「スーパー投資家」コースは13.96万元/半年で提供され、独占的な見解や顧問プライベートサービスなどが含まれます。&lt;/p&gt;
&lt;p&gt;しかし、九方智投の投資顧問プロダクトの返金率は10％以上です。&lt;/p&gt;
&lt;p&gt;2024年上半期、玖方智投フラッグシップシリーズと玖方智投擒龍シリーズの返金率はそれぞれ14.7%、18.5%に達した。&lt;/p&gt;
&lt;p&gt;規制の嵐の中、玖方智投の事業展開がどうなるかは、引き続き注視していく必要があります。&lt;/p&gt;
&lt;p&gt;最近、複数のメディアが、玖方智投などの第三者顧問会社傘下の口座に影響が出ていると報じています。&lt;/p&gt;
&lt;p&gt;11月7日、あるメディアが「ホンバンチュウ」のライブ配信停止を報道した。&lt;/p&gt;
&lt;p&gt;しかし、11月15日の午後、シンフォン（ID:TradeWind01）が当該アカウントを検索したところ、「ホンバンチュウ」のライブ配信画面で依然として11月18日のライブ予約が可能であることが確認された。&lt;/p&gt;
&lt;p&gt;当局からの検査が、玖方智投に対して行われているという市場の噂も同時に入った。&lt;/p&gt;
&lt;p&gt;関係者によると、この検査は定例のもので、すでに終了しています。&lt;/p&gt;
&lt;p&gt;この件で最近規制当局の目を寄せられている企業は、これだけではありません。&lt;/p&gt;
&lt;p&gt;同花順が違法な推奨株に関し捜査され、事業停止となる可能性があるという情報があります。
同花順は11月15日に「不法な推奨株の状況はなく、立件調査もされていない」と回答した。
当日夜、東証は、トゥオ・フアシュン（同花順）傘下の浙江トゥオ・フアシュン雲軟件有限公司に対し、ライブ配信事業のプロモーションにおけるコンプライアンス管理が不十分であり、個別株推奨を暗示する状況があったとして、新規顧客受け入れ停止3ヶ月等の処分を行ったと発表した。
この背景には、規制当局がTikTokライブなどのソーシャルメディアプラットフォーム上での推奨株に関する内容にますます注力している可能性も示唆される。&lt;/p&gt;
&lt;p&gt;実際、ショート動画市場は証券会社も注目していますが、コンプライアンス要件により、現状では慎重な姿勢を崩していません。&lt;/p&gt;
&lt;p&gt;ある証券関係者からトレードウィンド（ID：TradeWind01）に情報がありましたが、同社はショート動画の運営や集客方法を模索しており、人員を派遣してショート動画プラットフォーム企業の学習も行っています。しかし、コンプライアンス要件により、現時点では探索段階です。&lt;/p&gt;
&lt;p&gt;実際、規制の各種コンプライアンス要件は、ショート動画プラットフォームの内容が明らかな感情的な色合いを持つことに起因しますが、投資においては市場参加者が冷静さを保つことが求められ、両者は本質的に対立します。&lt;/p&gt;
&lt;p&gt;情緒の奔放な力が資本市場に影響を与えれば、市場の激しい変動を招きやすく、資本市場の長期的な健全な発展に反する。&lt;/p&gt;
&lt;p&gt;証券持牌機関が、いかにして「レッドライン」を踏むことなくショートビデオ時代に順応していくか、これは各方面にとって難しい課題である。&lt;/p&gt;</description>
        </item>
        <item>
        <title>CentOS 8 Stream EOL</title>
        <link>https://ttf248.life/ja/p/centos-8-stream-eol/</link>
        <pubDate>Sat, 16 Nov 2024 23:24:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/centos-8-stream-eol/</guid>
        <description>&lt;p&gt;配信前のオープンソース開発プラットフォーム。
オープンソースオペレーティングシステムのライフサイクルに初めて注目しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;期限切れです、何か問題がありますか？セキュリティの問題以外に、DNFが使えなくなりました。最近ツールをインストールしようとしたときにDNFが失敗し、ミラーを確認したところ、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; の有効期限が切れていました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;centos-streamのご紹介&#34;&gt;CentOS Streamのご紹介
&lt;/h2&gt;&lt;h3 id=&#34;位置付けと役割&#34;&gt;位置付けと役割
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、Fedora Linux（上流開発）とRHEL（Red Hat Enterprise Linux、下流開発）の中間に位置し、橋渡し役を果たします。&lt;/p&gt;
&lt;p&gt;最新Red Hat系のLinux機能を試すためのバージョンとして考えられ、最新技術を体験したいユーザーに適しています。&lt;/p&gt;
&lt;h3 id=&#34;誕生と背景&#34;&gt;誕生と背景
&lt;/h3&gt;&lt;p&gt;時の経過とともに、Red Hat社は企業向けLinuxプラットフォームをより効果的に発展させる方法を模索し、CentOS Streamを発表しました。&lt;/p&gt;
&lt;p&gt;CentOS 8は2021年末にサポート終了となり、その代替としてCentOS Streamがアップデートされ続け、CentOSプロジェクトの将来的な方向性となっています。&lt;/p&gt;
&lt;h3 id=&#34;特徴と利点&#34;&gt;特徴と利点
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、より迅速なアップデートを提供するローリングリリース型のLinuxディストリビューションです。コミュニティ、パートナー、顧客の参加を促進し、ユーザーがRed Hat Enterprise Linuxに、より迅速かつ直接的に貢献できる透明性と機会を高めます。&lt;/p&gt;
&lt;p&gt;CentOS Streamの内容は、Red Hatが次期安定版RHELに組み込む予定のソフトウェアであり、コミュニティメンバーが開発・テストするための安定したABI/APIを提供します。&lt;/p&gt;
&lt;h3 id=&#34;利用シーンとターゲットユーザー&#34;&gt;利用シーンとターゲットユーザー
&lt;/h3&gt;&lt;p&gt;CentOS Streamは、最新のLinux機能アップデートを継続的に受けたいCentOSユーザーや、Red Hat Enterprise Linuxの開発に貢献したい開発者およびパートナーに適しています。&lt;/p&gt;
&lt;p&gt;コミュニティのメンバー、Red Hat パートナー、およびその他の関係者が、より安定した予測可能な Linux エコシステムの中で革新的なオープンソースソフトウェアを最大限に活用できるよう支援することを目的としています。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供していただければ日本語に翻訳します&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release&lt;/th&gt;
&lt;th&gt;Released&lt;/th&gt;
&lt;th&gt;Active Support&lt;/th&gt;
&lt;th&gt;Security Support&lt;/th&gt;
&lt;th&gt;Latest&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3 years ago (15 Sep 2021)&lt;/td&gt;
&lt;td&gt;Ends in 2 years and 6 months (31 May 2027)&lt;/td&gt;
&lt;td&gt;Ends in 2 years and 6 months (31 May 2027)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5 years ago (24 Sep 2019)&lt;/td&gt;
&lt;td&gt;Ended 5 months and 3 weeks ago (31 May 2024)&lt;/td&gt;
&lt;td&gt;Ended 5 months and 3 weeks ago (31 May 2024)&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;解決策&#34;&gt;解決策
&lt;/h2&gt;&lt;p&gt;面倒くさいバージョンアップは避け、長期サポート版を選択した。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hugo Module カスタマイズ、テーマ改修：アイデア解説</title>
        <link>https://ttf248.life/ja/p/hugo-module-custom-theme-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hugo-module-custom-theme-ideas/</guid>
        <description>&lt;p&gt;過去のコミット履歴を振り返ると、サイトは何度もテーマを変更しており、その度にカスタマイズが施されている。ここでは、カスタマイズしたテーマのアイデアについて記録しておく。筆者の__INLINE_CODE_0__也有个仓库，短暂的维护过even主题，后来由于强迫症，非想要升级__INLINE_CODE_1__BOLD_4&lt;code&gt;stack&lt;/code&gt;テーマ。&lt;/p&gt;
&lt;h2 id=&#34;ユゴのモジュール化&#34;&gt;ユゴのモジュール化
&lt;/h2&gt;&lt;p&gt;モジュール化と聞くと、NginxのモジュールやIDEAプラグインなどが思い浮かぶかもしれません。通常、いくつかのモジュールをアップロードすることで、差別化されたニーズを満たすことができます。皆がこのモジュール方式を好む主な理由は、柔軟性が高く、大した労力なしに自身のニーズに対応できるからです。多くの場合、全体としては似ていても、細部には差異が存在します。これもまた、技術的な複雑さだけでなく、ビジネスの複雑さも示しています。ほとんどの場合、私たちはビジネスの複雑さに直面します。これはまさに、ソフトウェア業界における「隔行如隔山」という言葉を最もよく表していると言えるでしょう。現在では、インターネット業界だけでなく、金融業界や伝統的な製造業に至るまで、情報化システムを活用して企業の生産と管理を支援しています。同じ休暇申請システムでも、同じ業界の異なる企業間でも差異が生じることがあります。&lt;/p&gt;
&lt;p&gt;そのモジュールは、一般的にイメージされるモジュールとは少し異なり、機能単位で多様なニーズに対応するのではなく、ディレクトリ構造を主体として同一の構造を識別します。&lt;/p&gt;
&lt;p&gt;資料リンク：&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo架构 — Hugo的模块&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;その方法はまだ使えるが、本稿では推奨しない。テーマに更新があった場合、保守が煩雑になるため、個別のGitリポジトリでテーマを管理する必要がある。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供していただければ日本語に翻訳します&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;/h2&gt;&lt;p&gt;モジュール化の基礎概念を理解していれば、カスタムテーマの理解は非常に簡単になるでしょう。現在のテーマも、複数の異なるモジュールが組み合わさったもので、変更したいモジュールがあれば、対応するテンプレートファイルを修正すればよいのです。&lt;/p&gt;
&lt;p&gt;公式ドキュメントより：&lt;/p&gt;
&lt;p&gt;Using this method, there won&amp;rsquo;t be any file under &lt;code&gt;themes&lt;/code&gt; directory. In order to modify the theme, you will have to copy the file you want to modify to the same directory under &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, in order to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you will have to copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copy the code from theme&amp;rsquo;s repository). The same applies to &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories。&lt;/p&gt;
&lt;h2 id=&#34;テンプレートファイルを見つけるには&#34;&gt;テンプレートファイルを見つけるには。
&lt;/h2&gt;&lt;h3 id=&#34;正統な考え方&#34;&gt;正統な考え方
&lt;/h3&gt;&lt;p&gt;テーマのソースコードファイルを確認し、設計思想を理解した上で、対応するテンプレートファイルを修正すればよい。&lt;/p&gt;
&lt;h3 id=&#34;乱暴な考え方&#34;&gt;乱暴な考え方
&lt;/h3&gt;&lt;p&gt;筆者はフロントエンドコードに詳しくないので、時には乱暴な方法を取ることがあります。例えば、ブラウザで該当のページを開き、変更したい箇所を見つけて、__INLINE_CODE_0__的方式，定位到__INLINE_CODE_1__を使ってテーマソースコード内で検索し、対応するファイルを見つけたら、コピーしてサイトディレクトリに置き、修正すればよいのです。&lt;/p&gt;
&lt;h2 id=&#34;ちょっとしたコツ&#34;&gt;ちょっとしたコツ
&lt;/h2&gt;&lt;p&gt;公式には、スタイルをカスタマイズするためのファイルが用意されています。変更箇所は複数のファイルに分割し、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; ファイルでそれらのファイルを読み込むことで、より効果的にスタイルファイルを管理できます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hugo-module-custom-theme-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;変更点まとめ-6時間&#34;&gt;変更点まとめ (6時間)
&lt;/h2&gt;&lt;p&gt;今は、&lt;em&gt;強調&lt;/em&gt; &lt;strong&gt;太字&lt;/strong&gt; &lt;em&gt;さらに強調&lt;/em&gt; は、簡単に片付けられる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全体：グローバルテキストスタイル。以前の &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 融合 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; の表示スタイルを引き継ぎ、中国語に最適化されています。&lt;/li&gt;
&lt;li&gt;ホームページ：右側のナビゲーションにマウスインタラクションアニメーションを追加&lt;/li&gt;
&lt;li&gt;トップページ：記事に要約プレビューを追加しました（時間がかかったため、多少の裏手取りをしています）。&lt;/li&gt;
&lt;li&gt;スクロールバー：スタイルを少し修正しました。&lt;/li&gt;
&lt;li&gt;コードブロックに、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; コードハイライトプラグインを導入し、コードブロックのスタイルを改善しました。&lt;/li&gt;
&lt;li&gt;一部内容は転載、新規に著作者情報表示、元リンク表示&lt;/li&gt;
&lt;li&gt;アーカイブページ：上部のカテゴリ画像、テーマのカラーオーバーレイを削除し、オリジナル画像をそのまま表示。&lt;/li&gt;
&lt;li&gt;年ごとの分類による統計表示パネルを追加しました。&lt;/li&gt;
&lt;li&gt;アーカイブページ：2列表示レイアウト&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;スクリプトで、カスタム変数を利用して概要プレビューを実現します。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コードの再利用率が極端に高いのも問題になり、ある部分を変更すると他の部分にも影響が出てくるため、テーマを修正する際は、既存のロジックを壊さないように注意が必要です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;コメント欄&#34;&gt;コメント欄
&lt;/h3&gt;&lt;p&gt;この男の修正はさらに完璧になった：&lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ストライク_11__&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推奨ページ、メールお問い合わせ。当サイトではコメント欄は開放しておりません。&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>県都のバラモン：小さな町の「大物」</title>
        <link>https://ttf248.life/ja/p/county-brahmins-big-shots-in-small-towns/</link>
        <pubDate>Wed, 13 Nov 2024 23:02:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/county-brahmins-big-shots-in-small-towns/</guid>
        <description>&lt;p&gt;最近、抖音の氷霜（だいひそう）先生がとても人気で、よく動画の切り抜きアカウントを見かける。ライブ配信の中の一部の内容だ。あるルームメイトのリスナーが「氷霜先生、西安の家を売って故郷に帰って躺平（タンピン）したいのですが」と尋ねたところ、氷霜先生は「あなたは今、三十代くらいで、躺平できるわけがない。親御さんは年老いていく一方だし、子供はまだ自立していない。故郷に帰っても、小さな町の権力者たちと付き合わなければならないよ」と答えた。&lt;/p&gt;
&lt;p&gt;まず、意見の有無や正誤にかかわらず、__INLINE_CODE_0__この言葉の意味とは何だろうか。&lt;/p&gt;
&lt;h1 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h1&gt;&lt;p&gt;多くの小さな県都市では、「郷土の婆羅門」と呼ばれる人々が話題になる。「県城婆羅門」という存在は、あたかもその土地社会を象徴するかのようだ。彼らは必ずしも真の宗教指導者ではないし、華やかな肩書きも持っていないことが多い。しかし、一見すると普通の人々に見えるが、実は重要な役割を担っている。彼らは「権力、地位、発言権」を代表し、その県都市における特定の階層の象徴となっている。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-1&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h2&gt;&lt;p&gt;まず、最初に「婆羅門」という言葉が元々インド社会における最高階層を指し、知恵、権威、そして精神的な至高性を表すものであることを理解する必要があります。そして中国の県都市において、「県都市婆羅門」という言葉は、それほど複雑な宗教的背景を持つのではなく、むしろ一種の社会現象の比喩として用いられています。&lt;/p&gt;
&lt;p&gt;簡単に言うと、「県城の婆羅門」とは、県内の教師、医師、地元で有名な商人、官僚といった「文化権威」のことです。彼らの立場は一見すると平凡ですが、閉鎖的な環境である県内では、比較的高い社会的地位を持ち、意見や行動が無視できない影響力を持っています。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-2&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h2&gt;&lt;p&gt;県内では、ほとんど全ての業界にそのような「婆羅門」がいる。彼らは：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特に地方で数十年も教員として活躍されている先生方は、必ずしも有名大学の卒業生とは限りませんが、知識を通じていかに信頼を築くか熟知しており、広く尊敬を集めています。&lt;/li&gt;
&lt;li&gt;県庁の副県長や科級幹部などは、限られた資源と権力を掌握しており、地位は低いながらも、地域における「バラモン」的な存在となり得る。&lt;/li&gt;
&lt;li&gt;いくつかの県都市の経営者たちは、規模は大きくなくても、一定の財産を持ち、地域での発言権を握っている。地元で知られた小企業を一つか二つ経営し、県内ではかなりの影響力を持っている。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの人々は、大都市の著名人や高級官僚と比べると地位は目覚ましいとは言えないが、郡都という小さな社会においては、「文化長老」や「権力の中枢」に匹敵するほどの影響力を持っている。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-3&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h2&gt;&lt;p&gt;「県城婆羅門」の真意を理解するには、県都市という特殊な環境から考察する必要がある。「婆羅門」たちは、この場所では情報流通が遅く、社会階層の流動性が低いゆえに、長年地域に根を下ろし、名声、知識、人脈を築き上げてきた人々であり、その影響力は政治、経済、文化など多岐にわたる。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;地方では、特に教育システムが十分に発達していない場合や、一般の人々にはあまり選択肢がないため、「婆羅門」と呼ばれる人々が、授業での知識伝達、メディアの説明、さらには社交の場での言行によって、静かにその地の文化的雰囲気を形作っている。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;県都市の人口や資源が限られているため、「バラモン」と呼ばれる人々は、しばしば地域資源を掌握する主要な存在となります。社会福祉、政策実施、あるいは特定のプロジェクトの承認において、彼らの影響力は不可欠です。その発言権と決定権により、彼らは地域社会に確固たる地位を築いています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;閉鎖的な小規模なコミュニティでは、人間関係が非常に重要になる。これらの「地方の婆羅門」は、強固な社会的ネットワークを構築することで情報伝達と資源配分を支配し、重要な局面で決定的な役割を果たしている。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-4&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h2&gt;&lt;p&gt;「郷土の婆羅門」は尊敬と崇拝を集めることが多くはあるものの、その「高貴な立場」にも問題がないわけではない。現代社会において、「郷土の婆羅門」が真に能力や革新性を持たず、世襲関係や資源の独占によって地位を維持していることは珍しいことではない。情報化の進展に伴い、これらの「婆羅門」の権力は徐々に崩れつつあり、新たな社会流動性が小さな町の姿を変え始めている。&lt;/p&gt;
&lt;p&gt;全体的に見て、「県城のバラモン」は非常に興味深い社会現象であり、地方社会における権力と文化構造を反映していると言えるでしょう。彼らの「権力」が国の統治を直接脅かすものではないとしても、地方においては間違いなく重要な人物です。情報流通が加速し、社会変化が激しい現代において、県城のこれらの「バラモン」たちは、かつてない課題に直面しているかもしれません。&lt;/p&gt;
&lt;h1 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供してください-5&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。
&lt;/h1&gt;&lt;p&gt;元々この原稿が存在するはずじゃなかった、ただ好奇心から&lt;code&gt;婆罗门&lt;/code&gt;BOLD_3&lt;code&gt;kimi&lt;/code&gt;，结果还挺搞笑的，我能看到网页端已经搜索出来了结果，但是瞬间就变成了相关内容无法展示，然后我就想，这个词是不是有什么特殊的意义，然后我就扔给了&lt;code&gt;ChatGPT&lt;/code&gt;,この記事ができた。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Linuxバックエンドサービスにおける大量の文字列データ処理 - 効率が低い</title>
        <link>https://ttf248.life/ja/p/linux-backend-slow-string-processing/</link>
        <pubDate>Wed, 13 Nov 2024 19:42:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-backend-slow-string-processing/</guid>
        <description>&lt;p&gt;C++開発の過去プロジェクトにおいて、カスタムプロトコルを用いて通信しており、そのプロトコルは二次元配列の形式を採用していました。大量データを処理する際、ログ生成のために配列を走査しシリアライズを行う必要がありましたが、効率が悪く、高負荷時にシステムが顕著にカクつくという問題が発生しました。この件について、ビジネス部門からシステムの動作不良に関するフィードバックがありました。&lt;/p&gt;
&lt;h2 id=&#34;問題特定&#34;&gt;問題特定
&lt;/h2&gt;&lt;p&gt;問題の調査において、まずシステムを性能解析したところ、大量データを処理する際にCPU使用率が顕著に増加し、システム応答時間が長くなっていることが判明しました。システムのログを分析した結果、二次元配列の処理における効率の低いシリアライズ操作が多く存在することがわかり、これがシステムパフォーマンスの低下を引き起こしていると考えられます。&lt;/p&gt;
&lt;p&gt;ツール切り取りサービスの スレッド情報を確認した結果、ログスレッドの大部分の時間文字列の結合処理に費やされていることが判明しました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ここが今日のポイントです。異なる加算方法によって、効率は大きく異なります。過去のコードでは &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 演算子を使用しており、この方法は頻繁に一時オブジェクトを作成するため、非常に低速です。それが非効率的だと知っていても、どれほど非効率的なのかを理解していないようなものです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;デモ検証&#34;&gt;デモ検証
&lt;/h2&gt;&lt;p&gt;プロジェクトコードに基づいて、業務ロジックを抽出し、文字列結合の効率問題を検証するための簡単なデモを作成しました。&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 下的 __INLINE_CODE_1__BOLD_6&lt;code&gt;linux&lt;/code&gt; 下的 &lt;strong&gt;INLINE_CODE_3&lt;/strong&gt; 编译器，__INLINE_CODE_4__モードでコンパイル実行し、効率を比較します。&lt;/p&gt;
&lt;h3 id=&#34;主なポイント&#34;&gt;主なポイント
&lt;/h3&gt;&lt;p&gt;プロジェクトでは手法4を使用しており、テストデータを入手する前に、読者はどの方法が最も効率的か、またどれが最も非効率かを考えてみることができます。結果を見たときは、やはり驚きました。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各フィールドを文字列に連結します。&lt;/li&gt;
&lt;li&gt;流（ストリーム）を使用して各フィールドを結合すると、この方法がより効率的です。特に大量のデータを結合する場合に有効です。&lt;/li&gt;
&lt;li&gt;事前に文字列に十分なメモリを割り当てることで、メモリ再配置のオーバーヘッドを削減し、パフォーマンスが向上します。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;太字_1&lt;/strong&gt;インライン&lt;strong&gt;イタリック_3&lt;/strong&gt;、&lt;strong&gt;太字_2&lt;/strong&gt;：文字列を連結するたびに新しい一時的な文字列オブジェクトが作成されるため、特に大規模な連結ではパフォーマンスが低下します。これは、連結ごとに新しいメモリの割り当てとコピーが発生するためです。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参照結果から、プロジェクトは効率が最も悪い方法が選択されたことが分かります。&lt;/p&gt;
&lt;p&gt;さらに、異なるプラットフォームのコンパイラ最適化効率を分析すると、Microsoftの&lt;code&gt;visual studio&lt;/code&gt; 一如既往的优秀，针对字符串的优化效率很高，而 &lt;code&gt;gcc&lt;/code&gt;コンパイラは、この点において若干見劣りする。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;コードを異なるマシンで実行した場合、データの比較は直接的な意味を持たないため、それぞれの結合方法間の差異を比較するのが適切です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;windows 平台下的 vs2022 编译器

----------------------------------------
Data Generation Time: 0.054 seconds.
----------------------------------------

----------------------------------------
Data Merging Performance:
----------------------------------------
+ Data merging (+=) took: 0.053 seconds.
+ ostringstream Data merging took: 0.054 seconds.
+ Pre-reserved Data merging took: 0.045 seconds.
+ Data merging (bodys = bodys + body + &amp;quot;\n&amp;quot;) took: 16.108 seconds.

----------------------------------------
Data Merging Complete.
----------------------------------------

Program finished.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;linux 平台下的 gcc8.5 编译器
----------------------------------------
Data Generation Time: 0.108 seconds.
----------------------------------------

----------------------------------------
Data Merging Performance:
----------------------------------------
+ Data merging (+=) took: 0.100 seconds.
+ ostringstream Data merging took: 0.083 seconds.
+ Pre-reserved Data merging took: 0.057 seconds.
+ Data merging (bodys = bodys + body + &amp;quot;\n&amp;quot;) took: 29.298 seconds.

----------------------------------------
Data Merging Complete.
----------------------------------------

Program finished.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;完全コード&#34;&gt;完全コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;random&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

typedef std::vector&amp;lt;std::string&amp;gt; DataRow;
typedef std::vector&amp;lt;DataRow&amp;gt; DataGroup;

struct ResponsePackage
{
    std::string ErrorInfo;
    DataRow Head;
    std::string ClientId;
    std::string UUID;
    std::string MsgID;
    std::string SessionID;
    std::string ExtraInfo1;
    std::string ExtraInfo2;
    DataGroup DataBody;
};

// Generate specified length of random string
std::string generateRandomString(size_t length)
{
    const char charset[] = &amp;quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;quot;;
    const size_t max_index = sizeof(charset) - 1;
    std::string random_string;
    random_string.reserve(length);

    std::random_device rd;
    std::mt19937 generator(rd());
    std::uniform_int_distribution&amp;lt;&amp;gt; distribution(0, max_index);

    for (size_t i = 0; i &amp;lt; length; ++i)
    {
        random_string += charset[distribution(generator)];
    }

    return random_string;
}

void create_large_string()
{
    // Example request package with 50 fields
    ResponsePackage requestPackage;

    requestPackage.Head = {
        &amp;quot;Field1&amp;quot;, &amp;quot;Field2&amp;quot;, &amp;quot;Field3&amp;quot;, &amp;quot;Field4&amp;quot;, &amp;quot;Field5&amp;quot;,
        &amp;quot;Field6&amp;quot;, &amp;quot;Field7&amp;quot;, &amp;quot;Field8&amp;quot;, &amp;quot;Field9&amp;quot;, &amp;quot;Field10&amp;quot;,
        &amp;quot;Field11&amp;quot;, &amp;quot;Field12&amp;quot;, &amp;quot;Field13&amp;quot;, &amp;quot;Field14&amp;quot;, &amp;quot;Field15&amp;quot;,
        &amp;quot;Field16&amp;quot;, &amp;quot;Field17&amp;quot;, &amp;quot;Field18&amp;quot;, &amp;quot;Field19&amp;quot;, &amp;quot;Field20&amp;quot;,
        &amp;quot;Field21&amp;quot;, &amp;quot;Field22&amp;quot;, &amp;quot;Field23&amp;quot;, &amp;quot;Field24&amp;quot;, &amp;quot;Field25&amp;quot;,
        &amp;quot;Field26&amp;quot;, &amp;quot;Field27&amp;quot;, &amp;quot;Field28&amp;quot;, &amp;quot;Field29&amp;quot;, &amp;quot;Field30&amp;quot;,
        &amp;quot;Field31&amp;quot;, &amp;quot;Field32&amp;quot;, &amp;quot;Field33&amp;quot;, &amp;quot;Field34&amp;quot;, &amp;quot;Field35&amp;quot;,
        &amp;quot;Field36&amp;quot;, &amp;quot;Field37&amp;quot;, &amp;quot;Field38&amp;quot;, &amp;quot;Field39&amp;quot;, &amp;quot;Field40&amp;quot;,
        &amp;quot;Field41&amp;quot;, &amp;quot;Field42&amp;quot;, &amp;quot;Field43&amp;quot;, &amp;quot;Field44&amp;quot;, &amp;quot;Field45&amp;quot;,
        &amp;quot;Field46&amp;quot;, &amp;quot;Field47&amp;quot;, &amp;quot;Field48&amp;quot;, &amp;quot;Field49&amp;quot;, &amp;quot;Field50&amp;quot;
    };

    requestPackage.ClientId = &amp;quot;ClientID&amp;quot;;
    requestPackage.UUID = &amp;quot;UUID&amp;quot;;
    requestPackage.MsgID = &amp;quot;MsgID&amp;quot;;
    requestPackage.SessionID = &amp;quot;SessionID&amp;quot;;
    requestPackage.ExtraInfo1 = &amp;quot;ExtraInfo1&amp;quot;;
    requestPackage.ExtraInfo2 = &amp;quot;ExtraInfo2&amp;quot;;

    // Start timing for data generation
    auto start_gen = std::chrono::high_resolution_clock::now();

    // Generate 10,000 rows of data, each with 50 fields
    for (size_t i = 0; i &amp;lt; 10000; ++i)
    {
        DataRow dataRow(50, &amp;quot;This is a test string&amp;quot;);
        requestPackage.DataBody.push_back(dataRow);
    }

    // End timing for data generation
    auto end_gen = std::chrono::high_resolution_clock::now();
    std::chrono::duration&amp;lt;double&amp;gt; duration_gen = end_gen - start_gen;

    // Display result generation time
    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Generation Time: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_gen.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;

    // Data merging using different methods
    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Performance:\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;

    {
        // Method 1: Using &#39;+=&#39; string concatenation
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys(&amp;quot;&amp;quot;);
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            for (auto&amp;amp; item : vec)
            {
                body += item + &amp;quot; &amp;quot;;
            }
            bodys += body + &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Data merging (+=) took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 2: Using ostringstream
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::ostringstream bodys;
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::ostringstream body;
            body &amp;lt;&amp;lt; &amp;quot;This is a test string&amp;quot;;
            for (auto&amp;amp; item : vec)
            {
                body &amp;lt;&amp;lt; item &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
            }
            bodys &amp;lt;&amp;lt; body.str() &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ ostringstream Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 3: Pre-allocated memory
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys;
        bodys.reserve(1000 * 50 * 20); // Pre-allocate enough memory
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            body.reserve(50 * 20); // Pre-allocate memory for each row
            for (auto&amp;amp; item : vec)
            {
                body += item + &amp;quot; &amp;quot;;
            }
            bodys += body + &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Pre-reserved Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 4: Using &#39;bodys = bodys + body + &amp;quot;\n&amp;quot;&#39;
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys(&amp;quot;&amp;quot;);
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            for (auto&amp;amp; item : vec)
            {
                body = body + item + &amp;quot; &amp;quot;; // Note the use of &#39;body = body + item&#39;
            }
            bodys = bodys + body + &amp;quot;\n&amp;quot;; // Again, using &#39;bodys = bodys + body&#39;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Data merging (bodys = bodys + body + \&amp;quot;\\n\&amp;quot;) took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Complete.\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;
}

int main()
{
    try
    {
        create_large_string();
    }
    catch (const std::exception&amp;amp; e)
    {
        std::cerr &amp;lt;&amp;lt; &amp;quot;Caught exception: &amp;quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\nProgram finished.\n&amp;quot;;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43;ラムダ式におけるパラメータのライフサイクル</title>
        <link>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</link>
        <pubDate>Wed, 13 Nov 2024 19:23:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-lambda-parameter-lifetime/</guid>
        <description>&lt;p&gt;C++において、ラムダ式は便利な匿名関数であり、外部変数をキャプチャしてその内部で使用できます。これにより、ラムダは柔軟なプログラミングツールとなります。ただし、ラムダ式のパラメータのライフサイクルは特に注意すべき点であり、特にキャプチャとパラメータの受け渡しにおいて重要です。&lt;/p&gt;
&lt;h3 id=&#34;ラムダ式パラメータのライフサイクル&#34;&gt;ラムダ式パラメータのライフサイクル
&lt;/h3&gt;&lt;p&gt;ラムダ式のパラメータの寿命は、通常、他のC++関数と同様です。関数のパラメータは、関数呼び出し中に存在し、呼び出しが終了すると寿命を終えます。ただし、ラムダ式が外部変数にキャプチャする場合、パラメータの寿命はそのキャプチャ方法の影響を受けます。&lt;/p&gt;
&lt;h3 id=&#34;キャプチャとパラメータのライフサイクルとの関係&#34;&gt;キャプチャとパラメータのライフサイクルとの関係
&lt;/h3&gt;&lt;h4 id=&#34;21-外部変数の捕捉&#34;&gt;2.1 外部変数の捕捉
&lt;/h4&gt;&lt;p&gt;C++のラムダ式は、外部変数を2つの方法でキャプチャできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;値のキャプチャにより、外部変数の値がラムダ内にコピーされ、そのコピーの寿命はラムダの寿命によって制御されます。&lt;/li&gt;
&lt;li&gt;クローズチャ、外部変数の参照は保持され、ラムダ内の参照は元の外部変数を示し、ライフサイクルは外部変数に依存します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda_by_value = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // 捕获x的副本
auto lambda_by_reference = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // 捕获x的引用

lambda_by_value();  // 打印10
lambda_by_reference();  // 打印10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;捕捉された変数のライフサイクルは以下の通りです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャプチャされた時点での外部変数の値がラムダにコピーされ、ラムダのライフサイクル終了時にそのコピーが破棄されます。&lt;/li&gt;
&lt;li&gt;ラムダが外部変数の参照を持つこと、&lt;strong&gt;外部变量必须在lambda使用之前有效，否则会导致未定义行为&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ラムダパラメータ&#34;&gt;ラムダパラメータ
&lt;/h4&gt;&lt;p&gt;ラムダのパラメータは通常の関数パラメータと同様で、そのライフサイクルはラムダ関数内に限定されます。つまり、ラムダ呼び出し時にパラメータが作成され、呼び出し終了後にはパラメータのライフサイクルも終了します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto lambda = [](int a, int b) {
    std::cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; std::endl;
};
lambda(5, 10);  // a和b在这里是lambda的参数
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;code&gt;a&lt;/code&gt;BOLD_2&lt;code&gt;b&lt;/code&gt;はラムダ式の引数であり、ラムダ式の呼び出し時に作成され、実行終了後に破棄されます。&lt;/p&gt;
&lt;h3 id=&#34;キャプチャした外部変数のライフサイクル問題&#34;&gt;キャプチャした外部変数のライフサイクル問題
&lt;/h3&gt;&lt;h4 id=&#34;ラムダ関数外でキャプチャされた変数が有効か&#34;&gt;ラムダ関数外でキャプチャされた変数が有効か。
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ラムダ関数は、呼び出し後も外部変数のコピーを保持するため、外部変数が破棄されても、そのコピー内での利用は安全です。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x 在lambda调用后修改
lambda();  // 打印10，捕获的是x的副本
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;ラムダ関数が外部変数の参照を捕捉する場合、その参照へのアクセスは外部変数のライフサイクルに依存します。外部変数がラムダ関数の実行前に破棄されると、ダングリング参照が発生し、未定義の動作につながる可能性があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x 在lambda调用前修改
lambda();  // 打印20，捕获的是x的引用
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ラムダの実行順序が確定しない場合、キャプチャされた外部変数がラムダ実行時に有効であることを保証することが重要です。&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Win11 Logitech G431 ヘッドホン ドライバ インストール</title>
        <link>https://ttf248.life/ja/p/win11-logitech-g431-headphone-driver-installation/</link>
        <pubDate>Wed, 05 Jun 2024 07:20:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/win11-logitech-g431-headphone-driver-installation/</guid>
        <description>&lt;p&gt;続きから、帰宅してGhubのアップデートがあるのを見つけて少し嬉しい。カスタマーサポートで報告されていた問題駆動が正常にロードできない問題は解決したとのことだが、色々試しても再インストールやアンインストールしても、やはり正常に使えない。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;引き続きカスタマーサポートに連絡し対応策を確認したところ、エンジニアによるリモートサポートが可能とのことでしたが、エンジニアの勤務時間と私の勤務時間が完全に重なっており、残念ながら諦めざるを得ませんでした。以前の問題切り分けで残しておいた資料を調べ、手動でのドライバインストールを試すことにします。&lt;/p&gt;
&lt;h2 id=&#34;ドライバーのインストールパッケージを取得する&#34;&gt;ドライバーのインストールパッケージを取得する
&lt;/h2&gt;&lt;p&gt;ロジクールは個別のデバイスドライバを直接提供していません。ドライバファイルをどのように入手できますか？&lt;/p&gt;
&lt;p&gt;前回のリセット時に残ったシステムイメージインストールパッケージを利用して、ローカル仮想マシンで再度システムをリセットできます。完全にクリーンな状態のシステムに、Ghubを個別にデプロイし、ヘッドホンデバイスを仮想マシンに介入させます。すると、ドライバーのパスを見つけられ、それをコピーアウトすることで完了です。&lt;/p&gt;
&lt;p&gt;関連パス：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\ProgramData\LGHUB&lt;/li&gt;
&lt;li&gt;C:\Windows\System32\DriverStore\FileRepository\logi_audio.inf_amd64_010b035044e24be4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;デバイスマネージャー&#34;&gt;デバイスマネージャー
&lt;/h2&gt;&lt;p&gt;Win11システムで手動でドライバーファイルを管理する方法を、まずは簡単に整理します。この部分について、&lt;strong&gt;重点は2つ目のパスを見つける方法です。&lt;/strong&gt; システムに標準搭載されているドライバーが2つあり、ロジクール製が1つあります。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20240605073331.png&#34; &gt;驱动管理器&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上記の画像中の2つ目のドライバは、ロジクール製です。現在のデバイスのドライバを分析し、仮想マシン内で全てのドライバパスを探します。まずlogiで始まるファイルを見つけ、ファイルの比較を行うことで、ドライバファイルを特定できます。フォルダ全体をコピーすれば、ドライバインストールパッケージを入手できます。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20240605073933.png&#34; &gt;驱动安装包&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ドライバーのインストール&#34;&gt;ドライバーのインストール
&lt;/h2&gt;&lt;p&gt;デバイスマネージャーの画面で、「ドライバーを更新」をクリックし、「私のコンピューターを参照してドライバーを選択」に進むと、以下の画面になります。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20240605074130.png&#34; &gt;驱动安装&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;もちろん、開くと普通のUSBドライバとしてしか見えますが、ディスクからインストールを選択し、パスは先ほどコピーしたフォルダを指定してください。インストール後、プルダウンメニューにロジテック独自のドライバが表示されるので、デバイスドライバを新しくインストールされたドライバに切り替えてください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20240605074208.png&#34; &gt;磁盘安装&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;人体工学デバイスドライバ&#34;&gt;人体工学デバイスドライバ
&lt;/h2&gt;&lt;p&gt;このデバイスのドライバはシステム提供のもので、感嘆符 (!) が付いていないか確認してください。もしあれば、ドライバ選択画面に入り、別の種類のドライバに一時的に切り替えた後、元のドライバに戻すと正常に戻ります。&lt;/p&gt;
&lt;h2 id=&#34;完了&#34;&gt;完了
&lt;/h2&gt;&lt;p&gt;ヘッドホンマイクの音量が通常に戻り、おなじみのイアホン機能も復帰しました。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20240605074823.png&#34; &gt;侧音&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>ロジクールヘッドホン、ドライバのインストールに失敗</title>
        <link>https://ttf248.life/ja/p/logitech-headset-driver-installation-failed/</link>
        <pubDate>Fri, 31 May 2024 21:46:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/logitech-headset-driver-installation-failed/</guid>
        <description>&lt;p&gt;もしこれらのことについて全く理解できないなら、最初から公式のカスタマーサポートに連絡していれば、こんなにも時間を費やすことはなかったでしょう。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headset-driver-installation-failed/20240531220709.png&#34;
	width=&#34;693&#34;
	height=&#34;489&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GHUB&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最近、自宅の開発用のデスクトップPCのCドライブの容量が足りなくなり、特に出番のある256GBのSSDをCドライブ用に割り当てましたが、しょっちゅう色々いじってばかりいました。上海へ引っ越して以来、様々な用事で忙しく、ようやく先週、システムを再インストールしました。&lt;/p&gt;
&lt;p&gt;システムのリセットは順調に進み、普段使うソフトウェアや開発環境の構築にも問題がありませんでした。数日後、リラックスしてゲームをしようとした時、マウスとヘッドセットのドライバがまだインストールされていないことに気づきました。これらのデバイスはどちらもロジクール製なので、ハードウェアを自動認識しドライバをインストールするGHUBというソフトウェアをダウンロードしました。&lt;/p&gt;
&lt;p&gt;しかし、予期せぬことが起こった。マウスのドライバは問題なくインストールされたものの、イヤホンのドライバは「読み込み中」の状態が続いた。最新版Windows 11とロジクルのドライバが互換性がないせいかもしれないと思い、資料を探して手動でドライバをインストールしようとしたが、やはり解決しなかった。&lt;/p&gt;
&lt;p&gt;これらのデバイスのドライバは、それぞれどのような役割を果たしているのか簡単に説明します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マウスのドライバは主に、マウスの移動速度などの機能を調整するものです。マクロ機能はあまり使いませんが、以前に記憶した設定を復元するだけで十分です。&lt;/li&gt;
&lt;li&gt;ヘッドホンのドライバは主にモニター機能に使われ、チームボイス時に自分の声をモニタリングするのに便利です。システム側のマイク設定にも同様の機能はありますが、ドライバによる実装の方が効果的です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何度か試しましたが、イヤホンのドライバーが正常に読み込まれません。今日、ようやくカスタマーサービスに問い合わせてみました。状況を確認してもらうと、最近サーバーに問題があり、ドライバーのダウンロードが異常になっているとのことでした。現在対応中であり、次回アップデートで問題が解決する見通しです。&lt;/p&gt;
&lt;p&gt;まだイヤホンドライバーの問題は解決できていないが、少なくとも原因は分かったので、早く解決することを願っている。&lt;/p&gt;
&lt;h2 id=&#34;マウスドライバー設定&#34;&gt;マウスドライバー設定
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headset-driver-installation-failed/20240531220930.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/logitech-headset-driver-installation-failed/20240531220903.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>不動産促進策、中央銀行が相次ぎ4つの措置を発表</title>
        <link>https://ttf248.life/ja/p/promote-real-estate-central-bank-four-measures/</link>
        <pubDate>Fri, 17 May 2024 20:42:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/promote-real-estate-central-bank-four-measures/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;住宅ローン金利上限撤廃&lt;/li&gt;
&lt;li&gt;明日、預貯金金利を0.25%引き下げ&lt;/li&gt;
&lt;li&gt;頭金比率が15%に引き下げ&lt;/li&gt;
&lt;li&gt;3000億円のセーフティネット住宅向け再融資&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;住宅ローン金利の抑制措置初の住宅購入者向けと2番目以降の住宅購入者向けのものを全国レベルで撤廃&#34;&gt;住宅ローン金利の抑制措置、初の住宅購入者向けと2番目以降の住宅購入者向けのものを全国レベルで撤廃
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省、自治区、直轄市及び計画単列市支店；各国有商業銀行、中国郵貯銀行、各股份制商業銀行：&lt;/p&gt;
&lt;p&gt;党中央及び国務院の決定に基づき、中国の不動産市場における需給関係の変化と、質の高い住宅に対する国民の新たな期待に対応し、不動産市場の安定的な健全な発展を促進するため、下記の通り、商業用個人住宅ローン金利政策の調整に関する事項について通知する。&lt;/p&gt;
&lt;p&gt;住宅ローン金利の抑制措置を全国レベルで撤廃する。&lt;/p&gt;
&lt;p&gt;中国人民銀行各地方支行は、市制応じの原則に基づき、各地方市場イコールレートプライシング自己規律メカニズムを指導し、管轄区域内の各都市の不動産市場の状況と地方政府の統制要請に応じて、管轄区域内各都市の住宅ローン金利の下限及びその水準（設定する場合）を自主的に決定する。&lt;/p&gt;
&lt;p&gt;金融機関は、各地方の市場金利設定自主規制メカニズムで決定された金利の下限（ある場合）に加え、当行の経営状況や顧客のリスク状況等を考慮し、各融資の具体的な金利水準を合理的に決定すること。&lt;/p&gt;
&lt;h2 id=&#34;住宅ローンにおける個人向け住宅金融貸付金利を025パーセント引き下げ&#34;&gt;住宅ローンにおける個人向け住宅金融貸付金利を0.25パーセント引き下げ
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省、自治区、直轄市及び計画単列市支店；各政策金融機関、国有商業銀行、中国郵貯銀行、各合営会社。&lt;/p&gt;
&lt;p&gt;中国人民银行决定，自2024年5月18日起，下调个人住房公积金贷款利率0.25个百分点，5年以下（含5年）和5年以上首套个人住房公积金贷款利率分别调整为2.35%和2.85%，5年以下（含5年）和5年以上第二套个人住房公积金贷款利率分别调整为不低于2.775%和3.325%。 中国人民銀行は、2024年5月18日より、個人住宅積立金ローン金利を0.25パーセントポイント引き下げ、5年以下（5年を含む）および5年超の新規住宅積立金ローンの金利をそれぞれ2.35%と2.85%、5年以下（5年を含む）および5年超の2回目以降の住宅積立金ローンの金利をそれぞれ2.775%未満、3.325%に引き下げることが決定されました。&lt;/p&gt;
&lt;h2 id=&#34;頭金の割合は15以上に調整されます&#34;&gt;頭金の割合は15％以上に調整されます。
&lt;/h2&gt;&lt;p&gt;中国人民銀行上海本部、各省、自治区、直轄市及び計画単列市支店；国家金融監督管理局各監督局；各国有商業銀行、中国郵貯銀行、各股份制商業銀行：&lt;/p&gt;
&lt;p&gt;党中央および国務院の決定に基づき、中国の不動産市場の需給関係の変化と、質の高い住宅に対する国民の新たな期待に対応し、不動産市場の安定的な健全な発展を促進するため、個人住宅ローンに関する以下の事項について通知します。&lt;/p&gt;
&lt;p&gt;住宅用融資の購入に関する住宅ローンにおいて、初めての住宅購入の場合は自己資金の最低割合が15%以下に引き下げられ、2つ目の住宅購入の場合は25%以下に引き下げられます。&lt;/p&gt;
&lt;p&gt;この原則に基づき、中国人民銀行各地方分行、国家金融監督管理総局各派出機構は、都市政府の調整要求に応じ、市ごとの状況に応じて、住宅ローンにおける初めての住宅購入者および2番目の住宅購入者のための最低頭金割合の下限を自主的に決定する。&lt;/p&gt;
&lt;h2 id=&#34;中央銀行が3000億元規模の住宅購入支援再融資枠を設ける&#34;&gt;中央銀行が3000億元規模の住宅購入支援再融資枠を設ける
&lt;/h2&gt;&lt;p&gt;午後４時、住宅都市建設部、資源省、中国人民銀行、国家金融監督管理局の４部門が国務院政策定例ブリーフィングに集まり、不動産デリバリー関連の支援策について説明した。&lt;/p&gt;
&lt;p&gt;会上、中国人民銀行副行長・陶玲氏が発表したところによると、中央銀行は3000億元の人民幣の住宅ローン保証基金を設置し、地方国営企業が合理的な価格で既に建設されている未販売の住宅を購入し、それらを組み合わせた住宅や賃貸住宅として利用することを支援する。これにより、5000億元の銀行融資が見込まれる。&lt;/p&gt;
&lt;p&gt;中央銀行によると、保障住居再融資の期間は1年間で4回まで延長可能、金利は1.75%。21家全国銀行を対象とし、都市政府が選定した地方国営企業への融資を促し、既に建設された未販売商品住宅を取得して保障住居として活用する。取得される商品住宅は、不動産企業の已竣工未販売物件に厳格に限定される。&lt;/p&gt;
&lt;p&gt;この件に関するポリシーについて、近日、中央銀行が「保障住居再融資に関する通知」を発表する予定です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>銀行マーケティング戦略と個人財務管理の調和の技</title>
        <link>https://ttf248.life/ja/p/bank-marketing-personal-finance-balance/</link>
        <pubDate>Sun, 31 Mar 2024 01:33:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bank-marketing-personal-finance-balance/</guid>
        <description>&lt;p&gt;最近、家のリフォーム工事で日常の支出が増加しています。普段からクレジットカードを利用していますが、請求サイクル内であれば返済できており、手元には十分な現金があるものの、よりはむしろマネーファンドに預けて少しでも利息を得ることを考えています。同時に、財務の安定を確保するため、自動引き落とし機能を設定し、期日までにクレジットカードの請求を確実に返済できるようにしています。&lt;/p&gt;
&lt;h2 id=&#34;銀行現状預金増加貸出減少&#34;&gt;銀行現状：預金増加、貸出減少
&lt;/h2&gt;&lt;p&gt;経済の不確実性が高まる中、人々は貯蓄を好み、消費や投資に回す傾向が強まっています。これにより銀行の預金量は増加するものの、同時に預金者への利息支払額も増大します。一方、消費と投資の減少に伴い、融資需要は低下し、銀行は貸付による利息収入を得ることが難しくなります。&lt;/p&gt;
&lt;p&gt;顧客の獲得と維持のため、銀行はより競争力のある預金金利を提供せざるを得ず、これが銀行の金利差をさらに狭める。同時に、経済成長と消費を刺激するため、中央銀行が政策金利を引き下げる可能性があり、これも銀行の貸出金利に影響を与え、結果として銀行の収益性を損なうことになる。&lt;/p&gt;
&lt;h2 id=&#34;銀行マーケティング戦略ユーザー習慣の育成&#34;&gt;銀行マーケティング戦略：ユーザー習慣の育成
&lt;/h2&gt;&lt;p&gt;最近、返済日が近づいてきました。まず中国銀行から連絡があり、無金利の1年間の分割払いサービスが提供されました。続いて、招商銀行も2.5割引の分割払いの利息を提供し、年換算すると金利はわずか1.9%です。このような特典を受け、私は両行の分割払いサービスを利用することにしました。&lt;/p&gt;
&lt;p&gt;銀行がユーザーの習慣を育てるために、本気で投資していることに気づいた。銀行の定義に従えば、私は質の高い顧客に該当するはずだ。現在の銀行の融資難という状況を踏まえると、私の分割払いの意識を育てておくことで、将来的に私が資金繰りに苦しむ可能性のある状況に備え、その際に私からより多くの利息収入を得ようとしているのだろう。結局のところ、クレジットカード明細分析の金利は決して低いわけではない。&lt;/p&gt;
&lt;p&gt;銀行は、無金利分割払いサービスや低金利分割払いの提供により、クレジットカードの利用頻度と利用額を増加させるだけでなく、顧客に好印象を与えています。この戦略転換は、市場の変化への迅速な対応と顧客ニーズに対する深い理解を示しており、資金貸付の難題を解決する一方、将来の収益基盤を築いています。&lt;/p&gt;
&lt;h2 id=&#34;個人の財務管理の重要性&#34;&gt;個人の財務管理の重要性
&lt;/h2&gt;&lt;p&gt;銀行の分割払い特典は魅力的に聞こえるかもしれませんが、ユーザーとしては過度なクレジットカード分割払いに頼ることのリスクを認識する必要があります。自身の返済能力と将来の資金ニーズを十分に考慮し、短期的な利便性のために長期的な債務問題に陥らないようにすべきです。個人金融管理の鍵は、現在のニーズと将来の計画とのバランスが重要です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;image.png&#34; &gt;招商分期账单&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>ゲームの多面性：心理発達と社会的娯楽の接合点</title>
        <link>https://ttf248.life/ja/p/games-multidimensionality-psychological-development-social-entertainment-intersection/</link>
        <pubDate>Sat, 30 Mar 2024 15:07:45 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/games-multidimensionality-psychological-development-social-entertainment-intersection/</guid>
        <description>&lt;p&gt;現代のデジタル時代において、ゲームは単なる娯楽ではなく、人々の日常生活に欠かせないものとなっています。心理学的に見ると、ゲームは様々な年齢層の人々の心理的発達において異なる役割を果たし、また、社交娯楽とも深く結びついています。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;精神状態&#34;&gt;精神状態
&lt;/h2&gt;&lt;p&gt;若者は自己探求とアイデンティティ確立の段階にあり、&lt;strong&gt;多様な役割や生き方をゲームを通して試すことで、好奇心や探究心を満たしている。&lt;/strong&gt; しかし年齢と共に興味や価値観が安定すると、ゲームはもはや彼らの目標や関心に合致しなくなることがある。&lt;/p&gt;
&lt;h2 id=&#34;社会性&#34;&gt;社会性
&lt;/h2&gt;&lt;p&gt;同時に、ゲームは社交活動の一部となり、特に若者にとってそうである。彼らはゲームを通じて友人を作り、交流を広げ、ゲームが社交の橋渡しとなっている。しかし、年齢とともに人々の交友関係は安定し、社交欲は他のより成熟した方法で満たされるかもしれないため、ゲームの社交における役割は相対的に弱まる。&lt;/p&gt;
&lt;h2 id=&#34;アピールポイント彼女連れ&#34;&gt;アピールポイント：彼女連れ
&lt;/h2&gt;&lt;p&gt;国内では、恋愛教育の不足により、幼い頃は親から勉強に専念させられ、卒業と同時に急に恋愛をさせられるという現象がよく見られる。&lt;/p&gt;
&lt;p&gt;学業や仕事の多忙、またはコミュニケーション能力不足により、現実世界で安定した感情的な関係を築けず、孤独感と注目への渇望を感じている。&lt;strong&gt;彼らは、女性プレイヤーを助けたり守ったりすることで、必要とされること、大切にされていると感じ、感情的な充足を得られる。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同時に、ゲーム内のインタラクションルールは明確で、環境もコントロール可能であり、現実生活の複雑さと不確実性とは異なり、ゲームは確実性と安心感を提供し、現実世界での交流における不確実性への恐怖を軽減する。しかしながら、ゲーム内での仮想的な充足に長期的に依存することは、現実世界で健全な感情的関係を築き、維持する能力に影響を与える可能性がある。&lt;/p&gt;
&lt;h2 id=&#34;現実のプレッシャー&#34;&gt;現実のプレッシャー
&lt;/h2&gt;&lt;p&gt;ゲームは、プレイヤーが現実のストレス、課題、または不快な感情から一時的に逃避できる仮想世界を提供します。特に、学業、家族問題、人間関係に悩む若者にとって、ゲームは慰めやリラックスを得るための手段となることがあります。&lt;/p&gt;
&lt;p&gt;ゲームは通常、プレイヤーが任務を完了したり、レベルアップしたり、敵を倒したりすることで達成感と承認を得られるように設計されている。若者は、現実世界で不足しがちな賞賛や承認の感情をゲーム内で得られるため、ゲームに没頭することがある。&lt;/p&gt;
&lt;h2 id=&#34;年齢が増ると遊ぶのが好き-ce-nest-plus&#34;&gt;年齢が増ると遊ぶのが好き Ce n&amp;rsquo;est plus
&lt;/h2&gt;&lt;p&gt;若い頃は、社会的な責任やプレッシャーが比較的少なく、ゲームに時間とエネルギーを費やす余裕があった。しかし、仕事や家庭を持つようになり社会的な責任が増えると、時間やエネルギーは貴重になり、ゲームは時間の消費として見られがちで、優先的なレジャーとはなりにくくなる。&lt;/p&gt;
&lt;p&gt;年齢を重ねるにつれて、人々の認知能力や興味の対象も変化します。若い頃はアクションが速く、グラフィックが華やかなゲームに興味を持つかもしれませんが、経験を積むにつれて、戦略性やストーリー性が高く、深みのあるゲームを好むようになるかもしれません。もし市場に出ているゲームがこれらの変化したニーズを満たさない場合、自然と興味は薄れてしまいます。&lt;/p&gt;</description>
        </item>
        <item>
        <title>人民元相場が大きく変動し、7.26を突破しました。</title>
        <link>https://ttf248.life/ja/p/renminbi-exchange-rate-volatility/</link>
        <pubDate>Sat, 23 Mar 2024 00:31:13 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/renminbi-exchange-rate-volatility/</guid>
        <description>&lt;p&gt;人民元の為替レートの変動と市場全体の下げは、世界各中央銀行の動向、スイス国立銀行の予想外な利下げ、米国経済指標の状況、そしてインフレや利下げに関する市場の見通しの調整などが複合的に影響し、為替市場とA株市場に結果として生じたものと考えられる。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;提示されたリンクの内容によると、2024年3月22日に人民元相場が大きく変動しました。詳細はこちらです：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;美元兑离岸人民币汇率突破&lt;/strong&gt;: 円相場は、本日午後の取引で下落し、ドル/人民元は7.24を割り込み一時7.24926まで、ドル/CNHも7.22を割り込み一時7.22360まで下落。ともに2023年11月17日以来の高値を更新した。執筆時点で、ドル/人民元は7.26を突破し、7.2639まで安化した後も下げ止まりの兆候が見られない。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3月22日、中央銀行が人民元／ドルの中間レートを7.1004と発表、62ベーシックポイントで調整し、調整幅が拡大した。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;複数の要因により、上場株式の主要3指数の全てが下落し始め、いずれも1%以上の下げ幅となりました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;スイス国立銀行が予想外に利下げを行ったことがドルを押し上げ、米国の堅調な経済とインフレの粘り強さから利上げ見送りも懸念されるなか、ドル指数は上昇した。香港のある投資機関のベテラン外国為替トレーダーがそう語った。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;今週は、世界市場にとって「主要中央銀行週間」であり、米国、日本、英国、オーストラリアなど複数の国の中銀がそれぞれ利息決定を発表します。スイス国立銀行の意外な利下げは、パンデミック以降のG10カ国中銀としては初の動きとなり、市場の均衡を崩しました。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;光大銀行金融市場部研究員の周茂華氏は、最近人民元が変動しているにもかかわらず、その幅は全体としてドルなどの主要通貨よりも大幅に小さく、短期的な変動は今年の人民元の安定的な上昇傾向を変えないだろうと述べた。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>Python辞書にカスタムオブジェクトを格納する際の、参照とdeepcopyの重要性</title>
        <link>https://ttf248.life/ja/p/python-dictionary-custom-objects-reference-vs-deepcopy/</link>
        <pubDate>Fri, 22 Mar 2024 01:08:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/python-dictionary-custom-objects-reference-vs-deepcopy/</guid>
        <description>&lt;p&gt;Pythonプログラミングにおいて、辞書は非常に強力なデータ構造であり、キーと値を関連付けて、効率的にデータを検索および操作できます。辞書にカスタムオブジェクトを格納しようとすると、重要な概念に遭遇します。Pythonにおけるオブジェクトの代入は、実際にはオブジェクト自体の深いコピーではなく、参照による代入です。つまり、カスタムオブジェクトを辞書に格納する場合、辞書にはそのオブジェクトへの参照が格納され、オブジェクトの新しいコピーではありません。&lt;/p&gt;
&lt;h2 id=&#34;カスタムオブジェクトの保存に関する基本的な例&#34;&gt;カスタムオブジェクトの保存に関する基本的な例
&lt;/h2&gt;&lt;p&gt;仮に、単純な &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; クラスがあるとします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# 创建一个 Person 对象
p1 = Person(&amp;quot;Alice&amp;quot;, 30)

# 将对象存储到字典中
people_dict = {}
people_dict[&amp;quot;alice&amp;quot;] = p1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 字典现在包含一个键为 __INLINE_CODE_1__BOLD_6&lt;code&gt;Person&lt;/code&gt;BOLD_7&lt;code&gt;p1&lt;/code&gt; 对象的引用。如果我们修改 &lt;code&gt;p1&lt;/code&gt; の属性：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1.age = 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;辞書を通してオブジェクトにアクセスすると、その年齢も更新されていることがわかります。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(people_dict[&amp;quot;alice&amp;quot;].age)  # 输出：31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;辞書に格納されているのは、&lt;code&gt;Person&lt;/code&gt;オブジェクトの独立したコピーではなく、同じメモリのアドレスを指す参照です。&lt;/p&gt;
&lt;h2 id=&#34;深いコピーと浅いコピーの違い&#34;&gt;深いコピーと浅いコピーの違い
&lt;/h2&gt;&lt;p&gt;ネストされたデータ構造やカスタムオブジェクトを扱う場合、この参照の挙動により予期せぬ結果が生じる可能性がある。例えば、カスタムオブジェクトに可変型の属性（リストや別のカスタムオブジェクトなど）が含まれている場合、そのようなオブジェクトを直接辞書に格納し、それを変更すると、辞書を通して取得したオブジェクトも影響を受ける。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Address:
    def __init__(self, street, city):
        self.street = street
        self.city = city

class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

address = Address(&amp;quot;Main St.&amp;quot;, &amp;quot;Springfield&amp;quot;)
p1 = Person(&amp;quot;Bob&amp;quot;, 40, address)
people_dict[&amp;quot;bob&amp;quot;] = p1

# 修改原始地址对象
address.city = &amp;quot;Shelbyville&amp;quot;

# 字典中的人的地址也变了
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 输出：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;このような共有状態がもたらす問題を避けるために、辞書にオブジェクトの完全なコピーを格納し、参照ではなく、ということが必要な場合があります。Python は、この目的を達成するための &lt;strong&gt;copy&lt;/strong&gt;() 関数を提供します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import copy

# 使用深拷贝存储对象
people_dict[&amp;quot;bob_deepcopy&amp;quot;] = copy.deepcopy(p1)

# 此时即使修改原始地址对象，深拷贝的对象不会受影响
address.city = &amp;quot;Capital City&amp;quot;
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 输出：Capital City
print(people_dict[&amp;quot;bob_deepcopy&amp;quot;].address.city)  # 输出：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要するに、Pythonで辞書を使ってカスタムオブジェクトを保存する場合、デフォルトではオブジェクトへの参照が格納されることに注意してください。独立した状態を維持する必要がある場合は、予期せぬデータ変更を防ぐために、深コピーを使用してください。&lt;/p&gt;</description>
        </item>
        <item>
        <title>澱粉腸と露店：資本の報道影響力</title>
        <link>https://ttf248.life/ja/p/sausages-and-street-vendors-capital-news-influence/</link>
        <pubDate>Mon, 18 Mar 2024 00:31:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/sausages-and-street-vendors-capital-news-influence/</guid>
        <description>&lt;p&gt;実際、315は鶏ガラ泥問題を報道していない。この問題は、中央電視台の3・15ガラ番組での公式暴露と同時期に発生した他の食糧安全に関するホットな話題を混同している。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供していただければ日本語に翻訳します&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;/h2&gt;&lt;p&gt;315晩会では計9つのメーカーが挙げられたが、ソーセージは含まれていなかった。しかし今となっては、ノミネートされた大手ブランドの話題性はなく、代わりに国民的な人気（全国各地の屋台街に基本的にはあり、おそらく店舗数もトップクラス）のスナックであるソーセージが取り上げられ、まるでソーセージがスケープゴートのように扱われている印象だ。オンラインニュースソースを確認したところ、央広網が3.15の日にハムに関する調査報道をしていたが、それは単にいくつかのメーカーの成分を列挙したものであり、主要なソーセージ製造メーカーではないメーカーも含まれていた。成分には特に問題は見当たらず、B記者はその情報を工場従業員から「鶏骨泥（チキンボーンペースト）で鶏肉の代わりに使用していることがある」という聞き取り情報をもとに、淘宝（タオバオ）でペットフード店に鶏骨泥を販売している業者に「人間は食べられるか？」と尋ねた。これは明らかに馬鹿げた質問だろう。ペットフード販売者は人間に食べさせると言わないはずだ。その後、ソーセージに鶏骨泥が含まれているというデマが広がり、「鶏骨泥は人間には食べられない」という噂になった。&lt;/p&gt;
&lt;p&gt;現在、多くの工場が閉鎖の危機にあり、全国数十万の露店商人も商品を抱えても商売にならないという状況に直面しているようだ。&lt;/p&gt;
&lt;h2 id=&#34;現実世界&#34;&gt;現実世界
&lt;/h2&gt;&lt;p&gt;湘商報17日の報道によると、3月16日、河南省三門峡で「澱粉腸の崩壊事件」の翌日、ある女性が澱粉腸を売っていたが、2時間経っても客がなく、結局自分で黙って食べていた。撮影者は普段澱粉腸を4、5本は食べることが多いが、鶏骨泥が入っていると知ってからは絶対に食べないという。彼はその日の出来事が報道された後、誰かが澱粉腸を買うのかどうか興味があったが、結果的に2時間で一根も売れなかった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;おばあさんは、澱粉腸の件なんて知らないわ。ただ今日から急に誰もソーセージを買ってくれなくなっただけなの。&lt;/li&gt;
&lt;li&gt;おばあさんは何も間違っていない。ただ、家族を養うためだけに働いているだけで、製品に問題があるかどうかも、品質がどうかすらも知らないし、骨泥とは何かさえ知らない。彼女たちはインターネットを知らず、単なる底辺の人々として生きるために必死になっているだけだ。&lt;/li&gt;
&lt;li&gt;澱粉腸は崩壊した、しかしその代金を払うのは、一人ひとりの底辺で働く人々だ。これは苦しい過程である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供していただければ日本語に翻訳します-1&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;/h2&gt;&lt;p&gt;数年前の午後、北へ出てきた同僚と一緒に昼食を食べに行くと、焼きソーセージや鉄板ステーキを売る屋台の前を通りました。&lt;/p&gt;
&lt;p&gt;こんなブラックテクノロジーのソーセージやロース肉を食べるなんて、まだあるんですね？ 最後に澱粉入りソーセージを食べたのは大体10年以上前だったような。&lt;/p&gt;
&lt;p&gt;同僚が少し躊躇して、「きっと大都市で暮らしているからでしょうね。実のところ、うちの郷では、榨菜（ザーサイ）、インスタントラーメン、パテ缶が日常的な食べ物です。」&lt;/p&gt;
&lt;p&gt;学校の頃、満点を取らないと、父が道中で一度だけ焼きソーセージを買ってくれた。衛生の問題ではないんだ、結局のところ焼きソーセージは1.5元だし、それよりは2キロの野菜が買えるからね。&lt;/p&gt;
&lt;p&gt;そういった、インスタントラーメンや炭酸飲料、スナック菓子を「ジャンクフード」と呼ぶという話は、北京で学生になった後に初めて聞きました。&lt;/p&gt;
&lt;p&gt;無意識のうちに傲慢な言葉を口にしたことに気づき、黙って何も言わなくなった。しかし、この出来事は深く心に残っている。&lt;/p&gt;
&lt;p&gt;実際、これが中国の大多数の人々の日常です。&lt;/p&gt;
&lt;p&gt;彼らの生活には、高級な「地中海式食事」「緑のオーガニック野菜」「遺伝子組み換えでない大豆」といったものはなかった。彼らが気にかけるのは、安くて美味しく食べられる野菜や肉、お菓子が手に入るかどうかだけだった。家族みんなで、わずかな幸せな時間を楽しむことだった。&lt;/p&gt;
&lt;p&gt;棚に並んでいるものが、どのような成分でできているのか、彼らの健康を害する可能性はないか、何か奇妙な化学物質が含まれていないか。&lt;/p&gt;
&lt;p&gt;そもそも、彼らが関わったり理解したりするべきことではない。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;見れば見るほど、そうではないことがわかる。&lt;/p&gt;
&lt;p&gt;市場の電子秤やガソリンスタンドの給油ポンプには、ハイテク改造基盤が隠されており、動画を撮影するには危険を冒す必要があり、初めて規制当局が気づいて対処する。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;テレビチャンネルや空港の広告で大々的に宣伝されていた「健康酒」が、誰かが内部事情を暴露した動画によって一晩にして緊急回収され、市民たちの目の前から姿を消した。&lt;/p&gt;
&lt;p&gt;年一回の315、毎回同じように五六個の商品を抽選で外して売却するのか。それで十分だろうか？&lt;/p&gt;
&lt;p&gt;いったい、すでに購入・利用した顧客に、誰に再アプローチするのだろうか。&lt;/p&gt;</description>
        </item>
        <item>
        <title>新しく設置したギガ光ファイバー、なぜ速度測定では100メガにしか見えないのか？</title>
        <link>https://ttf248.life/ja/p/new-gigabit-fiber-slow-speed/</link>
        <pubDate>Mon, 18 Mar 2024 00:29:02 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/new-gigabit-fiber-slow-speed/</guid>
        <description>&lt;p&gt;家庭のネットワークを光速のようにしたいですか？ 鍵は、LANケーブルの選択、ONU（光回線終端装置）とルーターの設定、そして些細なことへの注意です。 このブログでは、カテゴリー6 LANケーブルでギガビットネットワークを構築する方法、簡単なデバイスチェックと設定でネットワーク速度を最大限に引き出す方法をご紹介します。 さあ、一緒に探求して、家庭のインターネット回線を加速させましょう！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;image.png&#34; &gt;手动修复&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第1章ネットワーク伝送媒体の徹底分析&#34;&gt;第1章：ネットワーク伝送媒体の徹底分析
&lt;/h2&gt;&lt;p&gt;ギガビットネットワーク接続を実現する上で、情報を高速伝送する媒体であるLANケーブルは極めて重要な役割を果たします。以下に、カテゴリー5、カテゴリー6、カテゴリー7のLANケーブルについて詳しく解説します。&lt;/p&gt;
&lt;h3 id=&#34;大声で叫ぶ&#34;&gt;大声で叫ぶ。
&lt;/h3&gt;&lt;p&gt;5種類のLANケーブル（CAT5とも呼ばれる）は、比較的初期に普及したツイストペアケーブルの一種で、各芯線が精密な螺旋構造によって設計され、クロストークを低減しています。主に10/100Mbpsの高速イーサネットで使用され、最大伝送周波数はおよそ100MHzです。過去には広く利用されていましたが、現在のギガビット以上の高速通信ニーズに対しては、物理的な限界から5種類のLANケーブルでは要求を満たすことができません。&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;
&lt;/h3&gt;&lt;p&gt;技術の発展に伴い、六類ケーブルが登場しました。五類ケーブルと比較して、六類ケーブルはより厳格な製造基準と高度な構造設計を採用しており、耐干渉性と伝送効率が大幅に向上しています。1Gbpsまでのデータ転送速度をサポートし、理想的な条件下では100メートルの伝送距離を実現します。これはまさにギガビットネットワークのアクセスニーズに合致しています。&lt;/p&gt;
&lt;h3 id=&#34;３&#34;&gt;３．
&lt;/h3&gt;&lt;p&gt;カテゴリー7のケーブルは、現在のツイストペア技術における最高水準を示しています。伝送速度が飛躍的に向上しており、理論上最大10Gbpsの超高速通信をサポートするだけでなく、各線対間のシールドと全体の外側のシールドを含む完全なシールドシステムを採用し、外部電磁干渉や近接クロストークを大幅に低減することで、データ転送の安定性と正確性を確保しています。ただし、カテゴリー7ケーブルは主に将来の10ギガビットイーサネットや特定の高要求な環境で使用されます。&lt;/p&gt;
&lt;p&gt;ギガホームネットワーク環境において、ギガファイバーの潜在能力を最大限に引き出すためには、カテゴリー6ケーブルを選択することが最も経済的かつ効率的な選択です。同時に、すべての接続ケーブルの品質が適切であることを確認し、標準的な配線方法を厳守することも、ネットワーク性能を確保する上で重要な要素となります。&lt;/p&gt;
&lt;h2 id=&#34;第2章ネットワークの中枢機器光回線終端装置ルーターlanポート帯域の影響を詳細に調査&#34;&gt;第2章：ネットワークの中枢機器（光回線終端装置、ルーターLANポート帯域）の影響を詳細に調査
&lt;/h2&gt;&lt;h3 id=&#34;光猫とlanポート帯域幅の重要性&#34;&gt;光猫とLANポート帯域幅の重要性
&lt;/h3&gt;&lt;p&gt;光ネコ（こうねこ）、正式名称は光ファイバーモデムであり、家庭ブロードバンド接続の中核機器です。光ファイバー内の光信号をデジタル信号に変換し、家庭内ネットワーク機器が利用できるようにする機能があります。ギガ光ファイバーユーザーにとって、光ネコがギガ伝送に対応しているかどうかが特に重要になります。光ネコのWANポートがギガビットに対応していない場合、戸別線路の光ファイバー速度がどれだけ高くても、このボトルネックによって100Mbps以内に制限されてしまいます。同様に、光ネコのLANポートもギガビット出力能力を備えている必要があり、そうでないと接続されたルーターやその他のデバイスは真のギガビット速度を得ることができません。&lt;/p&gt;
&lt;h3 id=&#34;ルーターlanポートの帯域幅の役割&#34;&gt;ルーターLANポートの帯域幅の役割
&lt;/h3&gt;&lt;p&gt;ルーターのLANポートは、受信したデータを各端末デバイスに配信する役割を担います。ルーターのLANポートが100Mbpsの場合、他の機器の設定に関わらず、100Mbpsの速度でしかローカルネットワーク通信を実現できません。そのため、ギガホームネットワークを構築する際は、ルーターのWANポートがギガデータを受信できること、そしてLANポートもギガレベルのデータ出力能力を提供できるようにすることが重要です。そうすることで、家庭内のすべてのスマートデバイスが高速ネットワークが生み出す快適な体験を享受できます。&lt;/p&gt;
&lt;p&gt;さらに注意すべき点として、一部の古いまたは低価格帯のルーターにはLANポートの自動速度ネゴシエーション機能が存在する場合があります。そのため、ルーター自体がギガビットに対応していても、ケーブルやデバイスの互換性などの理由で100Mbpsモードに降格することがあります。したがって、正しいルーター設定を行い、強制ギガビットモードを有効にし、ギガビットスイッチまたは直接接続されたデバイスと組み合わせることが、全ギガビットネットワークを実現するための重要なステップとなります。&lt;/p&gt;
&lt;p&gt;アップグレード後は、必ずギガ光ファイバー対応のONUとルーターに交換し、全ての機器インターフェースがギガビットに対応していることを確認してください。&lt;/p&gt;
&lt;h2 id=&#34;第3章隠された謎一本途切れられた細い線がテラビットネットワークにどう影響するか&#34;&gt;第3章：隠された謎—一本途切れられた細い線がテラビットネットワークにどう影響するか
&lt;/h2&gt;&lt;h3 id=&#34;サブスレッドの障害とネットワークパフォーマンスの低下&#34;&gt;サブスレッドの障害とネットワークパフォーマンスの低下
&lt;/h3&gt;&lt;p&gt;測速中はネットワーク接続は常に良好で、明らかな断線は見られませんでした。新しく導入された回線のため、配電盤内が整理整頓されておらず、光モデムのケーブルや電源コンセントの位置を調整している際に、たまたまギガビットに達することがありました。&lt;/p&gt;
&lt;p&gt;先行きの資料に基づき、LANケーブルの型番やONUのLAN口速度を分析・検証した結果、原因はLANケーブル内部の茶色のサブワイヤーが断線していたことが判明しました。&lt;/p&gt;
&lt;p&gt;設置の際に、水晶頭を取り付ける職人がケーブルを少し強く引っ張りすぎたことが原因で、内部の細い線が半分ほど断線していました。その後、光回線のモデムの位置を頻繁に移動させた結果、完全に断線しました。&lt;/p&gt;
&lt;h3 id=&#34;6種類のlanケーブルの8本の線の機能解説&#34;&gt;6種類のLANケーブルの8本の線の機能解説
&lt;/h3&gt;&lt;p&gt;六類網線は、TIA/EIA-568-B規格に準拠し、8芯のツイストペアケーブルで構成され、カラーコードは以下の通りです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;白橙 / 橙&lt;/li&gt;
&lt;li&gt;白緑 / 緑&lt;/li&gt;
&lt;li&gt;藍 / 青&lt;/li&gt;
&lt;li&gt;茶色 / 濃茶&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ギガビットイーサネット（1000BASE-T）規格において、この8本のケーブルのうち4対が同時に動作し、それぞれ以下の役割を担います。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白橙と橙のこのペアの線（1&amp;amp;2）は、データ送信（Tx+/-）に使用されます。&lt;/li&gt;
&lt;li&gt;白緑と緑のペア（3&amp;amp;6）は、データ受信（Rx+/-）に使用されます。&lt;/li&gt;
&lt;li&gt;白藍と青のペア（4&amp;amp;5）および白茶と茶のペア（7&amp;amp;8）は、ギガビットイーサネットでは通常はメインで使用されませんが、一部の高機能アプリケーション（例えば、特定のPoE給電や将来的な技術拡張）において有効になる可能性があります。一方、従来の100Mbpsネットワークでは、1, 2, 3, 6の4本の線を使用するだけで十分です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;切断されたファイバーがネットワーク速度に与える影響&#34;&gt;切断されたファイバーがネットワーク速度に与える影響
&lt;/h3&gt;&lt;p&gt;上記の状況において、茶色のサブワイヤー（茶線または茶白線）が切れると、理論上はギガビットネットワーク環境では速度低下が生じます。なぜなら、ギガビットネットワークは全4対の線が双方向通信を行うことで高速を実現しているからです。しかしながら、家庭用ネットワーク機器にはオートネゴシエーション機能があり、ケーブルに問題が発生した場合、正常動作する低速モード、すなわち100Mbpsモードに切り替わります。これにより、サブワイヤーが切れても接続は維持され、100Mbpsで動作することが説明できます。&lt;/p&gt;
&lt;p&gt;要するに、単一の茶色のサブファイバーが切断されても、100Gbpsネットワークの基本的な動作には影響しませんが、ギガビットネットワーク環境下では、それが速度を制限する重要な要因となり得ます。徹底的な診断と修復を行うことで初めて、ギガ光ファイバーの潜在能力を最大限に発揮できます。これは、同様の問題に遭遇した場合、一見すると接続に影響がないように見える小さな故障であっても、ネットワークインフラストラクチャの潜在的な問題を無視してはならないことを示唆しています。そうした問題が高速ネットワーク体験の隠れた障害となる可能性があるからです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>WPFのUIスレッドとフリーズ問題、およびその解決策</title>
        <link>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-issues-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-ui-thread-and-freezing-issues-solutions/</guid>
        <description>&lt;p&gt;デスクトップアプリケーションを開発する際、特にWindows Presentation Foundation (WPF) フレームワークを使用してリッチクライアントアプリケーションを構築する場合、ユーザーインターフェース（UI）スレッドを正しく処理することは、アプリケーションの滑らかさと応答性を保証するために不可欠です。UI スレッド、別名メインスレッドは、ウィンドウやコントロールイベントの処理、レイアウト計算、およびインターフェースの描画を担当するコアスレッドです。UI 要素とのインタラクションに関わる操作はすべて UI スレッド上で実行されるべきであり、これは WPF および他のほとんどの GUI フレームワークが遵守する基本原則です。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドとは何ですか&#34;&gt;UIスレッドとは何ですか？
&lt;/h2&gt;&lt;p&gt;WPFアプリケーションの起動時にOSによって作成され、初期化されるUIスレッドは、アプリケーションのメインウィンドウを管理します。このスレッドのみがUIコンポーネントの状態に直接アクセスし、変更できます。ボタンクリックやテキストボックスへの入力、ウィンドウサイズ変更など、ユーザーインタラクションによって発生するすべてのイベントはこのスレッド上で処理されます。また、WPFの依存プロパティシステム、データバインディングメカニズム、およびレイアウトロジックもUIスレッド上で同期的に実行されます。&lt;/p&gt;
&lt;h2 id=&#34;動作不良とその原因&#34;&gt;動作不良とその原因
&lt;/h2&gt;&lt;p&gt;UIスレッドが長時間占有またはブロックされると、例えば時間のかかる計算処理や大量のデータ読み込み、データベースクエリなどのI/O集約型タスクを実行すると、UIスレッドはユーザーからのインタラクション要求にタイムリーに応答できなくなり、結果として画面がフリーズ（応答なし）したように見える。これにより、アプリケーションの遅延や不具合が顕著になり、最悪の場合「Application Not Responding」（ANR）警告が表示されることがある。&lt;/p&gt;
&lt;h2 id=&#34;uiスレッドの2つの基本ルール&#34;&gt;UIスレッドの2つの基本ルール
&lt;/h2&gt;&lt;p&gt;上記のような状況を避けるため、WPF開発者は以下の2つの重要なルールに従うべきです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UIスレッドがユーザーの入力にタイムリーに応答し、画面の変化をレンダリングできるように、UIスレッドをブロックする可能性のある操作は、可能な限りバックグラウンドスレッドで実行する必要があります。&lt;/li&gt;
&lt;li&gt;WPFのセキュリティ機構により、UI要素の変更はUIスレッドでのみ許可されます。他のスレッドから直接UIの状態を変更しようとすると例外が発生します。したがって、バックグラウンドスレッドで計算やデータ準備が完了した場合でも、適切なクロススレッド通信メカニズムを通じて結果をUIに表示する必要があります。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;非同期プログラミングとスレッドセーフな更新&#34;&gt;非同期プログラミングとスレッドセーフな更新
&lt;/h2&gt;&lt;p&gt;UIの応答性を維持しつつ、時間のかかるタスクを実行するために、WPFは開発者がこの目標を達成するのを支援するための様々な非同期プログラミングモデルとツールを提供します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WPFのDispatcherクラスを使用すると、タスクをUIスレッドのタスクキューに投入して実行できます。バックグラウンドスレッドから安全にUIを更新するために、&lt;code&gt;Dispatcher.Invoke&lt;/code&gt;或&lt;code&gt;Dispatcher.BeginInvoke&lt;/code&gt;メソッドを利用できます。&lt;/li&gt;
&lt;li&gt;C#の非同期機能を利用することで、非同期メソッドを記述し、その中で__INLINE_CODE_0__キーワードを使用してバックグラウンドタスク完了を待機し、完了後に自動的にUIスレッドで後続のUI更新コードを実行できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事例&#34;&gt;事例
&lt;/h2&gt;&lt;h3 id=&#34;__inline_code_0__メソッドでuiを更新する&#34;&gt;__INLINE_CODE_0__メソッドでUIを更新する。
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // 假设这是一个耗时操作
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // 这里是模拟一个耗时计算的方法
        
        // 当耗时操作完成后，在UI线程上更新UI
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 模拟耗时操作
    Thread.Sleep(5000);
    return &amp;quot;已完成&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;使用__斜体_3__粗体_2__斜体_4__&#34;&gt;使用__斜体_3__粗体_2__斜体_4__
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // 防止用户重复点击

    try
    {
        // 开启后台任务
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // 在后台任务完成后，自动切换回UI线程更新UI
        LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;发生错误: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // 重新启用按钮
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>GCCバージョンアップによりプログラムがクラッシュ：非標準コードの潜在的な問題</title>
        <link>https://ttf248.life/ja/p/upgrade-gcc-version-causes-program-crash-code-irregularities/</link>
        <pubDate>Sun, 10 Mar 2024 23:19:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/upgrade-gcc-version-causes-program-crash-code-irregularities/</guid>
        <description>&lt;p&gt;同一のビジネスコードの場合、プログラムは CentOS 7 環境で正常にコンパイルされ実行されたが、CentOS 8 に切り替えて更新版 GCC でコンパイルするとクラッシュした。問題は &lt;strong&gt;Release 模式&lt;/strong&gt; の場合にのみ発生し、&lt;strong&gt;Debug 模式&lt;/strong&gt; では全く問題なかった。今回初めてこのような事態に遭遇したが、3 日間の調査の結果、ようやく原因を突き止めた。&lt;/p&gt;
&lt;h3 id=&#34;問題特定&#34;&gt;問題特定
&lt;/h3&gt;&lt;p&gt;徹底的な調査の結果、問題の根本原因は &lt;strong&gt;函数缺少返回值&lt;/strong&gt; にありました。リリースモードでは、GCC の新バージョンがより多くの最適化を行うため、元々明示的な戻り値を持たない関数が実行中に予期せぬ動作を起こし、クラッシュを引き起こしました。結論として、&lt;strong&gt;编译器的警告不容忽视，尤其是在老项目中，部分警告可能被无视，但也应当避免屏蔽所有警告&lt;/strong&gt; です。&lt;/p&gt;
&lt;h3 id=&#34;環境説明&#34;&gt;環境説明
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
Copyright © 2015 Free Software Foundation, Inc.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21)
Copyright (C) 2018 Free Software Foundation, Inc.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;クラッシュ現象&#34;&gt;クラッシュ現象
&lt;/h3&gt;&lt;p&gt;プログラムクラッシュのスタックを解析した結果、以下のスタック情報が見られました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[New LWP 1385902]
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib64/libthread_db.so.1&amp;quot;.
Core was generated by `./pstack_main`.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007ffe894b4420 in ?? ()
(gdb) bt
#0  0x00007ffe894b4420 in ?? ()
#1  0x00000000004008e9 in main ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このスタックは直感的ではなく、クラッシュした関数のスタック情報が &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; と表示されているため、問題の特定がより複雑になっています。&lt;/p&gt;
&lt;h3 id=&#34;コード例&#34;&gt;コード例
&lt;/h3&gt;&lt;p&gt;問題をより良く理解するために、クラッシュを再現する最小限のコード例を以下に示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int test() {
    std::cout &amp;lt;&amp;lt; &amp;quot;1&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    test();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのコード内の &lt;code&gt;test()&lt;/code&gt; 函数显然没有显式返回一个值，而它的返回类型是 &lt;code&gt;int&lt;/code&gt;。根据 C++ 规范，当一个函数声明为 &lt;strong&gt;INLINE_CODE_2&lt;/strong&gt; 型では、必ず値を返す必要がある。さもなくば、未定義の動作を引き起こす可能性がある。&lt;/p&gt;
&lt;h3 id=&#34;コンパイル警告&#34;&gt;コンパイル警告
&lt;/h3&gt;&lt;p&gt;プロジェクトにおいて、CMakeスクリプトが多くのコンパイル時の警告を抑制しており、その中には以下の警告が含まれています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/root/pstack/main.cpp: In function ‘int test()’:
/root/pstack/main.cpp:7:1: warning: no return statement in function returning non-void [-Wreturn-type]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この警告は、__INLINE_CODE_0__関数が値を返さないことを示しており、これが問題の根本原因です。高バージョンGCC（例えば8.5.0）は、コードを最適化する際に、このような未定義の振る舞いに対して不安定な最適化を行い、プログラムをクラッシュさせる可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;アセンブリコードの差異&#34;&gt;アセンブリコードの差異
&lt;/h3&gt;&lt;p&gt;GCCコンパイラ最適化の差異を説明するため、異なるバージョンのGCCが生成するアセンブリコードを比較しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;アセンブリコードは冗長であり、標準出力ストリーム（&lt;code&gt;std::cout&lt;/code&gt;）的处理逻辑。这表明编译器进行了更保守的优化，未对 &lt;code&gt;test()&lt;/code&gt;関数における戻り値の欠落問題など）に対する過剰な最適化が含まれているため、クラッシュを回避できた可能性がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しいGCCでは、より多くの最適化が行われ、コード量が削減されました。しかし、この最適化により、戻り値がない関数の実行時に動作が不安定になり、プログラムがクラッシュする可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論
&lt;/h3&gt;&lt;p&gt;今回の問題の調査を通じて、C++において、&lt;strong&gt;函数返回值必须明确&lt;/strong&gt;（特に__INLINE_CODE_0__ 时，必须提供一个返回值。对于使用较旧版本编译器的项目，升级到新版本的 GCC 时，可能会遇到更多的优化和更严格的警告机制。因此，我们建议在编译时 **関数宣言の場合）、すべての警告を無視するのではなく、選択的に処理することが重要であると深く認識しました。特に、関数戻り値や型の一致など、一般的な問題には注意が必要です。&lt;/p&gt;
&lt;p&gt;最終、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 関数に返り値を追加することで問題が解決し、プログラムは正常に動作するようになった。&lt;/p&gt;</description>
        </item>
        <item>
        <title>VMware仮想マシンのCPUリソース使用量異常</title>
        <link>https://ttf248.life/ja/p/vmware-virtual-machine-cpu-resource-usage-anomaly/</link>
        <pubDate>Sun, 10 Mar 2024 22:14:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/vmware-virtual-machine-cpu-resource-usage-anomaly/</guid>
        <description>&lt;p&gt;バックグラウンド：ローカルマシンにWindows版の業務システムがデプロイされており、CPUリソース使用率は約5%。VMwareにインストールされたCentOS8上にLinux版業務システムをデプロイしたところ、リソース使用量が異常です。&lt;/p&gt;
&lt;h2 id=&#34;問題説明&#34;&gt;問題説明
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ホストOS：Windows 10 Enterprise&lt;/li&gt;
&lt;li&gt;vmware：17.5&lt;/li&gt;
&lt;li&gt;仮想マシン：CentOS 8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仮想マシンリソースの割り当ては__INLINE_CODE_0__です。ビジネスシステムを起動します。ビジネスシステムは仮想マシンLinuxにデプロイされており、仮想マシン内部のtopコマンドでシステムリソースの使用状況を確認したところ、CPU使用率は高くありませんでした。一方、外側のWindowsシステムではタスクマネージャーでCPUリソースの使用率が非常に高いことが確認でき、プロセスを確認するとVMwareプロセスがCPUリソースを大量に消費していました。&lt;/p&gt;
&lt;p&gt;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+
|         Windows           |
|                           |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|   |      VMware        |  |
|   |      Program       |  |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|                           |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/p&gt;
&lt;h2 id=&#34;知識点&#34;&gt;知識点
&lt;/h2&gt;&lt;p&gt;この問題の切り分けは順調に進まず、原因が通常のビジネスシステムではなく、仮想マシン自体の問題にあることが判明しました。いかにして発想を通常のビジネスコードからシステム負荷へ、そして負荷データの異常からソフト割り込みへと転換し、最終的に何がVMwareソフト割り込みの効率に影響を与えるかを特定するか？ 本稿ではまず各知識点を解説し、最後に解決策を示します。&lt;/p&gt;
&lt;h3 id=&#34;hyper-v&#34;&gt;hyper-v
&lt;/h3&gt;&lt;p&gt;Windows オペレーティングシステムの仮想化技術は大きな変革を遂げました。Microsoft が WSL を初めてリリースした際、Hyper-V サービスを有効にすると VMware 仮想マシンが同時に使用できませんでした。しかし、その後のバージョンで VMware は Hyper-V サービスとの互換性が得られました。&lt;/p&gt;
&lt;h3 id=&#34;システム負荷&#34;&gt;システム負荷
&lt;/h3&gt;&lt;p&gt;Linuxシステムにおいて、「ロード」（load）とは、実行中または実行待ちのプロセスの数を指します。通常、ロードは1分間、5分間、および15分間の実行キュー内の平均プロセス数を示す3つの数字で表されます。これらの数値は、「uptime」コマンドや「top」コマンドを実行することで確認できます。&lt;/p&gt;
&lt;p&gt;具体的には、この3つの数字はそれぞれ以下のものを表します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;過去1分間の実行キューの平均プロセス数。&lt;/li&gt;
&lt;li&gt;過去5分間の実行キューの平均プロセス数。&lt;/li&gt;
&lt;li&gt;過去15分間の実行キューの平均プロセス数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;負荷とは、システム内で実行待ちのプロセス数を指します。この数がシステムの論理 CPU 数よりも高い場合、システム負荷が高いことを示し、多くのプロセスがプロセッサリソースを待機していることを意味します。これにより、システムが遅くなったり、応答しなくなったりする可能性があります。その程度やシステムの構成・性能によって異なります。&lt;/p&gt;
&lt;p&gt;理想的には、負荷はシステムの論理 CPU 数範囲内に維持し、システム性能を最適化することが望ましいです。もし負荷が継続的に CPU 数を超えた場合、システム内のプロセスを分析し、高負荷の原因を特定した上で、システムリソースの割り当て調整やプロセスの実行方法の最適化などの対策を講じる必要があるかもしれません。&lt;/p&gt;
&lt;h3 id=&#34;負荷解析-mpstat&#34;&gt;負荷解析 mpstat
&lt;/h3&gt;&lt;p&gt;負荷解析の手順：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 sysstat&lt;/strong&gt;:
もし、あなたのシステムに &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; がインストールされていない場合は、システムに適したパッケージ管理ツールでインストールしてください。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行 mpstat&lt;/strong&gt;:
使用リソースの使用状況を表示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;01:32:33 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
01:32:35 PM  all    0.00    0.00    0.26    0.00    3.73    0.26    0.00    0.00    0.00   95.76
01:32:35 PM    0    0.00    0.00    0.51    0.00    3.57    0.00    0.00    0.00    0.00   95.92
01:32:35 PM    1    0.00    0.00    0.00    0.00    3.59    0.51    0.00    0.00    0.00   95.90
01:32:35 PM    2    0.00    0.00    0.00    0.00    4.15    0.00    0.00    0.00    0.00   95.85
01:32:35 PM    3    0.00    0.00    0.52    0.00    3.61    0.52    0.00    0.00    0.00   95.36
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分析输出&lt;/strong&gt;:
出力には、各CPUの利用率とシステムの平均負荷が含まれます。平均負荷と各CPUの利用率に特に注意を払うことで、システムの負荷状況を把握できます。負荷が高い場合は、原因となっているプロセスやパフォーマンスボトルネックをさらに分析できます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结合其他工具&lt;/strong&gt;:
様々なツールを用いてシステムパフォーマンスを総合的に分析します。複数のツールの出力を組み合わせることで、システムの負荷状況をより詳細に把握し、パフォーマンス問題の根本原因を特定できます。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;中断&#34;&gt;中断
&lt;/h3&gt;&lt;p&gt;ここでは詳細な説明は省略します。
推奨：&lt;a class=&#34;link&#34; href=&#34;https://www.codedump.info/post/20200522-sgfap-softirq/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《面向应用开发者的系统指南》CPU篇之软中断&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;頻繁なソフト割り込みの発生は、システム負荷に現れる。&lt;/p&gt;
&lt;h2 id=&#34;問題の切り分け&#34;&gt;問題の切り分け
&lt;/h2&gt;&lt;p&gt;CPUの観点だけで問題を特定できない場合、システムに異常が発生している可能性を疑うべきではないでしょうか？ Linuxオペレーティングシステムの負荷が高すぎて、VMwareが過剰なCPUリソースを消費しているのかもしれません。使用率（&lt;code&gt;mpstat&lt;/code&gt;BOLD_3&lt;code&gt;irq&lt;/code&gt;占用异常，单核接近25%，而在正常情况下，启动业务进程空跑时，&lt;code&gt;irq&lt;/code&gt;）は約5%であるはずです。&lt;/p&gt;
&lt;p&gt;グループ内チームメイトの開発環境では、彼のCentOS 7はVMware上にデプロイされており、リソース使用率は正常に表示されている。一方、上海の開発環境では、同様にVMwareだが、ホストのCPUリソース状況を直接観察できない。この際、VMware仮想マシン、Linuxオペレーティングシステム、そしてGCCバージョンという複数の変数が存在する。&lt;/p&gt;
&lt;p&gt;深圳のテスト環境を分析すると、物理マシン上に古いバージョンのGCCコンパイルサービスが稼働しており、CentOS 8上で動作している。興味深いことに、深圳環境では &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; の占有は正常である。&lt;/p&gt;
&lt;p&gt;問題の切り分けのため、より新しいバージョンの GCC でコンパイルしたプログラムを深セン環境にデプロイしてテストした結果、すべて正常でした。&lt;/p&gt;
&lt;p&gt;問題はより明確になりつつあり、オペレーティングシステムに問題があるのではないかと疑い始めています。結局のところ、CentOS 8 は公式サポートが終了しています。しかし、クリーンな CentOS 7 と CentOS 8 を再デプロイしても、問題は依然として存在します。&lt;/p&gt;
&lt;p&gt;今のところ、唯一の不確定要素であるVMware仮想マシンソフトウェアを疑い始めています。すると突然、Hyper-V技術が頭に浮かびました。以前にHyper-Vが有効になっていて、完全にシャットダウンされなかったためにこの問題が発生しているのでしょうか？結局のところ、ソフト割り込みも仮想マシンソフトウェアによって実現されます。異なる仮想化技術にバグは存在しないのでしょうか？これらの問題について深く考察し、調査する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論
&lt;/h2&gt;&lt;p&gt;マイクロソフトの公式ドキュメントによると、ローカルのHyper-Vサービスを完全に停止したところ、VMwareがホスト上で正常に復旧しました。これで問題はついに解決しました。当初述べたように、この経験は紆余曲折があり、総合的な分析と判断が必要でした。また、今回初めて問題の切り分けを行い、仮想マシンレベルまで特定に至りました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor
bcdedit /set hypervisorlaunchtype off
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43;プログラミングの落とし穴：`std::map` の誤った使用によるプログラムクラッシュの詳細解説</title>
        <link>https://ttf248.life/ja/p/cpp-programming-traps-std-map-crash-details/</link>
        <pubDate>Sun, 10 Mar 2024 22:03:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-programming-traps-std-map-crash-details/</guid>
        <description>&lt;p&gt;C++プログラミングにおける&lt;code&gt;__INLINE_CODE_0__&lt;/code&gt;コンテナの誤った使用が、プログラムのクラッシュを引き起こす可能性があることを明らかにすることを目的としています。角括弧演算子で存在しないキーにアクセスしようとすると、自動的に空要素が追加されます。この誤解を深く分析し、サンプルコードを通じて潜在的なリスクを示します。&lt;/p&gt;
&lt;p&gt;単純な値を格納する分には問題ありませんが、ポインタを格納すると問題が生じます。ポインタはアドレスであり、初期化されていない場合、そのアドレスは未確定となり、プログラムのクラッシュにつながる可能性があります。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;C++標準ライブラリにおいて、``std::map&lt;code&gt;是一种关联容器，它按照键（key）的升序存储元素，并提供了高效的关键字查找功能。然而，新手开发者有时会因为对&lt;/code&gt;std::map&lt;code&gt;BOLD_6&lt;/code&gt;[]&lt;code&gt;BOLD_7&lt;/code&gt;[]&lt;code&gt; 访问一个不存在的键时，__INLINE_CODE_4__&lt;/code&gt;は新しいキーバリューペアを挿入し、デフォルトコンストラクタを用いてキーに対応する値の型を初期化します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int main() {
    std::map&amp;lt;std::string, int&amp;gt; myMap;
    
    // 错误的用法：假设这里试图访问一个不存在的键并认为会得到0
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for &#39;nonexistent_key&#39;: &amp;quot; &amp;lt;&amp;lt; myMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;

    // 实际上，上述行代码创建了一个新的键值对，其中值被默认初始化为int的默认值（通常是0）
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のコードはプログラムを直接クラッシュさせることはありませんが、このような暗黙的な挿入処理は、リソースリークや予期せぬ状態変化といった副作用を引き起こす可能性があります。さらに悪いことに、マルチスレッド環境で未初期化のメモリ領域に同時にアクセスすると、プログラムがクラッシュする可能性もあります。&lt;/p&gt;
&lt;p&gt;類似の問題を防ぐため、__INLINE_CODE_0__BOLD_3&lt;code&gt;std::map::count()&lt;/code&gt;BOLD_4&lt;code&gt;std::map::insert()&lt;/code&gt;要素を明示的に挿入することを推奨します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::map&amp;lt;std::string, int&amp;gt; safeMap;
if (safeMap.count(&amp;quot;nonexistent_key&amp;quot;) == 0) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Key does not exist.&amp;quot; &amp;lt;&amp;lt; std::endl;
} else {
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for existing key: &amp;quot; &amp;lt;&amp;lt; safeMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;
}

// 或者明确插入一个键值对，指定初始值
safeMap.insert({ &amp;quot;new_key&amp;quot;, 0 });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もしmapコンテナ内にポインタ型のオブジェクトが格納されている場合、要素の自動挿入は初期化されていないポインタを保持し、そのポインタに対するいかなる操作もプログラムクラッシュを引き起こす可能性があります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>pstackでプロセスフリーズを調査</title>
        <link>https://ttf248.life/ja/p/pstack-troubleshooting-process-hang/</link>
        <pubDate>Sat, 24 Feb 2024 23:55:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/pstack-troubleshooting-process-hang/</guid>
        <description>&lt;p&gt;ソフトウェア開発や運用において、プロセスがフリーズする状況に遭遇することがあります。この状況はシステムパフォーマンスの低下やサービス停止を引き起こす可能性があります。本稿では、pstackツールを使用してプロセスフリーズの問題をトラブルシューティングする方法について説明します。プロセスのスタック情報を分析することで、問題の原因を特定し解決策を見つけます。&lt;/p&gt;
&lt;p&gt;風控システムの子サービスが応答停止し、風控サービスが利用不能に。サービス可用性モニタリングの不足により、プロセス応答停止をタイムリーに検知できず、システムが利用不能となった。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;プロセスデッドロックとは、プロセスが応答しなくなるものの、終了しない状態を指します。これは、デッドロック、リソース枯渇、例外など、様々な原因で発生する可能性があります。このような問題を解決するためには、pstackツールを使用してプロセスのスタック情報を分析し、問題の根本原因を特定することができます。&lt;/p&gt;
&lt;h2 id=&#34;手順&#34;&gt;手順
&lt;/h2&gt;&lt;p&gt;pstack は、一般的に gdb（GNU デバッガー）と共に提供される便利なツールです。以下のコマンドでインストールできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install gdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プロセスIDの取得：まず、スリープ状態のプロセスのプロセスID（PID）を取得する必要があります。psコマンドを使用して、すべてのプロセスをリストし、調査対象のプロセスIDを見つけます。
pstack ツールを使用してプロセススタックを解析します。プロセス ID を取得したら、pstack ツールでそのプロセスのスタック情報を入手できます。以下のコマンドを実行してください:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pstack &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロセスが実行中の関数呼び出しシーケンスを表示し、スタック情報を出力します。これらの情報から、プロセスの停止位置を特定し、問題の箇所を突き止めることができます。&lt;/p&gt;
&lt;p&gt;スタック情報を解析することで、プロセスの応答なしの原因を特定できます。デッドロックや無限ループ、その他の異常が発見される可能性があります。状況に応じて、ロックの解放やコードロジックの修正などの対応策を講じてください。&lt;/p&gt;
&lt;h2 id=&#34;事例&#34;&gt;事例
&lt;/h2&gt;&lt;p&gt;簡単なデモで、メイン関数起動後、新しいスレッドを作成し、実際の実行関数が無限ループに入り、プログラムが正常に終了せず、フリーズした状態になる。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake_minimum_required(VERSION 3.0.0)
project(pstack_main VERSION 0.1.0 LANGUAGES C CXX)

include(CTest)
enable_testing()

# 查找线程库
find_package(Threads REQUIRED)

add_executable(pstack_main main.cpp)

# 链接线程库
target_link_libraries(pstack_main PRIVATE Threads::Threads)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;
#include &amp;lt;chrono&amp;gt;

void infiniteLoop() {
    while (true) {
        // 主线程进入死循环
    }
}

int main() {
    std::thread thread(infiniteLoop); // 创建一个线程，执行死循环函数
    thread.join(); // 等待线程结束
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;プログラム起動、pstack結果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Thread 2 (Thread 0x7eff3619b700 (LWP 1315017)):
#0  infiniteLoop () at /root/pstack/main.cpp:6
#1  0x0000000000402ca9 in std::__invoke_impl&amp;lt;void, void (*)()&amp;gt; (__f=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:60
#2  0x0000000000402b02 in std::__invoke&amp;lt;void (*)()&amp;gt; (__fn=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:95
#3  0x0000000000403150 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::_M_invoke&amp;lt;0ul&amp;gt; (this=0x2260eb8) at /usr/include/c++/8/thread:244
#4  0x0000000000403126 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::operator() (this=0x2260eb8) at /usr/include/c++/8/thread:253
#5  0x000000000040310a in std::thread::_State_impl&amp;lt;std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt; &amp;gt;::_M_run (this=0x2260eb0) at /usr/include/c++/8/thread:196
#6  0x00007eff36bceb23 in execute_native_thread_routine () from /lib64/libstdc++.so.6
#7  0x00007eff36ea91ca in start_thread () from /lib64/libpthread.so.0
#8  0x00007eff361d58d3 in clone () from /lib64/libc.so.6
Thread 1 (Thread 0x7eff372e1740 (LWP 1315016)):
#0  0x00007eff36eaa6cd in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
#1  0x00007eff36bceda7 in std::thread::join() () from /lib64/libstdc++.so.6
#2  0x00000000004029d2 in main () at /root/pstack/main.cpp:13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;確認できるところによると、プロセスのフリーズの原因は無限ループです。メインスレッドが無限ループに入り、サブスレッドが終了できず、結果としてプロセスがフリーズします。&lt;/p&gt;</description>
        </item>
        <item>
        <title>走ってみれば、どうにかなるものだ。</title>
        <link>https://ttf248.life/ja/p/come-out-and-walk-around-its-always-good/</link>
        <pubDate>Thu, 08 Feb 2024 10:30:43 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/come-out-and-walk-around-its-always-good/</guid>
        <description>&lt;p&gt;もし、当時は家の計画通りに、真面目に電力系統について学んでいたら、きっとごく普通の従順な男になっていただろう。&lt;/p&gt;
&lt;p&gt;記憶の埃を払い落としたのは、やはり旧年の足音が近づいていることと、ルームメイトとの会話がきっかけだった。その際、数年間の出来事を整理した。&lt;/p&gt;
&lt;h2 id=&#34;第一章&#34;&gt;第一章
&lt;/h2&gt;&lt;p&gt;共通テストの成績は良くも悪くもないが、211大学を卒業した。父の当初の計画では、私は電力網についてしっかり勉強し、故郷の市内の電力局で働くはずだった。以前の記事でも触れたことがあると思うが、IT業界に足を踏み入れるまでの経緯については、金銭感覚や自制心といった要素も忘れていた。&lt;/p&gt;
&lt;p&gt;初一まだ村の学校に通っていたのに、二年生になると家で市内への転校が決まった。まるで劉姥姥が大きな庭園に迷い込んだように、都会の喧騒にどこか馴染めず、映画館に行ったことがほとんどなかった。正確には、両親と一緒に行ったことがなかったのだが、親戚に連れて行かれたことはあった。幸運はいつだって訪れるものだ。その時、気が合う仲間たちに出会えたおかげで、連絡は少なくなったものの、あの頃の少年時代は今振り返れば美しい思い出だ。週末の補習の後、みんなで教室のペットボトルを集めて、慣れた手つきで足で踏みつぶし、カバンに入れて持ち帰り、母が保管していた。ある程度の量になったら、廃品回収業者に持って行った。将棋をしたり、バドミントンをしたり、斗地主（トウチー）をしたり、負けた罰として腕立て伏せを何回かさせられた。あの頃は少しありがたかった。父は小さい頃から色々な運動をさせてくれたのだ。ここから、金銭感覚が少しずり落ち、少し劣等感を感じるようになった。しかし、これらの小さな不幸は一瞬で過ぎ去った。家計も楽な方ではなかったし、お小遣いはほとんどなかった。周りの友達と遊べないこともあった。特に週末には、両親の努力が目に見えるほどだった。村から出て市内へ引っ越してきたのだ。その時、種はすでに植えられ、芽が出るのを待っていた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;頭の単純な私ですが、学生時代は全体的にとても幸せでした。多くの人が卒業後に初めて気づくように、勉強はそれほど難しいことではなく、投資と成果の変換は比較的容易です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;幼い頃の帝国の記憶と重なり合い、大学時代にノートパソコンに触れたことで、まるでパンドラの箱を開けたようにゲームに接触し、ゲーム商人という役割との繋がりも生まれた。当初は下層の営業担当者として、上流から仕入れた商品を自分のコミュニティを通じて少しずつ販売し、少額を稼いでいたが、徐々に全体の流通経路の仕組みを理解していった。私たちが販売する商品は、結局は上流プログラムによって大量に孵化されたもので、コストはほぼゼロに近い。そこから少し道を踏み外してきた。専門分野には細分化があり、左側は電力網、右側は自動化（非常に雑多で、チッププログラミングや工場電気自動化など）がある。プログラムでお金を稼げることに気づき、それは決して少ない金額ではない。流通経路の上流では確かに多くのお金が稼げている。それに以前からプログラミングの基礎があったため、色々なことを試して少しだけお金を稼ぎ、専門を選ぶ際、自然と自動化を選んだ。3年生の専門科目はほとんど受けず、毎日頭の中にはコードを書いて金を稼ぐことばかり考えていた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;昨年の記事で触れたように、ハッカーへの美らな憧れを抱いてプログラミングに手を出した非情報系のIT担当者が、慈悲の心をもってアセンブリ、ペネトレーションテスト、ゲームチート、DLLハイジャック、アカウント盗難などを行い、様々なブラックビジネスやグレービジネスに精通し理解を得た。両親は人としての道を示し、法律も忠告してくれたおかげで、道は完全に曲がってはいない。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先行きのリンク：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/then-boy-talent-not-much/&#34; &gt;那时少年&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大学時代にも一度恋愛はしてみたものの、振り返ってみれば、それはテレビドラマの恋愛への憧れが大きかったように思う。未熟だったあの頃の私には、人を愛することの意味も、家庭を築き立っていくことも理解できなかった。&lt;/p&gt;
&lt;h2 id=&#34;第2章&#34;&gt;第2章
&lt;/h2&gt;&lt;p&gt;時代の洪流の中、私もまた幸運だったと言えるだろう。大学でのあれやこれといった奮闘を経て、研究に進むことはなく、卒業後すぐに就職し、ITの追い風に乗って順調にキャリアを積んできた。既に勤めて8年目になるが、業界の熱い資金は消え去り、終焉を迎えた。時折、当初の選択が間違っていたのではないか、という疑念も湧く。父の言うことを聞いて電力会社に入っていれば、もっと良い道が開けていたかもしれない。仕事始めの5年間くらいはそう思ったのだが、その後は徐々にその考えは薄れていった。 新卒で恒生に参入し、5年間一度も転職していないため、技術や業界に関する認識、そして自己認識にも一定の欠陥があることは確かだ。杭州本部の指示に従い深圳分社へ赴任したが、職場の権力闘争（後になって振り返ってみると、両者とも負け、最終的な勝者は取締役会だった）を経験した。技術への愛を抱き、杭州に戻り、少しばかり世間知らずな心境で、杭州から撤退し上海へと向かった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元々、杭州で落ち着いて家を建て、住宅ローンを組んで購入する計画でしたが、金利のピークと不動産価格の高騰期に参入すると、住宅ローンに足止めを取られかねません。貯蓄も少ないので、無理はできません。住宅ローンを抱えたまま結婚し、さらに業界の不況が重なれば、精神的にも不安定になりやすいです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第三章&#34;&gt;第三章
&lt;/h2&gt;&lt;p&gt;長年歳月を重ね、様々な経験を経て、物غبしいことも、放浪した時期もあったが、今のところは穏やかだ。色々な出来事と人々を経験し、少しずつ成長してきた。もしずっと家にいれば、性格の欠陥がどんな形で爆発するか分からない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43;関数呼び出しにかかる時間</title>
        <link>https://ttf248.life/ja/p/cpp-function-call-timing/</link>
        <pubDate>Wed, 24 Jan 2024 14:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cpp-function-call-timing/</guid>
        <description>&lt;p&gt;設計のSDKについて、様々なコールバック関数実装方法で時間のかかるテストを実施しました。最近C++の関数プログラミングを調べていますが、関数がファーストクラスオブジェクトとなり、プログラム内で流通すると、パフォーマンスに違いはありますか？&lt;/p&gt;
&lt;p&gt;先行きのリンク：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/compiler-callback-function-performance-testing/&#34; &gt;编译器、回调函数、性能测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大佬も同様のテストをしており、コードを拝借した。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;実行プラットフォームは、引き続き弊社の旧友、&lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;です。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cassert&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

int add_one(int input) { return input + 1; }

bool validate_vector_add_one(std::vector&amp;lt;int&amp;gt; const&amp;amp; input_vector,
                             std::vector&amp;lt;int&amp;gt; const&amp;amp; output_vector)
{
    bool is_valid{true};
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        if (output_vector.at(i) != input_vector.at(i) + 1)
        {
            is_valid = false;
            break;
        }
    }
    return is_valid;
}

void reset_vector(std::vector&amp;lt;int&amp;gt;&amp;amp; input_vector)
{
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        input_vector.at(i) = 0;
    }
}

template &amp;lt;typename T, typename Func&amp;gt;
void unitary_function_pass_by_lambda_function(T&amp;amp; output, T const&amp;amp; input,
                                              Func const func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_std_function_value(T&amp;amp; output, T const&amp;amp; input,
                                                 std::function&amp;lt;T(T)&amp;gt; const func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_std_function_reference(
    T&amp;amp; output, T const&amp;amp; input, std::function&amp;lt;T(T)&amp;gt; const&amp;amp; func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_function_pointer(T&amp;amp; output, T const&amp;amp; input,
                                               T (*func)(T))
{
    output = func(input);
}

int main()
{
    // Set floating point format std::cout with 3 decimal places.
    std::cout.precision(3);

    size_t const num_elements{10000000};
    std::vector&amp;lt;int&amp;gt; input_vector(num_elements, 0);
    std::vector&amp;lt;int&amp;gt; output_vector(num_elements, 0);

    auto const lambda_function_add_one{[](int const&amp;amp; input) -&amp;gt; int
                                       { return input + 1; }};
    std::function&amp;lt;int(int)&amp;gt; const std_function_add_one{lambda_function_add_one};

    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a function pointer: &amp;quot; &amp;lt;&amp;lt; sizeof(&amp;amp;add_one)
              &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a std::function pointer: &amp;quot;
              &amp;lt;&amp;lt; sizeof(&amp;amp;std_function_add_one) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a std::function: &amp;quot; &amp;lt;&amp;lt; sizeof(std_function_add_one)
              &amp;lt;&amp;lt; std::endl;

    // Call function frequently in a vanilla way.
    // The compiler knows what function to call at compile time and can optimize
    // the code.
    // This is the best performance we could get.
    std::chrono::steady_clock::time_point const time_start_vanilla{
        std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        output_vector.at(i) = add_one(input_vector.at(i));
    }
    std::chrono::steady_clock::time_point const time_end_vanilla{
        std::chrono::steady_clock::now()};
    auto const time_elapsed_vanilla{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(time_end_vanilla -
                                                             time_start_vanilla)
            .count()};
    float const latency_vanilla{time_elapsed_vanilla /
                                static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass Vanilla: &amp;quot; &amp;lt;&amp;lt; latency_vanilla &amp;lt;&amp;lt; &amp;quot; ns&amp;quot;
              &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // Sometimes, we don&#39;t know what function to call at compile time.
    // We can use std::function to pass a function as an argument.
    // In this case, we pass the std::function by value.
    // Because the size of a std::function is 32 bytes, passing by value
    // results in a lot of copying and bad performance.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_std_function_value{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_std_function_value(
            output_vector.at(i), input_vector.at(i), std_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_std_function_value{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_std_function_value{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_std_function_value -
            time_start_pass_by_std_function_value)
            .count()};
    float const latency_pass_by_std_function_value{
        time_elapsed_pass_by_std_function_value /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Std Function Value: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_std_function_value &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // Instead of passing the std::function by value, we can pass it by
    // reference (pointer). In this case, object copying is eliminated. The
    // performance is better than passing the std::function by value. However,
    // the performance is still not as good as the vanilla way.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_std_function_reference{
            std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_std_function_reference(
            output_vector.at(i), input_vector.at(i), std_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_std_function_reference{
            std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_std_function_reference{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_std_function_reference -
            time_start_pass_by_std_function_reference)
            .count()};
    float const latency_pass_by_std_function_reference{
        time_elapsed_pass_by_std_function_reference /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Std Function Reference: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_std_function_reference &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // std::function is a general purpose wrapper for function pointers,
    // callable objects, and lambda functions. Because it&#39;s general purpose,
    // it&#39;s not as efficient as a function pointer. In this case, we pass a
    // function pointer to a function. The performance is better than passing
    // the std::function by reference.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_function_pointer{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_function_pointer(output_vector.at(i),
                                                  input_vector.at(i), &amp;amp;add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_function_pointer{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_function_pointer{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_function_pointer -
            time_start_pass_by_function_pointer)
            .count()};
    float const latency_pass_by_function_pointer{
        time_elapsed_pass_by_function_pointer /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Function Pointer: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_function_pointer &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // We can also pass a lambda function to a function.
    // The compiler knows what function to call at compile time and can optimize
    // the code. The performance is also better than passing the std::function
    // by reference.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_lambda_function{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_lambda_function(
            output_vector.at(i), input_vector.at(i), lambda_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_lambda_function{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_lambda_function{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_lambda_function -
            time_start_pass_by_lambda_function)
            .count()};
    float const latency_pass_by_lambda_function{
        time_elapsed_pass_by_lambda_function /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Lambda Function: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_lambda_function &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 组里常规也就开启 O2 优化，编译选用了 gcc13，不同版本的 gcc 性能耗时略有不同，版本越高 lambda 效果越好
The size of a function pointer: 8
The size of a std::function pointer: 8
The size of a std::function: 32
Latency Pass Vanilla: 0.418 ns
Latency Pass By Std Function Value: 3.47 ns
Latency Pass By Std Function Reference: 1.36 ns
Latency Pass By Function Pointer: 0.396 ns
Latency Pass By Lambda Function: 0.44 ns
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://leimao.github.io/blog/CPP-Function-Call-Performance/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://leimao.github.io/blog/CPP-Function-Call-Performance/&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>コンピュータがなぜ一般的にリトルエンディアンを採用しているのか。</title>
        <link>https://ttf248.life/ja/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;バイトオーダーに関する解説 &lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/host-order-network-order-debugger-observation/&#34; &gt;主机序、网络序，通过调试器，直接观察&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コンピュータ分野で過去の経緯から生まれたある種の設計習慣は、おべっか粉砕機（マッパァーグォ）の幅がロケット推進器の幅を決める道理と全く同じで、無理に「利点」「欠点」を分析する必要はなく、単なる慣習です。&lt;/p&gt;
&lt;h2 id=&#34;元のリンク&#34;&gt;元のリンク
&lt;/h2&gt;&lt;p&gt;著者：北極
リンク：&lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
出典：知乎
著作権は著者に帰属します。商用転載には著者に許可を得て、非商用転載には出典を明記してください。&lt;/p&gt;
&lt;h2 id=&#34;転載本文&#34;&gt;転載本文
&lt;/h2&gt;&lt;p&gt;現在のビッグエンディアン／リトルエンディアンの状況は、歴史的慣習と商業化の結果であり、技術そのものとは大きく関係ありません。ARMは、ビッグエンディアンにもリトルエンディアンにも設定可能です。TCP/IPヘッダーも現在でもビッグエンディアン（ネットワークバイトオーダー）です。ストレージ分野においても、多くのストレージプロトコル／仕様がデータをビッグエンディアン方式で保存しています。&lt;/p&gt;
&lt;p&gt;ですから、質問者の3つの問題について、今日の視点から見ると：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コンピュータがなぜ一般的にリトルエンディアンを採用しているのか？→ 誤り。&lt;/li&gt;
&lt;li&gt;効率は必ずしも高くなるわけではありません。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;これらの問題を現在の技術で論証することは、矢を放ってから的を描くような行為だ。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;しかし、ビッグエンディアンかリトルエンディアンかの選択に関して言えば、コンピュータの発展史の中で確かに一定の客観的な要因がありました。ホストのバイトオーダー（リトルエンディアン）の利点：リトルエンディアンでは加算器が比較的作りやすいです。8ビット*4の加算器を作る場合、8ビットの加算器一つで十分で、低位から高位へ順に各バイトを足し合わせれば良いので、キャリー回路は非常にシンプルです。一方、ビッグエンディアンの場合、一度に32ビットをロードする必要があり、そうしないと計算できません。現在では、一度に8ビットか32ビットかをロードする違いはそれほど大きくありませんが、数十年前のメモリ価格が高かったため、シンプルな方が良いので、リトルエンディアンを選択したのはコストを考慮した結果です。ネットワークバイトオーダー（ビッグエンディアン）の利点：初期のデバイスではキャッシュが小さく、上位バイトを受信することで、パケット情報を素早く判断できました。バッファサイズ（どれくらいのキャッシュを用意する必要があるか）、アドレス範囲（IPアドレスは先頭からマッチングされる）などです。初期のネットワークデバイスのキャッシュはバイト単位で動作しており、上位バイトを取得すると確かに少し速くなります。そのため、ネットワークデバイスではビッグエンディアンを採用したのも、コストを考慮した結果です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;そのため、バイトオーダーの選択は歴史的に見て、アプリケーションのシナリオやコストを考慮することが多かった（例えば、PPC/MIPSはネットワーク機器に適しているなど）。しかし、その後の技術発展の中で、互換性のために、リトルエンディアン/ビッグエンディアンの設定が現在まで引き継がれている。&lt;/p&gt;
&lt;p&gt;現在では、これらは完全に存在せず、単なる慣習に過ぎない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>プログラムをデバッグからどのようにして回避するか。</title>
        <link>https://ttf248.life/ja/p/program-how-to-anti-debug/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-how-to-anti-debug/</guid>
        <description>&lt;p&gt;ふと思いで、新しい壁紙を探してみる。普段は黒系のシリーズを使っているが、一部にカラフルな要素を取り入れて、デスクトップにアイコンを配置したい。他の色合いの壁紙だとアイコンが見えづらい。&lt;/p&gt;
&lt;p&gt;アセンブリコードをしばらく見つめて考えてみたが、理解できなかった。&lt;code&gt;AI&lt;/code&gt;に頼ってみると、命令は説明されたものの、状況の説明はない。特定の状況下でのみ使用される命令であることは確かで、通常のコードではこのような書き方はしない。&lt;/p&gt;
&lt;p&gt;現今は検索エンジンの方が良いでしょう、アセンブリの知識が足りません。&lt;/p&gt;
&lt;h2 id=&#34;壁紙&#34;&gt;壁紙
&lt;/h2&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;Snipaste_2024-01-23_19-50-53.png&#34; &gt;黑色汇编壁纸&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;アセンブリコード&#34;&gt;アセンブリコード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実用的な応用シーン&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;説明&#34;&gt;説明
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;斜体_3&lt;/strong&gt;&lt;strong&gt;強調_2__斜体_4__&lt;/strong&gt;、コードをトレースするとこのフラグがデバッガによってクリアされるため、この例外が見えなくなります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;実際のテストでは、検出デバッグの関数をステップオーバーするとデバッグが検知されないことがわかった。デバッグ関数実行時にステップインした場合のみ検知される。(資料調査、未検証)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;関連資料は、ウェブサイトの英語版を翻訳したもので、様々なデバッグ対策技術について解説しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>焦点インタビュー/CCTVビデオファイルのダウンロード方法</title>
        <link>https://ttf248.life/ja/p/how-to-download-focus-interview-cctv-video-files/</link>
        <pubDate>Tue, 23 Jan 2024 19:23:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/how-to-download-focus-interview-cctv-video-files/</guid>
        <description>&lt;p&gt;最近、ある人が「焦点訪談の動画をダウンロードするにはどうすればいいか」と問い合わせてきた。頭に思い浮かんだのは、やはり何かしらの方法で暗号化されているのだろう、と思ったのだが、簡単に処理できた。&lt;/p&gt;
&lt;h2 id=&#34;ダウンローダー&#34;&gt;ダウンローダー
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/nilaoda/N_m3u8DL-CLI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/nilaoda/N_m3u8DL-CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;オープンソースのコマンドライン m3u8/HLS/DASH ダウンローダー。標準的な AES-128-CBC 復号化、マルチスレッド、カスタムリクエストヘッダなどをサポート。簡体字中国語、繁体字中国語、英語をサポート。&lt;/p&gt;
&lt;h2 id=&#34;ブラウザ拡張機能&#34;&gt;ブラウザ拡張機能
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://microsoftedge.microsoft.com/addons/detail/ngjclnbcdbahekojpkhancmiobdahemb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Live Stream Downloader&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;自信蜜&#34;&gt;自信蜜
&lt;/h2&gt;&lt;p&gt;住所を入手したと思ったのに、結局何も解決せず、セグメントの内容を正常に解析できず。資料を確認すると、公式側でダウンロードアドレスが処理されており、プラグインが解析した &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; を手動でコピー＆リプレースする必要がある。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;https://newcntv.qcloudcdn.com/asp/hls/2000/0303000a/3/default/***********************/2000.m3u8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2024年1月まで、住所テストは有効です。今後の変更については、ご自身でウェブページを解析してください。&lt;/p&gt;
&lt;p&gt;過去のアドレスのバックアップ：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://jln.cn/post/517.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jln.cn/post/517.html&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>一括でSQL Serverデータベースディスクファイル権限を修正する</title>
        <link>https://ttf248.life/ja/p/bulk-modify-sqlserver-database-disk-file-permissions/</link>
        <pubDate>Tue, 23 Jan 2024 19:06:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-modify-sqlserver-database-disk-file-permissions/</guid>
        <description>&lt;p&gt;会社セキュリティポリシーの変更により、__INLINE_CODE_0__最终还是搬迁回家作为备用服务器，顺带重装机器系统，__INLINE_CODE_1__BOLD_4&lt;code&gt;windows server&lt;/code&gt;。 активацииの方法が非正規なので、自宅での使用であれば активации しなくても問題ないようです。&lt;/p&gt;
&lt;p&gt;非正規品による起動で、Microsoftの検出がトリガーされました（半月ほど正常に動作していました）。サーバーを起動して1時間で自動的にシャットダウンされ、システムログを確認した結果、海賊版ソフトウェアが原因であることが判明しました。&lt;/p&gt;
&lt;p&gt;どうにもならない、システムを再度インストールせざるを得ない状況だ。__INLINE_CODE_0__も再インストールが必要になりそう。毎回面倒くさい作業になる。ファイルアクセス権が厳しく制限されているため、データベースを正常に追記できない。&lt;/p&gt;
&lt;h2 id=&#34;エラーメッセージ&#34;&gt;エラーメッセージ
&lt;/h2&gt;&lt;p&gt;システムを再インストール後、__INLINE_CODE_0__は追加データベースで5120エラーが発生し、オペレーティングシステムによるアクセス拒否となる可能性があります。&lt;/p&gt;
&lt;h2 id=&#34;スクリプト処理&#34;&gt;スクリプト処理
&lt;/h2&gt;&lt;p&gt;前のリンク：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/&#34; &gt;批量更新本地Git仓库&lt;/a&gt; 。おなじみのスクリプトですが、フォルダをトラバースしながらファイルの権限を変更します。現在、完全に編集可能な権限を持っています。&lt;/p&gt;
&lt;p&gt;オンラインのチュートリアルはほとんど手動修正を要求するけど、彼らは毎回数ファイルしか変更しないの？私は毎回大量のファイルを抱えて、全て手作業で対応しなければならないから、精神が疲弊するわ。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$rootDirectory = &amp;quot;D:\data\2013_RujiaInfo&amp;quot;

Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    if ($_ -is [System.IO.DirectoryInfo]) {
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
            # 授予当前用户写入权限
            Invoke-Expression &amp;quot;icacls `&amp;quot;$itemPath`&amp;quot; /grant `&amp;quot;$($currentUserName):(OI)(CI)F`&amp;quot;&amp;quot;
            Write-Host &amp;quot;已授予 $currentUserName 编辑文件夹的权限&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # 授予当前用户写入权限
            Invoke-Expression &amp;quot;icacls `&amp;quot;$itemPath`&amp;quot; /grant `&amp;quot;$($currentUserName):(F)`&amp;quot;&amp;quot;
            Write-Host &amp;quot;已授予 $currentUserName 编辑文件的权限&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Linuxシステムベンチマークテスト</title>
        <link>https://ttf248.life/ja/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;Windows プラットフォームには魯大师（ユーエンターマスター）というベンチマークソフトがあり、データが正確とは言えないまでも、ある程度の参考になる。もちろん他のプロフェッショナルなベンチマークソフトもあるが、Linux システムでは特によく合うものがなかなか見つからない。&lt;/p&gt;
&lt;p&gt;Sysbenchは、CPU、メモリ、ファイルI/O、スレッドパフォーマンスなどをテストできる多機能なベンチマークツールです。様々なパフォーマンステストタスクにsysbenchを使用できます。&lt;/p&gt;
&lt;p&gt;テスト用にちょうど3台の機械があります：メカニストミニローカルホスト、アリババクラウド開発雲サーバー、ファーウェイクラウド開発サーバー。&lt;/p&gt;
&lt;h2 id=&#34;sysbenchのインストール&#34;&gt;Sysbenchのインストール
&lt;/h2&gt;&lt;p&gt;ほとんどのLinuxディストリビューションでは、パッケージマネージャーを使用してSysbenchをインストールできます。例えば、CentOS 8では、以下のコマンドでインストールできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbench-の使用例&#34;&gt;Sysbench の使用例
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU性能テスト：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;メモリ読み出し性能テスト：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;テストファイルI/O性能：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;マルチスレッドパフォーマンスのテスト: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;MySQLデータベースのパフォーマンスをテストする（データベースの最大接続数を調整する必要があります）。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;データレポートパオフェン&#34;&gt;データレポート（パオフェン）
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34; style=&#34;width:421px;&#34; class=&#34;column-headers-background&#34;&gt;B&lt;/th&gt;&lt;th id=&#34;0C2&#34; style=&#34;width:398px;&#34; class=&#34;column-headers-background&#34;&gt;C&lt;/th&gt;&lt;th id=&#34;0C3&#34; style=&#34;width:422px;&#34; class=&#34;column-headers-background&#34;&gt;D&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R0&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;本地机械师&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;华为云&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;系统配置&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 23.04&lt;br&gt;  Kernel                        Linux 6.2.0-36-generic x86_64&lt;br&gt;  Model                         Machenike Machenike DT Computer&lt;br&gt;  Motherboard                   Machenike Machenike DT Computer&lt;br&gt;  BIOS                          American Megatrends International, LLC.&lt;br&gt;DB19V012&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel Core i7-12650H&lt;br&gt;  Topology                      1 Processor, 10 Cores, 16 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 154 Stepping 3&lt;br&gt;  Base Frequency                4.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB x 8&lt;br&gt;  L1 Data Cache                 48.0 KB x 8&lt;br&gt;  L2 Cache                      1.25 MB x 2&lt;br&gt;  L3 Cache                      24.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          62.6 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              CentOS Stream 8&lt;br&gt;  Kernel                        Linux 4.18.0-513.el8.x86_64 x86_64&lt;br&gt;  Model                         Alibaba Cloud Alibaba Cloud ECS&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS 449e491&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Platinum&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 4&lt;br&gt;  Base Frequency                2.50 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      33.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          1.65 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 22.04.1 LTS&lt;br&gt;  Kernel                        Linux 5.15.0-60-generic x86_64&lt;br&gt;  Model                         OpenStack Foundation OpenStack Nova&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS&lt;br&gt;rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Gold 6278C CPU @ 2.60GHz&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 7&lt;br&gt;  Base Frequency                2.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      35.8 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          3.64 GB&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R2&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;3&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;CPU&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  4032.48&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              40330&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.25&lt;br&gt;         avg:                                    0.25&lt;br&gt;         max:                                    0.73&lt;br&gt;         95th percentile:                        0.25&lt;br&gt;         sum:                                 9997.55&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           40330.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9975/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1062.51&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0008s&lt;br&gt;    total number of events:              10628&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.91&lt;br&gt;         avg:                                    0.94&lt;br&gt;         max:                                   22.84&lt;br&gt;         95th percentile:                        1.06&lt;br&gt;         sum:                                 9993.46&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           10628.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9935/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1125.56&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0005s&lt;br&gt;    total number of events:              11258&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.86&lt;br&gt;         avg:                                    0.89&lt;br&gt;         max:                                    1.70&lt;br&gt;         95th percentile:                        0.99&lt;br&gt;         sum:                                 9995.40&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           11258.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9954/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R3&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;4&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;内存&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 101993199 (10198146.52 per second)&lt;br&gt;&lt;br&gt;99602.73 MiB transferred (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              101993199&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.03&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4059.50&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           101993199.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.0595/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 48418803 (4841004.79 per second)&lt;br&gt;&lt;br&gt;47283.99 MiB transferred (4727.54 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              48418803&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                   25.26&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4578.95&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           48418803.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 57056904 (5704765.11 per second)&lt;br&gt;&lt;br&gt;55719.63 MiB transferred (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              57056904&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.06&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4556.06&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           57056904.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5561/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R4&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;5&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;硬盘&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 1.81 seconds (1129.59 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      3373.41&lt;br&gt;    writes/s:                     2248.94&lt;br&gt;    fsyncs/s:                     7201.80&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:               35.14&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0127s&lt;br&gt;    total number of events:              128288&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.08&lt;br&gt;         max:                                    5.14&lt;br&gt;         95th percentile:                        0.34&lt;br&gt;         sum:                                 9977.78&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           128288.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9778/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 19.29 seconds (106.16 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1593.12&lt;br&gt;    writes/s:                     1062.08&lt;br&gt;    fsyncs/s:                     3406.64&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  24.89&lt;br&gt;    written, MiB/s:               16.60&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0164s&lt;br&gt;    total number of events:              60600&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                   31.32&lt;br&gt;         95th percentile:                        0.54&lt;br&gt;         sum:                                 9956.30&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           60600.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9563/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 18.29 seconds (111.98 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1665.88&lt;br&gt;    writes/s:                     1110.59&lt;br&gt;    fsyncs/s:                     3563.77&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  26.03&lt;br&gt;    written, MiB/s:               17.35&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0112s&lt;br&gt;    total number of events:              63355&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                  205.01&lt;br&gt;         95th percentile:                        0.78&lt;br&gt;         sum:                                 9972.64&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           63355.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9726/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R5&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;多线程&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0002s&lt;br&gt;    total number of events:              197956&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.16&lt;br&gt;         avg:                                    0.20&lt;br&gt;         max:                                    0.34&lt;br&gt;         95th percentile:                        0.21&lt;br&gt;         sum:                                39970.47&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           49489.0000/5.70&lt;br&gt;    execution time (avg/stddev):   9.9926/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0174s&lt;br&gt;    total number of events:              18360&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:                                   32.77&lt;br&gt;         95th percentile:                        2.61&lt;br&gt;         sum:                                40050.41&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           4590.0000/94.36&lt;br&gt;    execution time (avg/stddev):   10.0126/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              28536&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.23&lt;br&gt;         avg:                                    1.40&lt;br&gt;         max:                                    3.56&lt;br&gt;         95th percentile:                        1.47&lt;br&gt;         sum:                                39975.16&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           7134.0000/39.87&lt;br&gt;    execution time (avg/stddev):   9.9938/0.01&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;完全にレイアウトできず、表形式にできない場合、表示効果が著しく悪くなる。カスタムテーマによるページ幅の制限があり、ページの構成を調整し、幅をパーセント指定に変更した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;シンプルな方法としては、TablesGeneratorのようなオンラインツールでHTMLテーブルを生成する（複雑な内容は向いていない）。&lt;/li&gt;
&lt;li&gt;またはGoogleドキュメントで作成し、HTMLとしてダウンロードしてブログにコピーする。（簡単で最終的に採用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;設定でunsafeオプションが有効になっていることを確認し、ページごとに幅を設定してください。&lt;/p&gt;
&lt;p&gt;Hugoにおいて、ページごとに幅を設定できます。これは、ページのFront Matterにカスタムパラメータを追加することで実現可能です。以下はその例です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Markdown ページの前マター（通常はファイルの先頭部分）に、例えば &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; のようなカスタムパラメータを追加してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;我的页面&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 设置宽度为 800 像素
---

正文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;あなたのHugoテーマで、対応するシングルページテンプレートファイルを見つけてください（例：&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;シングルページテンプレートにおいて、Front Matterに &lt;code&gt;custom_width&lt;/code&gt;BOLD_2&lt;code&gt;div&lt;/code&gt; が存在するか確認してください。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この例では、インラインスタイル（__INLINE_CODE_0__属性）为 __INLINE_CODE_1__BOLD_7&lt;code&gt;max-width&lt;/code&gt;BOLD_8&lt;code&gt;custom_width&lt;/code&gt; 参数时，宽度默认为100%。&lt;code&gt;margin: 0 auto;&lt;/code&gt; 用于将 &lt;strong&gt;INLINE_CODE_5&lt;/strong&gt;）の要素を中心に配置しています。&lt;/p&gt;
&lt;p&gt;実際の応用では、テーマ構造やCSSスタイルの詳細に応じて、上記の例を調整する必要があるかもしれません。スタイルを調整する際は、テーマの一貫性と可読性を保つようにしてください。&lt;/p&gt;
&lt;p&gt;有効化されたテーマが若干異なるため、サイトのカスタム設定の&lt;code&gt;CSS&lt;/code&gt;構成を最終調整しました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Gitが無効なHTTPリポジトリ</title>
        <link>https://ttf248.life/ja/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;ソフトウェアのバージョンを更新する習慣があり、どのバージョンの&lt;code&gt;Git&lt;/code&gt;BOLD_2&lt;code&gt;Http&lt;/code&gt;リポジトリからコードをプルすればよいか分からない。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h2&gt;&lt;p&gt;環境：Windowsプラットフォーム、これまでずっとTortoiseGitを使ってgitを操作しており、秘密鍵の設定もTortoiseGit経由で行ってきた。以前に一度スクリプトを作成し、ローカルのリポジトリを一括で更新したことがある。&lt;/p&gt;
&lt;p&gt;先行きのリンク：&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/&#34; &gt;批量更新本地Git仓库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;コードアップデート中にエラーが発生し、リポジトリが正常に更新されなくなりました。&lt;code&gt;Git&lt;/code&gt;应该提供了配置，让我继续使用&lt;code&gt;http&lt;/code&gt;のアップデートでリポジトリを更新しようとしたのですが、該当する設定項目が見つかりませんでした。&lt;/p&gt;
&lt;p&gt;最も簡単な解決策は、&lt;code&gt;ssh&lt;/code&gt;协议来更新仓库，公司配置的&lt;code&gt;gitlab&lt;/code&gt;短期内不会提供&lt;code&gt;https&lt;/code&gt;プロトコルに切り替えることです。&lt;/p&gt;
&lt;h2 id=&#34;遺棄問題&#34;&gt;遺棄問題
&lt;/h2&gt;&lt;p&gt;前面でバッチ更新スクリプトを作成する際、本来は__INLINE_CODE_0__的方式拉取仓库，也没细查是因为什么，通过小乌龟配置的__INLINE_CODE_1__の設定情報をconfigに同期させるはずだったが、それが実行されず、コマンドラインからの実行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull #提示没有权限，无法正常更新仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コマンドでキー設定を確認することも正しいです。&lt;/p&gt;
&lt;p&gt;もしTortoiseGitで問題なくコードをプルできるのに、コマンドラインでgit pullを実行した際に鍵のエラーが表示される場合、これはTortoiseGitがPuTTYのSSHキーを使用しているのに対し、コマンドラインがOpenSSHのSSHキーを使用していることが原因かもしれません。&lt;/p&gt;
&lt;p&gt;小烏亀のキー設定は、システム.sshフォルダから鍵ファイルを読み込まず、インターフェースのリポジトリ設定時に個別に鍵ファイルのパスを設定します。便利なテクニックとして、最初にリポジトリを構成した際に鍵を設定すれば、他のリポジトリもこの鍵ファイルを再利用できます。PuTTYで鍵をロードすると、すぐに終了せず、プロキシサービスを開始します。&lt;/p&gt;
&lt;p&gt;グローバル設定を調整し、システムデフォルトの__INLINE_CODE_0__設定を使用しないことで、Git Bash は TortoisePlink を使用して SSH 接続を行います。この構成は、TortoiseGit に付属する PuTTY ツールを使用する場合に適しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定された実行ファイルパスを、必要に応じて小烏龜のパスに合わせて変更してください。完全なパスが設定されているため、システム環境変数への追加は不要です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>AIプログラミングとタスク分解</title>
        <link>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;2年前にサイトに追加したコード領域のコピー機能の開発で、あれほど手間取ったのに、最終的な表示は少し期待外れだった。半熟前任開発者として、動けば良いやと諦め、そのままにしてきた。今年は__INLINE_CODE_0__で小程序を開発し、フロントエンド開発にも慣れたので、改めて（AIによる再設計）。&lt;/p&gt;
&lt;p&gt;悟道：任務分解され、多くの小任務が __INLINE_CODE_0__开发起来还是顺手的。已经倒闭的小程序，__INLINE_CODE_1__BOLD_5&lt;code&gt;AI&lt;/code&gt;提供，拆解了多个任务交付，人工进行项目代码的&lt;code&gt;组装&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;前文&#34;&gt;前文
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;CSSとJavaScriptのコードを設計し、class=&amp;ldquo;highlight&amp;rdquo; のウェブ要素を特定。その要素のコンテナ内にコピーボタンを追加し、コードをコピーする機能を実装する。&lt;/p&gt;
&lt;p&gt;最初の草稿のコードには問題があり、再生成した草稿はほぼ使用可能だが、コピー元の内容が正しくなく、重複するテキストが含まれている。再度最適化を促し、手動で主要なカラーデザインと適用されるエフェクトを指定する必要がある。&lt;/p&gt;
&lt;p&gt;ボタンのサイズと色に関して特定の要件があるとのこと、承知いたしました。これらの要件に合わせてボタンのデザインを再設計できます。以下に、ご提示いただいたカラースキームを取り入れ、ボタンのサイズを最適化した調整後のCSSスタイルを示します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* 调整位置 */
  right: 2px;
  padding: 3px 6px; /* 缩小尺寸 */
  font-size: 12px; /* 减小字体大小 */
  background-color: #8FD1E1; /* 按钮背景色 */
  color: #272822; /* 文字颜色 */
  border: 1px solid #272822; /* 边框颜色 */
  border-radius: 3px; /* 圆角 */
  cursor: pointer;
  opacity: 0.7; /* 默认半透明 */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* 平滑过渡效果 */
}

.copy-btn:hover {
  opacity: 1; /* 鼠标悬停时不透明 */
  background-color: #A3D4E5; /* 鼠标悬停时的背景色 */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このスタイルでは、ボタンのサイズとフォントサイズを小さくし、より洗練された印象にしました。また、ボタンのデフォルト状態は半透明で、マウスオーバー時に不透明になり、背景色がわずかに明るくなることで視覚的なフィードバックを提供します。このようなデザインは、お客様の色に関する要件を満たしつつ、モダンさとユーザビリティを維持しています。&lt;/p&gt;
&lt;p&gt;対応する、より簡単なものを提示しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // 查找所有 .highlight 元素
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // 创建复制按钮
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;复制&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // 将按钮添加到每个 .highlight 元素中
    highlight.appendChild(copyBtn);

    // 添加点击事件监听器
    copyBtn.addEventListener(&#39;click&#39;, function() {
      // 假设 .highlight 下的第一个 &amp;lt;code&amp;gt; 元素包含要复制的代码
      const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;

      navigator.clipboard.writeText(code).then(() =&amp;gt; {
        // 显示复制成功信息
        copyBtn.textContent = &#39;已复制!&#39;;
        setTimeout(() =&amp;gt; {
          copyBtn.textContent = &#39;复制&#39;;
        }, 2000);
      }).catch(err =&amp;gt; {
        console.error(&#39;复制失败: &#39;, err);
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;コード領域の右上、上部にコピーボタンを追加することを期待していたのですが、フロントエンドについて十分な理解がないため、キーワードで正確に機能を説明できず、&lt;code&gt;AI&lt;/code&gt; と何度かやり取りしても、期待通りの結果が得られませんでした。&lt;/p&gt;
&lt;p&gt;時間の経過とともに、&lt;code&gt;AI&lt;/code&gt;がプログラミングにどの程度影響を与えるか、まだわからない。&lt;/p&gt;</description>
        </item>
        <item>
        <title>東方甄選の小文風波：文化と商業の衝突</title>
        <link>https://ttf248.life/ja/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</link>
        <pubDate>Wed, 20 Dec 2023 18:57:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</guid>
        <description>&lt;p&gt;東方甄選の小文事件は、東方甄選公式アカウントが配信者・董宇輝を全ての小文の作者ではないと否定したことが引き起こしたネット騒動である。真相は既に検証不可能となり、企業の権謀術数に揉まれた結果、この問題は注目を集めることになった。&lt;/p&gt;
&lt;p&gt;魚の七秒記憶は、&lt;code&gt;AI&lt;/code&gt;撰写，尝试了&lt;code&gt;Bing AI&lt;/code&gt;和&lt;code&gt;ChatGPT plus&lt;/code&gt;に引き継がれる。前者はより完全な資料を提供するが、検索エンジンのデータはさらに多い。生成されるブログの内容は完全性に欠け、フォーマットは硬い。後者はキーワードで内容を取得し、完全ではないものの、ブログ全体の内容を把握できる。参考資料のURLを提供すれば、生成された原稿を最適化できる。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;東方甄選の小作文事件は、著作権と創作帰属を巡る論争であり、2023年12月5日に董宇輝主播（アナウンサー）と東方甄選との一連のやり取りが関与しました。この騒動は、ビジネス運営の複雑さを浮き彫りにするだけでなく、現代の商業文化やネット社会に対する深い反省を促しています。&lt;/p&gt;
&lt;h4 id=&#34;2023年12月5日発端&#34;&gt;2023年12月5日：発端
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;東方甄選が予告動画を公開し、キャスターの董宇輝氏による「短い文章」の朗読が急速に話題となった。&lt;/li&gt;
&lt;li&gt;東方甄選は動画コメントで、これらの短い文章の多くはコピーライターチームが作成したものであり、全て董宇輝氏の手によるものではないと声明を発表しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月13日董宇輝の返答&#34;&gt;2023年12月13日：董宇輝の返答
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;董宇輝氏が長文を発表し、「飯田地（ファンコミュニティ）」という名目で誰かを差別することに反対し、自身の立場を表明しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月14日経営陣の対応&#34;&gt;2023年12月14日：経営陣の対応
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;東方甄選CEOの孫東旭が謝罪動画を公開し、経営における不備を認めた。&lt;/li&gt;
&lt;li&gt;東方甄選の会長である俞敏洪も、今回の件について謝罪し、董宇輝に謝罪しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月16日重要決定&#34;&gt;2023年12月16日：重要決定
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;東方甄選は、孫東旭氏のCEO職を解任し、俞敏洪氏が兼任を発表しました。&lt;/li&gt;
&lt;li&gt;同日、俞敏洪氏は謝罪文を発表し、ライブ配信ルームでブラックリストにされていたネットユーザーを解除すると表明した。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023年12月18日董宇輝の新役柄&#34;&gt;2023年12月18日：董宇輝の新役柄
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新東方教育科技集団は、董宇輝氏を新東方教育科技集団文化補佐役および新東方文旅集団副总裁に任命した。&lt;/li&gt;
&lt;li&gt;俞敏洪氏は、董宇輝氏と共にスタジオを設立し、新たなライブアカウントとライブ配信スペースを開拓すると明らかにしました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結論と考察&#34;&gt;結論と考察
&lt;/h2&gt;&lt;p&gt;この論争は、著作権と創作帰属に関する問題であるだけでなく、文化と商業の衝突をより深く反映したものである。デジタル化・細分化された時代背景において、コンテンツ制作の著作権帰属は、熟考すべきテーマとなっている。東方甄選の小作文事件は、単なるメディア論争ではなく、現代商業文化とネットワーク社会に対する深い反省である。&lt;/p&gt;
&lt;p&gt;観察者として、私たちはどのようにこの文化とビジネスの衝突を見るべきか？商業的な利益を追求しつつ、いかにしてクリエイターの労働成果を守り、尊重するのか？これらの問題は、私たち一人ひとりが深く考察すべきである。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ゲーム心理学：競技ゲーム</title>
        <link>https://ttf248.life/ja/p/game-psychology-esports/</link>
        <pubDate>Mon, 11 Dec 2023 10:26:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/game-psychology-esports/</guid>
        <description>&lt;p&gt;課金型のゲームについては、ここでは議論しません。ゲーム業界では、このようなプレイヤーを一般的に「人民币戦士」と呼びます。ゲームの仕組みを理解する必要はなく、ただ十分な財力が必要です。彼らが楽しむのは、周囲の部下からの敬称や、__INLINE_CODE_0__の快感です。&lt;/p&gt;
&lt;p&gt;広大なユーザー層を持つ競技ゲーム、例えば英雄联盟、DOTA、王者荣耀、PUBGなど、この手のゲームは世界観の設定が確立され、ゲーム大会も健全なサイクルに入っています。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ゲームデザインにおいて、心理学は重要な分野であり、特に社会心理学はその中でも重要です。人々の行動、欲求、動機を理解することで、より魅力的なゲーム体験を作り出すことができます。「見せかけ」と社会心理学の関係については、以下のいくつかの観点から考察できます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;人々はしばしばソーシャルグループ内で帰属意識を求めます。ゲームにおいて、プレイヤーが何らかの面で優れていると感じられ、他のプレイヤーの注目を集めるようなデザインは、彼らの社会的帰属意識を高める可能性があります。これは、スキルをひけらかしたり、獲得した報酬を見せびらかしたりといった形で現れることがあります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;いくつかのゲームはソーシャル競争の要素を取り入れ、プレイヤーがソーシャルネットワークで自分の成果をアピールすることを奨励しています。ランキング、実績システム、または対戦モードなどを通じて実現できます。このようなデザインはプレイヤー間の競争心を刺激し、一部のプレイヤーが社会的承認を得るためにより優れたパフォーマンスを発揮する可能性があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ゲームの中には、プレイヤーがキャラクターやバーチャルアイテムなどをカスタマイズすることで自己表現できるものがあります。この自己表現は、単なる見せつけではなく、個性や社会的な交流の手段となり得ます。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;チームワークを重視するゲームでは、ソーシャルインタラクションを通じてゲーム目標を達成するため、ひけらかすような行動は推奨されず、協調性と相互サポートが強調されることが多いです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ゲームデザインは、心理的な報酬システムを取り入れ、プレイヤーの積極的なソーシャル行動を促すことができる。例えば、プレイヤーに報酬や特典を与え、積極的にソーシャルインタラクションに参加するように促すことが考えられる。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全体として、ゲームデザインにおける社会心理学は、プレイヤー間の交流やソーシャルエクスペリエンスを形作るために活用できる。見せかけの行動が状況によっては存在するかもしれないが、ゲームデザイナーは通常、そのような行動を調整し、全てのプレイヤーにとってポジティブで楽しいゲーム体験を提供するよう努める。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;考えながら書くので、大まかな構成もなく、少し散漫です。&lt;/p&gt;
&lt;p&gt;著者はよくプレイする英雄リーグは、私たち世代の青春の記憶と言えるでしょう。多くの親が子供にゲームをすることを好まないのは、この手のゲームに対する深い理解や体験がないからです。もちろん、ゲームの設定も関係しています。各ゲームは新たな始まりであり、多くの子供にとって、プレイ中はあまり深く考えずに、自律的な探求型のゲームです。その中で、勝敗は子供自身のゲームの才能に大きく左右されます。筆者の実際の経験から言うと、そのようなタイプのプレイヤーが相当数いるようです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最大のコストは、お金ではなく時間です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ゲーム内には、エンタメ目的のモードもあり、娯楽プレイヤーのニーズに応えます。&lt;/p&gt;
&lt;p&gt;英雄联盟のような競技ゲームは、筆者にとって、ある種の__INLINE_CODE_0__。开局你兜里两手空空，靠着自己的理解，补刀、发育，花费经济，布控视野，设局埋伏对面，更多的是用脑子玩游戏，没有那种绝佳的游戏天赋，也能玩的很开心。统领全局的__INLINE_CODE_1__を果たすものであり、逆境からの大逆転の喜びだ。そして、多くの弾幕で「雲プレイヤー」と呼ばれる人々もいる。彼らはもうゲームをプレイしていないが、世界大会期間になると必ず試合を観戦する。&lt;/p&gt;
&lt;p&gt;ここには言及せずにはいられない、____。&lt;/p&gt;
&lt;p&gt;IT業界に携わっているので、ゲームは色々触れてきたし、たくさんプレイしている。色々なタイプを試してきたので、競技ゲームでは、反射速度ではなく、頭を使ってプレイするのが癖になっている。才能もあるし、プロや若者と比べると反応は少し遅いかもしれないが、慣れているのは、チームを率いる役割を担うプレイスタイルだ。最初からプレイしていた頃は、学生時代で、ギルドのベテランたちが一緒にプレイしていた。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今のゲームの環境は、どう言えばいいのか、落ち着きがなく、以前のような純粋さがない。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;レベルが上がってから、高レートの対局は本当に疲れる。常に高い集中力を維持し、相手の戦略を読み解き、相手の罠を解除する必要がある。まるで、終わったらもうやりたくないような感覚だ。&lt;/p&gt;
&lt;p&gt;本当は、プロの試合でなければ、あなたの腕前がどれだけすごいかどうかなんて、人生の方向性に影響はないんですよ。社交の場では利用できるかもしれませんが、生活を支えることはできませんし、社会に立つことも難しいでしょう。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;シングルプレイヤーゲームとオンラインゲームは、ゲームプレイ、体験、技術において著しい違いがある2つの異なる種類のゲームです。以下に、シングルプレイヤーゲームとオンラインゲームの違いを理解するための重要な側面を示します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;このゲームはローカルデバイスで単独でプレイでき、インターネット接続は不要です。プレイヤーはネットワーク接続なしにゲームを楽しめます。&lt;/li&gt;
&lt;li&gt;これらのゲームは通常、プレイヤー同士がリアルタイムでインタラクションするため、インターネット接続が必要です。オンラインゲームには、協力プレイや対戦プレイがあり、オンラインでの交流や競技性が含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;プレイヤーは主にゲーム内の人工知能、あらかじめ設定されたミッション、または敵対的な要素とインタラクトします。ゲーム体験は通常、よりパーソナライズされ、ゲームのデザインやストーリーに影響を受けます。&lt;/li&gt;
&lt;li&gt;プレイヤーは世界中の他のプレイヤーと交流できます。協力してミッションを完了したり、対立・競技を行ったり、チャットやギルドシステムなどのソーシャル要素を楽しんだりすることが可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ゲームデザインは、完全で独立したストーリーとゲーム体験の提供を重視する傾向がある。ゲーム内容は通常、事前に設計されており、プレイヤーはゲーム内で探索、パズル解決、または戦闘を行う。&lt;/li&gt;
&lt;li&gt;ゲームデザインは、リアルタイムのインタラクションとプレイヤー間の競争または協力に配慮する必要がある。ゲームの内容はより動的になり得るものであり、定期的なアップデート、オンラインイベント、ソーシャルインタラクションなどが含まれる場合がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通常、オフラインでも動作し、デバイスの性能やインターネット接続に対する要求は比較的低いです。&lt;/li&gt;
&lt;li&gt;強力なインターネット接続が必要であり、サーバーとネットワークのパフォーマンスにも高い要件があり、リアルタイムインタラクションのスムーズな進行を保証する。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通常は、一度購入またはダウンロードするビジネスモデルで、ゲームを購入すればローカルデバイスで完全にプレイできます。&lt;/li&gt;
&lt;li&gt;無料プレイ、広告、アイテム購入、またはサブスクリプションなど、複数のビジネスモデルを採用し、サーバー運営とゲームコンテンツの継続的なアップデートを維持する可能性がある。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの違いを理解することで、プレイヤーはゲーム選択時に自分の好みを確認でき、ゲームデザイナーはプレイヤーの期待に応えやすくなります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>クラウドサーバーとスクリプトキッド</title>
        <link>https://ttf248.life/ja/p/cloud-servers-and-script-kids/</link>
        <pubDate>Mon, 20 Nov 2023 15:08:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/cloud-servers-and-script-kids/</guid>
        <description>&lt;p&gt;ダブルイレブンに合わせてキャンペーンを実施中、アリババクラウドが新たにサーバーを入手しました。経済的なバージョンで、年間99元と安価です。スペックは高くありませんが、踏み台として自宅のサービスを代理するのにも適しています。キャンペーンは2026年まで続きます。&lt;/p&gt;
&lt;p&gt;上海エリアのサーバーを特別に選び、自宅のマシンに低遅延プロキシを設定しました。Windows 11とWindows Server 2022を使用していますが、Server版は後からデプロイしたものです。使用中にアクセス拒否のエラーを受けました。サーバーのアップデートだと思って待っていたのですが、5分後に再度試みると、やはりログインできず、関連するエラーを検索すると、「誰かがログインを試みているため、パスワードの入力回数が多すぎるため、現在ログインできません」というメッセージが表示されています。&lt;/p&gt;
&lt;p&gt;以前にもセキュリティ攻撃のスクリプトに触れたことがあり、すぐにこれらのログインは正常な行動ではないと察せられた。誰かがサービスを攻撃し、ログインサーバーをブルートフォースで破ろうとしているのだろう。サーバーのファイアウォール設定は手抜きで、ホワイトリストを設定していなかった。2台のマシンの3389ポートをプロキシしており、公衆ネットワークに晒されていた。まさに池の中の餌のようなものだ。スクリプトキッドが攻撃していることが分かったので、次の手順は簡単だ。ファイアウォールにホワイトリストを設定し、会社のIPアドレスと自宅のIPアドレスのみがプロキシサービスにアクセスできるようにする。&lt;/p&gt;
&lt;p&gt;以前はプロキシサーバー側に実行ログが設定されていなかったのですが、ログを有効にしたら見ていて面白いことになりました。全国各地のプロキシIPアドレスが私のサーバーへのログインを試みています。幸いなことに、server版のマシンがあったので問題に気づきました。そうでないと、win11 のマシンはいつか必ず突破されるところでした。パスワードの設定は比較的簡単でした。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [101.43.98.211:50486]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [218.93.202.63:56970]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.179.106.174:60812]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [58.16.204.238:2839]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [124.223.47.24:50274]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.248.128.22:55883]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.143.53.138:56955]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.228.7.250:61550]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [125.76.228.9:55842]
2023/11/17 16:51:17 [I] [proxy.go:204] [4dfcc2259937dcb9] [winserver-remote] get a user connection [91.240.118.187:49326]
2023/11/17 16:51:17 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [91.240.118.187:49324]
2023/11/17 16:51:17 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [89.248.163.79:51712]
2023/11/17 16:51:18 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [218.63.75.24:62387]
2023/11/17 16:51:19 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [103.186.109.227:51396]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [116.233.234.104:51567]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.187.193.202:51585]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [59.48.98.42:57489]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [146.56.241.134:53558]
2023/11/17 16:51:21 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.179.106.174:30620]
2023/11/17 16:51:23 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [183.14.214.51:62128]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ついでにLinuxサービスのログインログを確認したところ、アリババクラウドのこのマシン以外に、友人のHuawei Cloudのマシンもあった。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo grep &amp;quot;Failed password&amp;quot; /var/log/secure  centos系列
sudo grep &amp;quot;Failed password&amp;quot; /var/log/auth.log  ubuntu系列
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Nov 16 04:46:34 aliyun-sh sshd[156625]: Failed password for root from 120.55.164.64 port 53410 ssh2
Nov 16 04:46:34 aliyun-sh sshd[156623]: Failed password for root from 111.16.215.122 port 36548 ssh2
Nov 16 04:46:58 aliyun-sh sshd[156630]: Failed password for invalid user share from 139.9.233.78 port 53872 ssh2
Nov 16 04:47:23 aliyun-sh sshd[156634]: Failed password for invalid user spark from 139.9.233.78 port 36134 ssh2
Nov 16 04:47:26 aliyun-sh sshd[156636]: Failed password for root from 120.55.164.64 port 46142 ssh2
Nov 16 04:47:47 aliyun-sh sshd[156640]: Failed password for root from 111.16.215.122 port 42962 ssh2
Nov 16 04:48:24 aliyun-sh sshd[156652]: Failed password for root from 120.55.164.64 port 38868 ssh2
Nov 16 04:48:25 aliyun-sh sshd[156654]: Failed password for root from 111.16.215.122 port 46164 ssh2
Nov 16 04:48:39 aliyun-sh sshd[156657]: Failed password for invalid user test from 139.9.233.78 port 39386 ssh2
Nov 16 04:48:50 aliyun-sh sshd[156659]: Failed password for root from 111.16.215.122 port 38892 ssh2
Nov 16 04:48:53 aliyun-sh sshd[156662]: Failed password for root from 120.55.164.64 port 49348 ssh2
Nov 16 04:48:53 aliyun-sh sshd[156664]: Failed password for invalid user test from 139.9.233.78 port 49864 ssh2
Nov 16 04:50:02 aliyun-sh sshd[156672]: Failed password for root from 111.16.215.122 port 45294 ssh2
Nov 16 04:50:30 aliyun-sh sshd[156680]: Failed password for invalid user zabbix from 139.9.233.78 port 52206 ssh2
Nov 16 04:50:50 aliyun-sh sshd[156683]: Failed password for root from 120.55.164.64 port 34820 ssh2
Nov 16 04:50:51 aliyun-sh sshd[156685]: Failed password for root from 111.16.215.122 port 58978 ssh2
Nov 16 04:51:18 aliyun-sh sshd[156689]: Failed password for root from 120.55.164.64 port 45306 ssh2
Nov 16 04:51:25 aliyun-sh sshd[156692]: Failed password for root from 111.16.215.122 port 33938 ssh2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのHuawei Cloudの機械は起動してから時間が経っており、辞書攻撃の中盤に入りつつあり、色々な奇妙なユーザーが現れ始めている。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Nov 16 20:30:35 hecs-411458 sshd[182965]: Failed password for invalid user oeh from 39.129.9.180 port 26459 ssh2
Nov 16 20:32:17 hecs-411458 sshd[182967]: Failed password for invalid user dnu from 39.129.9.180 port 27079 ssh2
Nov 16 20:34:12 hecs-411458 sshd[182971]: Failed password for invalid user rq from 39.129.9.180 port 27742 ssh2
Nov 16 20:36:07 hecs-411458 sshd[182979]: Failed password for invalid user zw from 39.129.9.180 port 28415 ssh2
Nov 16 20:37:59 hecs-411458 sshd[182981]: Failed password for invalid user egi from 39.129.9.180 port 29068 ssh2
Nov 16 20:39:52 hecs-411458 sshd[182984]: Failed password for invalid user bjb from 39.129.9.180 port 29723 ssh2
Nov 16 20:41:53 hecs-411458 sshd[182988]: Failed password for invalid user hna from 39.129.9.180 port 30375 ssh2
Nov 16 20:43:46 hecs-411458 sshd[182994]: Failed password for invalid user gar from 39.129.9.180 port 31036 ssh2
Nov 16 20:45:40 hecs-411458 sshd[183003]: Failed password for invalid user mze from 39.129.9.180 port 31703 ssh2
Nov 16 20:47:35 hecs-411458 sshd[183007]: Failed password for invalid user tmh from 39.129.9.180 port 32381 ssh2
Nov 16 21:23:01 hecs-411458 sshd[183047]: Failed password for invalid user amax from 112.4.65.118 port 41188 ssh2
Nov 16 22:31:20 hecs-411458 sshd[183116]: Failed password for root from 211.228.203.123 port 60213 ssh2
Nov 16 22:53:44 hecs-411458 sshd[183162]: Failed password for root from 112.132.249.164 port 39272 ssh2
Nov 17 11:44:26 hecs-411458 sshd[184811]: Failed password for invalid user jsh from 43.157.103.27 port 54608 ssh2
Nov 17 11:47:23 hecs-411458 sshd[184818]: Failed password for invalid user mrunal from 43.157.103.27 port 50448 ssh2
Nov 17 11:48:46 hecs-411458 sshd[184820]: Failed password for invalid user robertsheen from 43.157.103.27 port 50560 ssh2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;自作サーバーの開発ですが、Windows の公衆網アクセスにはホワイトリスト設定が必要で、Linux ではパスワードログインを禁止し、秘鍵ファイルによるログインを推奨します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>一括でローカルGitリポジトリと、過去の権限問題を更新する。</title>
        <link>https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/bulk-update-local-git-repository-and-legacy-permission-issues/</guid>
        <description>&lt;p&gt;チーム内のプロジェクト間には依存関係があり、過去の経緯から&lt;code&gt;submodule&lt;/code&gt;を用いて依存関係を維持していないため、日々の開発では倉庫コードを手動で順番に更新する必要がある。そうしないと、様々な奇妙な問題が発生する可能性がある。&lt;/p&gt;
&lt;p&gt;オンラインの資料を参考に、構造は基本的に類似しているので、ローカルで手動で倉庫ディレクトリ &lt;strong&gt;git_list.txt&lt;/strong&gt; を維持し、スクリプトを作成してディレクトリをトラバースさせ、一度実行して更新した後、作業前にスクリプトを実行する。&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ 更新仓库 ===================&amp;quot;

# 检查 git_list.txt 是否存在
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。&amp;quot;
  exit 1
else
  echo &amp;quot;============ 检测到了 git 仓库清单文件 ====&amp;quot;
fi

# 逐行读取 git_list.txt 中的 URL，并执行拉取操作
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url 完成！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;目录 $url 不存在，跳过拉取。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;windows
&lt;/h2&gt;&lt;p&gt;create a new file: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem 进入脚本所在目录
cd /d &amp;quot;%~dp0&amp;quot;

rem 检查 git_list.txt 是否存在
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。
  exit /b 1
) else (
  echo ============ 检测到了 git 仓库清单文件 ====
)

rem 逐行读取 git_list.txt 中的 URL，并执行拉取操作
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i 完成！
    echo ========================================
  ) else (
    echo 目录 %%i 不存在，跳过拉取。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;歴史的遺棄問題&#34;&gt;歴史的遺棄問題
&lt;/h3&gt;&lt;p&gt;システム再インストール後に遭遇した「unsafe repository (&amp;rsquo;/home/repon&amp;rsquo;は他のユーザーが所有している)」という致命的なエラーについて。&lt;/p&gt;
&lt;p&gt;オンラインで推奨されている方法は、主に__INLINE_CODE_0__に由来します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;倉庫ディレクトリへの信頼追加: &lt;code&gt;git config --global --add safe.directory /home/repon&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;手動で設定ファイルを変更し、信頼ディレクトリを指定してください。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;処理後、倉庫の更新は正常になりましたが、毎回 __INLINE_CODE_0__コンソールで多数の警告メッセージが表示され、ユーザー所有者のエラーが示されています。&lt;/p&gt;
&lt;h3 id=&#34;デスクトップのosを入れ替える&#34;&gt;デスクトップのOSを入れ替える
&lt;/h3&gt;&lt;p&gt;開発した機械、久しぶりにOSを入れ直したらシステムファイルが爆発してどうしようもない状態に。仕方なくOSを入れ直したが、また同じ権限の問題が発生し、以前のスクリプトが動かない。権限の設定が不完全だったようだ。&lt;/p&gt;
&lt;p&gt;新しいプランを使用し、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;，这样__INLINE_CODE_1__を追加すると、すべてのディレクトリが自動的に信頼されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;不明な問題です。ユーザー権限の問題か、皆が&lt;code&gt;windows&lt;/code&gt;平台其实也有类似&lt;code&gt;chown&lt;/code&gt;のコマンドに慣れていないのか。フォルダの所有者を変更する必要がある場合、ディレクトリが少ないなら手動で変更することもできます。しかし、このワークステーションにはドメイン情報が追加されており、会社のドメインに異常があるか、ローカルシステムの設定に異常があるかわかりません。ユーザーリストにログインに使用しているユーザーが見つからず、最終的にはコマンドラインで処理しました。&lt;/p&gt;
&lt;p&gt;管理者権限で、&lt;code&gt;powershell&lt;/code&gt;BOLD_3&lt;code&gt;change_ower.ps1&lt;/code&gt;，记得调整脚本文件编码为&lt;code&gt;gbk&lt;/code&gt;を実行し、中国語のオペレーティングシステムを使用してください。そうしないと文字化けします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 获取当前用户的用户名
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# 设置 PowerShell 的字符编码为 UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 要更改所有者的根目录路径
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 替换为实际的目录路径

# 递归遍历目录并更改文件和文件夹的所有者
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # 检查是文件还是文件夹
    if ($_ -is [System.IO.DirectoryInfo]) {
        # 如果是文件夹，使用 icacls 更改所有者权限
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        # 如果是文件，使用 icacls 更改所有者权限
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;已更改文件 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;予期せぬ事態が発生し、スクリプト実行時の中国語情報が文字化けしてしまいました。コンソール文字エンコーディングやスクリプトのエンコードを調整しても改善せず、頭が働いていないような状態でした。コントロールパネルの地域-言語設定のベータ機能を試し、グローバルにUnicodeエンコードを有効にしたところ、スクリプトは正常に動作するようになりました。しかし、複数の開発ソフトウェアが正常に機能しなくなりました。後で資料を整理したところ、スクリプトファイルのエンコードを &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; に設定する必要があることに気づきました。&lt;/p&gt;
&lt;h2 id=&#34;資料&#34;&gt;資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>WPF学習資料</title>
        <link>https://ttf248.life/ja/p/wpf-learning-resources/</link>
        <pubDate>Tue, 17 Oct 2023 10:49:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wpf-learning-resources/</guid>
        <description>&lt;p&gt;未着手の小さなプログラム開発のバグがまだ埋まっていないのに、新たに一つ&lt;strong&gt;WPF&lt;/strong&gt;を作り出してしまい、最近は社内も不安定な状況。リモートでの共同作業やコミュニケーションは効率が悪く、思い切ってクライアント側のUI開発を引き受けた。&lt;/p&gt;
&lt;h2 id=&#34;wpf&#34;&gt;WPF
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;推奨 リンク：&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8&amp;amp;preserve-view=true&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 微软官网学习资料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;道を&lt;strong&gt;極め&lt;/strong&gt;、基礎となる枠組みの概念を&lt;strong&gt;理解&lt;/strong&gt;すれば、その後の道は容易に迷うことはない。&lt;/p&gt;
&lt;p&gt;以前に__INLINE_CODE_0__BOLD_2&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zh7791/p/11502696.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 基础总结(学习建议)&lt;/a&gt;がありましたが、内容は短く、経験豊富な読者の学習ルート設計に適しています。&lt;/p&gt;
&lt;p&gt;初心者向けには、&lt;a class=&#34;link&#34; href=&#34;http://www.wpfsoft.com/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 中文网&lt;/a&gt; をおすすめします。基礎概念から始まり、発展の歴史、そして基盤となるクラスの認知論まで、ゼロから解説しています。このサイトもまた偶然の良いタイミングでした。今年の8月に作者が公開したもので、読者のコース購入を目的としていますが、こちらのスケジュールとちょうど合致しました。もう少し遅れていたら、おそらく縁はなかったでしょう。&lt;/p&gt;
&lt;p&gt;最も信頼できる学習資料は、もちろんマイクロソフトの公式サイトのものですが、やや退屈なので、新しい読者は辛抱強く学ぶ必要があります。&lt;/p&gt;
&lt;p&gt;古典的な電子書籍も多いですが、あまりおすすめできません。日々の仕事が忙しく、じっくり読書する時間がなかなか取れません。そのため、集中して読むのは難しいため、プロジェクト演習の方が向いています。&lt;/p&gt;
&lt;h2 id=&#34;c-と-net-のリリース履歴&#34;&gt;C# と .NET のリリース履歴
&lt;/h2&gt;&lt;p&gt;以前学習した言語に比べると、ここ数年で新機能のリリースが少し多くなり、文法も毎年バージョンアップされている。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;公式学習資料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/csharp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/csharp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>金融汚職の幕開け</title>
        <link>https://ttf248.life/ja/p/financial-anti-corruption-curtain/</link>
        <pubDate>Mon, 09 Oct 2023 14:53:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/financial-anti-corruption-curtain/</guid>
        <description>&lt;p&gt;中国共産党中央政治局：国有企業や金融分野における腐敗防止を強化し、「四風」の根絶を徹底する。&lt;/p&gt;
&lt;h2 id=&#34;中国共産党中央政治局&#34;&gt;中国共産党中央政治局
&lt;/h2&gt;&lt;p&gt;中共中央政治局9月27日召开会议，审议《关于二十届中央第一轮巡视情况的综合报告》。中共中央总书记习近平主持会议。会议强调，要以巡视整改为契机，进一步加强党的全面领导，督促被巡視党组织提高政治站位，认真履行党中央赋予的职责使命，不断增强国有企业核心功能和核心竞争力，夯实中国特色社会主义的重要物质基础和政治基础，加大金融企业服务实体经济和国家战略力度，推动高质量发展。要统筹发展和安全，树牢底线思维、极限思维，采取有力措施防范化解重大风险，牢牢守住安全底线。要推动全面从严治党向纵深发展，压紧压实党委（党组）书记第一责任人责任、领导班子成员“一岗双责”、纪检监察机构监督责任，突出加强对各级“一把手”的监督，加大国有企业、金融领域反腐败力度，深入纠治“四风”，深化以案促改、以案促治，一体推进不敢腐、不能腐、不想腐。要认真贯彻新时代党的组织路线，加强领导班子建设、干部人才队伍建设和基层党组织建设。要综合用好巡视成果，深化改革、完善制度，推进源头治理，促进标本兼治。（新华社） 中共中央政治局は9月27日、会議を開催し、《第20期中央第一輪の視察状況に関する総合報告》を審議した。中国共産党中央委員会総書記の習近平が会議を主催した。会議では、視察の整改を契機として、党の全面的指導をさらに強化し、視察を受けた党組織に対し、政治的地位向上と党中央から委託された職務・使命の真実な履行を促し、国有企業の核心機能と核心競争力を不断に高め、中国特色社会主義の重要な物質基盤と政治基盤を築き、金融機関による実体経済及び国家戦略へのサービスを強化し、高品質な発展を推進することが強調された。開発と安全を総合的に考慮し、底線思考・限界思考を確立し、強力な措置により重大リスクを未然に防ぎ、安全の底線をしっかりと守る必要がある。全面からの厳格な党指導を深化させ、党委（党組）书记の第一責任者としての責任、指導陣員の「一岗双责」、紀律検査・監察機関の監督責任を強化し、各級の「一把手」に対する監督を強化し、国有企業及び金融分野における腐敗防止を強化し、徹底的に「四風」を是正し、「以案促改」「以案促治」を深化させ、腐敗しない、できない、欲しないという一体化を進めることが求められた。新時代の党の組織路線を真に実行し、指導陣の建設、幹部人材育成、及び基层党組織の建設を強化する必要がある。視察成果を総合的に活用し、改革を深化させ、制度を改善し、源頭からの治理を推進し、根本と表面の両方を同時に解決することが求められた。（新華社）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深刻な金融リスクを引き起こす！ 中国銀行 元党委書記・会長 劉連舸氏が党籍剥奪処分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中国銀行前党委書記・会長の劉連舸氏に対し、厳重な規律違反及び違法行為の問題で、中共中央の承認を得て、中央紀律検査委員会が立案調査を行った。
厳格な調査の結果、劉連舸は理想と信念を喪失し、初心と使命を背棄しました。党中央の決定・方針に不十分かつ割引くように対応し、金融リスクの予防責任を放棄し、大規模な違法介入による融資プロジェクトへの介入、違法な融資実行により重大な金融リスクを生じさせました。また、全面的な厳格な党内統治における主体としての責任が不適切であり、所在地の政治環境を深刻に破壊しました。さらに、禁書を不正に持ち込み組織の調査に抵抗しようと画策し、中央八項規定精神を無視し、違法的に贈与品や資金を受け取り、私的なクラブに出入りし、スキーや旅行の手配を受けました。長期間、管理対象車両を無断で借用し、個人に関する事項を定められた通り報告せず、組織からの問い合わせに対し真実を説明せず、私情により人事の採用・昇進を行いました。また、違法に事業経営を行い、資金融資への不正介入、機密資料の不正保持など、道徳が退廃し、家族風紀も正していません。規律と法律の底線がなく、権力を乱用し、「金融に頼り金融で利益を得る」という手法を用い、職務上の便宜を利用して他人に対し融資・資金調達、プロジェクト協力などの面で利益を追求し、不正な巨額の財産を受け取っています。&lt;/p&gt;
&lt;p&gt;劉連舸は、党の政治規律、組織規律、清廉規律、勤務規律及び生活規律を著しく違反し、重大な職務上の違法行為を行い、収賄や不正な融資供与犯罪に関与した。十八大以降も是正せず、事態は深刻で、悪影響を及ぼしているため、厳格な処分が必要である。党紀処分条例、中華人民共和国監察法、中華人民共和国公務員政務処罰法等の関連規定に基づき、中央規律検査委員会の常務委員会会議での検討を経て中共中央の承認を得た結果、劉連舸に対し除名処分を下すことが決定された。待遇は失われ、第二十党大会代表資格も終了する。違規・違法所得を没収し、犯罪に関与した問題については検察機関へ移送し、法に基づき捜査及び起訴を行い、関係財産についても併せて移送する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中国光大集团原党委书记、董事长李晓鹏严重违紀違法に問われ、党籍と公職を剥奪された。（中央電視台報道）&lt;/li&gt;
&lt;li&gt;中国共産党中央規律検査委員会国家監察委員会ウェブサイトの報道によると、貴州省紀律検査委員会監察委員会の情報：貴州銀行元党委書記・董事长李志明は重大な不正行為及び違法行為に関与した疑いが現にあり、現在貴州省紀律検査委員会監察委員会の懲戒処分及び捜査を受けている。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;八年の時を経て匯金は四大銀行への出資を増強&#34;&gt;八年の時を経て、匯金は四大銀行への出資を増強。
&lt;/h2&gt;&lt;p&gt;10月11日、中国工商銀行、農業銀行、中国銀行、建設銀行の四大国有商業銀行はそれぞれ発表したところによると、匯金公司による株式増加がそれぞれ2761万株、3727万株、2489万株、1838万株に達した。匯金公司は今後6ヶ月間も、引き続き二次市場での株式増加を計画している。&lt;/p&gt;</description>
        </item>
        <item>
        <title>抽選による収益化モデル</title>
        <link>https://ttf248.life/ja/p/traffic-monetization-business-models-lottery/</link>
        <pubDate>Tue, 19 Sep 2023 07:04:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/traffic-monetization-business-models-lottery/</guid>
        <description>&lt;p&gt;配信者がiPhoneをプレゼント？ミニプログラムのランキング報酬？様々なライブ配信プラットフォームでのギフト抽選？&lt;/p&gt;
&lt;p&gt;上記３つは、一見すると関連性が薄いように見えるが、本質的には無料トラフィックのマネタイズという異なるモデルであり、金融ゲームのようなニュアンスがある。&lt;/p&gt;
&lt;h2 id=&#34;プラットフォームでの抽選でプレゼントを獲得&#34;&gt;プラットフォームでの抽選でプレゼントを獲得
&lt;/h2&gt;&lt;p&gt;通常のシナリオでは、ユーザーはプラットフォームの通貨をリセットし、気に入った配信者にギフトを贈り、各プラットフォームには別のゲームプレイがあります。ユーザーがプラットフォームの通貨を取得した後、直接ギフトを送るのではなく、一定量の通貨を使って抽選に参加し、限定の高額ギフトを獲得します。&lt;/p&gt;
&lt;p&gt;すでに問題が発生していますね。オンライン抽選はプラットフォームがカジノを運営しているのと同様で、参加者が多ければ必ず利益が出ます。&lt;strong&gt;屌丝&lt;/strong&gt;ユーザーは一発当てようと、高額な賞金を手に入れて、プレゼントをして、面子を保ち、大物になることを夢見ています！&lt;/p&gt;
&lt;h2 id=&#34;配信者からのプレゼント物実体&#34;&gt;配信者からのプレゼント（物実体）
&lt;/h2&gt;&lt;p&gt;上記プラットフォームの抽選は、ユーザー自身の投稿を対象としています。配信者は毎月、視聴者数やギフトに関するタスクがあります。ギフト抽選機能を有効にすると、ファンが特定のギフトまたは一定額のギフトを送ることで抽選に参加でき、賞品は高級スマートフォンや現金などが考えられます。&lt;/p&gt;
&lt;p&gt;人気配信者にとっては、このイベントは非常に儲かる。一時的な無料キャンペーンのようなもので、参加者が十分なため、配信者も稼げる。ここが配信者の運営能力を試すことになる。&lt;/p&gt;
&lt;p&gt;もちろん、まだ別のやり方もあります。高い報酬（現金価値）がもらえるので、多くの屋外配信者がこの方法で、一種のオンラインギャンブルをしているのです。視聴者はライブの内容には興味がなく、ただ自分が当たるかどうかだけに気を配っています。&lt;/p&gt;
&lt;p&gt;ショータイプ以外の配信者で、PKモードを利用してファンに課金やチャージを促しても、普通のゲーム配信者はプレイヤーの消費意欲を高めるのは難しい。ゲームをプレイしたり配信を見たりするのは娯楽であり、余計な出費はしたくないという心理が働く。特に抽選方式は、課金習慣や消費習慣を育み、時折衝動買い（多くの賞品を用意し、当選したいという気持ち）につながる可能性がある。&lt;/p&gt;
&lt;h2 id=&#34;ミニプログラムランキング報酬&#34;&gt;ミニプログラムランキング報酬
&lt;/h2&gt;&lt;p&gt;小さなプログラムを設計し、あまり役に立たないプロセスをいくつか導入するか、ゲーム関連の補助サービスを提供する。これらはすべてごまかしで、テンセントの審査に通過するために、ランキング機能をプログラム内の遊びに取り入れる。ユーザーは奨励広告を閲覧し、タスクを完了し、ポイントを獲得する。バックエンドでは、これらのポイントに基づいてランキングを設定し、上位ユーザーには指定された報酬を与える。&lt;/p&gt;
&lt;p&gt;広告収入 &amp;gt; 運営コスト + 報酬費用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ミニプログラムも、適切なサービスを提供し、適度な広告で収入を得ることで、正常に稼働できます。 大きな収入とは限りませんが、わずかながらでも、それなりに可能です。&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>分散型LAN ZeroTier</title>
        <link>https://ttf248.life/ja/p/zero-tier-remote-lan/</link>
        <pubDate>Tue, 19 Sep 2023 04:58:03 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/zero-tier-remote-lan/</guid>
        <description>&lt;p&gt;オフィスに新しい&lt;code&gt;mini&lt;/code&gt;主机，想着配置配置环境方便，在家偶尔也有访问的需求，临时部署内网穿透。按照以往的经验，部署&lt;code&gt;frp&lt;/code&gt;服务，指定端口转发，需要一台公网的服务器，连接的质量取决于公网服务器的宽带质量。折腾一点新鲜的&lt;code&gt;Zerotier&lt;/code&gt;虚拟机局域网，类似于&lt;code&gt;VPN&lt;/code&gt;を購入し、ローカルで仮想NICを作成しました。すべてのマシンを仮想ネットワークに参加させました。&lt;/p&gt;
&lt;h2 id=&#34;zerotierとは&#34;&gt;Zerotierとは？
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ZeroTier&lt;/code&gt;BOLD_3&lt;code&gt;SD-WAN&lt;/code&gt;）解决方案，它允许用户在不同地理位置的设备之间创建安全的虚拟网络。通过&lt;code&gt;ZeroTier&lt;/code&gt;、複数のコンピューター、サーバー、デバイスをあたかも同一のローカルネットワークに接続されているかのように、仮想的で暗号化されたネットワークに簡単に接続できます。これにより、プログラマーやIT専門家は、複雑なネットワーク設定やVPN構成なしに、異なる場所間で安全にデータとリソースを共有できます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ゼロタイアーネットワークは、インターネット経由で様々なデバイスを接続し、あたかも同一の物理ネットワークにいるかのように動作する、仮想的なグローバルなローカルエリアネットワークです。複数のサブネットを含み、すべてのデバイスはゼロタイアーの技術によって接続されています。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;惑星サーバーはZerotierネットワークの重要な構成要素の一つです。グローバル規模で動作し、Zerotierネットワーク全体のトポロジー構造、ルーティング情報、およびネットワーク状態を維持・管理します。惑星サーバーはネットワーク全体を制御する中心的な役割を果たしますが、データ転送は直接行いません。ユーザーデバイスがZerotierネットワークに参加するには、少なくとも1つの惑星サーバーに接続する必要があります。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;転送サーバーはZerotierネットワークにおける補助ノードであり、デバイス間のダイレクト接続を確立するのに役立ちます。デバイスが直接接続できない場合、転送サーバーを通じてデータを送信できます。これにより、ネットワークの到達性とパフォーマンスが向上します。転送サーバーは通常、世界中に配置され、データ伝送の中継地点として機能します。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全体として、Zerotierは、惑星サーバーとリレーサーバーの協力を通じて、世界中で仮想ローカルエリアネットワークを構築し、デバイス間の安全かつ高速な通信を実現します。惑星サーバーはグローバルネットワーク管理を担当し、リレーサーバーは必要に応じてデバイス間の通信接続を支援します。&lt;/p&gt;
&lt;h2 id=&#34;インストールとデプロイ&#34;&gt;インストールとデプロイ
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ZeroTier の公式サイト（&lt;a class=&#34;link&#34; href=&#34;https://www.zerotier.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zerotier.com/&lt;/a&gt;）からインストールファイルとドキュメントを入手してください。&lt;/li&gt;
&lt;li&gt;お客様のオペレーティングシステムに合わせて、ZeroTier Oneクライアントをダウンロードしてインストールしてください。Windows、macOS、Linuxなど、多くのプラットフォームに対応しています。&lt;/li&gt;
&lt;li&gt;インストール後、ZeroTier Oneクライアントを起動してください。&lt;/li&gt;
&lt;li&gt;ZeroTierアカウントを登録してください。まだアカウントをお持ちでない場合は。クライアントで作成できます。&lt;/li&gt;
&lt;li&gt;ZeroTierアカウントにログインし、新しいネットワークを作成してください。ネットワークには一意の16桁のIDが割り当てられ、覚えておく必要があります。&lt;/li&gt;
&lt;li&gt;デバイスにこのネットワークを追加してください。クライアントでネットワークIDを入力するか、QRコードスキャン機能を使用できます。&lt;/li&gt;
&lt;li&gt;ZeroTierクライアントをインストールして設定したデバイスは、同じ仮想ネットワークに追加されます。これらのデバイス間では、あたかも同一のローカルエリアネットワークに接続されているかのように直接通信できるようになります。&lt;/li&gt;
&lt;li&gt;ZeroTierのコントロールパネルで、ネットワーク設定の管理、デバイスの追加、ネットワークトラフィックの監視などが行えます。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;インストールとデプロイ-moon&#34;&gt;インストールとデプロイ moon
&lt;/h2&gt;&lt;p&gt;国内の通信事業者は多くの場合、それを禁止しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -s https://install.zerotier.com/ | sudo bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インストールが成功したか確認してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ローカルネットワークに参加する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli join network-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /var/lib/zerotier-one &amp;amp;&amp;amp; sudo zerotier-idtool initmoon identity.public &amp;gt; moon.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定ファイルを編集し、__INLINE_CODE_0__ノードを &amp;ldquo;サーバーのパブリックIP/9993&amp;rdquo; に調整します。&lt;/p&gt;
&lt;p&gt;署名設定を生成し、&lt;code&gt;moons.d&lt;/code&gt;フォルダを作成。既存ファイルをそこに移動後、サービスを再起動してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo zerotier-idtool genmoon moon.json
mkdir moons.d &amp;amp;&amp;amp; mv 000000eb444ec0d8.moon moons.d/
systemctl restart zerotier-one.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;クライアントノードはmoonサーバーに参加し、IDはJSON設定ファイル内のidフィールドから取得します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli.bat orbit ztaddr ztaddr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 观察是否出现新的 mooon 节点，id 和信息为服务器配置的相同
[root@idv-36f9d5 ~]# zerotier-cli listpeers
200 listpeers &amp;lt;ztaddr&amp;gt; &amp;lt;path&amp;gt; &amp;lt;latency&amp;gt; &amp;lt;version&amp;gt; &amp;lt;role&amp;gt;
200 listpeers 0cccb***** 35.236.*.*/64393;110;10726 327 1.6.3 LEAF
200 listpeers 3a46f***** 185.180.*.*/9993;110;757 -1 - PLANET
200 listpeers 3ed7c***** 39.97.*.*/9993;172;79 32 1.6.3 MOON
200 listpeers 4f838***** - -1 - LEAF
200 listpeers 62f86***** 50.7.*.*/9993;110;4796 351 - PLANET
200 listpeers 778cd***** 103.195.*.*/9993;5148;4887 253 - PLANET
200 listpeers 992fc***** 195.181.*.*/9993;10161;4921 226 - PLANET
200 listpeers 9d2b5***** - -1 - LEAF
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows プラットフォームでは管理者権限でターミナルを起動し、zerotier-cli.bat コマンドライン操作を行い、Linux プラットフォームでは zerotier-cli 操作を行います。peers サブコマンドで接続状況を確認し、listpeers で全てのノードを表示します。&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; ノードが表示される場合、正常に加入したことを示します。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;どうやってアンインストールしますか&#34;&gt;どうやってアンインストールしますか。
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;斜体&lt;/em&gt;&lt;strong&gt;太字&lt;/strong&gt;&lt;em&gt;斜体&lt;/em&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dpkgでzerotier-oneサービスを削除します。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dpkg -P zerotier-one
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;ゼロタイアーワンのフォルダを削除してください。このフォルダにはアドレスが保存されており、削除後に再インストールすると新しいアドレスが割り当てられます。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo rm -rf /var/lib/zerotier-one/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;元々全てアンインストール済みで、サーバーが到着したものの、適切なプロキシノードとなるサービスがなく、アリババクラウドが業績のために開発限定サーバーを提供してきた。スペックは高くなく、年間99元と手頃な価格だったため、2年ほど利用している。重視したのは、サーバーの提供する帯域幅だ。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.wnark.com/archives/152.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.wnark.com/archives/152.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Yogile/p/12642423.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/Yogile/p/12642423.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>VMware仮想マシンディスクスペース最適化</title>
        <link>https://ttf248.life/ja/p/vmware-virtual-disk-space-optimization/</link>
        <pubDate>Wed, 21 Jun 2023 18:35:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/vmware-virtual-disk-space-optimization/</guid>
        <description>&lt;p&gt;仮想機をインストールする際、開発システムでは通常、ディスクスペースを多めに確保しますが、使用期間が長くなると、ローカルで占有するディスク容量は仮想ファイルの実際のコンテンツを大幅に上回ることがあります。&lt;/p&gt;
&lt;h2 id=&#34;シーン描写&#34;&gt;シーン描写
&lt;/h2&gt;&lt;p&gt;指示に従い、現在のマシンのディスク情報を確認したところ、実際に使用しているのは60GB。全てのスナップショットとクローンイメージを削除しても、ローカル仮想マシンが占有するディスクスペースは依然として60GBを大幅に超えており、すでに逼迫していたハードディスクの負担をさらに増やしてしまった。&lt;/p&gt;
&lt;h2 id=&#34;前提条件&#34;&gt;前提条件
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;仮想マシンをインストールする際に、プリ割り当てディスクのチェックボックスにチェックが入れられていませんでした。&lt;/li&gt;
&lt;li&gt;仮想マシンの保存に使用するディスクの空き容量が、現在の仮想マシンが使用している容量よりも大きいこと。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;残りのスペースが足りないため、一時的に仮想マシンを外付けHDDに移動し、ディスクを最適化した後に移行に戻すことを検討してください。&lt;/p&gt;
&lt;h2 id=&#34;道具&#34;&gt;道具
&lt;/h2&gt;&lt;p&gt;公式パッケージが提供されており、yumでインストールするか、VMware Toolsイメージパッケージでインストールできます。&lt;/p&gt;
&lt;h2 id=&#34;命令&#34;&gt;命令
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vmware-toolbox-cmd disk shrink /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行後、仮想マシンは自動的にシャットダウンされ、VMwareホストプログラムがディスクの圧縮を実行します。処理時間は、仮想マシンのサイズとディスクアクセス速度に依存します。&lt;/p&gt;
&lt;p&gt;仮想マシンのディスク領域の使用量は、基本的に__INLINE_CODE_0__のディスク情報とほぼ等しいです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Stable Diffusion - ゼロからのインストールとその顛末</title>
        <link>https://ttf248.life/ja/p/stable-diffusion-zero-install-saga/</link>
        <pubDate>Thu, 13 Apr 2023 00:23:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/stable-diffusion-zero-install-saga/</guid>
        <description>&lt;p&gt;国内の資料は、基本的に&lt;strong&gt;秋叶&lt;/strong&gt;氏の一括デプロイパッケージを推奨している。__INLINE_CODE_0__ベースのオープンソースプロジェクトなので、導入もそれほど複雑ではないはずだ。ゼロからやってみるか。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI生成画像の作成のために、わざわざグラフィックカードを交換したのに、__INLINE_CODE_0__入门版本；服役七年的__INLINE_CODE_1__してしまった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要の暗号化は依然として有効になっていません。&lt;/p&gt;
&lt;h2 id=&#34;未処理&#34;&gt;未処理
&lt;/h2&gt;&lt;p&gt;PyTorchの紹介、バージョン対応関係、バージョン確認方法について、改めて構成を見直します。
ローカル環境で仮想環境を新たに作成し、PyTorch をデプロイする方法は？
翻訳資料、ゼロから始めるStable Diffusion &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;
資料を整理する。&lt;/p&gt;
&lt;h2 id=&#34;手順&#34;&gt;手順
&lt;/h2&gt;&lt;p&gt;中国語で検索しても、ステップバイステップのインストールチュートリアルが見つからないかもしれません。まず、リポジトリをダウンロードし、スクリプトをダブルクリックすれば完了です。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;詳細な使用方法とFAQについては、&lt;strong&gt;&lt;em&gt;このページ&lt;/em&gt;&lt;/strong&gt; を参照してください。&lt;/p&gt;
&lt;p&gt;なぜか誰もこの倉庫が何なのかを説明してくれない。名前からでもわかるように、これはインターフェースコンソールで、使う私たちにとってより便利になるはずだ。実際、インストール時に公式リポジトリの内容をダウンロードし、実際の__INLINE_CODE_0__コードを入手する。&lt;/p&gt;
&lt;p&gt;倉庫でも、インストール起動スクリプトを作成しました。現在のフォルダに__INLINE_CODE_0__虚拟环境。如果有的话默认使用当前路径的的__INLINE_CODE_1__があるかどうかを自動的に識別します。&lt;/p&gt;
&lt;p&gt;もし完全に初心者の方でしたら、こちらをご覧ください：&lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;pytorch
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ここに私が今日話したいことの肝心な点があります。まず、彼らの手順に従ってスクリプトを直接起動しないでください。Pythonはrequirementファイルで依存ライブラリをインストールするので、これは些細な問題です。重要なのは、GPUドライバのバージョンとPyTorchが対応していることです。これについては多くの情報があり、ネット検索すればすぐに見つかります。&lt;/p&gt;
&lt;p&gt;参考：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_40660408/article/details/129896700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_40660408/article/details/129896700&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仮想環境を作成し、そこに公式サイトのスクリプトを実行してPyTorchをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.version.cuda)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.__version__, torch.cuda.is_available())&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記の2つのスクリプトで、インストールするCUDAのバージョンを確認したり、インストールが成功したかどうかをチェックできます。&lt;/p&gt;
&lt;p&gt;ここでは、凝った操作は推奨しません。まずは公式ページのロジックに従ってコピーし、そのままインストールしてください。pipでインストールしようとすると、うまくいかないか、CUDAが有効にならない可能性が高いです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;フォルダのパスに余計なものが含まれていると、PyTorchが正常に動作しない可能性があります。&lt;/p&gt;
&lt;p&gt;何度か試行錯誤し、公式のインストールファイルをダウンロードして手動でインストールも試しました。2.0へのアップデートを考えていたのですが、公式ドキュメントには2.0の方が速度が速いと書いてありました。しかし、以前からあまり使っていなかったので、Pythonのバージョンやそれが影響しているのかはわかりません。途中で公式のマニュアルを確認したところ、3.8の使用が推奨されています。そこで少し競合が発生しました。以前はワンクリックインストールパッケージを使用しており、その中には3.10のバージョンが含まれていたためです。最終的には、最初からやり直して、まず新しいフォルダを作成し、仮想環境を作成し、torchが正常にインストールされていることを確認しました。&lt;/p&gt;
&lt;p&gt;インストールした仮想環境を、Web UIのフォルダに移動してください。その後でスクリプトによるインストールを行うと、依存関係の問題はほとんどなくなります。&lt;/p&gt;
&lt;p&gt;移動後に、python -m pip install &amp;ndash;upgrade &amp;ndash;force-reinstall pip を実行して、pipを修正する必要があります。&lt;/p&gt;
&lt;p&gt;見た目はなんだか不可解に見えるかもしれませんが、この場所でかなり色々試しました。原因を特定するため、torchが正しく認識されない問題を解決するために、他の依存関係のインストール前にまずこれをインストールするという手順にしました。&lt;/p&gt;
&lt;h2 id=&#34;xformers&#34;&gt;Xformers
&lt;/h2&gt;&lt;p&gt;推奨します。画像生成を高速化し、既存の占有量を削減できます。副作用は、同じパラメータグループで &lt;strong&gt;生成的图像相对不是那么稳定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stable-diffusion-webui:Xformers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/diffusers/optimization/xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huggingface optimization&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Optimization Ratio&lt;/th&gt;
&lt;th&gt;Time taken&lt;/th&gt;
&lt;th&gt;Torch active/reserved&lt;/th&gt;
&lt;th&gt;Sys VRAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100.00%&lt;/td&gt;
&lt;td&gt;2m 57.03s&lt;/td&gt;
&lt;td&gt;7440/10058 MiB&lt;/td&gt;
&lt;td&gt;12288/12288 MiB (100.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;51.02%&lt;/td&gt;
&lt;td&gt;1m 29.21s&lt;/td&gt;
&lt;td&gt;4547/7164 MiB&lt;/td&gt;
&lt;td&gt;9298/12288 MiB (75.67%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;((masterpiece)),((best quality)),((high detial)),((realistic,))
Industrial age city, deep canyons in the middle,chinese architectural streets,bazaars, Bridges, (rainy days:1.2), (steampunk:0.8), chinese architecture
Negative prompt: nsfw,((cowboy)),(((pubic))), ((((pubic_hair))))sketch, duplicate, ugly, huge eyes, text, logo, monochrome, worst face, (bad and mutated hands:1.3), (worst quality:2.0), (low quality:2.0), (blurry:2.0), horror, geometry, bad_prompt, (bad hands), (missing fingers), multiple limbs, bad anatomy, (interlocked fingers:1.2), Ugly Fingers, (extra digit and hands and fingers and legs and arms:1.4), crown braid, ((2girl)), (deformed fingers:1.2), (long fingers:1.2),succubus wings,horn,succubus horn,succubus hairstyle, (bad-artist-anime), bad-artist, bad hand, borrowed character, text focus, watermark, sample watermark, character watermark, lofter username, photo date watermark, movie poster, magazine cover, journal, cover, cover page, doujin cover, album cover, manga cover, brand name imitation, EasyNegative,Tights, silk stockings,shorts
Steps: 35, Sampler: DPM adaptive, CFG scale: 5.5, Seed: 2223996555, Size: 1088x1088, Model hash: 543bcbc212, Model: base_Anything-V3.0-pruned, Clip skip: 2, ENSD: 31337
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;一鍵デプロイパッケージではなく、なぜ推奨されないかというと、そのパッケージには作者が独自にカスタマイズした設定が含まれており、公式のオリジナルとは異なるからです。初心者の方は、なぜパラメータを設定する必要があるのか理解できないかもしれませんが、まずは公式のものを使用するのが最善です。使用時間が長くなるにつれて、公式のマニュアルを参考にすると、どのパラメータを調整すればよいか分かるようになります。&lt;/p&gt;
&lt;h2 id=&#34;グラフィックカードの選択&#34;&gt;グラフィックカードの選択
&lt;/h2&gt;&lt;p&gt;データ通貨マイニング後のこと、グラフィックカードの価格は相対的にそれほど高くないので、普通の初心者であれば、VRAMも十分でしょう。&lt;/p&gt;
&lt;p&gt;まだ一点、&lt;strong&gt;高清放大&lt;/strong&gt;オプションは、細部を具体化し、画面のディテールをより豊かにしますが、より多くのビデオメモリも必要となります。&lt;/p&gt;
&lt;p&gt;以下はNVIDIA GeForce GTX 970、GeForce RTX 3060 Ti、GeForce RTX 3060、GeForce RTX 3080およびGeForce RTX 3080 Tiの単精度（FP32）、半精度（FP16）および倍精度（FP64）浮動小数点演算性能のスペックまとめです。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;グラフィックカードモデル&lt;/th&gt;
&lt;th&gt;リリース年&lt;/th&gt;
&lt;th&gt;単精度浮動小数点演算性能 (TFLOPS)&lt;/th&gt;
&lt;th&gt;複精度浮動小数点演算性能 (TFLOPS)&lt;/th&gt;
&lt;th&gt;倍精度浮動小数点演算性能 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce GTX 970&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;3.49&lt;/td&gt;
&lt;td&gt;87.2&lt;/td&gt;
&lt;td&gt;0.109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060 Ti&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;16.2&lt;/td&gt;
&lt;td&gt;32.4&lt;/td&gt;
&lt;td&gt;0.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;12.7&lt;/td&gt;
&lt;td&gt;25.4&lt;/td&gt;
&lt;td&gt;0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;29.8&lt;/td&gt;
&lt;td&gt;58.9&lt;/td&gt;
&lt;td&gt;0.93&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080 Ti&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;34.8&lt;/td&gt;
&lt;td&gt;68.7&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;引用元、&lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/spreadsheets/d/1Zlv4UFiciSgmJZncCujuXKHwc4BcxbjbSBg71-SdeNk/edit#gid=0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;各种显卡性能测试数据&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;アップデート&#34;&gt;アップデート
&lt;/h2&gt;&lt;p&gt;半年の間隔を経て、改めてインストール手順を整理したり、より多くの基礎概念を紹介しようと思いましたが、結局、一般の人々がAIで絵を描くというのは、結局のところ、大佬が提供する画像パラメータに基づいて調整したり、既存の画像を元にフォーマットされたリレンダリングを行うだけだと分かりました。&lt;/p&gt;
&lt;p&gt;途中でAIを使ってミニプログラムのUI素材を描くという試みがあったが、色々手間取った結果、効果は期待ほどではなく、むしろ公式のミニプログラムからリソース画像を直接引き込んだ方が良いだろう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>プログラム最適化は、ハードウェアに逆らうようなことはしないこと。</title>
        <link>https://ttf248.life/ja/p/program-optimization-dont-fight-hardware/</link>
        <pubDate>Fri, 07 Apr 2023 16:30:15 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/program-optimization-dont-fight-hardware/</guid>
        <description>&lt;p&gt;&lt;code&gt;one loop thread&lt;/code&gt;BOLD_1__マイクロ秒**レベルで、サーバー交換により、最大で6万パケットの溜まりから、ほとんど溜まらなくなった。&lt;/p&gt;
&lt;p&gt;シングルスレッドでデータを処理する場合、CPUの性能はクロック周波数、キャッシュサイズ、命令セットアーキテクチャなどの要素に左右されます。一般的に、クロック周波数が高く、キャッシュが大きく、より高度な命令セットアーキテクチャを持つCPUほど、シングルスレッドでのデータ処理性能が高いと言えます。&lt;/p&gt;
&lt;h2 id=&#34;シングルスレッド&#34;&gt;シングルスレッド
&lt;/h2&gt;&lt;p&gt;パフォーマンス向上は、スレッド増強が必須ではない。プロジェクトのフローを見直し、ボトルネックとなっている箇所を特定し、シングルスレッドで要件を満たせるか検討する。シングルスレッドでは考慮すべき点が少なく、問題も起こりにくい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;いきなりスレッド追加を持ち出してくるなんて、少し変だな。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;事件&#34;&gt;事件
&lt;/h2&gt;&lt;p&gt;扱っているのは&lt;strong&gt;行情数据，延迟敏感&lt;/strong&gt;です。&lt;/p&gt;
&lt;p&gt;ぐったりしながら徹夜で頑張って、新しい最適化バージョンをリリース。ローカルAPIの分離テストもして、速度もまあまあ。TPS: 4.2万&lt;/p&gt;
&lt;p&gt;サーバーにデプロイするとTPSが急落：2.1万。自宅のデスクトップで試すとTPS：7.9万。内部サービス仮想化に問題があるのではないかと疑い始めた。まずCPUクロック周波数を疑う。自宅のデスクトップとサーバーの間で最も大きな違いは、CPUクロック周波数だ。&lt;/p&gt;
&lt;p&gt;テストサーバーA&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 47
model name	: Intel(R) Xeon(R) CPU E7- 4807  @ 1.87GHz
stepping	: 2
microcode	: 0x34
cpu MHz		: 1866.733
cache size	: 18432 KB
physical id	: 1
siblings	: 4
core id		: 3
cpu cores	: 4
apicid		: 7
initial apicid	: 7
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 popcnt aes hypervisor lahf_lm pti dtherm arat
bugs		: clflush_monitor cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 3733.46
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;テストサーバーB&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 63
model name	: Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz
stepping	: 2
microcode	: 0x3c
cpu MHz		: 2599.998
cache size	: 20480 KB
physical id	: 14
siblings	: 1
core id		: 0
cpu cores	: 1
apicid		: 14
initial apicid	: 14
fpu		: yes
fpu_exception	: yes
cpuid level	: 15
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cpuid_fault epb pti fsgsbase smep xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 5199.99
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;openai-へお問い合わせ&#34;&gt;OpenAI へお問い合わせ
&lt;/h2&gt;&lt;p&gt;まず、コア数とクロック周波数についてですが、Intel(R) Xeon(R) CPU E7-4807 @ 1.87GHzは6つの物理コアと12個の論理コアを持ち、クロック周波数は1.87GHzです。一方、Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHzは8つの物理コアと16個の論理コアを持ち、クロック周波数は2.60GHzです。したがって、コア数とクロック周波数から見ると、E5-2640 v3はシングルスレッドでのデータ処理において、E7-4807よりも優位性を持つと考えられます。&lt;/p&gt;
&lt;p&gt;次に、キャッシュサイズに関して、E7-4807は12MB、E5-2640 v3は20MBです。したがって、E5-2640 v3の方がキャッシュ容量が大きく、データのアクセス速度とキャッシュヒット率を向上させることができます。&lt;/p&gt;
&lt;p&gt;最後にアーキテクチャについてですが、E5-2640 v3はより先進的なHaswellアーキテクチャを採用しており、一方、E7-4807は旧世代のNehalemアーキテクチャです。HaswellアーキテクチャはNehalemアーキテクチャと比較して性能が向上しており、これによりE5-2640 v3のシングルスレッドでのデータ処理性能に影響が出ている可能性があります。&lt;/p&gt;
&lt;p&gt;したがって、総合的に考えると、シングルスレッドでデータを処理するシナリオでは、E5-2640 v3の方がE7-4807よりも優れた性能を発揮するはずです。ただし、具体的な性能差は、データ処理のアルゴリズム、メモリ帯域幅、システム負荷など、様々な要因の影響を受けます。個別の問題に対して個別に分析する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;ハードウェア資料&#34;&gt;ハードウェア資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7%e2%80%934807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7–4807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Specification&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Price&lt;/td&gt;
&lt;td&gt;Search Online  $78 - BUY&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Socket Type&lt;/td&gt;
&lt;td&gt;LGA1567&lt;/td&gt;
&lt;td&gt;LGA2011-v3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Class&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clockspeed&lt;/td&gt;
&lt;td&gt;1.9 GHz&lt;/td&gt;
&lt;td&gt;2.6 GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Turbo Speed&lt;/td&gt;
&lt;td&gt;Not Supported&lt;/td&gt;
&lt;td&gt;Up to 3.4 GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# of Physical Cores&lt;/td&gt;
&lt;td&gt;6 (Threads: 12)&lt;/td&gt;
&lt;td&gt;8 (Threads: 16)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cache&lt;/td&gt;
&lt;td&gt;NA2&lt;/td&gt;
&lt;td&gt;NA2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max TDP&lt;/td&gt;
&lt;td&gt;95W x 2&lt;/td&gt;
&lt;td&gt;90W x 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Yearly Running Cost&lt;/td&gt;
&lt;td&gt;$34.68&lt;/td&gt;
&lt;td&gt;$32.85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Other&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First Seen on Chart&lt;/td&gt;
&lt;td&gt;Q3 2020&lt;/td&gt;
&lt;td&gt;Q3 2014&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# of Samples&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Value&lt;/td&gt;
&lt;td&gt;69.1&lt;/td&gt;
&lt;td&gt;225.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single Thread Rating&lt;/td&gt;
&lt;td&gt;721 (-59.2%)&lt;/td&gt;
&lt;td&gt;1767 (0.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Mark&lt;/td&gt;
&lt;td&gt;6223 (-64.6%)&lt;/td&gt;
&lt;td&gt;17600 (0.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
        </item>
        <item>
        <title>プロンプトエンジニア</title>
        <link>https://ttf248.life/ja/p/prompt-engineer/</link>
        <pubDate>Sun, 26 Mar 2023 20:46:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/prompt-engineer/</guid>
        <description>&lt;p&gt;まるで昔に検索エンジンのテクニックを学ぶように、私たちも&lt;code&gt;AI&lt;/code&gt;とのコミュニケーションのコツを学び、合理的かつ十分な条件を設定し、必要な答えを効率的に得る必要がある。&lt;/p&gt;
&lt;p&gt;もし別の視点から考えてみたら、現在の強調表示は期待通りの結果を生むでしょう。&lt;/p&gt;
&lt;h2 id=&#34;科学解説&#34;&gt;科学解説
&lt;/h2&gt;&lt;p&gt;火出天际的&lt;code&gt;AI&lt;/code&gt;BOLD_2&lt;code&gt;Generative Pre-Training&lt;/code&gt;とは、直訳すると生成事前学習です。これは、インターネットで利用可能なデータで訓練されたテキスト生成深層学習モデルであり、質問応答、テキスト要約の生成、機械翻訳、分類、コード生成、対話AIなどのタスクに使用されます。現在ではGPT-1、GPT-2、GPT-3、GPT-4など、さまざまなバージョンのモデルが存在し、各バージョンは前のバージョンよりも大きく、強力です。&lt;/p&gt;
&lt;h2 id=&#34;結局知能は存在するのか&#34;&gt;結局、知能は存在するのか。
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;類似度が十分高いほど、精度も上がる。&lt;/li&gt;
&lt;li&gt;基本的な、反復作業は、特定の訓練を経れば、これ以上の人的介入は不要となる。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成AIとは、既存のテキスト、音声、画像などのデータを利用して新しいコンテンツを生成する技術です。テキスト生成、音声合成、画像生成、対話システムなど、様々なタスクに利用できます。生成AIの論理性は、学習データとモデル構造に依存します。一般的に、生成AIは文法、論理、常識をある程度遵守できますが、誤りや偏見、虚偽の内容を生み出す可能性もあります。そのため、生成AIの出力には人間の判断と検証が必要であり、盲目的に信じたり使用したりすることはできません。&lt;/p&gt;
&lt;h2 id=&#34;プロンプトエンジニア&#34;&gt;プロンプトエンジニア
&lt;/h2&gt;&lt;p&gt;時間が流れ去ることはないから、人は時代の流れに適応する必要がある。あなたはそれを__INLINE_CODE_0__を非論理的だと考えられるかもしれないし、役に立たないコードを生成することがよくある。&lt;/p&gt;
&lt;p&gt;もし別の視点から考えてみたら、現在の強調表示は期待通りの結果を生むでしょう。&lt;/p&gt;
&lt;h2 id=&#34;会話モード&#34;&gt;会話モード
&lt;/h2&gt;&lt;p&gt;2年前に、大胆に登場し、人類は大規模言語モデルの能力を認識した。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于注释的编程&lt;/strong&gt;と&lt;strong&gt;基于对话的编程&lt;/strong&gt;に基づき、インタラクションの論理は完全に異なり、会話のパターンも、初心者ユーザーにとって使いやすい体験を提供します。ここに必ず&lt;code&gt;NewBing&lt;/code&gt;在每个问题之后，给出的追问提示，微软在尝试引导用户，获取&lt;code&gt;AI&lt;/code&gt;知識ベース内の、より多くのコンテンツについて言及する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;例えば&#34;&gt;例えば
&lt;/h2&gt;&lt;p&gt;高速鉄道の移動時間は長く、コーディングは良い選択だ。データ通信量が限られているので、画像を数枚処理し、画像素材を入手したが、ソフトウェアをダウンロードして画像を処理するのは少し贅沢すぎるし、ネットワーク環境もそれを許さない。&lt;/p&gt;
&lt;p&gt;画像素材がいくつかあり、それらは透明な背景の画像で、ミニプログラムのナビゲーションバーに使用されます。選択された状態はカラー、未選択の状態は白黒です。素材自体はカラーなので、前処理が必要です。&lt;/p&gt;
&lt;p&gt;フォルダ内のすべての画像を読み込み、モノクロに変換し、透明な背景を維持した上で、品質を最適化してファイルサイズを縮小した画像を保存するPythonコードを作成してください。また、コンソールには変換前のファイルサイズと変換後のファイルサイズの比較を表示してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 导入必要的库
import os
import PIL
from PIL import Image

# 定义一个函数，将图片转换成黑白，维持透明背景，保存图片，并返回文件体积
def convert_and_save(image_file):
    # 打开图片
    image = Image.open(image_file)
    # 获取图片的模式，如果是 RGBA 模式，说明有透明背景
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 创建一个和图片大小一致的白色背景图片
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 将原图片粘贴到白色背景上，忽略透明像素
        background.paste(image, mask=image.split()[3])
        # 将合成的图片转换成灰度模式
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # 将灰度图片再转换成 RGBA 模式，以便保留透明背景
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # 如果不是 RGBA 模式，直接将图片转换成灰度模式
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 获取原图片的文件名和扩展名
    file_name, file_ext = os.path.splitext(image_file)
    # 定义新图片的文件名，添加 _bw 后缀表示黑白
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 保存新图片，并优化质量，减少文件体积
    final_image.save(new_file_name, optimize=True)
    # 获取原图片和新图片的文件体积，并返回
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return old_size, new_size

# 定义一个文件夹路径，存放所有的图片
folder_path = &amp;quot;images&amp;quot;
# 遍历文件夹中的所有文件
for file in os.listdir(folder_path):
    # 拼接完整的文件路径
    file_path = os.path.join(folder_path, file)
    # 判断是否是图片文件，根据扩展名判断，可以根据需要添加或修改扩展名
    if file_path.endswith((&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;)):
        # 调用函数，转换并保存图片，并获取文件体积
        old_size, new_size = convert_and_save(file_path)
        # 在控制台展示优化前后的文件体积大小对比
        print(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すぐに回答しましたが、見た目は良く、問題なく動作します。経験豊富なプログラマーなら、下記のコードが汎用的ではなく、本番環境には向かないと感じるでしょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パラメータが固定されました。&lt;/li&gt;
&lt;li&gt;ログファイルはなく、情報はコンソールに出力されています。&lt;/li&gt;
&lt;li&gt;画像処理のタスクは、マルチスレッドモデルに適しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このコードの改善点はありますか？&lt;/p&gt;
&lt;p&gt;今回提示された回答は、正直言って期待を遥かに上回っています。一般的なプログラマーが思いつくような最適化策についても、それぞれ対応する提案が示されています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;这段代码可能还有一些可以改进的地方，比如：

可以使用 argparse 库，让用户可以通过命令行参数指定文件夹路径和扩展名，而不是写死在代码里。
可以使用 logging 库，记录程序的运行情况，而不是直接打印到控制台。
可以使用 try-except 语句，捕获可能出现的异常，比如文件打开失败，图片转换失败等，并做相应的处理。
可以使用 multiprocessing 库，利用多核处理器，加速图片的转换和保存过程。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;非常にフレンドリーな対応で、デプロイ環境の違いを考慮し、マルチプロセス非対応を許可しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;当然，我很乐意帮你修改一下代码。我尝试添加了 argparse, logging 和 try-except 语句，但没有添加 multiprocessing 库，因为我不确定你的电脑是否支持多核处理。修改后的代码如下：
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 导入必要的库
import argparse
import logging
import multiprocessing
import os

from PIL import Image


# 定义一个函数，将图片转换成黑白，维持透明背景，保存图片，并返回文件体积
def convert_and_save(image_file):
    # 打开图片
    try:
        image = Image.open(image_file)
    except Exception as e:
        logging.error(f&amp;quot;Failed to open {image_file}: {e}&amp;quot;)
        return None, None
    # 获取图片的模式，如果是 RGBA 模式，说明有透明背景
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 创建一个和图片大小一致的白色背景图片
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 将原图片粘贴到白色背景上，忽略透明像素
        background.paste(image, mask=image.split()[3])
        # 将合成的图片转换成灰度模式
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # 将灰度图片再转换成 RGBA 模式，以便保留透明背景
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # 如果不是 RGBA 模式，直接将图片转换成灰度模式
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 获取原图片的文件名和扩展名
    file_name, file_ext = os.path.splitext(image_file)
    # 定义新图片的文件名，添加 _bw 后缀表示黑白
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 保存新图片，并优化质量，减少文件体积
    try:
        final_image.save(new_file_name, optimize=True)
    except Exception as e:
        logging.error(f&amp;quot;Failed to save {new_file_name}: {e}&amp;quot;)
        return None, None
    # 获取原图片和新图片的文件体积，并返回
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return file_name, old_size, new_size

# 定义一个函数，解析命令行参数，并返回文件夹路径和扩展名列表
def parse_args():
    # 创建一个解析器对象
    parser = argparse.ArgumentParser(description=&amp;quot;Convert images to black and white and optimize quality.&amp;quot;)
    # 添加一个必选的位置参数，表示文件夹路径
    parser.add_argument(&amp;quot;folder_path&amp;quot;, help=&amp;quot;The path of the folder that contains the images.&amp;quot;)
    # 添加一个可选的参数，表示扩展名列表，默认为 png, jpg, jpeg 和 gif
    parser.add_argument(&amp;quot;-e&amp;quot;, &amp;quot;--extensions&amp;quot;, nargs=&amp;quot;+&amp;quot;, default=[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;], help=&amp;quot;The extensions of the image files.&amp;quot;)
    # 解析命令行参数，并返回结果对象
    args = parser.parse_args()
    return args.folder_path, args.extensions

# 定义一个函数，打印优化前后的文件体积大小对比
def print_result(result):
    # 如果结果不为空，说明转换和保存成功
    if result:
        # 解包结果为文件名和文件体积元组
        if len(result) == 3:
            file, old_size, new_size = result
            # 在控制台展示优化前后的文件体积大小对比
            logging.info(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
        else:
            logging.info(f&amp;quot;{result}&amp;quot;)

# 配置日志记录器，将日志输出到控制台和文件中，设置日志等级为 INFO
logging.basicConfig(level=logging.INFO,
                    format=&amp;quot;%(asctime)s %(levelname)s %(message)s&amp;quot;,
                    handlers=[logging.StreamHandler(),
                              logging.FileHandler(&amp;quot;log.txt&amp;quot;)])

# 调用函数，获取文件夹路径和扩展名列表
folder_path, extensions = parse_args()

if __name__ == &amp;quot;__main__&amp;quot;:
    # Windows 需要这个函数的原因是 Windows 缺乏 fork() 函数（这不完全正确）。
    # 因此，在 Windows 上，fork() 是通过创建一个新的进程来模拟的，这个新的进程中运行的代码，在 Linux 上是在子进程中运行的。
    # 由于这些代码要在技术上无关的进程中运行，所以它必须在运行之前被传递到那里。
    # 传递的方式是先将它们序列化，然后通过管道从原始进程发送到新的进程。
    # 另外，这个新的进程被通知它必须运行通过管道传递的代码，通过向它传递 --multiprocessing-fork 命令行参数。
    # 如果你看一下 freeze_support() 函数的实现，它的任务是检查它运行在哪个进程中，是否应该运行通过管道传递的代码
    multiprocessing.freeze_support()

    # 创建一个进程池，根据电脑的核心数自动分配进程
    pool = multiprocessing.Pool()
    # 创建一个空列表，用于存放异步任务的结果对象
    results = []
    # 遍历文件夹中的所有文件
    for file in os.listdir(folder_path):
        # 拼接完整的文件路径
        file_path = os.path.join(folder_path, file)
        # 判断是否是图片文件，根据扩展名判断，可以根据需要修改扩展名列表
        if any(file_path.endswith(ext) for ext in extensions):
            # 调用函数，转换并保存图片，并获取文件体积，使用异步方式，不阻塞主进程
            result = pool.apply_async(convert_and_save, args=(file_path,), callback=print_result)
            # 将结果对象添加到列表中
            results.append((file, result))
    # 关闭进程池，不再接受新的任务
    pool.close()
    # 等待所有的任务完成
    pool.join()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;ローカル開発で__BOLD_4&lt;code&gt;windows&lt;/code&gt;第一次给出的答案，并没有加上&lt;code&gt;AI&lt;/code&gt;BOLD_6&lt;code&gt;main&lt;/code&gt;第一次给出的答案，并没有加上&lt;code&gt;multiprocessing.freeze_support&lt;/code&gt;が発生し、エラー追跡によりコードを修正しました。&lt;/p&gt;
&lt;p&gt;まるで昔に検索エンジンのテクニックを学ぶように、私たちも__INLINE_CODE_0__とのコミュニケーションのコツを学び、合理的かつ十分な条件を設定し、必要な答えを効率的に得る必要がある。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;</description>
        </item>
        <item>
        <title>微信小程序背景と開発環境</title>
        <link>https://ttf248.life/ja/p/wechat-mini-program-background-and-development-environment/</link>
        <pubDate>Fri, 24 Mar 2023 21:59:11 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/wechat-mini-program-background-and-development-environment/</guid>
        <description>&lt;p&gt;微信ミニプログラムの紹介と開発準備&lt;/p&gt;
&lt;h2 id=&#34;なぜ小程序があるのか&#34;&gt;なぜ小程序があるのか。
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;より良い体験：埋め込みウェブページの読み込みが遅い、白画面。ネイティブアプリの体験は、より高速な読み込みを実現します。&lt;/li&gt;
&lt;li&gt;規範と管理：微信にとって、接続と管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小程序的发布之前，微信曾发布过一个__INLINE_CODE_0__BOLD_2&lt;code&gt;JSSDK&lt;/code&gt;，开放了微信原生能力：微信支付、卡券。但开发者基于网页开发语言的逻辑进行开发时，能够绕过微信的部分监管。小程序则有一套自己的描述语言。&lt;/p&gt;
&lt;h2 id=&#34;ミニプログラムとは何か&#34;&gt;ミニプログラムとは何か。
&lt;/h2&gt;&lt;p&gt;ミニプログラムは、ダウンロードやインストールが不要で利用できるアプリケーションであり、アプリケーションの&lt;strong&gt;触手可及&lt;/strong&gt;という夢を実現しています。&lt;/p&gt;
&lt;p&gt;QRコードスキャンまたは検索でアプリを開けること自体が、&lt;strong&gt;用完即走&lt;/strong&gt;のコンセプトを体現している。&lt;/p&gt;
&lt;p&gt;ユーザーは、インストールしすぎたかどうかを気にする必要はありません。アプリはどこにでもあり、いつでも利用可能ですが、同時に&lt;strong&gt;无需安装卸载&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;小プログラムとモバイルアプリの違い&#34;&gt;小プログラムとモバイルアプリの違い
&lt;/h2&gt;&lt;p&gt;インストール不要、メモリ消費なし、共有しやすい：QRコード、ミニプログラムカード、検索&lt;/p&gt;
&lt;h2 id=&#34;微信ミニプログラムで何ができるか&#34;&gt;微信ミニプログラムで何ができるか
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;コンテンツツール：知乎人気ランキング、微博トレンド、モバイクシェア、今日ヘッドライン、テンセントマップ、テンセント翻訳&lt;/li&gt;
&lt;li&gt;小売：拼多多、京東購物、蘑菇街、每日優鮮、小米商城、屈臣氏&lt;/li&gt;
&lt;li&gt;ゲーム：跳び遊び、楽しい牌勝負、楽しいマージャン、ドリームライブ、YYライブ&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;コースの内容は2018年のもので、今や一部のアプリケーションベンダーは既に倒産しています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;開発準備&#34;&gt;開発準備
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ミニプログラムのアカウント登録：通常通り情報を入力すれば登録可能です。メールの認証リンクをクリックして有効にしてください。&lt;/li&gt;
&lt;li&gt;情報登録&lt;/li&gt;
&lt;li&gt;ログインミニプログラム管理后台&lt;/li&gt;
&lt;li&gt;小程序情報を完善する&lt;/li&gt;
&lt;li&gt;開発者バインド：個人開発者は、ログインするWeChatアカウントが管理者アカウントであるため、追加のバインド作業は不要です。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;メールアドレスには制限があり、新しいメールアドレスが必要ですが、__INLINE_CODE_0__メールならエイリアスが申請でき、WeChatのバックエンドでは検証されません。試してみた結果、ミニプログラムの名前はやや面倒でしたが、商標に関わるものは審査に落ちやすいです。&lt;/p&gt;
&lt;p&gt;サービスカテゴリは選択可能で、カスタム追加もできます。1つのミニプログラムでは5つのカテゴリを追加可能です。&lt;/p&gt;
&lt;p&gt;設定内で、ミニプログラムの情報を確認できたり、メッセージプッシュを有効にしたりできます。メッセージプッシュを有効にすると、メッセージテンプレート機能が利用可能です。&lt;/p&gt;
&lt;h2 id=&#34;開発者ツール筆者による&#34;&gt;開発者ツール（筆者による）
&lt;/h2&gt;&lt;p&gt;通常通りインストールすれば問題ありません。特に注意点もなく、簡単に游客モードで入ることができます。もし携帯電話のデバッグを有効にしたい場合は（つまり、携帯電話からミニプログラムの開発バージョンを確認したい場合）、ミニプログラムの開発者アカウントにログインし、設定を開いて、プロジェクトの詳細画面で指定されたミニプログラム__INLINE_CODE_0__に切り替えてください。&lt;/p&gt;
&lt;h2 id=&#34;コード構造&#34;&gt;コード構造
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;インタラクションロジック&lt;/li&gt;
&lt;li&gt;データ設定&lt;/li&gt;
&lt;li&gt;インターフェースの要素&lt;/li&gt;
&lt;li&gt;インターフェースのスタイル&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>オフィス移転のため、サーバーにアクセスできません。</title>
        <link>https://ttf248.life/ja/p/office-migration-server-unavailable/</link>
        <pubDate>Sat, 11 Mar 2023 01:42:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/office-migration-server-unavailable/</guid>
        <description>&lt;p&gt;事務所の異動について。場所は、元の2階から15階へ変更です。普通の席替えです。&lt;/p&gt;
&lt;h2 id=&#34;デザイン性&#34;&gt;デザイン性
&lt;/h2&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;20230311014537.png&#34; &gt;办公楼&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;移動&#34;&gt;移動
&lt;/h2&gt;&lt;p&gt;退社して荷物をまとめて、慣れた手つきで新しい席へ。パソコンの配線を整え、楽な姿勢で作業開始。&lt;/p&gt;
&lt;p&gt;（òωóױ）！ネットケーブルを接続しても、チームでよく使うサーバーにアクセスできません。無線ネットワークに切り替えると、またアクセスできるようになりました。&lt;/p&gt;
&lt;p&gt;当初はサーバーのネットワークセグメント設定の問題かと思いましたが、新しい作業場所の有線ネットワークがファイアウォールの設定リストにないだけなので、IT担当者に調整してもらうと解決するだろうと思っていました。しかし、このネットワークセグメントには一台のサーバーだけでなく、他のサーバーにもアクセスしてみると正常でした。次第に疑問が生じました。専門的なことは専門の人に任せることにし、最終的に運用部門の担当者が特定したところ、このサーバーが&lt;code&gt;docker&lt;/code&gt;，服务的默认网络&lt;code&gt;docker0&lt;/code&gt;和办公室有线网络配置的网段冲突了，导致发过去的数据包，都收不到应答，被路由给了&lt;code&gt;docker&lt;/code&gt;サービスをデプロイしていたことが原因でした。&lt;/p&gt;
&lt;p&gt;他のサーバーに展開された__INLINE_CODE_0__服务，也就这台，我比较常用，偶尔用容器部署一些测试服务，没想到还能碰到这个场景。后来细想想，由于整个集团都在一个办公大楼里面，IT部门的同事划分网段，用到了__INLINE_CODE_1__で始まるアドレスは珍しくありません。&lt;/p&gt;
&lt;h2 id=&#34;docker0&#34;&gt;docker0
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# vim /etc/docker/daemon.json
{
    &amp;quot;bip&amp;quot;:&amp;quot;172.200.0.1/24&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サービスを再起動し、新しいネットワークに切り替えると、サーバーは通常アクセスに戻ります。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>組み込み入門 1 - 専門用語</title>
        <link>https://ttf248.life/ja/p/embedded-introduction-professional-terms/</link>
        <pubDate>Tue, 07 Mar 2023 13:42:36 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/embedded-introduction-professional-terms/</guid>
        <description>&lt;p&gt;組み込みシステムといえば、昔から学校の実験室にあった51マイクロコントローラーとフリースケールが思い浮かぶ。&lt;/p&gt;
&lt;p&gt;LPA3399Proは、ルネテックRK3399Proプラットフォームをベースとしたビジョンホストで、大量の画像処理が必要なポータブルコンピューティングデバイス向けです。NPU計算ユニットを内蔵し、3.0TOPSの演算能力を持ち、様々なアルゴリズムモデルに対応しています。&lt;/p&gt;
&lt;p&gt;RV1109は、ルシンマイクロ（Richwave）のAI・マシンビジョン向けSoCで、内蔵NPUを搭載しています。1TOPSの演算能力を提供します。&lt;/p&gt;
&lt;h2 id=&#34;system-on-chip&#34;&gt;System on Chip
&lt;/h2&gt;&lt;p&gt;SoCは、System on a Chipの略で、「チップ上システム」を意味します。これは、複数の電子システムを1つのチップに統合する技術です。この技術により、電子製品のサイズと重量を大幅に削減しつつ、性能を向上させ、消費電力を抑えることができます。&lt;/p&gt;
&lt;p&gt;SoC（システムオンチップ）とCPU（中央処理装置）は、どちらもコンピューターシステムの重要な構成要素ですが、いくつかの違いがあります。&lt;/p&gt;
&lt;p&gt;CPUはコンピューターシステムの主要なプロセッサであり、プログラム命令の実行を担います。演算ユニット、制御ユニット、レジスタなどの基本的な部品で構成されています。&lt;/p&gt;
&lt;p&gt;SoCは、CPUに加えてメモリ、グラフィックプロセッサ、入出力インターフェースなどの複数の電子システムを1つのチップに統合したものです。これにより、電子製品のサイズと重量を大幅に削減しつつ、性能向上と低消費電力化を実現します。&lt;/p&gt;
&lt;p&gt;要するに、CPUはSoCの一部であり、SoCはより複雑で集積度の高い電子システムです。&lt;/p&gt;
&lt;h2 id=&#34;microcontroller-unit&#34;&gt;Microcontroller Unit
&lt;/h2&gt;&lt;p&gt;SoC（システムオンチップ）とMCU（マイクロコントローラーユニット）は、複数の電子システムを1つのチップに統合する技術ですが、両者にはいくつかの違いがあります。&lt;/p&gt;
&lt;p&gt;MCUは、CPU、メモリ、入出力インターフェースなどの基本的な部品を含むマイクロコントローラーの一種です。家電製品や自動車の電子システムなど、他の電子機器の制御によく使用されます。&lt;/p&gt;
&lt;p&gt;SoCは、MCUの基本的な構成要素に加えて、グラフィックプロセッサや無線通信モジュールなどの他のコンポーネントをチップ上に集積する技術です。これにより、電子製品のサイズと重量を大幅に削減しつつ、性能向上と低消費電力化を実現します。&lt;/p&gt;
&lt;p&gt;要するに、MCUはシンプルなマイクロコントローラーであり、SoCはより複雑で統合度の高い電子システムです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>AI支援によるプログラミング、生産性の進化</title>
        <link>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;&lt;strong&gt;斜体_3&lt;/strong&gt;**太字_2__斜体_4__が登場しました。仕組みはよく分かりませんが、しばらく使っています。両方のツールは生産性を大幅に向上させますが、サポートの面では全く異なります。&lt;/p&gt;
&lt;p&gt;複雑なことについては、効果はせいぜい9割程度だ。&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;github copilot
&lt;/h2&gt;&lt;p&gt;公開時に公式サイトの説明を拝見しましたが、あまり賢そうではありませんでした。試してみたものの、使い勝手が悪く、諦めました。&lt;/p&gt;
&lt;p&gt;2022年前、暇な時に新バージョンを試してみたら、すでに効果はなかなか良い。ただ、国内の速度が少し遅いのは、大概ネットワークの問題だろう。__INLINE_CODE_0__のような言語で、コメントを参照して書かれたコードはなかなか良く、自分で資料を探して書くよりもずっと速い。&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;まだプログラマー、つまり開発の視点から製品を設計している段階です。プログラミングの方法を理解し、コメントを通じてAIによる補助的なプログラミングを徐々に誘導する必要があります。&lt;/p&gt;
&lt;p&gt;専門家でなくてもすぐに使い始められる**。対話形式のチャットインターフェースなので、質問や要望を自由に伝えられます。分からないことがあれば、遠慮なく質問してください。&lt;/p&gt;
&lt;p&gt;単純な例で言うと、トークン化の概念は理解しているが、どのようにコーディングするか分からない。文字列の類似度を計算したい。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python 分词计算 維天運通 LOGORY 和 合肥維天運通信息科技股份有限公司 两个字符串的相似度；
比较前，统一处理字符串，英文转换为小写；
第二个字符中如果能找到第一个字符的首字符，将第二个字符串截位，截位的长度为第一个字符串的长度
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんにちは、これはBingです。😊&lt;/p&gt;
&lt;p&gt;オンラインの情報によると123、Pythonの形態素解析には、jiebaライブラリを使用できます。jiebaライブラリは、厳密モード、全文モード、そして検索エンジンモードという3つの分かち込みモードをサポートしています。ニーズに合わせて適切なモードを選択してください。&lt;/p&gt;
&lt;p&gt;文字列の類似度を比較するためには、まず単語分割を行い、次に単語ベクトルや編集距離などの指標を計算する必要があります。numpy や scipy などのライブラリを使用して数学演算を行うことができます。&lt;/p&gt;
&lt;p&gt;文字列を統一的に処理するために、英字を小文字に変換するには、Pythonの組み込み関数lower()を使用できます。&lt;/p&gt;
&lt;p&gt;2番目の文字列を抽出するには、Pythonのスライス演算子[]を使用できます。&lt;/p&gt;
&lt;p&gt;以下はサンプルコードです。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jieba
import numpy as np
from scipy.spatial.distance import cosine

# 定义两个字符串
str1 = &amp;quot;維天運通 LOGORY&amp;quot;
str2 = &amp;quot;合肥維天運通信息科技股份有限公司&amp;quot;

# 统一处理字符串，英文转换为小写
str1 = str1.lower()
str2 = str2.lower()

# 找到第二个字符串中第一个字符的位置
index = str2.find(str1[0])

# 如果找到了，截取第二个字符串
if index != -1:
    str2 = str2[index:index+len(str1)]

# 使用 jieba 库进行分词
words1 = list(jieba.cut(str1))
words2 = list(jieba.cut(str2))

# 计算两个字符串的词向量（以词频作为权重）
vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))

for i, word in enumerate(words1):
    vector1[i] += 1 # 统计第一个字符串中每个词出现的次数
    if word in words2:
        vector2[i] += 1 # 统计第二个字符串中每个词出现的次数

# 计算两个字符串的相似度（以余弦距离作为指标）
similarity = 1 - cosine(vector1, vector2)

print(&amp;quot;两个字符串的相似度是：&amp;quot;, similarity)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;h3 id=&#34;栗&#34;&gt;栗
&lt;/h3&gt;&lt;p&gt;SQL文で、製品コード表から、製品コードが80000～89999の範囲にあるレコードを抽出してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;你好，这是 Bing。😊

根据搜索结果12，你可以使用 SQL BETWEEN 运算符来选择给定区间内的值。BETWEEN 运算符包含了开始和结束的值。

你需要先指定要查询的表名和列名，然后在 WHERE 子句中使用 BETWEEN 运算符和区间值。

例如，如果你要查询产品代码表中，产品代码在 80000 到 89999 之间的记录，你可以使用以下语句：

SELECT * FROM product_code
WHERE code BETWEEN 80000 AND 89999;
这里，* 表示选择所有列3。如果你只想选择特定的列，比如产品名称和价格，你可以用逗号分隔它们，如下：

SELECT name, price FROM product_code
WHERE code BETWEEN 80000 AND 89999;
希望这能帮助到你。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引き続き質問し、否定してください。製品コードは文字列です。あなたのコードが間違っています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;抱歉，我没有注意到产品代码是字符串。如果是这样的话，你需要在区间值两边加上单引号，如下：

SELECT * FROM product_code
WHERE code BETWEEN &#39;80000&#39; AND &#39;89999&#39;;
请原谅我的错误。🙏
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;おめでとうございます、間違えるでしょう。&lt;/p&gt;</description>
        </item>
        <item>
        <title>いくつかのあまり使われないGitコマンドまとめ</title>
        <link>https://ttf248.life/ja/p/git-less-common-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/git-less-common-commands-summary/</guid>
        <description>&lt;p&gt;あまり使われないけれど役に立つコマンド&lt;/p&gt;
&lt;h3 id=&#34;システム再インストールによりフォルダのオーナー情報が変更されます&#34;&gt;システム再インストールにより、フォルダのオーナー情報が変更されます。
&lt;/h3&gt;&lt;p&gt;新しいバージョンではセキュリティチェックが強化され、警告が表示されるため、操作を続行できません。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;新しいコンピューターへのアカウントとパスワードの情報保存&#34;&gt;新しいコンピューターへのアカウントとパスワードの情報保存
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;情報が更新される場合は、まず古い記録を削除してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>香港ドル・人民元両方取り扱い</title>
        <link>https://ttf248.life/ja/p/hk-rmb-dual-counter-mode/</link>
        <pubDate>Thu, 16 Feb 2023 20:25:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hk-rmb-dual-counter-mode/</guid>
        <description>&lt;p&gt;香港証券取引所は12月13日に発表したところによると、傘下の証券市場では「香港ドル・人民元デュアルカウンテシステム」（以下、「デュアルカウンテシステム」と称す）及びデュアルカウンテマーケットメイカーメカニズムを導入し、香港における人民元のカウンターでの上場、取引、決済をさらに支援する。&lt;/p&gt;
&lt;h2 id=&#34;両カウンターモデル及び両カウンターディーラーメカニズム&#34;&gt;両カウンターモデル及び両カウンターディーラーメカニズム
&lt;/h2&gt;&lt;p&gt;香港証券取引所によると、規制当局の承認と市場の準備が整い次第、新たな施策の登録手続きは2023年上半期に開始される見込みです。デュアルカントリーモデル下では、香港証券取引所は関連する取引・決済を手配を最適化し、投資家が同じ発行体の香港ドル圏株式と人民元圏株式を相互交換できるようになる予定です。&lt;/p&gt;
&lt;p&gt;香港証券取引所は、人民元カウンターの流動性を高め、カウンター間のスプレッドを縮小するため、デュアルカウンターマーケットメイカーメカニズムを導入する。関連法案が立法会で可決され次第、特定の取引において、通量供給活動を行う市場のマーケットメイカーは印花税が免除される。同時に、これらの新措置は、後続の中国本土投資家による香港経由での人民元価格設定証券への投資を円滑にするための準備となる。&lt;/p&gt;
&lt;p&gt;香港証券取引所の最高執行責任者兼市場共同責任者であるウォン・カワイエン氏は、「香港ドル-人民元両カウンターモデルと両カウンターディーラーメカニズムの導入は、当社の市場発展における重要な取り組みです。他の市場関連施策との連携により、より多くの両カウンター証券を香港での上場に誘致し、香港証券取引所が既に有する中国本土製品との良好な相乗効果を生み出すことが期待されます。香港証券取引所は、人民元の国際化を積極的に推進し、香港の世界的なオフショア人民元ハブとしての地位向上に努めてまいります。」&lt;/p&gt;
&lt;p&gt;香港株式市場の現行の新規上場、取引、清算および決済の手続きは、人民元カウンター制度下の人民元圏証券にもおおむね適用される予定です。香港証券取引所は、ダブルカウンターモデルの実施日と、指定投資家メカニズムに組み入れが可能な資格のあるダブルカウンター証券の一覧を適宜発表します。&lt;/p&gt;
&lt;h2 id=&#34;香港ドル人民元取引カウンターの見分け方&#34;&gt;香港ドル・人民元取引カウンターの見分け方
&lt;/h2&gt;&lt;p&gt;香港証券取引所の書類によると、香港ドル・人民元両方通貨でのデュアルカウンテートレードの手配は、既存の株式コード割り当て計画を大まかに踏襲し、香港ドルのカウンテートレードの株式コードは「0」から始まる5桁、人民元のカウンテートレードの株式コードは「8」から始まる5桁とする。香港ドルおよび人民元両方のカウンテートレードの株式コードの最後の4桁は同じになる。また、人民元カウンテートレードの銘柄名は“-R”を付記する。&lt;/p&gt;
&lt;p&gt;取引手配に関して、人民幣および香港ドルのカウンターで取り扱われる証券が同一カテゴリーであり相互に換算可能であるという前提のもと、あるカウンター（例えば香港ドルカウンター）が空売り可能な指定証券として指定されている場合、もう一方のカウンター（例えば人民幣カウンター）も取引所規則に従って同様に空売り可能な指定証券に組み込まれる。これに伴い、両カウンターとも取引所が公表する空売り可能な指定証券リストに掲載される。&lt;/p&gt;
&lt;p&gt;両カウンターの株式が同一カテゴリーに属し、相互に換算可能であるため、香港ドルで買い、人民元で売却するか、またはその逆は、いずれもホールドアンドスリップ（持貨沽売）とみなされます。両カウンター間の決済期間はT+2です。&lt;/p&gt;
&lt;p&gt;空売り資格のある指定株式について、例えば香港ドルで借り入れた株式を人民元カウンターで売却する場合、担保付きの空売りとみなされます。その逆も同様です。&lt;/p&gt;
&lt;p&gt;両カウンター方式の場合、人民元カウンターは取引および決済のみに利用されるため、現物の株式の預け入れや引き出しサービスは提供されません。現物の株式は香港ドルカウンターに預け入れられた後、初めて人民元カウンターに換金可能です。同様に、人民元カウンターから現物の株式を引き出すには、香港ドルカウンターへの換金が必要です。&lt;/p&gt;
&lt;p&gt;関連取引の清算および決済にかかる費用は、香港の決済手数料を除き、配当受領サービス料および利息受領サービス料以外のものはすべて香港ドルで計算・徴収されます。配当受領サービス料および利息受領サービス料は、当該証券に採用されている資格のある通貨で計算されます。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Trading/Securities/Overview/Trading-Mechanism/HKD-RMB-Dual-Counter-Model?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKD-RMB-Dual-Counter-Model&lt;/a&gt;
出所：香港証券取引所パルス/HKEx Pulse、証券中国&lt;/p&gt;</description>
        </item>
        <item>
        <title>コンパイラ、コールバック関数、パフォーマンステスト</title>
        <link>https://ttf248.life/ja/p/compiler-callback-function-performance-testing/</link>
        <pubDate>Wed, 15 Feb 2023 13:59:25 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/compiler-callback-function-performance-testing/</guid>
        <description>&lt;p&gt;昨年、ある__INLINE_CODE_0__を設計しました。これはイベントの処理を担当し、クラスインターフェースを提供します。サービス初期化時に、呼び出し元が対応するクラスを実装し、オブジェクトポインタをモジュールに渡します。
接触した__，好奇心害死猫，就想着这些接口都用&lt;code&gt;C11&lt;/code&gt;関数オブジェクトコールバックによる実装は、純粋仮想関数のインターフェース定義と比較して、より柔軟である。
疑問が生じた。二つの異なる文法、どちらがパフォーマンス面で速いのか？ 私はコンパイラ理論を理解していないので、コードを書いて試してみよう。&lt;/p&gt;
&lt;h2 id=&#34;まえがき&#34;&gt;まえがき
&lt;/h2&gt;&lt;p&gt;オンラインURLで、異なるコンパイラやコンパイルパラメータを選択し、__INLINE_CODE_0__プラットフォーム上でコードを実行したり、対応するアセンブリコードを確認できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技術検証を時々行う際、ウェブページで短いコードを実行するのは便利です。&lt;/li&gt;
&lt;li&gt;色分けすることで、異なるアセンブリに対応するコードを区別でき、ローカルのデバッガーよりも見やすくなります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;標準委員会が文法の規則を策定し、コンパイルレベルでの実装方法は各コンパイラの自由です。ここで言及せざるを得ないのは、Microsoftのコンパイラは非常に優れているということです。シンタックスシュガーは万能ではなく、コールバックインターフェースも多くありません。__INLINE_CODE_0__の使用の方が便利で、空のコールバック関数インターフェースを定義する必要もありません。コールバックインターフェースの種類が多様な場合は、従来の仮想関数の方がビジネスインターフェースの統一に有利です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;プラットフォーム、両者とも性能はほぼ同等で、大きな違いはありません。&lt;/li&gt;
&lt;li&gt;比較して、一度あたり1.35ns増加。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常の業務システム開発においては、このレベルのパフォーマンス損失は無視できる。&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;，在设计的上，能带来更多的便捷。在设计多信号处理时，尤为明显，底层有事件触发，如果需要落地日志，出入日志对象的的处理函数。当需要更多的业务处理接口时，底层用__INLINE_CODE_1__保存__INLINE_CODE_2__BOLD_6&lt;code&gt;QT&lt;/code&gt;における信号とスロット、ログ、監視、業務1、業務2は、互いに完全に分離されている。&lt;/p&gt;
&lt;h2 id=&#34;コード&#34;&gt;コード
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Counter: 1000000
Time: 3966us
Counter: 1000000
Time: 5316us
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;atomic&amp;gt;
#include &amp;lt;string&amp;gt;

std::atomic_int64_t counter = 0;

// 定义回调接口
class UserInterface
{
public:
    virtual void name() = 0;
    virtual void full_name() = 0;
};

class User : public UserInterface
{
public:
    void name() {}
    void full_name() { counter++; }
};

void to_string(UserInterface* user)
{
    user-&amp;gt;name();
    user-&amp;gt;full_name();
}

using name_handler = std::function&amp;lt;void()&amp;gt;;
using full_name_handler = std::function&amp;lt;void()&amp;gt;;

class Test
{
    name_handler name_;
    full_name_handler full_name_;

public:
    void set_name_handler(name_handler name)
    {
        name_ = name;
    }

    void set_full_name_handler(full_name_handler full_name)
    {
        full_name_ = full_name;
    }

    void to_string()
    {
        name_();
        full_name_();
    }
};

int main()
{
    User user;

    auto start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++)
    {
        to_string(&amp;amp;user);
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;Counter: &amp;quot; &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;Time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

    counter = 0;
    auto name = []() {};
    auto full_name = []() { counter++; };

    Test test;
    test.set_name_handler(name);
    test.set_full_name_handler(full_name);

    start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++)
    {
        test.to_string();
    }

    end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;Counter: &amp;quot; &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;Time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;資料を探している時に、類似のコードスニペットにたどり着きました。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

using namespace std;
using namespace std::chrono;

class Base
{
public:
	Base(){}
	virtual ~Base(){}
	virtual int func(int i) = 0;
};

class Derived : public Base
{
public:
	Derived(int base = 10) : base{base}
	{

	}
	~Derived(){}

	virtual int func(int i)
	{
		return i*base;
	}
private:
	int base;
};

struct Func
{
	int base;
	int operator()(int i)
	{
		return i*base;
	}
	Func(int base) : base {base}
	{

	}
};
const int base = 10;
int calculate(int i)
{
	return base*i;
}

int main()
{
	const int num = 10000;
	Base *p = new Derived{10};
	int total = 0;
	auto start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += p-&amp;gt;func(i);
	}
	auto end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nvirtual call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += calculate(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\ndirect function call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	Func functor{10};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += functor(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nfunctor call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	int base = 10;
	function&amp;lt;int(int)&amp;gt; lambda = [base](int i)
	{
		return i*base;
	};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += lambda(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nlambda call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	return 0;
}

/*
test on mac mini i7 2.7GHz
clang++ -std=c++11 chronotest.cpp -O0
output:
result: 499950000
virtual call elapsed: 	43171 nanoseconds.

result: 499950000
direct function call elapsed: 	31379 nanoseconds.

result: 499950000
functor call elapsed: 	41497 nanoseconds.

result: 499950000
lambda call elapsed: 	207416 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O1
output:
result: 499950000
virtual call elapsed: 	26144 nanoseconds.

result: 499950000
direct function call elapsed: 	22384 nanoseconds.

result: 499950000
functor call elapsed: 	33477 nanoseconds.

result: 499950000
lambda call elapsed: 	55799 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O2
result: 499950000
virtual call elapsed: 	22284 nanoseconds.

result: 499950000
direct function call elapsed: 	36 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	28292 nanoseconds.

===================================================
clang++ -std=c++11 chronotest.cpp -O3
result: 499950000
virtual call elapsed: 	18975 nanoseconds.

result: 499950000
direct function call elapsed: 	29 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	22542 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O4

result: 499950000
virtual call elapsed: 	22141 nanoseconds.

result: 499950000
direct function call elapsed: 	30 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	22584 nanoseconds.
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ここでは、通常の関数とラムダ関数の2つのモードが追加され、インターフェースコールバック方式と直接呼び出しの比較を提供します。性能損失は桁違いであり、ラムダ関数の性能は関数に近く、場合によってはラムダ関数の性能の方が優れています。コンパイラ原理に関しては知識の空白ですが、アクセスする変数のアドレスと関数が隣接しているため、__INLINE____処理に有利であると推測しています。&lt;/p&gt;
&lt;p&gt;添付 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; の実行結果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result: 499950000
virtual call elapsed: 6143 nanoseconds.

result: 499950000
direct function call elapsed: 30 nanoseconds.

result: 499950000
functor call elapsed: 31 nanoseconds.

result: 499950000
lambda call elapsed: 15134 nanoseconds.
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>ホストオーダー、ネットワークオーダー。デバッガで直接観察。</title>
        <link>https://ttf248.life/ja/p/host-order-network-order-debugger-observation/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/host-order-network-order-debugger-observation/</guid>
        <description>&lt;p&gt;コンピュータの発展史において、データを保存する方法に統一された基準はありませんでした。&lt;/p&gt;
&lt;p&gt;バイトの配置には、主に2つの一般的な規則があります。例えば、多桁数の下位を小さいアドレスに、上位を大きいアドレスに配置する場合をリトルエンディアンと呼び、その逆をビッグエンディアンと呼びます。ネットワークアプリケーションでは、異なるマシンタイプが異なる標準のエンディアンを採用する可能性があるため、バイトオーダーは考慮すべき要素であり、通常はネットワーク標準に変換されます。&lt;/p&gt;
&lt;p&gt;読書習慣では、ビッグエンディアンの方が左から右への読み順に合致しやすい。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供していただければ日本語に翻訳します&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;x86、MOS Technology 6502、Z80、VAX、PDP-11 などのプロセッサはリトルエンディアンです。&lt;/li&gt;
&lt;li&gt;モトローラ6800、モトローラ68000、PowerPC 970などのプロセッサは大Endianです。&lt;/li&gt;
&lt;li&gt;ARM、PowerPC（PowerPC 970を除く）、DEC Alpha、SPARC V9、MIPS、PA-RISCおよびIA64のバイトオーダーは構成可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ネットまえがき&#34;&gt;ネットまえがき
&lt;/h2&gt;&lt;p&gt;ネットワーク転送では通常、ビッグエンディアンが採用され、ネットワークバイトオーダーまたはネットワーク順とも呼ばれます。IPプロトコルでは、ビッグエンディアンをネットワークバイトオーダーとして定義しています。
ソケットは、16ビットおよび32ビット整数のネットワークバイトオーダーとローカルバイトオーダー間の変換を行うための関数群を定義します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); //把uint32_t类型从主机序转换到网络序
uint16_t htons(uint16_t hostshort); //把uint16_t类型从主机序转换到网络序
uint32_t ntohl(uint32_t netlong); //把uint32_t类型从网络序转换到主机序
uint16_t ntohs(uint16_t netshort); //把uint16_t类型从网络序转换到主机序
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もし__INLINE_CODE_0__をネットワークライブラリとして選択した場合、組み込みのネームスペースにはクロスプラットフォーム対応の関数名が存在します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ビジュアルスタジオ-デバッガー&#34;&gt;ビジュアルスタジオ デバッガー
&lt;/h2&gt;&lt;p&gt;デバッグモードで、デバッグメニューのウィンドウを選択し、メモリウィンドウにチェックを入れます。&lt;/p&gt;
&lt;p&gt;__INLINE_CODE_0__において、デバッガー内でメモリ内のデータを確認できます。図を参照してください。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;Snipaste_2023-01-10_14-44-00.png&#34; &gt;调试器菜单&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;メモリの確認方法&#34;&gt;メモリの確認方法
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;変数名を直接出力し、対応する変数のアドレスにジャンプします。&lt;/li&gt;
&lt;li&gt;変数そのものがポインタであれば、変数をダブルクリックして選択し、メモリウィンドウにドラッグすると、対応するアドレスの内容が表示されます。&lt;/li&gt;
&lt;li&gt;変数がポインタでない場合、計算ウィンドウに追加し、アドレスを取得後、手動でメモリウィンドウにコピーする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例えば&#34;&gt;例えば
&lt;/h3&gt;&lt;p&gt;データを受信し、&lt;code&gt;buffer&lt;/code&gt;对象中，将网络序转成主机序，得到__INLINE_CODE_1__に保存します。この値は30で、サーバー側ではこのデータを送信するために4バイトが割り当てられています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // 网络序转成主机序
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;メモリウィンドウで、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; の内容を観察してください。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-order-network-order-debugger-observation/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;メモリウィンドウで、&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; の内容を観察してください。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-order-network-order-debugger-observation/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>その頃の少年、才能はあったかもしれないが、それほどでもなかった。</title>
        <link>https://ttf248.life/ja/p/then-boy-talent-not-much/</link>
        <pubDate>Mon, 09 Jan 2023 13:45:09 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/then-boy-talent-not-much/</guid>
        <description>&lt;p&gt;仕事七年目、コードを書くことによるポジティブなフィードバックが少なくなってきた。どうして &lt;code&gt;coding&lt;/code&gt; の道を選んでしまったのか振り返る。
幼少期の選択において、ポジティブな結果を追い求める傾向が強い。&lt;/p&gt;
&lt;h2 id=&#34;幼い頃&#34;&gt;幼い頃
&lt;/h2&gt;&lt;p&gt;引っ越して市内へ来て、コンピュータの本に触れたり、ハッカーの資料を見たり、Windowsシステムを学んだりしたこと。これらは後ほどの話です。&lt;/p&gt;
&lt;p&gt;太公、叔父の弟が、パソコン街で店を経営している。
幼い頃から二人とも早くからコンピュータに触れることがあり、基本的な認識も確立していた。その後、学校でパソコンの授業を受ける際にも興味があった。
中学校でコンピュータコンテストの話を聞いて、とてもかっこいいと思ったけど、転校してからそのことは置いておいた。
中学時代、パソコンの基本的な操作に慣れていて、コンピュータの授業では比較的目立っていた。
もし慣れていれば、ええ、間違いない、熟練というわけでもないけれど、Office のオフィスソフトに詳しいなら、それはさらにすごい。&lt;/p&gt;
&lt;h2 id=&#34;引っ越し&#34;&gt;引っ越し
&lt;/h2&gt;&lt;p&gt;引っ越しの件ですが、市内に入ってきてから隣人の影響で図書館を利用するようになり、小説はたくさん読みましたが、雑誌もたくさん読みました。
コンピューターレポート、大众ソフトウェア
コンピュータという産物への興味がますます湧き、幼い頃からのハッカーへの憧憬と、積極的に学校で関連知識を学んだ。
基本的なオペレーティングシステム：コントロールパネル、CMDコマンド、VBSスクリプト&lt;/p&gt;
&lt;p&gt;パソコン雑誌の初心者向けコーナーは、事例形式でシステム操作を解説しているので、とても良い。
ソフトウェア各種、業界ニュースを紹介。&lt;/p&gt;
&lt;h2 id=&#34;高校&#34;&gt;高校
&lt;/h2&gt;&lt;p&gt;高校2年生の時、&lt;strong&gt;博哥转校进入我们班，前两年计算机竞赛保送了好几位前辈&lt;/strong&gt;、学校の方々もこのコンクールを重視していました。
まだ前提となる設備がありまして、アメリカの卒業生が学校に一棟のビルを寄贈してくれたんです。新しい図書館や新しいマイクロコンピューター室も、すべて偶然ですね。
博さんの解説が加われば、クラスでコンピューターの達人と言えるだろう。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学力万能型で、コンピューターに長けており、他人のパソコンをハッキングしたり、教室の監視ソフトを無効化する方法を知っている。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;競技は難航しながらも、なんとか決勝まで進み、理解が不十分な部分もあったものの、基本的なアルゴリズムに関する問題で少しは収穫があった。&lt;/p&gt;
&lt;p&gt;半分も知らないようなもの、旅行に行ったきりだ。&lt;/p&gt;
&lt;h2 id=&#34;四大学&#34;&gt;四、大学
&lt;/h2&gt;&lt;p&gt;進学して専門を選ぶ際、実家の意向で自動化を選んだが、実際は強電を志望しており、帰ってきて電力局に入った結果、専門の勉強はあまりできなかった。
自己推進型の学習は専門コースではほとんどないが、大規模な授業のコンピューター科目は非常に得意。&lt;/p&gt;
&lt;p&gt;専門科目の授業をサボり、コンピュータの授業は真面目に学び、普段から《精易フォーラム》、《吾愛破解》のようなフォーラムに浸っている。
専門的な知識とC++のスキルを活かし、
結局、小专业的選択は、チップにコードを書くこと。家も特に何も言わなかったし、自分で決められたんだ。&lt;/p&gt;
&lt;p&gt;その時、&lt;strong&gt;学歴の高い&lt;/strong&gt;者が百度に入った。
姉さんも私のこと分かってくれるし、あの時は何も考えたくなかったから、叔父に相談してみることにした。
今後の進路を決め、夏休みは実家に帰らず、指導教官についていてプロジェクトに取り組み、経験を積む。
成績が及第レベルだったことで、恒生電子に入ることができた。&lt;/p&gt;
&lt;h2 id=&#34;卒業&#34;&gt;卒業
&lt;/h2&gt;&lt;p&gt;ここに鍵があります。私は「情報検索」の科目を履修しました。資料や問題の位置を迅速に見つける方法を知っています。
仕事で良い人が現れ、時間をくれて、自分で学習し、問題の根本原因を突き止め、研究開発センターの達人と会わせてくれた。
これも準備ができたし、深セン支社では、外からも私を優秀だと見ている。取引チャンネルチームの責任者を務めた。&lt;/p&gt;
&lt;p&gt;ここに問題があります。コンピュータのオペレーティングシステム、アルゴリズムなどの基礎知識、ソフトウェアエンジニアリング設計について、
体系的な学習はなく、すべて自分の経験による。
設計を頻繁に後回しにし、モジュール設計の原則もなくなり、7年目に入り、疲れ始めた。&lt;/p&gt;</description>
        </item>
        <item>
        <title>中国の新型コロナウイルス感染症解除措置</title>
        <link>https://ttf248.life/ja/p/china-coronavirus-unlocking/</link>
        <pubDate>Thu, 22 Dec 2022 19:22:04 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/china-coronavirus-unlocking/</guid>
        <description>&lt;p&gt;政策は突発的に発表され、実行も迅速です。健康コードの機能停止、公共場所での緑コード確認は不要となります。&lt;/p&gt;
&lt;p&gt;ニューヨークタイムズの中国語サイトを閲覧すると、全ページで中国の解除について議論されている。&lt;/p&gt;
&lt;p&gt;政策を評価せず、周囲の状況を記録する。&lt;/p&gt;
&lt;p&gt;当初から清零などなかったし、政策が開放され、急速に拡大して、広範囲の感染が発生している。知人に重症者はいない。&lt;/p&gt;
&lt;p&gt;深センは広州に隣接し、急速な発展を遂げている。上海在住だが、会社が郊外にあるため、この原稿を書いている時点では、大規模な感染は発生していない。&lt;/p&gt;
&lt;p&gt;対策が乏しく、急速に広範囲に拡大した。&lt;/p&gt;
&lt;p&gt;ほとんど同じような感じだろう、急に解放された感じだ。週ごとに政策が変わっていき、最終的に全面的に開放される。&lt;/p&gt;
&lt;p&gt;結果として、どこにいても落ち着いていられる。&lt;/p&gt;</description>
        </item>
        <item>
        <title>C11: sleep for vs yield</title>
        <link>https://ttf248.life/ja/p/c11-sleep-for-vs-yield/</link>
        <pubDate>Tue, 20 Sep 2022 20:54:51 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/c11-sleep-for-vs-yield/</guid>
        <description>&lt;p&gt;コードを見返しているとき、&lt;code&gt;std::this_thread::yield()&lt;/code&gt; 猛的引入眼帘，&lt;code&gt;C11&lt;/code&gt;里面的语法糖，用了不少，__INLINE_CODE_2__里面的语法糖，用了不少，__を初めて見ました。今まで気づいていませんでした。&lt;/p&gt;
&lt;p&gt;マニュアルを確認する前に、最初に考えたのは非同期処理との関連性だった。__INLINE_CODE_0__Boostライブラリのコルーチン実装でこの単語が使われているが、ここではコルーチンとは関係ないだろう。制御ロジックは通常のスレッドに関連している。&lt;/p&gt;
&lt;h2 id=&#34;文書&#34;&gt;文書
&lt;/h2&gt;&lt;h3 id=&#34;yield&#34;&gt;yield
&lt;/h3&gt;&lt;p&gt;この関数の正確性は、実装に依存し、特に使用されているOSスケジューラ機構とシステムの状態に左右されます。例えば、先着順リアルタイムスケジューラ（LinuxのSCHED_FIFO）は、現在のスレッドを中断し、同じ優先度の他のスレッドがなければ、準備完了キューの末尾に配置します（他のスレッドが存在しない場合、yieldの効果はありません）。&lt;/p&gt;
&lt;h3 id=&#34;sleep_for&#34;&gt;sleep_for
&lt;/h3&gt;&lt;p&gt;指定されたsleep_durationの間、現在のスレッドの実行をブロックします。
この関数は、スケジューリングやリソース競合により、sleep_durationよりも長くブロックされる可能性がある。
標準ライブラリでは、安定したクロックで時間を計測することを推奨します。システム時間を用いる実装の場合、待ち時間もクロック調整に影響される可能性があります。&lt;/p&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析
&lt;/h3&gt;&lt;p&gt;二つの関数は、現在のスレッドがスレッドを占有しなくなるようにするもので、効果はプラットフォームによって異なるようですね。ここまでの説明だけではまだよくわからないので、コードを実行して動作を確認してみます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;シンクパッド ノートPC（Visual Studio Community Edition 2022）、テンセントクラウド S2 スタンダードサーバー（gcc8.5）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;実行プラットフォーム&lt;/th&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;初回/μs&lt;/th&gt;
&lt;th&gt;第2回/μs&lt;/th&gt;
&lt;th&gt;第3回/μs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;9872&lt;/td&gt;
&lt;td&gt;1884&lt;/td&gt;
&lt;td&gt;11302&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;119&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;171&lt;/td&gt;
&lt;td&gt;168&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;動作結果から容易に理解できるように、オペレーティングシステムの実現方法の違いにより、高精度スリープでは、&lt;strong&gt;INLINE_CODE_0__BOLD_2&lt;code&gt;yield&lt;/code&gt;&lt;/strong&gt; の方が適しています。&lt;/p&gt;
&lt;p&gt;時間精度が__INLINE_CODE_0__に向上しても、両者の差はそれほど顕著ではない。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;thread&amp;gt;
 
// 建议其他线程运行一小段时间的“忙睡眠”
void little_sleep(std::chrono::microseconds us)
{
    auto start = std::chrono::high_resolution_clock::now();
    auto end = start + us;
    do {
        std::this_thread::yield();
    } while (std::chrono::high_resolution_clock::now() &amp;lt; end);
}
 
int main()
{
    auto start = std::chrono::high_resolution_clock::now();
 
    little_sleep(std::chrono::microseconds(100));
    std::this_thread::sleep_for(std::chrono::microseconds(100));
 
    auto elapsed = std::chrono::high_resolution_clock::now() - start;
    std::cout &amp;lt;&amp;lt; &amp;quot;waited for &amp;quot;
              &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(elapsed).count()
              &amp;lt;&amp;lt; &amp;quot; microseconds\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Linuxサーバー、MySQLパスワードリセット</title>
        <link>https://ttf248.life/ja/p/linux-server-reset-mysql-password/</link>
        <pubDate>Tue, 20 Sep 2022 14:27:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-server-reset-mysql-password/</guid>
        <description>&lt;p&gt;台に余っているテンセントクラウドのサーバーがあり、年末で契約満了になるため、更新は考えていません。開発用のデータベースとしてMySQLをデプロイしました。システムを再インストールする際、手間を省くため、テンセントクラウドが提供しているサードパーティ製のイメージを選択し、MySQLデータベースがすでにインストールされていました。パスワードや配置場所などを説明するReadmeファイルのようなものが標準で付属していると期待していましたが。&lt;/p&gt;
&lt;p&gt;テンスクラウドのシステム再インストールはすぐに完了、約1分で通知が来てログインすると、__INLINE_CODE_0__サービスは起動済み。パスワードを探し回ったが見つからず、徐々に諦めかけている。&lt;/p&gt;
&lt;p&gt;その時思った、すでにサーバーにアクセスできているし、__INLINE_CODE_0__権限を持っているのだから、どうにかしてパスワードをリセットする方法はあるはずだ。資料を調べてみると、アリババクラウドのフォーラムに投稿があり、さらに試してみることにした。&lt;/p&gt;
&lt;h2 id=&#34;パスワード再設定&#34;&gt;パスワード再設定
&lt;/h2&gt;&lt;p&gt;設定ファイルを編集&lt;/p&gt;
&lt;p&gt;再利用__INLINE_CODE_0__直接登录数据，接来下就是正常操作了，重置__INLINE_CODE_1__ユーザーパスワードで、リモートログインを有効にします。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;USE mysql;
UPDATE user SET authentication_string = password (&#39;pass&#39;) WHERE User = &#39;root&#39;;
grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;pass&#39; with grant option;
flush privileges;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定ファイルをロールバックし、データベースを再起動すればOK。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://help.aliyun.com/document_detail/42520.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://help.aliyun.com/document_detail/42520.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>夜の命名術</title>
        <link>https://ttf248.life/ja/p/night-naming-art/</link>
        <pubDate>Thu, 11 Aug 2022 22:10:14 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/night-naming-art/</guid>
        <description>&lt;p&gt;広大な漢字体系の中で、「命」という文字は唯一無二であり、同音の字一つ存在しない。 شاید، これはどこかの天が示唆しているのかもしれない—人々の人生は一度きりであり、複製も再現もできないということだ。&lt;/p&gt;
&lt;p&gt;暇な時間に起点中文网のランキングをチェックすると、『夜の命名術』の月票数が群を抜いており、堂々と首位を走り、2位との差は圧倒的だ。追いつく気配すら見えない。これまで長年、唐家三少や耳根といった有名作家の作品ばかり読んでいたが、今回は新しい作者の作品に挑戦し、異なる読書体験をしてみたいと思った。&lt;/p&gt;
&lt;p&gt;8月上旬時点で、『夜の命名術』の月チケット数は200万に達し、2位はわずか8万と、その差は驚くべきものだ。&lt;/p&gt;
&lt;p&gt;読書経験が浅く、この本の筆を評価するだけの力量はないのですが、十数章読み終えて、物語の展開は緊迫感があり、伏線が張り巡らされ、引き込まれるような内容です。このような高い月額購読数を獲得したことは、当然の結果と言えるでしょう。&lt;/p&gt;
&lt;p&gt;興味深いことに、「命」という文字と同様に、「死」という文字にも同音の字が見つかりません。これは、生命の終焉もまた唯一無二で、代替できない深い意味を内包しているのではないでしょうか？&lt;/p&gt;</description>
        </item>
        <item>
        <title>自動テストの簡単な考察</title>
        <link>https://ttf248.life/ja/p/shallow-discussion-on-automation-testing/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/shallow-discussion-on-automation-testing/</guid>
        <description>&lt;p&gt;金融取引システムにおけるテストへの投資は、他のシステムを大きく上回っており、煩雑なテスト手順が繰り返され、&lt;strong&gt;INLIN_ITALIC_1&lt;/strong&gt;__ は極めて低い。プロジェクトや人員の交代に伴い、不可避的に多くの制御不能な要因が導入され、よくあるケースとして、Aインターフェースの出力する特定のフィールドを変更した結果、Bインターフェースの結果に影響が出てしまう。バージョンリリースごとにリスクも蓄積している。&lt;/p&gt;
&lt;h2 id=&#34;理論知識&#34;&gt;理論知識
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自動化テストケースのROI = （手動実行時間）×（実行回数） / （開発コスト + メンテナンスコスト）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ユーザーが頻繁に利用し、変更されない機能。このタイプのインターフェースに対して自動テストコードを記述すると、最も効果的です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;プロジェクトのリリースが目前に迫っており、明らかに不適切です。遠い水を近くの渇きを癒すことはできず、自動化は長期的な収益モデルです。プロジェクトは既に&lt;strong&gt;生产环境&lt;/strong&gt;でオンラインとなり、安定したリリースサイクルに入っています。このタイミングが最適です。&lt;/p&gt;
&lt;h2 id=&#34;フレームの選択&#34;&gt;フレームの選択
&lt;/h2&gt;&lt;p&gt;関連する実践経験がないまま、自動テストというタスクを任されることになった場合、よくある流れ：検索エンジンを開き、現在のシステムで利用できるツールやフレームワークを探し、マニュアルを読んでから着手。すぐに適切なツールが見つかれば、おめでとうございます、&lt;strong&gt;完美开局&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;先に謝罪いたします。関連資料を確認したところ、存在しないというわけではなく、フレームワーク自体が複雑で、デプロイに必要なリソースも過多です。初心者向けには、小さく、簡潔なものが求められます。テストチームの同僚に相談した結果、&lt;code&gt;Python&lt;/code&gt; 自建フレームワークというアイデアが出ました。簡単に言うと、既存の単体テストフレームワークを使い、自動テストフレームワークとしてパッケージ化するというものです。&lt;/p&gt;
&lt;p&gt;このプロジェクトのデザインのコンセプトを参考に：&lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;フレームが必要な理由は何ですか&#34;&gt;フレームが必要な理由は何ですか？
&lt;/h2&gt;&lt;p&gt;サービスには複数のデプロイ環境があり、開発環境、テスト環境、本番環境があります。フレームワークの役割は、これらの環境を分離し、テストケースとデータを切り離すことです。異なる環境ごとに異なるテストデータが設定可能で、共通データもサポートしています。&lt;/p&gt;
&lt;p&gt;自動化の活用率向上のための根本的なロジックです。シーンが複雑になればなるほど、異なる環境間のデータは互いに関係なく、設定ケースデータ時に &lt;code&gt;label&lt;/code&gt; タグを追加し、対応する環境を指定してください。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>なぜ新しい言語を学ぶ必要があるのか。</title>
        <link>https://ttf248.life/ja/p/why-learn-a-new-language/</link>
        <pubDate>Thu, 04 Aug 2022 11:27:30 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/why-learn-a-new-language/</guid>
        <description>&lt;p&gt;学期から数えても、&lt;code&gt;C++&lt;/code&gt;に触れてから十年以上経っているのに、他のプログラミング言語を学ぶ必要性がなぜあるのだろうか。&lt;/p&gt;
&lt;p&gt;エレガントなモジュール設計の経験は不足しているが、文法は自由で、他の言語の学習も、よりエレガントなデザインを導くのに役立つ。&lt;/p&gt;
&lt;p&gt;ツールを開発するときによく使う。&lt;/p&gt;
&lt;p&gt;設計の原則は、基盤ライブラリであろう、ビジネスモジュール実装であろう、どちらも同じです。&lt;/p&gt;</description>
        </item>
        <item>
        <title>ビジュアルスタジオのコンパイル文字コード[転]</title>
        <link>https://ttf248.life/ja/p/visual-studio-compilation-character-set-translation/</link>
        <pubDate>Thu, 04 Aug 2022 10:51:43 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/visual-studio-compilation-character-set-translation/</guid>
        <description>&lt;p&gt;定数に改行文字が含まれています。&lt;/p&gt;
&lt;h2 id=&#34;visual-studio&#34;&gt;visual studio
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;斜体_5&lt;/strong&gt;&lt;strong&gt;太字_3&lt;/strong&gt;&lt;strong&gt;斜体_6&lt;/strong&gt;&lt;strong&gt;太字_4&lt;/strong&gt;&lt;strong&gt;斜体_7&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;参照資料は、問題の発生原因を詳しく説明している。&lt;/p&gt;
&lt;p&gt;エンコーディングに関しては、&lt;code&gt;MSVC&lt;/code&gt;有专门的编译选项&lt;code&gt;/source-charset&lt;/code&gt;和&lt;code&gt;/execution-charset&lt;/code&gt;の2つで対応します。前者はファイルのエンコードを示し、後者はコンパイル後の文字配列内のバイトがどのようなエンコードであるかを示しており、エンコーディングの問題は基本的にこの2つのオプションで解決できます。&lt;/p&gt;
&lt;p&gt;例えば、太字_11_斜体_21_太字_12_斜体_22_太字_13_斜体_23_太字_14_斜体_24_太字_15_斜体_25_太字_16_斜体_26_太字_17_斜体_27_太字_18_斜体_28_太字_19_斜体_29_太字_20_インラインコード_10_は、コンソール上で正常に漢字を表示する。&lt;/p&gt;
&lt;h2 id=&#34;cmake-ビジュアルスタジオ設定&#34;&gt;CMake ビジュアルスタジオ設定
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;if( WIN32 )
    message( STATUS &amp;quot;Configuring trade on WIN32&amp;quot;)
    set( CMAKE_CXX_FLAGS &amp;quot;${CMAKE_CXX_FLAGS} /source-charset:utf-8 /execution-charset:gbk&amp;quot;)
endif()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/146543940&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/146543940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ペロシ氏、台湾訪問</title>
        <link>https://ttf248.life/ja/p/pelosi-visits-taiwan/</link>
        <pubDate>Tue, 02 Aug 2022 22:57:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/pelosi-visits-taiwan/</guid>
        <description>&lt;p&gt;政治は理解しないし、コメントもしない。このインターネット上の「狂騒」を記録するだけ。&lt;/p&gt;
&lt;h2 id=&#34;随筆&#34;&gt;随筆
&lt;/h2&gt;&lt;p&gt;数年前の&lt;strong&gt;唐山打人事件&lt;/strong&gt;, &lt;strong&gt;人教小学教材文化入侵事件&lt;/strong&gt;は、もうほとんど忘れられているでしょう。ニュースの話題はすでに他人事のように感じられ、特に感銘もなく、帰宅してドラマを見るのが日課です。この出来事をただ眺めるだけです。経済状況がこうなのだから、戦争をしても何も変わらないでしょう。政治には関せず、コメントもしません。このインターネット上の「狂騒」を記録しておきます。&lt;/p&gt;
&lt;h2 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供していただければ日本語に翻訳します&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;/h2&gt;&lt;p&gt;2022年のナンシー・ペロシの台湾訪問、通称ペロシ訪台とは、アメリカ合衆国第52代下院議長ナンシー・ペロシが2022年のアジア各国訪問の一環として台湾を訪問した行程を指す。&lt;/p&gt;
&lt;p&gt;アメリカ下院議長が、第三の人物として認識され、台湾訪問を計画していることに対し、中国は強く抗議し、海軍駆逐艦部隊を台海北東海域に派遣、山東艦と遼寧艦という二つの空母戦団を展開。東部戦区と南部戦区はそれぞれ東シナ海と南シナ海で大規模な実動演習を実施。一方、アメリカは、ロナルド・レーガン号空母戦団を台海周辺に派遣し、ペロシ議長の訪問を警護するとともに、複数の偵察機や空中給油機を嘉手納米軍基地に待機させた。&lt;/p&gt;
&lt;p&gt;中国国家主席習近平と米国大統領ジョー・バイデンは、訪問前に関係ビデオ会談を行い、内容は台湾問題に関するものだった。台湾および国際メディアによると、ペロシ議長及び衆院訪問団は2日台北松山空港に到着し、宿泊後3日に蔡英文中華民国総統ら政府高官と面会する予定だ。有識者からは、今回のペロシ氏の台湾訪問が1996年の台湾海峡ミサイル危機以来、26年ぶりの台湾海峡危機を引き起こす可能性があるという見方が示されている。&lt;/p&gt;
&lt;h2 id=&#34;08-11&#34;&gt;08-11
&lt;/h2&gt;&lt;p&gt;今日をもって事態は落ち着いた、と。この間、トップニュースは次々と来る海軍演習が中心で、知恵袋も毎日熱い話題を更新する工夫をしており、全てそのことについて語っている。編集者の皆さん、お疲れ様でした。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Windows プラットフォームでのフォルダサイズ高速統計</title>
        <link>https://ttf248.life/ja/p/windows-platform-quick-folder-size-statistics/</link>
        <pubDate>Mon, 01 Aug 2022 19:54:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-platform-quick-folder-size-statistics/</guid>
        <description>&lt;p&gt;どうしようか。ディスクがたくさんあって、整理したいけど、ファイルが多い状態で、標準のリソースマネージャーでフォルダサイズを統計すると、途中で諦めたくなるほど遅い。&lt;/p&gt;
&lt;h2 id=&#34;everything&#34;&gt;Everything
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;斜体_3&lt;/strong&gt;**太字_2__斜体_4__も、友人から聞いたはずです。検索速度は標準のファイルエクスプローラーを大幅に上回ります。システムレベルでファイルの高速インデックスがサポートされているのであれば、同様のツールが見つかるはずです。ファイルのインデックスを作成しつつ、ファイルサイズも統計的に把握できるでしょう。&lt;/p&gt;
&lt;h2 id=&#34;wiztree&#34;&gt;WizTree
&lt;/h2&gt;&lt;p&gt;公式サイト：&lt;a class=&#34;link&#34; href=&#34;https://www.diskanalyzer.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.diskanalyzer.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;標準インストールモードまたはグリーン版の展開実行。&lt;/p&gt;
&lt;p&gt;高速で、多様なデータ表示形式があり、左側はツリー図モード、右側はファイルタイプです。もちろん、グラフィカルな表示もソフトウェアの最下部にあります。&lt;/p&gt;
&lt;h2 id=&#34;spacesnifferアップデート終了サポートなし&#34;&gt;SpaceSniffer（アップデート終了、サポートなし）
&lt;/h2&gt;&lt;p&gt;ソフトウェア公式サイト：&lt;a class=&#34;link&#34; href=&#34;http://www.uderzo.it/main_products/space_sniffer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.uderzo.it/main_products/space_sniffer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;操作は簡単です。対応するディスクを選択すると、ソフトウェアがフォルダの容量をグラフィカルに表示します。容量が大きいほど、画像内のマトリックスも大きくなります。その他の操作は、クリックすれば理解できるはずです。ファイルに対して条件フィルタリングにも対応しています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルサイズフィルタ&lt;/li&gt;
&lt;li&gt;書類の日付フィルタ&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;space_sniffer.gif&#34; &gt;基础用法&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;advance.gif&#34; &gt;高级用法&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://moe.best/software/spacesniffer.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://moe.best/software/spacesniffer.html&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>ウェブページのスタイルシート（CSS）のコピー：要素検査</title>
        <link>https://ttf248.life/ja/p/how-to-copy-webpage-css-element-inspection/</link>
        <pubDate>Sun, 31 Jul 2022 23:36:48 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/how-to-copy-webpage-css-element-inspection/</guid>
        <description>&lt;p&gt;海外のテンプレートをベースに修正・調整することが多く、中国語コンテンツのレイアウトについてはあまり考慮されていない。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;半月ほど前にブログのスタイルシートを調整しました。長年バックエンドサービスの開発をしていて、フロントエンドは初心者です。色々試しましたが、デザインがよくわかりません。ふと、いつも参考にしている技術ブログ「infoQ」や「OSChina」のようなレイアウトを取り入れてみたらどうだろうと考えました。ソースコードを見て関連要素を探しましたが、全く見当もつきませんでした。&lt;/p&gt;
&lt;p&gt;フロントエンドの方ならここで笑ってしまうかもしれませんね…指定要素の特定も分からない。分からなくても大丈夫、週末に時間があるので、立ち止まって考えてみましょう。昔、__INLINE_CODE_0__クローラーを書いた時、似たようなものが使われていた気がします。&lt;/p&gt;
&lt;h3 id=&#34;元素チェック&#34;&gt;元素チェック
&lt;/h3&gt;&lt;p&gt;確かに、ブラウザに標準搭載されている要素検査ツールを使えば、スタイルシートのコピーや特定要素の特定もあっという間にできます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要素の複製&lt;/li&gt;
&lt;li&gt;outerHTMLをコピーする&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;li&gt;JS パスをコピーする&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/li&gt;
&lt;li&gt;XPathをコピー&lt;/li&gt;
&lt;li&gt;XPathをコピーします。&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Windows プラットフォーム向け、巨大ファイル編集：EmEditor (テキストエディタ)</title>
        <link>https://ttf248.life/ja/p/windows-platform-editing-large-files-emeditor-text-editor/</link>
        <pubDate>Sun, 31 Jul 2022 23:21:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/windows-platform-editing-large-files-emeditor-text-editor/</guid>
        <description>&lt;p&gt;上海国安データベース事件は、ハッカー界隈で騒がれており、真偽は定かではない。2年後覚えていれば、また振り返ってみよう。過去の経験から、ローカルのソーシャルエンジニアリングデータベース資料を更新したところ、巨大なSQLファイル：17.9Gを発見。普通のテキストエディタではプレビューですら問題があり、ましてや開くことなどできない。ネットユーザーとの雑談で、EmEditorという名前が出てきた。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;公式サイト：&lt;a class=&#34;link&#34; href=&#34;https://www.emeditor.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.emeditor.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;週末に時間を作って試してみたところ、なかなか便利だった。デザインも大規模ファイルの編集に対応しており、十分なメモリがあればファイル全体を読み込んで、検索や編集の速度も速い。分割機能もある。&lt;/p&gt;</description>
        </item>
        <item>
        <title>上海鴛鴦鍋、閉鎖。</title>
        <link>https://ttf248.life/ja/p/shanghai-yuanyang-pot-closure/</link>
        <pubDate>Wed, 30 Mar 2022 23:03:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/shanghai-yuanyang-pot-closure/</guid>
        <description>&lt;p&gt;リーダーシップ層は先日まで「上海は封鎖しない、上海は重要だ」と顔を立てていた。しかし、現状に迫られたり、自分の帽子（地位）を守るために、川向こうから封鎖し始め、やがて黄浦江のこちら側も封鎖するという事態になった。&lt;/p&gt;
&lt;h2 id=&#34;封鎖&#34;&gt;封鎖
&lt;/h2&gt;&lt;p&gt;幼い頃にSARSの流行があったが、あまり記憶に残っていない。後で関連資料を見たところ、潜伏期間が短かったため、全国的な拡大が発生する前に終わったようだ。確かその時小学生だったから、毎日の下校は早く、教室には毎日消毒液の匂いが漂っていた。&lt;/p&gt;
&lt;p&gt;2019年末から現在にかけて、新型コロナウイルス感染症も早くも3年近くが経ちました。外出勤している人たちは、マスクを着用する時間帯にはマスクを着用することを習慣づけました。上海での今回の感染の波は、当初は香港が原因で、その後、国境ゲートを通じて深圳に広がりました。上海でも、香港からの輸入事例によるものでした。当局は最終的に、隔離ホテルにおける予防措置が不十分であったことが感染拡大の原因であると発表しました。変異株となったウイルスは毒性は弱まったものの、拡散速度は速くなり、ホテルの換気システムを通じて拡散されました。当初は深刻ではなかったのですが、まだ制御することができました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人々は常に自信を持っている。上海のリーダーたちもそうだ。彼らは、私たちができる網掛け型リスク管理、精密なリスクコントロールを選び取るだろう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現在の結果は皆さんもご覧の通り、新規感染者はすでに2万人を突破し、やむなく都市封鎖という措置を取った。しかし、これは公には「都市封鎖」という言葉を使わずに伝えている。なぜなら、以前の記者会見で上海市は封鎖する必要はないと発表しており、最後の面子を保つためである。&lt;/p&gt;
&lt;h2 id=&#34;買い物&#34;&gt;買い物
&lt;/h2&gt;&lt;p&gt;宅配ビジネスは、インターネットが生み出した新しい産業です。要点は、誰かが配達してくれる必要があることですが、広範囲がロックダウンされたため、お店は営業できても、配達する人がいないという状況になり、最後の环节が途絶えてしまいました。外にいる人は理解しにくいかもしれませんが、上海のような国際都市で、なぜみんなが一斉に野菜を買うのか？考えてみればわかると思いますが、大部分の人も地方から出てきて仕事をしているだけで、賃貸住まいだし、普段は社員食堂やお店で食事をするので、あまり家で自炊はしません。外に出る道が通じなくなったとき、条件の良い人は買い出しを始めます。このようなロックダウンの告知は事前に通知がなく、みんな日常的に十分な食料や野菜を備蓄しているわけでもないので、動画に映っていたような一斉買い出しにつながりました。その結果、人々の密集が直接、感染拡大を再燃させました。&lt;/p&gt;
&lt;h2 id=&#34;業界&#34;&gt;業界
&lt;/h2&gt;&lt;p&gt;IT業界に携わっているのですが、コロナ禍でリモートワークを体験しました。19年頃、自宅待機がほぼ一ヶ月間続き、何度も新幹線のチケット変更をして、いつ深圳に戻れるか全く分かりませんでした。飲食や観光、サービス業など、そうした方々がこの数年間どのように過ごしてきたのか想像もできません。&lt;/p&gt;</description>
        </item>
        <item>
        <title>お金を稼ぎたいときに。</title>
        <link>https://ttf248.life/ja/p/when-you-want-to-make-money/</link>
        <pubDate>Sun, 27 Mar 2022 03:23:53 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/when-you-want-to-make-money/</guid>
        <description>&lt;p&gt;普通人都是社交動物です。間違いないでしょう。あなたも人間であり、強い社会的属性を持つ直立する動物です。自卑心や虚栄心を持ちます。社会は常に変化し、あなたの&lt;strong&gt;平常心&lt;/strong&gt;を侵食し続けています。私たちは偉人たちについて議論しません。彼らは社会や国のために身を犠牲にする意思がある人々です。&lt;/p&gt;
&lt;h2 id=&#34;今の私&#34;&gt;今の私
&lt;/h2&gt;&lt;p&gt;平均賃金で見ても、実家の方の給料で見ても、今の収入は平均を大きく上回っている。これ以上何を不満に思うのだろうか？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;稼ぐと1万元（いちまんえん）が手に入ると、次は100万元（ひゃくまんえん）を目指すようになり、100万元が手に入ると、次は1000万（せんまんえん）を目指す。これは人間の本性だ。自分の内面と向き合う必要がある。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;何だか目が赤いのは、より手軽にお金を稼ぐ方法：ショート動画&lt;/p&gt;
&lt;p&gt;皆、業界に入るのが簡単ではないことは理解しているでしょう。皆さんが見ているのは短い動画ですが、その裏側にある撮影脚本の作成は見ていないのでしょう。しかし、誰にでも「自分は天才だ」「この業界に向いている」という夢があるものです。&lt;/p&gt;
&lt;h2 id=&#34;開始接触&#34;&gt;開始接触
&lt;/h2&gt;&lt;p&gt;たくさん動画を見て、自分の頭で少し分析してみると、明らかにプロの編集技術が使われていて、強い映画的な色合いがある。つまり、彼らはある程度、専門的な教育を受けているということだ。もちろん、無名の人がいきなり人気者になるということもあり得るが、それは一般的には当てはまらないだろうね？&lt;/p&gt;
&lt;p&gt;TikTok には、動画の作り方を教えてくれる動画がたくさんあります。その時、人は冷静さを取り戻します。もし本当に稼げるなら、なぜ彼自身が作らないのか、あなたに教える必要があるのでしょうか。&lt;/p&gt;
&lt;h2 id=&#34;非人道的レコメンドアルゴリズム&#34;&gt;非人道的レコメンドアルゴリズム
&lt;/h2&gt;&lt;p&gt;以前、抖音のアルゴリズムが映画の編集やアニメの編集を推薦してくれるたびに、見ているうちに面白いと感じるようになる。しかし、私が抖音でお金を稼ぐ方法について調べ始めたとき、推薦されるのは様々な教育ビデオばかりで、それが途切れることなく私の推薦フィードを埋め尽くすようになった。私もIT業界にいる人間だ。その時、アルゴリズムを作っている人たちは頭がおかしいのではないかと思う。こんな風に推薦するとは、私をバカにしているのか？それとも、あなた達がバカなのか？しかも、抖音でお金を稼ぐ方法のビデオを色々な角度から、様々な種類のものを次々と推薦してくる。この原稿は私が深夜3時に書いているものだ。本来は書きたくなかったのだが、このようなビジネスモデルがどれくらいの期間持続するのだろうか？どれくらい人々の時間を奪うのだろうか？&lt;/p&gt;
&lt;h2 id=&#34;生き抜く&#34;&gt;生き抜く
&lt;/h2&gt;&lt;p&gt;人に指示する時は口調がいつも変わっているのに、自分でやる時はコントロールできない。笑話だ。純粋な技術ブログの書き手ではないので、国内には発信していないことも多い。ここでは適当に不満を言ってみる。もしいつか封鎖されたら、場所を変えるしかない。抖音（ドゥイェインタオ）が何もしていないとは言えない。少なくとも今のところ、リアルタイムニュースの伝達や国家のいくつかの政策の宣伝には積極的に協力している。結局のところ、我国では党の方針に背くことはできないだろう？&lt;/p&gt;
&lt;p&gt;今、昔を思うと。人生の意味が見つからない時は、静かに本を読むだけでいい。今の時代に、どれだけ人が静かに読書できるだろうか。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;この度は、科学技術の進歩に感謝します。もしこの行が見えれば、文章全体が非常に口語的であることに気づくでしょう。そして、私もただ読みながら書き終えてしまいました。普段使っている入力法は搜狗（ソウグ）ですが、7〜8年も使っています。しかし、音声入力に関しては、やはり科大讯飞（カダクンフェイ）のものがプロ仕様です。&lt;/p&gt;
&lt;p&gt;2022年の文章の番号が002に変更された。なぜ二つのゼロが増えたのだろうか？今年の文章で百を超えることを願っている。まさしくそれが夢だ。文章というにはふさわしくない、ただの記録と言えるかもしれない。「吾日三省」のように、何かを思いつくはずだ、そうだろう？&lt;/p&gt;</description>
        </item>
        <item>
        <title>思ったより簡単なことだが、コードコピーボタンを追加する。</title>
        <link>https://ttf248.life/ja/p/add-code-copy-button/</link>
        <pubDate>Fri, 25 Feb 2022 01:23:39 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/add-code-copy-button/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;４時間もかけて、この文を見て笑ったけど、まさかこんなに時間がかかるなんて。最後に見たら３時間だった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二〇二二年最初の原稿、と言っても大したことのない内容で、タイトル通り（当時の私はまだ若かった）、&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;作业&lt;/a&gt;をそのままコピーして保存し、ずいぶんと待った後、ようやく思い出しました。&lt;/p&gt;
&lt;p&gt;移行時にプラグインが少なくて、コードのコピー＆ペーストができず、多くのノートを印象ノートからブログに移行する際に、その操作が煩雑になり、ブログ更新のモチベーションを著しく損ねていました。&lt;/p&gt;
&lt;h2 id=&#34;前章&#34;&gt;前章
&lt;/h2&gt;&lt;p&gt;まずは原著者の稿を丁寧に見て、一度通読してから紹介を見てみよう。清華大学の学部在学生で、早い段階からコンピュータに触れているとは、すごいな。まずこのブログを見てみるか。何をしていいのか全く思い出せない。ついでに、作者の__INLINE_CODE_0__仓库，这个修改后的__INLINE_CODE_1__テーマの方が今のよりずっと魅力的だし、新機能も多いから、やってみよう。まずは関連コードをマージしよう。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/add-code-copy-button/2022-02-25-02-08-19.png&#34;
	width=&#34;215&#34;
	height=&#34;150&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;344px&#34;
	
&gt; &lt;img src=&#34;https://ttf248.life/p/add-code-copy-button/2022-02-25-02-08-40.png&#34;
	width=&#34;217&#34;
	height=&#34;167&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;新機能記事履歴の確認関連提出記録の閲覧&#34;&gt;新機能：記事履歴の確認、関連提出記録の閲覧
&lt;/h3&gt;&lt;p&gt;なかなか良い効果だ、文の最後に持っていくと体験できる。&lt;/p&gt;
&lt;p&gt;作業前に作者のオリジナルリポジトリの履歴をよく見ていなかった、単純なマージで済むだろうと思っていた。結局、大量のコードをマージしてしまい、途中何度もコンフリクトが発生し、無駄に上書きしてしまった。全てはフロントエンドとレンダリングのテンプレートコードで、自分の希望に合わせて変更した。&lt;/p&gt;
&lt;p&gt;倉庫住所：&lt;a class=&#34;link&#34; href=&#34;https://github.com/TianlongXiang/hugo-theme-even&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/TianlongXiang/hugo-theme-even&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中国の一つの問題点があり、&lt;code&gt;git&lt;/code&gt;不调整这个参数，会导致生成的获取不到当前文章的&lt;code&gt;commit hash&lt;/code&gt;のため、過去のリンクが生成できません。記事の完全な履歴を生成する際も、自動統合スクリプトを修正する必要があります。現在のリポジトリ全体の過去の記録を必ず取得してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;name: Build Github
run: git config --global core.quotePath false &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;スタイル調整&#34;&gt;スタイル調整
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;サイトコンテンツの幅を調整しました。以前のデザインはモバイルとPC向けでしたが、実際には誰もスマホで見ていません。私もPCで見ています。&lt;/li&gt;
&lt;li&gt;目次バーは自動伸縮に対応しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;参考__INLINE_CODE_0__のコードを半時間以上見ていても、コピーボタンを追加する方法がよく分かりませんでした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;時が流れ、一月後、またこのことを思い出した。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この課題が理解できないので、別の課題を写し転がせば、なんとかなるだろう。検索結果は意外だった,&lt;code&gt;hugo&lt;/code&gt;BOLD_2&lt;code&gt;even&lt;/code&gt;レンダリングされたコードブロックのスタイルが資料の説明と異なり、このあたりは少し面倒なので、簡単に記録しておく。&lt;/p&gt;
&lt;p&gt;フロントエンド開発の基礎があまり分からないので、理解できない箇所はブラウザを開いて &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;，对着代码分析、靠着右边的样式器信息，慢慢也分析懂了逻辑；__INLINE_CODE_1__を参考にし、コンソールでログを確認しました。分からないことはたくさんありますが、落ち着いて論理を整理・分解していけば、必ず道は開けます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ノードが複数ある場合、ここでいうのは単一のコードブロックを指し、テーマ自体が行番号を出力しているため、コピーボタンが2つ表示される。&lt;/li&gt;
&lt;li&gt;コードハイライトの自動レンダリングが欲しいのだが、テーマ設定に詳しくない。&lt;/li&gt;
&lt;li&gt;コードハイライトの制御設定。&lt;/li&gt;
&lt;li&gt;設定ファイルを調整しても、なかなかうまくいかず、レンダリング結果が期待と異なっている。&lt;/li&gt;
&lt;li&gt;これらの設定を見つけたので、資料をさらに調べ、設定を調整します。まずは行番号を削除します。&lt;/li&gt;
&lt;li&gt;カスタムの&lt;code&gt;css&lt;/code&gt;样式表，配置自定义的&lt;code&gt;js&lt;/code&gt;スクリプトの設定&lt;/li&gt;
&lt;li&gt;色々あったので、ふと最近見た配色図が良さそうだなと思い、ボタンのスタイルを修正してみることに。中国風の天青色でやってみる。&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:20%&#34; src=&#34;2022-02-25-02-01-22.png&#34; /&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:20%&#34; src=&#34;2022-02-25-02-01-33.png&#34; /&gt;
&lt;p&gt;四時間かけてやったのに、この文を見て笑ってしまった。まさかこんなに時間がかかるなんて。最後に見たら三時間だった。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ouuan.github.io/post/from-hexo-to-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/configuration-markup#highlight&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/configuration-markup#highlight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>私たちが一生をかけて追い求めるものは何か。</title>
        <link>https://ttf248.life/ja/p/we-exhaust-ourselves-chasing/</link>
        <pubDate>Tue, 31 Aug 2021 21:09:58 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/we-exhaust-ourselves-chasing/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;人と交わることは、生涯を振り返れば、胸中に宿るものから得たり、狭い部屋で言葉を悟ったり、あるいは託されたものを託し、身を遊ばせることから生まれるものだ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人生は、一瞬の幻。草木の芽吹きと枯死、朝日の昇り沈みのごとし。&lt;/p&gt;
&lt;p&gt;欲は尽きない。&lt;/p&gt;
&lt;p&gt;幼い頃、川辺に寝そべり蓮の花弁をむき、東風に乗せて凧を揚げ、追いかける蝶を追いかけた。&lt;/p&gt;
&lt;p&gt;傍は桑の陰で学び、種を植え、帰ってきては食事をして夕暮れ過ぎてから、濡れた蓑をまとって月明かりの下に寝る。&lt;/p&gt;
&lt;p&gt;将来は、科挙に合格し、美女との同行を望み、財産が絶えず、昇進が続き、友人が集まり、毎晩宴を楽しむことを願う。&lt;/p&gt;
&lt;p&gt;年を取りたきが、健康長寿を望む。童守人を迎え、幼き子弟を待つ。将棋盤と、旧友と、酒器一つあれば、囲炉裏の庭園で、穏やかな時を過ごす。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人々が慌ただしく駆け回っているのは、ほんのわずかな銀のためだけなのに。しかし、そのわずかな銀こそが、世の中のあらゆる憂鬱を癒すのだ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多くの人は日々の生活に苦しんでいるのに、どこに意味を追い求める時間があるだろうか。&lt;/p&gt;
&lt;p&gt;実際、人生はただの一つの体験に過ぎず、草木や日月のように、欲望の輪廻を経験するのだ。&lt;/p&gt;
&lt;p&gt;生きることが分からなければ、儚い露を天地に託し、広大な大海の一粒砂のように感じるだろう。自分の短い生涯を嘆き、長江の尽きることのない流れを羨むだろう。しかし、生きることを悟れば、出会えたことに喜び、一時的なものであっても自分にとって有益と知り、満足して過ごし、老いの訪れも知らないだろう。&lt;/p&gt;
&lt;p&gt;あなたは金銭や名声を追い求めることもできますし、詩や酒、お茶を愛でることもできます。川の上での爽やかな風を追い求めることもできますし、山の上の明るい月を追い求めることもできます。&lt;/p&gt;
&lt;p&gt;結果はいつか過ぎ去るものなので、あまり結果を追い求めることに固執する必要はありません。&lt;/p&gt;
&lt;p&gt;一生をかけて、この世に身を置き、可能な限り世の喜び悲しみ、生老病死を経験する。&lt;/p&gt;
&lt;p&gt;このセリフが大魚海棠でとても好きです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生は短い、いずれ失うものだから、思い切って誰かを愛し、山を登り、夢を追いかけよう。答えのないこともたくさんあるのだから、思い切って進むがいい。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;『蘭亭集序』と『赤壁賦』をとても気に入っています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;毎回の往時の人の興感の由を思う時、あたかも一つの契を結んだかのように、これまで文に臨み嘆き悲しむことがなかったことはない。この思いを胸中に抱くことができない。確かに一生死は虚誕であり、斉彭殇は妄作である。後世が見る今もまた、今の我々が昔を見るのと同じである。哀れなり！&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>証券コードの特殊形式に関する説明</title>
        <link>https://ttf248.life/ja/p/interactive-brokers-stock-code-format-explanation/</link>
        <pubDate>Mon, 30 Aug 2021 17:35:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/interactive-brokers-stock-code-format-explanation/</guid>
        <description>&lt;p&gt;稀なこと、時間が経てば必ず当たる、関連株式コード：バークシャー&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;一部の株式コード名に &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 或者其他特殊字符，通过 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; が含まれる場合、Interactive Brokers (IB) へ送信する際に、株式コード名の変換が必要となる場合があります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BRK/B -&amp;gt; BRK B&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;凸通証券の場合、変換ルールは固定なので、コーディングで実装すれば良いです。ルールが固定でない場合は、通常、システム内で対応するマッピング関係を保存し、業務担当者が定期的に更新する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ibkr.info/article/462&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How do I enter the symbol for Berkshire Hathaway Class B shares onto TWS?&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>途方にくれた。</title>
        <link>https://ttf248.life/ja/p/lost-and-confused/</link>
        <pubDate>Thu, 26 Aug 2021 18:01:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/lost-and-confused/</guid>
        <description>&lt;p&gt;人生のある段階で、人はしばしば迷いを感じる。自分が何を求めているのか分からなくなり、仕事の細かな日々のうちに、仕事の意味を求める追究を次第に失ってしまう。卒業したての頃、心は熱い憧れに満ち溢れていた。その時、私は躊躇なく言った。「コードを書くこと、人目を引く、素晴らしいコードを生み出すことが欲しい」と。しかし、今の仕事では、より多くの業務レベルの事柄に触れるようになり、それは業界発展による恩恵も大きい。&lt;/p&gt;
&lt;p&gt;生活観についていえば、結婚や出産、家庭の基盤を築くといったことは、まだ自分の考える範囲に含めていません。頭の中はほとんど空っぽで、今を楽しむことばかり考えています。週末になると、静かにゲームをして過ごすのが好きで、一日中家にこもって、自分の小さな世界に浸ることがよくあります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人生には、愛し、心から打ち込めることが必要だ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;購入&#34;&gt;購入
&lt;/h2&gt;&lt;p&gt;数年前まで、自分のために家を買うため、必死に貯金していました。毎日、その目標のために節約していました。しかし、住宅価格が右肩上がりに上がり続け、当初の不安や不満から、次第に無気力になり、家を買ったところで重荷が増えるだけだと感じて、この考えを諦めました。&lt;/p&gt;
&lt;h2 id=&#34;貯金&#34;&gt;貯金
&lt;/h2&gt;&lt;p&gt;当初は、高性能なデスクトップパソコンを買ったり、欲しいカメラを手に入れたり、気ままに旅行に出かけたりするために貯金していました。でも今は、もっと落ち着いた気持ちで貯金をしているので、日々の出費を気にせず、食べたいものを食べたり、新しいものにも積極的に挑戦したりしています。&lt;/p&gt;
&lt;h2 id=&#34;帰宅&#34;&gt;帰宅
&lt;/h2&gt;&lt;p&gt;結局、私が心の底で最も望んでいるのは、家に帰ることだった。特別なことをするわけでもなく、ただ慣れ親しんだ場所に帰り、安らぎと静寂を感じたいだけだ。&lt;/p&gt;</description>
        </item>
        <item>
        <title>香港株式先物基礎概念</title>
        <link>https://ttf248.life/ja/p/hong-kong-futures-basics/</link>
        <pubDate>Wed, 18 Aug 2021 10:54:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/hong-kong-futures-basics/</guid>
        <description>&lt;p&gt;金融市場が常に変化する中、投資家は投資収益を増やすため、より効果的な投資ツールを求めるようになりました。投資家のニーズに応えるため、香港取引所（HKEX）は一連の株式先物コントラクトを導入しました。これらのコントラクトは、香港交易所の全子会社である香港聯合交易所有限公司（聯交所）に上場銘柄を表しており、流動性が高く、活発な取引が可能です。株式先物に投資することで、個別企業のパフォーマンスへの参加に加え、デリバティブ市場が提供する空売りやレバレッジ効果などの利点も享受できます。&lt;/p&gt;
&lt;p&gt;株式先物は、属する業界の代表的な銘柄を指すため、投資家は特定の業界のパフォーマンスが市場全体を上回ると予想される場合や、下回ると予想される場合に、その業界の株式先物を選択することで投資戦略を立てることができる。&lt;/p&gt;
&lt;h2 id=&#34;基本定義&#34;&gt;基本定義
&lt;/h2&gt;&lt;p&gt;株式先物契約は、将来の特定日に特定価格（約定価格）で買入または売却することを示す、特定の株式数を表す金融価値を対象とする取引協定です。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;h3 id=&#34;契約満了&#34;&gt;契約満了
&lt;/h3&gt;&lt;p&gt;契約満了時に、約定成立価格と最終決済価格の差額に契約乗数（レバレッジ）をかけた損益額が、契約保有者の保証預金口座から差し引かれる。&lt;/p&gt;
&lt;p&gt;最終清算価格は、関連株式が最終取引日の当日、香港証券取引所に公表された正式な終値です。&lt;/p&gt;
&lt;p&gt;株式先物の投資家が満期前にポジションを決済する場合、売り建ての投資家は将来相場建（ふしあいがた）を買戻し、買い建ての投資家は将来相場建を売却するだけでよい。&lt;/p&gt;
&lt;h3 id=&#34;保証金&#34;&gt;保証金
&lt;/h3&gt;&lt;p&gt;先物取引を行う際、買い手と売り手は共に、契約履行の保証として、まず基礎マージンを預け入れる必要があります。清算所は毎日終盤後、未決済の全てのコントラクトを市場価格で計算し、その結果を投資家のマージン口座から差し引く根拠とします。もし市況が不利となり、投資家が損失を被り、マージンが規定水準を下回った場合、取引所は指定期間内に追加の入金を求め、マージンを当初の基礎マージンレベルに維持させます（追証）。&lt;/p&gt;
&lt;h2 id=&#34;利点&#34;&gt;利点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;取引手数料は割安です。先物契約は数千株に相当する価値を持ち、取引手数料はその数量によって変動するため、取引コストは契約価値と比較して非常に低いです。&lt;/li&gt;
&lt;li&gt;株の空売りがより便利になりました。投資家は手軽に株の空売り先物を取引できるため、下落相場では空売り先約を利用して利益を得ることができます。&lt;/li&gt;
&lt;li&gt;証券取引所は、市場の流動性を確保するため、指定された価格幅内で同時に入札価格と成約価格を提供し、株式先物市場の流動性を維持する「証券取引家制度」を設けています。&lt;/li&gt;
&lt;li&gt;レバレッジ効果：投資家が株式先物契約を売買する際、契約額のほんの一部である保証金を支払うだけで済むため、ヘッジや取引がよりコスト効率的になる。&lt;/li&gt;
&lt;li&gt;海外投資家の為替リスクを軽減：株式先物契約は、海外投資家が少額の証拠金を預けるだけで、現地の優良株に投資できる手段を提供するため、為替リスクを大幅に軽減できます。&lt;/li&gt;
&lt;li&gt;電子取引システムを通じた売買：株式先物契約は、期交所の電子取引システムを通じて売買されます。全ての注文は、価格と時間の優先順位に従って執行され、即座に購入価格、売却価格、および約定価格を表示し、市場の透明性を最大限に高めます。&lt;/li&gt;
&lt;li&gt;清算会社が履約保証を提供します。先物および商品先物の契約は、期交所が全額を所有する香港先物清算有限公司（清算会社）によって登録され、決済され、履約保証が提供されます。清算会社がすべての未決済契約の相手方であるため、取引所参加者は相手方のリスクを負う必要はありません。ただし、保証の範囲は、取引所参加者が顧客に対して有する財務的責任には及びません。投資家は、証券業者を選択する際には慎重に検討する必要があります。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;胴元制&#34;&gt;胴元制
&lt;/h3&gt;&lt;p&gt;市場参加者は、個別株式先物についてマーカーとして登録し、指定された最大スプレッド内で買い気配と売り気配を提示することができます。取引所参加者およびその顧客は、個別株式先物にマーカーが登録されていない場合、売買は市場単位に基づいて行われる可能性があることに注意する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;株式および先物の取引のリスク&#34;&gt;株式および先物の取引のリスク
&lt;/h2&gt;&lt;p&gt;株式先物は高いリスクを伴います。株式先物の売買によって生じる損失は、初期に預けた保証金を超える可能性があり、短時間で追加の保証金の支払いを必要とする場合があります。支払いができない場合、保有ポジションが強制的に決済され、その際の損失はご自身で負担することになります。したがって、株式先物の取引にはリスクが伴うことを十分に理解し、ご自身に適しているかどうかを検討する必要があります。取引前に、ご自身の財務状況や投資目標に基づいて、証券会社またはファイナンシャルアドバイザーに相談し、期货およびオプション契約の売買が適切であるか確認することをお勧めします。&lt;/p&gt;
&lt;h2 id=&#34;注釈調整&#34;&gt;注釈調整
&lt;/h2&gt;&lt;p&gt;株式会社が増配や紅字株の発行などの形で資本構成を変更する場合、純資産額の計算時または効力発生日に株価が変動し、それによって未決済契約にも影響が生じる可能性があります。&lt;/p&gt;
&lt;p&gt;他の条件が一定であれば、株主のポートフォリオ価値は清算日に変動することはありません。しかし、先物契約に適切な調整がない限り、株式先物の買い手や保有者にとっては状況は異なります。約定価格を変更せず、株式先物のコントラクト乗数も変更しない場合、株価の調整は株式先物ポジションの価値に不当かつ不公平な影響を及ぼします。&lt;/p&gt;
&lt;p&gt;清算所は、先物契約の公正な価値を維持することを原則とし、大幅な変更が生じた場合にのみ比率を調整します。香港取引所が調整内容を発表し、取引参加者は顧客にその変更を通知する必要があります。&lt;/p&gt;
&lt;h2 id=&#34;株式先物契約概要&#34;&gt;株式先物契約概要
&lt;/h2&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e8%82%a1%e7%a5%a8%e6%9c%9f%e8%b4%a7%e5%90%88%e7%ba%a6%e6%a6%82%e8%a6%81.png&#34; &gt;股票期货合约概要&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;情報提供者コード&#34;&gt;情報提供者コード
&lt;/h2&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e8%b5%84%e8%ae%af%e4%be%9b%e5%ba%94%e5%95%86%e4%bb%a3%e7%a0%81.png&#34; &gt;资讯供应商代码&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/-/media/HKEX-Market/Products/Listed-Derivatives/Single-Stock/Stock-Futures/Stock-Futures-Information-Sheets/HKEX_Stock_Futures_SC.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKEX_Stock_Futures_SC.pdf&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>資本独占とオンライン教育業界の終焉</title>
        <link>https://ttf248.life/ja/p/capital-monopoly-and-the-fall-of-online-education/</link>
        <pubDate>Wed, 28 Jul 2021 14:59:08 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/capital-monopoly-and-the-fall-of-online-education/</guid>
        <description>&lt;p&gt;最近2日の株式市場の大幅な下落で、新規参入した投資家たちは市場のリスクを目の当たりにした。我国はまもなく高齢化段階に入り、出生率は悲惨な状況だ。大幅に専門家の予想を上回る減少率となっており、出生率低下の足かせとなる産業に対し、我が党は強力な対策を講じるだろう。&lt;/p&gt;
&lt;h2 id=&#34;生徒の負担軽減&#34;&gt;生徒の負担軽減
&lt;/h2&gt;&lt;p&gt;九〇年代に生まれた私たちは、あまり多くの習い事や補習授業もなく、放課後にはのびのびと遊んだ。それはまず家庭環境がそれを許さなかったこと、そして当時の補習授業はまだブランド効果がなく、親からの信頼を得られていなかったからだ。気がつけば二十年が過ぎ、19年から始まったK12教育の資本化により、猿輔導のようなコードとしてのオンライン補習授業が次々と登場し、資本の支援のもと、優秀な資源を集めて様々な名牌補習授業が作られた。天文学的な費用も、親たちの熱意を止めることはできなかった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;都市化の過程で、多くの親は読書を通じて貧困から抜け出し、階層を向上させてきました。社畜としての仕事に時間を取られ、自分自身が競争に追われるだけでなく、子供も同世代に遅れを取ることを望みません。「寒門難出貴子（貧しい家庭から成功者が生まれるのは難しい）」という言葉があるように、適切な学歴がない場合、普通の家庭では現在の階層を維持したり、再び階層を向上させたりすることは困難です。職業高校に進むことは、今の社会環境下では階層の滑落と見なされ、ほとんどの親が受け入れられません。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;なぜ補習授業が必要なのか、保護者がなぜ補習授業を必要とするのか、振り返ってみましょう。教科書の知識や例題は一目瞭然ですが、多くの科目は範囲が広く、概念も浅く、深掘りされていません。才能の選抜メカニズムにはある程度の区別が必要であり、これが矛盾を生じさせます。試験問題は単に教科書の内容から出題するだけでは、選別という役割を果たせず、横方向、縦方向に拡張する必要があります。これらの内容は、通常の授業ではカバーしきれない領域であり、この空間の存在が補習授業を育む土壌を作り出しています。&lt;/p&gt;
&lt;p&gt;ファイルの内容は多岐にわたり、三十条の細則が複数の側面を規定。指導ファイル概要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;課題の総量と時間を削減し、生徒の過剰な宿題負担を軽減する。&lt;/li&gt;
&lt;li&gt;授業後学習支援の質を向上させ、生徒の多様なニーズに応える。&lt;/li&gt;
&lt;li&gt;厳格な管理と全体的な規範化により、塾業界の行動を規制する。&lt;/li&gt;
&lt;li&gt;教育の質と授業の質を大幅に向上させ、生徒が学校で十分な学習と成長を遂げられるようにする。&lt;/li&gt;
&lt;li&gt;強化配套施策、支援体制を向上させる。&lt;/li&gt;
&lt;li&gt;綿密に計画・実行し、確実に成果を出す。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;エリート教育&#34;&gt;エリート教育
&lt;/h2&gt;&lt;p&gt;教育業界では、もう一つの現象が見られます。優秀な私立中学校が増え続け、公立学校の質の高い資源が追いつかなくなってきています（学区住宅ブーム）。様々な規模の教育グループは、高額な給与で優秀な教師を引き抜き、質の高い学習環境を構築し、徐々にブランドを確立しています。特に有名なのは&lt;strong&gt;衡水模式&lt;/strong&gt;です。実家では平均年収が3千万円程度ですが、優れた私立小学校では、年間費用が9千～1万円にもなります。教育グループは善循環を生み出します。学費が高くても、教師が優秀で、生徒の成績が良いので、学費を上げても、親たちは子供を送り続けてきます。公立学校から質の高い（教師）資源も徐々に私立学校に引き抜かれ、最終的には劣悪な教育の代名詞となってしまいます。&lt;/p&gt;
&lt;h2 id=&#34;アルゴリズム搾取&#34;&gt;アルゴリズム搾取
&lt;/h2&gt;&lt;p&gt;データによると、美団（ミーツェイ）に契約している配達員は400万人に迫り、実際に活動しているのは40～50万人規模で、その多くがこの仕事に頼って生計を立てている。終わりのないアルゴリズムによる時間搾取は、人々を計測可能な単位へと置き換え、計算のために投入し、配達員の限界点を探求し続けている。自分ではとても賢いと思っている&lt;strong&gt;违背人性，服务资本&lt;/strong&gt;。市場はここに存在するのだから、みんなでうまく付き合って、持続可能な形で発展させるべきなのに、&lt;strong&gt;搞垄断、搞特权，资本主义的玩法，肆意的野蛮的生长终将落幕&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;株価の変動&#34;&gt;株価の変動
&lt;/h2&gt;&lt;p&gt;二〇二一年七月二十四日、新東方に代表される教育株がトリッキーなパフォーマンスを見せ、米国市場の事前取引で好未来がそれに続き、急落した。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我が国は段階的に高齢化に入っており、計画出産に影響を与える様々な社会現象は必ず是正されなければならない。独占や長時間労働を強いるインターネット企業には罰金が科せられ、資本が集積した教育業界も是正されている。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;資本による教育業界の収益化は認められず、新規株式公開（IPO）を全面的に否認したため、不満の声が広がっている。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;新東方、腰折れ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e6%96%b0%e4%b8%9c%e6%96%b9%e8%82%a1%e4%bb%b7.png&#34; &gt;腰斩的新东方&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;急落する美団&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e6%96%b0%e4%b8%9c%e6%96%b9%e8%82%a1%e4%bb%b7.png&#34; &gt;暴跌的美团&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>カオスエンジニアリング</title>
        <link>https://ttf248.life/ja/p/chaos-engineering/</link>
        <pubDate>Wed, 28 Jul 2021 14:35:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chaos-engineering/</guid>
        <description>&lt;p&gt;システムを破壊するパターン、システム安定性テストを実施。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;国内のインターネット業界はいつも新しいものを生み出したがる。時々、名前を聞いてもそれが何なのか全く想像できないことがある。&lt;/p&gt;
&lt;p&gt;記事の一部を読んだのですが、カオスエンジニアリング初期の定義は比較的受け入れやすいです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;カオスエンジニアリングの初期的な探求は、業界では以前から存在しており、障害テストやディザスタリカバリー訓練といった形で存在していました。しかし、マイクロサービスアーキテクチャの発展と分散システムの拡大に伴い、カオスエンジニアリングはその重要性を増し、注目を集め始めています。Netflixが正式にカオスエンジニアリングの概念を提起したことで、関連理論も急速に拡充され、Netflixの実践は、その安定性における大きな意義を証明しました。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Kubernetes pod 一時停止</title>
        <link>https://ttf248.life/ja/p/kubernetes-pause-pod/</link>
        <pubDate>Mon, 12 Jul 2021 11:23:09 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/kubernetes-pause-pod/</guid>
        <description>&lt;p&gt;デプロイメントコントローラーは、Kubernetesクラスタにおける非常に重要な機能、Podの水平的な拡張と縮小を実現します。この機能は、現代クラウドプラットフォームに不可欠なものです。&lt;/p&gt;
&lt;p&gt;ビジネスシーンで、データベース内のデータを修正し、調整後にPodノードを再起動する必要がある。しかし、Podの実行中にテーブルのフィールドを継続的に変更しており、一時的にアプリケーションへのテーブル更新を停止し、データ調整後Podを復旧させる必要がある。&lt;/p&gt;
&lt;p&gt;暴力的な削除Deployment以外に、同様の停止効果を実現する方法はありますか？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl scale --replicas=0 deployment/&amp;lt;your-deployment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;答えを見て初めて、多くの人は思いもよらなかっただろう。答えを見たとき、苦笑いをしてしまう。思考はまだプロセスを直接操作する時代に留まっていて、ビジネスプロセスを直接操作しようとするのだ。&lt;/p&gt;
&lt;h2 id=&#34;参照リンク&#34;&gt;参照リンク
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/54821044/how-to-stop-pause-a-pod-in-kubernetes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;how to stop/pause a pod in kubernetes&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>投資信託と固定収益プライベートマネー</title>
        <link>https://ttf248.life/ja/p/fund-and-fixed-income-wealth-management/</link>
        <pubDate>Fri, 09 Jul 2021 11:27:06 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/fund-and-fixed-income-wealth-management/</guid>
        <description>&lt;p&gt;90年代に生まれた私たちの世代は、08年の金融危機、大部分はあまり感じなかった。まだ若く、投資をする頃ではなかったからだ。15年の強気相場は活気に満ち溢れ、終盤も騒がしく、結局は国家の介入で市場を救った。同時に、投資信託という概念が一般の人々の視野に入ってきた。&lt;/p&gt;
&lt;h2 id=&#34;アリババフィナンシャルとアリペイ&#34;&gt;アリババ・フィナンシャルとアリペイ
&lt;/h2&gt;&lt;p&gt;支付宝は、アリババ傘下の自然なトラフィックエントリーとして生まれ、決済ツールとしての位置づけからスタートしました。投資信託の購入においては、支付宝で購入する人が多く、微信よりも選択される傾向にあります。支付宝は、投資信託販売を普通の買い物のように成功させました。2019年の相場上昇とファンドマネージャーによる団結的な取り組みは、根本的にはパンデミックによる大規模な金融緩和が引き起こしました。市場への参加者は利益を得ていますが、参加しなかった人も羨望の眼差しを向け、急いで参加しています。新ファンドの規模が100億を突破するスピードは加速しており、主婦層も投資信託を購入する状況では、千億円規模のファンドも間近に迫っています。&lt;/p&gt;
&lt;p&gt;アリババのコードを利用した投資信託販売プラットフォームが隆盛する以前は、一般の人々が投資信託に触れる機会は、銀行での預金時、窓口担当者が熱心に各種金融商品を勧めてくる程度でした。インターネットによる演出やプロモーションページの誘導、そして投資信託販売機関が費やす莫大な広告費により、アリペイの投資信託広告は合理性を逸脱しています。&lt;/p&gt;
&lt;p&gt;提示された上昇幅データにおいて、卓上に最近3年間の収益図しかなく、実績ファンドには年平均収益のみが記載されているのはなぜか？毎年の平均収益を個別に記載しない理由は何か？計算が困難なのだろうか？いいえ、その理由はデータが見栄えないため、顧客の購入を誘導しにくいからだ。&lt;/p&gt;
&lt;h2 id=&#34;固定投資&#34;&gt;固定投資
&lt;/h2&gt;&lt;p&gt;中国はまだマイナス金利時代には入っていないため、銀行預金や国債が最も確実な固定収益商品です。純債のファンドも良いでしょう。中国の平均賃金を調べたい方は、各地方統計局が発表しているデータをご参照ください。筆者は簡単なシナリオを想定します。資産規模200万元で年利4%と換算すると、年間収益はほとんどの都市の平均賃金を超えることになります。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;p&gt;個人的な経験から語れることはたくさんありますが、経済に関する書籍を参考に、安易に飛びつかないようにしてください。普通の家庭におけるお金の管理は、資産を守ることが本質であり、一攫千金を夢見るような無謀なことは避けるべきです。&lt;/p&gt;
&lt;p&gt;おじいちゃんがよく言っていたこと：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;適切な時に、適切なことをすれば、価値が最大になる。 勉強の時は真剣に勉強し、良い学歴を得る方が、チラシ配りで小遣い稼ぎするよりもずっと良い。 卒業直後は真面目に仕事をし、給料の上昇は豊かなリターンをもたらす。 家庭を持つ時には、家事を世話することを学ぶこと。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;興味があれば、このスピーチの原稿を見てみてください。時間について、答えを見つけるには多くの本を読む必要があります。当サイトにテキストがあります。&lt;/p&gt;</description>
        </item>
        <item>
        <title>有孚証券：取引停止</title>
        <link>https://ttf248.life/ja/p/interactive-brokers-trading-interruption/</link>
        <pubDate>Tue, 22 Jun 2021 10:51:59 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/interactive-brokers-trading-interruption/</guid>
        <description>&lt;p&gt;取引の中断とは、取引が実行され、IB が取引所から実行情報を受け取った後に発生するものです。その後、取引所が何らかの誤り（価格、電子処理プロセス、明白なエラーなど）に気付き、取引を中断（取り消し）することに決定した場合です。このプロセスは完全に取引所によって決定され、制御されます。&lt;/p&gt;
&lt;p&gt;A busted traderefers to a situation where an execution occurs and IB receives the execution messagefrom the exchange. The exchange then realizes some type of error (Pricing,electronic, obvious error, etc) and rules to bust (cancel) the trade. Theexchange makes these rulings entirely on their own.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;取引の観点から見ると、香港証券取引所の取引キャンセルと取引修正に相当します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>取引所インターフェースドキュメントまとめ</title>
        <link>https://ttf248.life/ja/p/exchange-interface-documentation-summary/</link>
        <pubDate>Wed, 27 Jan 2021 14:35:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/exchange-interface-documentation-summary/</guid>
        <description>&lt;p&gt;金融ソフトウェア開発5年のこと、日々接するのは各種取引所のインターフェースドキュメント。特に香港証券取引所のドキュメントに慣れている。最近は中華通業務を取り扱っており、その際、深圳証券取引所と上海証券取引所の資料を調べてみた。&lt;/p&gt;
&lt;h2 id=&#34;香港証券取引所&#34;&gt;香港証券取引所
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;
&lt;h3 id=&#34;常用&#34;&gt;常用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;証券&lt;/li&gt;
&lt;li&gt;証券&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;市場データインターフェースドキュメント香港株--証券時報&#34;&gt;市場データインターフェースドキュメント：香港株 + 証券時報
&lt;/h3&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;
&lt;p&gt;よくあるご質問、開発ドキュメント、過去のデータフィードについては、検索バーからダウンロードURLを取得し、バージョン番号を検索できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&#34; &gt;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Developers_Guide_1_11.pdf&#34; &gt;HKEX_OMDC_Developers_Guide_1_11.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMDC_Connectivity_Guide_Securities_Market-_Index_datafeed_%28v2_2%29.pdf&#34; &gt;OMDC_Connectivity_Guide_Securities_Market-&lt;em&gt;Index_datafeed&lt;/em&gt;(v2_2).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Interface_Specification_China_Connect_Securities-%28v1-3%29.pdf&#34; &gt;OMD_Interface_Specification_China_Connect_Securities-(v1-3).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Connectivity_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Connectivity_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Developers_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Developers_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;報値インターフェースドキュメント香港株--ユーロトラベラー&#34;&gt;報値インターフェースドキュメント：香港株 + ユーロトラベラー
&lt;/h3&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（リンク０．pdf）&lt;/li&gt;
&lt;li&gt;（リンク０．pdf）&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;（リンク０．pdf）&lt;/li&gt;
&lt;li&gt;（リンク０．pdf）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;上海証券取引所&#34;&gt;上海証券取引所
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;
&lt;p&gt;エラーインターフェースのドキュメントは別のメニューで取得してください。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;
&lt;h2 id=&#34;深圳证券交易所&#34;&gt;深圳证券交易所
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;
&lt;p&gt;取引所は個別のエラー情報を提供していません。入札インターフェースドキュメントの第6章に補足説明があります。&lt;/p&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;
&lt;h2 id=&#34;ナスダック&#34;&gt;ナスダック
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;買値&#34;&gt;買値
&lt;/h2&gt;&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/p&gt;</description>
        </item>
        <item>
        <title>Dockerに関するいくつかのこと</title>
        <link>https://ttf248.life/ja/p/docker-two-three-things/</link>
        <pubDate>Thu, 21 Jan 2021 09:26:07 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/docker-two-three-things/</guid>
        <description>&lt;p&gt;長年業務で接したのが、一部内容が適用できない__操作系统，如果是E_CODE_0ユーザーばかりです。&lt;/p&gt;
&lt;p&gt;設置部分は、清華大学の手册を参照してください：&lt;a class=&#34;link&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;設置&#34;&gt;設置
&lt;/h2&gt;&lt;p&gt;不明な力により、国内にDockerをインストールする際は、クラウドプロバイダーが提供するリポジトリを使用することを推奨します。ここでは、&lt;strong&gt;阿里云&lt;/strong&gt; を推奨します。&lt;/p&gt;
&lt;h3 id=&#34;倉庫ソースアドレス設定&#34;&gt;倉庫ソースアドレス設定
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install yum-utils device-mapper-persistent-data lvm2 &amp;amp;&amp;amp; \
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;最新バージョン&#34;&gt;最新バージョン
&lt;/h3&gt;&lt;p&gt;Dockerはよく使用されるバックグラウンドサービスなので、起動時に自動的に開始するように設定することを推奨します。このコマンドはCentOS 7に適用されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install -y docker-ce docker-ce-cli containerd.io &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;部署指定バージョン&#34;&gt;部署指定バージョン
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;斜体_9&lt;/strong&gt;&lt;strong&gt;太字_5&lt;/strong&gt;&lt;strong&gt;斜体_10&lt;/strong&gt;&lt;strong&gt;太字_6&lt;/strong&gt;&lt;strong&gt;斜体_11&lt;/strong&gt;&lt;strong&gt;太字_7&lt;/strong&gt;&lt;strong&gt;斜体_12&lt;/strong&gt;&lt;strong&gt;太字_8&lt;/strong&gt;&lt;strong&gt;斜体_13&lt;/strong&gt;**&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum list docker-ce --showduplicates | sort -r
sudo yum install -y docker-ce-18.09.2-3.el7 docker-ce-cli-18.09.2-3.el7 containerd.io-18.09.2-3.el7 &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;通常ユーザーへのdocker権限追加&#34;&gt;通常ユーザーへのDocker権限追加
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo usermod -aG docker ${USER}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;アンインストール&#34;&gt;アンインストール
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum erase -y docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;日常利用&#34;&gt;日常利用
&lt;/h2&gt;&lt;h3 id=&#34;ミラーキャッシュ&#34;&gt;ミラーキャッシュ
&lt;/h3&gt;&lt;p&gt;依然未知な神秘的な力が存在し、イメージのダウンロード速度が遅いという問題がある。この状況下で、国内のクラウドベンダーが多くの加速サービスを提供してきたため、引き続き&lt;strong&gt;阿里云&lt;/strong&gt;をおすすめする。&lt;/p&gt;
&lt;p&gt;加速されたアドレスは、ご自身でアカウントを登録してAliyunから入手してください。このサービスは無料で、Aliyunは無料のイメージ構築サービスも提供しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt;EOF
{
  &amp;quot;registry-mirrors&amp;quot;: [
    &amp;quot;https://docker.nju.edu.cn&amp;quot;,
    &amp;quot;https://mirror.baidubce.com&amp;quot;,
    &amp;quot;https://docker.m.daocloud.io&amp;quot;,
    &amp;quot;https://docker.mirrors.sjtug.sjtu.edu.cn&amp;quot;
  ]
}
EOF
systemctl daemon-reload &amp;amp;&amp;amp; \
systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;強く推奨のコントロールパネル&#34;&gt;強く推奨のコントロールパネル
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume create portainer_data &amp;amp;&amp;amp; \
docker run -d --name=portainer --restart=always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.20.3-alpine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;よく使うイメージプルコレクション&#34;&gt;よく使うイメージプルコレクション
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull rancher/rancher:stable &amp;amp;&amp;amp; docker pull  portainer/portainer-ce:2.0.1 &amp;amp;&amp;amp; \
docker pull centos:7 &amp;amp;&amp;amp; docker pull ubuntu:20.04 &amp;amp;&amp;amp; docker pull ubuntu:18.04 &amp;amp;&amp;amp; \
docker pull redis:5 &amp;amp;&amp;amp; docker pull redis:6 &amp;amp;&amp;amp; \
docker pull alpine:3.11 &amp;amp;&amp;amp; docker pull busybox:1.32 &amp;amp;&amp;amp; \
docker pull rabbitmq:3.7-management &amp;amp;&amp;amp; \
docker pull mariadb:10.2 &amp;amp;&amp;amp; \
docker pull nginx:1.18 &amp;amp;&amp;amp; docker pull nginx:1.19 &amp;amp;&amp;amp; \
docker pull mysql:5.6 &amp;amp;&amp;amp; docker pull mysql:8 &amp;amp;&amp;amp; \
docker pull elasticsearch:6.8.11 &amp;amp;&amp;amp; docker pull logstash:6.8.11 &amp;amp;&amp;amp; docker pull kibana:6.8.11 &amp;amp;&amp;amp; \
docker pull zookeeper:3.4 &amp;amp;&amp;amp; \
docker pull influxdb:1.7 &amp;amp;&amp;amp; docker pull grafana/grafana:7.3.1 &amp;amp;&amp;amp; \
docker pull percona:8 &amp;amp;&amp;amp; docker pull percona:5.6 &amp;amp;&amp;amp; \
docker pull cloverzrg/frps-docker:0.34.3 &amp;amp;&amp;amp; docker pull cloverzrg/frpc-docker:0.34.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;よく使うコマンドの組み合わせ&#34;&gt;よく使うコマンドの組み合わせ
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/reference/commandline/docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/engine/reference/commandline/docker/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;コンテナの実行状態を確認し、__INLINE_CODE_0__パラメータを追加して詳細なコンテナ情報を確認します。この際、イメージ情報は無視します。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker ps --format &amp;quot;{{.Names}}: {{.Ports}}: {{.Size}}&amp;quot;
#portainer: 0.0.0.0:8000-&amp;gt;8000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp: 0B (virtual 172MB)
#influxdb: 0.0.0.0:8086-&amp;gt;8086/tcp: 183B (virtual 311MB)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;全コンテナを停止&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;全イメージを一括削除&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dokcer rmi $(docker images -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;イメージエクスポート&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; &amp;gt; -o XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージのエクスポートと圧縮&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; | gzip &amp;gt; XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージのインポート&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker load -i XXX.tar
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Linux上にJMeterテスト環境を構築する</title>
        <link>https://ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</link>
        <pubDate>Tue, 22 Dec 2020 10:12:50 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/linux-setup-jmeter-testing-environment/</guid>
        <description>&lt;p&gt;著者はハードウェアに強い興味を持ち、Jmeterを用いて負荷テストを実施。CentOS 7上にJmeter、InfluxDB、Grafanaをデプロイした過程を記録。Jmeterのインストールとコマンド使用方法、InfluxDBの特徴とDockerインストール方法、そしてGrafanaの簡単なデプロイと設定について解説。高性能プログラムのパターンに関する経験と参考文献もまとめた。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;データ表示に加えて、Webパネルを別途用意するメリットは何か？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;考えたことが全て思い込みで、試してみないと分からない。
Don&amp;rsquo;t use GUI mode for load testing! only for Test creation and Test debuggin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;公式的にはコマンドラインでレポートを取得し、GUIで表示する方法にはデータの誤差があるとのことです。JMeterの理解は深くないですが、せめてバージョン__INLINE_CODE_0__のコンソールパネルを試してみる理由が少なくとも見つかりました。&lt;/p&gt;
&lt;p&gt;オープンソース中国の投稿ですが、主要コンポーネントのデプロイは友好的ではありません。必要なファイルも公众号でフォローしないとダウンロードできないため、次世代として当然__INLIN_ITALIC_1____に置き換えました。結局のところ、自分のサーバーが国内にあること、クロスボーダーのソースアドレスへのアクセス速度が遅いことが問題です。少なくともミラーサービスは、アリババクラウドに無料のアクセラレーションがあります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;のインストールについては、ここでは詳述しません。以前の記事を参照してください。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今後の内容は大きく分けて、基本的なテスト環境構築と、各コンポーネントの簡単な説明です。&lt;/p&gt;
&lt;h2 id=&#34;jmeter&#34;&gt;Jmeter
&lt;/h2&gt;&lt;p&gt;Apache JMeterは、Apache Software Foundationが開発したJavaベースの負荷テストツールです。ソフトウェアに負荷をかけるために使用され、当初はWebアプリケーションのテスト用に設計されましたが、その後他のテスト分野にも拡張されています。静的なリソースや動的なリソースなど、さまざまなものをテストできます。例えば、静的ファイル、Javaマイクロサービス、CGIスクリプト、Javaオブジェクト、データベース、FTPサーバーなどです。JMeterを使用すると、サーバー、ネットワーク、またはオブジェクトに巨大な負荷をシミュレートし、さまざまなプレッシャーカテゴリー下での強度をテストし、全体的なパフォーマンスを分析できます。また、アサーションを含むスクリプトを作成することで、アプリケーションの機能/回帰テストを行い、プログラムが期待される結果を返すことを検証できます。最大限の柔軟性を実現するため、JMeterは正規表現を使用してアサーションを作成できます。&lt;/p&gt;
&lt;p&gt;Apache JMeterは、静的なリソースと動的なリソース（ファイル、サーブレット、Perlスクリプト、Javaオブジェクト、データベースおよびクエリ、FTPサーバーなど）のパフォーマンスをテストするために使用できます。サーバー、ネットワーク、またはオブジェクトに過剰な負荷をかけて強度をテストしたり、さまざまなプレッシャーの種類下での全体的なパフォーマンスを分析したりすることができます。パフォーマンスのグラフ解析や、高並行負荷テストを行うことも可能です。&lt;/p&gt;
&lt;h3 id=&#34;jmeter-centos7&#34;&gt;JMeter CentOS7
&lt;/h3&gt;&lt;p&gt;インストールパッケージ&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install java-1.8.0-openjdk -y &amp;amp;&amp;amp; \
wget https://mirrors.bfsu.edu.cn/apache//jmeter/binaries/apache-jmeter-5.4.tgz &amp;amp;&amp;amp; tar -xf apache-jmeter-5.4.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;環境変数を設定する&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export JMETER_HOME=$HOME/jmeter/apache-jmeter-5.4
export PATH=$JMETER_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;jmeter-コマンド&#34;&gt;JMeter コマンド
&lt;/h3&gt;&lt;p&gt;最終、&lt;code&gt;Grafana&lt;/code&gt;控制面板，可以不输入&lt;code&gt;-l&lt;/code&gt;参数，在__INLINE_CODE_2__コントロール台のデータを確認&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jmeter -n -t /tmp/order-500-10s.jmx -l /tmp/jmeter-order-report-20200109/order-500-10s.jtl
# 一般不用测试结果和测试报告，简化命令
jmeter -n -t /tmp/order-500-10s.jmx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;influxdb&#34;&gt;InfluxDB
&lt;/h2&gt;&lt;p&gt;InfluxDBは、外部依存なしでGo言語で記述されたオープンソースの分散型時系列データベースです。現在では、主にDevOpsモニタリングデータ、アプリMetrics、IoTセンサーデータ、リアルタイム解析データなど、大量のタイムスタンプデータを保存するために使用されています。&lt;/p&gt;
&lt;h3 id=&#34;influxdbの特徴&#34;&gt;InfluxDBの特徴
&lt;/h3&gt;&lt;p&gt;InfluxDBの特徴は、以下の9点に集約できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;構造（パターン）なし：任意の数の列が可能です。&lt;/li&gt;
&lt;li&gt;メトリクスの保存期間を設定できます。&lt;/li&gt;
&lt;li&gt;統計を支援するため、時間に関連する関数（最小値、最大値、合計、件数、平均、中央値など）に対応。&lt;/li&gt;
&lt;li&gt;サポートするストレージポリシー：データの削除・変更に利用可能。（InfluxDBはデータ削除・変更の方法を提供していません。）&lt;/li&gt;
&lt;li&gt;継続クエリのサポート：データベース内で自動的にスケジュールされた一連の文であり、ストレージポリシーと組み合わせることでInfluxDBのシステムリソース使用量を削減できます。&lt;/li&gt;
&lt;li&gt;ネイティブなHTTPサポート、内蔵HTTP API。&lt;/li&gt;
&lt;li&gt;SQLに類似した構文をサポート。&lt;/li&gt;
&lt;li&gt;クラスタ内のデータレプリカ数を設定可能。&lt;/li&gt;
&lt;li&gt;定期サンプリングデータをサポートし、別のmeasurementに書き込むことで、細分化されたデータストレージを可能にする。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;influxdb-docker-インストール&#34;&gt;InfluxDB Docker インストール
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir influxdb &amp;amp;&amp;amp; cd influxdb &amp;amp;&amp;amp; \
docker run -p 8086:8086 -d --name influxdb -v $PWD:/var/lib/influxdb influxdb:1.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンテナに入り、コマンドを実行し、手動でデータベースを作成する。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@bce0a55bbc72:/# influx
Connected to http://localhost:8086 version 1.7.10
InfluxDB shell version: 1.7.10
&amp;gt; 交互面板执行命令
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;influxdb-データベースとユーザーの作成&#34;&gt;InfluxDB データベースとユーザーの作成
&lt;/h3&gt;&lt;p&gt;データベース作成：create database jmeter_t2
データベース表示：
データベースを切り替えます：use jmeter_t2
ユーザーを作成：パスワード&amp;rsquo;admin&amp;rsquo;でユーザー&amp;quot;admin&amp;quot;を全権限で作成
ユーザー表示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; show users
user  admin
----  -----
admin true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ユーザー権限が表示されれば、データベースの準備は完了です。&lt;/p&gt;
&lt;h2 id=&#34;grafana&#34;&gt;Grafana
&lt;/h2&gt;&lt;p&gt;テストケース作成中に、グラフ表示はそれほど必須ではないことがわかった。インターフェースの__INLINE_CODE_0__データはコマンドライン実行で確認できるし、主にプログラム内部の処理時間を把握したいだけだ。&lt;/p&gt;
&lt;p&gt;簡単な展開&lt;/p&gt;
&lt;p&gt;コンソールはタグによるテスト結果のフィルタリングをサポートしており、通常は &lt;code&gt;InfluxDB&lt;/code&gt;データベースの設定だけで済みます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;アプリケーション名&lt;/li&gt;
&lt;li&gt;テストケース名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/linux-setup-jmeter-testing-environment/Snipaste_2021-03-09_19-44-22.png&#34;
	width=&#34;861&#34;
	height=&#34;357&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;grafana&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name=grafana -p 3000:3000 grafana/grafana:7.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ウェブ版では、サンプラー間隔により計算の**&lt;em&gt;強調&lt;/em&gt;** &lt;strong&gt;太字&lt;/strong&gt; &lt;em&gt;斜体&lt;/em&gt; &lt;strong&gt;リンク&lt;/strong&gt; が発生します。&lt;/p&gt;
&lt;p&gt;資料には、__INLINE_CODE_0__をカスタマイズする方法も記載されています。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;高性能なプログラムパターンは必ずしもone loop threadであり、ロック、キューへの入出力は不要なパフォーマンス損失を引き起こす。&lt;/li&gt;
&lt;li&gt;コアビジネスロジックの処理時間が、他のコードの導入にかかる時間よりも長い。効率を効果的に高めるには並行処理が不可欠であり、コア処理時間が十分短い場合にのみ、他のコードの導入は慎重に行うべきである。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@jasonli.studio/to-install-apache-jmeter-in-centos7-294bc72a97ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;To install Apache JMeter in CentOS7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Red Hat と CentOS のライフサイクル</title>
        <link>https://ttf248.life/ja/p/redhat-centos-lifecycle/</link>
        <pubDate>Tue, 21 Jul 2020 20:02:35 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/redhat-centos-lifecycle/</guid>
        <description>&lt;p&gt;オンライン生産環境のオペレーティングシステムとしては、Red HatとCentOSが主流です。両システムのライフサイクルに関する公式ウェブサイトへのリンクを記録し、CentOS 8からCentOS 8 Streamへの移行経験を共有しています。&lt;/p&gt;
&lt;h2 id=&#34;まえがき&#34;&gt;まえがき
&lt;/h2&gt;&lt;p&gt;オンライン生産環境のオペレーティングシステムとして、現在国内ではRed HatとCentOSが主流です。数年前にはRed Hat 6のサポート終了がありましたが、この2つのシステムのライフサイクルに関する公式サイトへのリンクを記録しておきます。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://access.redhat.com/support/policy/updates/errata&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Red Hat Enterprise Linux Life Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Red Hat Enterprise Linux（RHEL）とCentOSは、エンタープライズサーバーオペレーティングシステムの主要な選択肢です。RHELは安定したサポートとアップデートサイクルを提供し、企業向けアプリケーションに適しています。CentOSはRHELのコミュニティ版であり、同様の機能と安定性を提供しますが、公式サポートはありません。&lt;/p&gt;
&lt;h2 id=&#34;追い続き&#34;&gt;追い続き
&lt;/h2&gt;&lt;p&gt;この記事を公開した時、2年後にアップデートすることになるとは思ってもみませんでした。先日、普段使っている仮想マシンをCentOS 8からCentOS 8 Streamにアップグレードしました。本番環境での選択については言及を控えたいのですが、ローカル環境では最新バージョンを追求しています。&lt;/p&gt;
&lt;p&gt;CentOS 8 Streamは、ローリングリリース版であり、従来のCentOSよりも速いアップデートと新機能を提供するため、開発およびテスト環境に適しています。&lt;/p&gt;</description>
        </item>
        <item>
        <title>米中貿易戦争</title>
        <link>https://ttf248.life/ja/p/us-china-trade-war/</link>
        <pubDate>Tue, 21 Jul 2020 19:52:41 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/us-china-trade-war/</guid>
        <description>&lt;p&gt;まず少し寄り道をして、中国の特色ある社会主義と資本主義の違いについて話します。先輩たちの口から「豊になりたいなら、まずは道路を整備せよ」という言葉を聞いたことがあります。中国のインフラ建設は、国家が費用を出して行うのですが、資本主義社会であれば、これらはすべて請負制になります。利益が見込めない僻地では、会社が請け負うことに乗り気にはなりません。あまり話すと、現在の記事から逸れてしまうので、一般の人々は貿易戦争があまり生活に影響を与えないと感じるかもしれませんが、実際には、我が国の上級製造業は常に相対的に弱いものでした。私が従事するIT業界でも、メモリ、ハードディスク、CPU、グラフィックカードなど、一台のパソコンの中核となる構成要素はすべて海外の工場からのものです。これらの部品の費用も、製品全体の価格の50%を占めています。上級製造は不可欠です。中国とアメリカの衝突も避けられないでしょう。&lt;/p&gt;
&lt;h2 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ウィキペディア&#34;&gt;ウィキペディア
&lt;/h2&gt;&lt;p&gt;2018～2020年の米中貿易戦争（中国・アメリカ合衆国の貿易紛争）は、中華人民共和国とアメリカ合衆国間の貿易戦争である。&lt;/p&gt;
&lt;p&gt;米国のドナルド・トランプ大統領が2018年3月22日に覚書に署名し、「中国は米国から知的財産と企業秘密を盗んでいる」と宣言したことが、貿易紛争のきっかけとなった。これに基づき、1974年の貿易法第301条により、米通商代表部が中国からの輸入品に対して関税を課し、その対象となる商品の総額は約600億ドルに達した。2018年7月6日には、米国が340億ドルの中国製品に対し25%の追加関税を課し、これに対し中国商務省は同日、340億ドルの米国製品に対して25%の追加関税を報復措置として課した。これには、米国から中国へ最も輸出されている大豆が含まれていた。&lt;/p&gt;
&lt;p&gt;米中両者はかつて2018年5月に貿易戦争の一時停止で合意し、和解を求める共同声明を発表した。しかし、米国通商代表部がその後6月16日に、500億ドル分の中国からの輸入品に対する最初の課税リストを発表し、既存の10%関税率を25%に引き上げた。これに対し、中国国務院関税税則委員会は報復措置として対等な対応を行い、中国商務部は米国への輸出多岐商品の反ダンピング調査を再開した。7月6日、トランプ政権は正式に最初の課税リストに含まれる340億ドル分の中国からの輸入品に対し25%の関税を課し、トランプ政権の対中関税政策が正式に実施された（残りの160億ドルの商品は8月23日に25%の関税が課せられた）。これに対し、中国商務部は声明で「米国は世貿規則に違反し、史上最大規模の貿易戦争を仕掛けた」と指摘した。また、中国海関総署は、報復措置は米国の関税賦課措置の発効後直ちに実施されたと発表した。&lt;/p&gt;
&lt;p&gt;12月1日、G20ブエノスアイレス首脳会合で、両国首脳である習近平国家主席とドナルド・トランプ大統領は合意し、90日間交渉を行うこと、そして交渉期間中は新たな貿易措置を停止することで一致した。2019年3月1日の期限が到来した後、米国側は大幅な進展があったとして、新たな貿易措置の停止期間を延長した。&lt;/p&gt;
&lt;p&gt;2019年5月5日、米国大統領ドナルド・トランプは、新たに約2000億ドル相当の中国からの輸入品に対し25%の関税を課すことを発表した。この措置は6月1日に正式に発効し、米国港に入港する中国製品に適用された。5月13日、中国国務院関税税則委員会は、6月1日から米国原産の600億ドル相当の一部輸入品に対し、関税を5%から25%に引き上げることを発表した。6月1日、米通商代表部（USTR）は、米国の関税賦課を6月15日まで延期すると発表し、中国国務院関税税則委員会は、中国側の関税賦課措置は6月1日に予定通り発効すると表明した。&lt;/p&gt;
&lt;p&gt;6月29日、両国首脳である習近平国家主席とトランプ米大統領はG20大阪サミットで会談し、経貿交渉の再開に合意。米国側は中国製品への新たな関税賦課を見送った。&lt;/p&gt;
&lt;p&gt;8月1日、トランプ政権が中国政府による米国農産物の購入進捗への不満から、トランプはツイッターで2019年9月1日より、残りの3000億ドル規模の全中国からの米国輸出品に10%の関税を課すことを発表。8月5日には人民元／米ドルの為替レートが7を割り、同日、米国財務省は中国を為替操作国として指定。これに対し中国政府は米国農産物の購入を停止し、8月24日に約750億ドル規模の米国製品への10%または5%の関税、および米国自動車とその部品への関税再課税を発表。一方、米国も翌日には、既に課せられていた3000億ドル規模の中国製品の税率を15%に、また現在25%に課されている2500億ドル規模の中国製品の関税を30%に引き上げる報復措置を発表したが、その後保留された。&lt;/p&gt;
&lt;p&gt;2020年1月16日、米中両国は第1段階貿易協定に調印した。&lt;/p&gt;</description>
        </item>
        <item>
        <title>パソコンの組み立てあれこれ</title>
        <link>https://ttf248.life/ja/p/computer-assembly-tips/</link>
        <pubDate>Sat, 18 Jul 2020 14:33:46 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/computer-assembly-tips/</guid>
        <description>&lt;p&gt;著者は幼い頃からパソコンの組み立てに興味を持ち、大学以降はハードウェアの組み立てに触れるようになった。ハードウェア性能比較サイトや購入のアドバイス（CPU、SSD、HDD、メモリ周波数など）を紹介し、ハードウェア選びの経験と注意点を共有している。&lt;/p&gt;
&lt;h3 id=&#34;ご縁言葉では言い表せない&#34;&gt;ご縁、言葉では言い表せない。
&lt;/h3&gt;&lt;p&gt;幼い頃から自分のパソコンを組み立てることを考えていたのだが、経済的な状況が許さなかった。なんとか大学に進学できたものの、持ち運びの都合上、ノートパソコンを選んだ。具体的にいつからパソコンを組み立てたいと思ったのかという話をするなら、実家近くの図書館に遡ることになるだろう。それは市内の図書館であり、電子閲覧室（実際に利用したことはないが、時間課金制らしい）だけでなく、雑誌閲覧室もあった。そこで《大众软件》、《电脑报》といった雑誌をめくったことがきっかけだ。パソコンにほとんど触れる機会がなかった私にとって、それはまさに神のような科普資料だった。ダンジョン攻略の章を見ると、自分もパソコンを手に入れてモンスを集め、主力アタッカーになりたいと思った。そして、ブラックテクノロジーを見かけると、本の手順を真似すれば、説明されている効果を実現できるのではないかという夢を見た（ハックツールの使用について）。高校の授業は忙しかったが、当時の私の知識では、勉強も遊びも両立したいと思っていた。そのため、「天真爛漫」な日々を送っていた私にとって、図書館に行く口実で、小さなバッグを持ってそちらへ向かうことが多かった。市内の規模は大きくないため、ほとんど歩いて行った。着くとエアコンの効いた空間で、小説や漫画、ゲーム雑誌を見たり、時々真面目な本を読んだりしていた。&lt;/p&gt;
&lt;p&gt;年を取ると忘れっぽくなるのはよくあることですが、図書館での出来事も初めてではありません。中学の頃、親戚の家でパソコンを組み立てたことがありますが、なぜあの時その機械を組み立てたのか思い出せません。OSはWindows 2003で、ゲームはシステム自带のトランプとエイジオブエンパイアがありました。色々な「策略」を考えて、堂弟と一緒にゲームをするために鍵を盗もうとしていました。&lt;/p&gt;
&lt;p&gt;中学に入学するとすぐに、学校でコンピュータの初級トレーニングがあり、転校後も少しコンピュータコンテストの概念に触れた。高校ではNOIPにも参加したことがある。ここで言及せざるを得ないのは、校友会の力だ。高校のコンピュータ棟は校友からの寄付で作られ、コンピュータ教室と図書館を併設している。当時も国内のインターネット黎明期だった。学校のリーダーたちもコンピュータコンテストへの参加を支援しており、実際、前2回の先輩たちがコンピュータを通じて重点大学に特待生として進学している例もあった。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今までこんな風に自分のこととパソコンを振り返ったことがなかった。卒業後に自動化専攻からコンピュータ業界へ、迷いなく転身したのも無理はない。種はもう植えられていたのだ、ただ周りの人は知らないだけだろう。小さい頃から触れていたせいか、自分はものすごいと思ってたけど、実際は表面しか理解していなかった。最大の強みは、最初の熱意だった。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ハードウェア組み立て&#34;&gt;ハードウェア組み立て
&lt;/h3&gt;&lt;p&gt;カードラボ、Chiphell、知乎のPC組み立てスレッドを色々見て回ると、初心者でも比較的簡単に必要なパーツリストを作成できます。2019年以降にCPUを選ぶ場合、経済状況があまり良くない場合は、より高いパフォーマンスを求めるならAMDがおすすめです。&lt;/p&gt;
&lt;p&gt;よく使われるハードウェア性能比較サイト：&lt;a class=&#34;link&#34; href=&#34;https://cpu.userbenchmark.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cpu.userbenchmark.com/&lt;/a&gt; 。価格はメルカリの米国版と比較できます。本気の方ならメルカリで中古を探すとかなり安く手に入りますが、あまり詳しくない方は避けた方が良いです。私もメルカリで購入したメモリが偽物でした。現時点では問題なく使用できていますが、型番やスペックが全く合っていないので、あまり確信がありません。&lt;/p&gt;
&lt;h4 id=&#34;sn550-vs-sn750&#34;&gt;SN550 VS SN750
&lt;/h4&gt;&lt;p&gt;SN550 1TBとSN750 1TBの違いは、持続的な読み書き速度が倍違うことくらいで、それぞれ850MBと1.6GBです。しかし日常使いでは違いを感じないでしょう。なぜなら4Kの性能はどちらも同じだからです。ただしこれは1TBモデルのSN550の話で、500Gや250Gだと順次読み書き速度はさらに遅くなります。正直、お金を気にしないのでなければ、日常使いであればSN550で十分だと思います。私が買わなかった最大の理由は、順次読み書き速度ではなく、SN550が最大1TB容量しかなくて、SN750は2TBあるからです。私にとって、追加購入なしに利用できるマザーボードのM.2 Nvmeスロットの方が、これらのSSDの価格差よりも価値があると感じます。&lt;/p&gt;
&lt;p&gt;ネットユーザーの意見を総合すると、変換アダプタを購入すれば、B150マザーボードでもM.2インターフェースに対応したSSDが利用できる。&lt;/p&gt;
&lt;h4 id=&#34;機械式ハードディスクの選び方&#34;&gt;機械式ハードディスクの選び方
&lt;/h4&gt;&lt;p&gt;機械式ハードディスクは現在価格が安定しており、大容量のストレージが必要なユーザーには、適切なものを選ぶ必要があります。頻繁にデータやリソースをダウンロードするユーザーには、エンタープライズ向けのものがおすすめです。よくあるものとしては：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;西数字金庫&lt;/li&gt;
&lt;li&gt;キオクシス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供してください。&lt;/p&gt;
&lt;p&gt;キージェシリーズ&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e5%b8%8c%e6%8d%b7exos1.png&#34; &gt;希捷企业级硬盘概述&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e5%b8%8c%e6%8d%b7exos2.png&#34; &gt;希捷企业级硬盘概述&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;メモリクロック&#34;&gt;メモリクロック
&lt;/h4&gt;&lt;p&gt;日常業務の観点からは、頻度はパフォーマンスに大きな影響を与えないでしょう。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e5%86%85%e5%ad%98.png&#34; &gt;内存时序&lt;/a&gt;太字_2&lt;a class=&#34;link&#34; href=&#34;%e5%92%b8%e9%b1%bc%e5%86%85%e5%ad%98.png&#34; &gt;咸鱼内存&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;メモリタイミング（英語：Memory timingsまたはRAM timings）は、同期動的メモリアクセスストレージ（SDRAM）のパフォーマンスを記述する4つのパラメータ：CL、TRCD、TRP、TRASです。単位はクロックサイクルで、通常は7-8-8-24のようにハイフンで区切られた4つの数字で表記されます。第4パラメータ（RAS）は省略されることが多く、場合によっては第5パラメータであるコマンドレート（通常は2Tまたは1T、2N、1Nとも表記）が追加されます。これらのパラメータは、ランダムアクセスメモリの速度に影響を与えるレイテンシ（遅延時間）を指定します。数値が小さいほど、一般的にパフォーマンスは向上します。システムパフォーマンスを決定する最終的な要素は、実際のレイテンシであり、通常ナノ秒で表されます。&lt;/p&gt;
&lt;p&gt;メモリタイミングを実際の遅延に変換する際、最も重要なことは、それがクロックサイクル単位で表されていることに注意することです。クロックサイクルの時間を把握していない場合、一連の数値が別の数値よりも高速であるかどうかを判断することはできません。&lt;/p&gt;
&lt;p&gt;例えば、DDR3-2000メモリのクロック周波数は1000MHzで、その周期は1nsです。この1nsの周期に基づき、CL=7の場合、絶対遅延は7nsとなります。一方、より高速なDDR3-2666（クロック1333MHz、サイクルごとに0.75ns）では、CL=9を使用することがありますが、それでも絶対遅延は6.75nsと短くなります。&lt;/p&gt;
&lt;p&gt;現代のDIMMには、シリアルプレゼンス検出（SPD）ROMチップが搭載されており、自動構成に推奨されるメモリタイミング情報が含まれています。PCのBIOSでは、ユーザーがタイミングを調整してパフォーマンスを向上させること（安定性が低下するリスクがある）、または特定の状況下で安定性を高めること（推奨タイミングを使用する場合など）が可能です。&lt;/p&gt;
&lt;p&gt;注意：メモリの帯域幅はメモリのスループットを測定するものですが、通常はレイテンシではなく転送速度によって制限されます。SDRAM の複数の内部バンクに交錯アクセスすることで、ピークレートで連続的なデータ転送が可能になります。帯域幅を増やすために、レイテンシを増加させる場合があります。具体的には、新しい世代の DDR メモリは高い転送速度を実現するものの、絶対遅延は大きく変化せず、特に最初の製品群では、前の世代よりも遅延が長くなる傾向があります。&lt;/p&gt;
&lt;p&gt;メモリのレイテンシーを増やしても、メモリ帯域幅を増やすことで、マルチプロセッサまたは複数の実行スレッドを持つコンピュータシステムのパフォーマンスが向上する。より高い帯域幅は、専用ビデオメモリを持たない統合グラフィックスカードのパフォーマンスも向上させる。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e5%86%85%e5%ad%98%e6%97%b6%e5%ba%8f%e5%8f%82%e6%95%b0%e8%af%b4%e6%98%8e.png&#34; &gt;内存时序参数说明&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ウェブサイトの高速化とドメイン設定</title>
        <link>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</link>
        <pubDate>Sat, 20 Jun 2020 10:36:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/website-acceleration-and-domain-setup/</guid>
        <description>&lt;p&gt;国内でのアクセスが遅いため、著者は個人ドメインを取得し、国内クラウドプロバイダーのCDNアクセラレーションサービスを購入しました。設定中にwwwサブドメインにアクセスできない問題が発生しましたが、汎用ドメイン解析を削除し、セカンダリドメインを個別に設定することで解決しました。また、CDNアクセラレーションの原理と設定経験、Nginxのリバースプロキシ試行とその教訓についても共有しています。&lt;/p&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景
&lt;/h3&gt;&lt;p&gt;GitHub Pagesにサイトをホストしているため、周知の理由により国内からのアクセスが遅いことがあります。そこで、個人ドメインを取得し、国内クラウドプロバイダーのCDN加速サービスを利用しました。加速サービスの設定中に、開発マシンにあるDocker、frp、k8sなどのサービス（それぞれダッシュボードあり）を思い出し、無駄にしない方針でいくつかのリバースプロキシを設定し、すべてセカンダリードメインに紐づけました。&lt;/p&gt;
&lt;p&gt;二級ドメインを使っていると、突然wwwサブドメインにアクセスできなくなりました。アリババクラウドでは、www.xiangtianlong.comとxiangtianlong.comの両方をDNSで同時に解析するように設定しており、CDN加速を有効にする前は両方のドメインが正常に使用できていました。&lt;/p&gt;
&lt;p&gt;CDN設定時、セカンダリドメインが多いため汎用ドメインルールを有効にし、統一的に開発マシンへルーティングした結果、wwwというセカンダリドメインも影響を受けてしまいました。はい、間違いではありません。wwwプレフィックスもセカンダリドメインとして扱われていました。実際のウェブサイトはGitHub Pagesにデプロイされており、開発マシンにはウェブサイトのキャッシュ情報は一切ありません。&lt;/p&gt;
&lt;p&gt;開発環境にサイトをデプロイしないのは、静的ブログで、GitHub Actionsを使えば自動的にリリースできるので便利だからです。&lt;/p&gt;
&lt;h3 id=&#34;ドメイン&#34;&gt;ドメイン
&lt;/h3&gt;&lt;p&gt;専門性のないウェブ開発では、ドメインの理解にSEOやクロスドメインの問題は含まれない。ブログサイトとして、ベアドメインはブログオーナーのサイトを際立たせやすく、現在のモバイルアクセスが多いことも考慮すると、入力できる文字数を減らせるという利点がある。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;パソコンで、wwwとcomの入力を省略できるショートカットキーが利用可能です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN
&lt;/h3&gt;&lt;p&gt;アリババクラウドとテンセントクラウドの両方使ったことがあるので、初心者でも使いやすいです。テンセントクラウドには関連コンセプトを解説する動画もあります。CDNの加速原理は京東（JD）の倉庫と同じで、新商品を発売する際に、全国各地の倉庫に事前に一斉配送し、配送リクエストが発生した際、最寄りの倉庫から発送します。&lt;/p&gt;
&lt;p&gt;元のURL：ウェブサイトリソースが元々保存されていたアドレス&lt;/p&gt;
&lt;p&gt;キャッシュファイル設定、ブラウザF12、管理コンソール、静的リソースと動的リソースの簡単な分析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全件0日有効&lt;/li&gt;
&lt;li&gt;無効期限：0日&lt;/li&gt;
&lt;li&gt;有効期限１日&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;テンセントクラウド設定ルール：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;キャッシュ切れルールは最大で10条まで設定可能です。&lt;/li&gt;
&lt;li&gt;下位優先ルールが適用されます。&lt;/li&gt;
&lt;li&gt;キャッシュの有効期限は最大365日まで設定可能です。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;痛ましい告白&#34;&gt;痛ましい告白
&lt;/h3&gt;&lt;p&gt;以前Nginxを使ったことがなかったので、ウェブサイトを検索すればリバースプロキシの設定がわかると思っていました。しかし、結果は混乱し、半日かけても302リダイレクトを理解できませんでした。結局、効果はありませんでした。そこで、思い切ってDNS解析のワイルドカード設定を削除し、個々のセカンドレベルドメインを独立して設定しました。その時、突然、阿里云DNS解析に「表示URL転送」というモードがあることに気づき、試してみたところ、これがまさに求めていた302リダイレクトでした。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最初の二階建てドメインは問題なくアクセスできたのに、2つ目の設定をしたら動かず、本当にどうしようかと思ったけど、しばらく待ったら使えるようになった。やはり、アリババクラウドのDNS伝播は時々、おっかないことがあるようだ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;参照資料&#34;&gt;参照資料
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>ブログ環境とつぶやき</title>
        <link>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;この記事では、Markdown の基本的な概念と様々なソフトウェアでの応用について解説し、VSCode を IDE として推奨しています。また、推奨プラグインの一覧も示しています。著者は Hexo から Hugo への移行経験を共有し、Hugo の柔軟性とカスタマイズ能力を強調しています。最後に、新しい技術の迅速な立ち上げのためのヒントと、Hugo テーマのスタイルが更新されない問題に対する解決策を紹介しています。&lt;/p&gt;
&lt;h2 id=&#34;まえがき&#34;&gt;まえがき
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;軽量なマークアップ言語で、人々が読みやすく書きやすいプレーンテキスト形式でドキュメントを作成できます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;詳細なMarkdown文法については、このテキストでは触れません。電子書籍をおすすめします。&lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;点击此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;多くのソフトウェアはすでにmdを記述方法としてサポートしています。csdnのブログシステムでは、md文法に対応したオンラインエディタがリリースされ、初めて使用する際にはmd文法の紹介記事が表示されます。筆者はまだ良いと思います。また、印象ノートは2018年にmdノートへの対応を追加し、クイックバーには様々なmdマークアップオプションがあり、普通の文章を編集するのとほぼ同じように使え、全体的に初心者にも使いやすいです。&lt;/p&gt;
&lt;h3 id=&#34;ide推奨&#34;&gt;IDE推奨
&lt;/h3&gt;&lt;p&gt;この記事を書いている時点ですでに2020年ですが、VSCodeなら当然ご存知でしょう。Git Pageでブログシステムを構築する発想を持つのは、やはり業界関係者ですから。以前はSublimeやAtomも良い選択肢でしたが、2年のオープンソースコミュニティの推進により、VSCodeは急速に発展し、初心者にとって最初の選択肢となりつつあります。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;マイクロソフトとオープンソースコミュニティの関係が対立状態から、順調に蜜月期に入った：オープンソースを積極的に活用。筆者が所属する企業もここ2年でJavaエコシステムを積極的に導入しており、言い換えれば、現在の国内におけるJavaの利用は非常に魅力的だ。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vs-code-拡張機能-おすすめ&#34;&gt;VS Code 拡張機能 おすすめ
&lt;/h3&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;2020-03-31-14-07-17.png&#34; &gt;插件清单&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;プラグインにはそれぞれReadmeがあり、基本的な使い方や主要機能が紹介されています。一部のプラグイン作者は、動的な効果を示す画像も提供しています。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;、Hugoの画像プラグイン方式と連携すれば、画像を簡単に導入できます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ショートカットキーを覚えていないので、VSCodeのショートカット管理メニューを開き、「md」を検索して何度か確認。プラグインの説明書をもう一度見直す。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;hugo
&lt;/h2&gt;&lt;p&gt;筆者は、元々好奇心旺盛な性格で、じっとして文章を書くのが苦手なのです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugoは、画像とMDファイルを個別のフォルダに配置することをサポートしています。&lt;/li&gt;
&lt;li&gt;学術的なテーマは、デザインにおいて様々な種類の記事スタイルに対応しています。&lt;/li&gt;
&lt;li&gt;様々な便利なカスタマイズ拡張&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;academic&#34;&gt;academic
&lt;/h2&gt;&lt;p&gt;公式サイトデフォルト&lt;strong&gt;太字&lt;/strong&gt;斜体、&lt;strong&gt;太字&lt;/strong&gt;斜体、&lt;strong&gt;太字&lt;/strong&gt;斜体。&lt;/p&gt;
&lt;p&gt;URLのパターンで、ナビゲーションバーをクリックすれば単一ページへのジャンプが可能で、トップページでのスクロールではない。これは完全に個人的な好みによるものだ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形式：随筆、講演、電子書籍&lt;/li&gt;
&lt;li&gt;柔軟性：全体スタイルをカスタマイズ、CSSスタイルのカスタマイズ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;このテーマは中国語のサポートがまだ完全ではない。主に視覚的な面で、フォントサイズが中国語の読書習慣に合っていない。ただし、Hexoの開発者は中国人の方が多いため、Hugoより優れている点はそこにある。&lt;/p&gt;
&lt;p&gt;しかし、自分で要素を特定して修正するには、ブラウザの開発者ツールで要素の位置を特定し、変更する必要があるCSSスタイルシート名を知りたい場合、サイドバーの&lt;strong&gt;Insert Style Rule Below&lt;/strong&gt;をクリックすれば、ネストされたCSSでも簡単にノード名を取得できます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。&lt;/li&gt;
&lt;li&gt;テーマに組み込まれた文法ハイライト設定、&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;結びに&#34;&gt;結びに
&lt;/h2&gt;&lt;p&gt;また子供が文句言い出すわ。どうして最初から最後まで曖昧なことばかり言って、具体的なことは何も言わないの？&lt;/p&gt;
&lt;p&gt;これがあれば、十分です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公式マニュアル&lt;/li&gt;
&lt;li&gt;プラグインの説明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新しい技術を早く習得するには、まず公式サイトのドキュメントを読むことをお勧めします。 一度で理解しようとしなくてもいいので、少なくとも概要を把握しておきましょう。 検索エンジンの結果は、最新バージョンと一致しない場合があり、誤解を招く可能性があります。 新しい書籍も同様です。まずは目次を見て、著者が何を説明しようとしているのかを理解しましょう。 時には序章を読むことで、海外の著作が中国語に翻訳された際、翻訳者の序文が書籍の本質的な内容を網羅していることがあります。&lt;/p&gt;
&lt;h2 id=&#34;サプライズ&#34;&gt;サプライズ
&lt;/h2&gt;&lt;p&gt;Hugo Academicのスタイルを変更しても、サイトに公開しても表示が変わりませんね。賢い人はすぐに気づくでしょう。ローカルブラウザのキャッシュをクリアすれば解決します。私も閃きました！F12の開発者モードで、__INLINE_CODE_0__BOLD_2&lt;code&gt;disable cache&lt;/code&gt;に切り替えてリフレッシュすればOKです！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>自動統合システム切り替え</title>
        <link>https://ttf248.life/ja/p/auto-integration-system-switch/</link>
        <pubDate>Sun, 29 Mar 2020 02:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/auto-integration-system-switch/</guid>
        <description>&lt;p&gt;GitHub Actions を使用して、Hugo ブログを GitHub Pages と Gitee に自動デプロイします。&lt;/p&gt;
&lt;h4 id=&#34;背景説明&#34;&gt;背景説明
&lt;/h4&gt;&lt;p&gt;ブログを更新した昨日、Travisのサービスが利用できないことに気づきました。Travisのウェブページを確認すると、ソースコードの取得で処理が止まっており、ふとGitHubが以前発表したActionsサービスのことを思い出しました。&lt;/p&gt;
&lt;p&gt;その頃は色々用事ができそうだし、アクションを使うには申請が必要なので、今は正式にリリースされたばかりです。週末に時間があったら、新しいおもちゃを試してみるか？&lt;/p&gt;
&lt;p&gt;公式資料は各自ウェブサイトでご確認ください。本文ではこれ以上の転載はいたしません。以前Kubernetesをご利用の方は、actionのYAMLファイル設定がKubernetesに似ていると感じるかもしれません。&lt;/p&gt;
&lt;p&gt;中国語の入門チュートリアル、あるいは紹介資料についてですが、&lt;strong&gt;阮一峰的博客&lt;/strong&gt;を検索することをお勧めします。2つの記事があり、1つ目は基本的な文法解説で、2つ目は実際の事例です。&lt;/p&gt;
&lt;h4 id=&#34;正文&#34;&gt;正文
&lt;/h4&gt;&lt;p&gt;必要な知識点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github secrets&lt;/li&gt;
&lt;li&gt;アクション文法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既存コンポーネントで主要なジョブを完遂し、コマンドによるpushで中国のGiteeに送信。コマンド部分は粗雑で、強制プッシュのみを使用しており、Travisを利用していた際のロジックを引き継いでいる。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: github pages and gitee pages

on:
  push:
    branches:
      - hugo

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;
          extended: true

      - name: Build Github and Gitee ## 单个step只能写一个run命令
        run: hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;gitee_public&amp;quot; &amp;amp;&amp;amp; ls

      - name: Deploy Github
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.BLOG_TOKEN }}
          publish_dir: ./github_public
          publish_branch: master
          cname: xiangtianlong.com

      - name: Deploy Gitee
        run: cd ./gitee_public &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git config user.name &amp;quot;TianlongXiang&amp;quot; &amp;amp;&amp;amp; git config user.email &amp;quot;tianlongxiang51@gmail.com&amp;quot; &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update TianlongXiang&#39;s Blog&amp;quot; &amp;amp;&amp;amp; git push --force &amp;quot;https://xiangtianlong:${{ secrets.GITEE_PASSWORD }}@gitee.com/xiangtianlong/xiangtianlong.git&amp;quot; master:master   
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;追記&#34;&gt;追記
&lt;/h4&gt;&lt;p&gt;公式ストアで提供されている機能を見ると、現在サポートされているプレイ方法は豊富です。Dockerイメージを構築すれば、Docker Hubのサービスに依存しなくなることもできます。&lt;/p&gt;
&lt;p&gt;Hugoのissueを確認したところ、GitHub ActionsでGit Pagesを自動デプロイする場合、最終的に公開されるウェブページはmasterブランチに必要です。他のブランチにデプロイすると、設定画面でGitHubがウェブページの構文エラーを警告します。&lt;/p&gt;
&lt;p&gt;実際は、Hugoのソースファイルがmasterブランチに置かれていたため、GitHubがjellyブログのソースコードとして検知し、チェックやビルドが通らなかったことが原因です。&lt;/p&gt;
&lt;p&gt;解決策も簡単、Hugoのソースファイルを別のブランチに置き、静的ファイルはmasterブランチで公開する。&lt;/p&gt;</description>
        </item>
        <item>
        <title>未来の素晴らしい中国には、良い老人たちがいるはずだ。</title>
        <link>https://ttf248.life/ja/p/future-good-china-with-elderly/</link>
        <pubDate>Sat, 15 Feb 2020 11:28:28 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/future-good-china-with-elderly/</guid>
        <description>&lt;p&gt;二十年後、愛らしい老人になって、愛らしい老婦人に寄り添いながら過ごせたらいいな。大金持ちになる必要はないけれど、健康で各地を旅行したい。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;ユークックの検索で結構です。以降、リンクは不要です。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;十年後、愛らしい老人になるのが私です。愛らしい老人になるために努力します。未来の中国は、きっと良い老人たちで満たされるでしょう。たとえ十年後に60歳になっても、この世界の第三国の中で最も若々しい存在です。&lt;/p&gt;
&lt;p&gt;正直に言うと、皆さんが50歳の中国人の私がこんな体型だとかなり良いと思うだろう。しかし、この体型の裏には「より規律正しければより自由になる！」という信念がある。雨が止んだ頃には走りにと思ったし、明日の午後はサッカーをする予定だ。50歳になっても、まだまだ大試合ができる。これは冗談ではなく、むしろプロと一緒にプレーすることも多い。しかし、その背景にあるものは何か？それは規律だ。残りの時間は走り続ける。そして、走ることは誰にとっても退屈なことのように思えるかもしれないが、「より規律正しければより自由になる」。だからこそ、私は規律を守り、自由に走ることができる。音楽は聴かない。自分の呼吸音が、最高の音楽だと感じるからだ。&lt;/p&gt;
&lt;p&gt;他に、基本的にトレッドミルは走らないのですが、北京の深刻な霞汚染で、週に5日走るんです。そのうち2日は霞汚染のために取られているし、他の人とは違うところを冗談として言うと、多分私は中断したことがないのでしょうね。毎月、日記というか、私の経験の中で1日走るごとに1日マークするんです。毎月少なくとも18日は走ります。走っている時はあっという間に過ぎてしまうし、走るときはメガネをしていないのですが、もっと重要なのは、毎週サッカーもやっていることです。私の研究室の最後の授業は、我が家で開くことにしました。テーマは「楽しさ」です。楽しさはとても重要だと思います。私は、何の楽しみや趣味もない人と付き合うことはありません。&lt;/p&gt;
&lt;p&gt;敬遠するのが妥当だ、こういう人は恐ろしいほどだ。楽しさがないなら、あなたは何を楽しんでいるのか？私も特に何も無いし、どんな仕事が好きですか？今年初めの頃、私の学生は中国新聞周刊に配属され、私たちの特集は「致」というものでした。10年後、私の学生が毎年卒業する時、最後の課題は彼らに10年後の自分自身について書かせ、それを私が残しておきます。そして10年後、私は彼らを順次展開し、50歳から60歳の手紙を書きます。60歳とは、かつて考えたこともなかった遠い場所、地図の彼方でしたが、気がつくと私の次の目的地です。20歳から30歳への学生たちへの手紙は、春が夏に宛てるラブレターですが、50歳から60歳への手紙は、夏の終わりが秋にささやく喃喃自語です。今、私は10年後の自分自身に向けて、世界全体をゆっくりと書き写しています。自分のベッド、食事、家族のそば…それは当然のことです。&lt;/p&gt;
&lt;p&gt;しかし、60歳になってどのような人間になるか、私のテーマは明確です。序文の中でこの長い文章に書かれているように、10年後のかわいい老人になるために努力します。中国がかわいい国になるには、将来的に多くの市民として活躍し、小規模な国民ではなく、元気でルールを理解する若者が増えることが不可欠です。そして、良い中国を作るためには、良い老人と良い老婦人がいることが重要です。現在、中国の60歳以上の人口はすでに2億3千万人を超えており、10年後には3億人を超えるでしょう。つまり、60歳以上の人口だけで見れば、中国は単独国家として世界5位以内、あるいは世界3位になる可能性もあります。考えただけでも恐ろしいことではありませんか？&lt;/p&gt;
&lt;p&gt;私はそうは思いません。皆さんが今日ネットで見た表をご覧になったでしょうか。中国の各省市直轄市の平均寿命ですが、上海と北京では80歳を超えており、男女合わせた平均です。平均寿命ですから、男性が女性からかなり有利な立場にあることは確かでしょう。つまり、10年後私が60歳になっても、この世界で最も若い国の人間の一人だということになります。将来的に考えても、女性は55歳で退職し、平均寿命の80歳まで残り25年ですが、男性は60歳で退職し、平均寿命の80歳まで残り20年です！何かしないと、ただ踊るだけで終わってしまいます。それに、今日踊っているお姉さん方や、お兄さん方は、時代の流れがもたらした文化習慣と娯楽方法なのです。&lt;/p&gt;
&lt;p&gt;二十年後、次の世代もまだ踊り場ダンスをする人はいるかもしれないが、大幅に減るだろう。次の世代は集団活動の積極的な参加者ではなくなるからだ。高齢者がツアー旅行を好むように、今の若者は個人旅行やバックパッカーを楽しんでいる。将来も踊り場ダンスは存在するだろうが、その範囲は確実に狭まり、良いとも悪いとも言えない。ただ時代が変わり続けているだけだ。私が60歳の時、チームの中で最も若いメンバーの一員だった。これから私はどうすべきか？中国画では60歳は耳が遠くなるというけれど、そんなことはない。何でも喜んでしまうのではなく、何を話すべきでないかを理解し、不快に思うこともあれば、そうではないこともある。何よりも大切なのは、若者たちのために何ができるかを考えることだ。&lt;/p&gt;
&lt;p&gt;良いことをするために何をするべきか？ 怠らず、安易に妥協せず、反対すべきものを反対する。 若者が彼の利益を傷つける可能性があるとき、あなたは彼らの前に立ちふまえることができるだろうか？ 私は今よく鏡を見ている。 私の親友が亡くなった。陶偉は当時よく集まりがあり、うちで集まってくれた。ある真実の話を聞いたことがある。みんなで痛んだ。陳老一代の人たちは、家の中に何でも蓄えていて、箱を破って30以上のものをベッドの下に詰め込んでいた。この服は500以上買ったのに、供養するために、毎日香を焚く。だから、私たちの世代は親と知恵比べをするのが普通になった。700以上買ってきて、いくらになるのだろうか？&lt;/p&gt;
&lt;p&gt;220。でも、物事が起こりやすい。陶偉はかつて400元以上出して父親にTシャツを買ったことがある。そのTシャツはとても良いのだが、いくらだったか？99円のものは着た。次の日、悲惨なことに、帰ってきて陶偉に400元の写真を送り、「僕のために4つ買ってくれ」と頼んだ。今日、それを着て外に出ると、李大爷をはじめとする皆が褒めてくれた。後で言われたのは、このような嘘はリスクが大きいということだ。将来、そのようなことはしないように。具体的な人物の名前は伏せるが、病院の整形外科では高齢者が骨折し、原因を調べた結果、地攤で購入した靴であることがわかった。もちろんこれは物質的な側面の話だが、年老いても精神生活が必要であり、好奇心を持ち続け、若い世代のために風雨を挡する必要がある。毎日を楽しく生きるべきだ。&lt;/p&gt;
&lt;p&gt;自分の60歳を迎える時が来るのを、好奇心と期待感で待ち望んでいます。それは素晴らしい時代の始まりだと感じています。&lt;/p&gt;
&lt;p&gt;ありがとうございました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>私の18歳は、皆さんと少し違うかもしれません。</title>
        <link>https://ttf248.life/ja/p/my-18th-might-be-different/</link>
        <pubDate>Sat, 15 Feb 2020 11:19:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/my-18th-might-be-different/</guid>
        <description>&lt;p&gt;よくある言葉ですが、高校卒業以来、小説を読む時間を捨ててから、真剣に静かに本を読んでみるのは久しぶりです。時々振り返ってみると、こんなにも長い間働いているのに、毎年何をしたのか覚えていないこともあります。多くの場合、下半年になると、上半期のことをすっかり忘れてしまいます。ブログを書くことは良い習慣です。たとえ書いたものが表に出なくても、問題ありません。元々、自分自身に見せるためだったのですから。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最も忠実な読者は私自身です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;ユークックの検索で結構です。以降、リンクは不要です。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;誰もが待ち望み、問いかけるような18歳。時折、皆は自分の18歳の頃を振り返り、「あのときなりたかった自分になっているだろうか？」と自問する。今ではSNSにはたくさんの「友達」がいるのに、心を開ける友人がいない。毎日チャットはしているけれど、誰にも打ち解けない。知識は無限に手に入るのに、知恵は遠い。皆、自分の18歳を振り返り、人を欺くのは簡単だが、自分自身を欺くのは難しいのだと自覚すべきだ。&lt;/p&gt;
&lt;p&gt;あなたの18歳は、期待と問いかけの眼差しのように感じられます。他人を騙しても、自分の18歳を騙すことはできません。今のあなたは、18歳の頃望んでいた姿ですか？まあいいでしょう。今では物質や名声など、私が18歳の時よりもずっと多くのものを追い求めるようになりました。手に入れたものの、常に道を進んでいます。18歳の私は放送学院でジャーナリズム科に通い、ファラッチのように最高の記者になりたいと思っていました。今日までその道を歩んでいるのですが、それが「白老師、なぜCCTVにいるのですか？」という人たちの言葉です。「最高のジャーナリストになりたいから」と答えます。これは私の18歳の眼差しです。だから、時々自分の18歳を振り返り、あなたは当初望んでいたように生きているのか、自問自答する必要があると思います。&lt;/p&gt;
&lt;p&gt;これは紛らわしい話ではない。18歳の時の私だ。気がつけば32年が過ぎた。北京で大学に通う人は誰でもこんな写真を持っているだろう。あの頃は天安門広場のシワシワのスーツ、校章を胸に付ける。大学生が少なかったから、校章を付けないことは特に誇らしげだった。髪は長かったけれど、18歳の時の姿が好きだった。長い年月を経て、ふと気づいたのは、18歳に直面したこと々に感謝しているということだ。静かに私を形作ってきたから。1986年5月8日、私は王府井の書店で朦朧詩選を買った。あの頃、工体で崔健の「一無所有」を聞いた。今日ふと気づいたのは、私の文体にも、性格にも、朦朧詩、ロック、そして古龍の武侠小説の影響が最大に及んでいるということだ。&lt;/p&gt;
&lt;p&gt;18歳の時、何に直面したのか？そして、何をこれから持ち運ぶことになるのだろうか。今日の18歳の若者たちが何に直面しているのか、特に知りたい。まるで刀や斧で彫刻するように、形作られているように見える。しかし、彼はどんな道具を使ったのだろうか？どんな風に私を磨いたのだろうか。今の人は皆、無数のSNSの友達がいるのに、本当の友達がいない。毎日チャットはするけれど、心を通わせる相手はいない。知識は無限に手に入るのに、知恵とは程遠い。何を知っているつもりでも、結局何も知らない。一見すると個性を主張しているように見えるが、私のような傍観者から見ると、今の若者たちは皆同じように見える。どうすればいいのだろうか？18歳の君は何を彼に経験させてあげたいのか？私は1986年が好きだ。なぜなら、1986年は1966年の問題を解決する最良の方法だからだ。&lt;/p&gt;
&lt;p&gt;1966年の文化大革命が76年の四人暴動の打倒によって終結したことは偶然であり、1986年の啓蒙と人性の目覚め、そして個人の成長があってこそ、本当に心配されている根源を掘り上げることができるだろう。私たちはまだ啓蒙を経なければならず、人性を十分に理解しなければならない。中国社会がどれほど大きな経済的進歩や変化を蓄積しても、真に人性を理解し、人性の悪側面を抑制し、善側面を活性化する瞬間がない限り、依然として多くの心配事があるだろう。私の18歳もこの時代の18歳であり、遠回りしすぎた結果、出発当初の目的を忘れてしまい、今は「初心を忘れるな」という4文字に凝縮されている。&lt;/p&gt;
&lt;p&gt;どんなに遠くへ行こうと、皆自分の18歳の頃を振り返るべきだ。18歳の写真を用意しておくのは良いことだ、時々取り出して自分に問いかけるのだ。他人の言うことは無意味だ。人を騙すのは簡単だが、自分自身を騙すのは難しい。18歳の自分が今の20歳の人に言いたいことだ。自分の18歳を常に観察する双眼として保てと。あと、20代にも言っておきたい、色々な扉を開いて試してみろ。どれが一番自分に合っているか分からないからだ。今の中国では奇妙なことに、20代の老人や70代の若者によく会う。&lt;/p&gt;
&lt;p&gt;ありがとうございました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>どんなジャーナリストがこの社会に求められているのか？</title>
        <link>https://ttf248.life/ja/p/what-kind-of-journalists-does-society-need/</link>
        <pubDate>Sat, 15 Feb 2020 11:08:38 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/what-kind-of-journalists-does-society-need/</guid>
        <description>&lt;p&gt;著者はジャーナリズムに対する見解を語り、記者が社会良心、知識、そして持久力を持つべきだと強調しています。また、自身の50代の経験から、好奇心の維持、物質と精神のバランス、そして未来への考察について共有しています。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;ユークックの検索で結構です。以降、リンクは不要です。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最高のジャーナリストはまず社会良心を持ち、次に知識を蓄え、最後に持久力を持つべきだ。100メートル走っただけで満足してはいけない。この三者が組み合わさることで、人々が期待するのはワクチンの安全性に関する問題を完全に解決することだ。それはまるで、かつてのスキャンダルと同様に、問題が発生し、解決し、完全に解決するという論理的なサイクルの中で進むこととしか思えない。そうでなければ、ジャーナリストは何のために存在するのか？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最高のジャーナリストはまず社会良心を持ち、次に知識を蓄え、そして長距離走のように、短距離走だけでは満足しない、走り続けるべきだと私は思います。この三者が合わさり、今年私が50歳になったことを考えると、私には新聞に向いているのかもしれません。私は中国の改革40年と密接に結びついています。30歳の誕生日は松花江のほとりで迎え、40歳の誕生日はオリンピック中継の中で入って、また中継の中で出ました。今年50歳になり、全国が改革開放40周年を記念しています。確かに対応があります。大時代40歳、中国の改革40歳は、無惑か困惑か？&lt;/p&gt;
&lt;p&gt;40年の歩みを経た中国は、物質的には人々に十分なものを提供し、国にも十分な貢献をしてきた。しかし、不安と困惑は増え、減ることはなかった。私たちは豊かになれば全てうまくいくと思っていたが、実際には物質的な基盤を作るだけだった。物質的な貧困から脱却することは比較的容易だが、精神的に豊かになり、真の大国となるのは難しい。アメリカですら高科技を攻撃してくるのだから、我々は農産物で対抗するしかない。「2番目」はなりにくいということが、この世界には常に存在する。アメリカで何個の「2番目」が改造されただろうか？したがって、私たちは長い年月を経て、この「2番目」ではなく、自分自身を超えなければならない。私は全てを手に入れることはできないのだから。&lt;/p&gt;
&lt;p&gt;テレビの仕事が25歳からスタートできたのは幸運だった。最初は人物インタビューからで、数百人にも及ぶ、様々な光に包まれた人々を間近で見ることができた。若かった頃は、その光彩がきっと皆を幸せにしてくれると思っていたのだが、近づいてみるとそうではない。光彩と幸福感は必ずしも比例するわけではなく、むしろ反比例することさえあった。 先日、郭沫若の最後の29年間を読んだばかりだ。彼は副首相や政協主席など要職にありながらも、ほとんど批難を受けたことがない。しかし、息子二人を失い、一人は自殺、もう一人は屋上から落ちて死んだとも言われている。彼が幸せだったのだろうか？&lt;/p&gt;
&lt;p&gt;幸福をどう測るのか？ 60代、70代になり、数年の間に息子二人を相次いで亡くした元副首相ですら、それだけで幸せを感じられる。多くの名画や書に囲まれ、無事に長生きできたこともまた、幸せにつながる。結局、何が必要なんだろうか。だからこそ、人を測る最高の鏡は読書だと私は思う。少し強調するなら、今の多くの人の不安は、考えすぎることと、本をあまり読みすぎないことによって生まれるのだ。これは楊绛（ヤン・ジャン）老人が若い人に返信した言葉で、まるでファストフードに頼り、スマホで万能薬を探そうとしているようだ。そんなことが可能なはずがない。私は、笨拙な読書体験の中で賢さを学び、多くの本を読む中で減法を学んだのだ。&lt;/p&gt;
&lt;p&gt;だから、私は全ての人に頼ることはできないけれど、より多くの中国人が読書を通して自分自身を向上させてくれることを願っている。それが最も重要なことだ。誰もが空を見上げて物事を理解できるわけではないし、私もそうはできない。しかし、鏡を見ることはできる。数年前、BBCのベテランニュースキャスターが北京に来たときのことだ。彼はBBCで最高の人材だと豪語していた。すると、誰かが彼との対話を国際飯店で開催した。その際、彼が私に「BBCはCCTVから何を学ぶべきだと思うか？」と尋ねてきた。私は冗談めかしで「まず中国語を学ぶべきだろう」と答えた。&lt;/p&gt;
&lt;p&gt;これから冗談交じりで言うと、BBCがCCTVから学ぶべきは、この世界への好奇心だ。ここ数年、私たちは急速に世界へ進出し、70以上の記者ステーションを設置した。学生たちは、海外の新しいものを見るたびに非常に好奇心を抱き、大きな好奇心をもって世界を観察している。しかし、BBCはイギリス自体を世界として捉え、もはや好奇心が薄れているようだ。すると、隣人がテーブルを叩いて、「お前、正論だ。まさに私たちが足りないのはこれだ」と言った。2007年に日本で取材した作家が、かつて私にこう言った。「この国には希望がない以外は何もない」。後になって理解したが、その言葉は非常に深い。別の角度から見ると、10年ほど前は、中国には希望がないかのように感じられたが、希望だけはあった。誰もが未来への期待を抱いていた。&lt;/p&gt;
&lt;p&gt;しかし、いつか私たちも希望のない、何でも手に入る豊かな国になってしまうのではないかと心配です。率直に言って、中国が一度負の状況になり、何でも手に入ったときに初めて自分が本当に貧しいことに気づくことを恐れています。50歳のときには、物質的には満たされていても、精神的に非常に貧しい人間になることばかりを恐れていました。現実生活では、高学歴なのに教養のない人が多く、預金通帳にたくさんの数字があっても貧しいと感じる人がたくさんいます。これが今の時代の問題です。真の貧困は怖くありません。なぜなら、前には目標があり、希望があるからです。それが私が道徳赤字や人性の欠如について言っている理由です。だから、科学者が多くのものを発明したのは、最初から偉大な使命などを背負っていたのではなく、好奇心によるものだと思います。&lt;/p&gt;
&lt;p&gt;私が彼をどうやって作れるのか興味があるから、私はいつも50歳くらいから自分を励ましてきた。だからとても嬉しい。今、私が困っているのは、粘り強さだ。先ほどお話していたように、あなたはまだ粘り強く活動されている。でも、私は「やらない方がいい」と言う。粘り強さは死と隣り合わせになるから。昔は、粘り強さが勝利だとよく言っていた。中国サッカーでは、黒い3分間を粘り強く耐えれば、歯を食いしばって、楽しさも方法もなくなる。粘り強さに頼るしかないという状況だ。確かに、粘り強さは時々重要だけど、ほとんどの場合、この言葉には裏がある。私が何かをしている時に、ただ粘っているだけなのではないかと心配している。例えば、皆さんとお話している時、私は最後まで話し切ろうと粘る。実際、私の時間はもう過ぎているのに、どんな結果になるのか興味深い。&lt;/p&gt;
&lt;p&gt;自分自身に小さなキーワードを与え、皆さんと交流しながら話す。50歳になっても好奇心を保てれば問題ない。私は面白いものが好きだが、必ずしも今の流行りのものだけではない。今日の流行は一瞬で変わるかもしれない。毎年流行語があるだろうか？覚えているか？今日のインターネットのメディアが10年後、伝統的なメディアを凌駕するのだろうか？面白いものは常に面白い内面を持っている。皆さんの好みを尊重し、必ず道理がある。しかし長期的には、結局中国人が一番好きなのは麻雀だ。ファストフードが好きになる時、大料理を提供するレストランは徐々に潰れていく。&lt;/p&gt;
&lt;p&gt;多くの物事はただ感傷を抱いて終わってしまうものではない。あなたは毎日、スマホの断片的な読書にどれだけの時間を費やしているのか？少し長めの文章はどれくらいの時間読んでいるのか？しかしこれもまたプロセスだ。スマホは私たちの手枷になりつつある。だから短いものをたくさん見ていると、徐々に近視になるのではないかと思うが、これもまたプロセスだ。私はコンテンツの重要性を心配したことはない。戻ってくるだろう。あなたは毎日娯楽に溺れ続け、40歳になる。まるで私が十几歳の子供がコーラを飲むのを見ているようだ。少し飲まないように言っても、彼は必ず飲む。しかし一方で私は楽観的だ。40歳になったとき、彼は必ずお茶の世界に戻ってくるだろう。それが中国人の人生なのだ。&lt;/p&gt;
&lt;p&gt;それは普通のことですが、今後の変化はもう少し早く進むことを願っています。今のところ調査報道をする人が少ないので、残念に思っているだけです。&lt;/p&gt;
&lt;p&gt;ありがとうございました。&lt;/p&gt;</description>
        </item>
        <item>
        <title>20年後の中国サッカーはどうなるだろうか？</title>
        <link>https://ttf248.life/ja/p/chinese-football-in-20-years/</link>
        <pubDate>Sat, 15 Feb 2020 10:59:32 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/chinese-football-in-20-years/</guid>
        <description>&lt;p&gt;付け加えた読書感想文はほとんど2021年に書き留めたもので、白岩松先生の講演稿を文字に起こした時は、まだパンデミックが始まったばかりでした。二十年後というよりも、一年後、二年後でも、世界の変わり方はいつも人々の予想を超えます。現在、国内のパンデミックは終息に向かっていますが、海外では依然として騒ぎ続けています。サッカーに関しては、数年前から国足は好調で、監督も攻撃的な戦術を積極的に採用しており、昔、おじいちゃんと一緒に見ていた頃に比べれば、少し面白くなりました。国家代表の試合を見て、老人がチャンネルを変えようとするのは一体どんな体験なのでしょうか？&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;ユークックの検索で結構です。以降、リンクは不要です。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;中国サッカーにまだ興味がありますか？非常に興味があります。ここまで駄目になるなんて信じられない。中国サッカーがうまくいかない理由はたくさんあるのですが、その一つは誰もボールを失うことを恐れず、他の人にパスしないことです。自分は大丈夫でも、そういうプレーは存在しません。&lt;/p&gt;
&lt;p&gt;もちろんこれはほんの一つの原因に過ぎません。20年間のサッカーという話ですが、20年後には中国のサッカーが遠くに感じられます。第1次拡大で48チームになったのに、中国は参加できるかもしれませんが、そうでない可能性もあります。国家代表として最適な年齢は26～30歳です。つまり、今日から6～10歳の子供たち、20年後にはきっと大丈夫でしょう。しかし、今日から6～10歳の子供たちのことを考えると、すぐに表情が曇ります。原因と結果を考慮すると、私たちは今何を作っているのでしょうか？今日、私たちは国家代表チームがリーグ戦を蹴る大豆を作る寸前でした。何が育つでしょうか？この行動を実行した人は、解雇の準備をする必要があります。これは規則に違反しているので、あまり考えませんでした。&lt;/p&gt;
&lt;p&gt;しかし、本当に今日6～10歳の子供たちがサッカーをしているのか考えてみるべきだ。20年後の中国サッカーがどうなるか、お分かりだろうか？&lt;/p&gt;</description>
        </item>
        <item>
        <title>道徳的欠如、人性の喪失</title>
        <link>https://ttf248.life/ja/p/moral-deficit-humanity-loss/</link>
        <pubDate>Sat, 15 Feb 2020 01:20:34 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/moral-deficit-humanity-loss/</guid>
        <description>&lt;p&gt;人に何かをするとき、まず大切なのは良心の呵無であり、そうすれば安心して眠れるようになる。些細なことから大原則まで、間違えないようにすることが最善だ。もし本当に間違いを犯してしまったなら、できる限り修復に努め、隠したり忘れたりするのではなく、自分の記憶力は良い種族だからこそ、心安らかであることが帰る場所であり、自分自身への問いに答えられることが、生き方を楽にする。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;リンク先について、著作権侵害がある場合はご連絡ください。削除いたします。この文章はあくまでテキストの翻訳です。&lt;/p&gt;
&lt;h2 id=&#34;文字起こし&#34;&gt;文字起こし
&lt;/h2&gt;&lt;p&gt;私は八文字で言えば、今の私たちには道徳的な赤字があり、人間性が損なわれていると感じています。時代は常に問題が発生し、それを解決する論理的な循環の中で進んでおり、あなたは「洗い換え」を待つ必要があります。中国のような国にとって、多くのことは緩やかな「洗い換え」のプロセスです。ですから、変化や「洗い換え」に悲観しないでください。&lt;/p&gt;
&lt;p&gt;ここ数日、中国は2つの台風と戦っている。一つは目に見えない台風であり、もう一つは形のある台風だ。目に見えない台風とはワクチンであり、それは私たちの心の安全という堤防を揺さぶる。そして、上海に上陸し、北京や天津を巻き込むような台風は、過去数十年間で中国ではほとんど見られなかった。これはさておき、次にあなたが考えるべきことは、あなた自身の幸福についてだ。あなたは大きく変化し、多くの答えを持っている。しかし、周囲の環境が変わらなければ、幸せになれるだろうか？私は8文字を使って強調したい。今の私たちは道徳赤字であり、人間性が損なわれている。これが最大の赤字であり、最大の損失だ。&lt;/p&gt;
&lt;p&gt;しかし、人々が期待しているのは、ワクチンの安全性に関する問題を完全に解決することだ。それはまるで昔の粉ミルク事件のようなもので、だから歴史をよく見ることが大切だし、アメリカの食品医薬品局（FDA）の設立と法整備も、昔の粉ミルクや乳製品の不安全問題と密接に関係していることを理解する必要がある。三鹿製菓事件は、中国における乳製品分野の大変革を促したのだから。ワクチンについては、連鎖的に起こるとは言えないが、今回は中断することを望む。時代は常に問題が発生し、解決され、完全に解決されるという論理的な循環の中で進歩する。そうでなければ、ジャーナリストは何のためにいるのか？市民は何のために存在するのか？&lt;/p&gt;
&lt;p&gt;ですから、私たち一人ひとりができることは関心を持つことだと思います。しかし問題は、中国人は物事を忘れやすいことです。先ほど言ったように、他人の車にぶつかって、その場を飛び去ってしまうような人がたくさんいます。誰も止めようとしません。私たちの隣人や同僚にも、そのような人が大勢います。ですから、少しずつ変えていく必要があります。そして、私たちのような普通の市民ができることは、彼に関心を持ち、忘れずにいることです。物事が進むためには、満たされていない生活の中で理想について語っても説得力がないかもしれませんが、皆が食べ物に困らないようになり、暖かく暮らせるようになったとき、世界糖尿病患者数第1位、高血圧患者数第1位など、多くの「第1位」国家になってしまうと、中国人は走り始め、ダイエットを始めます。ここにいる皆さんにも、あまりたくさん食べると元気がなくなり、ダイエットの気力が湧かないという経験があるのではないでしょうか。これこそが小さな変化です。&lt;/p&gt;
&lt;p&gt;話している精神的なレベルもきっと同じ道理です。食べ物に困らない、着るものに困らないようになったら、走り始めたり、ダイエットを始めたりする頃、徐々に精神的な欲求も増えてきます。例えば昔は喫煙していたのですが、走りはじめてから、ぼんやりと気づくと20日以上タバコを吸ってないことに気付きました。それ以来、吸っていません。もちろん、わざわざ完全にやめると言ったりはしません。儀式感を演出しすぎたくありませんし、一年で数本吸う可能性も否定できません。生活習慣が変わると、色々なものが変化します。中国人の場合、結果が出るまで辛抱強く待つことが大切です。&lt;/p&gt;
&lt;p&gt;ますます多くの人が不幸だと感じているし、それを許容しない。うつ病が増えている一方で、より多くの人々が前向きな生き方を探しているのではないだろうか。そのため、精神的なものが成長する。だから悲観しないでほしい。同じ出来事でも、どう見るかだ。私はよく道で割り込みをする車を見て落ち込むことがあるが、すぐに楽観的になる。向こう側の列が以前より長くなっているからだ。これも一つのプロセスだ。ここに集まった皆さんも、雨上がりの夜にこんな場所に来て、くだらない話ばかりしているのだ。これもなかなか面白いことではないだろうか。&lt;/p&gt;
&lt;p&gt;これもまた変化の一種であり、多くのことを考え方を変えて捉え直す必要がある。将来的に増やしていくべきことはたくさんあるが、例えば起業という言葉についてだが、誰の人生も起業と言えるだろう。誰もが自分の人生を起業しているのだ。今の私たちは「起業」に時代的なものをあまりに入れすぎている。実際には、起業は常に存在する。蘇軾でさえ起業したのだろうし、李白もそうだろう。一生の中で多くのことを創造し、最終的に自分のブランドを作り上げる。大多数は成功しないかもしれないが、それは問題ない。ただ、十分に味のある人生を送り、それが価値があると感じることが重要だ。今の中国社会が特に欠けているのは、良い失敗を別の形の成功と捉える価値観だ。中国人だけが成功の結末を受け入れるが、良い失敗は受け入れられない。&lt;/p&gt;
&lt;p&gt;それは難しいと感じるので、中国サッカーがうまくいかない理由はたくさんあると思いますが、その一つは誰もボールを失うことを恐れて、自分でパスするのをためらったり、他の人にパスするのをためらったりすることです。そのようなプレースタイルがないことも、もちろん、ほんの少しの理由に過ぎません。ですから、30歳を超えてから、序文で「落ち着いて楽しむ」と書いていましたが、今50歳になり、少し焦りを感じています。時が経つのはあっという間なので、期待していた多くのことが現実になっていないからです。しかし一方で、中国のような国にとって、多くのことは緩やかな変化のプロセスであることを理解しています。親世代を見ると、昔は信号機を無価値なものと考えていましたが、時々子供が父親の手を引きずっているのを見ることがあります。変化し、入れ替わっています。ですから、少し忍耐が必要です。&lt;/p&gt;</description>
        </item>
        <item>
        <title>時間を読み解くには、多くの本を読む必要がある。</title>
        <link>https://ttf248.life/ja/p/about-time-and-books/</link>
        <pubDate>Fri, 14 Feb 2020 07:27:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/about-time-and-books/</guid>
        <description>&lt;p&gt;全体的に見て国は良くなり、豊かになりつつあります。人の虚栄心があれば問題ありませんが。90年代から現在まで、私が接した家庭において、皆さんの生活水準は以前より向上し、同時に裕福な人も増えました。市場経済の発展過程で、避けられない貧富の差の拡大も起きています。&lt;/p&gt;
&lt;p&gt;皆よく言う階級固定化や上昇チャンネルの閉塞は、現代社会の病弊であり、わが党が人民の基本的な福利厚生や社会保障において成し遂げた貢献は、皆も見て認識すべきだ。小規模な生活はますます良くなるだろう。もしあなたが家を買いたくないなら賃貸すればいい。子供たちの教育についても、教育資源の配分に不均衡がある問題があり、時には選択を迫られることもある。より良い仕事の機会や環境を選ぶか、それとも家族との時間を優先するか。自分の考えを他人、ましてや子供や家族に押し付けないでほしい。座って、ゆっくり話し合おう。生活は必ず良くなっていく。&lt;/p&gt;
&lt;h2 id=&#34;動画原稿&#34;&gt;動画原稿
&lt;/h2&gt;&lt;p&gt;リンク先について、著作権侵害がある場合はご連絡ください。削除いたします。この文章はあくまでテキストの翻訳です。&lt;/p&gt;
&lt;h2 id=&#34;三十歳&#34;&gt;三十歳
&lt;/h2&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;30%e5%b2%81.jpg&#34; &gt;30岁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今年でちょうど50歳だ。まさかとは思わなかったが、やはり老人だな。今になって思えば、本当に老いた。これは30歳の頃の姿だ。30歳の時、自分が若く、魅力的だとは感じなかった。50歳になって振り返ってみると、なかなかいい。30代の頃、人生で最も強く感じたことは何か？振り返れば、それは「引き算」だ。「減法」がキーワードだ。ある意味、痛みと喜びもまた引き算であり、多くのことを経験し、考え、書き出し、それを残して新しい白紙に、走り出すこと。しかし、私にとって30代は、自分自身のためにも、皆さんのためにも、「引き算」をすることが非常に重要だったと思っている。&lt;/p&gt;
&lt;p&gt;今私は、連大生の面倒を見ている担当者です。彼らによく言っているのは、30歳になる前に命を懸けて加算すべきことだということです。色々なことを試みなければならないし、自分にはどれだけの可能性があるか分からないし、運命がどんな機会を与えてくれるかも分からない。だから、どう知るかは別として、20代の頃から必死に様々な加算をしてしまう人がいるけれど、減算をすることを忘れてしまう。30歳前後というのは人生において非常に重要な時期であり、一連の加算と色々な場所への走り回った後で、一度減算をするべき大切な時だ。そうしなければ、遅れるだろう。なぜ減算が必要なのか？全てがあなたに合うわけでも、あなたに合わないこともない。全てのことはやってみるべきだ。&lt;/p&gt;
&lt;p&gt;８本の鎖があなたを縛り付けている、どれくらい走れるだろうか？互いに牽制し合うかもしれない。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e5%bb%89%e4%bb%b7.jpg&#34; &gt;廉价&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;30歳になったとき、抜擢で昇進していた。学術的には教授、ジャーナリストなら上級記者といったところだ。29歳の時に抜擢され、今となってはそうしたことが珍しくなったが、その時、大きな困惑を感じ始めた。シドニーオリンピックの取材で拍手も多かったが、突然、何かがおかしいと感じた。「お前は何をしたいのか？」「何を捨てるべきなのか？」と自問自答し、その年、非常に重要な「引き算」を行った。番組を一年間休止し、海外への活動も一切控えた。周囲からは「司会者は一ヶ月ほど姿を見せなければ、何とかごま張れるが、半年となると誰も覚えていないぞ」と言われたが、「私の顔はそれほど安っぽいものか」と返した。&lt;/p&gt;
&lt;p&gt;その年から新番組の開発を始めた。痛みを乗り越え、楽しんだ後、01年に丸一年間休んでいた。今日私が歩んできた道は、あの頃の引き算思考のおかげだと思っている。当時の私は、スポーツやE（エンタメ）、その他色々な面白いこと、プロデューサーなど、多くのことができると感じていた。しかし、私は断った。私はニュースしかできないし、できなければならないと気づいたのだ。そして、私は当時3つの番組のプロデューサーだったが、全てを辞職し、今の私になった。純粋になった。先日同僚と話していて、30代の頃にした非常に重要な決断について言及した。多くの選択肢があったにも関わらず、私はニュースを追求することを選んだのだ。深い井戸のようなその道で、副主任への昇進の可能性もあったが、それを断り、普通の百姓に戻ったのである。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e6%9c%ac%e7%a7%91%e7%94%9f.jpg&#34; &gt;本科生&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これまで私は中央電視台の連股級幹部であり、必ずしも学士号を取得しただけの一般の人々ではありません。あなたは私たちの体制を理解していますが、私はそれを拒否しました。学士号を持つ人がどこまで行けるのか、学士号がなぜ継続的に学習し、研究生を指導することに役立たないのか見てみたかったのです。ええ、今では研究生を指導しており、毎年11人指導しています。これは結果として減算されたものです。もちろん、振り返っての感慨です。それに、若い頃は特に奔走する中で、最終的にどのような感覚が生まれるのでしょうか？すべて手に入れるべきだという感覚です。何か一つ手に入らなかったり、何事か少しでも欠けていると、心が非常に落ち着かないのです。&lt;/p&gt;
&lt;p&gt;座敷の皆様、減法を学ぶことも大切です。28歳、1996年のオリンピックを見た時、私は一言思いつきました。&lt;strong&gt;缺陷是完美的重要组成部分，这个世界上就没有完美&lt;/strong&gt; 。曾国藩の長編小説にも、人生最高の境地とは何かという重要な一文が書かれています。曾国藩は自分の書斎を「求闕（きゅうけつ）の間」と名付けようとしたのですが、花が完全に開いていない時、月が完全に満ちていない時こそが良いのです。しかし、常人にとっては、それが欠陥のように感じられ、完璧さに達していないと感じるでしょう。人を破滅させる最良の方法は、彼に完璧を求め、極致を目指させることなのです。&lt;/p&gt;
&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;%e8%8a%b1%e6%b2%a1%e6%9c%89%e5%85%a8%e5%bc%80.jpg&#34; &gt;花没有全开&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この世界はそうじゃない、花が完全に咲いていない時こそ最高だ。花が満開になると散り際が近いし、月が満ちると徐々に欠けていくのが目に見える。だから私はこれが30歳の自分への大切な後押しと啓示だと感じている。40歳は見た目はもう良くないだろう。でも、リラックスしたし、自由になった。なぜなら、スーツ姿で、白黒の世界ではなく、幸せを求め始めたからだ。&lt;/p&gt;
&lt;h2 id=&#34;四十歳&#34;&gt;四十歳
&lt;/h2&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;40%e5%b2%81.jpg&#34; &gt;40岁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中国人の言い方で「四十不惑」というものがある。30代は引き算、40代は悩みとのことだが、今の時代、40代で悩んでいる人が一番多いのではないか。私の場合は、まさかの中年危機が早くから来たようで、36歳7歳頃から、自分がやっていることは本当に価値があるのだろうか、と頭を悩ませ始めている。&lt;/p&gt;
&lt;p&gt;意味があるだろうか？結局、私が何を幸せとしたいのだろうか？この本は、そのような困惑の中で生まれた。30歳になると、多くの幸福の目標が物質的なものと結びついていることに気づく。「三十而立力」とは、学歴があって初めて立ち上がれることを指す。車も家もなければ、義母さんはあなたに妻を嫁に出さないだろう。非常に現実的だ。しかし、「四十不惑」は難しい。古人はおそらく平均寿命が今ほど長らぬため、40歳で「不惑」になったのだろう。私も40歳にして困惑している、**そうだ。**同じように40歳の時に、多くの人が私に「あなたは幸せですか？」と聞くのだ。&lt;/p&gt;
&lt;p&gt;その本のタイトルは「幸福の波」ですか？それは疑問符で、私の心の困惑を表しています。中年危機の到来です。40歳を迎えると、多くの疑問に答えなければなりません。40歳前後には、自分自身とよく話し合い、たくさんのものを読み、自分なりの答えを見つけましょう。私が36、7歳の頃に『道德経』の世界に入れたことを幸運に思っています。『白話』の中で既に述べたように、40歳の時にまだ考える必要があるのであれば、周囲の環境が変わらない場合、特にソフト面において、気持ち良く家を出て行っても、あちらでするべきでないことがたくさんあります。何かを買えば偽物だし、ワクチンを打つことも…。&lt;/p&gt;
&lt;p&gt;ここ数日、中国は二つの台風と戦っている。一つは目に見えない台風で、もう一つは形のある台風だ。目に見えない台風とはワクチンであり、それは私たちの心の安全という堤防を揺さぶるものだ。もう一つの台風だが、中国では上海に上陸する台風は珍しい。これはさておき、次に考えるべきことは、あなたが自分自身のために良いことをし、多くの答えを得たとしても、周囲の環境が変わらなければ幸せになれるだろうか？&lt;strong&gt;我有八个字说得比较重，我觉得我们现在是道德赤字人性亏损，这才是目前最大的赤字和最大的亏损&lt;/strong&gt;。先日、ここからそう遠くないところで、私が目撃したのだが、二つの車が衝突した。衝突はそれほどひどくなかったが、責任者はもう一方がぶつかった車に対し、路肩に停めようとすると言ったところ、相手もゆっくりと停める準備をしていた。ところが、前の車が急に走り去り、誰もそれを止めなかった。&lt;/p&gt;
&lt;p&gt;責任ある父親だろうか？責任ある息子だろうか？ましてや、彼があなたの同僚である可能性もあるのに、責任感の欠如と人間性の喪失は必ずあなたに影響する。あなたがどれほど偉大な人物であろうとも、家に閉じこもっていても、子供たちは予防接種を受ける必要があるし、もしあなたが宅配便を配達しているなら、その食べ物にも問題があるかもしれない！&lt;/p&gt;
&lt;p&gt;そのため、中国人がどのようにして庶民から市民へと変わっていくのか、という問いは、私自身の40歳を境に、自分自身のためにも、社会全体のためにも重要な課題として問われるようになった。&lt;/p&gt;
&lt;p&gt;もし30歳が引き算なら、40歳が困惑なら、50歳は自分に贈るべき言葉は好奇心だ。50歳は気まずい、前には出番がなく、後ろにも居場所がない。進めば攻められるし、退けば混ざって生きることもできる。あるものを手にして10年過ごし、そのまま退職するのも悪くないかもしれない。&lt;/p&gt;
&lt;p&gt;最近本を読んでいたら、その中にとても面白いことが書かれていました。シリコンバレーで本当に成功している起業家は五六十代が多いというのです。これは私たちの考え方とは違います。中国が起業をすべて若者の事業とみなすのをやめられる時が来るべきです。それは、ボランティア活動をすべて青年ボランティアとみなすべきではないのと同じです。先週、番組に出演したのですが、中国では間もなく退職した小学校・中学校教員を採用する予定で、毎年二三万元の補助金を受け取りながら、優秀な教師として村に行き、教えています。これはまさに退職後の再就業のパイオニアを開拓していると言えるでしょう。もちろん慈善活動だけではありませんが、50歳に戻るとまだ少し距離があります。どうやって前進していくべきでしょうか？&lt;/p&gt;
&lt;h2 id=&#34;五十大寿&#34;&gt;五十大寿
&lt;/h2&gt;&lt;p&gt;！&lt;a class=&#34;link&#34; href=&#34;50%e5%b2%81.jpg&#34; &gt;50岁&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;重要なのは、50歳の人にとって2つの課題があるということだ。一つは自分自身に対する問いかけ、「まだ多くのことに興味を持てるか」「自分の人生観はどういうものか」という問いだ。私の50代で得られた最大の収穫、あるいは今生きている意味&lt;strong&gt;我善待每一个今天，20岁的时候容易活在明天里，一不注意50岁容易活在昨天里，但是我努力的克制自己，既不活在明天，也不活在昨天，我善待每一个今天，50岁的人就不该总是明天再说，或者昨天真好！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;蔡琴のコンサート盤を今日は一番良いので見ようと思う。蔡琴が言った言葉で、とても良いと思ったのは「写真を見るたびに、2年前の自分は本当に美しかったと思う。でも、あの時の一日も、自分が美しいと思ったことはなかった」という言葉だ。この言葉には何か味がする。30歳の時はそう感じなかった。その頃は結構ハンサムだったし、自分の欠点がたくさんあると思っていた。でも今日、20年経って振り返ってみると。&lt;/p&gt;
&lt;p&gt;昔も私も若い頃はあった、髪がたくさんあって。だからあなたの今日を大切にしてね。2年後のお会いできる日を楽しみにしています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;脚が動かなくなったばかりの頃、車椅子に座りながら、走ってバスケットボールをしていた頃のことが毎日のように思い出され、その度にとても辛い思いをしている。
数年後、車椅子で褥瘡になり、全身が辛く、あの頃は何も痛みがなく、静かに車椅子に座れていた日々を懐かしく思います。
数年後、私が腎不全になり、透析治療を受けざるを得なくなりました。その時、私はただ褥瘡のあった車椅子生活を懐かしみます。もしこの先、50歳まで生きられないとしたら、これまでの50年間が無駄だったことになるでしょう。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;実際、50歳になって初めてこの道理に気づく必要はないと思います。30代、40代で気づくべきです。何事も容易に見過ごしてしまうものです。旅行中の食事だって、食べずに済ませてしまうと、30年後には味が変わっているかもしれません。だからこそ、今日を大切にすることが、今の私の最初の感想です。&lt;/p&gt;
&lt;p&gt;好奇心こそが、人類進歩を促す最も重要な原動力だ。一度夢を実現して既得権益を持つと、周りの人が夢を叶えることを阻む存在になってしまう人もいる。かつての自分が嫌っていたやり方で、若い世代や物事を見下すようになることもある。&lt;/p&gt;
&lt;p&gt;数年前から、自分自身が毎年11人の大学院生をボランティアとして迎え入れ、2年間付き合い、現在までに5期55名の学生が卒業しています。このような恩恵を受ける立場にいることは非常に幸せなことだと感じています。ある種の経験を持ち、彼らを導く力も与えられています。授業が終わるたびに夕食に招待し、それほどお金はかかりません。しかし、これは良い恩恵を受ける者がすべきことです。恩恵を受ける者は、一方では道標となり、もう一方では新たな若者を育成します。私はかつて、「助けてくれた人に感謝の言葉をあまり言うつもりはない。なぜなら、新しい若者に対して倍返しの方法で接することで感謝を表現するからだ」と言いました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果天天在那说谢谢你，却成为阻拦者&lt;/strong&gt;。次は他者のために道を切り開くことだ。中国が物質的、経済的、思想的、文化的、あらゆる分野で既得権を持つ者たちが、あなたがその地位になったとき、どうすべきかを考えるべきだ。昨日の列車を押しやった人が今日の列車を止める人になる、振り返れば中国の歴史はそこに満ちている。今日それはないままである。むしろ、そうなることも多々あるからこそ、全ての既得権を持つ者たちに、あなたが若い頃、どんな人に会いたいと思っていたかのように行動することを呼びかける。そのようなことを私は十分ではないかもしれないが、少なくとも考え、行い、発言している。&lt;/p&gt;</description>
        </item>
        <item>
        <title>標準ライブラリコンテナのメモリ割り当て関数：allocator</title>
        <link>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</link>
        <pubDate>Mon, 30 Dec 2019 13:26:19 +0800</pubDate>
        
        <guid>https://ttf248.life/ja/p/standard-library-container-memory-allocator/</guid>
        <description>&lt;p&gt;カスタムアロケータは、パフォーマンスの向上、メモリ効率の改善、および頻繁な小規模メモリ割り当ての問題解決に役立ちます。&lt;/p&gt;
&lt;h4 id=&#34;前縁&#34;&gt;前縁
&lt;/h4&gt;&lt;p&gt;最近、ネットワークデータパケットの開発に携わり、頻繁な小さなメモリの割り当てと解放が必要になった。メモリプールを使用しようと考えたが、既存のメモリプールの調査でこれを発見した。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/cacay/MemoryPool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cacay/MemoryPool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;インターフェースを見たときから、少し疑問に思っていた。このメモリプールの実装がなんだか奇妙だ。__INLINE_CODE_0__的实现逻辑，是在申请固定大小的内存空间。看过boost的内存池接口，提供的是一个模板，用的时候进行实例化。正巧这个库已经有文章进行过介绍，提到了__INLINE_CODE_1__という概念。&lt;/p&gt;
&lt;h4 id=&#34;wikihttpszhwikipediaorgwikie58886e9858de599a8_c2b2b&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_%28C%2B%2B%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wiki&lt;/a&gt;
&lt;/h4&gt;&lt;p&gt;C++プログラミングにおいて、アロケータ（allocator）はC++標準ライブラリの重要な構成要素です。コンテナ（container）と呼ばれる様々なデータ構造（例えば、リストや集合など）が定義されており、これらのコンテナには実行時にサイズを変更できるという共通の特徴があります。この実現のために動的なメモリ割り当てが必要となり、アロケータはそのメモリ割り当てと解放のリクエストを処理するために使用されます。つまり、アロケータはSTLコンテナのメモリ管理における低レベルの詳細をカプセル化するものです。デフォルトでは、C++標準ライブラリは独自の汎用アロケータを使用しますが、必要に応じてプログラマはカスタムアロケータを作成して置き換えることも可能です。&lt;/p&gt;
&lt;p&gt;アロケータは当初、アレクサンドル・ステパノフによってC++標準テンプレートライブラリ（STL）の一部として考案され、「ライブラリをより柔軟にし、基盤となるデータモデルに依存しない方法」を提供し、プログラマがカスタムのポインタや参照型を利用できるようにすることを目的としていました。しかし、C++標準に取り込む際、C++標準委員会は完全なデータモデル抽象化による容認できないパフォーマンス損失を認識し、その代替案としてアロケータに対する制限が厳しくなりました。その結果、現在の規格で記述されているアロケータのカスタマイズ性は、ステパノフの当初の構想に比べて大幅に制限されています。&lt;/p&gt;
&lt;p&gt;割り当て方のカスタマイズには制限があるものの、多くの状況でカスタムアロケータが必要となる場合があり、これは主に異なるメモリ空間（共有メモリやリサイクル済みメモリなど）へのアクセス方法をカプセル化するため、あるいはメモリプールを用いたメモリ割り当て時のパフォーマンス向上を目的として行われる。また、頻繁に少量メモリを割り当てるプログラムにおいては、専用のカスタムアロケータを導入することで、メモリ使用量と実行時間の両面で大きな恩恵が得られる場合がある。&lt;/p&gt;
&lt;h4 id=&#34;申し訳ありませんが翻訳する中国語のテキストが提供されていませんテキストを提供していただければ日本語に翻訳します&#34;&gt;申し訳ありませんが、翻訳する中国語のテキストが提供されていません。テキストを提供していただければ、日本語に翻訳します。
&lt;/h4&gt;&lt;p&gt;カスタムアロケータを定義する主な理由の一つは、パフォーマンスの向上です。専用のカスタムアロケータを使用することで、プログラムのパフォーマンスを向上させたり、メモリ使用効率を高めたり、あるいはその両方を実現できます。[4][8] デフォルトのアロケータはnew演算子を使用してメモリ空間を割り当てますが、これはしばしばC言語のヒープ割り当て関数（malloc()）によって実装されます。[9] ヒープ割り当て関数は、大量のメモリを一度に割り当てる場合に最適化されていることが多いため、ベクトルや両端キューなどのメモリを大量に割り当てるコンテナでは、デフォルトのアロケータは一般的に効率的です。[8] しかし、連想コンテナや双方向リストなど、頻繁に少量ずつメモリを割り当てる必要があるコンテナの場合、デフォルトのアロケータを使用すると通常、効率が低下します。[4][9] さらに、malloc()ベースのデフォルトアロケータには、参照局所性の低さ[4]や、メモリ断片化を引き起こす可能性[4][9]などの問題も存在します。&lt;/p&gt;
&lt;p&gt;要するに、この部分（……）は、この規格がディスペンサーに対して行う「私には夢がある」のスピーチのようなものだ。夢が実現するまでは、可搬性を気遣うプログラマーは、ステートレスなカスタムアロケータの使用に縛られることになるだろう。
スコット・メイヤーズ『Effective STL』
この状況を鑑みると、頻繁な少量メモリ割り当ての問題を解決するために、メモリプールベースの割り当て器がよく用いられる[8]。デフォルトの「オンデマンド割り当て」とは異なり、メモリプールベースの割り当て器では、プログラムは事前に大きなメモリブロック（「メモリプール」）を確保し、メモリが必要な際には、カスタム割り当て器は単にプールのメモリへのポインタを要求者に返すだけです。オブジェクトの破棄時には、実際にメモリを解放する代わりに、メモリプールのライフサイクルが終了した時点でまとめて解放されます[注 1][8]。&lt;/p&gt;
&lt;p&gt;「カスタムアロケータ」という話題に関して、すでに多くのC++専門家や関連著者が議論に参加しており、例えばスコット・メイヤーズの『Effective STL』やアンドレイ・アレクサンドレスキューの『Modern C++ Design』にも言及されています。メイヤーズは、ある型Tに対するアロケータのすべてのインスタンスが等しいと要求する場合、可搬性のあるアロケータのインスタンスは状態を含んではならないことに気づきました。C++標準は、ライブラリの実装者がステートフルなアロケータをサポートすることを推奨していますが[文 4]、メイヤーズはこの関連箇所を「（一見）素晴らしい考え」と述べつつも、ほとんどナンセンスであり、アロケータの制限は「あまりにも厳しすぎる」[4]と批判しています。例えば、STLのlistはspliceメソッドを許可しており、これはlistオブジェクトAのノードが直接別のlistオブジェクトBに移動されることを意味します。これにより、Aのアロケータによって割り当てられたメモリが、Bのアロケータによって解放可能である必要があり、それによりAとBのアロケータインスタンスが等しいことが推論されます。メイヤーズの結論は、アロケータを静的方法を使用する型として定義するのが最適であるというものです。例えば、C++標準によると、アロケータはrebindメソッドを実装したotherクラステンプレートを提供する必要があります。&lt;/p&gt;
&lt;p&gt;另外、C++プログラミング言語のビアニ・ストラウスルップは、「各オブジェクトの情報が異なることを防ぐための厳格なアロケータの制限」については「問題ない」（大意）と述べ、ほとんどのアロケータには状態が必要なく、むしろ状態がない方が性能が良い場合もあると指摘しています。彼は、メモリプール型アロケータ、共有メモリ型アロケータ、ガベージコレクション型アロケータという3つのカスタムアロケータの利用例を提示し、内部メモリプールを利用して少量メモリを高速に割り当て/解放するアロケータの実装例を示しました。しかし、彼はそのような最適化は既に彼が提供しているサンプルアロケータで実現されている可能性もあると述べています。[3]&lt;/p&gt;
&lt;p&gt;カスタムアロケータの別の用途は、メモリ関連のエラーをデバッグすることです[10]。そのためには、割り当て時に追加のメモリを割り当ててデバッグ情報を格納するアロケータを作成できます。このようなアロケータは、メモリが同じ種類の割り当て/解放アロケータによって割り当て/解放されることを保証するだけでなく、キャッシュオーバーフローからプログラムをある程度保護することもできます[11]。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
