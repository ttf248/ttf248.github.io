<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hugo on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/hugo/</link>
        <description>Recent content in Hugo on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Sun, 25 May 2025 16:58:31 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/hugo/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>클로드4 출시, Hugo 태그 및 하이퍼링크 번역 도우미 개발 시도</title>
        <link>https://ttf248.life/ko/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;이 사이트는 hugo 기반으로 개발되었지만, 글 작성 시 항상 중국어 제목을 사용했기 때문에 생성되는 기사 링크가 그다지 친절하지 않습니다. 쉽게 말해서, 게시했을 때 보기에 좋지 않다는 뜻입니다. 중국어 문자가 하이퍼링크에서 %E4%BD%A0%E5%A5%BD 와 같은 형태로 변환되기 때문이죠. 슬러그를 설정하여 해결할 수는 있지만, 매번 수동으로 설정해야 해서 너무 번거롭습니다.&lt;/p&gt;
&lt;p&gt;그래서 오늘 클로드4를 사용하여 번역 보조 개발을 시도해 봤습니다. 이 도우미는 중국어 제목을 영어 슬러그로 자동으로 변환하고, 기사에 하이퍼링크를 추가합니다. 이렇게 하면 수동 설정의 번거로움을 피할 수 있습니다.&lt;/p&gt;
&lt;p&gt;클로드4는 정말 좋네요, 문맥 이해 능력이 크게 향상되었고 복잡한 작업 처리 효율도 훨씬 좋아졌어요&lt;/p&gt;
&lt;h2 id=&#34;프로젝트-주소&#34;&gt;프로젝트 주소
&lt;/h2&gt;&lt;p&gt;국내 프로젝트 주소: &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
해외 프로젝트 주소: &lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;코드-구현&#34;&gt;코드 구현
&lt;/h2&gt;&lt;p&gt;먼저 구현 아이디어부터 설명하자면, 모든 기사를 스캔하여 태그 정보와 기사 제목을 추출한 다음, 로컬의 대형 모델(gemma-3-12b-it과 같은)을 호출하여 번역합니다&lt;/p&gt;
&lt;p&gt;실제 개발에서, 이전 세대 대규모 언어 모델과 비교했을 때 &lt;code&gt;Claude4&lt;/code&gt;는 몇 가지 뚜렷한 특징을 보여줍니다. 기능 요구 사항이 많기 때문에 &lt;code&gt;Claude4&lt;/code&gt;는 자동적으로 인터랙티브 메뉴를 설계하여 다양한 사용 시나리오를 종합적으로 고려했습니다. 예를 들어, 태그 처리 측면에서 &lt;code&gt;Claude4&lt;/code&gt;는 태그의 통계 및 분석은 물론 분류 통계까지 지원하며 심지어 &lt;strong&gt;태그가 없는 문서&lt;/strong&gt;도 감지할 수 있습니다. 또한, &lt;strong&gt;미리 보기&lt;/strong&gt;와 태그 페이지 생성 기능도 제공합니다.&lt;/p&gt;
&lt;p&gt;어떤 로컬 모델과 연결하든, 새로운 번역 캐시를 추가하든, 아니면 광범위한 코드 리팩토링을 하든, &lt;code&gt;클로드4&lt;/code&gt;는 한 번에 완료하며 거의 아무런 문제도 발생하지 않습니다. 프로젝트 규모는 크지 않지만 많은 작은 기능들을 포함하고 있습니다. 과거에는 개발 과정에서 대규모 모델이 앞 내용을 자주 잊어버렸는데, 이번 &lt;code&gt;클로드4&lt;/code&gt;는 매우 뛰어난 성능을 보여주며 &lt;strong&gt;거의 문맥을 잊는 경우가 없었습니다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;간단히 말해서, 지능이 향상되었고, 이후 개발 작업에 더 많은 부분을 위해 &lt;code&gt;클로드4&lt;/code&gt;로 전환할 예정이며, 일상적인 코딩의 주력 모델로 활용할 것입니다&lt;/p&gt;
&lt;h2 id=&#34;번역-캐시&#34;&gt;번역 캐시
&lt;/h2&gt;&lt;p&gt;이 점은 단독으로 볼 때, 거대 모델 호출 횟수를 줄이는 것 외에도 실제 로컬에서 12B 모델을 실행하면 효율이 괜찮고 일을 방해하지 않지만, 매번 거대 모델을 호출해야 하면 조금 느려지는 경향이 있습니다. 또한, 기사의 연결을 고정하기 위해 전체 업데이트 작업을 수행할 때 기사 제목이 길면 가끔 두 번의 번역 결과가 달라져서 기사 링크가 바뀌는 경우가 있는데, 이 부분은 상당히 난감합니다.&lt;/p&gt;
&lt;h2 id=&#34;기능-최적화&#34;&gt;기능 최적화
&lt;/h2&gt;&lt;p&gt;전체 프로젝트를 &lt;code&gt;클로드4&lt;/code&gt;에 맡겨서 분석 및 최적화할 여지를 확인했더니 다음과 같은 제안을 받았습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;配置外置化 - 提高可维护性和灵活性
结构化日志 - 便于问题排查和监控
性能监控 - 了解系统运行状况
用户体验 - 进度条等视觉反馈
错误处理 - 更完善的异常处理机制
代码组织 - 更清晰的模块划分
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;코드 검토를 했는데, 모두 문제 없습니다. 예를 들어 설정 파일의 경우, 기존 코드에서 설정을 가져와 기본 설정으로 변환하고, 설정 파일을 읽을 때 해당 설정 파일이 없으면 자동으로 생성되므로 사용자의 실수로 인한 오류를 방지할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;성능-통계-메뉴&#34;&gt;성능 통계 메뉴
&lt;/h3&gt;&lt;p&gt;새로 추가된 &lt;strong&gt;성능 통계 메뉴&lt;/strong&gt;는 제가 직접 디자인했는데, 이렇게 완벽하게 만들 수 있을 줄은 몰랐습니다&lt;/p&gt;
&lt;p&gt;성능 통계:
번역 횟수: 360
⚡ 캐시 히트율: 1.4% (5/365)
평균 번역 시간: 315.927234ms
파일 작업: 73
실패 횟수: 0&lt;/p&gt;
&lt;h3 id=&#34;진행률-표시&#34;&gt;진행률 표시
&lt;/h3&gt;&lt;p&gt;새롭게 추가된 &lt;strong&gt;진도 표시&lt;/strong&gt;는 상세한 진행 상황, 경과 시간, 남은 예상 시간을 보여줍니다&lt;/p&gt;
&lt;p&gt;기능 선택 (0-13): 10
번역 목표를 수집 중입니다…
📄 캐시 파일이 로드되었습니다. 번역 기록은 0개입니다.&lt;/p&gt;
&lt;p&gt;번역 캐시 통계:
🏷️ 태그 총수: 229개
게시된 총 글 수: 131개
✅ 캐시됨: 0개
360개&lt;/p&gt;
&lt;p&gt;전체 번역 캐시를 생성하시겠습니까? (y/n): y
🚀 전체 번역 캐시 생성 중…
📄 캐시 파일이 로드되었습니다. 번역 기록은 0개입니다.
검색 중인 번역을 캐시에서 확인 중입니다…
새 태그 360개를 번역해야 합니다
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - 소요시간: 3초 - 예상 남은 시간: 3분 8초💾 캐시 파일 저장 완료, 번역 기록 5개 포함
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2.8%) - 소요시간: 6초 - 예상 남은 시간: 3분 28초💾 캐시 파일 저장 완료, 번역 기록 10개 포함
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - 소요시간: 9초 - 예상 남은 시간: 3분 30초💾 캐시 파일 저장 완료, 번역 기록 15개 포함
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - 소요시간: 13초 - 예상 남은 시간: 3분 36초💾 캐시 파일 저장 완료, 번역 기록 20개 포함
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - 소요시간: 16초 - 예상 남은 시간: 3분 33초💾 캐시 파일 저장 완료, 번역 기록 25개 포함
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8.3%) - 용량: 19s - 예상 남은 시간: 3분 30초💾 캐시 파일 저장 완료, 번역 기록 30개 포함
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - 용량: 22s - 예상 남은 시간: 3분 25초💾 캐시 파일 저장 완료, 번역 기록 35개 포함&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;=== 博客标签管理工具 ===

📊 数据查看
  1. 标签统计与分析
  2. 分类统计
  3. 无标签文章

🏷️  标签页面管理
  4. 预览标签页面
  5. 生成标签页面

📝 文章Slug管理
  6. 预览文章Slug
  7. 生成文章Slug

💾 缓存管理
  8. 查看缓存状态
  9. 预览全量翻译缓存
 10. 生成全量翻译缓存
 11. 清空翻译缓存

🔧 系统工具
 12. 查看性能统计
 13. 重置性能统计

  0. 退出程序
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;휴고-태그-자동화-관리-도구&#34;&gt;휴고 태그 자동화 관리 도구
&lt;/h1&gt;&lt;p&gt;🚀 Hugo 블로그를 위해 특별히 설계된 스마트 태그 관리 도구입니다. AI 번역, 로컬 캐싱 및 친숙한 인터페이스를 지원합니다.&lt;/p&gt;
&lt;h2 id=&#34;-핵심-특징&#34;&gt;✨ 핵심 특징
&lt;/h2&gt;&lt;h3 id=&#34;-ai-지능-번역&#34;&gt;🤖 AI 지능 번역
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;LM Studio 기반 로컬 AI 모델 번역&lt;/li&gt;
&lt;li&gt;중국어 태그가 SEO 친화적인 영어 슬러그로 자동 변환됩니다&lt;/li&gt;
&lt;li&gt;대량 번역을 지원하여 처리 효율성을 높입니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;스마트-캐시-시스템&#34;&gt;스마트 캐시 시스템
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;로컬 JSON 캐시를 사용하여 중복 번역을 방지합니다&lt;/li&gt;
&lt;li&gt;자동으로 캐시 상태를 감지하여 API 호출을 절약합니다&lt;/li&gt;
&lt;li&gt;캐시 관리 및 삭제 기능을 지원합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;친근한-사용자-인터페이스&#34;&gt;친근한 사용자 인터페이스
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;직관적인 명령줄 메뉴 시스템&lt;/li&gt;
&lt;li&gt;다채로운 출력, 명확하고 읽기 쉬움&lt;/li&gt;
&lt;li&gt;미리보기 기능, 안전하고 믿을 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;데이터-분석-통계&#34;&gt;데이터 분석 통계
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;태그 사용 빈도 분석&lt;/li&gt;
&lt;li&gt;분류 통계 및 시각화&lt;/li&gt;
&lt;li&gt;태그 없는 기사 검사&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;빠른-시작&#34;&gt;빠른 시작
&lt;/h2&gt;&lt;h3 id=&#34;환경-요구사항&#34;&gt;환경 요구사항
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Go 1.21+&lt;/li&gt;
&lt;li&gt;LM Studio (선택 사항, AI 번역용)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;설치-및-실행&#34;&gt;설치 및 실행
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 克隆项目
git clone https://github.com/ttf248/hugo-content-suite.git
cd hugo-content-suite

# 安装依赖
go mod tidy

# 运行工具
go run main.go [content目录路径]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;기본-사용법&#34;&gt;기본 사용법
&lt;/h3&gt;&lt;p&gt;태그 분석: 블로그 태그 사용 통계 확인
각 태그별로 별도의 페이지를 생성합니다
기사 슬러그 관리: 기사 제목으로 SEO 친화적인 URL 생성
번역 캐시 관리: 번역 캐시를 확인하고 관리합니다&lt;/p&gt;
&lt;h2 id=&#34;프로젝트-아키텍처&#34;&gt;프로젝트 아키텍처
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hugo-content-suite/
├── main.go              # 主程序入口
├── models/              # 数据模型
├── scanner/             # 文章扫描解析
├── stats/               # 统计分析
├── translator/          # AI翻译模块
├── generator/           # 内容生成器
├── display/             # 界面显示
└── docs/               # 详细文档
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;-주요-기능&#34;&gt;🎮 주요 기능
&lt;/h2&gt;&lt;h3 id=&#34;태그-관리&#34;&gt;태그 관리
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;태그 통계 분석&lt;/li&gt;
&lt;li&gt;자동 생성 태그 페이지&lt;/li&gt;
&lt;li&gt;일괄 번역 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;문서-관리&#34;&gt;문서 관리
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;📝 슬러그 자동 생성&lt;/li&gt;
&lt;li&gt;기사 내용 분석&lt;/li&gt;
&lt;li&gt;일괄 처리 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;지능형-특징&#34;&gt;지능형 특징
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AI 기반 번역&lt;/li&gt;
&lt;li&gt;지능형 캐시 메커니즘&lt;/li&gt;
&lt;li&gt;정밀 콘텐츠 식별&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;문서-링크&#34;&gt;문서 링크
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;설치 구성 안내서&lt;/li&gt;
&lt;li&gt;기능 사용 설명서&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;docs/api.md&#34; &gt;API 인터페이스 문서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;문제 해결&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;기여-가이드&#34;&gt;기여 가이드
&lt;/h2&gt;&lt;p&gt;이슈 및 풀 리퀘스트 제출을 환영합니다! 자세한 내용은 &lt;a class=&#34;link&#34; href=&#34;docs/contributing.md&#34; &gt;기여 가이드&lt;/a&gt;를 참조하세요&lt;/p&gt;
&lt;h2 id=&#34;허가증&#34;&gt;허가증
&lt;/h2&gt;&lt;p&gt;MIT 라이선스 - 자세한 내용은 &lt;a class=&#34;link&#34; href=&#34;LICENSE&#34; &gt;LICENSE&lt;/a&gt; 파일을 참조하십시오&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이 프로젝트가 도움이 된다면 별을 눌러 지원해주세요!&lt;/p&gt;</description>
        </item>
        <item>
        <title>심심해서 중국 수묵화 스타일 테마를 디자인하고 싶다</title>
        <link>https://ttf248.life/ko/p/chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;다채로운 홈페이지를 너무 많이 봐서, 갑자기 미니멀리즘 스타일로 가고 싶어져서 중국 수묵화 스타일의 테마를 디자인하고 싶어요&lt;/p&gt;
&lt;p&gt;현재 스타일 시트는 각 요소에 맞게 특정 스타일이 적용되어 주제의 기본 스타일을 덮어쓰도록 수정되었습니다&lt;/p&gt;
&lt;p&gt;재구조화 없이 인공지능으로 직접 새로운 테마를 생성하면 결과가 매우 불안정합니다&lt;/p&gt;
&lt;p&gt;우연히 또 trae claude 대기열에 들어가서, vscode 에이전트 모드로 전환했더니 효과가 매우 안 좋고, 수정된 결과물은 아무런 디자인 감각도 없다&lt;/p&gt;
&lt;p&gt;결국, 제가 프론트엔드를 잘 몰라서 AI에게 효과적으로 업무를 분담할 수 없는 탓입니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>데스크탑을 2.5G 네트워크 카드로 업그레이드하여 로컬 영역 네트워크 연결 속도를 높입니다</title>
        <link>https://ttf248.life/ko/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</guid>
        <description>&lt;p&gt;데스크톱 하드웨어 연달아 출시, 앞선 글에서 PCIE 어댑터에 대해 언급했는데, 구형 SSD는 어떻게 됐을까요? 당연히 버려진 건 아니죠. 고장난 것도 아니고, 분해해서 1년 전 구매한 &lt;code&gt;메카니저 크리에이터 미니-3765H&lt;/code&gt;에 설치했습니다.&lt;/p&gt;
&lt;p&gt;새 장비, 하드웨어 사양은 여전히 훌륭합니다. 2.5G 이중 네트워크 포트, PCIE4.0, WiFi6.&lt;/p&gt;
&lt;p&gt;최근 이사한 집에는 개별 라우터가 없어 네트워크 연결이 모두 무선으로 되어 있습니다. 아수스 메인보드 데스크탑의 무선 카드 성능이 좋지 않거나, 라우터의 무선 접속이나 로컬 네트워크 간 업로드 속도 문제일 수도 있는데, 이로 인해 기기 간 속도가 빠르지 않습니다. 새로 2.5G 네트워크 카드를 구매하여 데스크탑에 설치했습니다.&lt;/p&gt;
&lt;p&gt;여기까지, 메인보드의 슬롯이 모두 채워졌습니다: 그래픽 카드, 무선 네트워크 카드, 2.5G 네트워크 카드, SSD PCIE 어댑터&lt;/p&gt;
&lt;h2 id=&#34;네트워크-설명&#34;&gt;네트워크 설명
&lt;/h2&gt;&lt;p&gt;두 대의 기기는 여전히 원래 무선 네트워크 어댑터를 통해 인터넷에 연결되지만, 두 기기 사이는 직접 네트워크 케이블로 연결되어 있으며 양쪽 모두 2.5G 네트워크 어댑터입니다. 두 기기를 네트워크 케이블로 직접 연결하는 방법은 자세히 설명하지 않겠습니다. 온라인에 많은 튜토리얼이 있습니다. 방화벽을 열어두는 것을 잊지 마세요. 원하는 한 대를 게이트웨이로 선택하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[机器1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: - &amp;lt;br&amp;gt;自动获取DNS] --&amp;gt;|网线直连（2.5G）| B[机器2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: 192.168.4.1&amp;lt;br&amp;gt;自动获取DNS];
    A --&amp;gt;|无线网卡| Internet;
    B --&amp;gt;|无线网卡| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;두-네트워크-구간-속도-측정&#34;&gt;두 네트워크 구간 속도 측정
&lt;/h2&gt;&lt;h3 id=&#34;라우터-로컬-네트워크&#34;&gt;라우터 로컬 네트워크
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
Connecting to host 192.168.3.237, port 5201
[  4] local 192.168.3.122 port 1656 connected to 192.168.3.237 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.00   sec  9.17 MBytes  76.7 Mbits/sec
[  4]   1.00-2.00   sec  9.91 MBytes  83.2 Mbits/sec
[  4]   2.00-3.00   sec  8.74 MBytes  73.3 Mbits/sec
[  4]   3.00-4.00   sec  10.2 MBytes  85.2 Mbits/sec
[  4]   4.00-5.00   sec  9.23 MBytes  77.1 Mbits/sec
[  4]   5.00-6.00   sec  8.80 MBytes  73.9 Mbits/sec
[  4]   6.00-7.01   sec  8.00 MBytes  66.8 Mbits/sec
[  4]   7.01-8.00   sec  7.69 MBytes  64.9 Mbits/sec
[  4]   8.00-9.01   sec  9.72 MBytes  81.1 Mbits/sec
[  4]   9.01-10.01  sec  7.63 MBytes  63.6 Mbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  sender
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;직결-로컬-영역-네트워크&#34;&gt;직결 로컬 영역 네트워크
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
Connecting to host 192.168.4.1, port 5201
[  4] local 192.168.4.2 port 1524 connected to 192.168.4.1 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.01   sec   178 MBytes  1.48 Gbits/sec
[  4]   1.01-2.00   sec   204 MBytes  1.72 Gbits/sec
[  4]   2.00-3.00   sec   214 MBytes  1.80 Gbits/sec
[  4]   3.00-4.00   sec   229 MBytes  1.92 Gbits/sec
[  4]   4.00-5.00   sec   202 MBytes  1.69 Gbits/sec
[  4]   5.00-6.00   sec   213 MBytes  1.79 Gbits/sec
[  4]   6.00-7.00   sec   230 MBytes  1.93 Gbits/sec
[  4]   7.00-8.00   sec   192 MBytes  1.61 Gbits/sec
[  4]   8.00-9.00   sec   220 MBytes  1.84 Gbits/sec
[  4]   9.00-10.00  sec   230 MBytes  1.93 Gbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  sender
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Hugo에 mermaid 지원 추가&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Hugo 모듈 커스터마이징 테마 수정 방법: 아이디어 설명</title>
        <link>https://ttf248.life/ko/p/hugo-module-custom-theme-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/hugo-module-custom-theme-ideas/</guid>
        <description>&lt;p&gt;과거 커밋 기록을 살펴보니, 사이트는 여러 번 테마를 변경해 왔습니다. 매번 테마를 변경할 때마다 몇 가지 사용자 정의 수정 사항이 있었고, 여기 그 수정 아이디어를 기록합니다. 제 &lt;code&gt;Github&lt;/code&gt;에도 저장소가 있는데, even 테마를 잠시 유지 관리하다가 강박증 때문에 최신 버전의 &lt;code&gt;hugo&lt;/code&gt; 컴파일러로 업그레이드하고 싶었지만, even 테마와 호환되지 않아 다시 &lt;code&gt;stack&lt;/code&gt; 테마로 전환했습니다.&lt;/p&gt;
&lt;h2 id=&#34;휴고의-모듈화&#34;&gt;휴고의 모듈화
&lt;/h2&gt;&lt;p&gt;모듈화를 언급하면 Nginx 모듈이나 IDEA 플러그인 등이 떠오르는 경우가 많습니다. 보통은 몇몇 모듈을 업로드하여 차별화된 요구사항을 충족할 수 있습니다. 모두가 이러한 모듈을 선호하는 주된 이유는 충분히 유연하기 때문이며, 큰 노력을 들이지 않고도 자체적인 요구사항을 충족할 수 있기 때문입니다. 많은 경우 전체적으로는 비슷하더라도 세부적인 차이가 존재합니다. 이는 기술적 복잡성 외에도 비즈니스 복잡성을 보여주는 것이기도 합니다. 대부분의 경우 우리는 비즈니스 복잡성에 직면하게 됩니다. 이것이 소프트웨어 분야에서 “동업자 간에도 산과 같다는” 속담을 가장 잘 설명하는 것입니다. 요즘은 인터넷 업계뿐만 아니라 금융 업계, 심지어 전통적인 제조업에 이르기까지 정보화 시스템을 활용하여 기업의 생산 및 관리를 돕고 있습니다. 마찬가지로 휴가 신청 시스템이라도 같은 산업 분야라도 서로 다른 회사마다 차이가 있을 수 있습니다.&lt;/p&gt;
&lt;p&gt;그리고 &lt;code&gt;Hugo&lt;/code&gt;의 모듈은 사람들의 일반적인 인식과는 조금 다르게, 기능별로 차별화된 요구를 충족하기 위한 것이 아니라 디렉토리 구조를 중심으로 동일한 구조를 식별합니다&lt;/p&gt;
&lt;p&gt;자료 링크: &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo 아키텍처 — Hugo의 모듈&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;git 서브모듈 방식은 여전히 사용할 수 있지만, 본문에서는 권장하지 않습니다. 테마가 업데이트되면 유지 관리가 복잡해지며, 테마를 별도의 git 저장소로 관리해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;주제의-수정-로직&#34;&gt;주제의 수정 로직
&lt;/h2&gt;&lt;p&gt;앞선 모듈화의 기본 개념을 이해했으면, 사용자 정의 테마를 이해하는 것은 훨씬 쉬워졌습니다. &lt;code&gt;hugo&lt;/code&gt;의 현재 테마도 여러 개의 다른 모듈로 조립된 것이며, 우리는 원하는 모듈을 찾아 해당 템플릿 파일을 수정하면 됩니다.&lt;/p&gt;
&lt;p&gt;스택 공식 문서에서 발췌:&lt;/p&gt;
&lt;p&gt;Using this method, there won&amp;rsquo;t be any file under &lt;code&gt;themes&lt;/code&gt; directory. In order to modify the theme, you will have to copy the file you want to modify to the same directory under &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, in order to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you will have to copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copy the code from theme&amp;rsquo;s repository). The same applies to &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories。&lt;/p&gt;
&lt;h2 id=&#34;템플릿-파일을-어떻게-찾을-수-있나요&#34;&gt;템플릿 파일을 어떻게 찾을 수 있나요?
&lt;/h2&gt;&lt;h3 id=&#34;정통적-사고방식&#34;&gt;정통적 사고방식
&lt;/h3&gt;&lt;p&gt;테마의 소스 파일을 살펴보면서 디자인 아이디를 이해하고, 해당 템플릿 파일을 찾아 수정하면 됩니다&lt;/p&gt;
&lt;h3 id=&#34;거친-사고방식&#34;&gt;거친 사고방식
&lt;/h3&gt;&lt;p&gt;저는 프론트엔드 코드를 잘 모르는 편이라 때로는 직접적인 방법을 사용합니다. 예를 들어 브라우저에서 해당 페이지를 열고, 수정하고 싶은 부분을 찾아 &lt;code&gt;요소 검사&lt;/code&gt; 기능을 통해 &lt;code&gt;CSS 이름&lt;/code&gt;을 찾은 다음, 테마 소스 코드에서 검색하여 해당하는 파일을 찾아서 복사한 후 사이트 디렉토리에 붙여넣고 수정하는 방식입니다.&lt;/p&gt;
&lt;h2 id=&#34;소-팁&#34;&gt;소 팁
&lt;/h2&gt;&lt;p&gt;공식적으로 기본 제공되는 파일로 스타일을 커스터마이징할 수 있으며, 수정해야 할 부분을 여러 파일로 분리하고 &lt;code&gt;custom.scss&lt;/code&gt; 파일에서 다른 파일을 불러와서 사용하면 스타일 파일을 더 효과적으로 관리할 수 있습니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/hugo-module-custom-theme-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;수정-내용-요약6시간&#34;&gt;수정 내용 요약(6시간)
&lt;/h2&gt;&lt;p&gt;이제는 AI 코딩의 원년이라고 할 수 있으며, 자세한 내용은 여기서는 생략하고 간단히 나열하자면, 본 사이트의 수정 내용 몇 가지 예를 들어 복사 버튼 스타일 조정, 코드 블록 스타일 재설정 등이 있는데, ChatGPT로도 쉽게 처리할 수 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전체: 전체 글꼴 스타일은 이전 &lt;code&gt;even&lt;/code&gt;과 &lt;code&gt;info cn&lt;/code&gt;을 결합한 표시 스타일을 유지하며, 중국어 사용자를 위한 친화적인 디자인입니다&lt;/li&gt;
&lt;li&gt;홈페이지: 오른쪽 네비게이션에 마우스 상호작용 애니메이션 추가&lt;/li&gt;
&lt;li&gt;처음 페이지: 기사 요약 미리 보기 (시간이 많이 소요되므로, 편리한 방법을 사용했습니다.)&lt;/li&gt;
&lt;li&gt;스크롤바: 스크롤바 스타일을 다듬었습니다&lt;/li&gt;
&lt;li&gt;코드 블록에 &lt;code&gt;highlight.js&lt;/code&gt; 코드 하이라이트 플러그인이 도입되어 코드 블록 스타일이 개선되었습니다&lt;/li&gt;
&lt;li&gt;내용 상세: 일부 내용은 재게시되었으며, 원저자 정보 표시 및 원본 링크 표시가 추가되었습니다&lt;/li&gt;
&lt;li&gt;아카이브 페이지: 상단의 카테고리 이미지, 테마 자체 색상 오버레이 제거, 원본 이미지 표시&lt;/li&gt;
&lt;li&gt;파일 페이지: 연도별 분류 통계 표시 패널이 추가되었습니다&lt;/li&gt;
&lt;li&gt;아카이브 페이지: 두 열 레이아웃 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스택 테마의 컴포넌트 재사용성이 매우 높아, 홈페이지에 새 글 요약 미리 보기 기능을 추가하는 데 상당한 시간이 소요되었습니다. 관련 컴포넌트를 수정했더니, 게시글 상세 페이지에서도 내용이 중복되어 표시되는 문제가 발생했습니다. &lt;code&gt;golang 템플릿&lt;/code&gt; 문법에도 익숙하지 않아 더 많은 시간을 소비했고, 컴포넌트 간의 파라미터 전달은 끝내 해결하지 못했습니다. 결국, 트릭을 사용하여 홈페이지에 별도의 &lt;code&gt;JavaScript&lt;/code&gt; 스크립트를 도입하고, 사용자 정의 특수 변수를 통해 요약 미리 보기 기능을 구현했습니다.&lt;/p&gt;
&lt;p&gt;때로는 코드 재사용률이 너무 높아서 문제가 될 수도 있는데, 한 부분을 수정하면 다른 부분에도 영향을 미치기 때문에 테마를 수정할 때는 기존 로직을 훼손하지 않도록 주의해야 합니다&lt;/p&gt;
&lt;h3 id=&#34;댓글-영역&#34;&gt;댓글 영역
&lt;/h3&gt;&lt;p&gt;이 친구의 수정은 더욱 완벽해졌습니다: &lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 사이트는 간단하게 &lt;code&gt;Waline&lt;/code&gt; 댓글 시스템을 적용했으며, &lt;code&gt;stack&lt;/code&gt; 테마는 기본적으로 &lt;code&gt;Waline&lt;/code&gt;을 지원하므로 &lt;code&gt;config.toml&lt;/code&gt;에서 설정하면 됩니다&lt;/p&gt;
&lt;p&gt;추천 홈페이지, 이메일 연락처. 본 사이트는 댓글 기능을 제공하지 않습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>리눅스 시스템 벤치마크 테스트</title>
        <link>https://ttf248.life/ko/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;윈도우 플랫폼에는 루마스터(유희 마스터)라는 프로그램이 있는데, 데이터가 아주 정확하다고는 할 수 없지만 대략적인 참고 자료로 쓸 수는 있습니다. 물론 다른 전문 벤치마크 소프트웨어도 있고, 리눅스 시스템에서는 특별히 적합한 벤치마크 프로그램을 아직 못 찾았습니다.&lt;/p&gt;
&lt;p&gt;Sysbench는 CPU, 메모리, 파일 I/O, 스레드 성능 등을 테스트할 수 있는 다목적 벤치마크 도구입니다. 다양한 성능 테스트 작업을 수행하기 위해 Sysbench를 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;손에 있는 테스트용 장비가 세 대 있는데, 메커니컬 미니 로컬 호스트, 알리바바 클라우드 개발 클라우드 서버, 화웨이 클라우드 개발 서버가 있습니다&lt;/p&gt;
&lt;h2 id=&#34;sysbench-설치&#34;&gt;Sysbench 설치
&lt;/h2&gt;&lt;p&gt;대부분의 Linux 배포판에서 패키지 관리 도구를 사용하여 Sysbench를 설치할 수 있습니다. 예를 들어 CentOS 8에서는 다음 명령어를 사용하여 설치할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbench-사용-예시&#34;&gt;Sysbench 사용 예시
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU 성능 테스트: &lt;code&gt;sysbench --test=cpu run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;메모리 읽기 성능 테스트: &lt;code&gt;sysbench --test=memory run&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;테스트 파일 I/O 성능:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;멀티 스레드 성능 테스트: &lt;code&gt;sysbench --test=threads --num-threads=4 실행&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MySQL 데이터베이스 성능 테스트(데이터베이스 최대 연결 수 조정 필요):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;분포-데이터-보고서&#34;&gt;분포 데이터 보고서
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34; style=&#34;width:421px;&#34; class=&#34;column-headers-background&#34;&gt;B&lt;/th&gt;&lt;th id=&#34;0C2&#34; style=&#34;width:398px;&#34; class=&#34;column-headers-background&#34;&gt;C&lt;/th&gt;&lt;th id=&#34;0C3&#34; style=&#34;width:422px;&#34; class=&#34;column-headers-background&#34;&gt;D&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R0&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;本地机械师&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;华为云&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;系统配置&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 23.04&lt;br&gt;  Kernel                        Linux 6.2.0-36-generic x86_64&lt;br&gt;  Model                         Machenike Machenike DT Computer&lt;br&gt;  Motherboard                   Machenike Machenike DT Computer&lt;br&gt;  BIOS                          American Megatrends International, LLC.&lt;br&gt;DB19V012&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel Core i7-12650H&lt;br&gt;  Topology                      1 Processor, 10 Cores, 16 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 154 Stepping 3&lt;br&gt;  Base Frequency                4.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB x 8&lt;br&gt;  L1 Data Cache                 48.0 KB x 8&lt;br&gt;  L2 Cache                      1.25 MB x 2&lt;br&gt;  L3 Cache                      24.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          62.6 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              CentOS Stream 8&lt;br&gt;  Kernel                        Linux 4.18.0-513.el8.x86_64 x86_64&lt;br&gt;  Model                         Alibaba Cloud Alibaba Cloud ECS&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS 449e491&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Platinum&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 4&lt;br&gt;  Base Frequency                2.50 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      33.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          1.65 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 22.04.1 LTS&lt;br&gt;  Kernel                        Linux 5.15.0-60-generic x86_64&lt;br&gt;  Model                         OpenStack Foundation OpenStack Nova&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS&lt;br&gt;rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Gold 6278C CPU @ 2.60GHz&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 7&lt;br&gt;  Base Frequency                2.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      35.8 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          3.64 GB&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R2&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;3&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;CPU&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  4032.48&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              40330&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.25&lt;br&gt;         avg:                                    0.25&lt;br&gt;         max:                                    0.73&lt;br&gt;         95th percentile:                        0.25&lt;br&gt;         sum:                                 9997.55&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           40330.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9975/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1062.51&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0008s&lt;br&gt;    total number of events:              10628&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.91&lt;br&gt;         avg:                                    0.94&lt;br&gt;         max:                                   22.84&lt;br&gt;         95th percentile:                        1.06&lt;br&gt;         sum:                                 9993.46&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           10628.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9935/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1125.56&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0005s&lt;br&gt;    total number of events:              11258&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.86&lt;br&gt;         avg:                                    0.89&lt;br&gt;         max:                                    1.70&lt;br&gt;         95th percentile:                        0.99&lt;br&gt;         sum:                                 9995.40&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           11258.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9954/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R3&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;4&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;内存&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 101993199 (10198146.52 per second)&lt;br&gt;&lt;br&gt;99602.73 MiB transferred (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              101993199&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.03&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4059.50&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           101993199.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.0595/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 48418803 (4841004.79 per second)&lt;br&gt;&lt;br&gt;47283.99 MiB transferred (4727.54 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              48418803&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                   25.26&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4578.95&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           48418803.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 57056904 (5704765.11 per second)&lt;br&gt;&lt;br&gt;55719.63 MiB transferred (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              57056904&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.06&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4556.06&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           57056904.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5561/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R4&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;5&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;硬盘&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 1.81 seconds (1129.59 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      3373.41&lt;br&gt;    writes/s:                     2248.94&lt;br&gt;    fsyncs/s:                     7201.80&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:               35.14&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0127s&lt;br&gt;    total number of events:              128288&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.08&lt;br&gt;         max:                                    5.14&lt;br&gt;         95th percentile:                        0.34&lt;br&gt;         sum:                                 9977.78&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           128288.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9778/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 19.29 seconds (106.16 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1593.12&lt;br&gt;    writes/s:                     1062.08&lt;br&gt;    fsyncs/s:                     3406.64&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  24.89&lt;br&gt;    written, MiB/s:               16.60&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0164s&lt;br&gt;    total number of events:              60600&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                   31.32&lt;br&gt;         95th percentile:                        0.54&lt;br&gt;         sum:                                 9956.30&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           60600.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9563/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 18.29 seconds (111.98 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1665.88&lt;br&gt;    writes/s:                     1110.59&lt;br&gt;    fsyncs/s:                     3563.77&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  26.03&lt;br&gt;    written, MiB/s:               17.35&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0112s&lt;br&gt;    total number of events:              63355&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                  205.01&lt;br&gt;         95th percentile:                        0.78&lt;br&gt;         sum:                                 9972.64&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           63355.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9726/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R5&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;多线程&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0002s&lt;br&gt;    total number of events:              197956&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.16&lt;br&gt;         avg:                                    0.20&lt;br&gt;         max:                                    0.34&lt;br&gt;         95th percentile:                        0.21&lt;br&gt;         sum:                                39970.47&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           49489.0000/5.70&lt;br&gt;    execution time (avg/stddev):   9.9926/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0174s&lt;br&gt;    total number of events:              18360&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:                                   32.77&lt;br&gt;         95th percentile:                        2.61&lt;br&gt;         sum:                                40050.41&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           4590.0000/94.36&lt;br&gt;    execution time (avg/stddev):   10.0126/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              28536&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.23&lt;br&gt;         avg:                                    1.40&lt;br&gt;         max:                                    3.56&lt;br&gt;         95th percentile:                        1.47&lt;br&gt;         sum:                                39975.16&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           7134.0000/39.87&lt;br&gt;    execution time (avg/stddev):   9.9938/0.01&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;ChatGPT는 여전히 좋은 도구입니다. 위에 있는 표는 이전에 익숙했던 Markdown으로는 완전히 구성할 수 없으며, 표로 만들지 않으면 표시 효과가 매우 좋지 않습니다. 사용자 지정 테마는 페이지 최대 너비를 제한하며, 페이지 설정도 변경하여 너비를 백분율 제한으로 조정했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;간단한 방법은 TablesGenerator와 같은 온라인 도구를 사용하여 HTML 테이블을 생성하는 것입니다(내용이 복잡하면 적합하지 않음)&lt;/li&gt;
&lt;li&gt;또는 구글 온라인 문서로 작성한 후 HTML 문서로 다운로드하여 저장하고, 블로그에 바로 복사하는 방법(간단하고 직접적이며, 최종적으로 이 방법을 사용했습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;config 설정에서 unsafe 옵션이 활성화되어 있는지 확인하고, 페이지별로 너비를 개별적으로 지정하세요&lt;/p&gt;
&lt;p&gt;Hugo에서 페이지별로 너비를 설정할 수 있습니다. 이는 페이지의 프론트 매터에 사용자 지정 파라미터를 추가하여 구현할 수 있습니다. 다음은 예시입니다.&lt;/p&gt;
&lt;p&gt;마크다운 페이지의 프론트 매터 부분(일반적으로 파일의 시작 부분)에 사용자 지정 파라미터, 예를 들어 &lt;code&gt;custom_width&lt;/code&gt;를 추가하세요&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;我的页面&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 设置宽度为 800 像素
---

正文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;귀하의 Hugo 테마에서 해당 단일 페이지 템플릿 파일(예: &lt;code&gt;layouts/_default/single.html&lt;/code&gt;)을 찾거나 생성하십시오&lt;/p&gt;
&lt;p&gt;단일 페이지 템플릿에서, 페이지의 프론트 매터에 &lt;code&gt;custom_width&lt;/code&gt; 파라미터가 있는지 확인하고, 해당 HTML 요소(예: &lt;code&gt;div&lt;/code&gt;)에 적용합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 예제에서는 &lt;code&gt;style&lt;/code&gt; 속성을 사용하여 &lt;code&gt;div&lt;/code&gt; 요소에 &lt;code&gt;max-width&lt;/code&gt; 속성을 설정하여 &lt;code&gt;custom_width&lt;/code&gt; 매개변수를 지정하지 않을 때 너비를 기본적으로 100%로 만듭니다. &lt;code&gt;margin: 0 auto;&lt;/code&gt;는 &lt;code&gt;div&lt;/code&gt; 요소를 가운데 정렬하는 데 사용됩니다.&lt;/p&gt;
&lt;p&gt;실제 적용 시에는 위 예시를 주제 구조와 CSS 스타일의 세부 사항에 따라 조정해야 할 수 있습니다. 스타일을 조정할 때는 주제의 일관성과 가독성을 유지하는 것이 중요합니다.&lt;/p&gt;
&lt;p&gt;활성화된 테마가 약간 달라서 사이트 사용자 정의 &lt;code&gt;CSS&lt;/code&gt; 설정을 최종적으로 조정했습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>블로그 IDE 환경과 잡담</title>
        <link>https://ttf248.life/ko/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;이 글은 마크다운의 기본 개념과 다양한 소프트웨어에서의 활용을 소개하고, VSCode를 IDE로 추천하며 관련 플러그인 목록을 제시합니다. 저자는 Hexo에서 Hugo로 전환한 경험을 공유하며 Hugo의 유연성과 사용자 정의 기능을 강조합니다. 마지막으로 새로운 기술을 빠르게 시작하기 위한 몇 가지 팁과 함께 Hugo 테마 스타일이 업데이트되지 않는 문제를 해결하는 작은 팁을 공유합니다.&lt;/p&gt;
&lt;h2 id=&#34;서론&#34;&gt;서론
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;가볍고 사람이 읽기 쉽고 쓰기 쉬운 순수 텍스트 형식으로 문서를 작성할 수 있게 해주는 경량 마크업 언어입니다&lt;/p&gt;
&lt;p&gt;자세한 Markdown 문법에 대한 설명은 이 글에서는 생략하며, 전자책을 참고하시기를 추천합니다. &lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기에 클릭&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;시판되는 많은 소프트웨어들은 이미 md를 작성 방식으로 지원하고 있습니다. csdn 블로그 시스템은 md 문법을 지원하는 온라인 편집기를 출시했는데, 처음 사용할 때 md 문법에 대한 소개 글이 기본적으로 제공되며, 필자는 괜찮다고 생각합니다. 에버노트(印象笔记)는 2018년에 md 노트 지원을 추가했으며, 단축키 바에 다양한 md 마크업 옵션이 있어 일반적인 문서 편집과 거의 비슷하며, 전반적인 인터랙션 흐름은 초보자에게 친숙합니다.&lt;/p&gt;
&lt;h3 id=&#34;ide-추천&#34;&gt;IDE 추천
&lt;/h3&gt;&lt;p&gt;이 글을 작성할 당시에는 이미 2020년이었고, vscode는 필연적으로 들어봤을 것이다. 결국 git page를 사용하여 블로그 시스템을 구축한다고 생각하는 사람은 업계 관계자일 테니까. 과거에는 sublime이나 atom도 괜찮은 선택이었지만, 2년간의 오픈소스 커뮤니티의 노력으로 vscode가 빠르게 발전하여 점차 초보자들이 입문하기에 가장 좋은 선택이 되었다.&lt;/p&gt;
&lt;p&gt;마이크로소프트의 거대 기업과 오픈소스 커뮤니티 관계가 단절된 상태에서 성공적으로 신혼기 시대로 전환되었습니다. 오픈 소스를 포용하고, 필자가 속한 회사 역시 최근 2년간 적극적으로 Java 생태계를 도입했습니다. 바꿔 말하면 현재 국내 비즈니스 개발에 있어 Java 생태계는 정말 매력적입니다.&lt;/p&gt;
&lt;h3 id=&#34;vs-code-플러그인-추천&#34;&gt;VS Code 플러그인 추천
&lt;/h3&gt;&lt;p&gt;플러그인 목록&lt;/p&gt;
&lt;p&gt;플러그인에는 자체 Readme 파일이 있어 기본적인 사용법과 핵심 기능을 설명하고 있으며, 일부 플러그인 제작자는 동적 효과 시연 이미지도 제공합니다&lt;/p&gt;
&lt;p&gt;이미지를 붙여넣기 하면 Hugo의 이미지 플러그인 방식으로 매우 편리하게 이미지를 추가할 수 있습니다&lt;/p&gt;
&lt;p&gt;단축키를 기억하지 못해서, vscode 단축키 관리 메뉴를 열고 md를 검색하고 여러 번 보고; 플러그인 사용 설명서를 다시 확인해 봐&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;hugo
&lt;/h2&gt;&lt;p&gt;저는 &lt;code&gt;hexo&lt;/code&gt;에서 &lt;code&gt;hugo&lt;/code&gt;로 전환했는데, 잦은 변덕을 피우는 것이 제 본성이고 결국 차분히 글을 쓰는 것을 참지 못하고 말았습니다&lt;/p&gt;
&lt;p&gt;휴고는 이미지를 별도의 폴더에 배치하고 md 문서를 지원합니다
학문적 주제는 디자인에서 다양한 종류의 문서 스타일을 지원합니다
다양한 편리한 사용자 지정 확장 기능&lt;/p&gt;
&lt;h2 id=&#34;academic&#34;&gt;academic
&lt;/h2&gt;&lt;p&gt;공식 웹사이트는 기본적으로 &lt;code&gt;exampleSite&lt;/code&gt;를 사용하며, 메뉴 도입 시 &lt;code&gt;#컴포넌트&lt;/code&gt; 방식을 채택하고 &lt;code&gt;URL&lt;/code&gt;을 사용하는 것을 권장합니다&lt;/p&gt;
&lt;p&gt;URL 패턴은 클릭하면 단일 페이지로 이동하고, 홈페이지에서 스크롤하는 방식이 아니라서 개인적인 취향입니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스타일별: 에세이, 강연, 전자책&lt;/li&gt;
&lt;li&gt;유연성: 전체 스타일 사용자 정의, CSS 스타일 사용자 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 테마는 중국어 지원이 아직 완벽하지 않은데, 주로 시각적인 측면에서 폰트 크기가 중국어 읽기 습관에 잘 맞지 않습니다. Hexo 개발자 대다수가 중국인이므로 이 점에서는 Hugo보다 우수합니다.&lt;/p&gt;
&lt;p&gt;하지만, 직접 옷을 만들어 먹고, 브라우저에서 요소들을 검사합니다. 요소를 찾았으면 수정해야 할 CSS 스타일 이름이 궁금할 때 사이드바에서 &lt;strong&gt;Insert Style Rule Below&lt;/strong&gt;를 클릭하면 여러 계층으로 중첩된 CSS라도 쉽게 노드 이름을 가져올 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;custom.css 도입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/#add-scripts-js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;사용자 지정 &lt;strong&gt;custom_js&lt;/strong&gt; 도입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;테마 내장 문법 강조 설정, &lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;공식 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리
&lt;/h2&gt;&lt;p&gt;애가 또 뭐라 하려고 하는군, 어떻게 처음부터 끝까지 얼버무려 얘기하고 세부사항 같은 건 하나도 안 짚어주는 거야?&lt;/p&gt;
&lt;p&gt;이것들이 있으면 충분할 거예요:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식 매뉴얼&lt;/li&gt;
&lt;li&gt;플러그인 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 기술을 빠르게 시작하려면 먼저 공식 문서를 읽어보는 것이 좋습니다. 완벽하게 이해하려고 애쓰기보다는 대략적인 내용을 파악하는 데 집중하고, 검색 엔진에서 나오는 결과는 최신 버전과 일치하지 않을 수 있으므로 오해를 불러일으킬 수도 있습니다. 새 책도 마찬가지입니다. 목차를 먼저 보고 저자가 무엇을 이야기하려는지 파악하세요. 때로는 서문을 읽는 것이 좋습니다. 일부 외국 저작물이 중국어로 번역될 때, 번역자의 서문은 책의 핵심 내용과 상당 부분을 포함하고 있는 경우가 많습니다.&lt;/p&gt;
&lt;h2 id=&#34;이스터-에그&#34;&gt;이스터 에그
&lt;/h2&gt;&lt;p&gt;Hugo Academic 내장 스타일 스타일을 변경하고 사이트에 게시했지만, 방문 시 스타일이 변하지 않았습니다. 똑똑한 분들은 이미 생각했을 겁니다. 로컬 브라우저 캐시를 지우면 문제가 해결됩니다. 저처럼 영리한 방법은 F12 개발자 모드로 전환하여 &lt;code&gt;network&lt;/code&gt;로 이동한 다음 &lt;code&gt;disable cache&lt;/code&gt;를 선택하고 새로 고침하면 됩니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
