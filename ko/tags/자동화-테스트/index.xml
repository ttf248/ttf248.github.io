<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>자동화 테스트 on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/%EC%9E%90%EB%8F%99%ED%99%94-%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
        <description>Recent content in 자동화 테스트 on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/%EC%9E%90%EB%8F%99%ED%99%94-%ED%85%8C%EC%8A%A4%ED%8A%B8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>자동화 테스트에 대한 간략한 고찰</title>
        <link>https://ttf248.life/ko/p/shallow-discussion-on-automation-testing/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/shallow-discussion-on-automation-testing/</guid>
        <description>&lt;p&gt;금융 거래 시스템 테스트에 대한 투자는 다른 시스템보다 훨씬 많지만, 복잡한 테스트 단계가 반복되고, __INLINE_CODE_0__은 너무 낮습니다. 프로젝트 및 인력 교체로 인해 피할 수 없는 변수가 발생하고, 흔히 A 인터페이스의 특정 필드를 수정하면 B 인터페이스 결과에 영향을 미치는 경우가 발생합니다. 버전 출시 때마다 위험이 누적됩니다.&lt;/p&gt;
&lt;h2 id=&#34;이론적-지식&#34;&gt;이론적 지식
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如何衡量自动化的价值？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자동화 테스트 사례 ROI = (수동 실행 시간) * (실행 횟수) / (개발 비용 + 유지 보수 비용)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;哪些功能需要做自动化测试？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사용자가 자주 사용하는 기능, 자주 변경되지 않는 기능에 대한 자동화 테스트 코드를 작성하는 것이 가장 효과적입니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为什么选择这个时间点推动自动化测试？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로젝트 출시 임박 시점이 아니라 지금이 가장 적절합니다. 장거리 물은 당장의 갈증을 해소하지 못하고, 자동화는 장기적인 효과 모델입니다. 프로젝트가 &lt;strong&gt;生产环境&lt;/strong&gt;에 이미 출시되었고 안정적인 배포 주기를 맞이하고 있으므로, 지금이 가장 적합합니다.&lt;/p&gt;
&lt;h2 id=&#34;프레임-선택&#34;&gt;프레임 선택
&lt;/h2&gt;&lt;p&gt;관련 경험이 부족한 상태에서 자동화 테스트라는 업무를 맡았으니, 일반적인 시작은 다음과 같다: 검색 엔진을 열어 현재 시스템에 적용 가능한 도구와 프레임워크를 찾아 사용 설명서를 훑어보고 작업을 시작한다. 바로 적합한 도구를 찾았다면 축하한다, &lt;strong&gt;完美开局&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;먼저 잘못했다고 말씀드립니다. 관련 자료를 확인해 보니 없다는 게 아니라 프레임워크 자체가 너무 복잡하고, 배포에 필요한 리소스도 과도합니다. 초보자 입문에는 작고 간결한 것이 필요하며, 테스트팀 동료들과 상의 결과 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 자체 프레임워크를 구축하는 것이 좋다는 의견이 나왔습니다. 간단히 말해 기존 유닛 테스트 프레임워크를 활용하여 자동화 테스트 프레임워크로 묶는 방식입니다.&lt;/p&gt;
&lt;p&gt;참고할 프로젝트 디자인 아이디어: &lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;프레임워크가-왜-필요할까요&#34;&gt;프레임워크가 왜 필요할까요?
&lt;/h2&gt;&lt;p&gt;서비스는 개발 환경, 테스트 환경, 온라인 테스트 환경 등 다양한 배포 환경을 가지고 있으며, 프레임워크는 계층 분리 및 테스트 케이스와 데이터 분리에 역할을 합니다. 각 환경에 맞는 사례 데이터를 구성하고 공통 데이터도 지원합니다.&lt;/p&gt;
&lt;p&gt;핵심적인 논리는 자동화 활용률을 높이기 위한 것이다. 시나리오가 더 복잡해지고, 환경별 데이터가 서로 다르고 관련이 없다면, 설정 사례 데이터를 추가할 때 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 태그를 사용하여 현재 데이터가 지원하는 환경을 지정하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
