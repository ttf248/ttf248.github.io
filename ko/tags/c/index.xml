<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C# on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/c/</link>
        <description>Recent content in C# on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/c/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>WPF UI 스레드와 멈춤 문제 및 해결책</title>
        <link>https://ttf248.life/ko/p/wpf-ui-thread-and-freezing-issues-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/wpf-ui-thread-and-freezing-issues-solutions/</guid>
        <description>&lt;p&gt;데스크톱 애플리케이션을 개발할 때, 특히 Windows Presentation Foundation (WPF) 프레임워크를 사용하여 리치 클라이언트 앱을 구축할 때는 UI 스레드를 올바르게 처리하는 것이 애플리케이션의 원활성과 응답성을 보장하는 데 매우 중요합니다. UI 스레드, 또는 메인 스레드는 창 및 컨트롤 이벤트 처리, 레이아웃 계산, 그리고 인터페이스 렌더링을 담당하는 핵심 스레드입니다. UI 요소와의 모든 상호 작용은 UI 스레드에서 실행되어야 하며, 이는 WPF를 비롯한 대부분의 GUI 프레임워크가 따르는 기본 원칙입니다.&lt;/p&gt;
&lt;h2 id=&#34;ui-스레드가-무엇인가요&#34;&gt;UI 스레드가 무엇인가요?
&lt;/h2&gt;&lt;p&gt;WPF 애플리케이션 시작 시 UI 스레드는 운영체제에 의해 생성되고 애플리케이션 주 창을 초기화합니다. 이 스레드만이 직접적으로 UI 구성 요소를 액세스하고 수정할 수 있으며, 버튼 클릭, 텍스트 상자 입력, 창 크기 변경 등 모든 사용자 인터랙션 이벤트는 이 스레드 컨텍스트 내에서 처리됩니다. 또한 WPF의 종속 속성 시스템, 데이터 바인딩 메커니즘 및 레이아웃 로직도 UI 스레드 위에서 동기적으로 실행됩니다.&lt;/p&gt;
&lt;h2 id=&#34;끊김-현상-및-원인&#34;&gt;끊김 현상 및 원인
&lt;/h2&gt;&lt;p&gt;UI 스레드가 장시간 점유되거나 차단될 때, 예를 들어 시간이 오래 걸리는 계산, 대량 데이터 로딩, 데이터베이스 쿼리 또는 기타 I/O 집약적인 작업을 수행할 경우 사용자 상호 작용 요청에 즉시 응답하지 못하여 화면이 응답하지 않는 것처럼 보이는 &amp;ldquo;멈춤&amp;rdquo; 현상이 발생합니다. 이 경우 사용자는 앱의 지연과 끊김을 느끼며 심각한 경우 &amp;ldquo;응답 없음(ANR)&amp;rdquo; 경고가 표시될 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;ui-스레드의-두-가지-기본-규칙&#34;&gt;UI 스레드의 두 가지 기본 규칙
&lt;/h2&gt;&lt;p&gt;위와 같은 상황을 피하기 위해, WPF 개발자는 다음 두 가지 주요 규칙을 준수해야 합니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UI 스레드가 사용자 입력에 즉시 대응하고 화면 렌더링을 처리할 수 있도록, UI 스레드를 일시 중단할 수 있는 작업은 가능한 한 백그라운드 스레드로 옮겨야 합니다&lt;/li&gt;
&lt;li&gt;WPF의 보안 메커니즘 설계상 UI 스레드만이 UI 요소를 수정할 권한을 가지고 있습니다. 다른 스레드에서 직접 UI 상태를 변경하려고 하면 예외가 발생합니다. 따라서 백그라운드 스레드에서 계산이나 데이터 준비가 완료되더라도 적절한 크로스 스레드 통신 메커니즘을 통해 결과를 UI에 표시해야 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;비동기-프로그래밍-및-스레드-안전-업데이트&#34;&gt;비동기 프로그래밍 및 스레드 안전 업데이트
&lt;/h2&gt;&lt;p&gt;UI의 응답성을 유지하면서도 시간이 오래 걸리는 작업을 수행하기 위해, WPF는 개발자가 이 목표를 달성하도록 돕기 위한 다양한 비동기 프로그래밍 모델과 도구를 제공합니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WPF의 Dispatcher 클래스는 작업 항목을 UI 스레드의 작업 큐에 배치하여 실행할 수 있습니다. __INLINE_CODE_0BOLD_3&lt;code&gt;Dispatcher.BeginInvoke&lt;/code&gt; 메서드를 사용하여 백그라운드 스레드에서 안전하게 UI를 업데이트할 수 있습니다.&lt;/li&gt;
&lt;li&gt;C# 언어의 비동기 기능을 활용하면 비동기 메서드를 작성하고 그 안에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 키워드를 사용하여 백그라운드 작업 완료를 기다린 후, 완료되면 자동으로 UI 스레드에서 후속 UI 업데이트 코드를 실행할 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;사례&#34;&gt;사례
&lt;/h2&gt;&lt;h3 id=&#34;__inline_code_0__-방법을-사용하여-ui를-업데이트합니다&#34;&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 방법을 사용하여 UI를 업데이트합니다
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // 假设这是一个耗时操作
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // 这里是模拟一个耗时计算的方法
        
        // 当耗时操作完成后，在UI线程上更新UI
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 模拟耗时操作
    Thread.Sleep(5000);
    return &amp;quot;已完成&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;사용-asyncawaitbold_2taskrun&#34;&gt;사용 &lt;code&gt;async/await&lt;/code&gt;BOLD_2&lt;code&gt;Task.Run&lt;/code&gt;
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // 防止用户重复点击

    try
    {
        // 开启后台任务
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // 在后台任务完成后，自动切换回UI线程更新UI
        LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;发生错误: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // 重新启用按钮
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
    </channel>
</rss>
