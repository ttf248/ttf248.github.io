<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Wpf on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/wpf/</link>
        <description>Recent content in Wpf on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/wpf/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>WPF UI 스레드와 멈춤 문제 및 해결 방법</title>
        <link>https://ttf248.life/ko/p/wpf-ui-thread-and-freezing-issues-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/wpf-ui-thread-and-freezing-issues-solutions/</guid>
        <description>&lt;p&gt;데스크톱 애플리케이션을 개발할 때, 특히 Windows Presentation Foundation(WPF) 프레임워크를 사용하여 리치 클라이언트 애플리케이션을 구축할 때는 애플리케이션의 원활성과 응답성을 보장하기 위해 사용자 인터페이스(UI) 스레드를 올바르게 처리하는 것이 매우 중요합니다. UI 스레드, 또는 메인 스레드는 창과 컨트롤 이벤트 처리, 레이아웃 계산 및 인터페이스 렌더링을 담당하는 핵심 스레드입니다. UI 요소와의 모든 상호 작용은 UI 스레드에서 실행되어야 하며, 이는 WPF는 물론 다른 대부분의 GUI 프레임워크가 따르는 기본 원칙입니다.&lt;/p&gt;
&lt;h2 id=&#34;ui-스레드가-무엇인가요&#34;&gt;UI 스레드가 무엇인가요?
&lt;/h2&gt;&lt;p&gt;WPF 애플리케이션 시작 시 UI 스레드는 운영체제에 의해 생성되고 애플리케이션의 주 창을 초기화합니다. 이는 애플리케이션 내에서 UI 구성 요소의 상태를 직접적으로 액세스하고 수정할 수 있는 유일한 스레드입니다. 즉, 버튼 클릭, 텍스트 상자 입력, 창 크기 변경과 같은 모든 사용자 상호 작용으로 발생하는 이벤트는 이 스레드 컨텍스트 내에서 처리됩니다. 동시에 WPF의 종속 속성 시스템, 데이터 바인딩 메커니즘 및 레이아웃 로직도 UI 스레드 위에서 동기적으로 실행됩니다.&lt;/p&gt;
&lt;h2 id=&#34;끊김-현상-및-원인&#34;&gt;끊김 현상 및 원인
&lt;/h2&gt;&lt;p&gt;UI 스레드가 장시간 점유되거나 차단될 때, 예를 들어 시간이 오래 걸리는 계산, 대량 데이터 로딩, 데이터베이스 쿼리 또는 기타 I/O 집약적인 작업을 수행할 때 발생합니다. 이로 인해 UI 스레드가 사용자 상호 작용 요청에 즉시 응답하지 못하고, 결과적으로 화면이 응답하지 않는(Freeze) 현상이 나타납니다. 흔히 “카통”이라고 불리는 이것은 사용자가 앱의 지연과 끊김을 명확하게 느낄 수 있으며, 심할 경우 &amp;ldquo;Application Not Responding&amp;rdquo;(ANR) 경고가 발생할 수도 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;ui-스레드의-두-가지-기본-규칙&#34;&gt;UI 스레드의 두 가지 기본 규칙
&lt;/h2&gt;&lt;p&gt;위와 같은 상황을 방지하기 위해 WPF 개발자는 다음 두 가지 주요 규칙을 준수해야 합니다&lt;/p&gt;
&lt;p&gt;UI 스레드에서 시간이 오래 걸리는 작업을 수행하지 마세요. UI 스레드를 멈추게 할 수 있는 작업은 가능한 한 백그라운드 스레드로 옮겨서 사용자 입력에 즉시 응답하고 화면 변경을 렌더링할 수 있도록 해야 합니다.
UI 스레드에서 직접 UI 요소를 업데이트하지 마세요. WPF의 보안 메커니즘 설계상, UI 요소 수정은 UI 스레드만 권한이 있습니다. 다른 스레드에서 직접 UI 상태를 변경하려고 하면 예외가 발생합니다. 따라서 백그라운드 스레드에서 계산이나 데이터 준비가 완료되더라도 적절한 크로스 스레드 통신 메커니즘을 통해 결과를 UI에 표시해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;비동기-프로그래밍-및-스레드-안전-업데이트-솔루션&#34;&gt;비동기 프로그래밍 및 스레드 안전 업데이트 솔루션
&lt;/h2&gt;&lt;p&gt;UI의 응답성을 유지하면서도 시간이 오래 걸리는 작업을 수행하기 위해 WPF는 개발자가 이 목표를 달성하도록 돕기 위한 다양한 비동기 프로그래밍 모델과 도구를 제공합니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;디스패처 객체: WPF의 디스패처 클래스는 작업 항목을 UI 스레드의 작업 큐에 배치하여 실행할 수 있습니다. &lt;code&gt;Dispatcher.Invoke&lt;/code&gt; 또는 &lt;code&gt;Dispatcher.BeginInvoke&lt;/code&gt; 메서드를 사용하여 백그라운드 스레드에서 안전하게 UI를 업데이트할 수 있습니다.&lt;/li&gt;
&lt;li&gt;C# 언어의 비동기 기능을 활용하면 &lt;code&gt;await&lt;/code&gt; 키워드를 사용하여 백그라운드 작업 완료를 기다리고, 완료 후 자동으로 UI 스레드로 돌아와서 이후 UI 업데이트 코드를 실행할 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;사례&#34;&gt;사례
&lt;/h2&gt;&lt;h3 id=&#34;ui를-업데이트하려면-dispatcherinvoke-메서드를-사용하세요&#34;&gt;UI를 업데이트하려면 &lt;code&gt;Dispatcher.Invoke&lt;/code&gt; 메서드를 사용하세요
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // 假设这是一个耗时操作
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // 这里是模拟一个耗时计算的方法
        
        // 当耗时操作完成后，在UI线程上更新UI
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 模拟耗时操作
    Thread.Sleep(5000);
    return &amp;quot;已完成&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;asyncawait-키워드와-taskrun을-함께-사용하세요&#34;&gt;&lt;code&gt;async/await&lt;/code&gt; 키워드와 &lt;code&gt;Task.Run&lt;/code&gt;을 함께 사용하세요
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // 防止用户重复点击

    try
    {
        // 开启后台任务
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // 在后台任务完成后，自动切换回UI线程更新UI
        LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;发生错误: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // 重新启用按钮
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>WPF 학습 자료</title>
        <link>https://ttf248.life/ko/p/wpf-learning-resources/</link>
        <pubDate>Tue, 17 Oct 2023 10:49:24 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/wpf-learning-resources/</guid>
        <description>&lt;p&gt;미니 프로그램 개발 설계의 함정은 아직 채우지 못했는데, 새로운 &lt;strong&gt;WPF&lt;/strong&gt;를 파고 최근 회사도 동요가 있었고, 다른 지역과의 협업 업무 소통은 어쩔 수 없이 효율이 조금 미흡했기에, 그냥 클라이언트 인터페이스 개발을 맡기로 했다&lt;/p&gt;
&lt;h2 id=&#34;wpf&#34;&gt;WPF
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/introduction-to-wpf?view=netframeworkdesktop-4.8&amp;amp;preserve-view=true&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 마이크로소프트 공식 학습 자료&lt;/a&gt;를 추천합니다&lt;/li&gt;
&lt;li&gt;[WPF 기초 요약(학습 제안)]&lt;/li&gt;
&lt;li&gt;[WPF 중국어 웹사이트]&lt;/li&gt;
&lt;li&gt;WPF 개인 정리 및 학습 추천&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WPF 인터페이스 디자인에 사용되는 많은 개념들은 웹 프론트엔드 디자인과 유사하며, 가능한 한 UI 디자인과 비즈니스 로직을 분리하여 UI 디자인이 독립적으로 가능하도록 하는 것이 인터넷 회사들이 기대하는 분업 방식입니다. 올해 마침 소형 프로그램(小程序)을 개발해 보았는데, 많은 개념적인 부분에서 공통점이 있어 익숙해지기도 쉬웠습니다. 이러한 것들은 현대 UI 디자인의 &lt;strong&gt;진리&lt;/strong&gt;라고 할 수 있으며, 기본적인 프레임워크 개념을 숙지하면 이후로 잘못된 방향으로 나아갈 가능성이 줄어듭니다.&lt;/p&gt;
&lt;p&gt;이전에 &lt;code&gt;Winform&lt;/code&gt; 개발 경험이 있는 독자라면, &lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zh7791/p/11502696.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 기초 요약(학습 제안)&lt;/a&gt;을 읽어보시는 것을 추천합니다. 분량이 길지 않아 경험이 있는 독자들이 학습 경로를 계획하기에 적합합니다.&lt;/p&gt;
&lt;p&gt;영문 없이 읽는 독자들을 위해 &lt;a class=&#34;link&#34; href=&#34;http://www.wpfsoft.com/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 중국어 웹사이트&lt;/a&gt;를 추천합니다. 이 곳에서는 기본 개념, 발전 역사, 그리고 하위 클래스에 대한 이해 논리를 처음부터 설명하고 있습니다. 재미롭게도 이 웹사이트는 올해 8월에 게시되었는데, 저의 일정과 딱 맞아떨어졌습니다. 조금만 더 늦었더라면 아마 기회가 없었을 겁니다.&lt;/p&gt;
&lt;p&gt;가장 정통적인 학습 자료를 원한다면 당연히 마이크로소프트 공식 자료여야 합니다. 다소 지루할 수 있지만, 새로운 독자들은 인내심을 가져야 합니다.&lt;/p&gt;
&lt;p&gt;고전적인 전자책도 많지만, 크게 추천하지는 않아요. 일상 업무가 많아서 책을 읽을 시간이 많지 않고, 한 번에 몰입해서 보기 어렵습니다. 프로젝트 연습과 함께 하는 것이 더 적합할 것 같아요.&lt;/p&gt;
&lt;h2 id=&#34;c-및-net-출시-기록&#34;&gt;C# 및 .NET 출시 기록
&lt;/h2&gt;&lt;p&gt;이전에 학습했던 언어에 비해 최근 몇 년간은 새롭게 추가된 기능이 조금 많아지고, 매년 문법 버전이 업데이트되고 있습니다&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;공식 학습 자료:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/csharp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/csharp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
