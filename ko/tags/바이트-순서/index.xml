<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>바이트 순서 on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/%EB%B0%94%EC%9D%B4%ED%8A%B8-%EC%88%9C%EC%84%9C/</link>
        <description>Recent content in 바이트 순서 on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/%EB%B0%94%EC%9D%B4%ED%8A%B8-%EC%88%9C%EC%84%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>컴퓨터가 왜 일반적으로 빅엔디안이 아닌 리틀 엔디안을 채택했는가</title>
        <link>https://ttf248.life/ko/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;바이트 순서에 대한 설명 [호스트 바이트 순서, 네트워크 바이트 순서, 디버거를 통해 직접 관찰]&lt;/p&gt;
&lt;p&gt;컴퓨터 분야의 역사적 이유로 형성된 특정 설계 습관은, 엉덩이 너비가 로켓 추진기 폭을 결정하는 논리와 똑같아서, 안에서 “장점”이나 “단점”을 굳이 분석할 필요 없이 순전히 역사적인 습관일 뿐입니다&lt;/p&gt;
&lt;h2 id=&#34;원본-링크&#34;&gt;원본 링크
&lt;/h2&gt;&lt;p&gt;작가: 북극
링크: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
출처: 지식인
저작권은 저자에게 있습니다. 상업적 재판행 시에는 저자와 협의하여 허가를 받으시고, 비상업적 재판행 시에는 출처를 명시하십시오.&lt;/p&gt;
&lt;h2 id=&#34;본문-재게시&#34;&gt;본문 재게시
&lt;/h2&gt;&lt;p&gt;현재의 빅엔디언과 릴리틀 엔디언 상황은 역사적 관습과 상업화의 결과이며, 기술 자체와는 크게 관련이 없습니다. ARM은 빅엔디언으로 설정할 수도 있고 리틀 엔디언으로 설정할 수도 있습니다. TCP/IP 헤더는 아직도 빅엔디언(네트워크 바이트 오더)입니다. 저장 분야에서도 많은 저장 프로토콜/규격들이 빅엔디언 방식으로 데이터를 저장합니다.&lt;/p&gt;
&lt;p&gt;그래서 질문자의 세 가지 질문은, 오늘날에 와서 보면:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터가 왜 널리 리틀 엔디안 저장 방식을 채택하는가? &amp;ndash;&amp;gt; 틀렸습니다&lt;/li&gt;
&lt;li&gt;효율이 더 높지 않습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;현재 기술로 이 세 가지 문제를 논증하는 것은 화살을 쏘고 나서 표적을 그리는 것과 같습니다&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;하지만 빅 엔디언 또는 리틀 엔디언의 선택은 컴퓨터 역사에서 실제로 일정한 객관적인 요인이 있었습니다: 호스트 바이트 오더(리틀 엔디언)의 장점: 리틀 엔디언의 덧셈기는 비교적 쉽게 만들 수 있습니다. 8비트 * 4의 덧셈기를 만든다면, 8비트 덧셈기 하나만 있으면 되고, 낮은 비트부터 높은 비트로 순차적으로 모든 바이트를 더하면 됩니다. 이때 발생하는 자리 올림 회로는 매우 간단하지만, 빅 엔디언이라면 한 번에 32비를 로드해야 하며, 그렇지 않으면 계산을 수행할 수 없습니다. 지금 보면 한 번에 8비트 또는 32비를 로드하는 것의 차이는 크지 않지만, 몇십 년 전에는 메모리 가격이 비쌌기 때문에 가능한 한 간단한 것이 좋았고, 따라서 호스트 바이트 오더는 비용을 고려하여 리틀 엔디언으로 선택되었습니다. 네트워크 바이트 오더(빅 엔디언)의 장점: 초기 장치의 캐시가 작았기 때문에 높은 바이트를 먼저 받으면 패킷 정보를 빠르게 판단할 수 있었습니다: 버퍼 크기(얼마나 큰 버퍼를 준비해야 하는지), 주소 범위(IP 주소는 앞부터 뒤로 매칭됩니다). 초기 네트워크 장치의 캐시는 바이트 단위였고, 높은 바이트를 먼저 가져오는 것이 실제로 더 빨랐습니다. 따라서 네트워크 장치는 비용을 고려하여 빅 엔디언을 사용했습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;그래서, 바이트 오더의 선택은 역사적으로는 애플리케이션 시나리오와 비용을 더 고려하는 경향이 있었고(예: PPC/MIPS는 네트워크 장비에 더 적합), 이후 기술 발전 과정에서 호환성 때문에 빅 엔디언과 리틀 엔디언 설정이 지금까지 유지되고 있습니다&lt;/p&gt;
&lt;p&gt;오늘날에는 이러한 장점은 완전히 사라졌고, 단지 과거의 습관일 뿐입니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>호스트 순서, 네트워크 순서를 디버거를 통해 직접 관찰</title>
        <link>https://ttf248.life/ko/p/host-order-network-order-debugger-observation/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/host-order-network-order-debugger-observation/</guid>
        <description>&lt;p&gt;컴퓨터 발전 역사에서 데이터를 저장하는 방법에 대한 통일된 표준은 없었습니다&lt;/p&gt;
&lt;p&gt;바이트의 배열 방식에는 두 가지 일반적인 규칙이 있습니다. 예를 들어, 다중 자릿수의 하위 바이트를 작은 주소에 두고 상위 바이트를 큰 주소에 두는 것을 리틀 엔디언이라고 하며, 반대로 빅 엔디언이라고 합니다. 네트워크 애플리케이션에서는 바이트 순서가 반드시 고려해야 할 요소인데, 서로 다른 기계 유형이 서로 다른 표준의 바이트 순서를 채택할 수 있기 때문입니다. 따라서 모두 네트워크 표준으로 변환합니다.&lt;/p&gt;
&lt;p&gt;읽기 습관에 따라 빅 엔디안 바이트 순서가 왼쪽에서 오른쪽으로 읽는 순서와 더 일치합니다&lt;/p&gt;
&lt;h2 id=&#34;프로세서-아키텍처&#34;&gt;프로세서 아키텍처
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;x86, MOS Technology 6502, Z80, VAX, PDP-11 등 프로세서는 리틀 엔디언입니다&lt;/li&gt;
&lt;li&gt;모토로라 6800, 모토로라 68000, PowerPC 970 등 프로세서는 빅 엔디안 방식입니다&lt;/li&gt;
&lt;li&gt;ARM, PowerPC(PowerPC 970 제외), DEC Alpha, SPARC V9, MIPS, PA-RISC 및 IA64의 바이트 순서는 구성 가능합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;네트워크-서론&#34;&gt;네트워크 서론
&lt;/h2&gt;&lt;p&gt;네트워크 전송은 일반적으로 빅 엔디안을 사용하며, 네트워크 바이트 오더 또는 네트워크 순서라고도 합니다. IP 프로토콜에서 빅 엔디안을 네트워크 바이트 오더로 정의합니다.
버클리 소켓은 16비트 및 32비트 정수를 네트워크 바이트 순서와 로컬 호스트 바이트 순서 간에 변환하는 데 사용되는 일련의 변환 함수를 정의합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); //把uint32_t类型从主机序转换到网络序
uint16_t htons(uint16_t hostshort); //把uint16_t类型从主机序转换到网络序
uint32_t ntohl(uint32_t netlong); //把uint32_t类型从网络序转换到主机序
uint16_t ntohs(uint16_t netshort); //把uint16_t类型从网络序转换到主机序
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;asio를 네트워크 라이브러리로 선택하는 경우, 내장된 네임스페이스에 플랫폼 독립적인 함수 이름이 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;비주얼-스튜디오-디버거&#34;&gt;비주얼 스튜디오 디버거
&lt;/h2&gt;&lt;p&gt;디버그 모드에서 디버그 메뉴, 창을 선택하고 메모리 윈도우를 체크합니다&lt;/p&gt;
&lt;p&gt;Visual Studio에서 디버거에서 메모리 내의 데이터를 직접 확인할 수 있습니다. 그림은 아래와 같습니다.&lt;/p&gt;
&lt;p&gt;디버거 메뉴&lt;/p&gt;
&lt;h3 id=&#34;메모리-확인-방법&#34;&gt;메모리 확인 방법
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;창을 통해 변수 이름을 직접 출력하고 해당 변수의 주소로 이동합니다&lt;/li&gt;
&lt;li&gt;변수가 원래 포인터라면, 변수를 더블 클릭하여 선택한 후 메모리 윈도우로 드래그하면 해당 주소의 내용을 보여줍니다&lt;/li&gt;
&lt;li&gt;변수가 포인터가 아니면 계산 창에 추가하고, 주소를 가져온 다음 메모리 창에 수동으로 복사하세요&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;예시로-말하자면&#34;&gt;예시로 말하자면
&lt;/h3&gt;&lt;p&gt;데이터를 수신하여 &lt;code&gt;buffer&lt;/code&gt; 객체에 저장하고, 네트워크 바이트 순서를 호스트 바이트 순서로 변환했습니다. 그 결과 &lt;code&gt;body_length&lt;/code&gt;는 30이 되었고, 서버에서는 이 데이터를 전송하기 위해 네 개의 바이트를 할당했습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // 网络序转成主机序
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;메모리 윈도우에서 &lt;code&gt;buffer_&lt;/code&gt;의 내용을 관찰합니다(빅 엔디안 바이트 순서)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-order-network-order-debugger-observation/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;메모리 윈도우에서 &lt;code&gt;body_length_&lt;/code&gt;의 내용을 관찰하세요&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/host-order-network-order-debugger-observation/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
