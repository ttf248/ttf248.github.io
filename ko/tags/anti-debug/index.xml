<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Anti-Debug on 향숙의 수첩</title>
        <link>https://blog.ttf248.life/ko/tags/anti-debug/</link>
        <description>Recent content in Anti-Debug on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ko/tags/anti-debug/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>디버깅을 어떻게 막아야 할까요?</title>
        <link>https://blog.ttf248.life/ko/p/program-how-to-anti-debug/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/program-how-to-anti-debug/</guid>
        <description>&lt;p&gt;뜻밖에도 새로운 배경화면을 찾아보게 됐는데, 역시 검은색 계열이 좋고, 부분적으로 색감을 넣으면 좋겠다. 바탕 화면에 아이콘을 배치해야 하니 다른 색상의 배경화면을 사용하면 아이콘이 잘 보이지 않을 것 같아.&lt;/p&gt;
&lt;p&gt;위에 있는 어셈블리 코드 보고 생각 좀 해봤는데, 무슨 말인지 모르겠어. __INLINE_CODE_0__에게 맡겨서 명령어를 설명받았지만, 상황은 설명 안 해주네. 분명 특수한 상황에서만 쓰이는 명령어인 것 같아. 일반적인 코드는 이런식으로 생기지 않아.&lt;/p&gt;
&lt;p&gt;지금은 검색 엔진이 더 나을 것 같아요, 어셈블리 지식이 부족하니까요&lt;/p&gt;
&lt;h2 id=&#34;벽지&#34;&gt;벽지
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/program-how-to-anti-debug/Snipaste_2024-01-23_19-50-53.png&#34;
	width=&#34;1020&#34;
	height=&#34;470&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;黑色汇编壁纸&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;어셈블리-코드&#34;&gt;어셈블리 코드
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제 사용 시나리오&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;설명&#34;&gt;설명
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TrapFlag&lt;/code&gt;강조_2&lt;code&gt;SINGLE_STEP&lt;/code&gt;，우리가 코드를 추적하면 이 플래그는 디버거에 의해 초기화되므로 예외를 볼 수 없습니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;실제 테스트 결과, 검사 디버깅 함수를 직접 건너뛰면 디버깅이 감지되지 않지만, 검사 함수 실행 시에만 감지되는 것으로 나타났다 (자료 조사 중이며 아직 실제 확인은 되지 않았다)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;관련 자료는 웹사이트의 영문 원본을 번역한 것이며, 사이트에서는 다양한 디버깅 방지 기술에 대해 설명하고 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
