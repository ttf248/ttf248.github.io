<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Stable-Diffusion on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/stable-diffusion/</link>
        <description>Recent content in Stable-Diffusion on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/stable-diffusion/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>스테이블 디퓨전 - 처음부터 설치하는 은원정후</title>
        <link>https://ttf248.life/ko/p/stable-diffusion-zero-install-saga/</link>
        <pubDate>Thu, 13 Apr 2023 00:23:54 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/stable-diffusion-zero-install-saga/</guid>
        <description>&lt;p&gt;국내 자료들을 보니 거의 다 &lt;strong&gt;아키바&lt;/strong&gt; 형님의 원클릭 배포 패키지를 추천하고 있네요. &lt;code&gt;Python&lt;/code&gt; 기반의 오픈소스 프로젝트인 만큼, 설치도 그렇게 복잡하지 않을 것 같아서 처음부터 직접 해보려고 합니다.&lt;/p&gt;
&lt;p&gt;AI 생성 이미지로 씨름하느라, 특별히 그래픽 카드를 교체했는데 &lt;code&gt;3060 12G&lt;/code&gt; 보급형 모델입니다. 7년간 사용한 &lt;code&gt;960&lt;/code&gt;은 영광스럽게도 은퇴했습니다.&lt;/p&gt;
&lt;p&gt;핵심적인 &lt;code&gt;pytorch cuda&lt;/code&gt; 설치, 예전에 &lt;code&gt;python&lt;/code&gt; 게임 보조 스크립트를 작성할 때 로컬에 설치한 적이 있는데, 생각보다 문제도 많이 겪고 &lt;code&gt;cuda&lt;/code&gt; 암호화가 계속 활성화되지 않는다&lt;/p&gt;
&lt;h2 id=&#34;처리할-일&#34;&gt;처리할 일
&lt;/h2&gt;&lt;p&gt;새로운 기사 구조로 재구성하여 pytorch, 버전 호환성, 버전을 확인하는 방법을 먼저 소개합니다
로컬에서 어떻게 처음부터 가상 환경을 만들고 PyTorch를 배포할 수 있나요?
번역 자료, 0부터 시작하는 Stable Diffusion &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;
자료 정리&lt;/p&gt;
&lt;h2 id=&#34;단계&#34;&gt;단계
&lt;/h2&gt;&lt;p&gt;중국어로 검색하면 관련 단계별 설치 튜토리얼을 찾기 어려울 수 있습니다. &lt;code&gt;Google&lt;/code&gt;에서 영어로 검색하면, 처음부터 시작하는 유사한 튜토리얼이 많이 있습니다. 필요한 것들을 설명했는데, 먼저 &lt;code&gt;git&lt;/code&gt;을 설치해야 하고, 그 다음에는 &lt;code&gt;python&lt;/code&gt;을 설치해야 한다고 했습니다. 그리고 저장소를 다운로드하고 스크립트를 더블 클릭하면 끝났습니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;자세한 사용법 및 FAQ는 &lt;code&gt;issues&lt;/code&gt;를 참고하시고, &lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&lt;/a&gt; 를 확인하세요&lt;/p&gt;
&lt;p&gt;저도 왜인지 이 창고가 무엇을 하는 곳인지 설명하는 사람이 없네요. 사실 이름만 봐도 알 수 있습니다. 이건 인터페이스 콘솔이고, 우리를 더 편리하게 사용할 수 있도록 해 줍니다. 실제로 설치할 때, 그는 공식 저장소 내용을 다운로드하고 실제 &lt;code&gt;SD&lt;/code&gt; 코드를 가져옵니다.&lt;/p&gt;
&lt;p&gt;창고와 함께 설치 시작 스크립트도 만들었습니다. 현재 폴더에 &lt;code&gt;Python&lt;/code&gt; 가상 환경이 있는지 자동으로 인식하며, 있다면 기본적으로 현재 경로의 &lt;code&gt;python&lt;/code&gt;을 사용합니다.&lt;/p&gt;
&lt;p&gt;만약 완전한 초보 사용자라면, 다음을 참고해 보세요: &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;pytorch
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기서부터 제가 오늘 말씀드리고 싶은 건데요, 우선 그들의 단계대로 스크립트를 바로 실행하지 마세요. 파이썬은 requirement 파일로 의존성 라이브러리를 설치하는데, 이건 별거 아니에요. 핵심은 그래픽 카드 드라이버 버전과 pytorch가 호환되는지 확인하는 겁니다. 이 부분에 대한 설명도 많은 사람들이 소개하고 있으니, 인터넷에서 찾아보면 쉽게 찾을 수 있을 거예요.&lt;/p&gt;
&lt;p&gt;참고 자료: &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_40660408/article/details/129896700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_40660408/article/details/129896700&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;가상 환경을 하나 만들어서, 즉 빈 가상 환경에서 먼저 공식 웹사이트에서 스크립트를 실행해서 pytorch를 설치하세요&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.version.cuda)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.__version__, torch.cuda.is_available())&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 두 스크립트는 설치해야 할 CUDA 버전을 확인하고, 설치가 성공적으로 되었는지 확인할 수 있습니다&lt;/p&gt;
&lt;p&gt;여기 화려한 조작은 권장하지 않으니, 일단 공식 페이지의 로직대로 복사해서 설치하면 되고, 바로 pip로 설치하면 실패할 가능성이 높거나 CUDA가 활성화되지 않을 수 있습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;중요한 점은 폴더 경로에 불필요한 것들이 없어야 합니다. 그렇지 않으면 pytorch를 사용할 수 없을 가능성이 매우 높습니다.&lt;/p&gt;
&lt;p&gt;중간에 여러 번 설치하고, 공식 설치 파일을 다운로드하여 수동으로 설치하는 방법도 시도했습니다. 2.0 버전으로 업그레이드하려고 했는데, 공식 문서에는 2.0 버전이 속도가 좀 더 빠르다고 되어 있습니다. 하지만 이전에는 많이 사용하지 않았고, Python 버전과 이것이 관련이 있는지 잘 모르겠습니다. 중간에 공식 매뉴얼을 살펴보니 3.8 버전을 사용하는 것이 좋다고 합니다. 그래서 약간의 충돌이 발생했는데, 이전에 원클릭 설치 패키지를 사용했더니 그 안에 3.10 버전이 있었습니다. 결국 처음부터 다시 시작하여 새 폴더를 만들고 가상 환경을 생성하고 torch가 성공적으로 설치되었는지 확인했습니다.&lt;/p&gt;
&lt;p&gt;그런 다음 이 설치된 가상 환경을 웹 UI 폴더 안에 이동하세요. 이때부터 스크립트 설치를 시작하면 다른 의존성 문제는 크게 줄어들 것입니다.&lt;/p&gt;
&lt;p&gt;이동 후에는 다음을 실행해야 합니다: python -m pip install &amp;ndash;upgrade &amp;ndash;force-reinstall pip, pip를 수정합니다&lt;/p&gt;
&lt;p&gt;아마 꽤 이상하게 보일 수도 있지만, 이 부분은 꽤 오랫동안 고생했어요. 제 torch를 제대로 인식하지 못했기 때문입니다. 모든 간섭 요소를 배제하기 위해 먼저 이것을 설치한 다음 다른 종속성 라이브러리를 설치하려고 했습니다.&lt;/p&gt;
&lt;h2 id=&#34;xformers&#34;&gt;Xformers
&lt;/h2&gt;&lt;p&gt;제안은 활성화하면 이미지 생성 속도를 높이고 기존 사용량을 줄일 수 있습니다. 부작용으로는 동일한 매개변수 그룹에서 &lt;strong&gt;생성된 이미지가 상대적으로 안정적이지 않을 수 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stable-diffusion-webui:Xformers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/diffusers/optimization/xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huggingface optimization&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Optimization Ratio&lt;/th&gt;
&lt;th&gt;Time taken&lt;/th&gt;
&lt;th&gt;Torch active/reserved&lt;/th&gt;
&lt;th&gt;Sys VRAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100.00%&lt;/td&gt;
&lt;td&gt;2m 57.03s&lt;/td&gt;
&lt;td&gt;7440/10058 MiB&lt;/td&gt;
&lt;td&gt;12288/12288 MiB (100.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;51.02%&lt;/td&gt;
&lt;td&gt;1m 29.21s&lt;/td&gt;
&lt;td&gt;4547/7164 MiB&lt;/td&gt;
&lt;td&gt;9298/12288 MiB (75.67%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;((masterpiece)),((best quality)),((high detial)),((realistic,))
Industrial age city, deep canyons in the middle,chinese architectural streets,bazaars, Bridges, (rainy days:1.2), (steampunk:0.8), chinese architecture
Negative prompt: nsfw,((cowboy)),(((pubic))), ((((pubic_hair))))sketch, duplicate, ugly, huge eyes, text, logo, monochrome, worst face, (bad and mutated hands:1.3), (worst quality:2.0), (low quality:2.0), (blurry:2.0), horror, geometry, bad_prompt, (bad hands), (missing fingers), multiple limbs, bad anatomy, (interlocked fingers:1.2), Ugly Fingers, (extra digit and hands and fingers and legs and arms:1.4), crown braid, ((2girl)), (deformed fingers:1.2), (long fingers:1.2),succubus wings,horn,succubus horn,succubus hairstyle, (bad-artist-anime), bad-artist, bad hand, borrowed character, text focus, watermark, sample watermark, character watermark, lofter username, photo date watermark, movie poster, magazine cover, journal, cover, cover page, doujin cover, album cover, manga cover, brand name imitation, EasyNegative,Tights, silk stockings,shorts
Steps: 35, Sampler: DPM adaptive, CFG scale: 5.5, Seed: 2223996555, Size: 1088x1088, Model hash: 543bcbc212, Model: base_Anything-V3.0-pruned, Clip skip: 2, ENSD: 31337
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;왜 추천하는 원클릭 배포 패키지가 아닌지 궁금해하는데, 그 패키지 안에는 일부 설정이 작성자 개인적으로 커스터마이징된 부분이 있어서 공식 버전과 완전히 동일하지 않습니다. 만약 초보 사용자라면 왜 그런 파라미터를 설정해야 하는지에 대한 최선의 논리는 먼저 공식 버전을 사용하는 것입니다. 사용 시간이 길어질수록 공식 매뉴얼을 더 자주 살펴보면 어떤 파라미터를 조정해야 할지 알 수 있을 겁니다.&lt;/p&gt;
&lt;h2 id=&#34;그래픽-카드-선택&#34;&gt;그래픽 카드 선택
&lt;/h2&gt;&lt;p&gt;데이터 마이닝 이후, 그래픽카드 가격이 상대적으로 많이 내렸고, 일반적인 입문자라면 &lt;code&gt;3060&lt;/code&gt;과 &lt;code&gt;3060ti&lt;/code&gt; 사이에서 고민할 때 보통 더 큰 메모리 용량인 &lt;code&gt;12G&lt;/code&gt; 버전의 3060을 추천하는 경우가 많다. 결국 더 높은 해상도의 이미지를 생성할 수 있기 때문이다. 왜 더 높은 해상도가 필요하냐면, 이미지 생성 시 해상도를 높여서 더욱 선명하고 섬세한 이미지를 얻을 수 있기 때문이다. 만약 작은 이미지를 생성하고 싶다면 &lt;code&gt;8G&lt;/code&gt; 메모리 용량도 충분하다.&lt;/p&gt;
&lt;p&gt;아직 하나 더, &lt;strong&gt;고화질 확대&lt;/strong&gt; 옵션은 디테일을 구체화하여 화면의 디테일을 더욱 풍부하게 만들지만, 더 많은 비디오 메모리가 필요합니다&lt;/p&gt;
&lt;p&gt;다음은 NVIDIA GeForce GTX 970, GeForce RTX 3060 Ti, GeForce RTX 3060, GeForce RTX 3080 및 GeForce RTX 3080 Ti의 단정밀도(FP32), 반정밀도(FP16) 및 배정밀도(FP64) 부동소수점 연산 능력 사양 요약표입니다:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;그래픽 카드 모델&lt;/th&gt;
&lt;th&gt;출시 연도&lt;/th&gt;
&lt;th&gt;단정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;th&gt;반정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;th&gt;배정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce GTX 970&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;3.49&lt;/td&gt;
&lt;td&gt;87.2&lt;/td&gt;
&lt;td&gt;0.109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060 Ti&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;16.2&lt;/td&gt;
&lt;td&gt;32.4&lt;/td&gt;
&lt;td&gt;0.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;12.7&lt;/td&gt;
&lt;td&gt;25.4&lt;/td&gt;
&lt;td&gt;0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;29.8&lt;/td&gt;
&lt;td&gt;58.9&lt;/td&gt;
&lt;td&gt;0.93&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080 Ti&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;34.8&lt;/td&gt;
&lt;td&gt;68.7&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;발췌한, &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/spreadsheets/d/1Zlv4UFiciSgmJZncCujuXKHwc4BcxbjbSBg71-SdeNk/edit#gid=0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;다양한 그래픽 카드 성능 테스트 데이터&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;업데이트&#34;&gt;업데이트
&lt;/h2&gt;&lt;p&gt;반년 정도의 공백을 두고, 원래는 설치 단계를 다시 정리하고 더 많은 기초 개념을 설명하려고 했는데, 결과적으로 보니 일반인들이 AI 그림을 그리는 건 다들 제공하는 이미지 파라미터를 기반으로 파라미터를 조정하거나, 이미 있는 이미지를 바탕으로 형식화된 재렌더링을 하는 것이더라고요&lt;/p&gt;
&lt;p&gt;중간에 프로젝트가 있었는데, AI를 이용해서 앱 UI 소재를 그려보려고 했더니, 반나절을 끙끙거려도 결과는 만족스럽지 않았어. 그냥 공식 앱에서 리소스를 가져오는 그림이 더 나은 것 같아.&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
