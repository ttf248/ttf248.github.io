<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>TCP on 향숙의 수첩</title>
        <link>https://blog.ttf248.life/ko/tags/tcp/</link>
        <description>Recent content in TCP on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ko/tags/tcp/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>백그라운드 서비스 TCP 통신 이상 점검</title>
        <link>https://blog.ttf248.life/ko/p/backend-service-tcp-communication-troubleshooting/</link>
        <pubDate>Fri, 14 Feb 2025 22:54:13 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/backend-service-tcp-communication-troubleshooting/</guid>
        <description>&lt;p&gt;비즈니스 모델: 백엔드 서비스는 TCP를 통해 그룹의 호가 게이트웨이와 연결을 맺습니다. 각 연결 시, 먼저 인증 요청을 보내고 이후 지속적으로 하트비트 패킷을 전송하여 연결 상태를 유지합니다.
그러나 어느 날, 서비스 연결 해제 경고 메시지를 받았다. 꼼꼼히 로그를 확인한 결과, 백엔드 서비스는 계속해서 하트비트를 전송하고 있었지만 상대방은 전혀 응답하지 않았음에도 불구하고 연결은 끊어지지 않았다.&lt;/p&gt;
&lt;h2 id=&#34;현장-설명&#34;&gt;현장 설명
&lt;/h2&gt;&lt;p&gt;원래 회사에서 야근하며 프로젝트 진행을 추진 중이었는데, 업무 그룹 채팅방에 갑자기 경고 메시지가 떴다. 처음에는 예전 문제라고 생각했다. 네트워크 타임아웃으로 인해 하트비트 전송이 실패해서 서비스 연결이 끊어진 것 같았다. 하지만 로그를 자세히 확인해 보니 실제 상황은 그렇지 않았다. 백엔드에서 인증 로그인 메시지를 보냈지만 응답을 받지 못했고, 동시에 하트비트는 계속 전송되었지만 상대방은 어떠한 하트비트 데이터도 반환하지 않았다. 로그를 심층적으로 분석한 결과 다음과 같은 몇 가지 주요 문제가 드러났다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;인가 메시지 응답 없음: 상대방 시스템이 재시동 중일 가능성이 높으며, 이로 인해 인가 메시지가 적시에 처리되지 못했을 수 있습니다&lt;/li&gt;
&lt;li&gt;승인되지 않은 상태에서 하트비트 데이터를 전송하는 문제는 프로그램 로직의 결함 때문입니다. 하트비트 전송 함수가 연결 상태만 확인하고, 승인 상태를 확인하지 않아 판단 로직에 오류가 있었습니다.&lt;/li&gt;
&lt;li&gt;서비스 연결 해제 실패: 서비스가 연결을 끊을 수 있다면, 재연결 메커니즘이 작동하여 인증 메시지를 다시 보낼 수 있습니다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;현재 해결해야 할 마지막 문제, 즉 서비스 연결 해제 실패 원인을 파악하기 위해 보다 면밀한 점검이 필요합니다&lt;/p&gt;
&lt;h2 id=&#34;네트워크-데이터-패킷-분석&#34;&gt;네트워크 데이터 패킷 분석
&lt;/h2&gt;&lt;p&gt;네트워크 데이터 패킷을 획득하여 추가 분석합니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/backend-service-tcp-communication-troubleshooting/20250220151952.png&#34;
	width=&#34;1126&#34;
	height=&#34;202&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcpdump&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;557&#34;
		data-flex-basis=&#34;1337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;데이터를 분석해 보면 심박수는 정상적으로 전송되고 있지만, 상대방 서버로부터 응답이 없고, __INLINE_CODE_0__가 주어졌기 때문에 연결이 자동으로 끊어지지 않습니다&lt;/p&gt;
&lt;h2 id=&#34;일반적인-플래그-설명&#34;&gt;일반적인 플래그 설명
&lt;/h2&gt;&lt;p&gt;TCP 프로토콜에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;（Push）和 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;(ACK)는 데이터 전송과 흐름 제어를 위해 사용되는 두 개의 중요한 플래그입니다. 이들의 역할은 다음과 같습니다:&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-pshpush-flag&#34;&gt;&lt;strong&gt;1. PSH（Push Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;:
수신측은 버퍼 내의 데이터를 상위 애플리케이션으로 즉시 푸시하고, __BOLD_2&lt;code&gt;PSH&lt;/code&gt; 플래그가 설정된 데이터 블록을 처리하여 운영체제 버퍼에 보관하지 않고 최대한 빠르게 애플리케이션으로 전달해야 합니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;典型场景&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클라이언트가 요청을 보낼 때(예: &lt;code&gt;GET /index.html&lt;/code&gt;BOLD_3&lt;code&gt;PSH&lt;/code&gt;), 서버의 즉각적인 응답을 기대합니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;키보드 입력 시마다 __인라인_2____가 발생하여 입력 문자열이 실시간으로 전송됩니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비디오 스트리밍, 온라인 게임 등 저지연 시나리오에서 &lt;code&gt;PSH&lt;/code&gt;을 사용하여 지연 시간을 줄일 수 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 필수는 아니며, 수신자는 해당 비트(flag bit)를 무시할 수 있습니다(데이터는 정상적으로 처리해야 합니다)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;발신자가 __INLINE_CODE_0__을 설정하지 않을 경우, 수신자는 자체 버퍼링 정책에 따라 데이터를 푸시할 시점을 결정합니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-ackacknowledgment-flag&#34;&gt;&lt;strong&gt;2. ACK（Acknowledgment Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;:
수신된 이전 데이터 세그먼트가 올바르게 전달되었음을 확인하는 신호이며, 다음 바이트 시퀀스 번호를 나타냅니다. 이는 TCP의 핵심적인 신뢰성 있는 전송 메커니즘입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作原理&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 전송 시, 송신자는 수신자가 기대하는 (&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 值（例如 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;)을 함께 보냅니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수신측은 데이터를 수신한 후, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 메시지 세그먼트를 생성하여 수신 확인된 데이터 시퀀스 번호를 알립니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;발신자는 해당 __INLINE_CODE_0__을 수신한 후에야 재전송할 것입니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 발신자가 번호가 &lt;code&gt;100~199&lt;/code&gt; 的数据段，则期望接收方的 &lt;code&gt;ACK&lt;/code&gt; 应为 __INLINE_CODE_2__인 메시지를 보냈다면,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수신자가 재전송 요청을 __INLINE_CODE_0__BOLD_2&lt;code&gt;ACK=150&lt;/code&gt;에 알리지 못함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-psh-和-ack-的组合&#34;&gt;&lt;strong&gt;3. PSH 和 ACK 的组合&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;TCP 패킷에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 和 __INLINE_CODE_1__이 동시에 나타날 수 있으며, 다음과 같은 상황에서 흔히 볼 수 있습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP 请求响应&lt;/strong&gt;:
클라이언트가 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 请求时（含数据），会设置 __INLINE_CODE_1__BOLD_4&lt;code&gt;ACK&lt;/code&gt;(이전 응답 확인)을 보냅니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Client → Server: SYN, ACK=1 → 建立连接
Client → Server: PSH, ACK=1, 数据 → 发送请求数据
Server → Client: PSH, ACK=数据长度+1 → 返回响应
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSH 握手后传输命令&lt;/strong&gt;:
클라이언트가 명령을 입력하면 &lt;code&gt;PSH&lt;/code&gt; 和 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 데이터 세그먼트를 전송하여 명령이 즉시 전송되고 서버에서 처리되도록 합니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-其他标志位的关联&#34;&gt;&lt;strong&gt;4. 其他标志位的关联&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;플래그&lt;/th&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;간략 설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;동기화, 초기화 연결 (세 번의 악수)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연결 우아하게 종료&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td&gt;재설정&lt;/td&gt;
&lt;td&gt;강제 연결 종료 (비정상 상황)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URG&lt;/td&gt;
&lt;td&gt;긴급&lt;/td&gt;
&lt;td&gt;긴급 포인터 표시 (거의 사용하지 않음)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;관심사는 &lt;strong&gt;数据尽快到达应用层&lt;/strong&gt;, 지연 감소입니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK&lt;/strong&gt; 중점은 &lt;strong&gt;数据的可靠传输&lt;/strong&gt;, 데이터 손실이나 순서 오류 방지입니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;두 가지가 협력하여 TCP 프로토콜의 효율성과 안정성을 균형 있게 맞췄다&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
