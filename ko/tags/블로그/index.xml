<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>블로그 on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/</link>
        <description>Recent content in 블로그 on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>사이트 가속 및 도메인 설정</title>
        <link>https://ttf248.life/ko/p/website-acceleration-and-domain-setup/</link>
        <pubDate>Sat, 20 Jun 2020 10:36:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/website-acceleration-and-domain-setup/</guid>
        <description>&lt;p&gt;국내에서 GitHub Pages 접속이 느려서, 저자는 개인 도메인을 신청하고 국내 클라우드 호스트 제공업체의 CDN 가속 서비스를 구매했습니다. 설정 과정에서 www 서브도메인에 접근할 수 없는 문제가 발생했는데, 최종적으로 와일드카드 도메인 해석을 삭제하고 개별 2차 도메인을 설정하여 해결했습니다. 저자는 또한 CDN 가속의 원리와 설정 경험, 그리고 Nginx 리버스 프록시를 사용한 시도와 그 교훈을 공유했습니다.&lt;/p&gt;
&lt;h3 id=&#34;배경&#34;&gt;배경
&lt;/h3&gt;&lt;p&gt;GitHub Pages에 호스팅되어 있는데, 몇 가지 잘 알려진 이유로 GitHub Pages의 국내 접속이 약간 느립니다. 그래서 개인 도메인을 신청하고 국내 클라우드 호스트 제공업체의 CDN 가속 서비스를 구매했습니다. 가속 서비스를 설정하면서 개발 머신에 docker, frp, k8s 등 여러 서비스가 배포되어 있고, 이 서비스들은 모두 관련 대시보드를 가지고 있다는 것을 떠올랐습니다. 낭비하지 않겠다는 원칙을 가지고 몇 개의 리버스 프록시를 구성하여 모든 것을 하위 도메인에 연결했습니다.&lt;/p&gt;
&lt;p&gt;二级 도메인을 사용하고 있는데 갑자기 www 서브도메인에 접속할 수 없게 되었고, 알리바바 클라우드에서 DNS 설정이 &lt;a class=&#34;link&#34; href=&#34;https://www.xiangtianlong.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.xiangtianlong.com&lt;/a&gt;과 xiangtianlong.com으로 동시에 해석되도록 되어 있습니다. CDN 가속을 아직 활성화하지 않았을 때는 두 도메인이 모두 정상적으로 작동했습니다.&lt;/p&gt;
&lt;p&gt;CDN 가속을 설정할 때, 2차 도메인이 너무 많아서 와일드카드 도메인 규칙을 활성화했고, 모두 개발 머신으로 라우팅했는데, 그 결과 www라는 2차 도메인도 함께 접속이 안 되게 됐습니다. 네, 맞아요, www 접두사도 2차 도메인입니다. 실제 웹사이트는 GitHub Pages에 배포되어 있고, 개발 머신에는 웹사이트 캐시 정보가 전혀 없습니다.&lt;/p&gt;
&lt;p&gt;개발 환경에 사이트를 배포하지 않아도 되는 이유는 정적 블로그이고, GitHub에서 제공하는 action을 활용하면 자동으로 통합되어 게시되니 정말 좋네요&lt;/p&gt;
&lt;h3 id=&#34;도메인&#34;&gt;도메인
&lt;/h3&gt;&lt;p&gt;비전문적인 웹 개발에서는 도메인에 대한 이해가 SEO나 교차 영역 문제와 관련이 없습니다. 블로그 사이트로서, 누드 도메인은 블로거의 사이트를 돋보이게 할 수 있는데, 이는 저처럼 한자 병음으로 도메인을 사용하는 어린아이들에게 해당하며, 현재 모바일 접속이 많은 만큼 몇몇 문자를 줄일 수 있습니다.&lt;/p&gt;
&lt;p&gt;컴퓨터에서는 www와 com을 입력할 필요 없이 바로 사용할 수 있습니다&lt;/p&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN
&lt;/h3&gt;&lt;p&gt;알리바바 클라우드와 텐센트 클라우드를 모두 사용해 봤는데, 신규 사용자도 쉽게 시작할 수 있습니다. 텐센트 클라우드는 관련 개념을 설명하는 비디오도 따로 제공하고 있습니다. CDN 가속의 원리와 제이동(JD) 창고는 같은 원리입니다. 신상품을 출시하면 미리 전국 각지의 창고에 통일적으로 배송한 후, 배송 요청이 발생했을 때 가장 가까운 창고에서 배송합니다.&lt;/p&gt;
&lt;p&gt;원본 주소: 웹사이트 리소스가 원래 보관된 주소&lt;/p&gt;
&lt;p&gt;캐시 파일 설정, 브라우저 F12, 관리 콘솔, 간단한 정적 리소스 및 동적 리소스 분석&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전부 0일 유효기간&lt;/li&gt;
&lt;li&gt;.php;.jsp;.asp;.aspx 파일은 유효 기간이 0일입니다&lt;/li&gt;
&lt;li&gt;.jpg;.png;.js;.css;.woff2 유효기간 1일&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;텐센트 클라우드 설정 규칙:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;캐시 만료 규칙은 최대 10개까지 구성할 수 있습니다&lt;/li&gt;
&lt;li&gt;여러 캐시 만료 규칙 간의 우선순위는 하단 우선입니다&lt;/li&gt;
&lt;li&gt;캐시 만료 시간은 최대 365일까지 설정할 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비참한-자수풀&#34;&gt;비참한 자수풀
&lt;/h3&gt;&lt;p&gt;예전에는 Nginx를 사용해 본 적이 없어서 웹사이트 검색으로만 역방향 프록시 설정을 이해할 수 있을 거라고 생각했는데, 결과가 좀 혼란스러웠습니다. 반나절을 끙끙거려도 302 리디렉션조차 제대로 설정하지 못해서 결국 아무 소용이 없었습니다. 그래서 어리석은 방법으로 해결하려고 DNS 파싱에서 *모드와 같은 일반 도메인 파싱을 삭제하고 개별 2단계 하위 도메인을 독립적으로 설정했습니다. 그때 갑자기 알리바바 클라우드 DNS 파싱에 &amp;lsquo;표시 URL 리디렉션&amp;rsquo;이라는 모드가 있다는 것을 알아차렸고, 시도해 보니 이게 제가 원하는 302 리디렉션이었습니다.&lt;/p&gt;
&lt;p&gt;첫 번째 2차 도메인을 설정하니 정상적으로 접속되는데, 두 번째를 설정하려니 안 되어서 거의 인생의 의미를 의심할 지경이었어요. 잠시 기다리니까 갑자기 잘 된다는 걸 보니, 알리바바 클라우드의 DNS 전파가 가끔씩 고장 나는 것 같네요.&lt;/p&gt;
&lt;h3 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;www가 없는 웹사이트 주소가 점점 더 많아지는 이유는 무엇인가요?&lt;/li&gt;
&lt;li&gt;www가 포함된 도메인과 미포함된 도메인의 차이점은 무엇인가요?&lt;/li&gt;
&lt;li&gt;도커 Nginx 리버스 프록시 설정&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>블로그 IDE 환경과 잡담</title>
        <link>https://ttf248.life/ko/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;이 글은 마크다운의 기본 개념과 다양한 소프트웨어에서의 활용을 소개하고, VSCode를 IDE로 추천하며 관련 플러그인 목록을 제시합니다. 저자는 Hexo에서 Hugo로 전환한 경험을 공유하며 Hugo의 유연성과 사용자 정의 기능을 강조합니다. 마지막으로 새로운 기술을 빠르게 시작하기 위한 몇 가지 팁과 함께 Hugo 테마 스타일이 업데이트되지 않는 문제를 해결하는 작은 팁을 공유합니다.&lt;/p&gt;
&lt;h2 id=&#34;서론&#34;&gt;서론
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;p&gt;가볍고 사람이 읽기 쉽고 쓰기 쉬운 순수 텍스트 형식으로 문서를 작성할 수 있게 해주는 경량 마크업 언어입니다&lt;/p&gt;
&lt;p&gt;자세한 Markdown 문법에 대한 설명은 이 글에서는 생략하며, 전자책을 참고하시기를 추천합니다. &lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기에 클릭&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;시판되는 많은 소프트웨어들은 이미 md를 작성 방식으로 지원하고 있습니다. csdn 블로그 시스템은 md 문법을 지원하는 온라인 편집기를 출시했는데, 처음 사용할 때 md 문법에 대한 소개 글이 기본적으로 제공되며, 필자는 괜찮다고 생각합니다. 에버노트(印象笔记)는 2018년에 md 노트 지원을 추가했으며, 단축키 바에 다양한 md 마크업 옵션이 있어 일반적인 문서 편집과 거의 비슷하며, 전반적인 인터랙션 흐름은 초보자에게 친숙합니다.&lt;/p&gt;
&lt;h3 id=&#34;ide-추천&#34;&gt;IDE 추천
&lt;/h3&gt;&lt;p&gt;이 글을 작성할 당시에는 이미 2020년이었고, vscode는 필연적으로 들어봤을 것이다. 결국 git page를 사용하여 블로그 시스템을 구축한다고 생각하는 사람은 업계 관계자일 테니까. 과거에는 sublime이나 atom도 괜찮은 선택이었지만, 2년간의 오픈소스 커뮤니티의 노력으로 vscode가 빠르게 발전하여 점차 초보자들이 입문하기에 가장 좋은 선택이 되었다.&lt;/p&gt;
&lt;p&gt;마이크로소프트의 거대 기업과 오픈소스 커뮤니티 관계가 단절된 상태에서 성공적으로 신혼기 시대로 전환되었습니다. 오픈 소스를 포용하고, 필자가 속한 회사 역시 최근 2년간 적극적으로 Java 생태계를 도입했습니다. 바꿔 말하면 현재 국내 비즈니스 개발에 있어 Java 생태계는 정말 매력적입니다.&lt;/p&gt;
&lt;h3 id=&#34;vs-code-플러그인-추천&#34;&gt;VS Code 플러그인 추천
&lt;/h3&gt;&lt;p&gt;플러그인 목록&lt;/p&gt;
&lt;p&gt;플러그인에는 자체 Readme 파일이 있어 기본적인 사용법과 핵심 기능을 설명하고 있으며, 일부 플러그인 제작자는 동적 효과 시연 이미지도 제공합니다&lt;/p&gt;
&lt;p&gt;이미지를 붙여넣기 하면 Hugo의 이미지 플러그인 방식으로 매우 편리하게 이미지를 추가할 수 있습니다&lt;/p&gt;
&lt;p&gt;단축키를 기억하지 못해서, vscode 단축키 관리 메뉴를 열고 md를 검색하고 여러 번 보고; 플러그인 사용 설명서를 다시 확인해 봐&lt;/p&gt;
&lt;h2 id=&#34;hugo&#34;&gt;hugo
&lt;/h2&gt;&lt;p&gt;저는 &lt;code&gt;hexo&lt;/code&gt;에서 &lt;code&gt;hugo&lt;/code&gt;로 전환했는데, 잦은 변덕을 피우는 것이 제 본성이고 결국 차분히 글을 쓰는 것을 참지 못하고 말았습니다&lt;/p&gt;
&lt;p&gt;휴고는 이미지를 별도의 폴더에 배치하고 md 문서를 지원합니다
학문적 주제는 디자인에서 다양한 종류의 문서 스타일을 지원합니다
다양한 편리한 사용자 지정 확장 기능&lt;/p&gt;
&lt;h2 id=&#34;academic&#34;&gt;academic
&lt;/h2&gt;&lt;p&gt;공식 웹사이트는 기본적으로 &lt;code&gt;exampleSite&lt;/code&gt;를 사용하며, 메뉴 도입 시 &lt;code&gt;#컴포넌트&lt;/code&gt; 방식을 채택하고 &lt;code&gt;URL&lt;/code&gt;을 사용하는 것을 권장합니다&lt;/p&gt;
&lt;p&gt;URL 패턴은 클릭하면 단일 페이지로 이동하고, 홈페이지에서 스크롤하는 방식이 아니라서 개인적인 취향입니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스타일별: 에세이, 강연, 전자책&lt;/li&gt;
&lt;li&gt;유연성: 전체 스타일 사용자 정의, CSS 스타일 사용자 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 테마는 중국어 지원이 아직 완벽하지 않은데, 주로 시각적인 측면에서 폰트 크기가 중국어 읽기 습관에 잘 맞지 않습니다. Hexo 개발자 대다수가 중국인이므로 이 점에서는 Hugo보다 우수합니다.&lt;/p&gt;
&lt;p&gt;하지만, 직접 옷을 만들어 먹고, 브라우저에서 요소들을 검사합니다. 요소를 찾았으면 수정해야 할 CSS 스타일 이름이 궁금할 때 사이드바에서 &lt;strong&gt;Insert Style Rule Below&lt;/strong&gt;를 클릭하면 여러 계층으로 중첩된 CSS라도 쉽게 노드 이름을 가져올 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;custom.css 도입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/customization/#add-scripts-js&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;사용자 지정 &lt;strong&gt;custom_js&lt;/strong&gt; 도입&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;테마 내장 문법 강조 설정, &lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;공식 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리
&lt;/h2&gt;&lt;p&gt;애가 또 뭐라 하려고 하는군, 어떻게 처음부터 끝까지 얼버무려 얘기하고 세부사항 같은 건 하나도 안 짚어주는 거야?&lt;/p&gt;
&lt;p&gt;이것들이 있으면 충분할 거예요:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식 매뉴얼&lt;/li&gt;
&lt;li&gt;플러그인 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 기술을 빠르게 시작하려면 먼저 공식 문서를 읽어보는 것이 좋습니다. 완벽하게 이해하려고 애쓰기보다는 대략적인 내용을 파악하는 데 집중하고, 검색 엔진에서 나오는 결과는 최신 버전과 일치하지 않을 수 있으므로 오해를 불러일으킬 수도 있습니다. 새 책도 마찬가지입니다. 목차를 먼저 보고 저자가 무엇을 이야기하려는지 파악하세요. 때로는 서문을 읽는 것이 좋습니다. 일부 외국 저작물이 중국어로 번역될 때, 번역자의 서문은 책의 핵심 내용과 상당 부분을 포함하고 있는 경우가 많습니다.&lt;/p&gt;
&lt;h2 id=&#34;이스터-에그&#34;&gt;이스터 에그
&lt;/h2&gt;&lt;p&gt;Hugo Academic 내장 스타일 스타일을 변경하고 사이트에 게시했지만, 방문 시 스타일이 변하지 않았습니다. 똑똑한 분들은 이미 생각했을 겁니다. 로컬 브라우저 캐시를 지우면 문제가 해결됩니다. 저처럼 영리한 방법은 F12 개발자 모드로 전환하여 &lt;code&gt;network&lt;/code&gt;로 이동한 다음 &lt;code&gt;disable cache&lt;/code&gt;를 선택하고 새로 고침하면 됩니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>자동 통합 시스템 전환</title>
        <link>https://ttf248.life/ko/p/auto-integration-system-switch/</link>
        <pubDate>Sun, 29 Mar 2020 02:11:33 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/auto-integration-system-switch/</guid>
        <description>&lt;p&gt;GitHub Actions를 사용하여 Hugo 블로그를 GitHub Pages 및 Gitee에 자동으로 배포합니다&lt;/p&gt;
&lt;h4 id=&#34;배경-소개&#34;&gt;배경 소개
&lt;/h4&gt;&lt;p&gt;어제 블로그를 업데이트하려는데 Travis 서비스가 안 된다는 걸 발견했어요. Travis 웹페이지를 살펴보니 진행이 소스 코드를 가져오는 단계에서 멈춰 있었고, 그때 GitHub에서 출시한 Action 서비스가 떠올랐습니다.&lt;/p&gt;
&lt;p&gt;그때는 좀 바쁠 것 같고, 액션을 사용하려면 신청도 해야 해서, 지금부터 정식으로 출시되었으니 주말에 시간 나면 새로운 장난감을 한번 해볼까요?&lt;/p&gt;
&lt;p&gt;공식 자료는 다들 웹사이트에서 직접 확인하시면 되고, 본문은 더 이상 인용하지 않겠습니다. 이전에 쿠버네티스를 사용해 보신 분들은 액션의 YAML 파일 설정이 쿠버네티스와 비슷하다고 느끼실 겁니다.&lt;/p&gt;
&lt;p&gt;초보자를 위한 튜토리얼이나 중국어 소개 자료를 찾고 있다면 &lt;strong&gt;阮一峰의 블로그&lt;/strong&gt;에서 검색해 보세요. 두 개의 기사가 있는데, 하나는 기본적인 문법 설명이고 다른 하나는 실제 사례입니다.&lt;/p&gt;
&lt;h4 id=&#34;본문&#34;&gt;본문
&lt;/h4&gt;&lt;p&gt;필요한 지식점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github secrets&lt;/li&gt;
&lt;li&gt;행동 구문&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;핵심 작업은 기존 컴포넌트를 사용하여 완료되었고, 명령어를 통해 국내 gitee에 푸시했습니다. 명령어 부분은 다소 거칠며 강제 푸시를 사용하고 있으며, travis를 사용하던 로직을 이어받았습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: github pages and gitee pages

on:
  push:
    branches:
      - hugo

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;
          extended: true

      - name: Build Github and Gitee ## 单个step只能写一个run命令
        run: hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;gitee_public&amp;quot; &amp;amp;&amp;amp; ls

      - name: Deploy Github
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.BLOG_TOKEN }}
          publish_dir: ./github_public
          publish_branch: master
          cname: xiangtianlong.com

      - name: Deploy Gitee
        run: cd ./gitee_public &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git config user.name &amp;quot;TianlongXiang&amp;quot; &amp;amp;&amp;amp; git config user.email &amp;quot;tianlongxiang51@gmail.com&amp;quot; &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update TianlongXiang&#39;s Blog&amp;quot; &amp;amp;&amp;amp; git push --force &amp;quot;https://xiangtianlong:${{ secrets.GITEE_PASSWORD }}@gitee.com/xiangtianlong/xiangtianlong.git&amp;quot; master:master   
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;사후기&#34;&gt;사후기
&lt;/h4&gt;&lt;p&gt;공식 시장에서 제공하는 기능들을 보면 현재 지원되는 플레이 방식이 꽤 많고, Docker 이미지를 구축하면 더 이상 Docker Hub에서 제공하는 서비스에 의존하지 않아도 된다&lt;/p&gt;
&lt;p&gt;Hugo 이슈를 확인해 보니, GitHub 액션을 사용하여 Git Pages를 자동으로 배포하려면 최종적으로 게시되는 웹 페이지가 master 브랜치에 있어야 합니다. 다른 브랜치에 배포하면 설정 인터페이스에서 GitHub이 배포된 웹 페이지에 구문 문제가 있다는 것을 알립니다.&lt;/p&gt;
&lt;p&gt;실제로 hugo의 원 파일이 master 브랜치에 위치해 있어서, github가 jelly 블로그의 소스 코드로 간주하여 검사하고 통과하지 못하게 하는 오류로 인한 것이다&lt;/p&gt;
&lt;p&gt;솔루션도 간단합니다. Hugo 소스 파일을 다른 분기에 두고, 정적 파일은 master 분기에 게시하면 됩니다.&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
