<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Python on 향숙의 수첩</title>
        <link>https://blog.ttf248.life/ko/tags/python/</link>
        <description>Recent content in Python on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ko/tags/python/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>파이썬 딕셔너리에 사용자 정의 객체 저장 시 참조와 깊은 복사의 중요성</title>
        <link>https://blog.ttf248.life/ko/p/python-dictionary-custom-objects-reference-vs-deepcopy/</link>
        <pubDate>Fri, 22 Mar 2024 01:08:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/python-dictionary-custom-objects-reference-vs-deepcopy/</guid>
        <description>&lt;p&gt;파이썬 프로그래밍에서 딕셔너리는 키-값 쌍을 연결하고 데이터를 효율적으로 검색하고 조작할 수 있는 매우 강력한 자료 구조입니다. 사용자 정의 객체를 딕셔너리에 저장하려고 할 때, 중요한 개념은 파이썬의 객체 할당이 실제로는 객체의 깊은 복사라기보다는 참조 할당이라는 것입니다. 즉, 사용자 정의 객체를 딕셔너리에 넣으면 딕셔너리에는 해당 객체의 참조가 저장되고 객체의 새로운 복사본이 저장되는 것이 아닙니다.&lt;/p&gt;
&lt;h2 id=&#34;사용자-정의-객체-저장의-기본-예제&#34;&gt;사용자 정의 객체 저장의 기본 예제
&lt;/h2&gt;&lt;p&gt;가정해 봅시다, 간단한 &lt;code&gt;Person&lt;/code&gt; 클래스가 있다고 하면:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# 创建一个 Person 对象
p1 = Person(&amp;quot;Alice&amp;quot;, 30)

# 将对象存储到字典中
people_dict = {}
people_dict[&amp;quot;alice&amp;quot;] = p1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 예제에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 字典现在包含一个键为 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 的项，其值是对 __INLINE_CODE_2__BOLD_7&lt;code&gt;p1&lt;/code&gt;BOLD_8__INLINE_CODE_4__의 속성:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1.age = 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그러면 딕셔너리로 해당 객체에 접근하면 나이가 업데이트된 것을 확인할 수 있습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(people_dict[&amp;quot;alice&amp;quot;].age)  # 输出：31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사전에는 &lt;code&gt;Person&lt;/code&gt; 객체의 독립적인 복사본이 저장되는 것이 아니라, 동일한 메모리 주소를 가리키는 참조가 저장되기 때문입니다&lt;/p&gt;
&lt;h2 id=&#34;깊은-복사와-얕은-복사의-차이점&#34;&gt;깊은 복사와 얕은 복사의 차이점
&lt;/h2&gt;&lt;p&gt;중첩된 데이터 구조나 사용자 정의 객체를 다룰 때는 이러한 참조 동작으로 인해 예기치 않은 결과가 발생할 수 있습니다. 예를 들어, 사용자 정의 객체에 변경 가능한 속성(예: 리스트나 다른 사용자 정의 객체)이 포함되어 있으면, 딕셔너리에 그런 객체를 직접 저장하고 수정하면 딕셔너리를 통해 접근한 객체에도 영향을 미칩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Address:
    def __init__(self, street, city):
        self.street = street
        self.city = city

class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

address = Address(&amp;quot;Main St.&amp;quot;, &amp;quot;Springfield&amp;quot;)
p1 = Person(&amp;quot;Bob&amp;quot;, 40, address)
people_dict[&amp;quot;bob&amp;quot;] = p1

# 修改原始地址对象
address.city = &amp;quot;Shelbyville&amp;quot;

# 字典中的人的地址也变了
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 输出：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决办法：深拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이러한 공유 상태로 인한 문제를 피하기 위해 때로는 딕셔너리에 객체의 완전한 복사본을 저장하도록 해야 하며, 이를 위해 Python은 &lt;strong&gt;copy&lt;/strong&gt;() 함수를 제공합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import copy

# 使用深拷贝存储对象
people_dict[&amp;quot;bob_deepcopy&amp;quot;] = copy.deepcopy(p1)

# 此时即使修改原始地址对象，深拷贝的对象不会受影响
address.city = &amp;quot;Capital City&amp;quot;
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 输出：Capital City
print(people_dict[&amp;quot;bob_deepcopy&amp;quot;].address.city)  # 输出：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;파이썬에서 딕셔너리로 사용자 정의 객체를 저장할 때는 기본적으로 객체 참조가 저장된다는 점에 유의해야 합니다. 독립적인 상태를 유지해야 하는 경우에는 공유 참조로 인한 예기치 않은 데이터 변경을 피하기 위해 깊은 복사(&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;)를 사용하십시오.&lt;/p&gt;</description>
        </item>
        <item>
        <title>스테이블 디퓨전 - 제로베이스 설치의 흥망성쇠</title>
        <link>https://blog.ttf248.life/ko/p/stable-diffusion-zero-install-saga/</link>
        <pubDate>Thu, 13 Apr 2023 00:23:54 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/stable-diffusion-zero-install-saga/</guid>
        <description>&lt;p&gt;국내 자료들을 보니, 기본적으로 &lt;strong&gt;秋叶&lt;/strong&gt; 전문가의 원클릭 배포 패키지를 추천하는 것 같아. &lt;code&gt;Python&lt;/code&gt; 기반 오픈소스 프로젝트라서 복잡하지 않을 테니, 일단 처음부터 시작해 보려고 해.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI 생성 이미지 만들려고 그래픽 카드까지 바꿨는데, &lt;strong&gt;INLINE_CODE_0__入门版本；服役七年的__INLINE_CODE_1&lt;/strong&gt; 영광스럽게 종료되네요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;핵심 암호화가 계속 활성화되지 않습니다&lt;/p&gt;
&lt;h2 id=&#34;미처리&#34;&gt;미처리
&lt;/h2&gt;&lt;p&gt;기사 구조를 재구성하여 pytorch, 버전 호환성, 버전을 확인하는 방법을 먼저 소개합니다
로컬에서 어떻게 처음부터 가상 환경을 만들고 PyTorch를 배포할 수 있나요?
3. 번역 작업, Stable Diffusion 설치부터 시작 &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;
자료 정리&lt;/p&gt;
&lt;h2 id=&#34;단계&#34;&gt;단계
&lt;/h2&gt;&lt;p&gt;중국어로 검색해도 관련 단계별 설치 튜토리얼을 찾기 어려울 수 있습니다. __INLINE_CODE_0__BOLD_3&lt;code&gt;git&lt;/code&gt;BOLD_4&lt;code&gt;python&lt;/code&gt; 후, 저장소를 다운로드하고 스크립트를 더블 클릭하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;자세한 사용법 및 Q&amp;amp;A는 &lt;code&gt;issues&lt;/code&gt;，&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&lt;/a&gt;에서 확인하세요&lt;/p&gt;
&lt;p&gt;저도 왜인지 모르겠지만 이 창고가 뭐하는 곳인지 설명해 주는 사람이 없네요. 사실 이름만 봐도 알 수 있습니다. 인터페이스 콘솔이고, 우리를 더 편리하게 사용할 수 있도록 해 줍니다. 실제로 설치할 때, 그는 공식 저장소 내용을 다운로드하여 실제 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 코드를 가져옵니다.&lt;/p&gt;
&lt;p&gt;저장소와 함께 설치 시작 스크립트도 만들었습니다. 현재 폴더에 __INLINE_CODE_0__虚拟环境。如果有的话默认使用当前路径的的__INLINE_CODE_1__이 있는지 자동으로 인식합니다.&lt;/p&gt;
&lt;p&gt;순수 백지 사용자라면, &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;을 확인해 보세요&lt;/p&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;pytorch
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기서 제가 오늘 말씀드리고 싶은 건, 우선 그들의 단계대로 스크립트를 바로 실행하지 마세요. Python은 requirement 파일로 의존성 라이브러리를 설치하는데, 이건 별거 아니에요. 핵심은 그래픽 카드 드라이버 버전이 PyTorch와 호환되는지 확인하는 겁니다. 이 부분에 대한 정보도 많은 자료가 있으니 인터넷에서 찾아보시면 됩니다.&lt;/p&gt;
&lt;p&gt;참조: &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_40660408/article/details/129896700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_40660408/article/details/129896700&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;가상 환경을 하나 만들고, 빈 가상 환경에서 바로 공식 웹사이트 스크립트를 실행하여 pytorch를 설치하면 됩니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.version.cuda)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.__version__, torch.cuda.is_available())&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위에 두 스크립트는 설치해야 할 CUDA 버전을 확인하고, 설치 성공 여부를 확인할 수 있습니다&lt;/p&gt;
&lt;p&gt;여기 화려한 조작은 권장하지 않습니다. 공식 페이지의 로직을 그대로 복사해서 설치하면 되고, pip으로 설치하면 실패하거나 CUDA가 활성화되지 않을 가능성이 높습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;중요: 폴더 경로에 불필요한 내용이 있으면 pytorch 사용이 어려워질 수 있습니다&lt;/p&gt;
&lt;p&gt;중간에 여러 번 설치하고, 공식 설치 파일을 다운로드하여 수동으로 설치하는 방법도 시도했습니다. 2.0 버전으로 업그레이드하려고 했는데, 공식 문서에는 2.0 버전이 속도가 빠르다고 되어 있습니다. 하지만 이전에는 많이 사용하지 않았고, Python 버전과 이것이 영향을 미치는지도 모르겠습니다. 중간에 공식 매뉴얼을 살펴보니 3.8 버전을 사용하는 것이 좋다고 합니다. 이로 인해 약간의 충돌이 발생했는데, 기존에 원클릭 설치 패키지를 사용했더니 그 안에 3.10 버전이 포함되어 있었습니다. 결국 처음부터 다시 시작하여 새 폴더를 만들고 가상 환경을 생성하고 torch가 성공적으로 설치되었는지 확인했습니다.&lt;/p&gt;
&lt;p&gt;그런 다음 이 설치된 가상 환경을 웹 UI 폴더 안으로 이동하세요. 그러면 스크립트 설치 시 다른 의존성 문제는 크게 줄어들 겁니다.&lt;/p&gt;
&lt;p&gt;이동 후에는 다음을 실행하세요: python -m pip install &amp;ndash;upgrade &amp;ndash;force-reinstall pip로 pip를 수정합니다&lt;/p&gt;
&lt;p&gt;꽤 엉뚱해 보일 수도 있지만, 이 부분은 한참을 고생했어요. 제 torch를 제대로 인식하지 못해서요. 모든 간섭 요소를 배제하기 위해 먼저 이걸 설치한 다음에 다른 의존성 라이브러리를 설치하려고 했어요.&lt;/p&gt;
&lt;h2 id=&#34;xformers&#34;&gt;Xformers
&lt;/h2&gt;&lt;p&gt;권장 설정입니다. 이미지 생성 속도를 높이고 기존 사용량을 줄여줍니다. 부작용은 &lt;strong&gt;生成的图像相对不是那么稳定&lt;/strong&gt; 입니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stable-diffusion-webui:Xformers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/diffusers/optimization/xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huggingface optimization&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Optimization Ratio&lt;/th&gt;
&lt;th&gt;Time taken&lt;/th&gt;
&lt;th&gt;Torch active/reserved&lt;/th&gt;
&lt;th&gt;Sys VRAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100.00%&lt;/td&gt;
&lt;td&gt;2m 57.03s&lt;/td&gt;
&lt;td&gt;7440/10058 MiB&lt;/td&gt;
&lt;td&gt;12288/12288 MiB (100.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;51.02%&lt;/td&gt;
&lt;td&gt;1m 29.21s&lt;/td&gt;
&lt;td&gt;4547/7164 MiB&lt;/td&gt;
&lt;td&gt;9298/12288 MiB (75.67%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;((masterpiece)),((best quality)),((high detial)),((realistic,))
Industrial age city, deep canyons in the middle,chinese architectural streets,bazaars, Bridges, (rainy days:1.2), (steampunk:0.8), chinese architecture
Negative prompt: nsfw,((cowboy)),(((pubic))), ((((pubic_hair))))sketch, duplicate, ugly, huge eyes, text, logo, monochrome, worst face, (bad and mutated hands:1.3), (worst quality:2.0), (low quality:2.0), (blurry:2.0), horror, geometry, bad_prompt, (bad hands), (missing fingers), multiple limbs, bad anatomy, (interlocked fingers:1.2), Ugly Fingers, (extra digit and hands and fingers and legs and arms:1.4), crown braid, ((2girl)), (deformed fingers:1.2), (long fingers:1.2),succubus wings,horn,succubus horn,succubus hairstyle, (bad-artist-anime), bad-artist, bad hand, borrowed character, text focus, watermark, sample watermark, character watermark, lofter username, photo date watermark, movie poster, magazine cover, journal, cover, cover page, doujin cover, album cover, manga cover, brand name imitation, EasyNegative,Tights, silk stockings,shorts
Steps: 35, Sampler: DPM adaptive, CFG scale: 5.5, Seed: 2223996555, Size: 1088x1088, Model hash: 543bcbc212, Model: base_Anything-V3.0-pruned, Clip skip: 2, ENSD: 31337
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;원래 추천하는 원클릭 배포 패키지가 아니라서요. 그 패키지 안에는 작성자가 개인적으로 설정한 부분이 있어서, 공식 버전과 완전히 동일하지 않거든요. 초보자라면 왜 그런 설정을 해야 하는지 모를 수 있으니, 일단은 공식 버전을 사용하는 게 좋습니다. 사용 시간이 늘어날수록 공식 매뉴얼을 살펴보면 어떤 파라미터를 조정해야 할지 알게 될 거예요.&lt;/p&gt;
&lt;h2 id=&#34;그래픽카드-선택&#34;&gt;그래픽카드 선택
&lt;/h2&gt;&lt;p&gt;데이터 화폐 채굴 이후, 그래픽카드 가격이 상대적으로 많이 내렸고, 일반적인 초보 유저라면 &lt;strong&gt;INLINE_CODE_0__BOLD_4&lt;code&gt;3060ti&lt;/code&gt;BOLD_5__INLINE_CODE_2__版本的3060，毕竟能生成更大分辨率的图，为什么需要更大的分辨率，因为你可以在生成的时候，把分辨率调大，这样生成的图像就会更加清晰，更加细腻。如果你是想要生成一些小图，那么__INLINE_CODE_3&lt;/strong&gt; VRAM도 충분합니다&lt;/p&gt;
&lt;p&gt;아직 한 가지 더 있는데, &lt;strong&gt;高清放大&lt;/strong&gt; 옵션은 디테일을 구체화하여 화면의 디테일을 더욱 풍부하게 만들지만, 더 많은 비디오 메모리가 필요합니다&lt;/p&gt;
&lt;p&gt;다음은 NVIDIA GeForce GTX 970, GeForce RTX 3060 Ti, GeForce RTX 3060, GeForce RTX 3080 및 GeForce RTX 3080 Ti의 단정밀도(FP32), 반정밀도(FP16) 및 배정밀도(FP64) 부동소수점 연산 능력 사양 요약표입니다&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;그래픽 카드 모델&lt;/th&gt;
&lt;th&gt;출시 연도&lt;/th&gt;
&lt;th&gt;단정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;th&gt;반정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;th&gt;배정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce GTX 970&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;3.49&lt;/td&gt;
&lt;td&gt;87.2&lt;/td&gt;
&lt;td&gt;0.109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060 Ti&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;16.2&lt;/td&gt;
&lt;td&gt;32.4&lt;/td&gt;
&lt;td&gt;0.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;12.7&lt;/td&gt;
&lt;td&gt;25.4&lt;/td&gt;
&lt;td&gt;0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;29.8&lt;/td&gt;
&lt;td&gt;58.9&lt;/td&gt;
&lt;td&gt;0.93&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080 Ti&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;34.8&lt;/td&gt;
&lt;td&gt;68.7&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;링크된 내용입니다&lt;/p&gt;
&lt;h2 id=&#34;업데이트&#34;&gt;업데이트
&lt;/h2&gt;&lt;p&gt;반년 정도의 공백을 두고, 설치 단계 정리나 기초 개념 설명도 하고 싶었지만, 결국 일반인들은 AI 그림을 그리는 것이 고수들이 제공한 이미지 파라미터를 기반으로 조정하거나, 기존 이미지를 바탕으로 형식화된 재렌더링에 불과하다는 것을 알게 되었다&lt;/p&gt;
&lt;p&gt;중간에 AI로 미니 프로그램 UI 소재를 그리는 프로젝트가 있었는데, 반쯤 포기하고 직접 공식 미니 프로그램에서 리소스를 가져오는 게 더 나은 것 같아&lt;/p&gt;</description>
        </item>
        <item>
        <title>새로운 언어를 배워야 하는 이유는 무엇인가?</title>
        <link>https://blog.ttf248.life/ko/p/why-learn-a-new-language/</link>
        <pubDate>Thu, 04 Aug 2022 11:27:30 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/why-learn-a-new-language/</guid>
        <description>&lt;p&gt;학창 시절부터 시작해서 &lt;code&gt;C++&lt;/code&gt;을 접한 지 벌써 10년이 넘었으니, 다른 프로그래밍 언어를 배울 필요가 있을까요?&lt;/p&gt;
&lt;p&gt;세련된 모듈 설계 경험은 부족하지만, 문법은 자유롭고 다른 언어를 학습하면서 더 세련된 설계를 유도할 수 있습니다&lt;/p&gt;
&lt;p&gt;도구들을 만들 때 자주 사용하게 된다&lt;/p&gt;
&lt;p&gt;설계 원칙은 하위 레이어 라이브러리든, 비즈니스 모듈 구현이든 모두 통일되어 있습니다&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
