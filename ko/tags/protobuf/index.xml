<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Protobuf on 향숙의 수첩</title>
        <link>https://blog.ttf248.life/ko/tags/protobuf/</link>
        <description>Recent content in Protobuf on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ko/tags/protobuf/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>프로토콜 버퍼 기본값 함정: 기본값이 비즈니스 로직의 숨겨진 살인자</title>
        <link>https://blog.ttf248.life/ko/p/protobuf-zero-value-traps/</link>
        <pubDate>Thu, 20 Feb 2025 15:26:51 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/protobuf-zero-value-traps/</guid>
        <description>&lt;p&gt;미국 주식 시장은 세 가지 거래 시간대로 나뉘는데, 전시장, 장중, 장후가 있습니다. 데이터 인터페이스는 가능한 한 대역폭을 절약하기 위해 최초에는 전체 데이터를 전송하고, 이후부터는 모든 필드를 증분 방식으로 푸시합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;최적의 방안을 안 쓰는 이유는 무엇인가요? 여러 프로젝트 그룹에 영향을 미치고, 일부는 이미 오래전에 배포되었기 때문입니다. 저희 쪽은 새로 연결하는 입장이므로 최대한 호환성을 고려할 수밖에 없습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;일련의-문제&#34;&gt;일련의 문제
&lt;/h2&gt;&lt;p&gt;초록만 보면 별다른 문제 없어 보이지만, 시스템 아키텍처에 문제가 유입되면서 일련의 문제가 발생했다. 막 지난 문제를 해결하려니 또 다른 문제가 생겼는데, 이 문제는 이전 문제 때문에 생긴 것이다.&lt;/p&gt;
&lt;h3 id=&#34;거래-시간-식별-불가&#34;&gt;거래 시간 식별 불가
&lt;/h3&gt;&lt;p&gt;알려진 디스크 상태는 __INLINE_CODE_0__BOLD_2&lt;code&gt;零&lt;/code&gt;이 기본값인지, 실제 비즈니스 값인지를 나타냅니다&lt;/p&gt;
&lt;p&gt;일반적인 이해로, 0을 받을 때마다 이 0이 새로운 시세 설정 값인지, 아니면 protobuf의 기본값인지 판단하기 어렵습니다&lt;/p&gt;
&lt;h3 id=&#34;선택-사항-도입&#34;&gt;선택 사항 도입
&lt;/h3&gt;&lt;p&gt;Since protobuf release 3.15, proto3 supports using the optional keyword (just as in proto2) to give a scalar field presence information&lt;/p&gt;
&lt;p&gt;조 내 통신 프로토콜은 &lt;code&gt;protobuf&lt;/code&gt;BOLD_3&lt;code&gt;optional&lt;/code&gt; 关键字。懂的都理解，由于从底层开始引入 &lt;code&gt;protobuf&lt;/code&gt;을 기반으로 하며, 프로젝트 하위 계층이 정적 라이브러리 방식으로 배포되어 전체 컴파일 링크를 업그레이드해야 하는데, 이 비용은 매우 높습니다&lt;/p&gt;
&lt;h3 id=&#34;gcc-버전-문제&#34;&gt;GCC 버전 문제
&lt;/h3&gt;&lt;p&gt;어떻게든 대안을 마련했는데, 하위에서 두 가지 다른 버전을 출시하여 최대한 &lt;code&gt;protobuf&lt;/code&gt; 新版本的编译依赖传播。但是在编译的时候，发现 &lt;code&gt;gcc&lt;/code&gt; 版本太低，不支持 &lt;code&gt;protobuf&lt;/code&gt;의 새로운 기능을 제어하려고 합니다&lt;/p&gt;
&lt;p&gt;팀 내에서 주로 사용되는 서버 유형은 CentOS 7, CentOS 8입니다. CentOS 7의 기본 버전이 7.4 이상이기 때문에 CentOS 7을 지원하지 않습니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bug 82461 - [7 Regression] Temporary required for brace-initializing (non-literal-type) member variable&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;최종적으로 관련 서비스 배포 및 컴파일 서버를 CentOS 8로 옮겨 이 문제를 해결했습니다&lt;/p&gt;
&lt;h2 id=&#34;합리적-열거&#34;&gt;합리적 열거
&lt;/h2&gt;&lt;p&gt;전체 문제를 되돌아보면, 사실 더 간단하고 효율적인 해결책이 있습니다. 열거형의 정의를 0부터 시작하는 대신 1부터 시작하도록 조정하면 기본값과 비즈니스 값을 효과적으로 구별하여 위에서 언급한 일련의 번거로움을 피할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;왜-1부터-시작하는-것이-더-합리적일까요&#34;&gt;왜 1부터 시작하는 것이 더 합리적일까요?
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 내에서, 열거형의 기본값은 항상 0으로 고정됩니다. 만약 의미 있는 비즈니스 값을 0으로 정의한다면(예: &amp;ldquo;판 중&amp;rdquo;), 증분 푸시 시 비즈니스 측에서는 수신된 0이 비즈니스 값인지 아니면 초기화되지 않은 기본값인지 판단할 수 없습니다. 하지만 열거형을 1부터 시작하여 정의하면, 0은 무의미한 기본값 또는 &amp;ldquo;알 수 없음&amp;rdquo; 상태로 유지될 수 있으며, 문제는 해결됩니다.&lt;/p&gt;
&lt;p&gt;제안된 방법:&lt;/p&gt;
&lt;p&gt;프로토콜 버퍼 열거형을 설계할 때 항상 0을 무의미한 기본값으로 정의하십시오
실제 비즈니스 값을 1부터 할당하여 기본값 0과 구분합니다&lt;/p&gt;
&lt;p&gt;이 작은 조정으로 우리는 거래 시간대 식별 문제를 해결했을 뿐만 아니라, 향후 프로토콜 설계에 귀중한 교훈을 얻었습니다&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
