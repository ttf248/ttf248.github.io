<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Auto-Test on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/auto-test/</link>
        <description>Recent content in Auto-Test on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Sun, 25 May 2025 14:10:37 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/auto-test/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>자동화 테스트에 대한 간략한 소개</title>
        <link>https://ttf248.life/ko/p/shallow-discussion-on-automation-testing/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/shallow-discussion-on-automation-testing/</guid>
        <description>&lt;p&gt;금융 거래 시스템에 대한 테스트 투자액은 다른 시스템보다 훨씬 높지만, 복잡한 테스트 단계가 반복되고 &lt;code&gt;ROI&lt;/code&gt;는 너무 낮습니다. 프로젝트와 인력의 교체로 인해 피할 수 없이 더 많은 통제 불가능한 요소들이 유입되고 있으며, 흔히 A 인터페이스 출력의 특정 필드를 수정하면 B 인터페이스 결과에 영향을 미치는 경우가 발생합니다. 매번 버전이 출시될 때마다 위험도 누적됩니다.&lt;/p&gt;
&lt;h2 id=&#34;이론적-지식&#34;&gt;이론적 지식
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;자동화의 가치를 어떻게 측정할 수 있나요?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자동화 테스트 사례 ROI = (수동 실행 시간) * (실행 횟수) / (개발 비용 + 유지 보수 비용)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;어떤 기능에 자동화 테스트가 필요합니까?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사용자가 자주 사용하는 기능, 자주 변경되지 않는 기능에 대해 자동화 테스트 코드를 작성하면 가장 큰 효과를 볼 수 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자동화 테스트를 추진하기 위한 이 시점을 선택한 이유는 무엇입니까?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로젝트 출시가 임박한 시점에는 적절하지 않습니다. 멀리 있는 물로 당장의 갈증을 해결할 수 없으며, 자동화는 장기적인 수익 모델입니다. 프로젝트는 이미 &lt;strong&gt;실제 운영 환경&lt;/strong&gt;에 배포되었고 안정적인 릴리스 주기를 맞이하고 있으므로 지금이 가장 적합합니다.&lt;/p&gt;
&lt;h2 id=&#34;프레임-선택&#34;&gt;프레임 선택
&lt;/h2&gt;&lt;p&gt;관련된 실무 경험이 부족한 상태에서 자동화 테스트라는 과제를 받았다면, 일반적인 시작은 다음과 같다: 검색 엔진을 열어 현재 시스템의 &lt;strong&gt;기술 스택&lt;/strong&gt;에 사용할 수 있는 도구와 프레임워크를 찾고 사용 설명서를 훑어본다. 바로 적절한 도구를 찾으면 축하한다, &lt;strong&gt;완벽한 시작&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;먼저 잘못했다고 말씀드립니다. 관련 자료를 확인해 보니 없다는 게 아니라 프레임워크 자체가 너무 복잡하고, 배포 시 점유하는 리소스도 많습니다. 초보자 입문에는 작고 간결한 것이 필요합니다. 테스트 그룹 동료들과 상의 결과 기존 유닛 테스트 프레임워크를 활용하여 자동화 테스트 프레임워크로 캡슐화하는 &lt;code&gt;Python&lt;/code&gt; 자체 구축 프레임워크가 언급되었습니다.&lt;/p&gt;
&lt;p&gt;이 프로젝트의 디자인 아이디어를 참고하세요: &lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;프레임워크가-왜-필요할까요&#34;&gt;프레임워크가 왜 필요할까요?
&lt;/h2&gt;&lt;p&gt;서비스는 여러 개의 다양한 배포 환경을 가지고 있습니다. 개발 환경, 테스트 환경, 온라인 테스트 환경이 있으며, 프레임워크의 역할은 계층을 분리하고 테스트 사례와 데이터를 분리하는 것입니다. 각 환경에 따라 다른 사례 데이터를 구성하며, 물론 공통 데이터도 지원합니다.&lt;/p&gt;
&lt;p&gt;핵심적인 논리는 자동화 활용률을 높이기 위한 것이다. 시나리오가 더 복잡해지고, 서로 다른 환경 간의 데이터는 일관성이 없고 아무런 관련이 없다면, 설정 사례 데이터를 추가할 때 &lt;code&gt;label&lt;/code&gt; 태그를 늘려 현재 데이터가 지원하는 환경을 지정하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;가성비 최고의 자동화 테스트를 구축하세요&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
