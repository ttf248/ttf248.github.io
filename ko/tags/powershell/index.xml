<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Powershell on 향숙의 수첩</title>
        <link>https://ttf248.life/ko/tags/powershell/</link>
        <description>Recent content in Powershell on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://ttf248.life/ko/tags/powershell/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>파워셸 7과 지속 가능한 설정 명령줄 예측 보기</title>
        <link>https://ttf248.life/ko/p/powershell-7-persisting-settings-command-line-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://ttf248.life/ko/p/powershell-7-persisting-settings-command-line-prediction-view/</guid>
        <description>&lt;p&gt;Linux의 zsh에 익숙해져서, 블로그를 쓰려고 했을 때 갑자기 PowerShell 7도 영구적인 설정으로 명령줄 예측 뷰를 지원하는 것을 발견해서 한번 시켜봤는데, 꽤 괜찮게 잘 된다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;어떻게든 뭔가 조작을 한 건지, 기능을 켰더니 그냥 생겼다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;오늘날 다양한 운영체제 환경에서 시스템 관리자와 개발자들은 플랫폼 간 호환성, 효율성 및 강력한 기능을 갖춘 도구를 찾아 시스템 관리 및 자동화 작업의 요구를 충족하고자 합니다. PowerShell 7은 이러한 주목을 받는 도구 중 하나로, 강력한 스크립팅 기능뿐만 아니라 Windows, Linux 및 macOS 등 다양한 운영체제에서 실행될 수 있어 사용자에게 전례 없는 편의성을 제공합니다.&lt;/p&gt;
&lt;h2 id=&#34;파워셸-7-강력한-크로스-플랫폼-도구&#34;&gt;파워셸 7: 강력한 크로스 플랫폼 도구
&lt;/h2&gt;&lt;h3 id=&#34;플랫폼-간-호환성&#34;&gt;플랫폼 간 호환성
&lt;/h3&gt;&lt;p&gt;PowerShell 7은 플랫폼 제약을 없애 Windows, Linux, macOS 환경에서 모두 동일한 PowerShell 7 도구를 사용하여 기업용 서버 관리, 시스템 운영 및 일상적인 개발 작업을 수행할 수 있습니다. 이는 업무 효율성을 크게 높이고 플랫폼 차이로 인한 학습 비용과 복잡성을 줄입니다.&lt;/p&gt;
&lt;h3 id=&#34;강력한-기능&#34;&gt;강력한 기능
&lt;/h3&gt;&lt;p&gt;스크립트 작성 능력과 객체 지향 프로그래밍, 함수, 모듈 등 고급 프로그래밍 기능을 제공합니다. PowerShell 7을 통해 사용자는 파일 시스템을 쉽게 조작하여 파일 및 폴더 생성, 삭제, 복사, 이동 등의 작업을 수행하고, 레지스트리를 액세스하고 수정하여 시스템 구성을 심층적으로 조정할 수 있습니다. 또한 프로세스와 서비스를 관리하여 시스템 실행 상태를 효과적으로 모니터링하고 제어할 수 있습니다. 게다가 PowerShell 7은 Active Directory에서 사용자 및 권한 관리를 포함하여 Windows 및 비 Windows 기술과 상호 작용하며 Azure 클라우드 플랫폼에서 리소스 할당 및 관리를 수행할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;오픈소스-생태계&#34;&gt;오픈소스 생태계
&lt;/h3&gt;&lt;p&gt;파워셸 7은 오픈 소스이므로 전 세계 개발자와 애호가들이 적극적으로 참여하여 개발 및 개선할 수 있습니다. 다양한 오픈 소스 모듈과 도구가 지속적으로 등장하며 파워셸 7의 기능과 활용 분야를 풍부하게 합니다. 사용자는 자신의 필요에 따라 오픈 소스 커뮤니티에서 적절한 모듈을 찾아 기능을 확장하거나, 코드를 기여하여 전체 커뮤니티 발전에 동참할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;호환성-및-안정성&#34;&gt;호환성 및 안정성
&lt;/h3&gt;&lt;p&gt;PowerShell 7은 이전 버전과의 호환성을 유지하면서도 많은 새로운 기능과 개선 사항을 도입했습니다. 이러한 개선 사항은 성능 향상뿐만 아니라 안정성 강화에도 기여하여 사용자가 더욱 원활하게 작업을 완료하고 소프트웨어 오류로 인한 업무 중단을 줄일 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;명령줄-예측-보기-열기&#34;&gt;명령줄 예측 보기 열기
&lt;/h2&gt;&lt;p&gt;파워셸 7의 다양한 유용한 기능 중, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 명령은 사용자 명령줄 입력 경험을 향상시키는 실용적인 도구입니다&lt;/p&gt;
&lt;p&gt;명령어 자동 완성 기능을 켤 필요 없이도 사용할 수 있지만, 이는 줄 안에서의 자동 완성에 그칩니다. 기능을 활성화하면 예측 보기로 가능한 모든 자동 완성 옵션을 목록 형태로 표시하고, 사용자는 위아래 화살표 키를 사용하여 원하는 옵션을 선택하여 명령어 입력의 정확성과 효율성을 높일 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;명령을-영구적으로-유지하는-방법&#34;&gt;명령을 영구적으로 유지하는 방법
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 명령이 PowerShell을 시작할 때마다 적용되도록 하려면 PowerShell 프로필 파일에 추가할 수 있습니다. PowerShell 프로필 파일은 PowerShell 시작 시 자동으로 실행되는 특수한 스크립트입니다.&lt;/p&gt;
&lt;h3 id=&#34;설정-파일-경로-확인&#34;&gt;설정 파일 경로 확인
&lt;/h3&gt;&lt;p&gt;PowerShell에서, 우리는 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 변수를 사용하여 구성 파일의 경로를 확인할 수 있습니다. 해당 경로에 파일이 없으면 사용자가 직접 생성할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;설정-파일-열기&#34;&gt;설정 파일 열기
&lt;/h3&gt;&lt;p&gt;텍스트 편집기(예: 강력한 Notepad++ 또는 가벼운 Visual Studio Code)를 사용하여 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 변수에 저장된 설정 파일 경로에 해당하는 파일을 엽니다&lt;/p&gt;
&lt;h3 id=&#34;추가-명령&#34;&gt;추가 명령
&lt;/h3&gt;&lt;p&gt;열려 있는 설정 파일에 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 명령을 추가합니다. 명령어를 정확하게 작성하여 설정 파일이 실행될 때 제대로 적용되도록 합니다.&lt;/p&gt;
&lt;h3 id=&#34;구성-파일-저장&#34;&gt;구성 파일 저장
&lt;/h3&gt;&lt;p&gt;명령 추가가 완료되면 구성 파일을 저장하고 텍스트 편집기를 닫습니다. 이제 구성 파일에는 PowerShell 시작 시 실행할 명령이 포함되어 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;설정-확인&#34;&gt;설정 확인
&lt;/h3&gt;&lt;p&gt;현재 PowerShell 창을 닫은 후 다시 시작합니다. 새로 시작된 PowerShell에서 명령어를 입력하면, 명령줄 입력 예측 보기 스타일이 목록 보기 형태로 표시되어야 합니다. 이는 설정이 성공적으로 적용되었음을 의미합니다.&lt;/p&gt;
&lt;p&gt;위 단계를 통해 PowerShell 7의 강력한 기능과 특징을 깊이 있게 이해하고, 명령줄 입력 예측 보기 스타일 설정을 통해 작업 경험을 향상시키는 방법과 이러한 설정이 지속적으로 유지되도록 하는 방법을 익혔습니다. 이 지식이 PowerShell 7 사용 과정에서 더욱 능숙하게 시스템 관리 및 자동화 작업을 효율적으로 수행하는 데 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
