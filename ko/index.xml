<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>향숙의 수첩</title>
        <link>https://blog.ttf248.life/ko/</link>
        <description>Recent content on 향숙의 수첩</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko</language>
        <lastBuildDate>Wed, 28 May 2025 09:47:38 +0800</lastBuildDate><atom:link href="https://blog.ttf248.life/ko/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GitHub 페이지 이스터에그: 여러 페이지 배포</title>
        <link>https://blog.ttf248.life/ko/p/github-pages-easter-egg-deploy-multiple-sites/</link>
        <pubDate>Wed, 28 May 2025 02:55:54 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/github-pages-easter-egg-deploy-multiple-sites/</guid>
        <description>&lt;p&gt;최근 생체 리듬이 좀 엉망이라 새벽 두시 넘게까지도 Github Pages 배포를 만지작거렸어&lt;/p&gt;
&lt;p&gt;밤늦게까지 일하고 밥을 먹으러 갔더니, 딱 먹고 나자 졸리고, 다 먹고 돌아오니 8시 반쯤 됐는데 너무 피곤해서 잠깐 눈을 붙이려다 잠이 들어버렸네요. 깨보니 이미 새벽 2시가 넘었어요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;시작하기도 전에 사라진 분류: AI 학습회&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;망신당하다&#34;&gt;망신당하다
&lt;/h2&gt;&lt;p&gt;어제는 프론트엔드 일은 하지 말자고 했는데, 오늘은 프론트엔드가 아닌 UI/UX 경험을 개선해 봅시다&lt;/p&gt;
&lt;h2 id=&#34;프로젝트&#34;&gt;프로젝트
&lt;/h2&gt;&lt;p&gt;초청합니다, 우리의 오랜 친구 &lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/ai-coding-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;맞아요, 바로 기존 자선주 프로젝트고요, 이 프로젝트에서 전체 구조를 재구성하고, 이후 AI 프로그래밍 관련 내용은 모두 이 프로젝트 아래로 둘 예정입니다&lt;/p&gt;
&lt;h2 id=&#34;여러-페이지-배포&#34;&gt;여러 페이지 배포
&lt;/h2&gt;&lt;p&gt;프로젝트가 &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/ai-coding-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/ai-coding-demo&lt;/a&gt;에 호스팅되어 있는데, 널리 알려진 이유로 국내에서는 페이지를 게시할 수 없습니다. 따라서 해외 GitHub에 게시해야 합니다.&lt;/p&gt;
&lt;p&gt;블로그는 해외의 Github에 게시하는 것입니다. 아직 시도해보지는 않았지만, 여러 프로젝트 페이지를 발행하고, 현재 처리 중인 프로젝트는 전통적인 블로그 사이트가 아니라 문서가 많고 몇몇 정적 HTML 디자인 시안이 겹쳐져 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/github-pages-easter-egg-deploy-multiple-sites/20250528030230.png&#34;
	width=&#34;798&#34;
	height=&#34;530&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pages&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;맞아요, 이 페이지는 제가 처음 클릭했을 때 발견했는데, 여러 프로젝트의 페이지 배포가 블로그 게시물에 영향을 주지 않고, 블로그 도메인 아래 새로운 경로를 추가하는 방식이에요&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ttf248.life/ai-coding-demo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ttf248.life/ai-coding-demo/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기 보니 완벽하다!&lt;/p&gt;
&lt;h2 id=&#34;ai-학습회&#34;&gt;AI 학습회
&lt;/h2&gt;&lt;p&gt;어제 새로 만든 분류인데, AI를 통해 컴퓨터 과목을 많이 배우려고 하는데, 예를 들어 알고리즘이나 LeetCode 문제 풀이 같은 것들이다&lt;/p&gt;
&lt;p&gt;매 학습 기록을 블로그에 게시하여 지식 기반을 구축합니다. 새로운 분류: AI 연구소&lt;/p&gt;
&lt;p&gt;지금으로서는, 다른 수업마다 새로운 프로젝트를 만들고 학습 노트는 모두 해당 프로젝트의 Readme.md 파일에 작성하는 것이 좋겠습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>오래된 습관, 화려함에 눈이 멀다</title>
        <link>https://blog.ttf248.life/ko/p/old-ailment-stunning-flowers/</link>
        <pubDate>Mon, 26 May 2025 23:54:12 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/old-ailment-stunning-flowers/</guid>
        <description>&lt;p&gt;수년간 백엔드 개발에 집중해 왔는데, 최근 프론트엔드 인터페이스를 구현하기 위해 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 编程，并涉足了一些前端相关的内容。然而，在这段折腾的过程中，我逐渐意识到自己又陷入了一个老毛病——繁花迷人眼。总想着用 __INLINE_CODE_1__을 시도하기 시작했으나, 실제로는 현재 업무에 큰 도움이 되지 않고 오히려 에너지를 분산시키는 것 같습니다&lt;/p&gt;
&lt;h2 id=&#34;ai-적용-사례&#34;&gt;AI 적용 사례
&lt;/h2&gt;&lt;p&gt;소규모 프로젝트에서는 특히 독립성이 강하고 시스템과의 연계가 낮으며 비즈니스 로직이 간단한 함수를 작성할 때, AI 도구가 큰 역할을 할 수 있습니다. 이러한 작업은 일반적으로 명확한 입력과 출력을 가지며 컨텍스트 의존성이 적어 현재 AI 지원 프로그래밍의 역량 범위에 매우 적합합니다.&lt;/p&gt;
&lt;p&gt;그러나 복잡한 시스템 아키텍처나 심층적인 비즈니스 로직에 직면하면 AI의 한계가 점차 드러난다. AI는 겉으로는 합리적이지만 실제로는 프로젝트의 요구사항과 동떨어진 코드를 생성하거나, 해결하기 어려운 잠재적인 문제를 유발할 수도 있다. 이러한 상황에서는 AI를 완전한 코드 생성 도구로 의존하기보다는 보조 도구로 활용하는 것이 적절하다. 생성된 코드는 엄격하게 검토하고 테스트하여 실제 요구사항을 충족하는지 확인해야 한다.&lt;/p&gt;
&lt;h2 id=&#34;실패와-학습의-대가&#34;&gt;실패와 학습의 대가
&lt;/h2&gt;&lt;p&gt;AI를 활용하여 프론트엔드 코드를 생성하려 시도하는 과정에서 여러 어려움에 직면했습니다. 프론트엔드는 제가 익숙한 분야가 아니기 때문에 문제 해결 과정이 시간과 노력이 많이 소요됩니다. 프롬프트를 조정하여 AI가 코드를 재작성해도 초보적인 오류를 피하기 어렵습니다. 이러한 반복적인 시도는 시간을 낭비할 뿐만 아니라, 현재 제 에너지를 익숙하지 않은 분야에서 헤매는 대신 백엔드 비즈니스 로직에 집중하는 것이 더 중요함을 깨닫게 했습니다.&lt;/p&gt;
&lt;p&gt;주말에 완료한 그 프로젝트를 돌이켜보면, 백엔드 개발과 사용자 인터랙션 로직에 집중하고 콘솔을 통해 기능을 구현하는 것이 현재 가장 효율적인 선택이라는 확신이 듭니다. 더 많은 시간과 에너지가 있을 때 시스템적으로 프론트엔드 지식을 학습하는 것이 더 나은 전략일 수도 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;프론트엔드-학습-계획&#34;&gt;프론트엔드 학습 계획
&lt;/h2&gt;&lt;p&gt;프론트엔드 기술 스택이 복잡하고 다양해서 빠르게 익히는 것은 현실적이지 않습니다. 그래서 Vue.js나 React.js와 같이 하나의 프레임워크를 선택하여 핵심 개념과 사용법을 깊이 있게 학습할 계획입니다. 기초 지식을 숙지한 후에야 AI를 활용하여 프론트엔드 코드를 생성하면, 미숙함으로 인한 오류와 시간 낭비를 효과적으로 막을 수 있습니다.&lt;/p&gt;
&lt;p&gt;결국, 현재 단계에서는 백엔드 개발에 집중하며 핵심 역량을 꾸준히 강화하는 것이 중요합니다. 시기가 되면 프론트엔드와 AI의 결합을 탐색하면 더 큰 성과를 얻을 수 있을 것입니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>클로드4 출시, hugo 태그 및 하이퍼링크 번역 도우미 개발 시도</title>
        <link>https://blog.ttf248.life/ko/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</link>
        <pubDate>Sat, 24 May 2025 03:05:31 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/claude-4-release-and-experimentation-hugo-tags-hyperlink-translation-assistant/</guid>
        <description>&lt;p&gt;이 사이트는 hugo 기반이지만, 글 제목을 항상 중국어로 사용했기 때문에 생성되는 기사 링크가 친절하지 않습니다. 쉽게 말해서, 공유할 때 보기 좋지 않고, 중국어 문자가 링크에서 %E4%BD%A0%E5%A5%BD 와 같은 형태로 변환되기 때문입니다. 슬러그를 설정하여 해결할 수 있지만, 매번 수동으로 설정해야 해서 번거롭습니다.&lt;/p&gt;
&lt;p&gt;그래서 오늘 클로드4를 활용해 중국어 제목을 영어 슬러그로 자동 변환하고, 기사에 하이퍼링크를 추가하는 번역 도우미를 개발해 보았습니다. 이렇게 하면 수동 설정의 번거로움을 피할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;클로드4는 정말 좋네요, 문맥 이해 능력과 복잡한 작업 처리 효율이 크게 향상되었습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;프로젝트-주소&#34;&gt;프로젝트 주소
&lt;/h2&gt;&lt;p&gt;국내 프로젝트 주소: &lt;a class=&#34;link&#34; href=&#34;https://cnb.cool/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cnb.cool/ttf248/hugo-content-suite&lt;/a&gt;
해외 프로젝트 주소: &lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/hugo-content-suite&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/hugo-content-suite&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;코드-구현&#34;&gt;코드 구현
&lt;/h2&gt;&lt;p&gt;먼저 구현 아이디어부터 설명드리자면, 모든 문서를 스캔하여 태그 정보와 문서 제목을 추출한 다음, 로컬의 대형 모델(예: gemma-3-12b-it)을 사용하여 번역합니다&lt;/p&gt;
&lt;p&gt;실제 개발에서, 이전 세대 대규모 모델과 비교하여 &lt;code&gt;Claude4&lt;/code&gt; 展现了几个显著的亮点。由于功能需求较多，&lt;code&gt;Claude4&lt;/code&gt; 自动设计了交互式菜单，全面考虑了各种使用场景。例如，在标签处理方面，&lt;strong&gt;INLINE_CODE_2&lt;/strong&gt; 不仅支持标签的统计与分析，还包括分类统计，甚至能够检测** 태그 없는 문서 &lt;strong&gt;。此外，它还提供了&lt;/strong&gt; 미리 보기 및 생성 기능&lt;/p&gt;
&lt;p&gt;어떤 로컬 모델과 연결하든, 새로운 번역 캐시를 추가하든, 아니면 광범위한 코드 리팩토링을 하든, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 都一次性完成，几乎没有出现任何问题。尽管项目规模不大，但包含了许多小功能。以往在开发过程中，大模型经常会遗忘前面的内容，而这次的 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 表现非常出色，**거의 문맥을 잃는 경우가 발생하지 않습니다&lt;/p&gt;
&lt;p&gt;간단히 말해서, 지능이 향상되었고, 이후 개발 작업의 주력 모델로 사용하기 위해 __INLINE_CODE_0__으로 전환할 준비를 하고 있습니다&lt;/p&gt;
&lt;h2 id=&#34;번역-캐시&#34;&gt;번역 캐시
&lt;/h2&gt;&lt;p&gt;이 점은 단독으로 볼 때, 거대 모델 호출 횟수를 줄이는 것 외에도 실제 로컬에서 12B 모델을 실행하면 효율이 괜찮고 업무를 방해하지 않지만, 매번 거대 모델을 호출해야 하면 약간 느려지는 경향이 있습니다. 또한, 기사의 연결을 고정하기 위해 전체 업데이트 작업을 수행할 때 기사 제목이 길면 가끔씩 두 번 번역된 결과가 달라져서 기사 링크가 바뀌는 경우가 있는데, 이 부분은 상당히 난감합니다.&lt;/p&gt;
&lt;h2 id=&#34;기능-개선&#34;&gt;기능 개선
&lt;/h2&gt;&lt;p&gt;전체 프로젝트를 __INLINE_CODE_0__에게 맡기고 분석 및 최적화 여지를 확인한 결과, 다음과 같은 제안을 받았습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;配置外置化 - 提高可维护性和灵活性
结构化日志 - 便于问题排查和监控
性能监控 - 了解系统运行状况
用户体验 - 进度条等视觉反馈
错误处理 - 更完善的异常处理机制
代码组织 - 更清晰的模块划分
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;코드 검토 결과, 문제 없습니다. 예를 들어 설정 파일의 경우, 기존 코드 설정을 기본 설정으로 변환하고, 설정 파일을 읽을 때 해당 파일이 없으면 자동으로 생성하여 사용자 실수로 인한 오류를 방지합니다.&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;
&lt;/h3&gt;&lt;p&gt;요구 사항: 본문 번역 시 현재 번역 효율을 동적으로 계산하고, 남은 시간을 예측하여 콘솔에 관련 정보를 출력합니다. 현재 획득한 문서의 문자 수, 각 행 번역 시 현재 번역된 문자 수, 시간, 100자당 예상 번역 시간 등을 계산하며, 문서의 남은 번역 예상 시간도 함께 계산합니다.&lt;/p&gt;
&lt;p&gt;코드는 마무리했는데, 결과가 만족스럽지 않아서 AI에게 새로운 디자인 방안을 제시하도록 했어:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다양한 효율성 계산 방식 제공: 실시간 효율, 평균 효율, 슬라이딩 윈도우 효율&lt;/li&gt;
&lt;li&gt;표시 방식 개선: 진행률 표시줄, 단계별 통계, 동적 새로 고침&lt;/li&gt;
&lt;li&gt;더 유용한 지표 추가: API 호출 횟수, 성공률 등&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;코드 완성 후 새로운 깜짝 놀랄 일이 발견되었는데, 번역 효율 통계 정보가 실시간으로 화면을 채우지만 맹목적으로 아래로 스크롤되지는 않는다&lt;/p&gt;
&lt;p&gt;번역 전문을 영어로 번역 중입니다(총 7163자)
53행이 번역 필요로 감지됨
[1/53] Stage1/6 [░░░░░░░░░░░░░░░░░░░░░░░░░] 1.9% 번역 354자.
✅ 완료 (3.1초) | API 호출 #1
✅ 완료 (1.5초) | API 호출 #2
완료 (0.9초) | API 호출 #3
완료 (0.2초) | API 호출 #4
완료 (1.0초) | API 호출 #5
완료 (1.0초) | API 호출 #6
완료 (0.2초) | API 호출 #7
📊 진행률: 행 13.2% (7/53) | 문자 12.9% (925/7163) 114.6자/초 📊
⚡ 효율성: 실시간 76.4 | 평균 117.9 | 최근 109.0 | 단계별 113.6 자/초 📊
성공률: 100.0% (7/7) | 남은 항목: 46행, 7초] 9.4% 번역 110자.
예상 남은 시간: 55초 | 완료 예상: 00:10:19 8초] 11.3% 번역 114자…
처리 속도: 3211.3 행/분 | 총 소요 시간: 8초] 13.2% 번역 16 문자.
[8/53] Stage1/6 [███░░░░░░░░░░░░░░░░░░░░░░] 15.1% 번역 166자.&lt;/p&gt;
&lt;p&gt;이전에는 제어 프로그램 코드를 많이 작성해보지 않아서 어떻게 구현되었는지 궁금해서 코드 확인해 보았다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// 清屏并重新显示 (动态刷新效果)
if translationCount &amp;gt; 1 {
   fmt.Print(&amp;quot;\033[6A\033[K&amp;quot;) // 上移6行并清除
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;성능-통계-메뉴&#34;&gt;성능 통계 메뉴
&lt;/h3&gt;&lt;p&gt;새로 추가된 &lt;strong&gt;性能统计菜单&lt;/strong&gt;, 제가 직접 디자인해도 이렇게 완벽하게 만들 수 있을지 모르겠네요&lt;/p&gt;
&lt;p&gt;성능 통계:
번역 횟수: 360
⚡ 캐시 적중률: 1.4% (5/365)
평균 번역 시간: 315.927234ms
파일 작업: 73
오류 횟수: 0&lt;/p&gt;
&lt;h3 id=&#34;진행률-표시&#34;&gt;진행률 표시
&lt;/h3&gt;&lt;p&gt;새로운 &lt;strong&gt;进度条显示&lt;/strong&gt;, 상세한 진행 상황, 소요 시간, 남은 시간 예측&lt;/p&gt;
&lt;p&gt;기능 선택 (0-13): 10
번역 목표를 수집 중입니다…
📄 캐시 파일이 로드되었습니다. 번역 기록 0개 포함&lt;/p&gt;
&lt;p&gt;번역 캐시 통계:
🏷️ 총 태그 수: 229개
📝 총 기사 수: 131건
✅ 캐시됨: 0개
🔄 번역 필요: 360개&lt;/p&gt;
&lt;p&gt;전체 번역 캐시 생성 확인하시겠습니까? (y/n): y
🚀 전체 번역 캐시 생성 중…
📄 캐시 파일이 로드되었습니다. 번역 기록 0개 포함
검색 중인 번역 확인 중…
새로운 태그 360개 번역 필요
[░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 5/360 (1.4%) - 소요시간: 3초 - 예상 남은 시간: 3분 8초💾 캐시 파일 저장 완료, 번역 기록 5개 포함
[█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 10/360 (2.8%) - 소요시간: 6초 - 예상 남은 시간: 3분 28초💾 캐시 파일 저장, 번역 기록 10개 포함
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 15/360 (4.2%) - 소요시간: 9초 - 예상 남은 시간: 3분 30초💾 캐시 파일 저장 완료, 번역 기록 15개 포함
[██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 20/360 (5.6%) - 소요시간: 13초 - 예상 남은 시간: 3분 36초💾 캐시 파일 저장 완료, 번역 기록 20개 포함
[███░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 25/360 (6.9%) - 소요시간: 16초 - 예상 남은 시간: 3분 33초💾 캐시 파일 저장 완료, 번역 기록 25개 포함
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 30/360 (8.3%) - 소요시간: 19초 - 예상 남은 시간: 3분 30초💾 캐시 파일 저장 완료, 번역 기록 30개 포함
[████░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░] 35/360 (9.7%) - 용량: 22s - 예상 남은 시간: 3분 25초💾 캐시 파일 저장 완료, 번역 기록 35개 포함&lt;/p&gt;
&lt;hr&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;=== Hugo 博客管理工具 ===

🚀 核心功能
  1. 一键处理全部 (完整博客处理流程)

📝 内容管理
  2. 生成标签页面
  3. 生成文章Slug
  4. 翻译文章为多语言版本

💾 缓存管理
  5. 查看缓存状态
  6. 生成全量翻译缓存
  7. 清空翻译缓存

  0. 退出程序
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>계획출산 정책의 다차원적 영향: 사회 구조에서 경제 정치에 이르는 심층적 변화</title>
        <link>https://blog.ttf248.life/ko/p/planned-parenthood-multidimensional-impact-social-structure-economic-political-transformation/</link>
        <pubDate>Sat, 24 May 2025 02:36:49 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/planned-parenthood-multidimensional-impact-social-structure-economic-political-transformation/</guid>
        <description>&lt;p&gt;중국 인구 통제 정책은 인구 증가를 제한하는 동시에 가족 중심 발전을 억누르고 전통 사회 구조에 충격을 주었으며, 가족 기업 확장과 정계 재벌 세력을 억제했습니다. 한국 재벌이나 인도 가족 독점과는 대조적으로 그 독특성이 드러납니다. 출산 제한을 해제하면서 저출산 문제 등에 직면했지만 새로운 독점 위험성에 대한 경계도 필요하며, 다방면에서 균형을 모색해야 합니다.&lt;/p&gt;
&lt;h4 id=&#34;인구-통제와-가족-단위-발전의-흥망성쇠&#34;&gt;인구 통제와 가족 단위 발전의 흥망성쇠
&lt;/h4&gt;&lt;p&gt;계획출산 정책은 중국이 거의 40년 동안 지속해 온 기본 국책으로서, 직접적인 효과가 두드러집니다. 통계에 따르면 1978년부터 2007년까지 중국의 자연 인구 증가율은 12‰에서 5.2‰로 하락하고, 4억 명이 넘는 인구가 줄어들었으며, 세계 인구 비율은 22.2%에서 20.1%로 감소했습니다. 이러한 인구 증가율의 급격한 감소는 중국 사회의 가족 구조를 근본적으로 재편성했습니다. 가문 기업을 예로 들면, 계획출산 정책 시행 이후 기업주가 자녀를 낳는 숫자가 크게 줄었습니다. 정책 이전에는 세 명 이상의 자녀를 둔 비율이 40.63%였으나, 정책 이후 급격히 18.46%로 감소했고, 외아들 출생 비율은 6.25%에서 32.31%로 증가했습니다. 이러한 구조적 변화는 직접적으로 가문 기업이 선택할 수 있는 내부 승계 후보의 범위를 크게 줄여 객관적으로 가문 기업의 세대 간 확장 능력을 억제했습니다.&lt;/p&gt;
&lt;p&gt;한국과 인도의 상황을 비교하면 차이가 뚜렷하다. 한국은 엄격한 계획출산 정책을 시행하지 않았음에도 불구하고 출산율이 장기간 저조(2023년 0.7)하고 있으며, 재벌 그룹은 교차 보유, 상속세 회피 등의 수단을 통해 여전히 국가 경제의 핵심을 장악하고 있다. 5대 재벌의 총수입은 한국 GDP의 50%를 넘고, 삼성그룹만으로도 전국 GDP의 20%를 차지한다. 반면 인도는 79%의 경제적 생산이 가족 기업에 의해 기여하며, 6대 재단이 통신, 철강 등 핵심 분야를 장악하고 있으며, 20개 최고 기업이 전국 기업 이익의 80%를 차지하는 모습을 보인다. 이러한 차이의 핵심은 중국의 계획출산 정책이 가족 규모를 제한하여 가족 기업 확장의 인적 기반을 근본적으로 약화시킨 반면, 한국과 인도는 정책 환경의 차이로 인해 가족 세력이 경제 영역에 지속적으로 침투할 수 있었다는 점이다.&lt;/p&gt;
&lt;h4 id=&#34;제2항-독점-억제와-사회-구조-전환&#34;&gt;제2항: 독점 억제와 사회 구조 전환
&lt;/h4&gt;&lt;p&gt;계획수립 정책은 경제 분야에 미치는 영향으로, 특히 독점 현상을 억제하는 데 두드러지게 나타납니다. 중국 가족 기업은 딸의 수 감소로 인해 한인식 재벌 그룹을 형성하기 어렵습니다. 한국을 예로 들면, 재벌은 ‘순환 출자’를 통해 가문 통제권을 유지하며, 삼성 가문은 그룹 지점수의 2%만을 보유하고 있지만 복잡한 주주 구조를 통해 전체를 장악합니다. 중국에서는 계획수립 이후 가족 기업들이 보편적으로 “부자간 승계”의 어려움을 겪으며 전문 경영인을 영입하거나 지분 다각화 개혁을 진행할 수밖에 없었습니다. 펑湃新闻의 연구에 따르면, 계획수립 이후 가족 기업 여성 후계인 비율은 13.85%에서 34.21%로 증가했으며, 학력 또한 현저히 향상되어 학사 이상 학위 비율이 43.75%에서 98.46%로 상승했습니다. 이러한 변화는 가문 통제를 완전히 해소하지는 못했지만 단일 가문의 시장 독점 가능성을 크게 낮췄습니다.&lt;/p&gt;
&lt;p&gt;사회 구조적 측면에서, 산아구제 정책은 전통적인 가족 중심 모델의 붕괴를 가속화했습니다. 중국 가정 규모는 1982년 4.41명/가구에서 2020년 2.62명/가구로 감소했으며, 소규모 가정은 경제적, 교육적, 사회적 지원과 같은 가족 기능을 약화시켰습니다. 대조적으로 인도는 여전히 4명 정도의 가구 규모를 유지하며 카스트 제도가 가족 세력과 깊이 결합되어 있어 사회 이동성이 낮습니다. 중국의 가족 구조 변화는 개인주의 발전을 위한 공간을 창출했으며, 2023년에는 2억 4천만 명에 달하는 미혼 성인 인구가 발생하여 소비 시장에서 &amp;lsquo;1인 경제&amp;rsquo;가 부상하는 경향을 보이고 있습니다. 이러한 변화는 더욱 가족 경제의 영향력을 희석시켰습니다.&lt;/p&gt;
&lt;h4 id=&#34;정치-분야의-권력-분산화&#34;&gt;정치 분야의 권력 분산화
&lt;/h4&gt;&lt;p&gt;계획 생육 정책은 정치 생태에도 깊숙한 영향을 미쳤다. 전통적으로 가족 세력은 혈연과 혼인 관계를 통해 근거부 정치에 침투해 왔다. 예를 들어, 하남성 신예현의 161개 정치 가문은 거의 모든 정부 부서를 장악했으며, 차관급 이상 간부 중 20%가 ‘관이대’였다. 그러나 계획 생육 정책 시행 후 가정 규모 축소로 가족 네트워크 확장이 제한되었다. 베이징대학교 연구에 따르면 계획 생육 이후 관료 자녀 수가 줄어들고 가족 정치 네트워크의 복잡도가 현저히 감소했다. 또한, 정책으로 촉진된 교육 보급(1인당 평균 교육 연한이 1982년 5.2년에서 2023년 10.9년으로 증가)은 사회 이동을 촉진하고 가족 세력이 정치 자원을 독점하는 것을 약화시켰다.&lt;/p&gt;
&lt;p&gt;한국과 인도를 비교해 보면, 한국 재벌과 정치의 깊은 결탁(예: 삼성 그룹 임원과 정부의 권력과 돈 거래)과 인도 카스트 제도 하의 가족 정치 세습은 중국 정책의 독특성을 부각한다. 중국은 산아제한 정책을 통해 객관적으로 권력 세습 가능성을 줄였다. 현급 정치에서 가족 현상은 여전히 존재하지만, 전반적인 추세는 권력 구조의 분산화이다. 2025년 전국인대 및 정협 회의 기간에 정협 위원이 “인구와 산아제한법”을 “인구와 출산법”으로 명칭 변경하고 출산을 전면적으로 허용할 것을 제안했는데, 이는 향후 정치 생태 진화에 더욱 영향을 미칠 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;정책-조정-이후의-도전과-기회&#34;&gt;정책 조정 이후의 도전과 기회
&lt;/h4&gt;&lt;p&gt;2016년 두 자녀 정책과 2021년 세 자녀 정책 시행은 중국 출산 정책의 중대한 전환을 의미한다. 그러나 정책 효과는 제한적이었는데, 2022년 합계출산율은 1.18로 인구 대체 수준(2.1)을 훨씬 밑돈다. 출산 완화가 가족 기업에 미치는 영향은 양면성을 띠는데, 한편으로는 일부 기업가가 다자녀를 통해 가문 승계를 강화할 수 있다. 예를 들어, 저장 와하하 그룹 종칭후의 딸 종복리처럼 외동딸로 후계자가 된 경우가 있다. 다른 한편으로는 높은 육아 비용(1선 도시에서 자녀 양육에 드는 평균 비용이 18세까지 100만 위안)과 직장 여성의 출산 의욕 저하로 인해 가족 규모 확대가 제한된다.&lt;/p&gt;
&lt;p&gt;경제 분야에서 출산 장려 정책은 새로운 독점 형태를 야기할 수 있습니다. 셋째 자녀 정책이 모유, 육아 등 관련 산업의 집중도를 높이고 있으며, 2025년 영유아 위탁 시장 규모는 1621억3천만 위안에 달할 것으로 예상됩니다. 주요 기업들은 인수 합병을 통해 중소기업들을 통합하고 있으며, 시장 집중도 CR5는 55%를 넘어섰습니다. 이러한 집중도 증가는 효율성을 가져올 수 있지만, 새로운 독점 위험성에 대한 경계가 필요합니다. 정부는 출산 장려와 시장 집중 방지 사이에서 균형을 찾아야 하며, 공정거래법 강화와 같은 규제와 함께 육아 보조금(예: 항저우 셋째 자녀 가정이 매월 3000위안 상당의 분유 보조금을 받을 수 있음) 제공을 통해 가정 부담을 완화해야 합니다.&lt;/p&gt;
&lt;p&gt;정치 분야에서 출산 제한을 해제하는 것은 가문 세력에 미묘한 영향을 줄 수 있습니다. 단기적으로는 전통적인 가문 정치 네트워크를 회복하기 어려울 수 있지만, 장기적으로 다자녀 가정이 기반 정치에서 새로운 영향력을 형성할 가능성이 있습니다. 따라서 간부 선발 메커니즘을 개선하고 감독(예: 간부 친족 임용 금지 제도)을 강화하는 것이 권력 세습을 방지하는 핵심입니다.&lt;/p&gt;
&lt;h4 id=&#34;다섯째-국제-사례-연구와-미래-전망&#34;&gt;다섯째, 국제 사례 연구와 미래 전망
&lt;/h4&gt;&lt;p&gt;한국과 인도의 경험은 가문 세력의 흥망성쇠가 정책 방향과 밀접하게 관련되어 있음을 보여준다. 한국은 재벌을 육성하여 경제 발전을 이루었지만, 사회적 불평등이 손상되는 대가를 치렀다. 인도 역시 효과적인 정책 부재로 가족 독점을 억제하지 못해 빈부 격차가 심화되었다. 중국의 산아제한 정책은 인구를 통제하는 동시에 객관적으로 가문 세력 확장을 억제했지만, 고령화 심화 및 노동력 부족 등의 문제를 야기했다.&lt;/p&gt;
&lt;p&gt;미래, 중국은 인구 정책과 사회 경제 발전 간 새로운 균형을 모색해야 한다. 한편으로는 육아 지원 정책(출산 휴가 연장, 공공 보육 시설 확충 등)을 통해 출산율을 높이고, 다른 한편으로는 반독점 집행을 강화하여 가족 기업이 자본 운영을 통해 새로운 독점을 형성하는 것을 방지해야 한다. 정치 분야에서는 풀뿌리 민주주의 건설을 더욱 추진하고 감독 기구를 개선하여 권력 운영의 투명성을 확보해야 한다.&lt;/p&gt;
&lt;p&gt;종합적으로 볼 때, 계획출산 정책은 중국 사회 변화의 중요한 동력으로서 인구 분야를 넘어선 광범위한 영향을 미쳤습니다. 이는 가족 구조, 경제 모델, 정치 환경을 재편했으며, 한국과 인도식 가문 독점 함정에 빠지는 것을 피할 수 있는 길을 제시했습니다. 정책 조정에 따라 새로운 인구 구조 하에서 효율성과 공정성, 자유와 질서의 균형을 맞추는 것은 중국이 직면한 장기적인 과제가 될 것입니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>AI를 너무 많이 쓰니, 약간의 후유증이 있네요</title>
        <link>https://blog.ttf248.life/ko/p/ai-overuse-side-effects/</link>
        <pubDate>Wed, 14 May 2025 19:39:50 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/ai-overuse-side-effects/</guid>
        <description>&lt;p&gt;새로운 __INLINE_CODE_0__이 생긴 이후로, 별 볼 일 없는 것들을 AI로 기록하고 게시하는 데 많은 노력을 쏟고 있는데, 정적이고 스스로 생각하는 시간은 점점 줄어들고 있습니다. 앞으로 이 항목의 생산을 조금 통제하고 월간 형태로 통합하는 것이 좋겠습니다. 매달 한 편씩 발행하면 될 것 같습니다.&lt;/p&gt;
&lt;p&gt;이것은 일종의 후유증과 같거나, 부작용이라고 할 수 있는데, 효율은 높아졌지만 사고의 깊이와 넓이는 얕아졌다&lt;/p&gt;
&lt;h2 id=&#34;효율성-향상-부정할-수-없다&#34;&gt;효율성 향상: 부정할 수 없다
&lt;/h2&gt;&lt;p&gt;__INLINE_CODE_0__예전에는 이 코너를 잘 관리하지 않았습니다. 몇몇 주요 이슈에 대해서는 게으름 때문에 인터넷에서 자료를 검색하고 정리하는 일은 하지 않았죠. 요즘은 다양한 AI 도구가 생겨서 개요만 작성하면, AI가 자동으로 관련 정보를 검색하고 기록하여 필요한 글을 생성해 줍니다. 간단히 서식을 정리해서 게시하면 됩니다.&lt;/p&gt;
&lt;p&gt;이것은 게으름뱅이를 위한 구세주와도 같아서, 효율이 눈에 띄게 높아졌고, 노력의 절반으로 두 배의 효과를 보는 것 같습니다&lt;/p&gt;
&lt;p&gt;스크립트 작성은 잠시 접어두고 코딩할 때 효율이 눈에 띄게 올라갔다. 이전에는 API 인터페이스 문서 설명을 자세히 읽어야 했는데, 이제는 그냥 넘어가도 되는데, 이런 점화는 상당히 유용하다. API 숙지는 __INLINE_CODE_0__BOLD_2&lt;code&gt;脑力劳动&lt;/code&gt;의 영역이고, AI가 이 부분을 처리하기에 딱 좋다.&lt;/p&gt;
&lt;h2 id=&#34;쓰레기-내용&#34;&gt;쓰레기 내용
&lt;/h2&gt;&lt;p&gt;많은 원고들이 있는데, 내용 품질이 높지 않아. 완전히 엉망인 것은 아니지만, 읽으면 활력이 없고, 예전부터 싫어했던 스타일이야. 밋밋하고 재미없어.&lt;/p&gt;
&lt;p&gt;AI가 생성한 콘텐츠는, 바꿔 말하면, 마치 조립 라인에서 나온 것처럼 영혼이 부족하다고 할 수 있습니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;새 시대의 인터넷 쓰레기&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;망각성&#34;&gt;망각성
&lt;/h2&gt;&lt;p&gt;이런 종류의 초고는 AI가 생성한 것이고, 독자 상황은 파악하기 어렵지만, 시간이 지나면 제 기억조차 흐릿해지거나 잊혀질 수도 있습니다&lt;/p&gt;
&lt;p&gt;비슷한 문제가 코딩할 때도 발생하는데, 코드 커밋 기록을 확인하지 않으면 당시 어떻게 생각했는지, 왜 그렇게 썼는지 전혀 알 수 없다. 특히 코드 검토와 AI와의 반복적인 소통 끝에 생성된 코드는 처음의 생각과 크게 달라서 심지어 완전히 다른 경우도 있다.&lt;/p&gt;
&lt;h2 id=&#34;검색&#34;&gt;검색
&lt;/h2&gt;&lt;p&gt;최근에 구글이나 바이두를 열어보는 횟수가 눈에 띄게 줄었다. AI로 검색하면 상호작용도 좋고 검색 결과도 전통적인 검색 엔진보다 훨씬 낫다.&lt;/p&gt;
&lt;p&gt;지금은 생존 여부가 불분명한 __INLINE_CODE_0__에게 경의를 표하며, 대기업 내에서 가장 먼저 출시된 인터넷 검색 기능이 탑재된 AI 도구입니다&lt;/p&gt;
&lt;p&gt;구글을 잘 안 쓰게 됐고, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 접속 횟수도 줄어들었어. 많은 문제를 AI에 바로 물어볼 수 있어서 이 사이트는 점점 시대에 뒤쳐질 것 같아.&lt;/p&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리
&lt;/h2&gt;&lt;p&gt;제가 관리 중인 블로그는 원래 방문자 수가 많지 않았고, 지금은 더 기대하기 어렵습니다. 주로 기록하는 곳이며, 제 자신을 위해 쓰는 것입니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>무역전쟁, 갑자기 일시 중단</title>
        <link>https://blog.ttf248.life/ko/p/trade-war-pauses/</link>
        <pubDate>Mon, 12 May 2025 19:07:35 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/trade-war-pauses/</guid>
        <description>&lt;p&gt;2025년 무역 전쟁 관세 변화는 “상승 - 제재 - 협상”의 순환을 보이며, 미중 대립은 관세 대항에서 규칙 경쟁으로 전환했다. 단기적인 완화는 시장 압력을 덜었지만, 장기적인 불확실성은 여전히 존재하며 WTO 판결, 공급망 조정 및 지정학적 변화가 세계 경제에 지속적으로 미치는 영향을 주시해야 한다.&lt;/p&gt;
&lt;p&gt;사람은 자신이 인지하지 못하는 돈을 벌 수 없고, 이번 무역 전쟁으로 시작된 주식 시장 폭락은 현재까지 거의 회복되었지만, 그 과정에서 얼마나 많은 개인 투자자들이 사라졌는지 모른다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2025년, 무역 전쟁 관세 시기별 흐름 정리&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다음은 2025년 무역 전쟁 관세 시점을 정리하고, 미중 및 타국의 주요 사건과 함께 제시하여 관세 정책의 변화 과정을 보여줍니다&lt;/p&gt;
&lt;h3 id=&#34;일반적으로-2025년-4월-관세-전면-인상-및-제재&#34;&gt;일반적으로, 2025년 4월: 관세 전면 인상 및 제재
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;美国对华关税措施&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;트럼프 정부는 제14257호 행정 명령을 서명하고 중국산 수입품에 대해 34%의 상응하는 관세를 부과한다고 발표했으며, 홍콩 및 마카오 상품도 포함된다&lt;/li&gt;
&lt;li&gt;미국이 중국에 대한 &amp;lsquo;상호 균등 관세&amp;rsquo; 세율을 34%에서 84%로 인상하고, 제14259호 및 제14266호 행정 명령을 통해 더 많은 상품에 대해 관세를 부과했다&lt;/li&gt;
&lt;li&gt;백악관, 행정명령 수정, 중국에 대한 관세 총액을 145%로 인상하고, 800달러 미만 상품의 소액 포장물 관세율을 90%에서 120%로 인상한다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;中国的反制措施&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;중국은 미국산 상품에 대해 34% 관세를 부과한다고 발표했으며, 이는 농산물, 자동차, 에너지 등 다양한 분야를 포괄합니다&lt;/li&gt;
&lt;li&gt;중국은 관세 인상률을 34%에서 84%로 상응하여 맞대응할 것이다&lt;/li&gt;
&lt;li&gt;중국은 미국 상품에 부과하던 관세의 91%(미국 측이 취소하는 부분에 해당)를 폐지하고, 나머지 24% 관세의 시행을 90일간 중단하며 10%는 유지한다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;其他国家的关税博弈&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;미국이 캐나다 철강 및 알루미늄 제품에 대해 25% 관세를 부과하자, 캐나다는 보복성으로 298억 캐나다 달러 상당의 미국 상품에 세금을 부과하고 WTO에 제소했다&lt;/li&gt;
&lt;li&gt;유럽연합은 미국 상품에 최고 25% 관세를 부과하고, 일본은 미-중 무역 분쟁으로 인한 자동차 관세에 우려를 표하며 “자신에게도 해가 된다”고 밝혔습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;두-번째-2025년-5월-제네바-협상과-관세-완화&#34;&gt;두 번째, 2025년 5월: 제네바 협상과 관세 완화
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;中美经贸高层会谈&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;미국과 중국은 스위스 제네바에서 16시간 회담을 갖고 《미중 제네바 통상회담 공동선언》을 발표했습니다&lt;/li&gt;
&lt;li&gt;양측, 일부 관세 중단 발표:&lt;/li&gt;
&lt;li&gt;미국이 중국에 대한 관세 24%를 중단(90일), 10% 유지하고, 4월 8일과 9일의 추가 세금을 취소했습니다&lt;/li&gt;
&lt;li&gt;중국은 24%의 제재 관세를 중단하고, 10%를 유지하며 비관세 조치를 해제합니다&lt;/li&gt;
&lt;li&gt;양측은 중국, 미국 또는 제3국에서 정기적으로 경貿 협상 및 관세 감축과 규정 제정을 중점적으로 논의할 것에 동의함&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;经济影响与政策调整&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;높은 관세로 중소기업이 도산하고(예: 아마존 판매자 폐업), 인플레이션 기대감이 고조되고 있습니다(핵심 PCE는 3.3%까지 상승할 것으로 예상)&lt;/li&gt;
&lt;li&gt;중국이 희토류 수출 통제를 강화하고 불법 유출을 단속하면서 미국 방위산업과 신에너지 산업에 타격이 발생, 희토류 등 핵심 광물 관세 면제가 불가피해졌다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;셋-기타-주요-사건-및-장기적-영향&#34;&gt;셋, 기타 주요 사건 및 장기적 영향
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;WTO与多边反应&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;캐나다와 중국은 각각 WTO에 미국 철강 및 알루미늄 관세와 “상호주의 관세”가 비차별 원칙 위반이라고 소송했다&lt;/li&gt;
&lt;li&gt;WTO 사무총장 이베라드는 미국 관세가 2025년 글로벌 무역량 1% 감소를 초래하고 개발도상국의 어려움을 심화시킬 수 있다고 경고했습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;豁免清单与行业影响&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;美国豁免商品&lt;/strong&gt;: 희토류, 흑연, 의료용 CT 선관 등 전략 물자 37페이지 목록이 공급망 취약성을 드러낸다&lt;/li&gt;
&lt;li&gt;미국이 수입 자동차에 25% 관세를 부과하면서 전 세계 자동차 생산량은 2% 감소할 것으로 예상되며, 북미 지역은 9% 감산될 전망이다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;政治与战略博弈&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;트럼프 정부는 &amp;lsquo;상호 동등 관세&amp;rsquo;를 통해 국제 무역 질서를 재편하려 했으나, 일방적 강압으로 비판받으며 (유럽연합, 일본 등) 우방의 반발을 불러일으켰다&lt;/li&gt;
&lt;li&gt;중국은 보호주의에 대응하여 시장 개방 확대(예: 수입 박람회, 관세 면제 약속)를 통해 개발도상국과의 협력을 유치한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;네-알겠습니다-시간선-요약&#34;&gt;네, 알겠습니다. 시간선 요약
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;중국어 텍스트 없음&lt;/th&gt;
&lt;th&gt;번역할 중국어 텍스트가 없습니다&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;미국이 중국에 34%의 상응하는 관세를 부과하며 홍콩, 마카오 상품을 포함했습니다&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;미국이 중국에 대한 관세를 84%로 인상하고 새로운 세금 행정 명령을 발표했습니다&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;중국이 34% 관세 부과 대응으로 후퇴해 84%로 조정, 미국은 관세를 145%로 수정&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;미국은 일부 품목(예: 기술 제품)에 대한 면제를 적용하고, 중국은 제재 관세의 91%를 폐지했습니다&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;미국, 중국, 일본 제네바 회담에서 24% 관세 (90일) 중단에 대한 공동 성명 발표&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;양측은 관세 유예 및 협상 메커니즘을 발표하며 무역 긴장을 완화했다&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;다섯째-추세와-도전&#34;&gt;다섯째, 추세와 도전
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;미국과 중국의 관세 유예는 긍정적인 신호이지만, 구조적 갈등(고기술, 에너지 등)은 여전히 존재하며, 중간선거가 정책 연속성에 영향을 미칠 수 있다&lt;/li&gt;
&lt;li&gt;기업이 공급망 조정을 가속화하면서 멕시코와 동남아시아가 “근해 아웃소싱”의 혜택을 누리고 있지만, 비용 상승은 회복을 저해할 수 있다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多边机制困境&lt;/strong&gt;: WTO 분쟁 해결 메커니즘의 한계로 인해 지역 무역 협정(미국-영국 협정 등)이 대안으로 떠오르고 있지만, 이는 단편화 심화를 야기한다&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>2020-2025년 장시성 특별직 및 국공립 교사 채용 데이터: 추세와 변화 통찰</title>
        <link>https://blog.ttf248.life/ko/p/jiangxi-specialized-post-and-national-cadre-teacher-recruitment-data-trends-and-transformation-insights-2020-2025/</link>
        <pubDate>Mon, 12 May 2025 18:59:51 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/jiangxi-specialized-post-and-national-cadre-teacher-recruitment-data-trends-and-transformation-insights-2020-2025/</guid>
        <description>&lt;p&gt;2020-2025년 전장성 교사 채용이 급격히 감소하는 추세를 보임: 특수직렬 교사 채용 규모는 6,617명에서 32명으로 99.5% 감소하고, 국공립 교사는 11,324명에서 2,146명으로 81.1% 감소함. 주교과(언어수학영어) 비중은 안정적이지만 총량은 축소되었고, 음체미 등 과목은 비중이 상승했지만 절대적인 규모는 제한적임(예: 2025년 각 2명 채용). 정책적으로 &amp;ldquo;퇴직 후 보충&amp;rdquo; 제도를 통한 인원 감축이 추진되고, 교사 자원은 직업 교육 및 외딴 지역으로 집중됨에 따라 전통적인 중소학교 포스트가 크게 감소했으며, 2025년 일부 과목은 계획 수가 0명임.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;강서성 특수직업 교사 채용 규모를 최근 5년간 통계적으로 분석하고, 과목별로 구분하여 표로 정리합니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;——————&lt;/p&gt;
&lt;p&gt;강설: 강소성 교육청, 인력자원사회보장부 등 공식 발표 채용 공고 및 공개 데이터에 따르면 2020-2025년 특수직렬 교사 및 국공립 공무원 직렬 교사 채용 현황은 다음과 같습니다. 다만, &lt;strong&gt;2025年数据为计划招聘数&lt;/strong&gt;, 일부 연도 학과 세분화 정보는 완전히 공개되지 않았으며, 표기된 “미세분류” 학과는 총량 통계 또는 데이터 누락입니다.&lt;/p&gt;
&lt;h3 id=&#34;일2020-2025년-강서성-특별직업-교사-채용-데이터&#34;&gt;일、2020-2025년 강서성 특별직업 교사 채용 데이터
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연도&lt;/th&gt;
&lt;th&gt;총 채용 인원&lt;/th&gt;
&lt;th&gt;국어&lt;/th&gt;
&lt;th&gt;수학&lt;/th&gt;
&lt;th&gt;영어&lt;/th&gt;
&lt;th&gt;물리&lt;/th&gt;
&lt;th&gt;화학&lt;/th&gt;
&lt;th&gt;생물&lt;/th&gt;
&lt;th&gt;정치/윤리와 법지&lt;/th&gt;
&lt;th&gt;역사&lt;/th&gt;
&lt;th&gt;지리&lt;/th&gt;
&lt;th&gt;음악&lt;/th&gt;
&lt;th&gt;체육&lt;/th&gt;
&lt;th&gt;미술&lt;/th&gt;
&lt;th&gt;정보 기술&lt;/th&gt;
&lt;th&gt;미분류&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;6,617&lt;/td&gt;
&lt;td&gt;1,200&lt;/td&gt;
&lt;td&gt;1,100&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;317&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;6,020&lt;/td&gt;
&lt;td&gt;1,100&lt;/td&gt;
&lt;td&gt;1,000&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;450&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;td&gt;280&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;3,835&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;180&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;3,146&lt;/td&gt;
&lt;td&gt;650&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;146&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024&lt;/td&gt;
&lt;td&gt;2,008&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2025&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;이-2020-2025년-장시성-국비-교사-채용-데이터&#34;&gt;이, 2020-2025년 장시성 국비 교사 채용 데이터
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연도&lt;/th&gt;
&lt;th&gt;총 채용 인원&lt;/th&gt;
&lt;th&gt;국어&lt;/th&gt;
&lt;th&gt;수학&lt;/th&gt;
&lt;th&gt;영어&lt;/th&gt;
&lt;th&gt;물리&lt;/th&gt;
&lt;th&gt;화학&lt;/th&gt;
&lt;th&gt;생물&lt;/th&gt;
&lt;th&gt;정치/윤리와 법지&lt;/th&gt;
&lt;th&gt;역사&lt;/th&gt;
&lt;th&gt;지리&lt;/th&gt;
&lt;th&gt;음악&lt;/th&gt;
&lt;th&gt;체육&lt;/th&gt;
&lt;th&gt;미술&lt;/th&gt;
&lt;th&gt;정보 기술&lt;/th&gt;
&lt;th&gt;미분류&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;11,324&lt;/td&gt;
&lt;td&gt;2,200&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;1,800&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;524&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;13,324&lt;/td&gt;
&lt;td&gt;2,500&lt;/td&gt;
&lt;td&gt;2,300&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;624&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2022&lt;/td&gt;
&lt;td&gt;10,200&lt;/td&gt;
&lt;td&gt;2,000&lt;/td&gt;
&lt;td&gt;1,800&lt;/td&gt;
&lt;td&gt;1,500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2023&lt;/td&gt;
&lt;td&gt;7,821&lt;/td&gt;
&lt;td&gt;1,500&lt;/td&gt;
&lt;td&gt;1,400&lt;/td&gt;
&lt;td&gt;1,200&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;421&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2024&lt;/td&gt;
&lt;td&gt;3,957&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;750&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;350&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;257&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2025&lt;/td&gt;
&lt;td&gt;2,146&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;380&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;250&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;150&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;120&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;86&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;셋째-데이터-설명&#34;&gt;셋째, 데이터 설명
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;강설성 교육청 및 인적자원사회보장청의 연도별 채용 공고 및 공식 통계 (2020-2024년은 실제 채용 수, 2025년은 계획 수)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学科分类&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;특수임무 교사는 농촌 의무 교육 단계의 과목을 중심으로, 2025년에는 일부 주과목 직위만 유지한다&lt;/li&gt;
&lt;li&gt;국공립학교 교사는 모든 학년 과정을 포함하며, 교육 과정도 더욱 포괄적입니다. 여기에는 유아교육, 특수교육 등이 포함됩니다 (데이터 세분화가 되지 않아 별도로 기재하지 않음).&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;趋势分析&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;특수직렬 교사 채용량은 2025년, 2020년에 비해 99.5% 감소하고 일반교사 채용량은 81.1% 감소했는데, 이는 인구 구조 변화와 교육 자원 재조정을 반영한다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学科冷热&lt;/strong&gt;:&lt;/li&gt;
&lt;li&gt;주요 과목(국어, 수학, 영어) 비중은 안정적이지만 채용량은 매년 감소하고 있다&lt;/li&gt;
&lt;li&gt;음체미 등 학과 비중은 증가하나 절대적인 규모는 제한적이다 (예: 2025년 음체미 각 2명 모집)&lt;/li&gt;
&lt;li&gt;일부 과목(예: 영어)은 학생 수 감소로 입학 중지되었습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;政策背景&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编制收紧&lt;/strong&gt;: “퇴직 후 재배치” 정책을 시행하고, 신규 채용을 엄격히 통제하여 2024년 비정규직 비율이 68.6%에 달했다&lt;/li&gt;
&lt;li&gt;교사 지원은 직업 교육 및 외딴 지역에 집중하고, 기존 중소학교 채용은 대폭 축소된다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;네-알겠습니다-완전한-데이터-획득-권장&#34;&gt;네, 알겠습니다. 완전한 데이터 획득 권장
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;官方渠道&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;강설성 교육청 공식 웹사이트 (&lt;a class=&#34;link&#34; href=&#34;http://jyt.jiangxi.gov.cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jyt.jiangxi.gov.cn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;강서성 인적자원사회보장청 공식 웹사이트 (&lt;a class=&#34;link&#34; href=&#34;http://rst.jiangxi.gov.cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://rst.jiangxi.gov.cn&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;工具推荐&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;제 남성인사시험망(&lt;a class=&#34;link&#34; href=&#34;http://www.jxpta.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.jxpta.com&lt;/a&gt;): 역년 직위표 다운로드&lt;/li&gt;
&lt;li&gt;강서성 지혜 교육 플랫폼(&lt;a class=&#34;link&#34; href=&#34;http://www.jxedu.gov.cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.jxedu.gov.cn&lt;/a&gt;): 특수 직무 교사 관련 데이터&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;注意事项&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;2025학년도 일부 학과(예: 정보기술)의 모집 계획 인원은 0명으로 예정이나, 슬리퍼 제도를 통해 충원될 수 있습니다&lt;/li&gt;
&lt;li&gt;분야 분류는 연도별 차이가 있을 수 있으며(예: “도덕과 법치”와 “사상정치” 병합), 당해 공고를 따릅니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;더 자세한 학과별 직무 분포나 지역 세분화 데이터가 필요하시면, 해당 지역 교육청에 직접 문의하거나 공식 채용 시스템을 통해 확인하시는 것이 좋습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>Fork 저장소에 Pull Request 병합</title>
        <link>https://blog.ttf248.life/ko/p/merge-pullrequest-to-fork-repository/</link>
        <pubDate>Wed, 07 May 2025 18:44:03 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/merge-pullrequest-to-fork-repository/</guid>
        <description>&lt;p&gt;__INLINE_CODE_0__은 GitHub 프로필 통계 생성 도구로, 사용자가 자신의 GitHub 프로필에 다양한 통계 및 차트를 표시할 수 있도록 합니다. 사용자 요구사항에 맞춰 여러 가지 맞춤 설정 옵션을 제공합니다.&lt;/p&gt;
&lt;p&gt;저는 창고 관리를 프로젝트별로 그룹화하는 습관이 있는데, GitHub는 창고 그룹화를 지원하지 않으므로 여러 조직으로 분할해야 합니다. &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 최신 브랜치는 서로 다른 조직에 걸쳐 있는 창고 통계를 지원하지 못하므로, 저는 한 개의 브랜치를 포크하여 해당 코드를 병합했습니다.&lt;/p&gt;
&lt;h2 id=&#34;최종-결과&#34;&gt;최종 결과
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api?username=ttf248&amp;amp;hide_title=true&amp;amp;show_icons=true&amp;amp;hide=contribs&amp;amp;line_height=24&amp;amp;include_all_commits=true&amp;amp;count_private=true&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub Stats&#34;
	
	
&gt;
&lt;img src=&#34;https://github-readme-stats-chi-one-17.vercel.app/api/top-langs/?username=ttf248&amp;amp;hide_title=true&amp;amp;hide=html,javascript,css&amp;amp;layout=compact&amp;amp;bg_color=0000&amp;amp;text_color=8A919F&amp;amp;locale=cn&amp;amp;role=OWNER,COLLABORATOR,ORGANIZATION_MEMBER&amp;amp;timstamp=1746608356&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Top Languages&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;요청-주소-원본&#34;&gt;요청 주소 원본
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anuraghazra/github-readme-stats/pull/2459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adds the ability to include data from organization repositories&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;fork-저장소에-pull-request-병합&#34;&gt;Fork 저장소에 Pull Request 병합
&lt;/h2&gt;&lt;p&gt;어떤 **Pull Request (PR)**을 당신의 &lt;strong&gt;fork 的仓库&lt;/strong&gt;에 병합하는 방법은 여러 가지가 있으며, 이는 무엇을 하고 싶으냐에 따라 달라집니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;上游（upstream）仓库&lt;/strong&gt; 병합 PR을 당신의 포크로 옮기는 것인가, 아니면&lt;/li&gt;
&lt;li&gt;다른 사람의 포크에서 PR을 합병하여 자신의 포크로 가져오거나,&lt;/li&gt;
&lt;li&gt;fork된 저장소에서 보낸 PR 병합 (예: 다른 사람이 당신의 fork에 PR을 제출한 경우)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;가장 흔한 시나리오 &lt;strong&gt;你 fork 了一个仓库，想把上游的某个 PR 合并到你的 fork&lt;/strong&gt;입니다. 절차는 다음과 같습니다 👇:&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;방법-1-명령줄-방식-가장-일반적&#34;&gt;방법 1: 명령줄 방식 (가장 일반적)
&lt;/h3&gt;&lt;h4 id=&#34;단계-1-자신만의-포크를-복제하세요&#34;&gt;단계 1: 자신만의 포크를 복제하세요
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/你的用户名/仓库名.git
cd 仓库名
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;단계-2-상위-저장소원래-리포지토리-주소-추가&#34;&gt;단계 2: 상위 저장소(원래 리포지토리 주소) 추가
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add upstream https://github.com/原作者用户名/仓库名.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;단계-3-상위upstream-pr-분기-가져오기&#34;&gt;단계 3: 상위(upstream) PR 분기 가져오기
&lt;/h4&gt;&lt;p&gt;찾으려는 병합 PR 번호를 찾습니다. 예: PR #123.&lt;/p&gt;
&lt;p&gt;이 PR의 코드는 다음과 같이 가져올 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch upstream pull/123/head:pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;단계-4-분기-전환-및-병합&#34;&gt;단계 4: 분기 전환 및 병합
&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout main    # 或者你自己的目标分支
git merge pr-123
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;모든 것이 정상이라면, 포크한 GitHub 저장소에 푸시할 수 있습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;방법-2-github-웹-인터페이스-간단하지만-기능-제한적&#34;&gt;방법 2: GitHub 웹 인터페이스 (간단하지만 기능 제한적)
&lt;/h3&gt;&lt;p&gt;GitHub 웹페이지에서 특정 PR이 상위 저장소에 대한 것이라면 다음과 같이 할 수 있습니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;해당 PR 페이지로 이동합니다&lt;/li&gt;
&lt;li&gt;오른쪽 상단의 &amp;ldquo;&lt;strong&gt;Commits&lt;/strong&gt;&amp;rdquo; 또는 &amp;ldquo;&lt;strong&gt;Files changed&lt;/strong&gt;&amp;ldquo;을 클릭하여 이 PR이 어떤 브랜치를 기반으로 하는지 확인하세요&lt;/li&gt;
&lt;li&gt;포크 페이지에서 새 브랜치를 만들고, 수동으로 PR 커밋을 체리픽하세요 (Git 기술이 필요합니다)&lt;/li&gt;
&lt;li&gt;또는 “&lt;strong&gt;Open in GitHub Desktop&lt;/strong&gt;”을 클릭하여 GUI 도구를 사용하여 병합하세요&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-다른-사람이-당신의-포크에-대한-pr을-제안했다면&#34;&gt;🚀 다른 사람이 당신의 포크에 대한 PR을 제안했다면
&lt;/h3&gt;&lt;p&gt;PR 페이지로 바로 들어가서 &amp;ldquo;&lt;strong&gt;Merge pull request&lt;/strong&gt;&amp;rdquo; 버튼을 클릭하면 됩니다&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;현재 구체적인 상황(예: PR 링크, 웹 페이지 또는 명령줄 사용)에 맞춰 제가 직접 시연해 드릴까요? 아니면 구체적인 링크를 주시면 가장 간단한 방법을 분석해 드리겠습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>깃 커밋 기록 수정</title>
        <link>https://blog.ttf248.life/ko/p/git-modify-commit-message/</link>
        <pubDate>Wed, 07 May 2025 18:38:31 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/git-modify-commit-message/</guid>
        <description>&lt;p&gt;스크립트는 Git 히스토리의 여러 커밋에 대한 작성자 정보를 일괄적으로 수정하며, git filter-branch를 사용하여 히스토리를 재작성합니다&lt;/p&gt;
&lt;p&gt;제공하신 스크립트는 Git 저장소의 과거 커밋 작성자 정보를 일괄적으로 수정하는 데 사용되며, 전체적인 아이디어는 옳지만 &lt;code&gt;git filter-branch&lt;/code&gt;BOLD_4&lt;code&gt;--env-filter&lt;/code&gt;BOLD_5&lt;code&gt;OLD_EMAILS=(&amp;quot;...&amp;quot;)&lt;/code&gt;BOLD_6__INLINE_CODE_3__）에서는 배열 구문을 지원하지 않습니다&lt;/p&gt;
&lt;p&gt;호환성 향상을 위해 배열을 공백으로 구분된 문자열로 바꾸고, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 루프를 사용하여 각 기존 이메일 주소를 반복하는 것이 좋습니다. 다음은 수정된 스크립트 예제입니다:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh

git filter-branch --env-filter &#39;
OLD_EMAILS=&amp;quot;TianlongXiang51@gmail.com nick@qq.com tianlongxiang51@gmail.com&amp;quot;
CORRECT_NAME=&amp;quot;tianlong.xiang&amp;quot;
CORRECT_EMAIL=&amp;quot;tianlong.xiang@foxmail.com&amp;quot;

for OLD_EMAIL in $OLD_EMAILS
do
    if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
    if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]
    then
        export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;
        export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;
    fi
done
&#39; --tag-name-filter cat -- --branches --tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意事项：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;스크립트 실행 전, 혹시 모를 상황에 대비하여 저장소 백업을 권장합니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 작업은 Git 기록을 덮어쓰고, 커밋 작성자 정보를 수정하여 커밋 해시 값이 변경될 수 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;변경 사항을 원격 저장소에 푸시했다면 강제 푸시를 사용해야 합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push --force --tags origin &#39;refs/heads/*&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;강제 푸시를 신중하게 사용하고, 특히 여러 사람이 협업하는 프로젝트에서는 다른 사람에게 영향을 미치지 않도록 주의하세요&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;저장소의 모든 중복되지 않는 작성자 이메일 주소를 확인합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git log --format=&#39;%an &amp;lt;%ae&amp;gt;&#39; | sort -u
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>의학 교육의 천국과 동씨 사건의 나비 효과</title>
        <link>https://blog.ttf248.life/ko/p/medical-education-sky-dong-xiying-butterfly-effect/</link>
        <pubDate>Wed, 07 May 2025 01:08:27 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/medical-education-sky-dong-xiying-butterfly-effect/</guid>
        <description>&lt;p&gt;베이징 協和 “4+4” 프로그램(4년 비의료 학사 + 4년 의학 박사)은 학제간 엘리트 양성을 내세웠으나, 2025년 동씨 사건으로 가족 배경(의학/연구계 명문가)을 이용해 입학하고 학력의 불확실성 및 논문 표절 시비가 불거지며 엘리트 선발과 공정성의 모순이 드러났습니다. 또한, 학제 단축 및 실습 관련 논란은 해결해야 할 과제로 남아있습니다.&lt;/p&gt;
&lt;h2 id=&#34;알림&#34;&gt;알림
&lt;/h2&gt;&lt;p&gt;블로그 작성: 협화 4+4의 전말, 핵심: 천궁의 한 구석, 인간에게 보임, 동양공주의 가족 배경, 정상적인 의학 박사가 8년 만에 졸업하는 것은 불가능, 동양공주 가족 배경 및 학력 배경&lt;/p&gt;
&lt;h2 id=&#34;협화-44-해체된-의학-교육의-천궁&#34;&gt;협화 4+4: 해체된 의학 교육의 &amp;ldquo;천궁&amp;rdquo;
&lt;/h2&gt;&lt;p&gt;베이징 협화의과대학의 &amp;ldquo;4+4&amp;rdquo; 프로젝트는 2018년 시작된 이후 중국 의학 교육의 &amp;ldquo;천궁&amp;quot;으로 여겨져 왔다. 미국의 의학 교육 시스템을 모방한 이 프로젝트는 &amp;ldquo;다학제적 배경을 가진 자, 의료에 대한 애정을 가진 자, 천하의 현재를 포용하는 자&amp;quot;라는 이념 하에 전통적인 의학 교육 시스템에 균열을 내고자 시도한다. 핵심 논리는 &lt;strong&gt;用4年非医学本科教育+4年医学博士培养，替代传统的5+3+3（本科5年+硕士3年+博士3年）模式&lt;/strong&gt;, 융합적 의학 리더 인재 양성이다.&lt;/p&gt;
&lt;p&gt;이 패턴의 &amp;ldquo;천궁&amp;rdquo; 속성은 세 가지 차원에서 나타납니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;초기에는 QS, Times, US News 순위 상위 50개 대학 또는 US News 문리대학 순위 상위 10개(예: 바나드 대학교) 출신 지원자를 요구했으나, 이후 순위를 100위까지 완화했지만 GPA 3.6 이상 또는 학년도 상위 30%는 충족해야 합니다&lt;/li&gt;
&lt;li&gt;미국식 장기-시스템 통합 과정 및 PBL 교수법을 채택하여, 학생들은 4년 내에 인체 해부학, 병리학 등 핵심 과목을 이수하고 임상 실습에 참여해야 합니다&lt;/li&gt;
&lt;li&gt;비록 의사 국가고시 합격률(95.2%)이 전통적인 8년제(98.5%)보다 약간 낮지만, 졸업생들은 대부분 화합계 병원에 진출하여 직업 발전은 전통적 경로와 큰 차이가 없다&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;동시영-사건-필멸자가-엿본-천궁의-균열&#34;&gt;동시영 사건: 필멸자가 엿본 &amp;ldquo;천궁&amp;quot;의 균열
&lt;/h2&gt;&lt;p&gt;2025년 4월, 중일우호병원 흉부외과 의사 샤오페이가 혼인 내 출통 사건으로 고발당하면서 우연히 협화 4+4 프로젝트의 &amp;ldquo;신비한 베일을 벗겼다. 관련자 동스잉의 이력은 세 가지 의혹을 불러일으켰다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;学历背景的模糊性&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本科院校争议&lt;/strong&gt;: 둥스잉은 콜롬비아 대학교 졸업이라 주장하지만, 실제로는 독립 대학인 바나드 칼리지(2025년 US News 리버럴 아츠 칼리지 순위 14위)에 재학했습니다. 해당 학교는 화합의 &amp;ldquo;리버럴 아츠 칼리지 상위 20&amp;rdquo; 기준을 충족하지만, 졸업 증명서에 &amp;ldquo;바나드 칼리지&amp;quot;와 &amp;ldquo;콜롬비아 대학교&amp;quot;가 함께 표기되어 있어 국내 채용 시장에서 콜롬비아 본교로 오해받기 쉽습니다.&lt;/li&gt;
&lt;li&gt;경제학 학사 + 임상 의학 박사 과정은 4+4 프로젝트의 &amp;ldquo;다학제적 배경&amp;rdquo; 정의에 부합하지만, 의학 예비과정 기초 부족으로 논란이 있다. 또한 박사 논문《다중 모드 영상 융합 기술이 의료 영상 분석에 미치는 연구》는 북경과학기술대 특허와 고도 유사성으로 인해 학술 부정 행위가 의심받고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;家庭背景的特殊性&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;아버지께서 중국건설금속연구원(中冶建研院) 서기로, 어머니께서 북경과학기술대학교(북科대) 공정기술연구원 부원장으로 재직 중이며, 조부께서 화합의 영상 분야 학자로, 외할아버지는 외국인 재료 분야 학자이시고, 고모와 고숙부는 북科대 박사지도자로 활동하고 계신다. 이러한 &amp;ldquo;의학+연구+대학&amp;quot;의 복합적인 가족 배경은 추천서(생물의학 부교수 2명의 추천 필요), 연구 협력(북科대 특허 등)과 같은 잠재적 자원을 제공한다.&lt;/li&gt;
&lt;li&gt;규培 단계에서 흉외과에서 비뇨의학과로 전환, 연구 분야가 정형외과, 소화내과, 영상학 등 여러 분야에 걸쳐 있어 &amp;ldquo;자원 포석&amp;quot;이라는 의혹을 받고 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;学制争议的放大&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;时间压缩的合理性&lt;/strong&gt;: 전통 의학 박사 학위는 11년(5+3+3)이 소요되지만, 4+4 프로그램은 기간을 8년으로 단축한다. 협의소는 &amp;ldquo;과정 통합&amp;rdquo; 및 &amp;ldquo;조기 임상&amp;quot;을 강조하지만 일부 의료진은 여전히 전통적인 8년제(18개월)보다 임상 실습 시간(12개월)이 부족하여 기술 숙달에 영향을 미칠 수 있다고 지적한다.&lt;/li&gt;
&lt;li&gt;일부 규培(규제 훈련) 기지에서 4+4 졸업생에게 1년 규培 면제를 허용하여 업계의 공정성을 해친다는 의혹이 제기되고 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;논쟁-뒤에-숨겨진-의학-교육의-딜레마&#34;&gt;논쟁 뒤에 숨겨진 의학 교육의 딜레마
&lt;/h2&gt;&lt;p&gt;동이싱 사건은 중국 의학 교육의 근본적인 모순을 반영한다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;精英化与公平性的冲突&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;4+4프로젝트의 &amp;ldquo;신청-심사제&amp;quot;는 기본적으로 미국 의과대학 모델을 이식한 것이나, 중국은 MCAT와 같은 표준화된 시험이 부족하고, 추천서 및 연구 경력 등 주관적인 평가가 가정 배경에 의해 영향을 받기 쉽다&lt;/li&gt;
&lt;li&gt;데이터에 따르면, 2023년 졸업생 중 4+4 전공생의 30%는 칭화대, 베이징대, 푸단대에 출신하고, 25%는 해외 명문대에 재학했으며, 가정 환경이 지원에 상당한 영향을 미치는 것으로 나타났다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;学制改革的现实困境&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;时间压缩的代价&lt;/strong&gt;: 4+4 학생 연구 성과(논문 수 등)가 전통적인 8년제보다 현저히 낮아 &amp;ldquo;임상에 치중하고 연구는 소홀하다&amp;quot;라는 지적이 있다&lt;/li&gt;
&lt;li&gt;대형 병원들은 협의대학교 브랜드에 더 중점을 두는 반면, 지역 병원들은 4+4 과정 졸업생들의 임상 능력에 대해 신중한 태도를 보이고 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;医学教育的国际接轨之惑&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;미국 4+4 모델은 MCAT 시험을 통과하고 3~7년간 인턴십을 받아야 하지만, 중국 4+4 프로그램은 입학 및 인턴십 과정을 간소화하여 &amp;ldquo;겉만 유사할 뿐 본질은 다르다&amp;quot;는 평가를 받는다&lt;/li&gt;
&lt;li&gt;교육부 자료에 따르면 2024년 전국 의학 박사 과정 신입생 중 4+4 프로그램 비율은 5% 미만이며, 대규모 확산에는 여전히 어려움이 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;결론-의학-교육-재구축의-천궁-질서&#34;&gt;결론: 의학 교육 재구축의 &amp;ldquo;천궁&amp;rdquo; 질서
&lt;/h2&gt;&lt;p&gt;화합 4+4 프로젝트 논란은 본질적으로 엘리트 교육과 대중의 기대 사이의 충돌이다. &amp;ldquo;천궁&amp;quot;의 일부가 평범한 사람에게 노출되면서 드러난 것은 개별 사례의 결함일 뿐만 아니라, 의료 교육 체계 전반의 근본적인 모순이다. 미래의 개혁은 세 가지 차원에서 힘을 쏟아야 한다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;표준화 시험(예: 중국식 MCAT)을 도입하여 추천서 등 주관적인 요소의 영향을 줄인다&lt;/li&gt;
&lt;li&gt;4+4 졸업생의 규범 훈련 기간을 3년으로 복원하여 임상 능력 기준 충족을 보장한다&lt;/li&gt;
&lt;li&gt;학문적 진실성 검토 메커니즘을 구축하고, 학제 연구에 대한 엄격한 독창성 검증을 실시한다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;의료 교육의 &amp;ldquo;천궁&amp;quot;은 소수의 특권이 되어서는 안 되며, 진정으로 의료 엘리트 양성의 요람이 되어야 한다. 공정한 선발 메커니즘, 엄격한 훈련 과정, 규정된 경력 개발이 전면적으로 보장될 때 비로소 이 의료 교육의 &amp;ldquo;천궁 실험&amp;quot;은 제대로 뿌리내릴 수 있다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>관세 폭풍, 주식 시장 폭락</title>
        <link>https://blog.ttf248.life/ko/p/tariffs-storm-stock-market-crash/</link>
        <pubDate>Tue, 08 Apr 2025 03:49:36 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/tariffs-storm-stock-market-crash/</guid>
        <description>&lt;p&gt;최근 글로벌 주식 시장은 급격한 변동을 겪었는데, 이는 주로 미국 대통령 도널드 트럼프의 새로운 전면 관세 조치 발표로 인해 발생했으며, 이로 인해 시장은 세계 무역 전쟁과 경기 침체에 대한 우려를 야기했다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关税政策引发市场恐慌&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;트럼프 대통령은 지난주 모든 수입품에 대해 높은 관세를 부과한다고 발표했으며, 중국으로부터의 수입품에는 최대 50%의 관세를 추가하여 불공정하다고 주장하는 글로벌 무역 체제를 바로잡으려 했습니다. 이 조치는 전 세계 시장의 공포 매수를 야기했으며, 투자자들은 미중 간 무역 긴장 고조가 글로벌 경제 성장을 억제할 것으로 우려하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全球股市大幅下挫&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;미국을 비롯한 주요 주가지수가 큰 폭으로 하락했습니다. 다우존스 산업평균지수는 1,200점 이상 하락했고, 나스닥 종합지수와 S&amp;amp;P 500 지수는 각각 4%와 3.8% 하락하며 곰 시장에 진입했습니다. 아시아 및 유럽 시장도 일본 닛케이 지수가 약 8%, 유럽 증시는 6% 하락하는 등 피해를 입었습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;投资者寻求避险资产&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;시장이 급변함에 따라 투자자들은 채권과 엔화와 같은 안전 자산으로 몰리고 있습니다. 그러나 시장 변동성 지수(VIX)가 60 이상으로 치솟으며 시장의 공포 심리가 커지고 있음을 보여줍니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;经济学家警告滞胀风险&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;경제학자들은 관세 정책이 미국 경제를 “정체 인플레이션”으로 몰아넣을 수 있다고 경고하며, 이는 경기 침체, 통화량 팽창 및 높은 실업률이 동시에 발생하는 상황을 의미합니다. JP모건은 2025년 미국의 경기 침체 가능성을 60%로 상향 조정했습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各国政府和企业的反应&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;각국 정부는 보복 조치를 취할 것이라고 밝혔습니다. 예를 들어, 유럽연합 무역 담당자는 4월 15일부터 미국 상품에 대한 보복 관세를 부과할 예정이라고 말했습니다. 기업계에서도 우려가 제기되었으며, 골드만삭스와 같은 월스트리트 회사들은 경기 침체 가능성을 45%로 높였습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;현재, 전 세계 시장은 유례없는 도전에 직면해 있으며 투자자는 무역 정책 동향과 시장 변화에 주의를 기울이고 리스크 관리 및 자산 배치를 철저히 해야 합니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>시간 많을 때 심심해서 중국 수묵화 스타일 테마를 디자인하고 싶어</title>
        <link>https://blog.ttf248.life/ko/p/chinese-ink-style-theme/</link>
        <pubDate>Tue, 08 Apr 2025 03:42:47 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/chinese-ink-style-theme/</guid>
        <description>&lt;p&gt;다채로운 홈페이지에 질렸으니, 갑자기 미니멀 스타일로 가서 중국 수묵화 스타일 테마를 디자인하고 싶다&lt;/p&gt;
&lt;p&gt;현재 스타일 시트는 각 요소에 맞게 특정 스타일이 적용되어 주제 기본 스타일을 덮어쓰도록 수정되었습니다&lt;/p&gt;
&lt;p&gt;재구조화 없이 AI로 직접 새로운 테마를 생성하면 결과가 매우 불안정합니다&lt;/p&gt;
&lt;p&gt;우연히 또 트레이 클로드 대규모 모델 줄 서 있는 거랑 vscode 에이전트 모드로 전환했더니, 수정된 결과물이 전혀 디자인 감각이 없네&lt;/p&gt;
&lt;p&gt;결국, 제가 프론트엔드를 잘 몰라서 AI에게 효과적으로 업무를 분담할 수 없는 셈입니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>광기 지수 적립 투자: 증권 ETF, 헝셍 테크놀로지 지수</title>
        <link>https://blog.ttf248.life/ko/p/etf-wide-index-dzt-broker-etfs-hangsheng-tech-index/</link>
        <pubDate>Thu, 27 Mar 2025 21:58:59 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/etf-wide-index-dzt-broker-etfs-hangsheng-tech-index/</guid>
        <description>&lt;p&gt;예전부터 하고 싶었던 일, 적절한 우량주를 사서 그냥 놔두는 건데, 떨어지면 상황을 보고 추가 매수를 안 하고, 오르면 팔아버리는 결과만 계속 나왔다&lt;/p&gt;
&lt;p&gt;적합한 우량주를 찾기보다는 폭넓은 지수를 선택해서 ETF로 사는 게 낫다. 현재 계획은 증권 ETF와 홍콩 항셍테크지수다.&lt;/p&gt;
&lt;p&gt;이러한 매매 기법에는 &amp;ldquo;좌측 하락 보충&amp;quot;이라는 전문 용어가 있습니다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后续呢计划选择一个宽基指数来彻底的实践一下，能跑赢定期存款的收益率就行&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;증권-etf&#34;&gt;증권 ETF
&lt;/h2&gt;&lt;p&gt;증권 ETF는 중국 증권회사를 주요 투자 대상으로 하는 상장지수펀드(ETF)로, 주로 중국 증시 상장된 증권회사 주식에 투자합니다. 증권 ETF는 일반적으로 중증 증권회사 지수와 같이 특정 증권회사 지수를 추적합니다.&lt;/p&gt;
&lt;p&gt;전에 한 번 샀었는데, 그때 고점을 쫓다가 손해 보고 정리했어요. 중국 시장은 매번 상승세일 때 증권사 주식이 오르는 법이고, 얼마나 오르느냐는 투자자들의 심리에 달렸죠.&lt;/p&gt;
&lt;h2 id=&#34;항생기술지수&#34;&gt;항생기술지수
&lt;/h2&gt;&lt;p&gt;항셍 테크놀로지 지수는 홍콩 증권 거래소에서 출시한 주가지수로, 홍콩 시장 내 기술 산업 전반의 실적을 반영하는 것을 목표로 합니다. 이 지수는 인터넷, 전자 상거래, 클라우드 컴퓨팅, 인공 지능 등 다양한 분야를 포괄하는 홍콩에 상장된 주요 기술 기업들을 포함합니다.&lt;/p&gt;
&lt;p&gt;2025년 5월 20일 현재, 항셍 테크놀로지 지수(코드: 800700)의 상위 10개 구성 종목 및 비중은 다음과 같습니다(다수의 권위 있는 출처에서 종합)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;小米集团-W&lt;/strong&gt;(01810.HK): 약 8.82%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;腾讯控股&lt;/strong&gt;(00700.HK): 약 8.14%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阿里巴巴-W&lt;/strong&gt; (09988.HK): 약 7.72%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;京东集团-SW&lt;/strong&gt;(09618.HK): 약 7.60%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;美团-W&lt;/strong&gt; (03690.HK): 약 7.35%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快手-W&lt;/strong&gt;(01024.HK): 약 6.10%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;理想汽车-W&lt;/strong&gt;(02015.HK): 약 6.09%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中芯国际&lt;/strong&gt;(00981.HK): 약 5.70%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网易-S&lt;/strong&gt;(09999.HK): 약 4.59%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;携程集团-S&lt;/strong&gt;(09961.HK): 약 4.48%&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;약 66.6%(일부 자료에 따르면 상위 10대 합계 비중은 68%-69% 사이로, 통계 시점 차이로 인해 차이가 있음)&lt;/p&gt;
&lt;h3 id=&#34;주요-사항&#34;&gt;주요 사항
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;항셍 테크놀로지 지수는 개별 종목 비중 상한을 8%로 설정했습니다. 예를 들어, 중신국제는 2025년 3월 조정 전 비중이 8%를 초과했으나 이후 순차적으로 감축되어 규정 범위 내로 맞췄습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成分股调整&lt;/strong&gt;: 2025년 5월 16일, 항셍지수사는 BYD(01211.HK)를 지수에 편입하고 텐센트(00772.HK)를 제외한다고 발표했으며, 조정은 6월 6일부터 적용된다. 따라서 현재(5월 20일) 구성 종목은 조정 전 명단을 기준으로 하며, BYD는 아직 포함되지 않았다.&lt;/li&gt;
&lt;li&gt;전체 상위 10개 구성 종목에서 인터넷 기술 기업(텐센트, 알리바바, 메이턔)이 주도하고 있으며, 신에너지 자동차(샤오미, 리샹)와 반도체(중신국제) 비중이 두드러지게 나타나 지수가 기술 및 신경제 영역을 포괄하는 것을 반영한다&lt;/li&gt;
&lt;li&gt;데이터 출처별 차이는 주로 통계 시점의 차이에서 비롯됩니다. 예를 들어, 2025년 3월 데이터는 상위 10개 합계 비중 약 69.4%를 보여주는 반면, 5월 14일 데이터는 68.82%로 시장 변동성이 가중치에 미치는 역동적인 영향을 반영합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;왼쪽-하락-보충매수&#34;&gt;왼쪽 하락 보충매수
&lt;/h2&gt;&lt;p&gt;좌측 하락 시 보충 매수 전략은 투자자가 주가가 지속적으로 하락하는 과정에서 주가가 바닥에 가까워질 것으로 예상하고, 보유 비용을 낮추기 위해 분할 매수를 진행하며 향후 가격 상승으로 이익을 얻기를 기다리는 투자 전략입니다&lt;/p&gt;
&lt;p&gt;이 방법은 시장이 명확하게 바닥을 보이기 전인 반대 방향 거래, 즉 “좌측 거래”에 속합니다. 구체적인 실행 과정에서 투자자는 보통 “피라미드식” 매수 전략을 활용하여 주가가 하락함에 따라 점진적으로 매입량을 늘려 평균 보유 비용을 낮춥니다. 예를 들어, 처음 일정량의 주식을 매입한 후, 주가가 계속 하락하면 더 낮은 가격에 매수 규모를 확대하는 방식으로 진행됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하락 과정에서 분할 매수를 통해 평균 매입 단가를 낮추고, 향후 수익을 위한 기반을 마련한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시장 추세 전환 전 포지션을 구축하면, 판단이 정확하다면 시장 회복 시 더 큰 수익을 얻을 수 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;주가가 계속 하락하면 더 큰 손실이 발생할 수 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;충분한 자금 지원이 지속적인 추가 매수를 위해 필요하며, 자금이 장기간 묶일 가능성도 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;상대적으로 &amp;ldquo;우측 거래&amp;quot;는 시장 추세가 명확하고 주가가 반등하는 징후가 분명해진 후에 매수하는 방식으로, 위험은 상대적으로 낮지만 초기 반등의 수익을 놓칠 수 있습니다. 따라서 투자자는 자신의 위험 감내 능력, 자금 상황 및 시장 판단에 따라 적합한 거래 전략을 선택해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;가치-평가-이론&#34;&gt;가치 평가 이론
&lt;/h2&gt;&lt;p&gt;가치 평가 이론은 금융학의 핵심 개념으로, 자산 또는 기업의 내재 가치를 평가하여 투자 결정의 근거를 제공합니다. 가치 평가를 통해 투자자는 자산의 현재 시장 가격이 합리적인지 판단하고 그에 따른 투자 전략을 수립할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要估值方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;해당 방법은 자산이 미래에 창출할 것으로 예상되는 현금 흐름을 기반으로 하며, 이러한 현금 흐름을 적절한 할인율로 할인하여 현재 가치로 환산합니다. DCF 방법은 기업의 이익 창출 능력이 안정적이고 예측 가능한 경우 평가에 적합합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이 방법은 대상 기업과 동일 산업 내 다른 기업의 시가수익비율(PER), 주식순자산비율(PBR), 매출액 대비 주가비율(PSR) 등 가치 평가 지표를 비교하여 기업의 상대적 가치를 평가합니다. 상대가치평가법은 사용이 간편하며, 빠른 평가 및 동일 산업 비교에 널리 활용됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;해당 방법은 기업의 순자산 가치, 즉 총 자산에서 부채를 뺀 값을 평가하여 기업의 가치를 결정합니다. 자산 기반법은 부동산 회사나 자본 집약적 기업과 같이 자산을 중심으로 하는 기업에 적용됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;估值理论的应用：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;평가를 통해 투자자는 저평가되거나 고평가된 자산을 파악하고 매수 또는 매도 전략을 수립할 수 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인수합병 거래에서 가치 평가는 거래 가격을 결정하는 핵심 요소이며, 거래의 성공 여부에 영향을 미친다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;财务报告：&lt;/strong&gt; 회사는 재무제표의 정확성과 투명성을 확보하기 위해 자산과 부채를 공정가치로 평가해야 합니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;평가 결과는 시장 환경, 회사 운영 상황, 거시 경제 지표 등 다양한 요인의 영향을 받으므로, 평가 시에는 이러한 여러 요소를 종합적으로 고려하고 정성적·정량적 분석을 병행하여 보다 정확한 평가 결과를 얻어야 합니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>코딩 없이 맞춤 주식 모듈 설계 개발</title>
        <link>https://blog.ttf248.life/ko/p/no-code-design-develop-custom-stock-module/</link>
        <pubDate>Thu, 27 Feb 2025 23:20:39 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/no-code-design-develop-custom-stock-module/</guid>
        <description>&lt;p&gt;지난달에 커서를 시험 사용해 봤는데, 무료 한도 때문에 복잡한 기능 개발은 못 하고 간단히 테스트만 했습니다. 그때쯔음에 바이트(Byte)도 유사한 제품을 출시했고, 두 제품 모두 Claude-3.5를 기반으로 하고 있습니다.&lt;/p&gt;
&lt;p&gt;바이트의 제품인 Trae가 먼저 Mac 버전으로 출시되었고, 올해 2월에 드디어 Windows 버전이 나왔다. 대기업 제품은 역시 좋아서, 무료로 사용할 수 있고 돈을 낼 필요 없이 Claude-3.5를 무제한으로 사용할 수 있다. 이 모델 성능은 아주 괜찮다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;결국 K라인 차트 개발에 막혀서, 본인은 React를 거의 모르는 관계로 포기해야 했습니다. 계속 개발하려면 저자가 프론트엔드 기초 지식을 보충하고, “K라인 차트 개발”과 같이 큰 덩어리의 과제를 바로 주지 않고 더 세분화된 작은 단위로 나누어야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;발견된-문제&#34;&gt;발견된 문제
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;해외 AI 모델 사용으로 인해 Vue3 + Element-Plus의 학습 데이터가 부족하여, 프론트엔드 프레임워크로 React를 선택했습니다&lt;/li&gt;
&lt;li&gt;일부 문법 오류가 발생할 수 있으며, 사람이 직접 수정해야 합니다&lt;/li&gt;
&lt;li&gt;일부 복잡한 문제 해결에는 인공 지침이 필요합니다&lt;/li&gt;
&lt;li&gt;코드 구조 최적화는 수동 지침이 필요합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가장 시간이 오래 걸린 부분은 프론트엔드 코드를 컨테이너에 패키징하는 것이었는데, 저의 __INLINE_CODE_0__BOLD_2&lt;code&gt;tsconfig.json&lt;/code&gt; 지식 부족으로 전혀 감이 잡히지 않았습니다. 중간에 도움을 받아야 겨우 로직을 파악할 수 있었습니다. 프론트엔드 개발의 dev 모드와 build 모드는 코드 검사에서 큰 차이가 있습니다. 백엔드 데이터베이스 및 서비스 컨테이너 스크립트는 총 5분 만에 처리했습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AI 目前更多的提高开发的效率，你有基础是最好的，并不是 AI 会帮你解决所有的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;창고-주소&#34;&gt;창고 주소
&lt;/h2&gt;&lt;p&gt;제목에서 언급했듯이, 이번에는 코딩을 하지 않고 AI와 직접 대화하며 자체 선택 주식 모듈을 설계하고 개발해 봅니다. 최종 결과물이 어떻게 나올지 보겠습니다.&lt;/p&gt;
&lt;p&gt;창고 주소: &lt;a class=&#34;link&#34; href=&#34;https://github.com/ttf248/trae-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ttf248/trae-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;자세한 사용 방법은 저장소의 README.md 파일을 참조하세요&lt;/p&gt;
&lt;p&gt;창고에는 많은 제출 기록이 포함되어 있는데, 대부분은 저와 트레이의 대화 기록과 제가 트레이의 몇몇 기능들을 테스트한 내용이며, 해당 기능을 구현하기 위해 수동 개입이 있었는지 여부를 메모해 두었습니다&lt;/p&gt;
&lt;h2 id=&#34;prompt&#34;&gt;Prompt
&lt;/h2&gt;&lt;p&gt;프로젝트는 처음부터 시작되었으며, 아래는 프로젝트 프롬프트입니다:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;基于项目原型图，开发功能：自选股，需要支持合约的新增、删除、修改、查询。自选股界面需要展示基础的行情数据。支持多个不同的市场切换。

前端：react
后端：golang gin gorm
数据库：PostgreSQL

服务端需要支持跨域请求，同时需要考虑数据的校验和错误处理，如果后端服务不可用，前端需要告警提示。

后端需要展示请求和应答的日志；前端也打印通讯的日志，方便排查问题。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ui-및-상호작용-최적화&#34;&gt;UI 및 상호작용 최적화
&lt;/h2&gt;&lt;p&gt;프론트엔드 디자인은 Grok에 완전히 의존하며, 우리는 먼저 Trae에서 제품의 초기 형태를 만들었지만 심미적인 부분은 부족했습니다. 사용한 모델은 코드 능력은 뛰어나지만 다른 기능이 상대적으로 약하기 때문에 Grok을 사용하여 프론트엔드 UI를 최적화해야 합니다.&lt;/p&gt;
&lt;p&gt;현재 인터페이스 스크린샷을 찍어 Grok에 업로드한 후, UI 최적화를 요청하면 여러 건의 제안을 받을 수 있습니다. 저희는 이를 검토하고 Trae에서 실행하여 최적화 효과를 확인합니다.&lt;/p&gt;
&lt;h3 id=&#34;기술-스택&#34;&gt;기술 스택
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;프론트엔드: React + TypeScript&lt;/li&gt;
&lt;li&gt;백엔드: Golang + Gin + GORM&lt;/li&gt;
&lt;li&gt;데이터베이스: PostgreSQL 17&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;시스템-아키텍처&#34;&gt;시스템 아키텍처
&lt;/h2&gt;&lt;h2 id=&#34;백엔드-아키텍처&#34;&gt;백엔드 아키텍처
&lt;/h2&gt;&lt;p&gt;백엔드는 Golang의 Gin 프레임워크로 구현된 RESTful API이며, 주요 모듈은 다음과 같습니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据库模块&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GORM을 ORM 프레임워크로 사용&lt;/li&gt;
&lt;li&gt;환경 변수를 통해 데이터베이스 연결을 구성할 수 있습니다&lt;/li&gt;
&lt;li&gt;자동으로 데이터베이스 테이블 마이그레이션&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;路由模块&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;RESTful API 설계&lt;/li&gt;
&lt;li&gt;통일된 오류 처리 메커니즘&lt;/li&gt;
&lt;li&gt;내장 요청 로깅&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;跨域处理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;로컬 개발 환경 간의 교차 도메인 접근을 지원합니다&lt;/li&gt;
&lt;li&gt;구성 가능한 CORS 정책&lt;/li&gt;
&lt;li&gt;쿠키 크로스 도메인 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;프론트엔드-아키텍처&#34;&gt;프론트엔드 아키텍처
&lt;/h2&gt;&lt;p&gt;리액트(React) + 타입스크립트(TypeScript)로 구축하여 다음과 같은 기능을 구현했습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주식 목록 표시&lt;/li&gt;
&lt;li&gt;자선주 관리&lt;/li&gt;
&lt;li&gt;시장 데이터 표시&lt;/li&gt;
&lt;li&gt;오류 표시 메커니즘&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>AI 발전 2년: 도커 출시 전과 비슷한 상황</title>
        <link>https://blog.ttf248.life/ko/p/ai-development-two-years-docker-pre-release/</link>
        <pubDate>Thu, 20 Feb 2025 18:16:37 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/ai-development-two-years-docker-pre-release/</guid>
        <description>&lt;p&gt;최근 몇 년간 인공지능(AI)은 기술 분야에서 가장 활발하게 논의되는 주제 중 하나이며, 특히 지난 2년간 AI 기술이 비약적으로 발전했습니다. 심층 학습, 자연어 처리, 컴퓨터 비전, 자동화 의사 결정 시스템 등 AI 적용 사례는 끊임없이 등장하고 있습니다. 하지만 기술적 진보에도 불구하고 AI는 Docker 출시 이전과 유사한 병목 현상에 직면해 있는데, 시장을 폭발적으로 성장시킬 만한 &amp;lsquo;경험 있는 애플리케이션&amp;rsquo;이 부족하기 때문입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI 발전 두 해, 도커 출시 전과 비슷한 상황입니다. 아직 게임 체인저와 같은 Killer 앱이 없고, 현재 기술 기반으로 완벽한 활용 사례를 만들어내야 합니다. 도커는 획기적인 신기술을 많이 사용하지 않았지만, 전체 솔루션이 매우 합리적이었고 운영 및 개발 업무 흐름을 변화시켰습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;인공지능-발전-현황-기술은-성숙했지만-적용은-아직-돌파구를-찾아야-한다&#34;&gt;인공지능 발전 현황: 기술은 성숙했지만, 적용은 아직 돌파구를 찾아야 한다
&lt;/h2&gt;&lt;p&gt;기술적인 측면에서 볼 때, AI는 지난 2년간 상당한 발전을 이루었습니다. OpenAI의 GPT 시리즈 모델이나 Google의 BERT, DeepMind의 Alpha 시리즈처럼 AI의 처리 능력은 이전 예상보다 훨씬 뛰어넘었습니다. 특히 자연어 처리 분야에서 GPT-4와 같은 모델들은 강력한 생성 능력을 갖추는 것은 물론 이해와 추론에서도 놀라운 성능을 보여주고 있습니다.&lt;/p&gt;
&lt;p&gt;그럼에도 불구하고, 기술이 비약적으로 발전했음에도 불구하고 AI의 실제 적용은 여전히 어려움을 겪고 있습니다. Docker 출시 이전과 마찬가지로 AI의 잠재력은 크지만 아직 광범위하게 보급되어 산업을 변화시킬 만한 혁신적인 killer application은 나타나지 않았습니다. 많은 사람들이 AI의 전망에 대해 이야기하지만, 직접적으로 혁명적인 변화를 가져올 수 있는 애플리케이션 시나리오를 찾기는 쉽지 않습니다. 현재 많은 AI 애플리케이션은 초기 단계에 머물러 있으며, 대부분 추가 통합 및 최적화가 필요합니다.&lt;/p&gt;
&lt;h2 id=&#34;도커와-ai의-유사성-기술-자체가-혁신이-아니라-솔루션이-핵심이다&#34;&gt;도커와 AI의 유사성: 기술 자체가 혁신이 아니라, 솔루션이 핵심이다
&lt;/h2&gt;&lt;p&gt;만약 Docker 출시 이전의 역사를 되돌아보면, 당시 기술 환경과 AI 발전 현황 사이에 많은 유사점을 발견할 수 있습니다. Docker가 등장하기 전, 컨테이너 기술은 이미 새로운 것이 아니었습니다. 초기 LXC(Linux Containers)나 가상화 기술들은 이미 컨테이너화의 기본적인 기능을 갖추고 있었습니다. 하지만 Docker는 기존 기술을 능숙하게 통합하고 최적화하여 더욱 간단하고 직관적이며 효율적인 솔루션을 제시했습니다. 이 솔루션은 획기적인 기술을 도입한 것은 아니지만, 운영 및 개발 과정에서 많은 어려움을 해결하고 소프트웨어 배포, 확장 및 관리 프로세스를 크게 단순화했습니다.&lt;/p&gt;
&lt;p&gt;동일하게도 AI 분야 또한 유사한 상황에 직면해 있습니다. 현재의 AI 기술은 더 이상 “새로운 물건”이 아니지만, 진정으로 대규모 적용을 달성하기 위해서는 Docker처럼 기존 기술을 융합하고 최적화하여 합리적인 애플리케이션 방안을 형성하는 완벽한 실행 사례가 필요합니다. AI의 핵심 애플리케이션은 새로운 기술 혁신에 의존하기보다는 기존 기술을 통합하여 실제 비즈니스에서 발생하는 문제점과 요구사항을 해결하는 데 달려 있을 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;ai의-도커-순간은-어떻게-찾아낼-수-있을까&#34;&gt;AI의 “도커 순간”은 어떻게 찾아낼 수 있을까?
&lt;/h2&gt;&lt;p&gt;AI 기술이 진정으로 널리 활용되려면 여러 측면에서 노력해야 합니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实际场景的深度挖掘&lt;/strong&gt;
현재 많은 AI 활용 사례는 아직 실험적인 성격이 강하고 대규모로 실제 적용되지는 못하고 있습니다. 예를 들어, AI 고객 상담이나 지능형 추천과 같은 분야는 널리 사용되고 있지만 기능에 여러 제약이 있어 산업의 난관을 돌파하지 못했습니다. 진정한 도약은 전통적인 방법으로 오랫동안 어려움을 겪어왔던 의료, 제조업, 물류와 같은 분야에서 발생할 수 있으며, AI는 더욱 효율적인 데이터 처리 및 예측 분석을 통해 기업이 이러한 복잡한 환경에서 효율성을 높이고 비용을 절감하도록 도울 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;产品化与易用性&lt;/strong&gt;
Docker와 같이 컨테이너화 프로세스를 간소화하여 운영 효율성을 높이는 것처럼, AI 제품의 사용 편의성 또한 매우 중요합니다. AI 보급은 기술 보급일 뿐만 아니라 제품화된 보급입니다. AI를 일상 업무 흐름에 통합하고, 사용자가 심도 있는 기술 이해 없이도 쉽게 이러한 도구를 활용할 수 있도록 하는 것이 AI 상용화의 중요한 단계입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生态建设与标准化&lt;/strong&gt;
어떤 새로운 기술이든 널리 활용되려면 생태계 구축이 필수적이다. Docker가 빠르게 성장한 이유는 바로 개방성과 호환성 덕분인데, 개발자들이 다양한 클라우드 플랫폼, 도구 및 서비스와 쉽게 연동할 수 있도록 했기 때문이다. 마찬가지로 AI의 미래 또한 생태계 구축에 달려있다. AI의 표준화, 모델 공유, 데이터 개방, 기술 통합성은 AI가 광범위한 산업 분야에 적용될 수 있는지 여부를 결정하는 중요한 요소이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;결론적으로-ai의-미래는-가능성으로-가득하지만-더욱-완벽한-해결책이-필요합니다&#34;&gt;결론적으로, AI의 미래는 가능성으로 가득하지만, 더욱 완벽한 해결책이 필요합니다
&lt;/h2&gt;&lt;p&gt;비록 AI 기술이 지난 2년간 상당한 발전을 이루었지만, 아직은 “획기적인 응용 분야는 없는” 단계에 머물러 있습니다. Docker 출시 전의 컨테이너화 기술과 마찬가지로, AI 역시 합리적인 활용 사례를 통해 기존 기술을 비즈니스 요구와 심층적으로 통합해야 진정한 대규모 적용 및 보급이 가능합니다. 기술 혁신은 물론 중요하지만, 프로세스를 간소화하고 효율성을 높이는 솔루션이 기술의 보급과 발전을 더욱 촉진할 수 있습니다.&lt;/p&gt;
&lt;p&gt;미래에 AI는 Docker처럼 획기적인 기술 돌파구보다는 기존 기술을 통합하여 완벽한 활용 사례를 구축함으로써, 우리의 업무와 생활 방식을 바꿀 수 있을 것이다&lt;/p&gt;</description>
        </item>
        <item>
        <title>프로토콜 버퍼 기본값 함정: 기본값이 비즈니스 로직의 숨겨진 살인자</title>
        <link>https://blog.ttf248.life/ko/p/protobuf-zero-value-traps/</link>
        <pubDate>Thu, 20 Feb 2025 15:26:51 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/protobuf-zero-value-traps/</guid>
        <description>&lt;p&gt;미국 주식 시장은 세 가지 거래 시간대로 나뉘는데, 전시장, 장중, 장후가 있습니다. 데이터 인터페이스는 가능한 한 대역폭을 절약하기 위해 최초에는 전체 데이터를 전송하고, 이후부터는 모든 필드를 증분 방식으로 푸시합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;최적의 방안을 안 쓰는 이유는 무엇인가요? 여러 프로젝트 그룹에 영향을 미치고, 일부는 이미 오래전에 배포되었기 때문입니다. 저희 쪽은 새로 연결하는 입장이므로 최대한 호환성을 고려할 수밖에 없습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;일련의-문제&#34;&gt;일련의 문제
&lt;/h2&gt;&lt;p&gt;초록만 보면 별다른 문제 없어 보이지만, 시스템 아키텍처에 문제가 유입되면서 일련의 문제가 발생했다. 막 지난 문제를 해결하려니 또 다른 문제가 생겼는데, 이 문제는 이전 문제 때문에 생긴 것이다.&lt;/p&gt;
&lt;h3 id=&#34;거래-시간-식별-불가&#34;&gt;거래 시간 식별 불가
&lt;/h3&gt;&lt;p&gt;알려진 디스크 상태는 __INLINE_CODE_0__BOLD_2&lt;code&gt;零&lt;/code&gt;이 기본값인지, 실제 비즈니스 값인지를 나타냅니다&lt;/p&gt;
&lt;p&gt;일반적인 이해로, 0을 받을 때마다 이 0이 새로운 시세 설정 값인지, 아니면 protobuf의 기본값인지 판단하기 어렵습니다&lt;/p&gt;
&lt;h3 id=&#34;선택-사항-도입&#34;&gt;선택 사항 도입
&lt;/h3&gt;&lt;p&gt;Since protobuf release 3.15, proto3 supports using the optional keyword (just as in proto2) to give a scalar field presence information&lt;/p&gt;
&lt;p&gt;조 내 통신 프로토콜은 &lt;code&gt;protobuf&lt;/code&gt;BOLD_3&lt;code&gt;optional&lt;/code&gt; 关键字。懂的都理解，由于从底层开始引入 &lt;code&gt;protobuf&lt;/code&gt;을 기반으로 하며, 프로젝트 하위 계층이 정적 라이브러리 방식으로 배포되어 전체 컴파일 링크를 업그레이드해야 하는데, 이 비용은 매우 높습니다&lt;/p&gt;
&lt;h3 id=&#34;gcc-버전-문제&#34;&gt;GCC 버전 문제
&lt;/h3&gt;&lt;p&gt;어떻게든 대안을 마련했는데, 하위에서 두 가지 다른 버전을 출시하여 최대한 &lt;code&gt;protobuf&lt;/code&gt; 新版本的编译依赖传播。但是在编译的时候，发现 &lt;code&gt;gcc&lt;/code&gt; 版本太低，不支持 &lt;code&gt;protobuf&lt;/code&gt;의 새로운 기능을 제어하려고 합니다&lt;/p&gt;
&lt;p&gt;팀 내에서 주로 사용되는 서버 유형은 CentOS 7, CentOS 8입니다. CentOS 7의 기본 버전이 7.4 이상이기 때문에 CentOS 7을 지원하지 않습니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82461&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bug 82461 - [7 Regression] Temporary required for brace-initializing (non-literal-type) member variable&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;최종적으로 관련 서비스 배포 및 컴파일 서버를 CentOS 8로 옮겨 이 문제를 해결했습니다&lt;/p&gt;
&lt;h2 id=&#34;합리적-열거&#34;&gt;합리적 열거
&lt;/h2&gt;&lt;p&gt;전체 문제를 되돌아보면, 사실 더 간단하고 효율적인 해결책이 있습니다. 열거형의 정의를 0부터 시작하는 대신 1부터 시작하도록 조정하면 기본값과 비즈니스 값을 효과적으로 구별하여 위에서 언급한 일련의 번거로움을 피할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;왜-1부터-시작하는-것이-더-합리적일까요&#34;&gt;왜 1부터 시작하는 것이 더 합리적일까요?
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 내에서, 열거형의 기본값은 항상 0으로 고정됩니다. 만약 의미 있는 비즈니스 값을 0으로 정의한다면(예: &amp;ldquo;판 중&amp;rdquo;), 증분 푸시 시 비즈니스 측에서는 수신된 0이 비즈니스 값인지 아니면 초기화되지 않은 기본값인지 판단할 수 없습니다. 하지만 열거형을 1부터 시작하여 정의하면, 0은 무의미한 기본값 또는 &amp;ldquo;알 수 없음&amp;rdquo; 상태로 유지될 수 있으며, 문제는 해결됩니다.&lt;/p&gt;
&lt;p&gt;제안된 방법:&lt;/p&gt;
&lt;p&gt;프로토콜 버퍼 열거형을 설계할 때 항상 0을 무의미한 기본값으로 정의하십시오
실제 비즈니스 값을 1부터 할당하여 기본값 0과 구분합니다&lt;/p&gt;
&lt;p&gt;이 작은 조정으로 우리는 거래 시간대 식별 문제를 해결했을 뿐만 아니라, 향후 프로토콜 설계에 귀중한 교훈을 얻었습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>국경일 전후 주식시장의 “냉혹과 열정의 두 가지 얼굴”: 급등과 급락의 극적인 전환</title>
        <link>https://blog.ttf248.life/ko/p/national-holiday-stock-market-rollercoaster/</link>
        <pubDate>Sat, 15 Feb 2025 03:42:26 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/national-holiday-stock-market-rollercoaster/</guid>
        <description>&lt;p&gt;2024년 국경일 직전, 중국 증시는 눈부신 상승세를 보였으나 휴일 이후 극적인 하락세로 돌아섰다. 이러한 증시의 “냉난상치(冰火兩重天)”는 투자자들에게 롤러코스터와 같은 경험을 안겨줄 뿐만 아니라 정책, 경제 및 시장 원리에 대한 깊은 성찰을 불러일으켰다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;지난해 국경절 전 주식 시장 급등을 주제로 블로그를 작성하되, 국경절 이후의 급락도 잊지 않도록 하십시오. 기사 형식으로 작성합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;국경일-전-주식-시장-급등-정책-주도의-축제&#34;&gt;국경일 전 주식 시장 급등: 정책 주도의 축제
&lt;/h2&gt;&lt;p&gt;2024년 국경절 전 5개의 거래일 동안 중국 증시는 침체에서 순식간에 ‘들끓는 모드’로 전환되었다. 9월 30일, A주 시장은 전반적으로 큰 폭으로 상승하며 주요 지표들은 모두 사상 최고치를 경신했다. 상하이 지수는 8.06%, 선전 종합 지수는 10.67%, 코스닥 지수는 15.36% 급등했으며, 베이징 증시 50 지수는 역대 최고 일일 상승률인 22.84%를 기록했다. 시장 심리가 극도로 고조된 가운데, 상하이, 선전, 베이징 세 거래소의 당일 거래액은 26115억 위안에 달하며 전날보다 11559억 위안 증가했다. 대다수 5300개 이상의 종목이 상승세를 보이며 ‘모두 빨간색’의 모습을 연출했다.&lt;/p&gt;
&lt;p&gt;이번 시장 상승세의 핵심 동력은 정부의 예상외로 강력한 정책 발표와 그에 따른 시장 기대 변화에서 비롯되었습니다. 9월 24일, 중국인민은행이 지준율 인하, 금리 인하, 기존 주택담보대출 금리 인하 및 주택담보대출 최소 목돈 비율 통일을 발표했습니다. 9월 26일 중앙정치국 회의에서는 재정 및 통화 정책을 통한 경기 부양 노력을 강조하며 자본 시장 활성화를 위해 장기 자금 유치를 적극적으로 독려했습니다. 9월 30일에는 부동산 지원 정책 4가지가 집중적으로 발표되었습니다. 이러한 정책들은 정부가 시장과 성장을 안정시키겠다는 의지를 시장에 전달했습니다.&lt;/p&gt;
&lt;h2 id=&#34;국경절-이후-주식-시장-급락-흥행-직후의-침착과-조정&#34;&gt;국경절 이후 주식 시장 급락: 흥행 직후의 침착과 조정
&lt;/h2&gt;&lt;p&gt;그러나 국경절 연휴가 끝난 후 시장 심리가 급격히 악화되었다. 10월 8일, A주식은 거의 한도 폭의 강세로 시작했으나, 급등 이후 시장은 격렬한 변동을 겪으며 하락 마감했다. 그 이후 시장 중심이 계속 하락하여 10월 16일까지 상하이 지수는 15% 이상의 등폭을 기록하고 누적 하락 470여 점에 달했다. 10월 8일부터 10일까지 A주식 핵심 지표는 전반적으로 하락세를 보였으며, 특히 창업판 지수는 6.21% 하락했다.
이번 폭락의 원인은 한편으로는前期 급등으로 인한 위험 해소이고, 다른 한편으로는 시장의 정책 기대 조정과 관련이 있습니다. 일부 투자자들은 정책의 단기 효과는 나타나고 있지만 장기적인 효과는 더 지켜봐야 한다고 생각합니다. 또한 해외 시장의 변동성도 A주에 영향을 미쳤습니다. 10월 9일, 항셍지수는 9.41% 폭락했고, A50 선물은 10.4% 폭락하며 시장 하락을 더욱 심화시켰습니다.&lt;/p&gt;
&lt;h2 id=&#34;시장-성찰과-전망&#34;&gt;시장 성찰과 전망
&lt;/h2&gt;&lt;p&gt;국경일 전후 주식 시장의 격렬한 변동은 시장에 정책, 경제 및 시장 원리에 대한 깊이 있는 성찰을 불러일으켰습니다. 한편 정책의 단기적인 경기 부양 효과는 뚜렷하지만 장기적인 영향은 지켜봐야 할 것입니다. 다른 한편으로는 시장의 급격한 상승과 하락은 투자자들이 합리성을 유지하고 감정적인 투자를 피하도록 상기시키기도 합니다.&lt;/p&gt;
&lt;p&gt;향후 A주 시장이 진정한 “장기 상승세”를 보일 수 있을지는 정책이 실체 경제에 효과적으로 전달되어 궁극적으로 경제 펀더멘털의 실질적인 개선을 이끌어낼 수 있는지에 달려 있습니다. 투자자는 정책의 구체적인 실행 상황과 경제 지표 변화에 유의하며 합리적으로 투자 전략을 조정해야 합니다.&lt;/p&gt;
&lt;p&gt;국경일 전후 주식 시장의 급등락은 정책과 시장 간의 경쟁이며, 투자자 심리에 대한 시험대였다. 이 “차가운 불길” 같은 변동성 속에서 우리는 시장의 힘과 정책의 영향력을 목격했다. 앞으로 시장이 어떻게 펼쳐질지 지켜보겠다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>설날 기간, 네자 신규 타겟 확장</title>
        <link>https://blog.ttf248.life/ko/p/chinese-new-year-nizha-breakthrough/</link>
        <pubDate>Sat, 15 Feb 2025 03:40:07 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/chinese-new-year-nizha-breakthrough/</guid>
        <description>&lt;p&gt;저희 중국인들은 명절이면 온 가족이 모여 영화를 보는 것이 필수적인 오락 활동입니다. 올해 춘절 기간에 &amp;lsquo;哪吒&amp;rsquo;가 엄청난 인기를 끌었는데, 거리마다 다들 이야기하고 있고, 분위기는 마치 예전의 &amp;lsquo;战狼&amp;rsquo;과 비슷합니다. 애국주의 테마가 느껴져서 저도 모르게 민족적 자부심이 솟아오릅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;설명할 수 없는 민족적 자부심과 함께 춘절 기간에 ‘너자신’의 흥행이 화제가 되고 있다. 과거 ‘전랑’, ‘애국’ 영화와 유사한 분위기이지만, 게임 유저로서 보기에 지나치게 과장된 면이 많다. 격투 장면은 온라인 게임 스타일이 강하고, 이미 너자신의 흥행을 위해 영화 티켓을 구매했지만 보지 않기로 한 사람들도 많이 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;격투-장면의-질감이-부족해&#34;&gt;격투 장면의 질감이 부족해
&lt;/h2&gt;&lt;p&gt;나는 게임을 즐기는 사람이라 평소 온라인 게임 세상에 몰두하며 영화에는 큰 기대를 하지 않았다. 하지만 이 《哪吒》의 인기가 워낙 대단해서 주변 사람들이 계속 이야기하길래, 한번 볼까 하고 극장에 들어갔다. 영화가 시작되자 화면이 나오는데, 마음이 “컥” 하는 느낌이었다. 비록 그래픽 퀄리티는 예전보다 많이 발전했지만, 몇몇 장면은 좀 번들거리는 느낌이었고, 액션 장면은 게임 스타일이 너무 강해서 그랬다. 오랫동안 게임을 해왔기 때문에 이런 화면 스타일과 게임 속 일부 장면이 너무 흡사해서 영화 특유의 질감이 부족했다.&lt;/p&gt;
&lt;h2 id=&#34;광적인-영화-팬&#34;&gt;광적인 영화 팬
&lt;/h2&gt;&lt;p&gt;영화 보고 나오니, 어휴, 꽤 많은 사람들이 《哪吒》의 흥행을 위해 티켓은 샀는데 영화는 안 보더라. 이거 정말 대단하다! 역시 이 영화에 대한 사람들의 열정이 엄청나서 뭐든 하고 싶어 하는구나.&lt;/p&gt;
&lt;h2 id=&#34;줄거리&#34;&gt;줄거리
&lt;/h2&gt;&lt;p&gt;우리 돌아보면, 《전랑》할 때, 우징이 “나를 범하는 자는 멀리 떨어져 있어도 반드시 멸한다”고 외칠 때, 얼마나 많은 사람이 열혈을 끓이며 우리 중국 군인이 너무 대단하고, 우리 나라가 너무 강대하다고 생각했습니까? 이 《哪吒》는 비록 그렇게 직접적인 애국 구호는 아니지만, 중국 전통 문화를 섬세하게 보여주고 있습니다. 여차와 오옹병 같은 신화적 인물들, 우리는 어릴 때부터 그들의 이야기를 듣고 자랐는데, 영화에서 그들의 원한과 갈등, 성장 과정을 생생하게 묘사하는 것은 바로 우리 중국 문화의 매력이 아니겠습니까?&lt;/p&gt;
&lt;p&gt;네자(哪吒) 이야기를 해보죠. 어릴 때 오해받고 백안시당했지만, 굴하지 않고 “내 운명은 내가 결정한다”라고 외쳤습니다. 그 정신과 우리 중국인 특유의 끈기가 얼마나 비슷한지 말이죠. 어떤 어려움이 닥쳐도 포기하지 않고 자신의 노력으로 운명을 바꾼다는 것은, 아오바이(敖丙)에게도 해당됩니다. 가족의 사명감을 짊어지고 냉정해 보이지만 실은 마음이 착하고, 친구를 위해서 자신을 희생하는 모습 말입니다. 이런 우정과 책임감은 현실에서도 흔히 볼 수 있습니다, 그렇죠?&lt;/p&gt;
&lt;h2 id=&#34;애니메이션-영화의-발전&#34;&gt;애니메이션 영화의 발전
&lt;/h2&gt;&lt;p&gt;비록 《나차전》이 몇몇 부분에서 완벽하지는 않지만, 중국 전통 문화와 현대 영화 기술을 잘 결합하여 중국 애니메이션 영화의 발전을 엿볼 수 있게 해주었다. 마치 과거 《전랑》이 중국 영화가 액션 장르에서 이룬 도약을 보여준 것처럼. 이러한 발전은 우리 중국 영화도 국제 무대에서 두각을 나타낼 수 있고, 외국인들에게 중국 문화의 멋을 선보일 수 있다는 자신감을 준다.&lt;/p&gt;
&lt;p&gt;우리 중국인들은 어디를 가든 마음속에는 자신의 국가와 문화를 품고 다닌다. &amp;lt;哪吒&amp;gt;나 &amp;lt;战狼&amp;gt;과 같은 영화는 마치 열쇠처럼 우리 내면 깊숙한 곳에 있는 민족 자부심의 문을 여는 듯하다. 웃음과 즐거움 속에서 나라의 위대함과 문화의 매력을 느끼게 하고, 각자의 자리에서 열심히 노력하여 국가의 번영과 발전에 기여할 수 있도록 격려한다. 아마도 이러한 영화가 인기를 얻고 우리 민족 자부심을 불러일으키는 이유가 바로 이것일 것이다. 앞으로도 이런 영화들이 더 많이 등장하여 우리 민족 자부심이 항상 벅차게 유지되길 바란다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>백그라운드 서비스 TCP 통신 이상 점검</title>
        <link>https://blog.ttf248.life/ko/p/backend-service-tcp-communication-troubleshooting/</link>
        <pubDate>Fri, 14 Feb 2025 22:54:13 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/backend-service-tcp-communication-troubleshooting/</guid>
        <description>&lt;p&gt;비즈니스 모델: 백엔드 서비스는 TCP를 통해 그룹의 호가 게이트웨이와 연결을 맺습니다. 각 연결 시, 먼저 인증 요청을 보내고 이후 지속적으로 하트비트 패킷을 전송하여 연결 상태를 유지합니다.
그러나 어느 날, 서비스 연결 해제 경고 메시지를 받았다. 꼼꼼히 로그를 확인한 결과, 백엔드 서비스는 계속해서 하트비트를 전송하고 있었지만 상대방은 전혀 응답하지 않았음에도 불구하고 연결은 끊어지지 않았다.&lt;/p&gt;
&lt;h2 id=&#34;현장-설명&#34;&gt;현장 설명
&lt;/h2&gt;&lt;p&gt;원래 회사에서 야근하며 프로젝트 진행을 추진 중이었는데, 업무 그룹 채팅방에 갑자기 경고 메시지가 떴다. 처음에는 예전 문제라고 생각했다. 네트워크 타임아웃으로 인해 하트비트 전송이 실패해서 서비스 연결이 끊어진 것 같았다. 하지만 로그를 자세히 확인해 보니 실제 상황은 그렇지 않았다. 백엔드에서 인증 로그인 메시지를 보냈지만 응답을 받지 못했고, 동시에 하트비트는 계속 전송되었지만 상대방은 어떠한 하트비트 데이터도 반환하지 않았다. 로그를 심층적으로 분석한 결과 다음과 같은 몇 가지 주요 문제가 드러났다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;인가 메시지 응답 없음: 상대방 시스템이 재시동 중일 가능성이 높으며, 이로 인해 인가 메시지가 적시에 처리되지 못했을 수 있습니다&lt;/li&gt;
&lt;li&gt;승인되지 않은 상태에서 하트비트 데이터를 전송하는 문제는 프로그램 로직의 결함 때문입니다. 하트비트 전송 함수가 연결 상태만 확인하고, 승인 상태를 확인하지 않아 판단 로직에 오류가 있었습니다.&lt;/li&gt;
&lt;li&gt;서비스 연결 해제 실패: 서비스가 연결을 끊을 수 있다면, 재연결 메커니즘이 작동하여 인증 메시지를 다시 보낼 수 있습니다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;현재 해결해야 할 마지막 문제, 즉 서비스 연결 해제 실패 원인을 파악하기 위해 보다 면밀한 점검이 필요합니다&lt;/p&gt;
&lt;h2 id=&#34;네트워크-데이터-패킷-분석&#34;&gt;네트워크 데이터 패킷 분석
&lt;/h2&gt;&lt;p&gt;네트워크 데이터 패킷을 획득하여 추가 분석합니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/backend-service-tcp-communication-troubleshooting/20250220151952.png&#34;
	width=&#34;1126&#34;
	height=&#34;202&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tcpdump&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;557&#34;
		data-flex-basis=&#34;1337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;데이터를 분석해 보면 심박수는 정상적으로 전송되고 있지만, 상대방 서버로부터 응답이 없고, __INLINE_CODE_0__가 주어졌기 때문에 연결이 자동으로 끊어지지 않습니다&lt;/p&gt;
&lt;h2 id=&#34;일반적인-플래그-설명&#34;&gt;일반적인 플래그 설명
&lt;/h2&gt;&lt;p&gt;TCP 프로토콜에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;（Push）和 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;(ACK)는 데이터 전송과 흐름 제어를 위해 사용되는 두 개의 중요한 플래그입니다. 이들의 역할은 다음과 같습니다:&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-pshpush-flag&#34;&gt;&lt;strong&gt;1. PSH（Push Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;:
수신측은 버퍼 내의 데이터를 상위 애플리케이션으로 즉시 푸시하고, __BOLD_2&lt;code&gt;PSH&lt;/code&gt; 플래그가 설정된 데이터 블록을 처리하여 운영체제 버퍼에 보관하지 않고 최대한 빠르게 애플리케이션으로 전달해야 합니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;典型场景&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클라이언트가 요청을 보낼 때(예: &lt;code&gt;GET /index.html&lt;/code&gt;BOLD_3&lt;code&gt;PSH&lt;/code&gt;), 서버의 즉각적인 응답을 기대합니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;키보드 입력 시마다 __인라인_2____가 발생하여 입력 문자열이 실시간으로 전송됩니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비디오 스트리밍, 온라인 게임 등 저지연 시나리오에서 &lt;code&gt;PSH&lt;/code&gt;을 사용하여 지연 시간을 줄일 수 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 필수는 아니며, 수신자는 해당 비트(flag bit)를 무시할 수 있습니다(데이터는 정상적으로 처리해야 합니다)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;발신자가 __INLINE_CODE_0__을 설정하지 않을 경우, 수신자는 자체 버퍼링 정책에 따라 데이터를 푸시할 시점을 결정합니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-ackacknowledgment-flag&#34;&gt;&lt;strong&gt;2. ACK（Acknowledgment Flag）&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;:
수신된 이전 데이터 세그먼트가 올바르게 전달되었음을 확인하는 신호이며, 다음 바이트 시퀀스 번호를 나타냅니다. 이는 TCP의 핵심적인 신뢰성 있는 전송 메커니즘입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;工作原理&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 전송 시, 송신자는 수신자가 기대하는 (&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 值（例如 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;)을 함께 보냅니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수신측은 데이터를 수신한 후, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 메시지 세그먼트를 생성하여 수신 확인된 데이터 시퀀스 번호를 알립니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;발신자는 해당 __INLINE_CODE_0__을 수신한 후에야 재전송할 것입니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;만약 발신자가 번호가 &lt;code&gt;100~199&lt;/code&gt; 的数据段，则期望接收方的 &lt;code&gt;ACK&lt;/code&gt; 应为 __INLINE_CODE_2__인 메시지를 보냈다면,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수신자가 재전송 요청을 __INLINE_CODE_0__BOLD_2&lt;code&gt;ACK=150&lt;/code&gt;에 알리지 못함&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-psh-和-ack-的组合&#34;&gt;&lt;strong&gt;3. PSH 和 ACK 的组合&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;TCP 패킷에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 和 __INLINE_CODE_1__이 동시에 나타날 수 있으며, 다음과 같은 상황에서 흔히 볼 수 있습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP 请求响应&lt;/strong&gt;:
클라이언트가 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 请求时（含数据），会设置 __INLINE_CODE_1__BOLD_4&lt;code&gt;ACK&lt;/code&gt;(이전 응답 확인)을 보냅니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Client → Server: SYN, ACK=1 → 建立连接
Client → Server: PSH, ACK=1, 数据 → 发送请求数据
Server → Client: PSH, ACK=数据长度+1 → 返回响应
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSH 握手后传输命令&lt;/strong&gt;:
클라이언트가 명령을 입력하면 &lt;code&gt;PSH&lt;/code&gt; 和 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 데이터 세그먼트를 전송하여 명령이 즉시 전송되고 서버에서 처리되도록 합니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-其他标志位的关联&#34;&gt;&lt;strong&gt;4. 其他标志位的关联&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;플래그&lt;/th&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;간략 설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;동기화, 초기화 연결 (세 번의 악수)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연결 우아하게 종료&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RST&lt;/td&gt;
&lt;td&gt;재설정&lt;/td&gt;
&lt;td&gt;강제 연결 종료 (비정상 상황)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URG&lt;/td&gt;
&lt;td&gt;긴급&lt;/td&gt;
&lt;td&gt;긴급 포인터 표시 (거의 사용하지 않음)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;관심사는 &lt;strong&gt;数据尽快到达应用层&lt;/strong&gt;, 지연 감소입니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK&lt;/strong&gt; 중점은 &lt;strong&gt;数据的可靠传输&lt;/strong&gt;, 데이터 손실이나 순서 오류 방지입니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;두 가지가 협력하여 TCP 프로토콜의 효율성과 안정성을 균형 있게 맞췄다&lt;/p&gt;</description>
        </item>
        <item>
        <title>돈 벌려고 하는 일은 서두르면 안 돼, 서두르다고 되는 것도 아니야</title>
        <link>https://blog.ttf248.life/ko/p/investing-takes-time/</link>
        <pubDate>Fri, 14 Feb 2025 20:30:24 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/investing-takes-time/</guid>
        <description>&lt;p&gt;수년간의 주식 투자 경험을 되돌아보면 큰 돈을 벌지는 못했지만, 크게 손해 보지도 않았다. 가장 큰 문제는 자금 흐름 계획이 비합리적이고 마음가짐이 불안정하다는 것이다. 현재 주요 소득원은 직장이며 매일 일해서 고정 급여를 받고 있고, 자금 변동에 대한 감당 능력은 채권과 은행 예금 수준에 머물러 있다. 하지만 사람들은 모두 욕심이 많아서, 조금 사면 오르면 돈을 벌 수 없고, 많이 사면 떨어지면 손해를 본다. 이때 마음가짐의 안정은 매우 중요하며, 이는 우리의 재산을 지켜주는 배를 굳건히 세워줄 것이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;주식 투자 심리 문제에 대한 글 작성&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;과거-손실-사례&#34;&gt;과거 손실 사례
&lt;/h2&gt;&lt;p&gt;처음 시장에 들어왔을 때 소형주나 신규 상장 주식을 제외하면, 이후 접하게 된 종목들은 대부분 산업은행, 중국통신, 헝생전자, 중싱통신, 각종 대형주 지수 펀드였다&lt;/p&gt;
&lt;p&gt;__INLINE_CODE_0__사실, 더 많은 것을 탐하는 욕심에서 시작된 것이었습니다. 초기에 투자 확대를 서두르다가 나중에는 현금 흐름이 고갈되었죠. 보험료, 주택 구매, 결혼 등은 자금 흐름의 주요 부분을 차지하는데, 전체적인 계획에 충분한 자금 흐름을 확보하지 못해 후반적으로 자금 부족을 겪게 된 것입니다.&lt;/p&gt;
&lt;p&gt;매수 블루칩은 __INLINE_CODE_0__에 동행하는 것입니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;만약 헝다 사태로 은행주가 폭락할 때 성공적으로 하락세에 베팅했다면, 거시경제에 대한 이해가 부족한 것입니다. 부동산이 국가 경제에서 차지하는 비중이 너무 크고 연관된 요소들이 많아서 무시할 수 없습니다. 이후 지속적인 증시 하락과 배당주 등의 고성장 주식이 2년 정도 상승했습니다.&lt;/li&gt;
&lt;li&gt;무역 전쟁 초기 단계에서 &lt;strong&gt;中兴&lt;/strong&gt;이 큰 타격을 받았고, 주가도 급락했지만 이후 서서히 회복되었습니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恒生电子&lt;/strong&gt;은 전 회사 소유였고, 안트핀으로 간 이후 주가가 급락했지만, 이 주식은 세력이 조작하고 있어서 매년 몇 번씩 상승할 수 있습니다. 적절한 포지션을 유지하면 큰 손실을 보지 않을 것입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;탐욕-이성을-삼키는-괴수&#34;&gt;탐욕: 이성을 삼키는 &amp;ldquo;괴수&amp;rdquo;
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;贪婪是炒股心态中最为常见的问题&lt;/strong&gt; 주식 시장이 계속 상승세를 타고 투자자들의 계좌 잔고가 끊임없이 증가하면 탐욕심이 은근히 생겨난다. 많은 사람들이 주가가 이미 높은 수준에 있음에도 불구하고 더 오를 것이라는 환상에 빠져 더 많은 이익을 얻으려고 멈추지 못한다. 그들은 탐욕에 눈이 멀어 시장의 법칙과 위험을 잊는다. 예를 들어, 특정 인기 테마주가 과열되면서 주가가 단기간에 몇 배로 상승하면 일부 투자자들이 거기에 깊이 빠져들고 끊임없이 매수 포지션을 늘려 마지막 승자가 되기를 바란다. 그러나 시장은 영원히 비정상적인 상태를 유지하지 않으며, 거품이 터지고 주가가 급락할 때 탐욕에 이끌린 투자자들은 막대한 손실을 입는다. 탐욕은 그들이 합리적인 분석과 의사 결정 능력을 잃게 만들고, 현명한 투자자가 아닌 “도박꾼”이 되게 한다.&lt;/p&gt;
&lt;h2 id=&#34;두려움-발목을-묶는-속박&#34;&gt;두려움: 발목을 묶는 ‘속박’
&lt;/h2&gt;&lt;p&gt;탐욕의 반대는 두려움이다. 두려움 또한 주식 시장에서 강력한 파괴력을 지닌다. 시장이 급격하게 하락하고 주가가 큰 폭으로 떨어질 때 투자자들은 쉽게 공포에 휩싸인다. 이로 인해 그들은 시장에 대한 신뢰를 잃고, 비록 손에 쥔 주식의 기본적 가치가 좋더라도 더 많은 손실을 두려워하며 서둘러 매도한다. 예를 들어, 전 세계적인 금융 위기 발생 기간 동안에도 우량주들의 주가는 지수와 함께 크게 하락했다. 일부 투자자들은 공포에 사로잡혀 이러한 기업들의 장기적 가치를 파악하지 못하고 극히 낮은 가격에 주식을 내다팔았으며, 결과적으로 후속 시장 반등과 기업 실적 성장으로 얻을 수 있는 풍부한 수익을 놓치게 되었다. 두려움은 투자자들이 단기적으로 손실을 보게 할 뿐만 아니라 장기적인 심리적 그림자를 드리워 다시 시장에 참여하는 것을 꺼리게 만들고, 결국 투자 기회를 놓치게 한다.&lt;/p&gt;
&lt;h2 id=&#34;눈받침-길을-잃은-안개&#34;&gt;눈받침: 길을 잃은 안개
&lt;/h2&gt;&lt;p&gt;주식 투자 시 무분별한 추종은 투자자들이 쉽게 빠질 수 있는 또 다른 심리적 딜레마입니다. 정보 과잉 시대에 다양한 투자 조언, 시장 소문, 인기 뉴스가 쏟아집니다. 많은 투자자들은 독립적인 사고와 판단 능력이 부족하여 타인의 행동을 무분별하게 따릅니다. 주변 사람들이 특정 주식을 사서 돈을 벌었다는 것을 보면 생각 없이 따라 매수하고, 이른바 ‘내부 정보’를 들으면 모든 돈을 쏟아붓습니다. 이러한 무분별한 추종은 주식 자체에 대한 연구와 분석을 간과하게 하여 투자자들이 안개 속에서 길을 잃은 배처럼 방향성을 상실하게 합니다. 예를 들어, 일부 테마주가 시장 과열 초기에는 추종자들에게 단기적인 이익을 가져다줄 수 있지만, 과열이 식어감에 따라 주가가 폭락하고, 상황을 제대로 파악하지 못하고 무분별하게 따르던 투자자들이 ‘피해자’가 됩니다. 그들은 각 투자자의 위험 감수 능력, 투자 목표 및 투자 기간은 모두 다르며, 다른 사람에게 맞는 투자 전략이 자신에게도 적합하다고는 할 수 없다는 사실을 깨닫지 못합니다.&lt;/p&gt;
&lt;h2 id=&#34;과도한-자신감-숨겨진-암초&#34;&gt;과도한 자신감: 숨겨진 “암초”
&lt;/h2&gt;&lt;p&gt;과도한 자신감 또한 주식 투자 심리에서 간과할 수 없는 문제이다. 일부 투자자들은 몇 차례 투자를 성공한 후 자기만족에 빠져 시장의 규칙을 이미 파악하고 있다고 믿으며 정확하게 주가 흐름을 예측할 수 있다고 생각한다. 이들은 시장의 복잡성과 불확실성을 간과하며 과도하게 거래하고, 맹목적으로 투자 규모를 확대하거나 심지어 고레버리지 투기까지 한다. 하지만 시장은 변화무쌍하므로 과도한 자신감을 가진 투자자들은 예상치 못한 시장 변동 속에서 큰 타격을 입을 수 있다. 예를 들어, 경험이 부족하지만 초기 성공을 거둔 투자자들이 전문적인 투자 능력이 있다고 믿고 빈번하게 주식을 사고팔며 끊임없이 투자 금액을 늘린다. 시장에 시스템 리스크나 개별 종목의 악재가 발생했을 때, 이들은 과도한 자신감으로 인해 제때 손실을 멈추지 못해 원금 대부분을 잃는다. 과도한 자신감은 마치 해저에 숨겨진 암초와 같아서 겉으로는 평온해 보이지만, 투자자의 배를 난파시켜 침몰시킬 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;어떻게-마음을-다잡고-안정적으로-재테크할까&#34;&gt;어떻게 마음을 다잡고 안정적으로 재테크할까
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;투자자는 투자를 통해 자산의 장기적인 안정적 가치 증식을 목표로 해야 하며, 단기간에 부자가 되는 것이 아님을 명확히 인지해야 합니다. 투자 지식을 습득하고 시장 원리를 이해하며, 가치 투자와 장기 투자의 개념을 확립하여 단기적인 이익과 시장 심리에 흔들리지 않도록 해야 합니다. 예를 들어, 기업의 펀더멘털을 깊이 있게 연구하고 수익성, 산업 내 위치, 경영진 등 요소를 고려하여 장기적인 투자 가치가 있는 주식을 선택해야 하며, 맹목적으로 단기적 관심주를 따라서는 안 됩니다.&lt;/li&gt;
&lt;li&gt;합리적인 투자 계획 수립: 자신의 재정 상황, 위험 감내 능력 및 투자 목표에 따라 과학적이고 합리적인 투자 계획을 세웁니다. 투자 금액, 투자 기간, 예상 수익률 및 손절매 지점과 같은 주요 요소를 명확히 하고 계획에 엄격하게 따릅니다. 이를 통해 투자 과정에서 감정 변화로 인한 충동적인 결정을 피할 수 있습니다. 예를 들어, 각 주식의 투자 비율을 총 자산의 일정 비율 이상으로 설정하지 않거나, 주가가 예상 수익률에 도달하면 즉시 이익을 실현하고 손절매 지점에 도달하면 단호하게 손실을 보는 것입니다.&lt;/li&gt;
&lt;li&gt;감정을 조절하고 침착함을 유지하세요: 시장의 변동에 직면했을 때 자신의 감정을 통제하고 침착함과 이성적인 판단을 유지하는 것이 중요합니다. 주의를 분산시키거나, 운동을 하거나, 다른 사람들과 소통하는 방법으로 투자 스트레스를 완화하여 감정이 투자 결정에 부정적인 영향을 미치지 않도록 해야 합니다. 시장이 크게 변동할 때는 먼저 원인을 침착하게 분석하고 자신의 투자 전략과 주식의 기본적 상황을 고려하여 합리적인 판단을 내려야 하며, 맹목적으로 추세에 따르거나 공포로 인해 매도하는 것을 피해야 합니다.&lt;/li&gt;
&lt;li&gt;지속적인 학습과 반성: 주식 시장은 끊임없이 변화하므로 투자자는 새로운 투자 지식과 기술을 지속적으로 습득하고 거시 경제 동향, 산업 뉴스 및 회사 정보에 주목하며 투자 수준을 꾸준히 향상해야 합니다. 동시에 정기적으로 자신의 투자 행위를 되돌아보고 경험과 교훈을 정리하여 마음가짐과 의사 결정 과정에서 문제점을 발견하고 즉시 조정하고 개선해야 합니다. 예를 들어, 투자를 마칠 때마다 전체 투자 과정을 검토하고 성공과 실패 원인을 분석하며 향후 투자에서 유사한 실수를 피하기 위해 어떻게 해야 할지 고민해야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;주식 투자와 재테크는 길고 도전적인 여정이며, 마음가짐이 그중 가장 중요한 역할을 합니다. 합리적이고 침착하며 겸손하고 독립적인 사고방식을 유지해야만 주식 시장의 파도 속에서 굳건히 나아가 자산 가치를 보존하고 증대시킬 수 있습니다. 투자자는 마음가짐을 연마하는 것을 투자 과정의 필수 과제로 삼아, 좋은 마음가짐으로 부를 이끌고 주식 투자와 재테크의 길에서 꾸준히 목표를 달성해야 합니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>세월이 쌓여 내린 독특한 환상과 애틋한 감정의 기대</title>
        <link>https://blog.ttf248.life/ko/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</link>
        <pubDate>Thu, 13 Feb 2025 22:12:57 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/years-of-settling-alternative-fantasy-and-emotional-attachment/</guid>
        <description>&lt;p&gt;초창기 웹소설 독자들이 중년이 되면서, 그들을 위한 판타지 소설도 변화했다. 주인공은 주로 아버지, 스승, 혹은 노인으로 등장하며, 중년 독자들의 삶과 감정에 대한 다양한 요구를 반영한다. 이러한 작품들은 더 이상 성장과 역경을 추구하는 데 집중하기보다는 감정적 공감대와 인생의 깨달음을 강조한다.&lt;/p&gt;
&lt;h2 id=&#34;변화하는-독자층-시간의-흐름-속에서&#34;&gt;변화하는 독자층, 시간의 흐름 속에서
&lt;/h2&gt;&lt;p&gt;과거의 웹소설 독자들은 이제 대부분 중년에 접어들었다. 그들은 삶의 풍파를 겪으며 마음가짐과 가치관이 변화했다. 젊은 시절 열광했던 호쾌함이나 모험 등의 요소는 더 이상 유일한 갈망이 아니게 되었고, 현재 자신의 삶과 연결되는 감정적 공감대와 과거에 대한 회상, 그리고 미래에 대한 기대감을 읽기를 통해 찾고자 한다. 중년층을 위한 힐링 웹소설은 바로 이러한 심리적 요구에서 비롯되었으며, 중년 사람들의 삶과 마음 상태에 더 가깝게 다가가는 에피소드를 통해 이 특정 독자층을 사로잡고 있다.&lt;/p&gt;
&lt;h2 id=&#34;역할-변화-청춘-영웅에서-중년의-책임자로&#34;&gt;역할 변화: 청춘 영웅에서 중년의 책임자로
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;我的徒弟都是大反派&lt;/strong&gt;: 주인공 陆州은 스승이 된 후, 각기 다른 성격과 강력한 실력을 가진 제자들을 마주한다. 그들은 선과 악 사이에서 방황하고, 陆州은 이들을 올바른 길로 인도해야 한다. 이 소설은 주인공과 제자들 간의 상호작용을 통해, 중년인이 다음 세대를 가르치면서 직면하는 도전과 고뇌를 보여준다. 동시에 제자들의 성장과 변화는 독자들에게 희망과 미래를 제시하며, 자신에 대한 자녀나 젊은 세대에 대한 기대를 엿볼 수 있게 한다.&lt;/p&gt;
&lt;h2 id=&#34;감정적-공명-삶의-깨달음과-가족-책임&#34;&gt;감정적 공명: 삶의 깨달음과 가족 책임
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;六十大寿来系统&lt;/strong&gt;: 주인공은 60세 생일 때 시스템을 얻어 새로운 삶의 여정을 시작한다. 이 설정은 중년 독자들에게 “늦지 않았다”는 희망과 동기를 부여한다. 비록 노년에 이르렀지만, 주인공은 시스템을 통해 자신의 가치와 꿈을 실현할 수 있다. 이러한 이야기는 독자들이 인생에서 놓친 기회나 이루지 못한 꿈을 떠올리게 하며, 긍정적인 삶의 태도를 전달하고 어떤 나이에도 포기하지 않고 추구하라고 격려한다.&lt;/p&gt;
&lt;h2 id=&#34;중년-삶의-리듬과-재미를-살린-구성&#34;&gt;중년 삶의 리듬과 재미를 살린 구성
&lt;/h2&gt;&lt;p&gt;중년 소설의 플롯 구성은 종종 삶의 디테일과 섬세한 감정 표현에 더 중점을 둡니다. 젊은 시절의 소설처럼 빠른 속도의 레벨 업과 모험을 추구하기보다는 인물 간의 관계와 감정적 갈등에 더욱 집중합니다. 예를 들어, 《역사상 최강 스승》에서 주인공과 제자 사이의 사제애, 동문들 간의 우정 등은 세밀하게 묘사되어 있습니다. 이러한 플롯 구성은 중년 독자들에게 따뜻함과 친근함을 선사하며, 자신의 삶 속에서 경험하는 가족애, 우정과 사랑을 떠올리게 합니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>설날 연휴 영화 티켓 가격의 비밀: 온라인과 오프라인 가격 차이</title>
        <link>https://blog.ttf248.life/ko/p/spring-festival-movie-tickets-price-mystery-online-vs-offline/</link>
        <pubDate>Tue, 11 Feb 2025 00:02:02 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/spring-festival-movie-tickets-price-mystery-online-vs-offline/</guid>
        <description>&lt;p&gt;설날 동안 가족(7~8명)이 영화를 보러 가려고 했는데, 타오티아오와 마오옌에서 예매하려고 보니 표가 60원이었어요. 그런데 바로 옆에 극장 충전 카드가 있어서, 직접 극장에 가서 계산해야 하고, 혹시 할인 정보가 있는지 문의해 봤더니 같은 시간대에 현장에서 구매하면 35원에 구매할 수 있더라고요. 가격 차이가 정말 놀라웠습니다.&lt;/p&gt;
&lt;h2 id=&#34;플랫폼-수수료의-숨겨진-할증&#34;&gt;플랫폼 수수료의 “숨겨진 할증”
&lt;/h2&gt;&lt;p&gt;온라인 예매 플랫폼은 편리하지만, 플랫폼 수수료는 간과할 수 없다. 정확한 좌석 선택이나 실시간 예매 기록 확인 등 사용자에게 편리한 경험을 제공하기 위해 투자가 필요하며, 이러한 비용이 플랫폼 수수료 형태로 티켓 가격에 반영되어 온라인 티켓 가격 상승을 초래한다.&lt;/p&gt;
&lt;h2 id=&#34;영화관-차별화-운영-전략&#34;&gt;영화관 차별화 운영 전략
&lt;/h2&gt;&lt;p&gt;설 명절 기간 관람 수요가 폭발적으로 증가하면서 극장들은 수익을 최대화하기 위해 차등 가격제를 채택했습니다. 온라인 플랫폼의 트래픽이 많고 많은 사람들이 미리 온라인으로 티켓을 구매하는 것에 익숙해져 있어, 극장은 온라인 티켓 가격을 높게 책정하고 현장에서 직접 구매하는 손님들을 유치하기 위해 낮은 가격을 제시합니다.&lt;/p&gt;
&lt;h2 id=&#34;협력-분배의-가격-논리&#34;&gt;협력 분배의 가격 논리
&lt;/h2&gt;&lt;p&gt;온라인 플랫폼과 영화관의 협력 분배 방식이 가격에 영향을 미칩니다. 온라인 플랫폼은 흥수에서 몫을 가져가기 위해 이익을 보장하기 위해 티켓 가격을 올리고, 영화관 현장에서 직접 판매하는 경우에는 중간 과정 없이 비용이 줄어들어 자연스럽게 가격이 저렴합니다.&lt;/p&gt;
&lt;h2 id=&#34;소비자-구매-팁&#34;&gt;소비자 구매 팁
&lt;/h2&gt;&lt;p&gt;소비자분들께서는 앞으로 티켓 구매 시 온라인 플랫폼만 보지 마시고, 극장 직원에게 전화로 가격을 문의하거나 직접 방문하여 상담해 보시면 뜻밖의 혜택이 있을 수도 있습니다. 영화를 자주 보시는 분들은 극장 회원 카드를 발급받아 회원 혜택을 이용하면 돈도 많이 절약할 수 있습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>2025년 춘절 영화 속 정치 요소 분석</title>
        <link>https://blog.ttf248.life/ko/p/political-elements-in-chinese-new-year-films-2025/</link>
        <pubDate>Mon, 10 Feb 2025 23:49:42 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/political-elements-in-chinese-new-year-films-2025/</guid>
        <description>&lt;p&gt;오랜만에 설맞이 분위기를 즐기러 갔다가, 이번에 두 편의 영화를 봤는데 느낌이 좀 달랐다&lt;/p&gt;
&lt;p&gt;이 글은 2025년 설날 영화 시장의 새로운 변화를 살펴보고, 특히 《탐정 강림촌 1900》과 《哪吒之魔童闹海》에 초점을 맞추고 있습니다. 전자는 1900년대 미국 샌프란시스코 차이나타운을 배경으로 한인들의 인종차별과 억압을 보여주며 사회 정치적 환경을 반영하고, 후자는 애니메이션 영화로서 풍부한 은유적 요소를 통해 현실 국제 정치 지형을 비판합니다. 예를 들어, 여의궁은 펜타곤을 연상시켜 미국 정치 체제를, 천원정의 달러 기호는 달러 패권을, 신선옥패는 영주권과 유사하게 신분 계층을, 그리고 묵혼단은 생화학 무기와 유사하게 악의적인 행위를 암시합니다. 이 두 영화는 새로운 관람 경험을 선사하며 영화 예술과 정치적 표현 간의 관계에 대한 고찰을 불러일으킵니다.&lt;/p&gt;
&lt;h2 id=&#34;설날-영화-스타일의-혁신&#34;&gt;설날 영화 스타일의 혁신
&lt;/h2&gt;&lt;p&gt;기존에 설맞이 영화는 주로 가볍고 즐거운 분위기와 가족 간의 화합을 추구하며 관객들이 휴일에 몸과 마음을 편안하게 하는 데 중점을 두었지만, 2025년 설맞이 영화는 《탐정 강해설: 1900》과 《나저아 배신자》가 풍부한 정치적 요소를 담아내면서 관객들의 광범위한 토론을 불러일으키고, 설맞이 영화에 새로운 분위기를 가져왔다&lt;/p&gt;
&lt;h2 id=&#34;시대-정치의-생생한-반영&#34;&gt;시대 정치의 생생한 반영
&lt;/h2&gt;&lt;p&gt;《탐정 1900》은 1900년대 미국 샌프란시스코 차이나타운을 배경으로, 당시 화교들이 겪었던 심각한 인종차별과 억압을 그리고 있다. 주인공들은 사건 해결 과정에서 사회 각계의 차별과 불공정한 대우에 직면하며, 이 영화는 인종차별과 권력 다툼을 통해 당대 사회 정치적 환경을 사실적으로 반영하고 있다. 이는 화교들이 생존과 존엄을 위해 벌였던 치열한 투쟁을 보여주며, 그 배경에는 깊이 생각해 볼 만한 정치적인 문제들이 존재한다.&lt;/p&gt;
&lt;p&gt;이러한 배경은 현재 해외 화교들이 상업 분야에서 겪는 어려움, 예를 들어 TikTok과 주수자 사건을 떠올리게 한다&lt;/p&gt;
&lt;p&gt;현지시간으로 2024년 12월 6일, 미국 워싱턴 D.C. 연방항소법원이 TikTok의 요청을 기각하고 국가 안보 명목으로 제정된 강제 매각 법안이 헌법적 심사를 통과했다고 판결했습니다. TikTok CEO 주숴지는 직원들에게 보낸 메모에서 “금지 명령을 신청하고 미국 대법원의 심리를 기다릴 것”이라고 밝혔습니다. 이 사건의 발단은 미국의 ‘미국인의 외국 적대 세력으로부터 보호를 위한 법’으로, 바이트댄스는 해당 법안 통과 후 270일 내에 미국 TikTok 사업을 매각해야 하며, 강제 매각 마감 기한은 2025년 1월 19일입니다.&lt;/p&gt;
&lt;p&gt;이전 각종 청문회에서 주쉬쯔 또한 많은 모욕을 당했습니다. 현지시간 2024년 1월 31일, 미국 상원 법사위원회는 “대형 기술 기업과 온라인 아동 성착취 위기” 청문회를 개최했고, 유명한 반중 의원 톰 코튼은 주쉬쯔에게 연이어 8개의 국적 관련 질문을 던졌습니다. 그가 어느 나라 사람인지, 중국 국적이나 미국 국적을 신청한 적이 있는지 등을 물으며 심지어 그의 아내와 자녀의 국적까지 캐물었습니다. 분명 청문회 주제는 “온라인 아동 성착취”였지만, 의원은 화제를 TikTok이 중국 기업 바이트댄스 소유라는 점으로 돌리고 주쉬쯔에게 주제와 무관한 질문을 했습니다. 영화 ‘덩타이 스트리트의 살인자 1900’에서 중국인이 해외에서 정당하지 못한 차별을 받는 것처럼, 주쉬쯔 또한 TikTok의 배경 때문에 상업 분야에서 부당한 대우와 의심을 받고 있습니다. 이러한 일련의 사건은 시대를 초월하여 해외부상들이 자아 발전과 권리 옹호를 추구할 때 외부로부터 겪는 어려움을 반영하며, 100년 전의 인종 차별이든 현재의 상업적 정치 공작이든 깊이 성찰해야 할 문제입니다.&lt;/p&gt;
&lt;h2 id=&#34;나저아의-마동이-바다를-떠들썩하게-한다-신화-뒤에-숨겨진-정치적-은유-분석&#34;&gt;《나저아의 마동이 바다를 떠들썩하게 한다》: 신화 뒤에 숨겨진 정치적 은유 분석
&lt;/h2&gt;&lt;p&gt;겉보기에는 평범한 애니메이션 영화처럼 보이지만, 여러 설정과 줄거리에 정치적 은유가 담겨 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;权力体系的映射&lt;/strong&gt;: 옥황궁은 신계의 최고 권력 중추로 조형되었으며, 건축 양식은 미국 국방부 청사(펜타곤)와 유사하다. 내부 색상은 주로 흰색으로 되어 있으며, 이는 서방이 “보편적 가치”를 내세워 헤게모니를 추구하는 것을 상징한다. 무량노인이 이끄는 “마귀 퇴치단”의 부하인 록남학녀는 미국 동맹 체제 속 일본과 한국에 대응되는 것으로 여겨진다. 옥황궁의 “온라인 회의” 장면, 십이금신이 둘러앉아 “봉신대전”을 논의하는 모습은 미국의 주도 하에 NATO 회의를 연상시키며, “질서 유지”라는 명목하에 타국을 탄압한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;经济霸权的暗示&lt;/strong&gt;: 옥후궁에서 단을 연단하는 데 사용된 천원도, 입구에 달러 기호가 있는데 이는 미국이 경제적 헤게모니로 다른 나라의 자원을 “연단한다”는 것을 비유적으로 나타낸다. 영화 속 무량선인은 “천명대행”이라는 이름으로 용족을 도가니 속에 던져 연단하는데, 이는 특정 국가들이 “국제 규범”을 빌려 이익을 추구하는 것과 유사하다.&lt;/li&gt;
&lt;li&gt;哪吒가 얻은 신분의 증표인 옥패는 색상과 문양 디자인이 미국 그린카드와 매우 흡사하며, 이는 천계가 ‘다른 종족’을 배척하고 계급을 나누는 것을 상징하며, 현실에서 국가나 집단 간의 신분 차별과 불평등한 대우를 암시한다&lt;/li&gt;
&lt;li&gt;볼드_0_: 무량선옹이 여차를 멸혼단 먹도록 강요한 것은 생화무기와 흡사하며, 이는 특정 국가들이 “구원”이라는 이름으로 파괴와 다른 나라의 멸망을 초래하는 것을 풍자한다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源与发展的象征&lt;/strong&gt;: 일곱 빛깔 보련은 중생불과 오옹병의 육체를 재건하는 핵심으로서, 대국이 독점하는 에너지와 기술의 생명선을 상징한다. “정수옥액”은 여우궁의 “성신 시험”을 통해 획득해야 하며, 이는 현실에서 개발도상국이 핵심 자원에 대한 의존성과 패권 체제 하에서 겪는 “규칙적 약탈”을 반영한다. 보련의 일시적인 소실과 회복 조건은 에너지 위기 하에서 작은 나라의 생존 난관을 암시한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;영화-예술과-정치적-표현에-대한-심층적인-고찰&#34;&gt;영화 예술과 정치적 표현에 대한 심층적인 고찰
&lt;/h2&gt;&lt;p&gt;이 두 영화는 춘절 극장가 전성기 속에서 정치적 요소를 녹여내 관객에게 새로운 경험을 선사하며, 단순한 오락 작품을 넘어 역사와 현실의 정치 문제를 비추는 거울과 같은 존재가 되었다. 이는 영화 예술과 정치적 표현 간의 관계에 대한 깊이 있는 성찰을 불러일으킨다. 앞으로 영화 창작에서 감독들이 영화를 통해 사회 및 정치적 견해를 더 많이 전달할 것인가? 영화라는 강력한 문화 전파 매체가 예술적 표현과 함께 사회 현실에 대한 더 많은 관심과 고찰을 담당할 수 있을까? 이러한 질문들은 영화 감상 시 깊이 있게 탐구할 가치가 있으며, 영화 산업계가 예술과 현실의 융합 측면에서 더욱 다채로운 작품들을 선보일 것으로 기대된다.&lt;/p&gt;
&lt;h2 id=&#34;이스터-에그&#34;&gt;이스터 에그
&lt;/h2&gt;&lt;p&gt;콩챗 모델, 오늘 잘 안 돌아가네. 여러 번 멈추고, 글이 반쯤 나왔을 때 멈춰서 더 이상 진행할 수 없어서 세션을 새로 시작해야 했어.&lt;/p&gt;</description>
        </item>
        <item>
        <title>미국의 두 주요 정당—민주당과 공화당</title>
        <link>https://blog.ttf248.life/ko/p/us-two-major-parties-democrats-republicans/</link>
        <pubDate>Mon, 10 Feb 2025 23:40:04 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/us-two-major-parties-democrats-republicans/</guid>
        <description>&lt;p&gt;민주당과 공화당은 정치적 이념, 정책 주창 및 사회적 가치관 측면에서 뚜렷한 차이를 보인다&lt;/p&gt;
&lt;h2 id=&#34;정치-이념과-정책-주장&#34;&gt;정치 이념과 정책 주장
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자유주의 성향으로, 경제 및 사회 문제에서 정부의 적극적인 역할을 옹호하며 사회 복지, 환경 보호, 다문화주의를 지지합니다. 조세 정책으로는 중저소득층에 대한 감세와 고소득층 및 기업에 대한 세율 인상을 지향합니다. 사회적 이슈에서는 낙태 권리, 동성 결혼을 지지하고 엄격한 총기 규제를 주장하며, 외교 정책적으로는 다자주의와 외교적 수단을 강조하여 국제 협력을 통해 세계적인 문제를 해결하고자 합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;共和党&lt;/strong&gt;: 보수 성향으로 정부 개입을 제한하고 개인의 자유와 시장 경제를 강조한다. 세금 정책에 있어 공화당은 감세를 지지하며, 소득 수준과 관계없이 모든 사람에게 적용되어야 한다고 주장한다. 사회 문제에서는 낙태 및 동성 결혼에 반대하고 총기 소유권을 옹호한다. 외교 정책적으로는 강경한 입장을 취하며 군사력을 통해 국가 이익을 보호하는 것을 지지한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;트럼프-집권의-의미&#34;&gt;트럼프 집권의 의미
&lt;/h2&gt;&lt;p&gt;도널드 트럼프가 2024년 미국 대통령에 재선되면서 공화당의 미국 정치 주도력이 확인되었다. 트럼프 정책은 다음과 같다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;트럼프는 감세와 규제 완화를 통해 경제 성장을 촉진하고, 특히 전통 제조업과 에너지 산업 발전을 지지합니다. 그는 또한 미국의 경제적 이익을 보호하기 위해 기존 무역 협상을 재협상하거나 철회하는 등 보호무역 정책을 선호합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트럼프는 국경 보안 강화, 불법 이민 제한, 합법 이민에 대한 더 엄격한 심사와 제한을 시행할 계획입니다. 또한 국가 안보 유지를 위해 난민 및 망명 신청을 제한하는 것을 지지합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;트럼프는 독자주의적 성향을 보이며 “미국 우선”을 강조하고 국제 기구 의존도를 줄이고 동맹 관계를 재평가하며 필요시 보다 강경한 외교적 수단을 취합니다. 또한 그는 화석 연료 생산 및 사용 확대와 환경 보호 규제 완화를 계획하고 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;트럼프의 재선은 미국 국내 정책에 중대한 변화를 가져오고, 전 세계 정치 및 경제에 광범위한 영향을 미칠 수 있습니다. 그의 정책은 특히 무역, 환경, 인권 분야에서 국제 사회의 관심과 반응을 불러일으킬 가능성이 높습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>올라마에 deepseek-R1 로컬 배포</title>
        <link>https://blog.ttf248.life/ko/p/ollama-local-deployment-deepseek-r1/</link>
        <pubDate>Fri, 07 Feb 2025 22:41:02 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/ollama-local-deployment-deepseek-r1/</guid>
        <description>&lt;p&gt;Ollama는 사용자가 로컬에서 대규모 언어 모델(LLM)을 실행하고 배포할 수 있도록 하는 오픈 소스 AI 도구입니다. 개발자가 클라우드 서비스에 의존하지 않고도 GPT와 같은 모델을 로컬 머신에서 편리하고 효율적으로 사용할 수 있도록 지원하며, 다양한 모델을 지원하고 성능 최적화에 중점을 두어 리소스가 제한적인 장치에서도 원활하게 실행될 수 있도록 합니다.&lt;/p&gt;
&lt;p&gt;올라마를 통해 사용자는 텍스트 기반 AI 애플리케이션을 활용하고, 데이터 프라이버시나 높은 API 사용 비용 걱정 없이 로컬에 배포된 모델과 상호 작용할 수 있습니다. 다양한 모델을 명령줄 인터페이스(CLI)를 통해 호출하여 자연어 처리, 질의응답 등의 작업을 수행할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;올라마는 다양한 모델을 시험해 보기에 적합하지만, 윈도우 버전은 하드웨어 성능을 충분히 활용하지 못하는 듯합니다. 리눅스 버전이 더 나을 수도 있습니다. 32B 파라미터 모델을 배포했을 때 메모리나 GPU 사용량이 높지 않음에도 응답 속도가 매우 느립니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;하드웨어-개요&#34;&gt;하드웨어 개요
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;운영체제: win11&lt;/li&gt;
&lt;li&gt;CPU：i7-10700K&lt;/li&gt;
&lt;li&gt;메모리: 40GB&lt;/li&gt;
&lt;li&gt;그래픽 카드: RTX 3060 12GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;환경-준비&#34;&gt;환경 준비
&lt;/h2&gt;&lt;p&gt;새로운 시스템 환경 변수를 추가하여 향후 사용을 용이하게 합니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_MODELS=E:\ollama&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
이 변수는 Ollama 모델이 저장될 경로를 지정합니다. __INLINE_CODE_0__은 모든 로컬 모델 파일이 저장되는 폴더 경로입니다. Ollama는 이 경로를 기준으로 다운로드하거나 배포한 언어 모델을 로드하고 사용합니다. 모델 파일을 다른 위치에 저장하려면 이 경로를 변경하면 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_HOST=127.0.0.1:8000&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
이 환경 변수는 Ollama 서비스의 호스트와 포트를 설정합니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;__INLINE_CODE_0__은 로컬 주소(localhost)이며, Ollama 서비스가 로컬 요청만 수신하도록 합니다&lt;/li&gt;
&lt;li&gt;__INLINE_CODE_0__은 지정된 포트 번호이며, Ollama 서비스가 8000번 포트에서 요청을 대기하고 처리할 것임을 나타냅니다. 필요에 따라 포트 번호를 변경할 수 있지만, 해당 포트가 다른 애플리케이션에 의해 사용되지 않는지 확인해야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;set OLLAMA_ORIGINS=*&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
이 환경 변수는 Ollama 서비스에 접근할 수 있는 요청의 출처를 제어합니다&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 모든 소스(모든 도메인 및 IP 주소)에서 Ollama 서비스에 접근할 수 있도록 허용합니다. 이는 일반적으로 개발 및 디버깅 환경에서 사용되며, 프로덕션 환경에서는 보안 강화를 위해 특정 도메인 또는 IP만 접근하도록 제한하는 것이 일반적입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;딥시크-r1-모델-배포&#34;&gt;딥시크-R1 모델 배포
&lt;/h2&gt;&lt;p&gt;설치는 간단하니 생략합니다&lt;/p&gt;
&lt;p&gt;설치 후 검증:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core&amp;gt;ollama -v
ollama version is 0.5.11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;모델 배포는 공식 모델 페이지에서 해당 매개변수의 모델을 선택하세요: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;14B 파라미터는 대화 맥락을 효과적으로 기억할 수 있지만, 더 작은 파라미터 버전은 그렇지 못합니다. 32B 파라미터 버전은 로컬 배포 시 버벅거림이 심해 더 이상 테스트하지 않았습니다.&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.ollama.com/library/deepseek-r1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ollama.com/library/deepseek-r1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/SPEvYTmTBxhoEkJqm1yPmw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/x18990027/article/details/145368094&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/x18990027/article/details/145368094&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>파워셸 7과 지속 가능한 설정 명령줄 예측 보기</title>
        <link>https://blog.ttf248.life/ko/p/powershell-7-persisting-settings-command-line-prediction-view/</link>
        <pubDate>Fri, 07 Feb 2025 22:19:12 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/powershell-7-persisting-settings-command-line-prediction-view/</guid>
        <description>&lt;p&gt;Linux의 zsh에 익숙해져서, 블로그를 쓰려고 했을 때 갑자기 PowerShell 7도 영구적인 설정으로 명령줄 예측 뷰를 지원하는 것을 발견해서 한번 시켜봤는데, 꽤 괜찮게 잘 된다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;어떻게든 뭔가 조작을 한 건지, 기능을 켰더니 그냥 생겼다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;오늘날 다양한 운영체제 환경에서 시스템 관리자와 개발자들은 플랫폼 간 호환성, 효율성 및 강력한 기능을 갖춘 도구를 찾아 시스템 관리 및 자동화 작업의 요구를 충족하고자 합니다. PowerShell 7은 이러한 주목을 받는 도구 중 하나로, 강력한 스크립팅 기능뿐만 아니라 Windows, Linux 및 macOS 등 다양한 운영체제에서 실행될 수 있어 사용자에게 전례 없는 편의성을 제공합니다.&lt;/p&gt;
&lt;h2 id=&#34;파워셸-7-강력한-크로스-플랫폼-도구&#34;&gt;파워셸 7: 강력한 크로스 플랫폼 도구
&lt;/h2&gt;&lt;h3 id=&#34;플랫폼-간-호환성&#34;&gt;플랫폼 간 호환성
&lt;/h3&gt;&lt;p&gt;PowerShell 7은 플랫폼 제약을 없애 Windows, Linux, macOS 환경에서 모두 동일한 PowerShell 7 도구를 사용하여 기업용 서버 관리, 시스템 운영 및 일상적인 개발 작업을 수행할 수 있습니다. 이는 업무 효율성을 크게 높이고 플랫폼 차이로 인한 학습 비용과 복잡성을 줄입니다.&lt;/p&gt;
&lt;h3 id=&#34;강력한-기능&#34;&gt;강력한 기능
&lt;/h3&gt;&lt;p&gt;스크립트 작성 능력과 객체 지향 프로그래밍, 함수, 모듈 등 고급 프로그래밍 기능을 제공합니다. PowerShell 7을 통해 사용자는 파일 시스템을 쉽게 조작하여 파일 및 폴더 생성, 삭제, 복사, 이동 등의 작업을 수행하고, 레지스트리를 액세스하고 수정하여 시스템 구성을 심층적으로 조정할 수 있습니다. 또한 프로세스와 서비스를 관리하여 시스템 실행 상태를 효과적으로 모니터링하고 제어할 수 있습니다. 게다가 PowerShell 7은 Active Directory에서 사용자 및 권한 관리를 포함하여 Windows 및 비 Windows 기술과 상호 작용하며 Azure 클라우드 플랫폼에서 리소스 할당 및 관리를 수행할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;오픈소스-생태계&#34;&gt;오픈소스 생태계
&lt;/h3&gt;&lt;p&gt;파워셸 7은 오픈 소스이므로 전 세계 개발자와 애호가들이 적극적으로 참여하여 개발 및 개선할 수 있습니다. 다양한 오픈 소스 모듈과 도구가 지속적으로 등장하며 파워셸 7의 기능과 활용 분야를 풍부하게 합니다. 사용자는 자신의 필요에 따라 오픈 소스 커뮤니티에서 적절한 모듈을 찾아 기능을 확장하거나, 코드를 기여하여 전체 커뮤니티 발전에 동참할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;호환성-및-안정성&#34;&gt;호환성 및 안정성
&lt;/h3&gt;&lt;p&gt;PowerShell 7은 이전 버전과의 호환성을 유지하면서도 많은 새로운 기능과 개선 사항을 도입했습니다. 이러한 개선 사항은 성능 향상뿐만 아니라 안정성 강화에도 기여하여 사용자가 더욱 원활하게 작업을 완료하고 소프트웨어 오류로 인한 업무 중단을 줄일 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;명령줄-예측-보기-열기&#34;&gt;명령줄 예측 보기 열기
&lt;/h2&gt;&lt;p&gt;파워셸 7의 다양한 유용한 기능 중, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 명령은 사용자 명령줄 입력 경험을 향상시키는 실용적인 도구입니다&lt;/p&gt;
&lt;p&gt;명령어 자동 완성 기능을 켤 필요 없이도 사용할 수 있지만, 이는 줄 안에서의 자동 완성에 그칩니다. 기능을 활성화하면 예측 보기로 가능한 모든 자동 완성 옵션을 목록 형태로 표시하고, 사용자는 위아래 화살표 키를 사용하여 원하는 옵션을 선택하여 명령어 입력의 정확성과 효율성을 높일 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/powershell-7-persisting-settings-command-line-prediction-view/20250207222546.png&#34;
	width=&#34;814&#34;
	height=&#34;205&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;powershell7&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;397&#34;
		data-flex-basis=&#34;952px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;명령을-영구적으로-유지하는-방법&#34;&gt;명령을 영구적으로 유지하는 방법
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 명령이 PowerShell을 시작할 때마다 적용되도록 하려면 PowerShell 프로필 파일에 추가할 수 있습니다. PowerShell 프로필 파일은 PowerShell 시작 시 자동으로 실행되는 특수한 스크립트입니다.&lt;/p&gt;
&lt;h3 id=&#34;설정-파일-경로-확인&#34;&gt;설정 파일 경로 확인
&lt;/h3&gt;&lt;p&gt;PowerShell에서, 우리는 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 변수를 사용하여 구성 파일의 경로를 확인할 수 있습니다. 해당 경로에 파일이 없으면 사용자가 직접 생성할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;echo $PROFILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;설정-파일-열기&#34;&gt;설정 파일 열기
&lt;/h3&gt;&lt;p&gt;텍스트 편집기(예: 강력한 Notepad++ 또는 가벼운 Visual Studio Code)를 사용하여 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 변수에 저장된 설정 파일 경로에 해당하는 파일을 엽니다&lt;/p&gt;
&lt;h3 id=&#34;추가-명령&#34;&gt;추가 명령
&lt;/h3&gt;&lt;p&gt;열려 있는 설정 파일에 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 명령을 추가합니다. 명령어를 정확하게 작성하여 설정 파일이 실행될 때 제대로 적용되도록 합니다.&lt;/p&gt;
&lt;h3 id=&#34;구성-파일-저장&#34;&gt;구성 파일 저장
&lt;/h3&gt;&lt;p&gt;명령 추가가 완료되면 구성 파일을 저장하고 텍스트 편집기를 닫습니다. 이제 구성 파일에는 PowerShell 시작 시 실행할 명령이 포함되어 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;설정-확인&#34;&gt;설정 확인
&lt;/h3&gt;&lt;p&gt;현재 PowerShell 창을 닫은 후 다시 시작합니다. 새로 시작된 PowerShell에서 명령어를 입력하면, 명령줄 입력 예측 보기 스타일이 목록 보기 형태로 표시되어야 합니다. 이는 설정이 성공적으로 적용되었음을 의미합니다.&lt;/p&gt;
&lt;p&gt;위 단계를 통해 PowerShell 7의 강력한 기능과 특징을 깊이 있게 이해하고, 명령줄 입력 예측 보기 스타일 설정을 통해 작업 경험을 향상시키는 방법과 이러한 설정이 지속적으로 유지되도록 하는 방법을 익혔습니다. 이 지식이 PowerShell 7 사용 과정에서 더욱 능숙하게 시스템 관리 및 자동화 작업을 효율적으로 수행하는 데 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PowerShell/PowerShell/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PowerShell/PowerShell/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.v2ex.com/t/911909&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.v2ex.com/t/911909&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>딥시크, 설날 직전 갑작스러운 인기와 엔비디아 주가 폭락: 배후의 기관 투자 및 거대 모델 사고 체인</title>
        <link>https://blog.ttf248.life/ko/p/deepseek-chinese-new-year-nvidia-stock-drop-institutional-operations-large-language-model-chain/</link>
        <pubDate>Fri, 07 Feb 2025 20:36:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/deepseek-chinese-new-year-nvidia-stock-drop-institutional-operations-large-language-model-chain/</guid>
        <description>&lt;p&gt;설 명절 직전, DeepSeek가 한 번의 화제로 주목받으며 며칠 만에 소셜 미디어에서 광범위한 관심을 모았습니다. 이러한 갑작스러운 인기에는 놀라움이 더해진 것은 물론 시장 전체에 연쇄적인 영향을 미쳤습니다. 동시에 엔비디아 주가는 폭락했고, 많은 투자자들이 그 전망에 의문을 제기하며 일부 기관은 대규모 공매도 거래를 진행했습니다. 이 모든 상황은 마치 “계획된” 것처럼 보였습니다.&lt;/p&gt;
&lt;h3 id=&#34;deepseek-的爆火短时间内迅速成为焦点&#34;&gt;&lt;strong&gt;DeepSeek 的爆火：短时间内迅速成为焦点&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;DeepSeek는 AI 기반 도구로, 특히 자연어 처리(NLP) 및 이미지 생성 분야에서 딥러닝 모델 최적화에 집중합니다. 설 명절 직전 이 프로젝트는 갑자기 많은 투자자와 기술 전문가들의 관심을 받기 시작했습니다. 팀의 성과와 시연된 기술적 결과물은 많은 사람들에게 강한 관심을 불러일으켰고, 개발자 커뮤니티나 소셜 미디어 플랫폼에서 DeepSeek에 대한 논의가 기술계 전반의 주요 화두를 차지하고 있습니다.&lt;/p&gt;
&lt;p&gt;그러나 DeepSeek의 갑작스러운 인기 폭발은 우연이 아니다. 분석 결과, 많은 사람들이 이 뒤에 특정 기관의 개입이 있을 가능성을 의심하기 시작했다. 특히 인기가 폭발한 이후 엔비디아 주가가 뚜렷하게 하락했는데, 분명 어떤 요인이 이러한 변화를 촉진하고 있는 것으로 보인다.&lt;/p&gt;
&lt;h3 id=&#34;英伟达股票暴跌做空操作的幕后推手&#34;&gt;&lt;strong&gt;英伟达股票暴跌：做空操作的幕后推手&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;엔비디아는 그래픽 처리 장치(GPU) 제조업체로서, 대규모 모델 및 AI 컴퓨팅의 핵심 하드웨어 공급업체였으며, AI 시장의 급성장과 함께 주가가 꾸준히 상승하여 많은 투자자들의 선호 대상이 되었습니다. 하지만 DeepSeek의 인기에 힘입어 시장의 기술적 관심이 높아지면서 엔비디아 주가는 급락했습니다.&lt;/p&gt;
&lt;p&gt;이러한 현상 이면에는 기관 투자자의 공매도 전략이 관련되었을 수도 있습니다. 지난 몇 년간 AI 기술의 보급과 함께 엔비디아 주가는 크게 상승했고, 많은 투자자들은 그 주가가 과도하게 부풀려졌다고 판단했습니다. 특히 DeepSeek와 같은 기술이 폭발적으로 인기를 얻은 이후, 일부 기관들은 엔비디아 주식을 공매도하여 상당한 이익을 얻었을 가능성이 있습니다. 정확한 시장 상황 파악과 DeepSeek의 영향력에 대한 예측을 통해 이러한 기관들은 성공적으로 이익을 창출했습니다.&lt;/p&gt;
&lt;h3 id=&#34;大模型思维链的接触从结果到过程&#34;&gt;&lt;strong&gt;大模型思维链的接触：从“结果”到“过程”&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;전통적인 인공지능 응용 분야에서 많은 실무자와 투자자들은 생성된 이미지나 텍스트와 같은 AI 모델의 “결과”에 더 집중해 왔습니다. 하지만 DeepSeek 관련 논의에서는 점점 더 많은 사람들이 대규모 모델 뒤에 숨겨진 사고 과정이 더욱 주목할 가치가 있는 핵심 내용이라는 것을 깨닫기 시작했습니다. 과거에는 모델 출력 결과만 볼 수 있었지만, 이제는 그 이면에 숨겨진 논리, 알고리즘을 이해하고 이러한 요소를 조정하여 모델 성능을 최적화하는 것이 더 중요합니다.&lt;/p&gt;
&lt;p&gt;이러한 사고방식의 전환은 AI 연구와 활용에 대한 깊이 있는 고찰이며, 단순한 블랙박스 조작에서 모델 내부 작동 메커니즘을 진정으로 이해하는 변화로 이어지면서 많은 기술 전문가와 투자자들이 인공지능의 미래 발전 방향을 재검토하기 시작했습니다. DeepSeek의 인기 폭발은 바로 이러한 사고방식의 획기적인 응용이며, 사람들은 최종 결과물뿐만 아니라 전체 모델 구축 및 최적화 과정에 주목하기 시작했습니다.&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;딥시크의 갑작스러운 인기, 엔비디아 주가의 폭락, 그리고 시장 뒤편의 기관의 공매도 작전, 이 모든 현상 뒤에는 치밀하게 설계된 음모가 있는 듯합니다. 거대 언어 모델 사고 체인에 대한 깊이 있는 이해를 통해 AI 기술의 적용은 단순한 표면 현상의 조합이 아니라 모델 내부 로직에 대한 심층적인 탐구와 최적화임을 알 수 있습니다. 기술 발전과 함께 앞으로 딥시크와 같은 혁신적인 도구가 더 많이 등장하여 AI 연구 및 응용을 더욱 높은 수준으로 이끌어갈 것으로 예상됩니다.&lt;/p&gt;
&lt;p&gt;이러한 현상은 AI 기술의 엄청난 잠재력을 보여줄 뿐만 아니라, 기술 뒤에 숨겨진 사업 경쟁과 자본 운용에 대해 생각하게 합니다. 앞으로 시장 추세는 기술과 자본 간의 경쟁이 지속적으로 초점이 될 것입니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>현대 화폐 이론이 전 세계 경제의 미래일까요?</title>
        <link>https://blog.ttf248.life/ko/p/modern-monetary-theory-future-global-economy/</link>
        <pubDate>Thu, 06 Feb 2025 23:16:34 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/modern-monetary-theory-future-global-economy/</guid>
        <description>&lt;p&gt;미국 주식 시장의 지속적인 강세장은 미국의 &amp;lsquo;실질적인 힘&amp;rsquo;을 제외하면, 더 많은 것은 달러의 과잉 공급 때문입니다&lt;/p&gt;
&lt;p&gt;현대 화폐 체계는 &lt;strong&gt;2008年金融危机&lt;/strong&gt; 이후, 여러 경제체의 중요한 이론적 지지 기반으로 자리 잡았으며, 주요 특징은 정부의 시장 개입 시 주체적인 역할과 재정 적자를 활용하여 완전 고용과 안정적인 물가를 동시에 달성하는 데 중점을 둡니다&lt;/p&gt;
&lt;p&gt;대규모 정부는 &lt;strong&gt;凯恩斯主义&lt;/strong&gt;를 강조하며, 경기 순환기에서 정부의 &lt;strong&gt;削峰填谷&lt;/strong&gt; 역할을 중요하게 생각합니다. 과열 시 억제하고 수축 시 자극하는 등 정부 지출의 승수 효과, 즉 1원의 화폐가 얼마나 많은 소비 승수를 증가시키는지에 중점을 두며, 1원어치의 정부 지출이 기업과 개인에게 1원어치 소득을 늘리고, 기업은 생산을 확대하고 고용을 늘리며, 개인은 소비를 늘려 경기 침체를 막습니다. 동시에 재정 적자 상한선과 지속 가능성에 대해 상대적으로 보수적이며, &lt;strong&gt;消费乘数&lt;/strong&gt;는 시장 회복을 이끌어 정부 수입 증대에 기여할 것입니다. 특히 과열기 동안의 억제는 다음 주기를 위한 자극 모수를 축적하는 것이며, 정부 부채 잠재력과 금리 수준 등이 이에 해당합니다.&lt;/p&gt;
&lt;p&gt;현대 화폐 체계는 극단적인 케인스주의의 연장선상에 있으나, 정부 부채 제한이라는 차이점이 있습니다. 중앙은행은 독립성을 가져서는 안 되며, 주요 목표는 &lt;strong&gt;通胀和充分就业&lt;/strong&gt; 과 제한된 자원과 생산력으로 인한 인플레이션입니다. 즉, 정부는 무제한적인 재정 적자를 통해 기술 발전과 생산 효율성 향상에 따라 시장에 구매력을 지속적으로 추가하여 이상적인 완전 고용 및 생산 병목 상태에 도달합니다. 이 시점에서 통화량을 늘리면 인플레이션을 유발하므로, 시장에 잉여 생산 요소가 존재하는 한 정부의 적자 증가는 인플레이션을 유발하지 않습니다.&lt;/p&gt;
&lt;h2 id=&#34;금융-위기-이후&#34;&gt;금융 위기 이후
&lt;/h2&gt;&lt;p&gt;물론 현실은 이상적인 세계가 아니기에, 각 단계의 실행은 사람들의 참여로 이루어지며 케인스주의 역시 선택적으로 적용되어 경제 하락 시에는 자극이 많고, 과열 억제는 부족한 결과를 초래합니다. 이는 좋지 않은 경제 상황을 자극하여 정치적 성과를 가져오고, 과열 또한 마찬가지입니다. 근본적으로 억제하기 어렵고, 이로 인해 발생하는 여러 가지 경제 문제와 새로운 금융 위기는 전통적인 과잉 생산으로 인한 경제 충격 못지않습니다. 2008년 글로벌 금융 위기는 극단적인 케인스주의 하에서 시장의 자기강화로 발생한 거품이었으며, 부동산과 이를 기반으로 한 파생 금융 투자 상품 등 다수의 부실 구조 금융 투자 상품이 등장했습니다. 심지어 위기가 발생하기 전까지 학계, 정치계, 시장 모두 위험에 대한 인식이 부족했으며, 부채를 지탱하는 번영을 성과로 여겼습니다. 더 많은 사람들이 이익을 얻었으며, 거대한 금융 시스템은 손실은 여러분 몫이고 배당금은 우리의 몫이라는 식이었고, 파산하더라도 이미 잔뜩 벌어놓은 돈은 돌려받을 수 없었습니다. 결국 많은 참여자들이 앞선 단계의 이익을 떠안게 되었습니다.&lt;/p&gt;
&lt;p&gt;이로써 현대 통화 체제의 그림자가 금융 위기 이후 나타나면서, 전형적인 특징은 빠른 &lt;strong&gt;财政赤字货币化和央行的无限量化宽松&lt;/strong&gt;과 함께, 일명 긴급 중앙은행 대출 정책이 발생합니다. 중앙은행은 최종 대부인으로서 무한정 자금을 공급하고, 정부는 지속적으로 부채를 늘릴 수 있습니다. 중앙은행과 재정 정책은 조화롭게 협력하며, 중앙은행은 국채 매입 등을 통해 정부의 재정 적자 지출을 지원하여 정책 목표의 일관성을 확보합니다. 이러한 이유로 현대 통화 정책과 재정 정책의 경계가 점차 모호해지고 있으며, 기초 화폐 발행에 있어 중앙은행이 직접적으로 국채를 구매하는 데 크게 의존하며, 한 손으로 돈을 찍어내고 다른 손으로 지출하는 상황입니다.&lt;/p&gt;
&lt;p&gt;유로존과 미국 모두 비슷한 양상을 보입니다. 2008년 유럽연합 정부 부채는 약 6.7조 유로였고, 레버리지는 대략 66%로 일반적으로 경계선으로 여겨지는 60%를 약간 상회했습니다. 구제 금융의 5년간인 2014년까지 부채 규모는 9.5조 유로로 증가했고, 레버리지는 93%에 도달했습니다. 미국의 경우 더욱 과장되었는데, 2008년 미국 정부 부채는 약 10조 달러였고, 2014년에는 대략 18조 달러까지 증가했습니다. 최근 정부 부채 한도를 다시 올렸으며, 당연히 매번의 소동은 정부 폐쇄를 미끼로 사용되지만, 매번 정부 부채 한도를 깨뜨립니다. 현재는 36조 달러를 돌파했으며, 이는 2008년 금융 위기에 비해 26조 달러 증가한 것입니다. GDP 성장 요인을 고려하면 정부 레버리지는 60%에서 120% 이상으로 증가했습니다. 연방준비제도는 최종 대주자로 여러 차례의 구제 금융에서 중요한 역할을 수행했으며, 정부 부채의 주요 구매자 중 하나이기도 합니다.&lt;/p&gt;
&lt;h2 id=&#34;현대-화폐-체제의-폐단과-한계&#34;&gt;현대 화폐 체제의 폐단과 한계
&lt;/h2&gt;&lt;p&gt;이러한 정부 주도의 경제 부양책은 계획 경제라고는 할 수 없지만, 직면하는 문제는 동일합니다. 시장의 전지전능함과 모든 참여자의 이타심을 어떻게 보장할 수 있을까요? 가장 간단한 예를 들어보자면, 정부 부서가 특정 방향에 대한 예산을 100만 원 늘린다면 누구에게 돌아갈까요? 리더의 작은 아들인가, 아니면 더 높은 효율성을 가진 시장 경쟁 입찰인가요? 물론 현실에서는 더욱 복잡한 방식으로 이익이 흘러 들어가게 되며, 결과적으로 정부는 부채와 지출을 확대하지만 흐름은 완전히 통제 불능 상태가 됩니다. 최근 미국에서 떠들썩하게 만들었던 정부 효율성 부서 설립도 이러한 문제의 연장선상에 있습니다. 물론 이러한 현상은 다양한 부패 지수 경제체 내에서 차이를 보이지만, 우리는 더 많은 논의를 통해 일반적인 문제를 다루고자 합니다.&lt;/p&gt;
&lt;h3 id=&#34;인플레이션-문제&#34;&gt;인플레이션 문제
&lt;/h3&gt;&lt;p&gt;현대 정보 네트워크 발달로 정부는 과거보다 시장 정보를 훨씬 더 잘 파악하게 되었지만, 이는 전지전능을 의미하는 것은 아니며, 시장 자체에 변수가 존재하고, 예측에 따라 변화하며, 복잡한 구조로 진입합니다. 저는 당신의 예측을 예상했습니다. 실제 사례를 보면 2008년&lt;del&gt;2020년 사이 현대 화폐 이론은 단기적인 경제 회복과 인플레이션 안정이라는 나쁘지 않은 성과를 거두었고, 유로존에서는 심지어 일시적인 디플레이션 문제가 발생했으며, 미국의 인플레이션 또한 예상 범위인 1&lt;/del&gt;3% 내에서 유지되었습니다. 이러한 상황으로 인해 사람들은 과거 케인즈주의를 믿었던 것처럼 더욱 극단적인 도구를 신뢰하게 되었습니다.&lt;/p&gt;
&lt;p&gt;사실 우리가 뒤돌아보면, 주로 개발도상국의 제조업이 2008년 이후에도 고성장세를 유지한 덕분인데, 예를 들어 이 기간 동안 글로벌 생산의 위치를 확고히 한 우리나라와 후발 주자인 동남아시아 및 인도 경제체들이 높은 제조업 부가가치를 유지하며 현대 통화 이론의 최대 제약을 상쇄하고, 자원 공급 제한을 완화하여 유럽과 미국이 산업화 감소와 과도한 금융화 속에서도 정부 부채 증가와 통화 공급 급증에도 불구하고 비교적 안정적인 인플레이션을 유지할 수 있었다&lt;/p&gt;
&lt;p&gt;그러나 2020년 이후, 더 큰 규모의 경기 부양책 사용으로 인해 유로존과 미국 모두 상당한 인플레이션을 경험했으며 최고조에는 약 10%까지 치솟았습니다. 오늘날에도 금리 인상으로부터 거의 3년이 지났음에도 불구하고 미국의 고용 시장은 여전히 비정상적으로 과열되어 있으며, 금융 시장은 통화 지원 하에 경제 성장과 괴리를 보이는 과도한 번영을 보이고 있습니다. 기준 효과가 사라짐에 따라 미국의 인플레이션은 다시 3%로 치닫고 있습니다. 이러한 금리 인상 과정에서의 과열 현상은 재정 적자와 밀접하게 관련되어 있으며, 금리 인상은 통화 정책의 긴축이지만, 재정 정책은 실제로 확장적이며, 2020년의 대규모 통화 공급과 결합하여 미국의 인플레이션을 비정상적으로 완고하게 만들었습니다. 현대 화폐 이론의 가장 큰 제약은 바로 높은 인플레이션입니다.&lt;/p&gt;
&lt;h3 id=&#34;정부-부채-문제&#34;&gt;정부 부채 문제
&lt;/h3&gt;&lt;p&gt;원칙적으로 정부는 무제한으로 채권 발행을 통해 부채를 상환할 수 있지만, 전제 조건은 &lt;strong&gt;央行彻底沦为傀儡&lt;/strong&gt;이어야 하며, 이는 현대 통화 시스템에서의 &lt;strong&gt;财政政策和货币政策的目标一致性&lt;/strong&gt;입니다. 명백히 연방준비제도는 정부에 완전히 권한을 부여하지 않을 것이며, 십 년 이상 쌓인 정부 부채 잔액, 특히 이자 지출과 함께 고금리 및 추가 부채는 점차 재정의 거대한 부담이 되고 있습니다.&lt;/p&gt;
&lt;p&gt;2023 회계연도: 미국의 2023회계연도 세입은 4조 4390억 달러였으며, 이 중 재정 지출액의 약 15%가 이자 지급이었고, 이러한 고금리 상태는 2024년에도 이어지고 있습니다. 미국 재무부 발표에 따르면
2024 회계연도: 미국 연방 정부의 재정 적자는 1조 8330억 달러에 달했으며, 이자 지급액은 8820억 달러로 미국 연방 세수의 약 18%를 차지하며 심지어 사회 보장 지출을 넘었습니다&lt;/p&gt;
&lt;p&gt;이것이 재정의 지속가능성 문제인데, 장기간 저금리, 저인플레이션, 고부채(예: 일본)를 유지한다면 실제로 장기적으로 준 현대 통화 이론의 적용을 형성할 수 있습니다. 72 법칙에 따르면 금리가 충분히 낮으면 재정은 채무로 자금을 조달하는 방식에서 매우 느리게 증가합니다. 자금 비용이 1%라면 순수한 채무 상환으로 72년 동안 부채가 두 배로 늘어날 수 있습니다. 만약 인플레이션이 이러한 섬세한 균형을 깨면, 부채의 이자 상환 누적 과정에서 복리 효과로 인해 미래 부채 추이가 통제 불능 상태에 빠지고, 이자 꼬리에 꼬리가 붙는 현상이 원금보다 더 중요해질 수 있습니다. 중앙은행이 집권당의 목표와 일치하지 않는다면 이러한 문제는 더욱 심각해질 것입니다. 트럼프 정부의 정치적 주장은 현재 연방준비제도의 매파적 성향과 뚜렷한 차이를 보이며, 이것 또한 이번 임기 동안 미국 정부와 연방준비제도 관계가 악화되는 중요한 원인입니다. 가장 큰 관심사는 현임 의장이 임기를 마치고 순조롭게 자리를 내리는 것일 것입니다.&lt;/p&gt;
&lt;h3 id=&#34;금융-공황과-통화-신용-문제&#34;&gt;금융 공황과 통화 신용 문제
&lt;/h3&gt;&lt;p&gt;이상적으로는 정부 지출 확대가 개인과 기업 부문에 흡수되어 모두가 지출을 늘리고, 이를 통해 실질 수요를 증가시키겠지만, 2000년대 이후 여러 금융 거품의 직접적인 경험자로서 투자와 소비 사이에서 상당한 자산 가치 상승 선호도가 나타날 것이다. 특히 자산 가치 상승 기대감이 매우 높은 제품이 등장하면 금융 시장으로 몰려들어 더 높은 수익을 추구하고 심지어 삶의 질을 희생하거나 레버리지를 높여 투자하는 경향이 있다. 이는 일본, 미국, 우리나라 부동산 고성장기에도 유사한 현상이었으며, 정책 부양과 업계 관계자들의 이익 최대화 추구를 결합하여 서브 프라임 대출과 같은 문제가 많았고, 많은 구제 정책은 사실 채무를 장려하는 것이었다.&lt;/p&gt;
&lt;p&gt;그래서 역사적으로 볼 때 통화 정책과 재정 정책이 대규모로 힘을 낼 때는 대체로 &lt;strong&gt;资产泡沫和财富再分配的狂欢&lt;/strong&gt;, 자산 거품이 먼저 발생하고, 부의 재분배는 뒤따라 일어나는 경향이 있습니다. 이는 극단적인 케인스주의나 현대 화폐 이론의 장기적인 사용으로 인해 발생하는 경제적 폰지 사기(민스키 모멘트) 문제를 야기하는데, 아직 핫머니가 있는 한 자산 가격은 계속 상승하고, 그 상승세는 또다시 후발주자를 유치하여 돈을 들여오게 합니다. 하지만 생활비 지출 변화를 측정하는 CPI는 큰 변화를 보이지 않으며, 돈은 특정 분야에서만 소모되고, 후발주자는 돈이 끊겨 &lt;strong&gt;狂欢之后就是崩溃&lt;/strong&gt;, 즉 민스키 모멘트의 심판을 받게 되는데, 이는 실패하지 않습니다.&lt;/p&gt;
&lt;p&gt;또한, 화폐 자체도 공급과 수요 관계가 있으며, 시장의 공급이 과도할 때, 전통적인 투자 품목을 수용하지 못하거나, 여러 차례 거품 붕괴로 자금 흡수가 어려울 때(일본인들은 몇십 년 동안 부동산 투자를 꺼리는 이유), 세금 정책의 억제, 부동산 보유세 증가를 통한 투기 수요 감소 등은 금융 투기의 비용을 높인다. 이러한 과잉 화폐 공급 상황에서 시장은 &lt;strong&gt;吸金且免税&lt;/strong&gt; 투자 품목을 절실히 필요로 하며, 다양한 가상 투자 품목이 등장하게 된다. 심지어 미국 대통령과 영부인까지 합류하여 일부를 가져가는 현상은 달러의 기반 약화를 노리는 것이 아니라, 전 세계적인 통화 과발행과 금융 공회전으로 인한 법정 화폐 신용 훼손의 필연적인 결과라고 볼 수 있다. 현대 통화 이론이 가장 의존하는 국가 독점 권한 하의 신용 화폐 지위조차도 도전을 받을 수 있으며, 어떤 토양인지에 따라 어떤 금융 게임이 파생되는지를 보여준다.&lt;/p&gt;
&lt;p&gt;요약하자면, 현대 화폐 이론은 케인스주의와는 점진적이고 대체적인 관계에 더 가깝습니다. 정부의 적극적인 시장 개입을 강조하며 재정 적자와 중앙은행 독립성에 대한 태도가 더욱 급진적입니다. 케인스주의의 과도한 사용은 스태그플레이션과 금융 위기를 초래했고, 현대 화폐 이론은 2008년 이후 조용히 그 자리를 대신했습니다. 세계화 시대에 생산성이 계속 향상되면서 단기적으로는 빠른 성장을 회복하고 사용국의 인플레이션을 유지했지만, 막대한 정부 부채와 금융 거품을 축적하기도 했습니다. 인플레이션이 반등하고 중앙은행과 정부의 목표가 일치하지 않으며 고금리와 고레버리지가 공존하는 상황에서 정부의 이자 지급 부담은 더욱 가중되고 재정 지속 가능성은 크게 약화됩니다. 과도한 정부 개입으로 인한 통화 공급은 금융 거품을 야기하고 무분별한 화폐 발행은 화폐 자체의 신뢰를 훼손합니다. 현재 달러가 강세를 보이는 것은 일종의 위안 효과이며, 막대한 투자 수요는 다양한 형태의 새로운 금융 투자 및 투기 도구를 만들어내고 심지어 전통적인 금융 투자 상품의 세금 제한을 벗어나게 합니다. 이는 전 세계 경제의 단면입니다. 현대 화폐 이론은 미래가 아니라 2008년부터 사용된 과거이며, 역경제 글로벌화와 결합하여 과거 금융 거품이 커질수록 정부 부채는 누적되고 금융 투기 도구는 더욱 광포해져 자산 불균형 분배의 효율성이 높아질수록 하드랜딩의 위험은 커집니다. 경제적, 사회적 위험을 포함합니다. 케인스주의든 현대 화폐 이론이든 화폐 공급이 아무리 많아도 진정으로 부의 구조 문제를 해결할 수 없으며 자산 거품과 도덕적 해이를 통해 위험을 더욱 악화시킵니다. 사람들은 끊임없이 다른 자세로 같은 함정에 빠지지만, 그 속에서 배우는 일은 없습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>atop 도구를 이용한 Linux 시스템 지표 모니터링: 설치, 설정 및 사용법 완벽 가이드</title>
        <link>https://blog.ttf248.life/ko/p/using-atop-to-monitor-linux-system-metrics-installation-configuration-and-usage-guide/</link>
        <pubDate>Thu, 06 Feb 2025 22:48:55 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/using-atop-to-monitor-linux-system-metrics-installation-configuration-and-usage-guide/</guid>
        <description>&lt;p&gt;리눅스 시스템 운영 과정에서 시스템 자원과 프로세스 상태를 실시간으로 종합적으로 모니터링하는 것은 매우 중요합니다. atop 도구는 강력한 모니터링 도구로서, 이를 쉽게 달성하도록 돕습니다. 본 문서에서는 리눅스 인스턴스에 atop 모니터링 도구를 설치, 구성 및 사용하는 방법을 자세히 설명하겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;일반적으로-사용되는-atop-도구-소개&#34;&gt;일반적으로 사용되는 atop 도구 소개
&lt;/h2&gt;&lt;p&gt;atop은 Linux 시스템 리소스 및 프로세스를 모니터링하는 도구로, 시스템과 프로세스의 활동을 기록하고 모든 프로세스의 실행 상태를 보고합니다. 이 도구는 CPU, 메모리, 디스크, 네트워크 등 리소스 사용량 정보와 프로세스 상태 데이터를 수집하며, 로그 파일 형태로 저장할 수 있습니다. 각 프로세스별 CPU 사용률, 메모리 증가량, 디스크 사용률, 우선순위, 사용자 이름, 상태 및 종료 코드 등의 주요 정보를 얻을 수 있으며, atop 설정 파일을 통해 로그 수집 빈도, 로그 파일 저장 경로 및 로테이션 정책 등의 매개변수를 사용자 정의할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;두-번째-atop-도구-설치&#34;&gt;두 번째, atop 도구 설치
&lt;/h2&gt;&lt;p&gt;다양한 Linux 배포판에서 atop 설치 방법은 약간씩 다르므로, 여기서는 일반적인 운영체제를 기준으로 설명하겠습니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Alibaba Cloud Linux 3/2、CentOS 7/8、Fedora、Rocky Linux 9&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;설치 명령 실행: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;atop 서비스 시작:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;Ubuntu / Debian&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;소프트웨어 저장소 목록 업데이트:&lt;/li&gt;
&lt;li&gt;설치 명령 실행: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;atop 서비스 시작:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;CentOS Stream 9&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;다운로드 및 설치:&lt;/li&gt;
&lt;li&gt;atop 서비스 시작:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;openSUSE&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;설치 명령 실행: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;atop 서비스 시작:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위에 언급된 운영체제에 사용하시는 배포판이 포함되지 않았다면, atop 공식 웹사이트에서 설치 정보를 확인하실 수 있습니다&lt;/p&gt;
&lt;h2 id=&#34;세-모니터링-주기-및-로그-보존-기간-설정&#34;&gt;세, 모니터링 주기 및 로그 보존 기간 설정
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Alibaba Cloud Linux 3/2, CentOS 7/8 및 Fedora 시스템에서 atop 설정 파일은 __；在Ubuntu、Debian和openSUSE系统中，配置文件是__INLINE_CODE_1__입니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认配置参数说明&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;：로그 파일 기록 옵션을 제어하며, 기본값은 비어 있습니다&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOGINTERVAL&lt;/code&gt;：모니터링 주기, 기본 600초입니다. 과거 로그 추적 문제가 필요한 경우, 실제 요구사항에 따라 해당 주기를 조정하는 것이 좋습니다.&lt;/li&gt;
&lt;li&gt;로그 보관 기간, 기본 28일&lt;/li&gt;
&lt;li&gt;__INLINE_CODE_0__BOLD_2&lt;code&gt;/var/log/atop&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;配置步骤&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;명령 실행하여 설정 파일 열기:&lt;/li&gt;
&lt;li&gt;Alibaba Cloud Linux 3/2, CentOS 7/8, Fedora 시스템에서: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Ubuntu, Debian, openSUSE, CentOS Stream 9, Rocky Linux 9 시스템에서: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;을 눌러 편집 모드로 진입한 다음, 필요에 따라 구성 매개변수를 조정합니다. 예를 들어, 모니터링 주기를 30초로 변경하고, 로그 보존 기간을 7일로 설정하며, 로그 경로는 기본값으로 유지합니다.&lt;/li&gt;
&lt;li&gt;저장하고 편집을 종료합니다&lt;/li&gt;
&lt;li&gt;atop 서비스 재시작 시 설정이 적용됩니다&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LOGOPTS=&amp;quot;&amp;quot;
LOGINTERVAL=30
LOGGENERATIONS=7
LOGPATH=/var/log/atop 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;네-알겠습니다-네-가지-사용-atop-도구&#34;&gt;네, 알겠습니다. 네 가지 사용 atop 도구
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;常用命令介绍&lt;/strong&gt;: 대화형 명령 모드에서 다음의 일반적인 명령어가 있습니다&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;기본 통합 출력 보기로 전환합니다&lt;/li&gt;
&lt;li&gt;프로세스 목록의 전체 명령줄 표시&lt;/li&gt;
&lt;li&gt;프로세스 메모리 사용량별 내림차순으로 필터링합니다&lt;/li&gt;
&lt;li&gt;프로세스 디스크 사용률을 기준으로 내림차순 정렬합니다&lt;/li&gt;
&lt;li&gt;프로세스 자원 종합 활용률에 따라 내림차순으로 필터링합니다&lt;/li&gt;
&lt;li&gt;프로세스 네트워크 사용률을 기준으로 내림차순 정렬합니다&lt;/li&gt;
&lt;li&gt;다음 모니터링 지점으로 이동합니다&lt;/li&gt;
&lt;li&gt;이전 모니터링 지점으로 이동합니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;：指定时间点，格式为__INLINE_CODE_1__。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;资源监控字段含义介绍&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ATOP&lt;/strong&gt;: 호스트 이름, 정보 샘플링 날짜 및 시간&lt;/li&gt;
&lt;li&gt;프로세스 전체 실행 상황, 커널 모드 및 사용자 모드 실행 시간, 프로세스 총 수, 다양한 상태의 프로세스 수 등을 포함합니다&lt;/li&gt;
&lt;li&gt;CPU 전체 사용률을 나타내며, 각 필드의 숫자 합은 &lt;strong&gt;INLIN_2&lt;/strong&gt;__(N은 CPU 코어 수)이며, 커널 모드, 사용자 모드, 인터럽트, 유휴 상태, 디스크 I/O 대기 등의 시간 비율을 포함합니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CPL&lt;/strong&gt;: CPU 사용률 정보, 예를 들어 지난 1분, 5분 및 15분 동안의 실행 중인 프로세스 평균 수, 컨텍스트 스위칭 횟수, 인터럽트 발생 횟수&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MEM&lt;/strong&gt;: 메모리 사용량 정보, 물리 메모리 총량, 유휴 메모리, 페이지 캐시 메모리, 파일 캐시 메모리, 커널 점유 메모리 등을 포함합니다&lt;/li&gt;
&lt;li&gt;스왑 공간 사용량 정보, 스왑 영역 총 용량 및 남은 스왑 공간 크기 포함&lt;/li&gt;
&lt;li&gt;가상 메모리 페이지 상태, 예를 들어 스왑 인/아웃된 페이지 수&lt;/li&gt;
&lt;li&gt;디스크 사용률, 각 디스크 장치별로 표시되며 장치 식별자, 바쁨 상태 시간 비율, 읽기/쓰기 요청 횟수를 나타냅니다&lt;/li&gt;
&lt;li&gt;네트워크 상태를 보여주며, 전송 계층 TCP 및 UDP, IP 계층과 각 활성 네트워크 포트의 송수신 패킷 크기를 표시합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;查看实时系统指标&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;5초마다 시스템 지표 확인: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 시스템 지표를 현재 시간 이후 5분 내(총 30회, 간격 10초)에 확인합니다&lt;/li&gt;
&lt;li&gt;현재 시간 이후 10분 후의 시스템 지표를 확인하고(10회, 60초 간격으로), 결과를 파일에 기록합니다: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;查看历史指标日志&lt;/strong&gt;: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 디렉터리에 기본적으로 저장됩니다. 확인 시 지정된 날짜의 로그 파일이 존재해야 하며, 그렇지 않으면 오류가 발생합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;일별 히스토리 지표 로그 확인: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;어제 기록 지표 로그 확인: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;지정된 날짜의 과거 지표 로그를 확인합니다. 예: 2024년 11월 06일: &lt;code&gt;atop -r 20241106&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;지정된 날짜 및 시간 이후의 과거 지표 로그를 확인합니다. 예: 2024년 11월 6일 14:00부터 &lt;code&gt;atop -r 20241106 -b 14:00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;지정된 날짜 및 시간 범위 내의 과거 지표 로그를 확인합니다. 예: 2024년 11월 5일 00:04 ~ 00:08: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;查看系统活动报告&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;현재 시스템의 CPU 사용률 보고서를 1분 동안(12회, 간격 5초) 확인합니다: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;해당 날짜 지정 시간대의 메모리 지표 보고서를 확인합니다. 예: 18:00~18:01&lt;/li&gt;
&lt;li&gt;지정된 날짜 및 시간 범위 내의 메모리 지표 보고서 확인 (예: 2024년 11월 5일 18:00~18:01):&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;다섯-기타-작업&#34;&gt;다섯. 기타 작업
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;配置天级别日志轮转策略&lt;/strong&gt;: 매일 atop 지표 로그 파일을 생성하려면 다음 단계를 따르세요&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;(선택 사항) 필요에 따라 모니터링 주기, 로그 보존 기간 및 로그 저장 경로를 조정합니다&lt;/li&gt;
&lt;li&gt;명령 실행하여 매일 로그 로테이션 관련 서비스 자동 시작 및 서비스 시작: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;더 복잡한 로깅 처리가 필요하다면 logrotate나 사용자 정의 스크립트를 활용하여 로그 관리를 구현할 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;加载可选的netatop内核模块&lt;/strong&gt;: 네트워크 사용률을 모니터링하려면 netatop 모듈(atop에서 기본 설치되지 않음)을 설치할 수 있습니다. Alibaba Cloud Linux 3 시스템을 예로 들면:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;커널 개발 패키지 및 컴파일에 필요한 소프트웨어 환경 설치: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;최신 버전 netatop 소스 코드를 지정된 디렉터리에 다운로드합니다&lt;/li&gt;
&lt;li&gt;소스 코드를 압축 해제하고 소스 코드 디렉토리로 들어갑니다: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;소스 코드 기반으로 모듈과 데몬을 구축 및 설치합니다&lt;/li&gt;
&lt;li&gt;netatop 서비스 시작:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;atop 도구는 기능이 강력하고 사용하기 유연하여, 적절한 설치, 구성 및 활용을 통해 Linux 시스템의 실행 상태를 더 잘 파악하고 잠재적인 문제를 조기에 발견하고 해결할 수 있습니다. 본 문서가 Linux 시스템 모니터링 역량 향상에 도움이 되기를 바랍니다.&lt;/p&gt;
&lt;h2 id=&#34;참고-링크&#34;&gt;참고 링크
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>환율의 매입 환율과 판매 환율을 이해하다</title>
        <link>https://blog.ttf248.life/ko/p/understanding-exchange-rates-buy-and-sell-rates/</link>
        <pubDate>Thu, 06 Feb 2025 22:32:10 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/understanding-exchange-rates-buy-and-sell-rates/</guid>
        <description>&lt;p&gt;외환 시장, 특히 은행이나 통화 환전소에서 “매입 환율”과 “매도 환율”이라는 용어를 자주 볼 수 있습니다. 이 두 개념에 대해 잘 모르는 분들도 많고 혼동하는 경우도 있는데, 오늘 간단한 예시를 통해 이들 환율의 의미와 역할을 이해하도록 돕겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;환율이-무엇인가요&#34;&gt;환율이 무엇인가요?
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;买入汇率&lt;/strong&gt;: 은행이나 외환 거래소는 이 환율로 외국 통화를 구매할 의향이 있습니다. 즉, 달러와 같은 외국 통화를 은행에 팔면 은행은 매입 환율로 위안화로 지불합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;卖出汇率&lt;/strong&gt;: 은행이나 외환 거래소는 이 환율로 외화를 팔 의향이 있으며, 즉 위안화로 외화를 구매할 때 은행은 매도 환율로 외화를 판매합니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;간단히 말해서:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;은행이 당신에게서 외화를 구매하는 가격입니다&lt;/li&gt;
&lt;li&gt;은행이 외화를 판매하는 가격입니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;은행의 매입 및 매도 환율은 일반적으로 다르며, 매도 환율이 통상적으로 매입 환율보다 높습니다. 이러한 차액이 은행의 이익 창출 원천입니다.&lt;/p&gt;
&lt;h2 id=&#34;구체-사례-분석&#34;&gt;구체 사례 분석
&lt;/h2&gt;&lt;p&gt;두 환율의 실제 적용을 더 명확하게 이해할 수 있도록, 구체적인 예시를 들어보겠습니다&lt;/p&gt;
&lt;p&gt;은행에서 달러를 환전하려고 할 때, 은행이 제시하는 환율은 다음과 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;买入汇率&lt;/strong&gt;: 1달러 = 7.0 위안&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;卖出汇率&lt;/strong&gt;: 1달러 = 7.2위안&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;상황-1-당신이-달러를-은행에-팔다&#34;&gt;상황 1: 당신이 달러를 은행에 팔다
&lt;/h3&gt;&lt;p&gt;만약 1,000달러가 있다고 가정하고 은행에 팔면, 은행은 매입 환율로 계산합니다&lt;/p&gt;
\[
1000 달러 × 7.0 위안/달러 = 7000 위안
\]
&lt;p&gt;즉, 은행은 당신에게 7000위안을 지불합니다. 여기 환율은 &lt;strong&gt;买入汇率&lt;/strong&gt;, 당신이 은행에 달러를 판매하기 때문입니다.&lt;/p&gt;
&lt;h3 id=&#34;상황-두-번째-당신은-위안화로-달러를-구매합니다&#34;&gt;상황 두 번째: 당신은 위안화로 달러를 구매합니다
&lt;/h3&gt;&lt;p&gt;만약 7000위안이 있다고 가정하고 달러로 환전하려고 한다면, 은행은 매도환율을 기준으로 계산합니다&lt;/p&gt;
\[
7000 위안 ÷ 7.2 위안/달러 = 972.22 달러
\]
&lt;p&gt;이 경우, 7000위안으로 약 972.22달러를 환전할 수 있습니다. 은행에서 달러를 구매하므로 환율은 &lt;strong&gt;卖出汇率&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;h2 id=&#34;환율이-왜-매수-시와-매도-시-서로-다른가요&#34;&gt;환율이 왜 매수 시와 매도 시 서로 다른가요?
&lt;/h2&gt;&lt;p&gt;은행의 매입 환율(7.0 위안/달러)이 매도 환율(7.2 위안/달러)보다 낮은 이유는 은행이 외환 거래 시 이와 같은 환율 차이를 통해 수익을 얻기 때문입니다. 다시 말해, 은행은 더 높은 매도 환율과 더 낮은 매입 환율 간의 차액을 통해 이익을 봅니다.&lt;/p&gt;
&lt;p&gt;예를 들어, 위의 사례에서 은행의 스프레드는 다음과 같습니다:&lt;/p&gt;
\[
매도 환율(7.2) - 매입 환율(7.0) = 0.2 위안
\]
&lt;p&gt;이 차액은 은행의 이익 발생원입니다&lt;/p&gt;
&lt;h2 id=&#34;요약&#34;&gt;요약
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;은행이 이 환율로 외화를 사들입니다(환전 시 적용되는 환율)&lt;/li&gt;
&lt;li&gt;은행이 이 환율로 외화를 판매합니다(당신이 외화를 구매할 때의 환율)&lt;/li&gt;
&lt;li&gt;매입 및 매도 환율 차이가 은행의 이익 창출 지점입니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;두 환율 개념을 이해하면 외환 거래 시 자신이 얻게 될 외화의 양이나, 외화를 구매하기 위해 지불해야 할 위안화의 양을 더 명확하게 알 수 있습니다. 이 간단한 예시가 외환 환율의 기본 원리를 더 잘 이해하는 데 도움이 되기를 바랍니다!&lt;/p&gt;</description>
        </item>
        <item>
        <title>Visual Studio에서 호환되지 않는 pdb 파일을 로드합니다</title>
        <link>https://blog.ttf248.life/ko/p/visual-studio-loading-unmatched-pdb-files/</link>
        <pubDate>Thu, 23 Jan 2025 20:04:33 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/visual-studio-loading-unmatched-pdb-files/</guid>
        <description>&lt;p&gt;Windows에서 Visual Studio로 프로그램을 디버깅할 때 pdb 파일과 실행 파일이 일치하지 않으면 &amp;ldquo;기호 파일을 로드할 수 없음&amp;quot;이라는 메시지가 표시됩니다. 프로그램 충돌 후 덤프 파일이 생성되더라도 일치하지 않는 pdb 파일이면 Visual Studio가 정상적으로 충돌 현장에 진입하지 못합니다.&lt;/p&gt;
&lt;h2 id=&#34;pdb-파일이-뭐죠&#34;&gt;pdb 파일이 뭐죠?
&lt;/h2&gt;&lt;p&gt;PDB 파일은 마이크로소프트에서 제공하는 디버깅 정보 파일이며, 프로그램 디버깅에 사용됩니다. PDB 파일에는 프로그램의 심볼 테이블, 소스 코드 파일 이름, 행 번호 등의 정보가 포함되어 있습니다. 프로그램 컴파일 시 PDB 파일을 생성하여 디버깅에 활용할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;windbg-디버깅&#34;&gt;WinDbg 디버깅
&lt;/h2&gt;&lt;p&gt;WinDbg는 마이크로소프트의 디버깅 도구이며, Windows 프로그램을 디버깅하는 데 사용될 수 있습니다. WinDbg는 불일치하는 pdb 파일을 로드할 수 있지만, 수동으로 로드해야 합니다. &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 명령은 불일치하는 pdb 파일을 강제로 로드할 수 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 WinDbg가 Visual Studio만큼 사용하기 편리하지 않으므로, 저희는 Visual Studio에서도 호환되지 않는 PDB 파일을 로드할 수 있기를 바랍니다&lt;/p&gt;
&lt;h2 id=&#34;비주얼-스튜디오에서-호환되지-않는-pdb-파일-로드&#34;&gt;비주얼 스튜디오에서 호환되지 않는 PDB 파일 로드
&lt;/h2&gt;&lt;p&gt;소스 코드는 보통 git으로 관리되므로, 해당 버전의 코드를 찾아 재컴파일하여 일치하는 pdb 파일을 생성할 수 있습니다. 왜 로드되지 않을까요? 주로 메타데이터 불일치가 원인입니다.&lt;/p&gt;
&lt;p&gt;작은 도구가 있어, 실행 파일 정보를 기반으로 메타데이터를 수정하여 Visual Studio가 로드할 수 있는 새로운 pdb 파일을 생성한다&lt;/p&gt;
&lt;p&gt;chkmatch 다운로드 주소: &lt;a class=&#34;link&#34; href=&#34;https://www.debuginfo.com/tools/chkmatch.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.debuginfo.com/tools/chkmatch.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;사이트 캐시 주소: &lt;a class=&#34;link&#34; href=&#34;chkmatch.zip&#34; &gt;chkmatch.zip&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ChkMatch utility can be used to check whether an executable and debug information file match. It can also be used to enforce matching between an executable and debug information file, if they are compatible.

For more information about debug information matching and related issues, see this article.

Supported debug information formats: DBG, PDB 2.0, PDB 7.0.

chkmatch [-c ExeFile DebugInfoFile ] |
         [-m ExeFile DebugInfoFile]
-c
Check matching between the executable and the debug information file.
-m
Make the executable and the debug information file match.
ExeFile
The name of the executable file.
DebugInfoFile
The name of the debug information file.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;chkmatch-사용&#34;&gt;chkmatch 사용
&lt;/h2&gt;&lt;p&gt;먼저 검사 작업을 수행하고, 불일치 원인을 분석한 후 서명 불일치를 알립니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -c &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb

Executable:
TimeDateStamp: c26d9be3
Debug info: 2 ( CodeView )
TimeStamp: f86b0a4f  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 122  RVA: 001cdc44  FileOffset: 001cbe44
CodeView format: RSDS
Signature: {428c9b95-39a3-4a8d-a8e5-7be453684757}  Age: 1
PdbFile: D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
Debug info: 16 ( Unknown )
TimeStamp: 00000000  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 0  RVA: 00000000  FileOffset: 00000000

Debug information file:
Format: PDB 7.00
Signature: {06fae08e-c0a2-4f3d-9c7c-dfc684445dd1}  Age: 1

Result: Unmatched (reason: Signature mismatch)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그런 다음 수정 작업을 실행하여 pdb 파일과 exe 파일을 일치시킵니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\tianlong.xiang\Downloads\chkmatch&amp;gt;ChkMatch.exe -m &amp;quot;D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe&amp;quot; E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb
ChkMatch - version 1.0
Copyright (C) 2004 Oleg Starodumov
http://www.debuginfo.com/


Executable: D:\Program Files\Rolan\trade\UAT_YinStrade\YinTrade.Main.exe
Debug info file: E:\YinTech\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\bin\Release\YinTrade.Main.pdb

Executable:
TimeDateStamp: c26d9be3
Debug info: 2 ( CodeView )
TimeStamp: f86b0a4f  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 122  RVA: 001cdc44  FileOffset: 001cbe44
CodeView format: RSDS
Signature: {428c9b95-39a3-4a8d-a8e5-7be453684757}  Age: 1
PdbFile: D:\stock_UAT\ykcz_securities_trading_client\Sec_Trade\YinTrade.Main\obj\Release\YinTrade.Main.pdb
Debug info: 16 ( Unknown )
TimeStamp: 00000000  Characteristics: 0  MajorVer: 0  MinorVer: 0
Size: 0  RVA: 00000000  FileOffset: 00000000

Debug information file:
Format: PDB 7.00
Signature: {06fae08e-c0a2-4f3d-9c7c-dfc684445dd1}  Age: 1

Writing to the debug information file...
Result: Success.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/38147487/forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;forcing-to-load-unmatched-symbols-in-visual-studio-2015-debugger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>커서 AI 프로그래밍 IDE 체험</title>
        <link>https://blog.ttf248.life/ko/p/cursor-ai-programming-ide-trial/</link>
        <pubDate>Thu, 23 Jan 2025 19:30:13 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/cursor-ai-programming-ide-trial/</guid>
        <description>&lt;p&gt;번뜩하니 또 일 년이 지났습니다. 업무적으로 가장 큰 변화는 AI의 참여도가 눈에 띄게 높아진 것인데, 이전에는 개발 언어 간 전환 시 각 언어별 다양한 API 인터페이스를 익혀야 했지만, 이제 이러한 기본 코드는 AI가 생성해 주니 개발자에게는 정말 큰 축복입니다.&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;23년 초에 간단한 입문 소개 두 편을 다루었었는데, 눈 깜짝할 사이에 25년이 벌써 왔네요. 어떻게 말해야 할지 모르겠지만, 뚜렷한 발전은 없는 것 같아요. 여전히 자신만의 인식을 갖고 합리적으로 작업을 분할할 수 있어야 하고, 무엇보다 중요한 것은 AI가 생성한 코드에 버그가 있는지 식별하는 것입니다.&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;Github copilot
&lt;/h2&gt;&lt;p&gt;날짜가 언제인지 잊어버렸는데, 자료를 보니 싱가포르에 서버를 구축했고 국내에서 사용할 수 있게 되었다. 더 이상 장기간으로 VPN을 사용할 필요는 없지만, 로그인할 때는 여전히 VPN이 필요하다. 하지만 이 VPN은 로그인할 때만 사용하면 되고 그 후에는 종료할 수 있다.&lt;/p&gt;
&lt;p&gt;일상적으로 더 많이 사용하는 것은 Github Copilot 플러그인인데, 이 플러그인은 VS Code, Visual Studio에서 바로 사용할 수 있습니다. 두 프로그램 사이를 전환할 필요가 없습니다. ChatGPT에 비해 Github Copilot이 프로젝트 지원이 더 좋고, 상호작용도 더 친절하며, 일부 로컬 파일을 선택하여 &lt;strong&gt;“训练”AI&lt;/strong&gt; 투입하면 해당 프로젝트에 더 적합한 코드를 생성합니다.&lt;/p&gt;
&lt;h2 id=&#34;cursor-ai&#34;&gt;Cursor AI
&lt;/h2&gt;&lt;p&gt;최근에 새로운 AI 프로그래밍 IDE인 Cursor AI를 보았는데, 이 IDE는 Github Copilot 기반이지만 더 똑똑하고 파일을 직접 생성해 준다&lt;/p&gt;
&lt;p&gt;간단히 사용해 봤는데 괜찮은 것 같긴 하지만, 현재 프로젝트에 대한 이해는 아직 부족하고, 로컬 프로젝트 파일이 많을 때는 큰 규모의 리팩토링 및 최적화 조정에는 여전히 &lt;strong&gt;开发者拆分任务&lt;/strong&gt;가 필요하다&lt;/p&gt;
&lt;p&gt;curso 프로젝트의 엔지니어 모드로 전환하여 &amp;ldquo;새로운 개인 이력서 웹페이지 생성&amp;quot;이라는 내용을 입력하고, 다양한 스타일 전환을 지원하며, 데이터 표시를 위해 개인 정보를 채워 넣으세요&lt;/p&gt;
&lt;p&gt;몇 번이고 반복하다 보면 다음과 같은 웹페이지를 얻을 수 있습니다. 물론 이 페이지는 비교적 간단하지만, 초보자에게는 꽤 괜찮은 시작입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;현재 등록 사용자는 고급 API를 150회 무료로 체험할 수 있으며, 유료 사용자는 고급 API 사용이 5000회로 제한됩니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43; 비트 연산 기초: 비트별 값 가져오기 및 플래그 설정</title>
        <link>https://blog.ttf248.life/ko/p/cpp-bitwise-operations-basics-flags/</link>
        <pubDate>Fri, 17 Jan 2025 02:23:56 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/cpp-bitwise-operations-basics-flags/</guid>
        <description>&lt;p&gt;실제 C++ 개발에서 비트 연산은 흔히 사용되는 기술이며, 특히 시스템 상태, 플래그 또는 제어 비트를 처리할 때 매우 효율적인 솔루션을 제공합니다. 본 글에서는 예제를 통해 비트 연산을 사용하여 특정 플래그를 가져오고 설정하는 방법을 설명하겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;비트-연산-기초-개념&#34;&gt;비트 연산 기초 개념
&lt;/h3&gt;&lt;p&gt;컴퓨터에서 데이터는 2진 비트(0과 1)로 저장되며, 비트 연산은 이 2진 비트에 대한 연산입니다. C++에는 몇 가지 일반적인 비트 연산자가 있습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按位与（&amp;amp;）&lt;/strong&gt;: 특정 비트가 1인지 확인하는 데 사용됩니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按位或（|）&lt;/strong&gt;: 특정 비트를 1로 설정합니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按位异或（^）&lt;/strong&gt;: 특정 비트를 반전시키는 데 사용됩니다&lt;/li&gt;
&lt;li&gt;모든 비트를 반전합니다&lt;/li&gt;
&lt;li&gt;모든 비트를 몇 자리 내립니다&lt;/li&gt;
&lt;li&gt;모든 비트를 몇 자리 오른쪽으로 이동합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 예제에서는 __BOLD_2&lt;code&gt;wInfo&lt;/code&gt;에 대해 일련의 비트 연산을 수행하여 다양한 플래그를 통해 서로 다른 상태를 표현해야 합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR
    A[原始数值: 00010000] --&amp;gt; B[左移: 00010000 &amp;lt;&amp;lt; 1]
    B --&amp;gt; C[结果: 00100000]
    C --&amp;gt; D[右移: 00100000 &amp;gt;&amp;gt; 1]
    D --&amp;gt; E[结果: 00010000]

    subgraph 左移操作
        direction LR
        A --&amp;gt; B --&amp;gt; C
    end

    subgraph 右移操作
        direction LR
        C --&amp;gt; D --&amp;gt; E
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;요구-분석&#34;&gt;요구 분석
&lt;/h3&gt;&lt;p&gt;주어진 설명에 따르면, 우리는 다양한 상태를 나타내는 16비트 플래그가 있습니다. 이러한 상태는 각각 다른 이진 비트로 표현되며, 각 이진 비트는 특정 의미를 가집니다. 예를 들어:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실패했나?&lt;/li&gt;
&lt;li&gt;압축 여부&lt;/li&gt;
&lt;li&gt;증분 추가 여부&lt;/li&gt;
&lt;li&gt;후속 패키지 있나요?&lt;/li&gt;
&lt;li&gt;정상 요청 또는 로그아웃&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비트-연산-구현&#34;&gt;비트 연산 구현
&lt;/h3&gt;&lt;p&gt;이러한 플래그 비트는 비트 연산을 통해 설정하고 가져올 것입니다. 구체적으로:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按位取值&lt;/strong&gt;: 특정 비트 값(0 또는 1)을 가져옵니다&lt;/li&gt;
&lt;li&gt;설정된 비트를 1로 설정합니다&lt;/li&gt;
&lt;li&gt;설정된 비트를 0으로 만듭니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우리는 먼저 이러한 플래그를 저장하기 위한 __ 类型的变量 __INLINE_CODE_0__을 정의합니다. 그런 다음 비트 연산을 통해 해당 플래그를 확인하고 설정합니다.&lt;/p&gt;
&lt;h3 id=&#34;c-예제-코드&#34;&gt;C++ 예제 코드
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;bitset&amp;gt;

// 定义标志位常量
const unsigned short BIT_0_FAIL = 1 &amp;lt;&amp;lt; 0;    // bit0 是否失败
const unsigned short BIT_1_COMPRESSED = 1 &amp;lt;&amp;lt; 1; // bit1 是否压缩
const unsigned short BIT_2_INCREMENT = 1 &amp;lt;&amp;lt; 2;  // bit2 是否增量
const unsigned short BIT_3_HAS_MORE = 1 &amp;lt;&amp;lt; 3;   // bit3 是否有后续包
const unsigned short BIT_5_CANCEL = 1 &amp;lt;&amp;lt; 5;     // bit5 正常请求(0)或注销(1)

// 检查某一位是否为1
bool isBitSet(unsigned short wInfo, unsigned short bitMask) {
    return (wInfo &amp;amp; bitMask) != 0;
}

// 设置某一位为1
void setBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo |= bitMask;
}

// 清除某一位（设置为0）
void clearBit(unsigned short&amp;amp; wInfo, unsigned short bitMask) {
    wInfo &amp;amp;= ~bitMask;
}

int main() {
    // 假设wInfo的初始值为0
    unsigned short wInfo = 0;

    // 设置bit0（失败标志）
    setBit(wInfo, BIT_0_FAIL);
    
    // 设置bit1（压缩标志）
    setBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印wInfo的二进制值
    std::cout &amp;lt;&amp;lt; &amp;quot;wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    // 检查各个标志位
    std::cout &amp;lt;&amp;lt; &amp;quot;bit0 (是否失败): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_0_FAIL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit1 (是否压缩): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_1_COMPRESSED) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit2 (是否增量): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_2_INCREMENT) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit3 (是否有后续包): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_3_HAS_MORE) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;bit5 (是否注销): &amp;quot; &amp;lt;&amp;lt; (isBitSet(wInfo, BIT_5_CANCEL) ? &amp;quot;是&amp;quot; : &amp;quot;否&amp;quot;) &amp;lt;&amp;lt; std::endl;

    // 清除bit1（压缩标志）
    clearBit(wInfo, BIT_1_COMPRESSED);
    
    // 打印更新后的wInfo
    std::cout &amp;lt;&amp;lt; &amp;quot;Updated wInfo (in binary): &amp;quot; &amp;lt;&amp;lt; std::bitset&amp;lt;16&amp;gt;(wInfo) &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;코드 실행, 추천 친구: &lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;wInfo (in binary): 0000000000000011
bit0 (是否失败): 是
bit1 (是否压缩): 是
bit2 (是否增量): 否
bit3 (是否有后续包): 否
bit5 (是否注销): 否
Updated wInfo (in binary): 0000000000000001
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;코드-설명&#34;&gt;코드 설명
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;변위 연산(시프트 연산, AND 연산, OR 연산, XOR 연산, NOT 연산 등)을 사용하면 각 플래그 비트에 고유한 이진 위치를 할당할 수 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;굵게_4&lt;/strong&gt;: _이탤릭체_8 &lt;strong&gt;굵게_5&lt;/strong&gt;: _이탤릭체_9 &lt;strong&gt;굵게_6&lt;/strong&gt;: _이탤릭체_10 &lt;strong&gt;굵게_7&lt;/strong&gt;: _이탤릭체_11 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 비트 위치를 1로 설정합니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 비트 위치를 0으로 설정합니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;요약&#34;&gt;요약
&lt;/h3&gt;&lt;p&gt;비트 연산을 통해 여러 상태 플래그를 효율적으로 처리할 수 있습니다. 특히 임베디드 개발, 네트워크 프로토콜, 시스템 상태 관리 등 실제 개발 환경에서 유용하며, 여러 이진 상태를 표현하여 공간을 절약하고 효율성을 높이는 데 자주 사용됩니다.&lt;/p&gt;
&lt;p&gt;이 블로그 게시물이 C++에서 비트 연산을 사용하여 비트 값 가져오기 및 설정 방법을 이해하는 데 도움이 되기를 바랍니다. 이러한 기술을 숙달하면 효율적이고 유지 관리하기 쉬운 코드를 작성하는 데 매우 유용합니다!&lt;/p&gt;</description>
        </item>
        <item>
        <title>데스크탑을 2.5G 네트워크 카드로 업그레이드하여 로컬 영역 네트워크 연결 속도를 높입니다</title>
        <link>https://blog.ttf248.life/ko/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</link>
        <pubDate>Fri, 10 Jan 2025 00:37:52 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/desktop-upgrade-to-25g-network-card-accelerate-lan-interconnection/</guid>
        <description>&lt;p&gt;데스크톱 하드웨어 릴리즈 세 편 중 첫 번째에서 PCIe 어댑터에 대해 언급했는데, 구형 SSD는 어디로 갔냐고요? 당연히 버린 건 아니에요. 고장난 것도 아니고, 새 컴퓨터(&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;)에 설치해서 사용하고 있어요 (1년 전 구매).&lt;/p&gt;
&lt;p&gt;새 기기, 하드웨어 스펙은 여전히 훌륭하다. 2.5G 이중 네트워크 포트, PCIE4.0, WiFi6.&lt;/p&gt;
&lt;p&gt;최근 이사하면서 개별 공유기가 없어 모든 기기를 무선 네트워크로 연결하고 있는데, ASUS 메인보드 데스크탑 PC의 무선 성능이 좋지 않거나, 공유기의 무선 접속이나 로컬 네트워크 간 업로드 속도 문제일 수도 있습니다. 그래서 2.5G 네트워크 카드를 새로 구매해서 데스크탑에 설치했습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;至此，主板的插槽用完了：显卡、无线网卡、2.5G 网卡、固态硬盘 PCIE 转接器。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;네트워크-설명&#34;&gt;네트워크 설명
&lt;/h2&gt;&lt;p&gt;두 대의 기기는 원래 무선 네트워크 카드를 통해 인터넷에 연결되지만, 두 기기 간에는 직접 네트워크 케이블로 연결하고 양쪽 모두 2.5G 네트워크 카드입니다. 두 기기를 네트워크 케이블로 직접 연결하는 방법은 자세히 설명하지 않겠습니다. 온라인에 많은 튜토리얼이 있습니다. 방화벽을 열어두고, 원하는 한 대를 게이트웨이로 선택하십시오.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
    A[机器1&amp;lt;br&amp;gt;IP: 192.168.4.1&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: - &amp;lt;br&amp;gt;自动获取DNS] --&amp;gt;|网线直连（2.5G）| B[机器2&amp;lt;br&amp;gt;IP: 192.168.4.2&amp;lt;br&amp;gt;子网掩码: 255.255.255.0&amp;lt;br&amp;gt;默认网关: 192.168.4.1&amp;lt;br&amp;gt;自动获取DNS];
    A --&amp;gt;|无线网卡| Internet;
    B --&amp;gt;|无线网卡| Internet;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;두-네트워크-구간-속도-측정&#34;&gt;두 네트워크 구간 속도 측정
&lt;/h2&gt;&lt;h3 id=&#34;라우터-로컬-네트워크&#34;&gt;라우터 로컬 네트워크
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.3.237
Connecting to host 192.168.3.237, port 5201
[  4] local 192.168.3.122 port 1656 connected to 192.168.3.237 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.00   sec  9.17 MBytes  76.7 Mbits/sec
[  4]   1.00-2.00   sec  9.91 MBytes  83.2 Mbits/sec
[  4]   2.00-3.00   sec  8.74 MBytes  73.3 Mbits/sec
[  4]   3.00-4.00   sec  10.2 MBytes  85.2 Mbits/sec
[  4]   4.00-5.00   sec  9.23 MBytes  77.1 Mbits/sec
[  4]   5.00-6.00   sec  8.80 MBytes  73.9 Mbits/sec
[  4]   6.00-7.01   sec  8.00 MBytes  66.8 Mbits/sec
[  4]   7.01-8.00   sec  7.69 MBytes  64.9 Mbits/sec
[  4]   8.00-9.01   sec  9.72 MBytes  81.1 Mbits/sec
[  4]   9.01-10.01  sec  7.63 MBytes  63.6 Mbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  sender
[  4]   0.00-10.01  sec  89.0 MBytes  74.6 Mbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;직결-lan&#34;&gt;직결 LAN
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;C:\Users\core\Desktop\iperf-3.1.3-win32&amp;gt;iperf3.exe -c 192.168.4.1
Connecting to host 192.168.4.1, port 5201
[  4] local 192.168.4.2 port 1524 connected to 192.168.4.1 port 5201
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-1.01   sec   178 MBytes  1.48 Gbits/sec
[  4]   1.01-2.00   sec   204 MBytes  1.72 Gbits/sec
[  4]   2.00-3.00   sec   214 MBytes  1.80 Gbits/sec
[  4]   3.00-4.00   sec   229 MBytes  1.92 Gbits/sec
[  4]   4.00-5.00   sec   202 MBytes  1.69 Gbits/sec
[  4]   5.00-6.00   sec   213 MBytes  1.79 Gbits/sec
[  4]   6.00-7.00   sec   230 MBytes  1.93 Gbits/sec
[  4]   7.00-8.00   sec   192 MBytes  1.61 Gbits/sec
[  4]   8.00-9.00   sec   220 MBytes  1.84 Gbits/sec
[  4]   9.00-10.00  sec   230 MBytes  1.93 Gbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  sender
[  4]   0.00-10.00  sec  2.06 GBytes  1.77 Gbits/sec                  receiver

iperf Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>華碩 마더보드 Z490 설치 시 디스크가 너무 많아 가끔 인식되지 않음</title>
        <link>https://blog.ttf248.life/ko/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/</link>
        <pubDate>Fri, 10 Jan 2025 00:08:51 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/</guid>
        <description>&lt;p&gt;앞선 내용에 이어, 무심하게 무선 네트워크 카드가 인식되지 않는 문제가 발생했는데, 파티션을 재건하기 전에 온라인에서 다른 해결책을 찾아봤습니다. 예를 들어 메인보드 배터리를 제거하거나 전원을 15분 동안 끊는 방법, 최신 버전의 BOIS 드라이버로 업그레이드하는 방법 등이 있었지만 모두 효과가 없었습니다.&lt;/p&gt;
&lt;p&gt;처리할 일이 더 있다고 생각하며 제한된 네트워크로 전환하고, 거실에서 인터넷 랜선을 방으로 끌어왔는데, 이 순간 또 문제가 발생했다. 유선 네트워크도 인식되지 않는다. 큰 결정을 내리고 시스템을 재설치했더니 가이드 파티션이 손상되었다. 계속해서 문제가 발생하지 않았다면 이렇게 오래까지 끙끙거리지 않았을 것이다. ASUS의 디스크 충돌은 일시적인 문제이며, 시스템 재부팅 시 불안정성을 유발한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;지난주 데스크탑에 새로운 디스크를 추가했는데, 장양(Changjiang)의 2TB M.2 SSD였고, 어제 전원을 껐을 때까지 재부팅이 되지 않았다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/20250110002801.png&#34;
	width=&#34;553&#34;
	height=&#34;322&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;磁盘全家福&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;시스템-재설치&#34;&gt;시스템 재설치
&lt;/h2&gt;&lt;p&gt;시간을 세어보면 시스템을 다시 설치한 지 2년이나 됐고, C 드라이브는 이미 용량이 부족하다. 윈도우즈의 오래된 문제로, 각종 소프트웨어가 습관적으로 C 드라이브에 데이터를 저장한다. 그래서 시스템 재설치를 결정했다. 시스템 재설치 후 네트워크 카드 문제는 정상 작동했지만, 다음 날 일상적인 개발 환경을 복원하고 시스템 백업을 준비하던 중 새로운 문제가 발생했는데, 시스템 재부팅 후 부트 파티션이 사라졌다.&lt;/p&gt;
&lt;p&gt;이전 글의 단계를 따라 부트 파티션을 재건했지만 불안정해서, 재부팅 후에는 부트 파티션이 로드되지 않을 수도 있습니다. 케이스를 건드리는 것을 의심하기 시작했을 때 하드 드라이브 선이 느슨해진 것 같았지만 여러 번 확인해도 문제는 없었습니다.&lt;/p&gt;
&lt;h2 id=&#34;기억-회복&#34;&gt;기억 회복
&lt;/h2&gt;&lt;p&gt;몇 년 전 이 기계에 한 번 SSD를 추가한 적이 있는데, 당시에는 PCIe 어댑터(그래픽 카드 슬롯에 연결)를 사용해서 직접 메인보드에 장착하지 않았습니다. 이번에는 바로 메인보드에 설치했는데, 혹시 메인보드 문제일 수도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/20250110002148.png&#34;
	width=&#34;325&#34;
	height=&#34;545&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;固态转换器&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;59&#34;
		data-flex-basis=&#34;143px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;메인보드-설명서&#34;&gt;메인보드 설명서
&lt;/h2&gt;&lt;p&gt;메인보드 설명서에 오류가 있어, 표시된 SATA 포트 위치와 실제 위치가 다릅니다. 디스크가 많아 포트에 모두 장착되어 있는데다, 기존 SSD들은 모두 SATA 방식이라 설명서에 명시된 충돌이 발생합니다. 실제로 테스트해 보니 이 충돌은 불안정하게 발생하는 것으로 보이며, 발생 시 해당 디스크를 로드하지 못하고 시스템 부팅 시 부트 로딩 실패가 발생합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/asus-motherboard-z490-too-many-disks-intermittent-disk-recognition/20250110002401.png&#34;
	width=&#34;807&#34;
	height=&#34;847&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Z490&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;228px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;해결책&#34;&gt;해결책
&lt;/h2&gt;&lt;p&gt;PCIE 변환기에 SSD를 다시 장착하니, 메인보드의 SATA 포트 충돌이 사라지고 시스템이 정상적으로 부팅되었습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>ESP 파티션, GPT 파티션 테이블과 윈도우 운영체제의 협력 원리 탐구</title>
        <link>https://blog.ttf248.life/ko/p/exploring-esp-gpt-and-windows-cooperation/</link>
        <pubDate>Thu, 09 Jan 2025 23:58:20 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/exploring-esp-gpt-and-windows-cooperation/</guid>
        <description>&lt;p&gt;어제 퇴근해서 집에 도착하자마자, 늘 하던 대로 데스크탑을 켰는데 시스템은 정상적으로 시작되었지만 무선 네트워크 카드가 로드되지 않았습니다. 카드 연결이 풀렸다고 생각하고 분해 후 무선 네트워크 카드를 다시 장착했는데, 문제가 더 커져서 시스템이 아예 부팅되지 않고 부트 로더가 실패했습니다.&lt;/p&gt;
&lt;p&gt;오랜만에 데스크톱을 만지작거려보니 파티션 부팅이 좀 낯설다. DisGenius로 빈 파티션을 다시 분할하고(보통 디스크 앞부분에), ESP 파티션으로 할당(기본 300M)한 후 PE 시스템에서 부트 설정을 재건했다. 관련 자료는 인터넷에서 찾아볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/exploring-esp-gpt-and-windows-cooperation/20250110000433.png&#34;
	width=&#34;330&#34;
	height=&#34;269&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;新建ESP分区&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/exploring-esp-gpt-and-windows-cooperation/20250110000509.png&#34;
	width=&#34;433&#34;
	height=&#34;355&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;可以去掉MSR分区&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;121&#34;
		data-flex-basis=&#34;292px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;컴퓨터 저장 공간의 세계에서 ESP 파티션, GPT 파티션 테이블, 그리고 Windows 운영체제는 밀접하게 연결되어 있으며, 각자 고유하고 중요한 역할을 수행하며 시스템의 안정적인 작동과 효율적인 관리를 지원합니다. 하지만 이들을 자세히 알아보기 전에, 컴퓨터 파티션 역사의 “선배”라고 할 수 있는 MBR 파티션 테이블 형식을 언급하지 않을 수 없는데, 이는 후대의 기술들과 서로 상호 반영되어 기술 진화의 맥락을 더욱 돋보이게 합니다. 오늘 우리는 이러한 요소들의 내재적 연관성과 정교함에 대해 심층적으로 분석해 보겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;일반적인-하드-디스크-파티션의-기초-mbr-파티션-테이블&#34;&gt;일반적인 하드 디스크 파티션의 “기초”, MBR 파티션 테이블
&lt;/h2&gt;&lt;p&gt;MBR은 주부트 레코드(Master Boot Record)의 약자로, 개인용 컴퓨터 초기부터 존재하며 수십 년간 하드 디스크 파티션 영역을 지배해왔습니다&lt;/p&gt;
&lt;h3 id=&#34;기본-구조&#34;&gt;기본 구조
&lt;/h3&gt;&lt;p&gt;이것은 하드 디스크의 첫 번째 섹터, 즉 0번 섹터에 위치하며 512바이트 공간을 차지합니다. 이 512바이트는 주로 세 부분으로 나뉘는데, 첫째는 컴퓨터 시작 시 운영체제의 부트 로더를 로드하는 데 책임이 있는 부트 프로그램 코드이며, 일반적으로 446바이트입니다. 둘째는 디스크 파티션 테이블로, 64바이트를 차지하며 최대 4개의 주 파티션 정보를 정의할 수 있습니다. 각 파티션 설명은 16바이트를 차지하며 파티션의 시작 헤드, 섹터, 실린더 및 파티션 유형, 크기와 같은 중요한 매개변수를 기록합니다. 마지막 2바이트는 MBR 종료 플래그 &amp;ldquo;55 AA&amp;quot;이며, 이 섹터를 유효한 MBR로 식별하는 데 사용됩니다.&lt;/p&gt;
&lt;h3 id=&#34;역사적-성과와-한계&#34;&gt;역사적 성과와 한계
&lt;/h3&gt;&lt;p&gt;초기에 MBR 파티션 테이블은 개인용 컴퓨터의 비교적 단순한 저장 요구 사항을 충분히 충족했습니다. 운영 체제가 하드 디스크 파티션을 원활하게 인식하고 데이터를 순서대로 저장하고 읽을 수 있도록 했습니다. 그러나 시대가 발전함에 따라 그 한계가 더욱 뚜렷해졌습니다. 한 가지는 64바이트의 파티션 테이블 공간으로 인해 최대 4개의 기본 파티션만 분할할 수 있다는 점이며, 더 많은 파티션을 만들려면 다소 복잡한 확장 파티션 및 논리 파티션과 같은 방법을 사용해야 하므로 디스크 관리에 불편을 초래합니다. 다른 한 가지는 최대 2TB의 하드 드라이브 용량만 지원한다는 점으로, 현재 수 TB에서 수십 TB에 달하는 대용량 하드 드라이브 앞에서 힘이 부족하며, 이는 저장 기술의 추가적인 발전을 제약하는 병목 현상이 되었습니다.&lt;/p&gt;
&lt;h2 id=&#34;두-번째-esp-파티션--시스템의-보이지-않는-부팅-키&#34;&gt;두 번째, ESP 파티션 — 시스템의 “보이지 않는 부팅 키”
&lt;/h2&gt;&lt;p&gt;ESP는 EFI System Partition의 약자로, UEFI(통합 확장 펌웨어 인터페이스) 표준을 사용하는 컴퓨터에 필수적인 특수 파티션입니다&lt;/p&gt;
&lt;h3 id=&#34;기능-특징&#34;&gt;기능 특징
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动引导&lt;/strong&gt;: 컴퓨터가 전원을 켜면 UEFI 펌웨어는 먼저 하드 디스크의 ESP 파티션을 찾아 Windows Boot Manager와 같은 부트 로더를 읽어 운영체제를 시작합니다. 마치 정확한 열쇠로 시스템 부팅의 문을 여는 것과 같습니다. 없으면 시스템은 부팅 시 혼란에 빠져 어디로 가야 할지 모릅니다.&lt;/li&gt;
&lt;li&gt;ESP 파티션은 시스템 부팅 과정에 필수적인 드라이버들을 저장하여 초기 부팅 단계에서 하드웨어 장치(하드 디스크 컨트롤러, 그래픽 카드 등)가 정상적으로 작동하도록 하고, 이후 운영체제의 원활한 전환을 위한 기반을 마련합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;공간-요구사항-및-형식&#34;&gt;공간 요구사항 및 형식
&lt;/h3&gt;&lt;p&gt;일반적으로 ESP 파티션의 권장 크기는 100MB ~ 500MB 사이이며, 보통 200MB 정도 할당하면 기본적인 요구사항을 충족할 수 있습니다. 파일 시스템 형식은 반드시 FAT32여야 합니다. 이는 UEFI 펌웨어에서 부팅 파일을 읽기 위해 FAT32 형식을 인식하기 때문이며, 호환성과 플랫폼 간 상호 운용성을 보장합니다.&lt;/p&gt;
&lt;h2 id=&#34;세-번째-gpt-파티션-테이블--하드-디스크의-스마트-관리자&#34;&gt;세 번째, GPT 파티션 테이블 — 하드 디스크의 “스마트 관리자”
&lt;/h2&gt;&lt;p&gt;GPT(Global Unique Identifier Partition Table)는 기존 MBR 파티션 테이블을 대체하는 새로운 파티션 방식입니다&lt;/p&gt;
&lt;h3 id=&#34;장점-부각&#34;&gt;장점 부각
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大容量支持&lt;/strong&gt;: 현재 데이터 폭발의 시대에 고용량 하드 디스크가 끊임없이 등장하고 있습니다. GPT 파티션 테이블은 MBR의 2TB 용량 제한을 돌파하여 이론적으로 최대 9.4ZB(제타바이트, 1ZB = 1024 EB, 1EB = 1024 PB, 1PB = 1024 TB)의 초대형 저장 공간을 지원하며, 막대한 양의 데이터를 저장할 수 있는 가능성을 열었습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区数量多&lt;/strong&gt;: MBR과 달리 최대 4개의 주 파티션만 분할할 수 있는 GPT는 사용자와 시스템 관리자에게 훨씬 더 큰 유연성을 제공하여 여러 시스템 파티션, 데이터 파티션을 나누거나 특정 용도로 공간을 예약하는 데 매우 효과적입니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠性高&lt;/strong&gt;: GPT 파티션 테이블은 중복 백업 메커니즘을 사용하여 하드 디스크 헤드와 테일 각각에 파티션 테이블 정보를 저장합니다. 한 곳의 파티션 테이블이 손상되면 시스템은 자동으로 다른 백업에서 복구하여 파티션 테이블 오류로 인한 데이터 손실 위험을 크게 줄이고 데이터 보안을 보장합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;구조-분석&#34;&gt;구조 분석
&lt;/h3&gt;&lt;p&gt;GPT 파티션 테이블은 보호 MBR(전통 BIOS와의 호환성을 위해 보존된 MBR 구조의 일부이지만 실제 파티션 관리에 사용되지는 않음), GPT 헤더(파티션 테이블 버전, 파티션 수, 파티션 테이블 크기 등 GPT 파티션 테이블의 기본 정보를 저장), 그리고 파티션 항목 배열(각 파티션 항목은 파티션의 시작 섹터, 종료 섹터, 파티션 유형 GUID, 파티션 고유 식별자 등의 주요 정보를 상세히 기록)로 구성되어 있습니다. 이러한 구조들은 서로 협력하여 하드 디스크 공간을 정확하게 계획하고 관리합니다.&lt;/p&gt;
&lt;h2 id=&#34;네-알겠습니다-windows-운영체제--사용자의-디지털-소통-공간&#34;&gt;네, 알겠습니다. Windows 운영체제 — 사용자의 “디지털 소통 공간”
&lt;/h2&gt;&lt;p&gt;윈도우는 전 세계적으로 널리 사용되는 운영체제로, 사용자(사람)와 컴퓨터 하드웨어 간의 친근한 연결고리를 형성합니다&lt;/p&gt;
&lt;h3 id=&#34;esp-파티션-및-gpt-파티션-테이블-통합&#34;&gt;ESP 파티션 및 GPT 파티션 테이블 통합
&lt;/h3&gt;&lt;p&gt;UEFI 기반 Windows 시스템 설치 과정에서, 설치 프로그램은 자동으로 ESP 파티션을 생성하고 부트 파일을 배포합니다. 동시에 디스크는 GPT 파티션 테이블 형식으로 초기화되며, 시스템 예약 파티션(시스템 핵심 파일 저장 공간, 기존 BIOS의 시스템 부팅 파일 영역과 유사), Windows 시스템 파티션(시스템 핵심 파일이 설치되는 곳) 및 기타 사용자 정의 데이터 파티션 등이 구성됩니다. Windows 시스템은 GPT 파티션 테이블을 통해 각 파티션을 정확하게 식별하고 ESP 파티션을 통해 원활하게 부팅되며, 이 세 가지 요소는 매끄럽게 연결되어 사용자에게 쾌적한 부팅 및 사용 경험을 제공합니다.&lt;/p&gt;
&lt;h3 id=&#34;시스템-관리-및-최적화-기반&#34;&gt;시스템 관리 및 최적화 기반
&lt;/h3&gt;&lt;p&gt;Windows는 실행 중 GPT 파티션 테이블의 장점을 활용하여 디스크 관리를 수행합니다. 예를 들어, 디스크 관리 도구에서 GPT 파티션을 쉽게 식별하고 사용자는 파티션 생성, 삭제, 포맷, 크기 조정 등 다양한 단계의 데이터 저장 요구 사항을 충족할 수 있습니다. 또한 시스템 업데이트 및 소프트웨어 설치와 같은 프로세스도 파티션 레이아웃과 밀접하게 관련되어 있으며, 합리적인 파티션 계획은 시스템 성능 및 안정성을 향상시키고 디스크 공간 부족 또는 파티션 혼란으로 인한 문제를 줄이는 데 도움이 됩니다.&lt;/p&gt;
&lt;h2 id=&#34;다섯째-실전-팁-유지보수-및-문제-해결&#34;&gt;다섯째, 실전 팁: 유지보수 및 문제 해결
&lt;/h2&gt;&lt;p&gt;이들의 밀접한 관계를 파악하면 일상 유지 보수 및 문제 해결에 대한 절차가 갖춰진다&lt;/p&gt;
&lt;h3 id=&#34;디스크-공간-관리&#34;&gt;디스크 공간 관리
&lt;/h3&gt;&lt;p&gt;ESP 파티션 공간을 정기적으로 확인하여 과도한 부팅 항목 관련 소프트웨어 설치로 인한 공간 부족 문제를 예방하고, 시스템 시작에 영향을 미치지 않도록 합니다. GPT 파티션 내 데이터 파티션의 경우, 합리적인 저장 공간 계획을 세우고 불필요한 파일을 즉시 정리하여 단일 파티션이 가득 차서 시스템 운영에 영향을 미치는 것을 방지합니다.&lt;/p&gt;
&lt;h3 id=&#34;문제-해결-시작&#34;&gt;문제 해결 시작
&lt;/h3&gt;&lt;p&gt;시스템 부팅 실패 시, 먼저 ESP 파티션 손상 또는 파일 누락 여부를 확인하십시오. UEFI 펌웨어 내장 복구 도구나 Windows 설치 미디어를 이용한 복구 환경에서 ESP 파티션의 부트 파일을 재구성할 수 있습니다. GPT 파티션 테이블 오류가 의심되는 경우, 전문 디스크 도구(DiskGenius 등)를 사용하여 파티션 테이블 무결성을 확인하고 백업된 파티션 정보를 활용하여 분실된 파티션을 복구하십시오.&lt;/p&gt;
&lt;p&gt;ESP 파티션, GPT 파티션 테이블, 그리고 Windows 운영체제는 마치 정밀하게 협력하는 팀처럼 각자의 전문성을 발휘하여 안정적이고 효율적인 컴퓨터 사용 환경을 구축합니다. 이들을 깊이 이해하면 시스템 설치 및 유지 보수 시 능숙하게 대처할 수 있을 뿐만 아니라, 컴퓨터의 근본적인 작동 원리를 파악하고 디지털 세계를 자유롭게 탐험할 수 있습니다. 동시에 MBR 파티션 테이블의 흥망성쇠를 되돌아보면 기술 발전의 힘에 감탄하며, 저장 기술이 끊임없이 진보하여 증가하는 데이터 저장 요구에 부응해 온 역사를 깨닫게 됩니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>GCC, GLIBC 및 C&#43;&#43; 프로그램 호환성 문제 심층 이해</title>
        <link>https://blog.ttf248.life/ko/p/deep-understanding-gcc-glibc-cpp-compatibility-issues/</link>
        <pubDate>Mon, 06 Jan 2025 19:51:16 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/deep-understanding-gcc-glibc-cpp-compatibility-issues/</guid>
        <description>&lt;p&gt;C++ 개발 분야에서 GCC와 GLIBC는 피할 수 없는 핵심 요소이며, 프로그램 출시 후 호환성 문제는 개발자를 자주 괴롭힌다. 본 논문에서는 이들의 본질을 심층적으로 분석하고, 호환성 문제의 근원과 대응 전략을 탐구한다.&lt;/p&gt;
&lt;h2 id=&#34;일-gcc-강력한-컴파일러-기반&#34;&gt;일. GCC: 강력한 컴파일러 기반
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定义与功能&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GCC는 GNU 컴파일러 컬렉션으로, GNU 프로젝트에서 개발한 오픈 소스 컴파일러 모음입니다. 이는 단순한 컴파일러가 아닌, C, C++, Objective-C, Fortran, Ada, Go 등 다양한 주요 프로그래밍 언어를 지원하며, 여러 언어 간의 통합 개발을 위한 원스톱 솔루션을 제공합니다.&lt;/li&gt;
&lt;li&gt;C++를 예로 들면, GCC는 클래스, 템플릿, 함수 오버로딩과 같은 복잡한 특징을 포함하는 소스 파일을 C++의 엄격한 문법 및 의미 규칙에 따라 분석하여 하위 레벨 기계가 이해하고 실행할 수 있는 명령어 시퀀스로 변환합니다. 이 과정은 어휘 분석, 구문 분석, 의미 분석, 최적화 및 코드 생성과 같은 여러 정교한 단계를 거칩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;编译流程详解&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GCC는 먼저 소스 파일을 전처리합니다. 이 과정에서 모든 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;, &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt;, &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;, &lt;strong&gt;INLINE_CODE_3&lt;/strong&gt;, &lt;strong&gt;INLINE_CODE_4&lt;/strong&gt;, &lt;code&gt;PI&lt;/code&gt;, __INLINE_CODE_6__을 처리하고, 전처리 후 소스 파일은 초기 “확장”됩니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编译阶段&lt;/strong&gt;: 전처리된 파일은 컴파일 단계에 진입하며, GCC는 C++ 언어 표준에 따라 소스 파일을 어셈블리 언어 코드로 변환합니다. 클래스 상속, 다형성 구현의 정확성, 함수 호출 인자 일치 여부 등 코드 구조를 꼼꼼히 검사하고, 문법 및 의미 규칙에 위배되는 오류가 발견되면 즉시 에러를 발생시켜 컴파일을 중단합니다. 예를 들어, 함수 선언과 정의의 인자 목록이 불일치하는 경우, GCC는 문제 지점을 정확하게 지적합니다.&lt;/li&gt;
&lt;li&gt;어셈블러는 이전 단계에서 생성된 어셈블리 코드를 기계어로 변환하여 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 확장자를 가진 목적 파일을 생성합니다. 이러한 목적 파일에는 기계가 직접 실행할 수 있는 이진 명령어가 포함되지만, 일반적으로 완전한 프로그램은 여러 모듈로 구성되어 있으며 각 모듈 간의 함수 및 변수 참조 관계는 아직 해결되지 않았기 때문에 독립적으로 실행될 수 없습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链接阶段&lt;/strong&gt;: 실행 파일 생성의 마지막 단계입니다. 링커는 여러 오브젝트 파일과 필요한 라이브러리 파일(정적 또는 동적 라이브러리)을 통합합니다. 예를 들어, C++ 표준 템플릿 라이브러리의 컨테이너 클래스를 사용할 때 링크 시 해당 라이브러리 구현 코드를 찾아 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;、&lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 등 컨테이너 기능을 올바르게 호출할 수 있도록 보장하여 완전한 실행 파일을 생성합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;두-번째-glibc-c-프로그램-실행의-숨은-기반&#34;&gt;두 번째, GLIBC: C++ 프로그램 실행의 숨은 기반
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;本质与作用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GLIBC는 GNU C Library로, GNU 생태계에서 C 표준 라이브러리를 구체적으로 구현한 것입니다. 이름에 C가 강조되어 있지만, C++ 프로그램 역시 C의 기본 부분을 상속받기 때문에 GLIBC에 크게 의존합니다. 메모리 관리와 같은 방대한 기초 함수들을 제공하며, C++ 초기 개발 및 성능이 중요하고 간결함을 추구하는 환경에서 자주 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;与操作系统的协同&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;GLIBC는 운영체제와 응용 프로그램 간의 핵심적인 연결고리 역할을 합니다. C++ 프로그램이 파일을 열기 위해 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 함수를 사용하는 등 시스템 호출을 시작하면 GLIBC는 이 요청을 운영체제가 규정한 방식으로 캡슐화하여 커널에 전달하고, 커널 처리 후 결과를 응용 프로그램으로 반환합니다. 이를 통해 응용 프로그램은 파일 시스템, 네트워크, 프로세스 관리와 같은 다양한 시스템 리소스를 복잡한 시스템 호출 인터페이스 세부 사항을 몰라도 편리하게 사용할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;세-번째-c-프로그램-배포-후-호환성-문제-분석&#34;&gt;세 번째, C++ 프로그램 배포 후 호환성 문제 분석
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;GLIBC 版本差异引发的兼容困境&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;다양한 Linux 배포판은 종종 서로 다른 버전의 GLIBC를 탑재합니다. C++ 프로그램이 높은 버전의 GLIBC 환경에서 컴파일되면 새로운 기능이나 최적화된 함수 구현에 의존하게 될 수 있습니다. 예를 들어, 새로운 GLIBC 버전의 메모리 할당 알고리즘 개선을 활용하여 성능을 향상시키는 경우가 있습니다. 이러한 프로그램이 낮은 버전의 GLIBC 시스템으로 이식될 경우 해당 기능을 찾을 수 없거나(낮은 버전에서 도입되지 않았기 때문입니다) 함수 동작에 이상이 발생할 수 있으며(구현 로직이 새 버전과 차이가 있기 때문입니다), 이는 프로그램 충돌이나 오류를 유발할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;编译器差异导致的兼容性隐患&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;비록 모두 GCC 컴파일러를 사용하더라도, 서로 다른 버전의 GCC는 코드 생성, 표준 라이브러리 지원 및 C++ 기능 구현 방식에 차이가 있습니다. 최신 GCC 버전은 C++20과 같은 최신 표준의 새로운 기능(예: 모듈, 코루틴 등)을 완벽하게 지원할 수 있지만, 이러한 최첨단 기능을 사용하는 프로그램이 구버전 GCC에서 컴파일하면 컴파일러가 새로운 문법 구조를 인식하지 못해 오류가 발생합니다. 심지어 문법 오류가 없더라도, 각 GCC 버전별 최적화 전략이 다르기 때문에 생성되는 기계 코드의 실행 효율성 및 메모리 사용량에 큰 차이가 있을 수 있으며, 성능이 중요한 환경에서는 프로그램의 동작 양상이 크게 달라질 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;系统架构差异带来的挑战&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;C++ 프로그램은 x86, ARM, PowerPC 등 다양한 하드웨어 시스템 아키텍처에서 실행될 수 있습니다. 각 아키텍처는 고유한 명령어 집합, 메모리 레이아웃 및 데이터 정렬 요구 사항을 가지고 있습니다. 예를 들어 데이터 정렬의 경우, x86 아키텍처에서 정상적으로 작동하는 구조체 데이터 저장 방식이 ARM 아키텍처에서는 정렬 규칙이 다르기 때문에 메모리 접근 이상을 일으켜 프로그램 오류를 유발할 수 있습니다. 또한 GCC는 서로 다른 아키텍처로 컴파일될 때 생성되는 기계 코드의 차이가 매우 크며, 프로그램에 하드 코딩된 아키텍처 관련 명령어 또는 가정이 있는 경우, 여러 아키텍처에서 실행 시 빈번한 장애가 발생합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;네-가지-호환성-문제-대응-전략&#34;&gt;네 가지, 호환성 문제 대응 전략
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;静态链接库的运用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;정적 링크 라이브러리 사용을 고려해 볼 수 있습니다. 프로그램이 필요로 하는 GLIBC와 같은 라이브러리 코드를 실행 파일에 직접 패키징하는 방식입니다. 이렇게 하면 프로그램 실행 시 대상 시스템의 특정 GLIBC 버전에 의존하지 않으므로, GLIBC 버전 불일치로 인한 문제를 효과적으로 피할 수 있습니다. 하지만 정적 링크는 실행 파일 크기를 크게 증가시키므로 저장 공간이 제한적인 환경에서는 장단점을 신중하게 고려해야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;容器化部署&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Docker와 같은 컨테이너화 기술을 활용하여 C++ 프로그램과 필요한 런타임 환경(특정 버전의 GCC, GLIBC 등)을 독립적인 컨테이너 내에 패키징합니다. 컨테이너 내부에서는 개발 환경과의 일관성을 유지하므로 어떤 기본 운영체제로 배포하든 프로그램이 예상대로 실행되며, 이로써 다양한 환경으로의 배포 복잡성이 크게 줄어듭니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;兼容性测试与持续集成&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;다양한 GLIBC 버전, GCC 버전 및 일반적인 시스템 아키텍처를 포괄하는 종합적인 호환성 테스트 체계를 구축한다. 프로그램 개발 과정에서 지속적 통합 도구를 활용하여 다양한 환경에서 정기적으로 자동화된 테스트를 실시하고, 호환성 문제가 발견되면 즉시 수정하여 잠재적인 위험을 초기 단계에서 제거함으로써 프로그램 출시 후 안정성을 확보한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;결론적으로, GCC와 GLIBC의 작동 방식을 깊이 이해하고, C++ 프로그램 호환성 문제의 근원을 정확히 파악하며, 유연하게 대응 전략을 활용하는 것은 모든 C++ 개발자가 안정적이고 플랫폼 간 애플리케이션을 구축하기 위한 필수적인 기술입니다. 그래야만 우리의 C++ 작품은 다양한 기술 생태계에서 자유롭게 이동할 수 있습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Windows에 내장된 디스크 정리 도구: 저장 공간</title>
        <link>https://blog.ttf248.life/ko/p/windows-disk-cleanup-storage/</link>
        <pubDate>Mon, 06 Jan 2025 19:29:45 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/windows-disk-cleanup-storage/</guid>
        <description>&lt;p&gt;어떤 버전부터인지는 정확히 기억나지 않지만, __INLINE_CODE_0__에서 디스크 정리 도구가 크게 개선되어 훨씬 더 스마트해졌습니다&lt;/p&gt;
&lt;p&gt;중요한 것은 공식 도구이기 때문에 파일 삭제 오류가 없고, 광고나 팝업창, 백그라운드 프로세스 등 불필요한 기능이 전혀 없습니다&lt;/p&gt;
&lt;p&gt;디스크 정리 도구를 열려면 &lt;code&gt;Windows 11&lt;/code&gt;中，可以通过__INLINE_CODE_1__-&lt;code&gt;系统&lt;/code&gt;-&lt;strong&gt;INLINE_CODE_3&lt;/strong&gt;-__INLINE_CODE_4__에서 실행하세요&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/windows-disk-cleanup-storage/20250106194453.png&#34;
	width=&#34;1041&#34;
	height=&#34;775&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;存储界面&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;322px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;일반 사용자는 __INLINE_CODE_0__을 선택하면 되며, 시스템은 사용 상황에 따라 몇 가지 제안을 제공합니다&lt;/p&gt;
&lt;p&gt;개발자로서 저의 디스크에는 임시 파일이 많기 때문에 &lt;code&gt;临时文件&lt;/code&gt;，里面包含了很多临时文件，比如__INLINE_CODE_1__的临时文件，&lt;strong&gt;INLINE_CODE_2&lt;/strong&gt; 임시 파일을 선택했습니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/windows-disk-cleanup-storage/Snipaste_2024-12-19_13-39-51.png&#34;
	width=&#34;465&#34;
	height=&#34;980&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;临时文件&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;47&#34;
		data-flex-basis=&#34;113px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>도커 국내 이미지 프록시 만료</title>
        <link>https://blog.ttf248.life/ko/p/docker-domestic-mirror-failure/</link>
        <pubDate>Sat, 04 Jan 2025 18:29:25 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/docker-domestic-mirror-failure/</guid>
        <description>&lt;p&gt;국내 서버에 도커를 배포했는데, 회사에서 이미지 센터를 제공하지 않으므로 개발자는 먼저 국내 이미지 가속 주소를 설정해야 합니다. 오늘 우연히 서버 한 대가 있고 이미지 가속 주소를 설정했지만 이미지를 가져오려고 하면 계속 실패합니다.&lt;/p&gt;
&lt;p&gt;오류 정보: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;20250106 时隔两天，所有的服务器都恢复了，这事居然不上热搜，国内所有的镜像代理都挂了&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;오류-해결-및-복구-시도&#34;&gt;오류 해결 및 복구 시도
&lt;/h2&gt;&lt;p&gt;처음 다른 미러 주소로 전환해 문제를 해결하려 했지만, 기대와 달리 문제는 여전히 발생했습니다&lt;/p&gt;
&lt;p&gt;곧바로 로컬 DNS 설정을 수정하여 네트워크 해상도 수준에서 돌파구를 찾으려 했으나, 여러 차례 디버깅했음에도 불구하고 문제는 여전히 발생했다&lt;/p&gt;
&lt;p&gt;현재 로컬 네트워크 안정성에 의문이 제기되자, 즉시 휴대폰 핫스팟으로 전환하여 가능한 로컬 네트워크 오류를 우회하려 했으나, 결과는 낙담스러웠고 문제 해결의 여지는 보이지 않았다&lt;/p&gt;
&lt;h2 id=&#34;문제-확산&#34;&gt;문제 확산
&lt;/h2&gt;&lt;p&gt;현재 &lt;strong&gt;几台部署于国内的服务器&lt;/strong&gt;이 남아 있으며, 모두 Docker 환경이 설치되어 있습니다. 이러한 서버에서 이미지를 가져오려고 시도했지만, 예상치 못한 문제로 인해 단 한 대의 장비에서도 성공적으로 가져올 수 없었습니다. 오류 메시지는 동일했으며, 이는 문제가 특정 장비에 국한된 것이 아님을 나타냅니다.&lt;/p&gt;
&lt;p&gt;더 자세히 조사해 보니 미러 에이전트가 갑자기 작동하지 않았습니다. 다행히 긴박한 순간에 해외 머신으로 빠르게 전환하여 시도했고, 미러 이미지를 가져오는 데 문제가 해결되어 정상적으로 복구되었습니다. 이는 문제의 원인이 국내 네트워크 링크나 관련 설정에 있을 가능성이 높다는 것을 의미합니다.&lt;/p&gt;
&lt;h2 id=&#34;전략-조정-우회-해결&#34;&gt;전략 조정: 우회 해결
&lt;/h2&gt;&lt;p&gt;국내 직접 이미지 가져오기가 여러 제약으로 인해 어려워지고 해외 이미지는 정상적으로 접근 가능한 상황이므로, 프로젝트를 신속히 진행하기 위해 우회 전략을 채택합니다. 먼저 해외 서버로 전환하여 필요한 이미지를 가져온 후 국내 이미지 저장소에 푸시하여 “데이터 브릿지”를 구축할 예정입니다.&lt;/p&gt;
&lt;p&gt;동시에 Dockerfile 파일을 수정하여 이미지 주소를 국내 환경에 적합한 주소로 변경하고, 다시 이미지를 빌드하여 최종적으로 성공적으로 배포했습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>야만 자본주의 시대의 종말: 리그 오브 레전드 e스포츠 시대의 종료</title>
        <link>https://blog.ttf248.life/ko/p/end-of-era-league-of-legends-esports/</link>
        <pubDate>Tue, 31 Dec 2024 07:19:39 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/end-of-era-league-of-legends-esports/</guid>
        <description>&lt;p&gt;e-스포츠 산업은 지난 10여 년간 급속한 성장을 거듭하며 전 세계적인 문화 현상으로 자리 잡았다. 특히 리그 오브 레전드(League of Legends, 이하 LOL)를 대표로 하는 MOBA 게임은 플레이어에게 경쟁의 즐거움을 제공했을 뿐만 아니라 자본에 강력한 동력을 불어넣어 일련의 e-스포츠 플랫폼과 대회 발전을 촉진했다. 하지만 자본 유입과 팬 엔터테인먼트 산업의 부상과 함께 이러한 상황은 점차 쇠퇴기로 접어들었다. 판다TV의 부흥과 몰락, 그리고 도유와 후야의 경쟁은 “야만적인 자본주의 시대”의 종식을 알렸으며, e-스포츠 산업의 천지성조(天時地利人和) 또한 변화를 맞이하기 시작했다.&lt;/p&gt;
&lt;h2 id=&#34;제1장-e스포츠의-부상과-자본-유입&#34;&gt;제1장: e스포츠의 부상과 자본 유입
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.1 初期的电子竞技：从草根到职业化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;초기 e스포츠 산업은 특히 중국 시장에서 비교적 소규모로 시작했지만, 많은 플레이어들이 게임에 대한 열정으로 스타크래프트, 도타 등 게임의 경쟁에 참여했습니다. 하지만 진정한 e스포츠의 부상은 리그 오브 레전드의 출시와 홍보를 통해 이루어졌습니다. 2011년 리그 오브 레전드가 중국 시장에 공식적으로 진출한 이후, e스포츠는 점차 소규모 커뮤니티에서 대중 문화의 일부로 발전했습니다. 특히 2013년부터 LPL(중국 프로 리그)이 점진적으로 형성되면서 리그 오브 레전드는 중국 e스포츠 산업의 핵심으로 자리 잡았습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.2 资本疯狂涌入：熊猫TV与电竞直播平台的兴起&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2015년은 중국 e스포츠 업계의 분수령점이었다. 자본의 유입으로 e스포츠는 단순한 경기 대회를 넘어 더욱 거대한 산업망을 형성하게 되었다. 판다TV는 대표적인 사례로서 자본 과잉의 산물로 등장했다. 왕스충(판다TV 창립자 중 한 명)의 투자로 빠르게 부상한 판다TV는 혁신적인 콘텐츠와 막대한 투자를 통해 많은 시청자와 사용자를 끌어모았다. 하지만 이는 자본이 “야만적”으로 유입되는 전형적인 예시였다. 자본은 시장을 미친 듯이 추격할 때 인내심과 장기적인 안목이 부족한 경우가 많다. 판다TV는 자금과 인력 투자를 통해 단기간에 일정한 성과를 거두었지만, 관리 문제와 자본에 대한 과도한 의존으로 인해 결국 2019년에 파산했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.3 直播平台竞争：斗鱼与虎牙的“资本大战”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;판다TV의 몰락은 e스포츠 스트리밍 업계의 쇠퇴를 가져오지 않았고, 오히려 두유와 후야 등 플랫폼의 부상을 촉진했다. 두유와 후야는 빠르게 e스포츠 업계의 선두 주자로 자리매김했으며, 경쟁 또한 더욱 치열해지고 있다. 두유는 초기 리그 오브 레전드 프로 리그 중계와 최고급 스트리머 영입을 통해 e스포츠 스트리밍의 벤치마크가 되었으며, 후야는 e스포츠 투자 확대 및 자체 플랫폼 다각화 전략으로 두유와의 격차를 점차 좁혀나가고 있다.&lt;/p&gt;
&lt;p&gt;이 과정에서 자본은 다시 한번 큰 역할을 했다. 2018년 두유(Douyu)가 성공적으로 상장했고, 후야(Huya) 또한 같은 해에 IPO를 진행했다. 자본의 빠른 유입은 업계의 높은 집중도를 가져왔고, 동시에 플랫폼 간의 방송인 및 콘텐츠 권한을 둘러싼 치열한 경쟁을 야기하여 “자본 전쟁”이라는 양상을 띠게 되었다.&lt;/p&gt;
&lt;h2 id=&#34;제2장-팬-엔터테인먼트화와-e스포츠의-융합&#34;&gt;제2장: 팬 엔터테인먼트화와 e스포츠의 융합
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;2.1 泛娱乐化浪潮：资金流向多元化娱乐项目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;자본의 e스포츠 산업에 대한 집중 투자와 함께, e스포츠 플랫폼 콘텐츠는 점차 엔터테인먼트화되고 있다. e스포츠 진행자는 경기 해설 및 중계에 머무르지 않고 노래, 춤, 실시간 소통 등 다양한 엔터테인먼트 형태로 확장하고 있으며, 플랫폼의 콘텐츠가 더욱 풍부해져 e스포츠를 중심으로 다양한 엔터테인먼트 요소를 포함하는 콘텐츠 생태계를 형성하고 있다.&lt;/p&gt;
&lt;p&gt;그러나 팬덤 문화 확산은 문제점을 야기하기도 했다—이전에는 몰두했던 게임 문화가 주변화되고, 오락 중심의 경향으로 대체되었다. 이러한 흐름 속에서 일부 기존 e스포츠 문화를 열정적으로 즐기던 관중들은 이탈감을 느끼고 있으며, 자본 또한 다른 엔터테인먼트 분야에 더 많은 관심을 돌리고 있다. 과도한 자본 유입과 이윤 추구는 e스포츠 산업의 본질을 흐리게 하고, 경쟁 중심이었던 핵심 가치관이 약화되고 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.2 泛娱乐行业的崛起：资本的撤退与转型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;단편 동영상 플랫폼, 라이브 방송 플랫폼 및 연예계 등 다양한 엔터테인먼트 산업의 부상과 함께 자본이 점차 e스포츠에서 더 광범위한 엔터테인먼트 콘텐츠로 자금을 돌리고 있습니다. 이 과정에서 텐센트, 알리바바, 바이트댄스 등 거대 기업들도 e스포츠 프로젝트에만 의존하는 것이 아니라 영화, 음악, 단편 동영상 등의 분야에 대한 투자를 확대하고 있습니다. 특히 바이트댄스의 부상은 틱톡과 같은 단편 동영상 플랫폼의 폭발적인 성장을 통해 e스포츠의 위상을 다른 엔터테인먼트 콘텐츠로 가리고 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;제3장-롤의-청황불접-시대적-특혜-약화&#34;&gt;제3장: 롤의 “청황불접”: 시대적 특혜 약화
&lt;/h2&gt;&lt;p&gt;2011년 《리그 오브 레전드》가 중국 시장에 진입한 이후, 이는 거의 중국 e스포츠 업계의 대명사가 되었으며 수많은 프로 선수, 팀 및 대회와 더불어 거대한 e스포츠 산업 생태계를 구축했습니다. 하지만 10여 년이 지난 지금, 중국 e스포츠를 선도했던 《리그 오브 레전드》는 “세대교체” 단계에 접어들고 있으며, 특히 최근 몇 년간 영향력이 점차 감소하고 뚜렷한 쇠퇴의 조짐을 보이고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1 玩家群体的“断层”&lt;/strong&gt;
가장 뚜렷한 변화는 플레이어층의 단층이다. 초기 e스포츠의 빠른 성장은 대규모 청소년 게이머들의 지지 덕분이었고, 그들 중 많은 이들이 리그 오브 레전드를 통해 프로게이머나 관중이 되었다. 그 세대는 ‘시대적 특혜’ 속에서 성장하여 LOL이 선사하는 경쟁 매력에 몰두하며 업계의 빠른 팽창을 이끌었다. 하지만 시간이 흐르면서, 이들 플레이어들은 점차 성장하여 사회로 진출하고 다른 삶과 직업으로 방향을 전환했다. 동시에 새로운 세대의 젊은 게이머들의 관심은 과거만큼 뜨겁지 않고, e스포츠의 관중층은 뚜렷한 연령 편향과 흥미 저하를 겪고 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2 游戏内容的“疲软”&lt;/strong&gt;
《리그 오브 레전드》는 여러 차례 업데이트와 개편을 거쳤음에도 불구하고 여전히 경쟁적 매력을 유지하고 있지만, 게임 자체의 콘텐츠 혁신은 다소 지쳐 보입니다. 매년 출시되는 버전 업데이트, 영웅 밸런스 조정 및 새로운 플레이 방식 도입은 근본적으로 플레이어들의 신선함에 대한 요구를 충족시키지 못하는 듯합니다. 동시에 MOBA 장르 시장이 포화 상태가 되고, 다른 장르의 게임(예: 《왕자영웅》、《평화전투》)이 급부상하며 많은 기존 《리그 오브 레전드》 플레이어를 흡수했습니다. 이러한 경쟁 구도는 《리그 오브 레전드》가 “추격자” 역할을 벗어나지 못하게 합니다.&lt;/p&gt;
&lt;h2 id=&#34;결론-e스포츠-산업의-미래는-어떠한-방향으로-나아갈까&#34;&gt;결론: e스포츠 산업의 미래는 어떠한 방향으로 나아갈까?
&lt;/h2&gt;&lt;p&gt;e-스포츠 산업은 마치 허공에서 솟아오른 고층 건물과 같습니다. 과도한 자금이 인터넷 업계 내에서 방황하며 다음 기회를 찾고 있는데, e-스포츠 산업 또한 그 목표 중 하나가 되었습니다. 막대한 인구를 바탕으로 e-스포츠 산업은 짧은 기간 안에 엄청난 성공을 거두었지만, 이 성공은 굳건한 토대 위에 세워진 것이 아닙니다. 자본의 과도한 유입, 인재 부족, 그리고 지쳐 보이는 게임 콘텐츠는 e-스포츠 산업의 건전한 발전을 가로막고 있습니다.&lt;/p&gt;
&lt;p&gt;대학교 시절 이전에는 게임을 많이 즐기지 않았고, 리그 오브 레전드는 한 세대를 함께 성장시킨 게임이라고 할 수 있습니다. 많은 결승전을 봤는데, 외부인으로서 중한 선수들을 비교해보면 특히 Faker를 비롯하여 국내 선수들은 큰 대회 기간 동안 항상 주저하는 듯한 느낌을 받습니다. 선수들의 심리적 압박이 크다는 것은 알지만, 이 업계가 10년 이상 발전했으니 선수들의 정신 문제는 팀에서 중요하게 다뤄야 하지만 그렇지 못하고 있습니다. 여전히 국내는 선수 개인의 재능에 의존하는 방식입니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>게임에서 가족으로: 우리는 왜 성장하면서 가상 세계를 떠나는 걸까요?</title>
        <link>https://blog.ttf248.life/ko/p/from-games-to-family-why-we-drift-away-from-virtual-worlds/</link>
        <pubDate>Tue, 31 Dec 2024 07:11:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/from-games-to-family-why-we-drift-away-from-virtual-worlds/</guid>
        <description>&lt;p&gt;어릴 때 몰래 집 텔레비전으로 탱크 대전, 슈퍼 마리오, 컨트라 같은 게임을 했던 때가 가장 즐거웠나, 아니면 조카랑 몰래 집 컴퓨터로 에이지 오브 엠파이어를 했었나, 아니면 대학에서 동기들과 데몬즈 콜, 리그 오브 레전드를 했을 때였나?&lt;/p&gt;
&lt;p&gt;어릴 때는 삶의 고민 없이, 놀 때에는 온 마음을 다해 빠져들었는데, 그 몰입감이 자라서 다시는 찾을 수 없는 것 같아&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;시대의 변화와 사회의 발전과 함께, 예전에는 활발하게 활동하던 가상 세계 속 우리들이 점차 깨닫게 되었다. 한때 즐거움과 경쟁으로 가득했던 게임 플랫폼이 우리 삶에서 멀어지고 있다는 것을. 게임 소셜 링크의 단절은 플레이어들의 이탈을 동반하는데, 이는 기술 발전과 게임 자체의 변화뿐만 아니라, 우리 삶의 중심이 이동했기 때문이다. 나이가 들어 결혼과 출산을 하며, 삶의 주류는 개인적인 즐거움에서 가족 책임으로 서서히 옮겨가고 있다. 오늘, 이러한 추세 뒤에 숨겨진 근본적인 이유에 대해 이야기해 보자.&lt;/p&gt;
&lt;h2 id=&#34;게임-소셜의-사라짐-가상-세계와-현실-세계의-줄다리기&#34;&gt;게임 소셜의 사라짐: 가상 세계와 현실 세계의 줄다리기
&lt;/h2&gt;&lt;p&gt;많은 사람들의 청춘 시절, 게임은 단순한 오락이 아닌 소통의 방식이었다. 인기 멀티플레이어 온라인 게임은 게임 내 도전과 경쟁을 제공했을 뿐만 아니라 전 세계 플레이어를 연결하고 가상 커뮤니티를 구축했다. 그 시절 친구들과 함께 던전을 돌고 팀을 이루어 PK하는 것은 일상의 일부였으며, 늦은 밤 음성 채팅하며 서로의 일상을 공유했던 시간들은 우리 기억 속에 남았다.&lt;/p&gt;
&lt;p&gt;시간이 흐르면서, 점점 더 많은 플레이어들이 이러한 가상 소셜 경험이 영원한 매력을 가지지 않는다는 것을 깨달았습니다. 게임 업데이트와 다양한 소셜 플랫폼의 등장으로 인해 플레이어들은 점차 게임 밖에서 더 많은 상호작용 방식을 찾게 되었습니다. 게임 속 친구들은 시야에서 사라지고, 활발하게 활동하던 게임 내 소셜 연결고리 또한 보이지 않게 끊어졌습니다.&lt;/p&gt;
&lt;h2 id=&#34;게임과-책임-성인-후반기-삶의-중심-이동&#34;&gt;게임과 책임: 성인 후반기 삶의 중심 이동
&lt;/h2&gt;&lt;p&gt;어른이 되면서 삶의 책임감이 점차 늘어난다. 많은 젊은이들이 예전에 게임에 많은 시간을 쏟았지만, 직장 생활을 시작하거나 파트너와 함께 살거나 가정을 꾸리면서 이전에는 필수적으로 여겨졌던 오락 활동들은 현실적인 책임감에 밀려나기 시작한다. 결혼과 출산, 부모님 간병까지 삶의 중요한 책임들로 인해 에너지와 시간을 선택해야 할 순간이 온다.&lt;/p&gt;
&lt;p&gt;게임은 옛말이 되었고, 그 자리를 가족 중심의 우선순위가 대신했다. 예전 게임에서 ‘분투’하던 젊은이들은 현실에서의 삶이 가장 중요한 과제임을 깨닫기 시작했고, 특히 아이를 갖게 된 후에는 삶의 중심이 완전히 가정으로 쏠리면서 게임은 서서히 주변으로 밀려났다.&lt;/p&gt;
&lt;h2 id=&#34;게임부터-가족까지-삶의-변화는-우리의-여가-방식에-어떻게-영향을-미치는가&#34;&gt;게임부터 가족까지: 삶의 변화는 우리의 여가 방식에 어떻게 영향을 미치는가?
&lt;/h2&gt;&lt;p&gt;우리 삶의 여정에서 가족은 가장 중요한 부분 중 하나입니다. 하지만 가정 생활에 들어가면 시간과 에너지 분배는 더욱 구체적이고 제한됩니다. 자녀를 돌보고 배우자를 함께하며 많은 젊은 부모들은 더 이상 그들이 열정을 쏟았던 게임에 충분한 시간을 할애하기 어렵다는 것을 깨닫습니다. 심지어 때로는 게임 업데이트나 새로운 콘텐츠를 찾아다니는 일조차 하지 않습니다. 점차적으로 소셜 미디어와 오프라인에서의 친척 및 친구들과의 교류가 더 많은 사람들의 주요 선택이 되었습니다.&lt;/p&gt;
&lt;p&gt;우리가 오락 활동을 완전히 포기하는 것이 아니라, 현재 생활 단계에 더 적합한 방식을 선택했다는 의미입니다. 게임으로 관계를 유지하던 친구들이 삶의 궤도가 달라지면서 가족 모임, 식사, 단거리 여행 등 다른 방식으로 소통을 이어갈 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;가상-세계와의-작별-우리는-이-변화를-어떻게-바라볼까&#34;&gt;가상 세계와의 작별: 우리는 이 변화를 어떻게 바라볼까?
&lt;/h2&gt;&lt;p&gt;게임에 푹 빠져 있던 많은 이들에게 게임과의 소통을 마치는 일은 쉽지 않다. 그만큼 우리에게 즐거움과 성취감을 선사했던 가상 세계는 이미 우리의 기억 일부가 되었기 때문이다. 하지만 작별은 완전히 끊어내는 것이 아니라, 삶의 변화에 따라 다른 선택을 하며 현실에서의 역할을 조화시키는 과정이다. 나이가 들어감에 우리는 혈기왕성한 청춘에서 책임감 있는 성인으로 성장하고, 게임은 여전히 가치를 지니지만 더 이상 삶의 주류가 될 수 없다.&lt;/p&gt;
&lt;p&gt;사실 이 변화는 인간의 적응력의 한 측면을 보여주는 것이기도 합니다. 즉, 우리는 각 단계에 따라 관심사와 생활 방식을 조절할 수 있습니다. 책임과 가족이 삶의 중심이 되면 게임이나 소셜 활동은 더 이상 우선순위가 아니지만 가끔씩 즐기는 여가 활동이 됩니다.&lt;/p&gt;
&lt;h2 id=&#34;미래의-게임-어쩌면-또-다른-소속감-물결이-찾아올-것이다&#34;&gt;미래의 게임: 어쩌면 또 다른 “소속감” 물결이 찾아올 것이다
&lt;/h2&gt;&lt;p&gt;물론, 사회 발전과 기술의 진보에 따라 게임의 형태와 내용도 끊임없이 진화하고 있습니다. 예를 들어, 현재의 멀티플레이 온라인 게임은 더욱 가볍고 유연한 방식으로 발전하기 시작했으며, 심지어 가족 상호작용과 부모-자녀 관계를 중시하는 디자인의 게임도 있습니다. 미래에는 아마도 더 많은 게임 형태가 등장하여 가정 생활에 더 잘 녹아들고 플레이어에게 더욱 건강하고 균형 잡힌 소셜 경험을 제공할 것입니다.&lt;/p&gt;
&lt;p&gt;많은 사람들이 &amp;ldquo;어릴 때의 놀이&amp;quot;를 이야기할 때 여전히 그리움과 열정으로 가득하듯이, 우리 역시 어느 순간 다시 예전의 게임을 집어 들고 새로운 이해와 깨달음 속에서 그 가상 세계로 돌아갈 수 있을 것이다&lt;/p&gt;
&lt;h2 id=&#34;변화는-있지만-사랑은-변치-않는다&#34;&gt;변화는 있지만, 사랑은 변치 않는다
&lt;/h2&gt;&lt;p&gt;게임이든 가족이든, 삶의 변화는 언제나 우리와 함께 성장합니다. 그 과정에서 우리는 비록 가상 세계가 무한한 즐거움과 자극을 주지만 결국 현실로 돌아오고, 가장 따뜻한 곳—가족으로 돌아온다는 것을 깨닫습니다. 게임을 떠나는 것에 아쉬워할 필요는 없습니다. 삶의 각 단계마다 고유한 의미가 있으며, 이러한 변화들이야말로 우리를 더욱 완전하게 만드는 부분입니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>홍콩 증권 거래소, 가상화폐 발전사</title>
        <link>https://blog.ttf248.life/ko/p/hong-kong-stock-exchange-virtual-currency-history/</link>
        <pubDate>Tue, 31 Dec 2024 07:00:28 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/hong-kong-stock-exchange-virtual-currency-history/</guid>
        <description>&lt;p&gt;트럼프의 재선은 가상화폐를 다시 대중의 시야에 가져왔으며, 홍콩 증권 거래소 역시 관련 사업을 적극적으로 추진하고 있습니다. 여기 홍콩 증권 거래소의 가상화폐 발전 역사를 간략하게 기록합니다.&lt;/p&gt;
&lt;p&gt;관련 계약 목록 세부 자료를 살펴보니, 처음 도입된 것은 현물이 아닌 선물이었고 이는 합리적입니다. 왜냐하면 선물 시장의 유동성이 더 좋고 기관 투자자 유치가 더 쉽기 때문입니다. 이후 도입된 현물 ETF 역시 합리적입니다. 왜냐하면 ETF는 더 쉽게 받아들여지는 투자 도구이기 때문입니다.&lt;/p&gt;
&lt;h2 id=&#34;가상화폐-목록&#34;&gt;가상화폐 목록
&lt;/h2&gt;&lt;p&gt;홍콩 거래소의 시장 데이터에는 구분이 제공되지 않지만, 계약이 가상화폐인지 여부를 계약 이름으로 판단할 수 있습니다. 공식 웹사이트의 거래 목록에서는 해당 하위 범주 __INLINE_CODE_0__가 제공됩니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/Market-Data/Securities-Prices/Exchange-Traded-Products?sc_lang=en&amp;amp;asset=virtualasset&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2022년-12월-16일&#34;&gt;2022년 12월 16일
&lt;/h2&gt;&lt;h3 id=&#34;홍콩증권거래소-아시아-최초-암호화폐-etf-상장-환영&#34;&gt;홍콩증권거래소, 아시아 최초 암호화폐 ETF 상장 환영
&lt;/h3&gt;&lt;p&gt;홍콩거래소(香港交易及結算有限公司)는 오늘(금요일) 아시아 최초의 암호화폐 ETF 상장을 환영하며, 투자자들에게 더 많은 선택지를 제공하는 동시에 제품 생태계를 확장했습니다&lt;/p&gt;
&lt;p&gt;오늘 상장된 두 개의 새로운 ETF — 남방동영 비트코인 선물 ETF(주식 코드: 3066) 및 남방동영 이더리움 선물 ETF(주식 코드: 3068)는 남방동영 자산관리 유한회사가 관리하며, 각각 시카고 상품거래소(CME)에서 거래되는 표준화된 현물결제 비트코인 선물 계약과 이더리움 선물 계약을 추적합니다&lt;/p&gt;
&lt;p&gt;홍콩증권거래소 최고운영책임자 겸 시장공동주관 야오지아런은 “오늘 상장된 두 가지 암호화폐 ETF는 홍콩의 점차 풍부해지고 다변화되는 거래용 제품 생태계에 화려한 장식을 더했습니다. 이러한 신제품들은 아시아 투자자들이 처음으로 디지털 자산 투자를 할 수 있는 기회를 제공하며, 디지털 경제에 대한 우리의 관심과 시장 수요를 반영합니다. 앞으로 몇 달 안에 더 많은 테마 ETF와 디지털 자산 신제품을 맞이할 것으로 기대합니다.”&lt;/p&gt;
&lt;p&gt;ETF는 홍콩증권거래소의 가장 빠르게 성장하는 사업 중 하나이며, 2022년에도 제품 종류가 지속적으로 확장되어 더욱 다양해졌습니다. 이 기간 동안 최초의 메타버스 ETF, 최초의 탄소 선물 ETF 및 최초의 블록체인 ETF를 출시했으며, 처음으로 ETF를 홍콩-상하이 증시 연결에 포함했습니다.&lt;/p&gt;
&lt;p&gt;또한 홍콩증권거래소에서 거래되는 ETP(ETF 및 레버리지/인버스 상품 포함)의 올해 처음 11개월간 평균 일일 거래액은 118억 위안으로 작년 동기 대비 50% 증가했으며, 이는 투자자들의 ETP 선호도가 높아지고 있음을 반영한다. 2022년 11월 현재 홍콩증권거래소에 상장된 ETP는 총 168종목이며 시가총액은 3,735억 위안 규모다.&lt;/p&gt;
&lt;h2 id=&#34;2024년-4월-30일&#34;&gt;2024년 4월 30일
&lt;/h2&gt;&lt;h3 id=&#34;홍콩증권거래소-첫-번째-가상자산-현물-etf-상장-환영&#34;&gt;홍콩증권거래소, 첫 번째 가상자산 현물 ETF 상장 환영
&lt;/h3&gt;&lt;p&gt;홍콩거래소결산유한회사(홍콩증권거래소)는 오늘(화요일) 아시아 최초의 가상자산 현물 ETF 상장을 환영하며, 홍콩 시장의 상품 다양성을 확대하고 투자자에게 더 풍부한 선택지를 제공하여 아시아 선도적인 ETF 시장으로서 홍콩의 입지를 공고히 했다&lt;/p&gt;
&lt;p&gt;홍콩증권거래소 증권상품 개발 담당자 로버트 린은 “오늘 새로 상장되는 가상 자산 현물 ETF는 홍콩증권거래소의 다각화되고 활발한 ETF 시장 생태계를 풍요롭게 하고 투자자에게 새로운 자산군에 대한 투자 기회를 제공할 것이다. 1년 전 가상 자산 선물 ETF를 성공적으로 출시한 데 이어 아시아 최초의 가상 자산 현물 ETF는 홍콩증권거래소의 매매 상품 종류와 유동성을 더욱 향상시킬 것이다. 우리는 시장 참여자와 긴밀히 협력하여 국제적인 시장에 더 많은 신제품을 도입할 수 있기를 기대한다.”&lt;/p&gt;
&lt;p&gt;최초의 가상 자산 선물 ETF가 2022년에 상장된 이후 투자자들에게 큰 인기를 끌며 활발하게 거래되고 있습니다. 홍콩에 상장된 세 가지 가상 자산 선물 ETF의 일 평균 거래량은 2023년 890만 위안에서 2024년 첫 분기에는 51억 3천만 위안으로 증가했으며, 동시에 5억 2,900만 위안의 자금 유입을 이끌었습니다.&lt;/p&gt;
&lt;p&gt;증권 거래소에서 거래되는 상품(ETF, 레버리지 및 역상품 포함)은 홍콩 증권 거래소가 가장 빠르게 성장하는 시장 중 하나이며, 지난 한 해 동안 제품 종류가 지속적으로 증가했습니다. 2023년과 2024년 첫 분기에 새로 추가된 16개의 ETF 상품에는 아시아 태평양 지역 최초의 사우디아라비아 ETF와 홍콩 최초의 워런트 ETF가 포함되어 있으며, 현재 홍콩에 상장된 ETF는 총 179개입니다.&lt;/p&gt;
&lt;h2 id=&#34;2024년-10월-28일&#34;&gt;2024년 10월 28일
&lt;/h2&gt;&lt;h3 id=&#34;홍콩-거래소가-가상-자산-지수-시리즈를-출시할-예정입니다&#34;&gt;홍콩 거래소가 가상 자산 지수 시리즈를 출시할 예정입니다
&lt;/h3&gt;&lt;p&gt;홍콩거래소(Hong Kong Exchanges and Clearing Limited, HKEX)는 오늘(월요일) 2024년 11월 15일에 홍콩거래소 가상자산 지수 시리즈(지수 시리즈)를 출시할 예정이라고 발표했습니다. 이는 빠르게 성장하는 자산군인 가상자산에 대한 신뢰성 있는 기준 가격을 제공하고, 홍콩이 아시아의 주요 디지털 자산 허브로 발전하는 것을 지원합니다.&lt;/p&gt;
&lt;p&gt;이 지수 시리즈는 아시아 시간대의 비트코인 및 이더리움 가격에 대한 투명하고 신뢰할 수 있는 기준을 제공하며, 가상 자산의 글로벌 거래소 간 가격 차이를 해소하여 해당 자산에 대한 통일된 참조 가격을 목표로 합니다&lt;/p&gt;
&lt;p&gt;홍콩증권거래소 그룹 최고경영자 윌리스 천은 &amp;ldquo;우리는 홍콩증권거래소 가상 자산 지수 시리즈를 출시하여 이 빠르게 성장하는 자산 클래스에 대한 지역 수요를 충족하게 되어 기쁘다. 투명하고 신뢰할 수 있는 실시간 기준으로 투자자들이 현명한 투자 결정을 내리고, 가상 자산 생태계의 건전한 발전을 지원하며, 홍콩을 국제 금융 중심지로서의 위상을 공고히 하는 데 도움이 되기를 바란다.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;홍콩증권거래소는 이 지수 시리즈 출시를 통해 신흥 분야를 탐색하고, 홍콩 핀테크 발전을 지원하는 동시에 투자자에게 변화하는 시장 환경 속에서 중요한 기준 도구와 솔루션을 제공하고자 합니다&lt;/p&gt;
&lt;p&gt;암호화폐 지수 시리즈에는 비트코인 및 이더리움의 기준 지수와 환율이 포함될 예정이다&lt;/p&gt;
&lt;p&gt;비트코인 또는 이더리움의 24시간 거래량을 가중 평균하여 산출하고, 주요 암호화폐 거래소들의 시장 가격을 종합하여 계산되며, 즉시 달러로 표시됩니다. 참고 환율은 금융 상품 청산을 위해 설계되었으며 홍콩 시간 오후 4시에 매일 계산됩니다.&lt;/p&gt;
&lt;p&gt;이 지수 시리즈는 홍콩에서 개발되는 최초의 유럽연합 기준 규정(BMR)을 준수하는 가상 자산 지수 시리즈로, 영국에 등록된 기준 관리 기관과 가상 자산 데이터 및 지수 제공업체 CCData가 공동으로 관리하고 계산합니다&lt;/p&gt;
&lt;p&gt;홍콩특별행정구 정부는 2022년에 발표한 정책 성명에서 홍콩 내 활력 넘치는 가상 자산 산업과 생태계를 육성하고자 한다고 밝혔습니다. 홍콩증권거래소의 가상 자산 지수 시리즈 출시를 통해 실시간 데이터와 아시아 시간대의 일일 기준 가격을 제공하여 대중이 가상 자산 투자 추세에 대한 이해도를 높이는 데 도움이 될 것입니다.&lt;/p&gt;
&lt;p&gt;관련 지수 시리즈의 설계 및 계산 방법에 대한 자세한 내용은 추후 공개될 예정입니다&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/news/news-release/2022/221216news?sc_lang=zh-hk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/240430news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hkex.com.hk/News/News-Release/2024/241028news?sc_lang=zh-HK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>수수료 인하됐습니다, 수수료 인하됐습니다, 국내 초대형 ETF 일괄 수수료 인하입니다</title>
        <link>https://blog.ttf248.life/ko/p/reduced-fees-large-domestic-etf/</link>
        <pubDate>Thu, 21 Nov 2024 03:08:48 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/reduced-fees-large-domestic-etf/</guid>
        <description>&lt;p&gt;화태보래 훙신300 ETF 등 공고 하향 종합 수수료율을 동종 최저 수준으로 조정&lt;/p&gt;
&lt;p&gt;11월 19일, 화태보리자금 공고에 따르면 투자자와의 투자 자산 관리 수요를 충족하기 위해 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;, 화태보리沪深300 ETF 및 관련 기금의 운용 보수율과 수탁 보수율을 인하하고 관련 기금 계약 내용을 수정합니다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调整后，华泰柏瑞沪深300ETF及其联接基金的年管理费率降至0.15%，年托管费率降至0.05%，全部调至指数基金的最低一档费率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;거의 동시에, 업계 선두 주자인 화샤(华夏) 沪深300 ETF, 화샤 상증50 ETF, 남방 중증500 ETF, 자실(嘉实) 沪深300 ETF, 일방다(易方达) 창업판 ETF 등도 운용보수 및 수탁보수를 인하한다고 발표하며, 수수료율을 모두 0.15%와 0.05%로 낮췄습니다&lt;/p&gt;
&lt;p&gt;기존 ETF 수수료 인하와 달리 이번에는 시장 내 규모의 우위를 가진 상품이 자발적으로 수수료를 인하한 것으로, 향후 업계에 미치는 영향이 클 것으로 예상된다. 거래소 데이터에 따르면 11월 18일 현재 화태베어 沪深300 ETF 규모는 3700억 위안을 넘어섰으며, 이는 현재 시장에서 가장 큰 규모의 ETF이다.&lt;/p&gt;
&lt;p&gt;가장 큰 규모의 슈퍼 ETF들이 선제적으로 수수료를 인하하면서 투자자에게 이익을 돌려주려는 의지를 보여주고, 투자자들이 더 높은 가격 대비 성능으로 인기 있고 유동성이 좋은 펀드에 투자할 수 있게 되었다&lt;/p&gt;
&lt;p&gt;업계 전문가들은 규모의 경제를 가진 ETF의 수수료 인하는 한편으로 공모펀드가 대중에게 금융 서비스를 제공하는 기능과 투자자들의 보유 비용을 낮추고 수익률과 투자 만족도를 높이는 데 도움이 된다고 분석합니다&lt;/p&gt;
&lt;p&gt;낮은 수수료는 또한 제품 자체의 경쟁력을 더욱 높이는 데 유리하며, 유동성 흡인 효과와 비용 운영 우위가 더해져 장기 투자 자금 유입을 촉진하고 “장기 투자 생태계” 구축에 기여할 것으로 기대된다&lt;/p&gt;
&lt;p&gt;최근 거래의 유연성, 높은 투명성, 강한 유동성 및 낮은 투자 장벽 등의 독특한 장점으로 인해 광범위 ETF는 자금 유입과 “장기 투자”를 위한 주요 경로가 되었습니다&lt;/p&gt;
&lt;p&gt;이번 가격 인하는 A주 시장의 자금이 보다 원활하게 유입되도록 하는 일종의 “촉진제”가 될 가능성이 있습니다&lt;/p&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;정기 투자 중인 천홍 펀드 발표는 아직 없지만, 따라갈 가능성이 높다. 업데이트가 없다면 다른 펀드로 변경해야 할 것 같다.&lt;/p&gt;
&lt;p&gt;원 관리비율: 0.5%, 수탁수수료: 0.1%. 신규 관리비율: 0.15%, 수탁수수료: 0.05%. 여전히 큰 폭의 인하입니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>삼각 투자 자문 감독 강화, “더울샤오주 배후 승자들 문란 해소?</title>
        <link>https://blog.ttf248.life/ko/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</link>
        <pubDate>Thu, 21 Nov 2024 02:59:18 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/third-party-wealth-managers-scrutiny-tiktok-stock-winners-crackdown/</guid>
        <description>&lt;p&gt;망치가 떨어지고 있다&lt;/p&gt;
&lt;p&gt;금융 자문 서비스가 짧은 동영상의 순풍을 타고 고속도로로 진입하고 있다&lt;/p&gt;
&lt;p&gt;지난 9월 하반기, A주 시장이 고조된 후 숏비디오 플랫폼을 통한 투자 추천이 각계의 관심을 받았다&lt;/p&gt;
&lt;p&gt;대규모 자본의 영향으로 인해 “다란(大蓝)”을 비롯한 여러 경제 뉴스 진행자들이 틱톡에서 인기를 얻으면서 간접적으로 자본 시장에 변동성이 발생했다&lt;/p&gt;
&lt;p&gt;하지만 빠르게 인기를 얻고 있는 경제 뉴스 진행자들 뒤에는 간과할 수 없는 세력, 즉 제3측 투자 자문 회사들이 있습니다&lt;/p&gt;
&lt;p&gt;파악된 바에 따르면, 여러 제3자 투자 자문 회사들이 단편 동영상 플랫폼에서 다수의 계정을 운영하며, 유료 광고를 통해 사용자를 유도하여 투자 교육 영상 시청을 유도하고, 관련 투자 자문 상품 구매 의욕을 높이는 것으로 알려져 있습니다&lt;/p&gt;
&lt;p&gt;더욱이, 어떤 제3자 투자 자문 회사에서 올해 10월에만 10억 위안의 수입을 올렸다는 소문도 있으며, 이는 상반기 전체 수입을 넘어섰다고 합니다&lt;/p&gt;
&lt;p&gt;하지만 “좋은 날들”이 더 많은 변수를 맞고 있다&lt;/p&gt;
&lt;p&gt;11월 이후, 여러 부처에서 잇따라 공문을 발송하며 증권 서비스 기관의 자매체 계정 규제 준수를 요구했다&lt;/p&gt;
&lt;p&gt;11월 15일 저녁, 동화순(300033.SZ)은 자회사가 라이브 방송을 통해 개별 주식 추천 등 행위를 하여 증감회로부터 처벌을 받았다고 공시했습니다
규제 강화 신호로 해석될 수도 있습니다
제3자 투자 자문 서비스 기관의 영업 확대는 추가적인 압박에 직면할 수도 있다&lt;/p&gt;
&lt;h2 id=&#34;엄중-감시&#34;&gt;엄중 감시
&lt;/h2&gt;&lt;p&gt;틱톡과 같은 짧은 동영상 플랫폼의 부상은 감정적 반응을 증폭시키고, 간접적으로 거래 행위에 영향을 미치고 있습니다&lt;/p&gt;
&lt;p&gt;데이터 분석에 따르면 9월 27일부터 10월 8일까지 거래액이 최고치를 기록한 기간 동안 抖音(Douyin) 상장 기업 키워드 검색 지수가 423만 8400에서 1277만 8600으로 급등하며 두 배 이상 증가했습니다&lt;/p&gt;
&lt;p&gt;이러한 상황에서 제3자 자문기관의 “촉진” 행위가 규제 기관의 관심을 끌고 있다&lt;/p&gt;
&lt;p&gt;증권사 직원들이 라이브 방송 중 다양한 방식으로 개별 주식을 추천하는 행위는 잦은 위반 행위입니다&lt;/p&gt;
&lt;p&gt;11월 8일, 광둥 증감국은 특정 회사의 라이브 방송에서 “개별 주식 추천을 암시하는 행위” 등의 사례에 대해 신규 고객 유치 중단이라는 규제 조치를 취했습니다&lt;/p&gt;
&lt;p&gt;11월 14일 저녁, 광둥 증권선물업협회에서《라이브 방송 관리 미흡, 기관 업무 정지》라는 공지를 발표하며 일부 증권 상담 자격을 가진 기관이 라이브 방송 중 영업 활동 과정에서 관리가 미흡한 점과 함께 방송 중에 개별 주식을 추천하는 행위가 있다는 것을 지적했다&lt;/p&gt;
&lt;p&gt;라이브 방송 중 주식 추천 행위를 금지합니다. 라이브 방송은 공공 미디어 전파에 해당하며, 투자 자문으로 등록 여부와 관계없이 라이브 방송자는 방송 중에 개별 종목을 추천해서는 안 됩니다. - 광둥 증권선물업협회&lt;/p&gt;
&lt;p&gt;이 경우는 유일한 것이 아닙니다&lt;/p&gt;
&lt;p&gt;이전 11월 7일, 상하이 증감위가 공개한 처분 목록에도 소셜 미디어 플랫폼에서 불법적으로 주식 투자를 권유한 사례가 포함되어 있었습니다&lt;/p&gt;
&lt;p&gt;감독 조사 결과, 하이슌 증권 투자상담유한공사 상하이 지점의 투자 상담원 왕영이 위챗 비디오 번호에 오해를 불러일으키는 영상 콘텐츠를 게시하여 이는 업계 규정을 위반했습니다&lt;/p&gt;
&lt;p&gt;상하이 증감국은 이에 대해 왕영에게 경고서를 발부하는 감독 관리 조치를 취했습니다&lt;/p&gt;
&lt;p&gt;자격이 없는 일부 투자 자문사들이 증권사와 위탁 계약을 통해 틱톡에서 주식을 추천하다가 방송 중단된 것으로 알려졌다&lt;/p&gt;
&lt;p&gt;업계에 틱톡 라이브 방송을 하는 사람이 있는데, 사실은 증권사 아래에 걸려 있어서 투자 자문 자격을 갖추고, 온라인 라이브 방송으로 고객을 유치해서 오프라인에서 자문 조합 상품을 판매하는 방식입니다. 남방 한 투자 자문가는 신풍(ID:TradeWind01)에게 이렇게 말했습니다. &amp;ldquo;하지만 나중에 방송에서 주식을 추천했다는 이유로 중단되었죠. 정식 증권사는 일반적으로 투자 교육 라이브 방송에서는 섹터 상황만 이야기하고 개별 종목에 대해서는 언급하지 않습니다.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;현재 규제 당국은 소셜 미디어 불법 공모 주식 행위에 대해 높은 관심을 기울이고 있습니다&lt;/p&gt;
&lt;p&gt;예를 들어, 선전 증감회는 최근 업계 내 개별 기관이나 개인들이 자매체를 이용하여 불법적으로 주식을 추천하는 등 위반 행위를 하고 있다고 밝혔습니다. 이에 따라 관할구역의 증권 투자 상담기관들의 자매체 운영 및 관리를 더욱 강화하기 위해 각 기관은 자체 자매체 운영 관리를 강화해야 합니다.&lt;/p&gt;
&lt;p&gt;이는 다수의 제3자 자문 서비스 기관의 사업 확장에 더 많은 어려움을 가져올 수 있습니다&lt;/p&gt;
&lt;h2 id=&#34;합법이-아니다&#34;&gt;합법이 아니다
&lt;/h2&gt;&lt;p&gt;단비 영상에 유혹되어 시장에 진입한 투자자들이 돈을 벌었는지 여부는 알 수 없지만, “물장수” 역할을 하는 제3자 자문사 서비스 회사의 가치는 2차 시장에서 물가가 오르듯 상승했다&lt;/p&gt;
&lt;p&gt;&amp;ldquo;온라인 투자 교육 1위 기업&amp;quot;으로 불리는 九方智投는 올해 9월 초의 28억7천만 위안에서 11월 13일 종가 124억6천만 위안까지 급등하며 49개 거래일 동안 333.08%의 상승률을 기록했습니다&lt;/p&gt;
&lt;p&gt;반기 보고서에 따르면, 올해 상반기 큐방지투는 틱톡, 샤오홍수 등 소셜 미디어 플랫폼에서 브랜드 노출을 진행했으며, 6월 말까지 488개의 계정과 0.46억 명의 팔로워를 확보했습니다&lt;/p&gt;
&lt;p&gt;예를 들어, 玖方智投의 수석 투자 자문인 “홍방주”는 틱톡에서 226만 명의 팔로워를 보유하고 있다&lt;/p&gt;
&lt;p&gt;저희는 MCN 운영에 깊이 집중하며, 사용자를 중심으로 트래픽, 브랜드 및 제품의 전면적인 발전을 협력적으로 추진합니다. 玖方智投는 “라이브 방송, 단편 동영상 등 새로운 미디어 도구를 심층적으로 융합하고 AI 기술을 활용하여 팬 네트워크를 구축하며, 적극적으로 이커머스 모델을 탐색함으로써 트래픽의 효율적인 전환을 실현한다”고 밝혔습니다.&lt;/p&gt;
&lt;p&gt;玖방지투의 투자 상담 과정 패키지는 수십만 원부터 10여 만 원까지 다양한 가격대로 구성되어 있습니다. 그중 가장 비싼 과정은 슈퍼 투자자로, 반기 기준 13.96만 원에 책정되었으며 독점적인 의견과 투자 상담 전용 서비스 등을 포함합니다.&lt;/p&gt;
&lt;p&gt;지오방지투의 투자 자문 상품 환불률이 10% 이상입니다&lt;/p&gt;
&lt;p&gt;2024년 상반기, 구방지투 플래그십 시리즈와 구방지투 擒룡 시리즈의 환불률은 각각 14.7%, 18.5%에 달했다&lt;/p&gt;
&lt;p&gt;규제 강화의 여파 속에서, 지투(GT)의 사업 확장에 미치는 영향은 앞으로 더 지켜봐야 할 것입니다&lt;/p&gt;
&lt;p&gt;최근 언론에 따르면 최근 玖方智投 등 제3자 투자 자문 회사 계정에 영향을 미쳤다는 보도가 있었다&lt;/p&gt;
&lt;p&gt;11월 7일, 언론에 따르면 “홍방주”가 방송 중지되었다고 보도했다&lt;/p&gt;
&lt;p&gt;하지만 11월 15일 오후 신풍(ID:TradeWind01)이 해당 계정을 검색한 결과, “홍帮주”의 생방송 화면에서 여전히 11월 18일 생방송 예약을 할 수 있었다&lt;/p&gt;
&lt;p&gt;관련 부서에서 玖方智投에 대한 실사를 진행 중이라는 시장 소식도 있다&lt;/p&gt;
&lt;p&gt;관련 점검은 정기적인 것이었고, 이미 종료되었다고 정보통이 전했다&lt;/p&gt;
&lt;p&gt;이 회사는 이번 규제 폭풍에 휘말렸다는 소문으로 최근 논란의 중심에 선 유일한 기업이 아닙니다&lt;/p&gt;
&lt;p&gt;동화순 관련 불법 추천 주식 의혹으로 수사 개설, 영업 중단 가능성 제기
이에 동화순은 11월 15일 “불법 추천주 상황이 없고, 수사 입안 대상이 된 적도 없다”라고 응답했다
동화순은 당일 밤에 자회사 저장 동화순운소프트유한공사가 라이브 방송 사업 홍보 과정에서 규제 관리가 미흡했고, 특정 주식 추천을 암시하는 상황이 발생하여 저장 증감국으로부터 신규 고객 유치 중지 3개월 등의 처벌을 받았습니다
이러한 상황은 규제 당국이 틱톡 라이브 방송 등 소셜 미디어 플랫폼의 투자 관련 콘텐츠에 대한 감시를 강화하는 것으로 해석될 수도 있다&lt;/p&gt;
&lt;p&gt;사실, 단영상 시장도 증권사들의 관심을 끌고 있지만, 규제 요건으로 인해 아직은 신중한 태도를 보이고 있습니다&lt;/p&gt;
&lt;p&gt;어떤 증권사 관계자는 신풍(ID:TradeWind01)에게 해당 업체가 단영상 운영 및 유치 방법 모색 중이며, 관련 학습을 위해 단영상 플랫폼 회사에 인원을 파견했으나, 규제 제약으로 인해 현재는 탐색 단계에 머물러 있다고 전했다&lt;/p&gt;
&lt;p&gt;사실, 규제 준수 요구 사항 뒤에는 짧은 동영상 플랫폼 콘텐츠의 뚜렷한 감정적 색채가 존재하며, 투자에서는 시장 참여자들이 합리적으로 접근해야 하는 반면, 이 둘 사이에는 근본적인 충돌이 있습니다&lt;/p&gt;
&lt;p&gt;감정의 영향력이 자본시장을 좌우하면 시장의 격렬한 변동을 초래하기 쉬워, 자본시장의 장기적인 건전한 발전에 부합하지 않는다&lt;/p&gt;
&lt;p&gt;증권 회사가 단영상 시대의 도래를 어떻게 “법망을 피하면서” 활용할 수 있을지는 복잡한 문제이다&lt;/p&gt;</description>
        </item>
        <item>
        <title>CentOS 8 Stream EOL</title>
        <link>https://blog.ttf248.life/ko/p/centos-8-stream-eol/</link>
        <pubDate>Sat, 16 Nov 2024 23:24:50 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/centos-8-stream-eol/</guid>
        <description>&lt;p&gt;출시 전 상류 오픈소스 개발 플랫폼
오픈소스 운영체제 수명 주기 최초로 주목&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;만료되었는데, 문제가 있나요? 보안 문제 외에 dnf를 사용할 수 없게 되었고, 최근 도구를 설치할 때 dnf가 실패했는데, 확인해 보니 이미지 소스가 만료되었습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;centos-스트림-소개&#34;&gt;CentOS 스트림 소개
&lt;/h2&gt;&lt;h3 id=&#34;위치와-역할&#34;&gt;위치와 역할
&lt;/h3&gt;&lt;p&gt;CentOS Stream은 Fedora Linux(상위 개발)과 RHEL(Red Hat Enterprise Linux, 하위 개발) 사이에 위치하여 다리 역할을 합니다&lt;/p&gt;
&lt;p&gt;최신 Red Hat Linux 기능을 경험해 볼 수 있는 버전이며, 얼리 액세스 사용자에게 적합합니다&lt;/p&gt;
&lt;h3 id=&#34;탄생과-배경&#34;&gt;탄생과 배경
&lt;/h3&gt;&lt;p&gt;시간이 지나면서, Red Hat 사는 기업용 Linux 플랫폼을 더욱 효과적으로 발전시키기 위해 CentOS Stream 을 출시했습니다&lt;/p&gt;
&lt;p&gt;CentOS 8은 2021년 말 지원 종료 후, CentOS Stream이 그 뒤를 이어 업데이트되고 있으며, CentOS 프로젝트의 미래 발전 방향이 되고 있습니다&lt;/p&gt;
&lt;h3 id=&#34;특징-및-장점&#34;&gt;특징 및 장점
&lt;/h3&gt;&lt;p&gt;CentOS Stream은 더 빠른 업데이트를 제공하는 롤링 릴리스 Linux 배포판입니다. 커뮤니티, 파트너 및 고객의 참여를 위한 투명성과 기회를 높여 사용자에게 Red Hat Enterprise Linux에 더욱 빠르고 직접적으로 기여할 수 있도록 합니다.&lt;/p&gt;
&lt;p&gt;CentOS Stream의 내용은 Red Hat이 다음 안정 버전 RHEL에 포함할 소프트웨어이며, 따라서 커뮤니티 구성원에게 개발 및 테스트를 위한 안정적인 ABI/API를 제공합니다&lt;/p&gt;
&lt;h3 id=&#34;사용-시나리오-및-대상-사용자&#34;&gt;사용 시나리오 및 대상 사용자
&lt;/h3&gt;&lt;p&gt;CentOS Stream은 최신 Linux 기능 업데이트를 계속 받고자 하는 CentOS 사용자, 그리고 Red Hat Enterprise Linux 개발에 참여하고자 하는 개발자와 파트너에게 적합합니다&lt;/p&gt;
&lt;p&gt;커뮤니티 구성원, Red Hat 파트너 및 기타 사용자들이 보다 안정적이고 예측 가능한 Linux 환경에서 혁신적인 오픈소스 프로그램을 최대한 활용할 수 있도록 지원하는 것을 목표로 합니다&lt;/p&gt;
&lt;h2 id=&#34;죄송합니다-번역할-중국어-텍스트가-제공되지-않았습니다-텍스트를-제공해-주시면-번역해-드리겠습니다&#34;&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release&lt;/th&gt;
&lt;th&gt;Released&lt;/th&gt;
&lt;th&gt;Active Support&lt;/th&gt;
&lt;th&gt;Security Support&lt;/th&gt;
&lt;th&gt;Latest&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;3 years ago (15 Sep 2021)&lt;/td&gt;
&lt;td&gt;Ends in 2 years and 6 months (31 May 2027)&lt;/td&gt;
&lt;td&gt;Ends in 2 years and 6 months (31 May 2027)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;5 years ago (24 Sep 2019)&lt;/td&gt;
&lt;td&gt;Ended 5 months and 3 weeks ago (31 May 2024)&lt;/td&gt;
&lt;td&gt;Ended 5 months and 3 weeks ago (31 May 2024)&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;해결책&#34;&gt;해결책
&lt;/h2&gt;&lt;p&gt;업그레이드 문제에 신경 쓰고 싶지 않아, 장기 지원 버전을 선택했습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hugo 모듈 커스텀 수정 테마: 아이디어 설명</title>
        <link>https://blog.ttf248.life/ko/p/hugo-module-custom-theme-ideas/</link>
        <pubDate>Fri, 15 Nov 2024 22:01:17 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/hugo-module-custom-theme-ideas/</guid>
        <description>&lt;p&gt;과거 커밋 기록을 살펴보니, 사이트는 여러 번 테마를 변경해 왔고, 매번 변경 시마다 사용자 정의 수정 사항이 있었습니다. 여기 사용자 정의 테마 수정에 대한 아이디어를 기록합니다. 작성자의 &lt;code&gt;Github&lt;/code&gt;BOLD_3&lt;code&gt;hugo&lt;/code&gt;编译器到最新版本，导致even主题不兼容，所以又切换到了&lt;code&gt;stack&lt;/code&gt; 테마입니다.&lt;/p&gt;
&lt;h2 id=&#34;후고의-모듈화&#34;&gt;후고의 모듈화
&lt;/h2&gt;&lt;p&gt;모듈화를 언급하면 Nginx 모듈이나 IDEA 플러그인 등이 떠오르곤 합니다. 보통은 몇몇 모듈을 업로드하여 차별화된 요구사항을 충족할 수 있습니다. 이러한 모듈이 선호되는 주된 이유는 충분히 유연하기 때문이며, 큰 노력을 들이지 않고도 자체적인 요구사항을 충족할 수 있기 때문입니다. 많은 경우 전체적으로는 비슷하더라도 세부적인 차이가 존재합니다. 이는 기술적 복잡성 외에도 비즈니스 복잡성을 보여주는 것이기도 합니다. 대부분의 경우 우리는 비즈니스 복잡성에 직면하며, 이것이 소프트웨어 분야에서 “동업자 간에도 산과 같다는” 속담을 가장 잘 설명하는 것입니다. 현재는 인터넷 산업뿐만 아니라 금융 산업, 심지어 전통적인 제조업까지 정보화 시스템을 활용하여 기업의 생산 및 관리를 돕고 있습니다. 동일한 휴가 시스템이라 할지라도 같은 업계 내에서도 회사마다 차이가 있을 수 있습니다.&lt;/p&gt;
&lt;p&gt;모듈은 일반적인 모듈과 달리 기능별로 차별화된 요구사항을 충족하기보다는 디렉토리 구조를 중심으로 동일한 구조를 식별합니다&lt;/p&gt;
&lt;p&gt;자료 링크: &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@sunwei.xyz/07-hugo%E6%9E%B6%E6%9E%84-hugo%E7%9A%84%E6%A8%A1%E5%9D%97-8ef5a520a822&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;07. Hugo架构 — Hugo的模块&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports]]
path = &amp;quot;github.com/CaiJimmy/hugo-theme-stack/v3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 방식은 여전히 사용할 수 있지만, 본문에서는 권장하지 않습니다. 주제에 업데이트가 발생하면 유지 관리가 복잡해지므로 별도의 Git 저장소로 관리해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;죄송합니다-번역할-중국어-텍스트가-제공되지-않았습니다-텍스트를-제공해-주시면-번역해-드리겠습니다&#34;&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
&lt;/h2&gt;&lt;p&gt;앞선 모듈화 기반 개념에 대한 이해가 있으면 사용자 정의 테마를 이해하는 것은 훨씬 쉬워집니다. &lt;code&gt;hugo&lt;/code&gt; 현재의 테마 역시 여러 개의 다른 모듈로 조립된 것이며, 원하는 모듈을 찾아서 해당 템플릿 파일을 수정하면 됩니다.&lt;/p&gt;
&lt;p&gt;__INLINE_CODE_0__공식 문서에서 발췌:&lt;/p&gt;
&lt;p&gt;Using this method, there won&amp;rsquo;t be any file under &lt;code&gt;themes&lt;/code&gt; directory. In order to modify the theme, you will have to copy the file you want to modify to the same directory under &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;For example, in order to modify the &lt;code&gt;themes/hugo-theme-stack/layouts/partials/head/custom.html&lt;/code&gt; file, you will have to copy it to &lt;code&gt;layouts/partials/head/custom.html&lt;/code&gt; and modify it there (copy the code from theme&amp;rsquo;s repository). The same applies to &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; directories。&lt;/p&gt;
&lt;h2 id=&#34;템플릿-파일을-어떻게-찾을-수-있나요&#34;&gt;템플릿 파일을 어떻게 찾을 수 있나요?
&lt;/h2&gt;&lt;h3 id=&#34;정통적-관점&#34;&gt;정통적 관점
&lt;/h3&gt;&lt;p&gt;테마 소스 파일을 살펴보며 디자인 의도를 파악하고, 해당 템플릿 파일을 찾아 수정하면 됩니다&lt;/p&gt;
&lt;h3 id=&#34;거친-사고방식&#34;&gt;거친 사고방식
&lt;/h3&gt;&lt;p&gt;저는 프론트엔드 코드를 잘 알지 못해서 때로는 직접 브라우저에서 해당 페이지를 열어 수정할 부분을 찾고, &lt;code&gt;审查元素&lt;/code&gt;BOLD_2&lt;code&gt;css name&lt;/code&gt;을 사용하여 테마 소스 코드 내에서 검색하여 해당 파일을 찾아 사이트 디렉토리에 복사한 후 수정하는 방식으로 작업합니다&lt;/p&gt;
&lt;h2 id=&#34;작은-팁&#34;&gt;작은 팁
&lt;/h2&gt;&lt;p&gt;기본적으로 제공되는 스타일 사용자 정의 파일을 활용하여, 수정이 필요한 부분을 여러 파일로 분할하고 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 파일을 통해 다른 파일들을 불러와 스타일 파일을 더 효과적으로 관리할 수 있습니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/hugo-module-custom-theme-ideas/image.png&#34;
	width=&#34;141&#34;
	height=&#34;375&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;수정-내용-요약-6시간&#34;&gt;수정 내용 요약 (6시간)
&lt;/h2&gt;&lt;p&gt;지금은 __INLINE_CODE_0__编码的元年，详细的内容，这里就不详细贴出来了，只是简单的列举一下，本站点的一些修改内容，比如调整复制按钮的样式，重新设置代码的块的样式，&lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 모두 쉽게 처리할 수 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전체: 전체 텍스트 스타일은 이전 __INLINE_CODE_0__BOLD_2&lt;code&gt;info cn&lt;/code&gt; 표시 스타일을 유지하며, 중국어 사용자를 고려함&lt;/li&gt;
&lt;li&gt;홈페이지 오른쪽 네비게이션에 마우스 인터랙션 애니메이션 추가&lt;/li&gt;
&lt;li&gt;처음 페이지: 논문에 요약 미리 보기 추가 (시간이 많이 소요되어 편리한 방법을 사용함)&lt;/li&gt;
&lt;li&gt;스크롤바: 스크롤바 스타일을 개선했습니다&lt;/li&gt;
&lt;li&gt;코드 블록에 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 코드 하이라이트 플러그인이 도입되어 코드 블록 스타일이 개선되었습니다&lt;/li&gt;
&lt;li&gt;일부 내용은 재게시되었으며, 원저자 정보 및 원본 링크가 추가되었습니다&lt;/li&gt;
&lt;li&gt;아카이브 페이지: 상단의 분류 이미지, 테마 자체 색상 오버레이 제거 후 원본 이미지 표시&lt;/li&gt;
&lt;li&gt;분류별 연도별 통계 표시 패널이 추가되었습니다&lt;/li&gt;
&lt;li&gt;기록 페이지: 두 열 레이아웃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스크립트를 통해 사용자 정의 특수 변수를 활용하여 요약 미리보기를 구현합니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;때로는 코드 재사용성이 너무 높아 문제인 경우도 있는데, 한 부분을 수정하면 다른 부분에도 영향을 미칠 수 있으므로 테마를 수정할 때는 기존 로직을 훼손하지 않도록 주의해야 합니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;댓글-영역&#34;&gt;댓글 영역
&lt;/h3&gt;&lt;p&gt;이 친구의 수정은 더 완벽해졌어: &lt;a class=&#34;link&#34; href=&#34;https://blog.reincarnatey.net/2024/0719-better-waline/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.reincarnatey.net/2024/0719-better-waline/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;파업_11&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;추천, 홈페이지, 이메일 연락처. 본 사이트는 댓글 기능을 제공하지 않습니다.&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>현소읍 브라만: 작은 지역의 “거물”</title>
        <link>https://blog.ttf248.life/ko/p/county-brahmins-big-shots-in-small-towns/</link>
        <pubDate>Wed, 13 Nov 2024 23:02:25 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/county-brahmins-big-shots-in-small-towns/</guid>
        <description>&lt;p&gt;최근 抖音에서 대빙 선생님이 아주 유명해져서 자주 영상을 볼 수 있는데, 다 방송 중에 나온 내용들이다. 함께 방송하던 청취자가 “대빙 선생님, 저는 시안의 집을 팔고 고향으로 돌아가서 편하게 살고 싶어요.”라고 물었고, 대빙 선생님은 “지금 당신 나이가 삼십대 초반인데, 躺平할 수 없다. 부모님은 늙어가시고, 자녀는 아직 독립하지 못했으니 고향에 돌아가도 작은 도시의 어려움을 감당해야 할 것이다.”라고 답했다.&lt;/p&gt;
&lt;p&gt;일단 옳고 그름을 떠나서, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 이 단어는 무슨 뜻인가요?&lt;/p&gt;
&lt;h1 id=&#34;县城婆罗门小地方的大人物&#34;&gt;&lt;strong&gt;县城婆罗门：小地方的“大人物”&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;많은 작은 도시에서 사람들은 흔히 &amp;ldquo;현급 브라만&amp;quot;이라고 불리는 존재들을 이야기한다. 이들의 존재는 마치 지역 사회의 상징과 같으며, 종교적인 인물도 아니고 화려한 직함을 가진 것도 아니지만, 겉보기에는 평범해 보이지만 막대한 영향력을 행사하는 사람들이다. 그들은 작은 지역 사회에서 &amp;ldquo;권력, 지위, 발언권&amp;quot;을 대표하며, 그 현의 특정 계층을 상징한다.&lt;/p&gt;
&lt;h2 id=&#34;什么是县城婆罗门&#34;&gt;&lt;strong&gt;什么是“县城婆罗门”？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;우선, “브라만”이라는 용어는 원래 인도 사회에서 가장 높은 계층을 의미하며 지혜, 권위, 그리고 정신적인 우월성을 상징합니다. 하지만 중국의 현도시에서 “현도시 브라만”이라는 단어는 그렇게 복잡한 종교적 배경을 가지고 있는 것이 아니라, 더 많은 사회 현상의 비유에 가깝습니다.&lt;/p&gt;
&lt;p&gt;간단히 말해서, &amp;ldquo;현급 브라만&amp;quot;은 현읍내의 몇몇 &amp;ldquo;문화적 권위자&amp;quot;를 의미합니다. 예를 들어 선생님, 의사, 지역 유명 상인, 공무원 등입니다. 겉보기에는 평범한 직업이지만, 비교적 폐쇄적인 환경인 현읍에서 이들은 상대적으로 높은 사회적 지위를 가지고 있거나, 그들의 의견과 행동이 무시할 수 없는 영향력을 행사합니다.&lt;/p&gt;
&lt;h2 id=&#34;谁是县城婆罗门&#34;&gt;&lt;strong&gt;谁是“县城婆罗门”？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;군청에서는 거의 모든 분야에서 이런 “브라흐만”들이 있습니다. 그들은 다음과 같을 수 있습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;教育工作者&lt;/strong&gt;: 특히 지방에서 수십 년간 교직에 몸담은 선생님들은 명문대 졸업생이 아닐 수도 있지만, 지식을 통해 어떻게 권위를 쌓고 존경을 받는지를 잘 알고 계십니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地方政府官员&lt;/strong&gt;: 군청의 부현장, 과급 간부 등은 어느 정도 자원과 권력을 장악하고 있으며, 비록 직책이 높지 않더라도 관할 범위가 제한적이기에 지역 사회의 &amp;lsquo;브라흐만&amp;rsquo;이 될 수 있다&lt;/li&gt;
&lt;li&gt;일부 현도시의 사업가들은 규모는 크지 않지만 상당한 부를 가지고 있으며 지역 내 영향력을 행사합니다. 어쩌면 몇몇 유명한 소규모 기업을 운영하며, 현내에서 꽤 큰 영향력을 미치기도 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 사람들은 대도시의 명사나 고위 관리들에 비하면 지위가 썩 높지 않지만, 현청이라는 작은 사회 안에서는 거의 “문화적 원로” 또는 “권력의 중심”과 동등한 위치를 차지한다&lt;/p&gt;
&lt;h2 id=&#34;县城婆罗门的地位如何影响社会&#34;&gt;&lt;strong&gt;“县城婆罗门”的地位，如何影响社会？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;현(縣)정의 특별한 환경에서 “현읍 브라만”의 진정한 의미를 이해하려면, 정보 유통이 대도시만큼 빠르지 않고 사회 계층 이동도 비교적 고착화된 이 곳의 특성을 고려해야 합니다. 이곳의 ‘브라만’들은 흔히 장기간 지역을 깊이 파고들어 명성, 지식, 인맥을 쌓아 영향력을 행사하며 정치, 경제, 문화 등 각 방면을 좌우합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;작은 지역에서는 특히 교육 시스템이 발달하지 않았고 일반인들에게는 선택의 폭이 크지 않다. 현지 문화 엘리트들은 수업을 통한 지식 전달, 미디어 설명, 심지어 사교적인 자리에서의 언행으로 조용히 지역 문화를 형성한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;社会资源的集中&lt;/strong&gt;: 현(縣) 도시의 인구와 자원이 제한적이기에, 이들 “브라만”은 지역 자원의 주요 통제자 중 하나인 경우가 많다. 사회 복지, 정책 시행, 그리고 특정 사업 승인 등 어떠한 경우에도 그들의 영향력이 작용한다. 그들의 발언권과 결정권으로 인해 지역사회에서 중요한 위치를 차지하고 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상대적으로 폐쇄적인 작은 사회에서 인간관계는 종종 매우 중요합니다. 이러한 &amp;ldquo;현도시 브라만&amp;quot;들은 강력한 소셜 네트워크를 구축하여 정보 흐름과 자원 분배를 통제하고, 결정적인 순간에 중요한 역할을 합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;县城婆罗门背后的隐喻&#34;&gt;&lt;strong&gt;“县城婆罗门”背后的隐喻&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;비록 “현급 도시 브라만”은 종종 존경과 숭배를 받지만, 이러한 “높고 높은” 지위도 문제 없는 것은 아니다. 현대 사회에서 우리는 많은 현급 도시의 “브라만”들이 진정한 능력이나 혁신 정신이 아니라 세습 관계나 자원 독점 등을 통해 자신의 위치를 유지하는 것을 쉽게 발견할 수 있다. 정보화의 발전과 함께 이러한 “브라만”들의 권력은 점차 깨지고, 새로운 사회 유동성이 작은 현급 도시의 모습을 변화시키기 시작하고 있다.&lt;/p&gt;
&lt;p&gt;전반적으로 볼 때, &amp;ldquo;현급 도시 브라만&amp;quot;은 흥미로운 사회 현상이며 지방 사회의 권력과 문화 구조를 반영합니다. 그들의 “권력”이 국가 통치에 직접적인 위협을 가하지는 않더라도, 지방 내에서는 부인할 수 없을 정도로 중요한 인물들입니다. 정보가 빠르게 유통되고 사회 변화가 가속화되는 시대에, 현급 도시의 이러한 &amp;ldquo;브라만&amp;quot;들은 이전에는 겪어보지 못한 도전 과제에 직면하고 있을지도 모릅니다.&lt;/p&gt;
&lt;h1 id=&#34;结语&#34;&gt;&lt;strong&gt;结语&lt;/strong&gt;
&lt;/h1&gt;&lt;p&gt;원래 이 원고가 있을 리 없었는데, 호기심이 &lt;code&gt;婆罗门&lt;/code&gt;是什么，然后扔给了&lt;code&gt;kimi&lt;/code&gt;，结果还挺搞笑的，我能看到网页端已经搜索出来了结果，但是瞬间就变成了相关内容无法展示，然后我就想，这个词是不是有什么特殊的意义，然后我就扔给了__INLINE_CODE_2__ 덕분에 이 글이 쓰이게 된 거다&lt;/p&gt;</description>
        </item>
        <item>
        <title>리눅스 백엔드 서비스 문자열 데이터 처리 - 속도 느림</title>
        <link>https://blog.ttf248.life/ko/p/linux-backend-slow-string-processing/</link>
        <pubDate>Wed, 13 Nov 2024 19:42:59 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/linux-backend-slow-string-processing/</guid>
        <description>&lt;p&gt;C++ 개발 프로젝트에서 사용자 정의 프로토콜을 사용하여 통신했는데, 이 프로토콜은 2차원 배열 패턴을 채택했습니다. 대량의 데이터를 처리할 때 프로토콜 내부에서 배열을 순회하고 시리얼화하여 로그를 생성하는 과정이 비효율적이었고, 이는 고부하 상황에서 시스템 응답 지연을 야기했습니다. 이로 인해 사업 부서로부터 시스템 멈춤 현상에 대한 피드백을 받았습니다.&lt;/p&gt;
&lt;h2 id=&#34;문제-파악&#34;&gt;문제 파악
&lt;/h2&gt;&lt;p&gt;문제 해결 과정에서 우선 시스템 성능을 분석한 결과, 대량의 데이터를 처리할 때 CPU 사용률이 눈에 띄게 증가하고 응답 시간이 길어지는 것을 확인했습니다. 시스템 로그를 분석한 결과, 2차원 배열 처리에 비효율적인 많은 양의 직렬화 작업이 수행되고 있었고, 이로 인해 시스템 성능이 저하되었습니다.&lt;/p&gt;
&lt;p&gt;도구 캡처 서비스의 스레드 정보를 분석한 결과, 로그 스레드는 대부분의 시간을 문자열 연결 처리에 소비하는 것으로 나타났다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여기 오늘의 핵심인데, 다른 누적 방식에 따라 효율성의 차이가 엄청나다. 기존 코드에서는 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 연산자를 사용했는데, 이 방식은 빈번하게 임시 객체를 생성하므로 효율이 매우 낮다. 얼마나 심각한지 모르는 수준으로 비효율적이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;데모-검증&#34;&gt;데모 검증
&lt;/h2&gt;&lt;p&gt;프로젝트 코드를 기반으로 비즈니스 로직을 분리하고, 문자열 연결 효율성 문제를 검증하기 위한 간단한 데모를 작성했습니다. &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 下的 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 编译器，__INLINE_CODE_2__BOLD_7&lt;code&gt;gcc8.5&lt;/code&gt; 编译器，&lt;strong&gt;INLINE_CODE_4&lt;/strong&gt; 모드에서 컴파일 및 실행하여 효율성을 비교했습니다.&lt;/p&gt;
&lt;h3 id=&#34;주요-사항-안내&#34;&gt;주요 사항 안내
&lt;/h3&gt;&lt;p&gt;프로젝트는 방법 네 가지를 사용하고 있는데, 테스트 데이터를 받기 전 독자들은 어떤 방식이 가장 효율적이고 어떤 방식이 가장 비효율적인지 먼저 생각해 볼 수 있습니다. 결과를 보고 저는 여전히 놀랐습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;각 필드를 문자열에 직접 연결합니다&lt;/li&gt;
&lt;li&gt;스트림(Stream)을 사용하여 각 필드를 연결하면 더 효율적이며, 특히 대량 데이터를 연결할 때 더욱 그렇습니다&lt;/li&gt;
&lt;li&gt;**方法 3（预分配内存的 &lt;strong&gt;인라인_4&lt;/strong&gt; &lt;em&gt;이탤릭체_3&lt;/em&gt;_： 미리 문자열에 충분한 메모리를 할당하면 메모리 재할당 비용을 줄여 성능을 향상시킬 수 있습니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;方法 4 (&lt;strong&gt;인라인__이탤릭_3&lt;/strong&gt; __)&lt;/strong&gt;: 매번 연결할 때마다 새로운 임시 문자열 객체를 생성하므로, 특히 대규모 연결 시 성능 저하가 발생합니다. 이는 매번 연결 시 새로운 메모리 할당 및 복사가 수반되기 때문입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;참고 결과, 프로젝트가 효율이 가장 낮은 방식을 선택한 것을 알 수 있습니다&lt;/p&gt;
&lt;p&gt;더 나아가, 다양한 플랫폼 컴파일러의 최적화 효율을 분석해 보면, 마이크로소프트의 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 一如既往的优秀，针对字符串的优化效率很高，而 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 컴파일러는 이 부분에서 최적화 효율이 다소 떨어지는 편입니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코드 실행 환경이 다른 기기에서 이루어지므로 데이터 간 직접적인 비교는 무의미하며, 각각의 조립 방식별 차이를 비교하는 것이 좋습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;windows 平台下的 vs2022 编译器

----------------------------------------
Data Generation Time: 0.054 seconds.
----------------------------------------

----------------------------------------
Data Merging Performance:
----------------------------------------
+ Data merging (+=) took: 0.053 seconds.
+ ostringstream Data merging took: 0.054 seconds.
+ Pre-reserved Data merging took: 0.045 seconds.
+ Data merging (bodys = bodys + body + &amp;quot;\n&amp;quot;) took: 16.108 seconds.

----------------------------------------
Data Merging Complete.
----------------------------------------

Program finished.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;linux 平台下的 gcc8.5 编译器
----------------------------------------
Data Generation Time: 0.108 seconds.
----------------------------------------

----------------------------------------
Data Merging Performance:
----------------------------------------
+ Data merging (+=) took: 0.100 seconds.
+ ostringstream Data merging took: 0.083 seconds.
+ Pre-reserved Data merging took: 0.057 seconds.
+ Data merging (bodys = bodys + body + &amp;quot;\n&amp;quot;) took: 29.298 seconds.

----------------------------------------
Data Merging Complete.
----------------------------------------

Program finished.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;전체-코드&#34;&gt;전체 코드
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;random&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;iomanip&amp;gt;

typedef std::vector&amp;lt;std::string&amp;gt; DataRow;
typedef std::vector&amp;lt;DataRow&amp;gt; DataGroup;

struct ResponsePackage
{
    std::string ErrorInfo;
    DataRow Head;
    std::string ClientId;
    std::string UUID;
    std::string MsgID;
    std::string SessionID;
    std::string ExtraInfo1;
    std::string ExtraInfo2;
    DataGroup DataBody;
};

// Generate specified length of random string
std::string generateRandomString(size_t length)
{
    const char charset[] = &amp;quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&amp;quot;;
    const size_t max_index = sizeof(charset) - 1;
    std::string random_string;
    random_string.reserve(length);

    std::random_device rd;
    std::mt19937 generator(rd());
    std::uniform_int_distribution&amp;lt;&amp;gt; distribution(0, max_index);

    for (size_t i = 0; i &amp;lt; length; ++i)
    {
        random_string += charset[distribution(generator)];
    }

    return random_string;
}

void create_large_string()
{
    // Example request package with 50 fields
    ResponsePackage requestPackage;

    requestPackage.Head = {
        &amp;quot;Field1&amp;quot;, &amp;quot;Field2&amp;quot;, &amp;quot;Field3&amp;quot;, &amp;quot;Field4&amp;quot;, &amp;quot;Field5&amp;quot;,
        &amp;quot;Field6&amp;quot;, &amp;quot;Field7&amp;quot;, &amp;quot;Field8&amp;quot;, &amp;quot;Field9&amp;quot;, &amp;quot;Field10&amp;quot;,
        &amp;quot;Field11&amp;quot;, &amp;quot;Field12&amp;quot;, &amp;quot;Field13&amp;quot;, &amp;quot;Field14&amp;quot;, &amp;quot;Field15&amp;quot;,
        &amp;quot;Field16&amp;quot;, &amp;quot;Field17&amp;quot;, &amp;quot;Field18&amp;quot;, &amp;quot;Field19&amp;quot;, &amp;quot;Field20&amp;quot;,
        &amp;quot;Field21&amp;quot;, &amp;quot;Field22&amp;quot;, &amp;quot;Field23&amp;quot;, &amp;quot;Field24&amp;quot;, &amp;quot;Field25&amp;quot;,
        &amp;quot;Field26&amp;quot;, &amp;quot;Field27&amp;quot;, &amp;quot;Field28&amp;quot;, &amp;quot;Field29&amp;quot;, &amp;quot;Field30&amp;quot;,
        &amp;quot;Field31&amp;quot;, &amp;quot;Field32&amp;quot;, &amp;quot;Field33&amp;quot;, &amp;quot;Field34&amp;quot;, &amp;quot;Field35&amp;quot;,
        &amp;quot;Field36&amp;quot;, &amp;quot;Field37&amp;quot;, &amp;quot;Field38&amp;quot;, &amp;quot;Field39&amp;quot;, &amp;quot;Field40&amp;quot;,
        &amp;quot;Field41&amp;quot;, &amp;quot;Field42&amp;quot;, &amp;quot;Field43&amp;quot;, &amp;quot;Field44&amp;quot;, &amp;quot;Field45&amp;quot;,
        &amp;quot;Field46&amp;quot;, &amp;quot;Field47&amp;quot;, &amp;quot;Field48&amp;quot;, &amp;quot;Field49&amp;quot;, &amp;quot;Field50&amp;quot;
    };

    requestPackage.ClientId = &amp;quot;ClientID&amp;quot;;
    requestPackage.UUID = &amp;quot;UUID&amp;quot;;
    requestPackage.MsgID = &amp;quot;MsgID&amp;quot;;
    requestPackage.SessionID = &amp;quot;SessionID&amp;quot;;
    requestPackage.ExtraInfo1 = &amp;quot;ExtraInfo1&amp;quot;;
    requestPackage.ExtraInfo2 = &amp;quot;ExtraInfo2&amp;quot;;

    // Start timing for data generation
    auto start_gen = std::chrono::high_resolution_clock::now();

    // Generate 10,000 rows of data, each with 50 fields
    for (size_t i = 0; i &amp;lt; 10000; ++i)
    {
        DataRow dataRow(50, &amp;quot;This is a test string&amp;quot;);
        requestPackage.DataBody.push_back(dataRow);
    }

    // End timing for data generation
    auto end_gen = std::chrono::high_resolution_clock::now();
    std::chrono::duration&amp;lt;double&amp;gt; duration_gen = end_gen - start_gen;

    // Display result generation time
    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Generation Time: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_gen.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;

    // Data merging using different methods
    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Performance:\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;

    {
        // Method 1: Using &#39;+=&#39; string concatenation
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys(&amp;quot;&amp;quot;);
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            for (auto&amp;amp; item : vec)
            {
                body += item + &amp;quot; &amp;quot;;
            }
            bodys += body + &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Data merging (+=) took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 2: Using ostringstream
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::ostringstream bodys;
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::ostringstream body;
            body &amp;lt;&amp;lt; &amp;quot;This is a test string&amp;quot;;
            for (auto&amp;amp; item : vec)
            {
                body &amp;lt;&amp;lt; item &amp;lt;&amp;lt; &amp;quot; &amp;quot;;
            }
            bodys &amp;lt;&amp;lt; body.str() &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ ostringstream Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 3: Pre-allocated memory
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys;
        bodys.reserve(1000 * 50 * 20); // Pre-allocate enough memory
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            body.reserve(50 * 20); // Pre-allocate memory for each row
            for (auto&amp;amp; item : vec)
            {
                body += item + &amp;quot; &amp;quot;;
            }
            bodys += body + &amp;quot;\n&amp;quot;;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Pre-reserved Data merging took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    {
        // Method 4: Using &#39;bodys = bodys + body + &amp;quot;\n&amp;quot;&#39;
        auto start_merge = std::chrono::high_resolution_clock::now();
        std::string bodys(&amp;quot;&amp;quot;);
        for (auto&amp;amp; vec : requestPackage.DataBody)
        {
            std::string body(&amp;quot;This is a test string&amp;quot;);
            for (auto&amp;amp; item : vec)
            {
                body = body + item + &amp;quot; &amp;quot;; // Note the use of &#39;body = body + item&#39;
            }
            bodys = bodys + body + &amp;quot;\n&amp;quot;; // Again, using &#39;bodys = bodys + body&#39;
        }
        auto end_merge = std::chrono::high_resolution_clock::now();
        std::chrono::duration&amp;lt;double&amp;gt; duration_merge = end_merge - start_merge;
        std::cout &amp;lt;&amp;lt; &amp;quot;+ Data merging (bodys = bodys + body + \&amp;quot;\\n\&amp;quot;) took: &amp;quot; &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(3) &amp;lt;&amp;lt; duration_merge.count() &amp;lt;&amp;lt; &amp;quot; seconds.\n&amp;quot;;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\n----------------------------------------\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;Data Merging Complete.\n&amp;quot;;
    std::cout &amp;lt;&amp;lt; &amp;quot;----------------------------------------\n&amp;quot;;
}

int main()
{
    try
    {
        create_large_string();
    }
    catch (const std::exception&amp;amp; e)
    {
        std::cerr &amp;lt;&amp;lt; &amp;quot;Caught exception: &amp;quot; &amp;lt;&amp;lt; e.what() &amp;lt;&amp;lt; std::endl;
    }

    std::cout &amp;lt;&amp;lt; &amp;quot;\nProgram finished.\n&amp;quot;;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43; 람다 표현식 매개변수 생명 주기</title>
        <link>https://blog.ttf248.life/ko/p/cpp-lambda-parameter-lifetime/</link>
        <pubDate>Wed, 13 Nov 2024 19:23:02 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/cpp-lambda-parameter-lifetime/</guid>
        <description>&lt;p&gt;C++에서 람다 표현식은 외부 변수를 캡처하여 사용할 수 있는 편리한 익명 함수입니다. 이는 람다를 유연한 프로그래밍 도구로 만듭니다. 하지만 람다 표현식의 매개변수 생명 주기는 특히 캡처 및 전달 시 특별히 주의해야 할 측면입니다.&lt;/p&gt;
&lt;h3 id=&#34;람다-표현식의-매개변수-생명-주기&#34;&gt;람다 표현식의 매개변수 생명 주기
&lt;/h3&gt;&lt;p&gt;람다 표현식의 매개변수 수명은 일반적으로 다른 C++ 함수와 동일합니다. 함수의 매개변수는 함수 호출 시 존재하며, 호출이 종료되면 수명이 끝납니다. 하지만 람다 표현식이 외부 변수를 캡처할 수 있기 때문에 매개변수의 수명은 캡처 방식에 영향을 받기도 합니다.&lt;/p&gt;
&lt;h3 id=&#34;포획과-매개변수-생명주기의-관계&#34;&gt;포획과 매개변수 생명주기의 관계
&lt;/h3&gt;&lt;h4 id=&#34;21-외부-변수-캡처&#34;&gt;2.1 외부 변수 캡처
&lt;/h4&gt;&lt;p&gt;C++ 람다 표현식은 외부 변수를 두 가지 방식으로 캡처할 수 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;값 캡처를 통해 외부 변수의 값이 람다 내부에 복사되고, 람다 내부의 복사본은 람다의 생명주기에 의해 제어됩니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按引用捕获&lt;/strong&gt;: 클로저를 통해 외부 변수 참조가 유지되며, 람다 내부의 참조는 원본 외부 변수를 가리키고, 생명 주기는 외부 변수에 의존합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda_by_value = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // 捕获x的副本
auto lambda_by_reference = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };  // 捕获x的引用

lambda_by_value();  // 打印10
lambda_by_reference();  // 打印10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;캡처된 변수는 다음과 같은 수명을 갖습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按值捕获&lt;/strong&gt;: 캡처된 시점에 외부 변수의 값이 lambda에 복사되고, lambda의 수명이 종료될 때 복사본이 파괴됩니다&lt;/li&gt;
&lt;li&gt;람다가 외부 변수의 참조를 보유합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;람다-매개변수&#34;&gt;람다 매개변수
&lt;/h4&gt;&lt;p&gt;람다 함수의 파라미터는 일반 함수 파라미터와 유사하며, 그 수명은 람다 함수 내에서만 유효합니다. 즉, 람다 호출 시 파라미터가 생성되고, 호출이 끝나면 파라미터의 수명이 종료됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;auto lambda = [](int a, int b) {
    std::cout &amp;lt;&amp;lt; a + b &amp;lt;&amp;lt; std::endl;
};
lambda(5, 10);  // a和b在这里是lambda的参数
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 예제에서 __INLINE_CODE_0__BOLD_2&lt;code&gt;b&lt;/code&gt;은 람다 표현식의 매개변수이며, 람다 호출 시 생성되고 람다 실행 종료 후 파괴됩니다&lt;/p&gt;
&lt;h3 id=&#34;외부-변수-캡처-시-라이프사이클-문제&#34;&gt;외부 변수 캡처 시 라이프사이클 문제
&lt;/h3&gt;&lt;h4 id=&#34;람다-외부에서-캡처된-변수가-유효한가&#34;&gt;람다 외부에서 캡처된 변수가 유효한가?
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;람다 호출 후 외부 변수가 파괴되더라도 람다 내부에서는 여전히 외부 변수의 복사본을 보유합니다. 따라서 외부 변수가 더 이상 존재하지 않더라도 람다 내부의 복사본은 안전하게 사용할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x 在lambda调用后修改
lambda();  // 打印10，捕获的是x的副本
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;按引用捕获&lt;/strong&gt;: 람다가 외부 변수의 참조를 캡처하는 경우, 람다 내부에서 해당 참조에 대한 접근은 외부 변수의 수명 주기(lifetime)에 의존합니다. 만약 외부 변수가 람다 실행 전에 소멸된다면, dangling reference 문제가 발생하여 정의되지 않은 동작을 초래할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int x = 10;
auto lambda = [&amp;amp;x]() { std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl; };
x = 20;  // x 在lambda调用前修改
lambda();  // 打印20，捕获的是x的引用
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;람다 함수의 실행 순서가 불확실하다면, 람다 함수가 실행될 때 캡처된 외부 변수가 유효한지 확인하는 것이 중요합니다&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Win11 로지텍 G431 헤드셋 드라이버 설치</title>
        <link>https://blog.ttf248.life/ko/p/win11-logitech-g431-headphone-driver-installation/</link>
        <pubDate>Wed, 05 Jun 2024 07:20:17 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/win11-logitech-g431-headphone-driver-installation/</guid>
        <description>&lt;p&gt;책 이어받아, 돌아와 보니 Ghub 업데이트가 있네. 좀 기뻤는데, 고객센터에서 해결했다고 하는 문제 드라이브 로딩 오류 문제는 고쳤다고 했는데, 결과적으로 설치하고 제거하고 또 설치해도 제대로 안 된다.&lt;/p&gt;
&lt;h2 id=&#34;배경&#34;&gt;배경
&lt;/h2&gt;&lt;p&gt;계속 고객 지원에 문의하여 해결 방안을 알아보니, 엔지니어의 원격 지원이 가능하다는 답변을 받았지만, 엔지니어의 근무 시간과 제 근무 시간이 겹쳐 어쩔 수 없이 포기했습니다. 이전 문제 해결 과정에서 남겨둔 자료를 다시 살펴보고, 직접 드라이버를 설치해 보려고 합니다.&lt;/p&gt;
&lt;h2 id=&#34;드라이버-설치-패키지-받기&#34;&gt;드라이버 설치 패키지 받기
&lt;/h2&gt;&lt;p&gt;로지텍 공식에서 별도의 장치 드라이버 설치 파일을 제공하지 않습니다. 드라이버 파일은 어떻게 얻을 수 있나요?&lt;/p&gt;
&lt;p&gt;이전 시스템 재설치 시 남겨진 시스템 이미지 설치 패키지를 활용하여, 로컬 가상 머신에서 시스템을 다시 설치할 수 있습니다. 깨끗한 환경에서 Ghub를 개별적으로 배포하고 헤드셋 장치를 가상 머신에 연결한 후, 드라이버 경로를 찾아 복사하면 됩니다.&lt;/p&gt;
&lt;p&gt;관련 경로:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\ProgramData\LGHUB&lt;/li&gt;
&lt;li&gt;C:\Windows\System32\DriverStore\FileRepository\logi_audio.inf_amd64_010b035044e24be4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;장치-관리자&#34;&gt;장치 관리자
&lt;/h2&gt;&lt;p&gt;두 번째 경로를 찾는 것이 중요하며, 먼저 Win11 시스템에서 드라이버 파일을 수동으로 관리하는 방법을 간단히 정리해 보겠습니다. 이 부분은 &lt;strong&gt;通过控制变量法来识别的，通过不断的插拔设备，在虚拟机里面分析设备管理器中的设备信息，识别到耳机合计有三个驱动需要处理&lt;/strong&gt;입니다. 그중 두 개의 드라이버는 시스템에 내장되어 있고, 하나는 로지텍에서 제공합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605073331.png&#34;
	width=&#34;433&#34;
	height=&#34;904&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;驱动管理器&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;47&#34;
		data-flex-basis=&#34;114px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;위 그림의 두 번째 드라이버는 로지텍에서 제공하는 것으로, 현재 장치 드라이버를 분석하고 가상 머신 내 모든 드라이버 경로를 뒤져서 logi로 시작하는 파일을 먼저 찾아 파일 비교를 하면 드라이버 파일을 찾을 수 있습니다. 전체 폴더를 복사하면 드라이버 설치 패키지를 얻게 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605073933.png&#34;
	width=&#34;946&#34;
	height=&#34;645&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;驱动安装包&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;드라이버-설치&#34;&gt;드라이버 설치
&lt;/h2&gt;&lt;p&gt;장치 관리자 인터페이스에서 &amp;lsquo;드라이버 업데이트&amp;rsquo;를 클릭한 다음, &amp;lsquo;내 컴퓨터에서 드라이버 찾아보기&amp;rsquo;를 클릭하면 다음과 같은 화면으로 진입합니다&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605074130.png&#34;
	width=&#34;528&#34;
	height=&#34;381&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;驱动安装&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;332px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;물론 열면 드라이버 하나만 보일 텐데, 그것은 일반 USB 드라이버입니다. &amp;ldquo;디스크에서 설치&amp;quot;를 선택하고 경로를 앞서 복사해둔 폴더로 지정하면 됩니다. 설치 후에는 드롭다운 목록에 로지텍 특유의 드라이버가 추가될 것이고, 장치 드라이버를 새로 설치된 드라이버로 전환하면 됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605074208.png&#34;
	width=&#34;593&#34;
	height=&#34;423&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;磁盘安装&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;인체학-장비-드라이버&#34;&gt;인체학 장비 드라이버
&lt;/h2&gt;&lt;p&gt;이 장치의 드라이버 파일은 시스템에서 제공하는 것이므로, 장치 드라이버 앞에 느낌표가 있는지 확인하고, 있다면 드라이버 선택 화면으로 들어가 다른 유형의 드라이버로 임시로 변경한 후 다시 원래대로 돌리면 정상적으로 복구됩니다&lt;/p&gt;
&lt;h2 id=&#34;완료&#34;&gt;완료
&lt;/h2&gt;&lt;p&gt;헤드폰 마이크 음량은 정상으로 돌아왔고, 익숙한 이어모니터 기능도 다시 작동합니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/win11-logitech-g431-headphone-driver-installation/20240605074823.png&#34;
	width=&#34;485&#34;
	height=&#34;739&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;侧音&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;157px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>로지텍 헤드셋 드라이버 설치 실패</title>
        <link>https://blog.ttf248.life/ko/p/logitech-headset-driver-installation-failed/</link>
        <pubDate>Fri, 31 May 2024 21:46:12 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/logitech-headset-driver-installation-failed/</guid>
        <description>&lt;p&gt;이런 것들을 전혀 모르면, 처음부터 공식 고객센터에 연락하면 몇 시간 낭비할 일 없었을 텐데&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/logitech-headset-driver-installation-failed/20240531220709.png&#34;
	width=&#34;693&#34;
	height=&#34;489&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GHUB&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;최근에 집에서 개발용으로 쓰던 데스크탑 C드라이브 용량이 부족해져서, 256GB의 반납된 SSD를 따로 분리해서 사용했는데, 자꾸 이것저것 만지작거려서 제대로 안 됐습니다. 상하이로 이사 온 후 여러 일들로 바빴는데, 드디어 지난주에 시간을 내서 시스템을 다시 설치했습니다.&lt;/p&gt;
&lt;p&gt;시스템 재설치는 문제 없이 진행되었고, 평소 사용하던 소프트웨어 설치나 개발 환경 구축에도 별다른 문제가 없었다. 며칠 뒤 휴식을 취하며 게임을 즐기려는데, 마우스와 헤드셋 드라이버가 아직 설치되지 않은 것을 알게 되었다. 이 두 장비는 모두 로지텍 제품이기에 GHUB 소프트웨어를 다운로드하여 하드웨어를 자동으로 인식하고 드라이버를 설치했다.&lt;/p&gt;
&lt;p&gt;하지만, 예상치 못한 문제가 발생했다. 마우스 드라이버는 문제없이 설치되었지만, 헤드셋 드라이버는 계속해서 &amp;ldquo;로딩 중&amp;rdquo; 상태였다. 최신 Windows 11 시스템과 로지텍 드라이버 간의 호환성 문제일 가능성을 의심하며 자료를 찾아보고 수동으로 드라이버를 설치하려 했지만, 문제는 해결되지 않았다.&lt;/p&gt;
&lt;p&gt;두 장비의 드라이버는 각각 어떤 역할을 하는지 간단히 설명해 줄 수 있나요?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;마우스 드라이버는 주로 마우스 이동 속도 조절 등의 기능을 담당합니다. 매크로 기능은 거의 사용하지 않으며, 저장된 설정을 불러오기만 하면 됩니다.&lt;/li&gt;
&lt;li&gt;이어폰 드라이버는 주로 이어모니터링 기능에 사용되며, 팀 음성 채팅 시 내 목소리를 들을 수 있어서 매우 유용합니다. 시스템 마이크 설정에도 비슷한 모니터링 기능이 있지만, 드라이버가 구현한 것만큼 효과적이지 않습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;몇 번이고 시도했음에도 이어폰 드라이버가 제대로 로드되지 않습니다. 오늘야말로 고객센터에 문의해서 해결책이 있는지 알아봐야겠다고 생각했습니다. 고객센터에서는 최근 서버 문제로 인해 드라이버 다운로드에 이상이 있다고 했습니다. 현재 문제를 처리 중이며, 다음 업데이트 후에 문제가 해결될 것이라고 하셨습니다.&lt;/p&gt;
&lt;p&gt;문제는 아직 해결되지 않았지만, 원인이 파악되었으니 조속히 해결되기를 바랍니다&lt;/p&gt;
&lt;h2 id=&#34;마우스-드라이버-설정&#34;&gt;마우스 드라이버 설정
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/logitech-headset-driver-installation-failed/20240531220930.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/logitech-headset-driver-installation-failed/20240531220903.png&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;G502&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>부동산 촉진 및 중앙은행, 4가지 조치 발표</title>
        <link>https://blog.ttf248.life/ko/p/promote-real-estate-central-bank-four-measures/</link>
        <pubDate>Fri, 17 May 2024 20:42:25 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/promote-real-estate-central-bank-four-measures/</guid>
        <description>&lt;ul&gt;
&lt;li&gt;상품 주택 금리 상한 해제&lt;/li&gt;
&lt;li&gt;내일부터 주택도시기금 금리 0.25%p 인하&lt;/li&gt;
&lt;li&gt;최초 주택 구매 시 계약금 비율이 15%로 인하되었습니다&lt;/li&gt;
&lt;li&gt;3천억 위안 규모의 주택 보조 대출&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;전국-차원의-주택-구매자-1채-및-2채에-대한-상업용-개인-주택담보대출-금리-정책-하한제-폐지&#34;&gt;전국 차원의 주택 구매자 1채 및 2채에 대한 상업용 개인 주택담보대출 금리 정책 하한제 폐지
&lt;/h2&gt;&lt;p&gt;중국인민은행 상하이본부, 각 성·자치구·직轄시 및 계획단일시 분행; 각 국유상업은행, 중국우정저축은행, 각 주식제은행:&lt;/p&gt;
&lt;p&gt;당 중앙 및 국무원의 결정과 배치에 따라, 중국 부동산 시장의 공급과 수요 관계의 새로운 변화와 인민대중의 양질 주택에 대한 새로운 기대에 부응하고, 부동산 시장의 안정적이고 건전한 발전을 촉진하기 위하여, 상업용 개인 주택 담론 이자율 정책 조정 관련 사항을 다음과 같이 통지합니다&lt;/p&gt;
&lt;p&gt;최저 주택담보대출 금리 정책 폐지&lt;/p&gt;
&lt;p&gt;인민은행 각 성급 분행은 인도시행 원칙에 따라 각 성급 시장이자율담합기구의 지도를 받아 관할 지역 내 각 도시 부동산시장 상황 및 지방정부 통제 요구에 따라 해당 지역 내 각 도시 상업용 개인주택담보대출 금리 하한선 설정 여부 및 수준(있을 경우)을 자율적으로 결정한다&lt;/p&gt;
&lt;p&gt;은행 금융기관은 각 성(省)별 시장금리 결정 자율 규제 메커니즘에서 정한 금리 하한(有无)을 고려하고, 본 기관의 경영 상황 및 고객 위험 상황 등을 종합하여 각 대출 건별 구체적인 금리 수준을 합리적으로 결정해야 한다&lt;/p&gt;
&lt;h2 id=&#34;개인-주택-담보-대출-금리-025p-인하&#34;&gt;개인 주택 담보 대출 금리 0.25%p 인하
&lt;/h2&gt;&lt;p&gt;중국인민은행 상하이본부, 각 성·자치구·직轄시 및 계획단일시 분행; 각 정책성 은행, 국유상업은행, 중국우정저축은행, 각 주식제 상업은행:&lt;/p&gt;
&lt;p&gt;인민은행은 2024년 5월 18일부터 개인 주택 공적금 대출 금리를 소폭 인하한다고 결정했습니다. 5년 미만(5년 포함) 및 5년 이상 첫 번째 주택 공적금 대출 금리는 각각 2.35%와 2.85%, 5년 미만(5년 포함) 및 5년 이상 두 번째 주택 공적금 대출 금리는 각각 2.775% 이하, 3.325%로 조정될 예정입니다.&lt;/p&gt;
&lt;h2 id=&#34;최소-15의-초기-자금-조달이-필요합니다&#34;&gt;최소 15%의 초기 자금 조달이 필요합니다
&lt;/h2&gt;&lt;p&gt;중국인민은행 상하이본부, 각 성·자치구·직轄시 및 계획단일시 분행; 국가금융감독관리총국 각 감독국; 각 국유상업은행, 중국우정저축은행, 각 주식제상업은행:&lt;/p&gt;
&lt;p&gt;당 중앙 및 국무원의 결정과 배치에 따라, 중국 부동산 시장의 공급과 수요 관계의 새로운 변화와 인민대중의 양질 주택에 대한 새로운 기대에 부응하며, 부동산 시장의 안정적이고 건전한 발전을 촉진하기 위하여, 개인 주택 담론 정책 관련 사항을 다음과 같이 통지합니다&lt;/p&gt;
&lt;p&gt;주택담보대출을 통해 주거용 상품 가구를 구매하는 경우, 첫 주택 구입 시 상업은행 주택담보대출의 최소 초도불입금 비율은 15% 이하로 조정되고, 두 번째 주택 구입 시 상업은행 주택담보대출의 최소 초도불입금 비율은 25% 이하로 조정된다&lt;/p&gt;
&lt;p&gt;이와 관련하여, 중국인민은행 각 성급 분행 및 국가금융감독관리총국 각 파견기관은 도시 정부의 통제 요구에 따라, 도시별 맞춤형 원칙에 의거하여 관할 지역 내 주택 구매 시 첫 번째 및 두 번째 주택 구입을 위한 상업용 개인주택담보대출 최소 자기자본 비율 하한선을 자율적으로 결정한다&lt;/p&gt;
&lt;h2 id=&#34;중앙은행-3천억-위안-규모의-주택담보재융자-설립&#34;&gt;중앙은행, 3천억 위안 규모의 주택담보재융자 설립
&lt;/h2&gt;&lt;p&gt;오후 4시, 주택도시건축부, 자연자원부, 중국인민은행, 국가금융감독관리총국 4개 부서가 국무원 정책 정례 브리핑에 모여 부동산 공약 이행 지원 관련 정책 상황을 설명했습니다&lt;/p&gt;
&lt;p&gt;상회에서 중국인민은행 부행장 타오링이 발표한 바에 따르면, 중앙은행은 3천억 위안 규모의 주택보조재금융을 설립하여 지방 국유기업이 합리적인 가격으로 이미 건설되었으나 미매각된 상업용 주택을 매입하여 분양형 또는 임대형 주택보조주택으로 활용하도록 지원할 예정이다. 이를 통해 은행 대출 5천억 위안 규모를 유도할 것으로 예상된다.&lt;/p&gt;
&lt;p&gt;중국 인민은행에 따르면, 주택 보조 대출의 기간은 1년 단위로 최대 4회 연장 가능하며, 금리는 1.75%입니다. 이는 21개 전국의 은행을 대상으로 하며, 은행들이 도시 정부가 선정한 지방 국유 기업에 대한 대출을 장려하고, 이미 건설되어 미매각된 상업용 주택을 매입하여 주택 보조 용도로 활용하도록 유도합니다. 매입되는 상업용 주택은 부동산 개발사의 이미 건설 완료되었으나 아직 판매되지 않은 상품으로 엄격히 제한됩니다.&lt;/p&gt;
&lt;p&gt;이번 정책과 관련하여, 최근 중앙은행이 보조주택 재융자 대출에 관한 사항을 담은 통지를 발표할 예정이다&lt;/p&gt;</description>
        </item>
        <item>
        <title>은행 마케팅 전략과 개인 재무 관리의 균형 예술</title>
        <link>https://blog.ttf248.life/ko/p/bank-marketing-personal-finance-balance/</link>
        <pubDate>Sun, 31 Mar 2024 01:33:48 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/bank-marketing-personal-finance-balance/</guid>
        <description>&lt;p&gt;최근 집 수리 때문에 생활비가 늘어났습니다. 평소에도 신용카드를 사용하고 있고, 결제 주기에 맞춰 상환해 왔지만, 현금은 충분한 편이라 통장이나 머니마켓 펀드에 넣어 추가 이자 수익을 얻는 쪽이 더 선호됩니다. 또한, 재정적 안정성을 위해 자동 결제 기능을 설정하여 만기일에 맞춰 신용카드 대금을 제때에 상환할 수 있도록 하고 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;은행-현황-예금-증가-대출-감소&#34;&gt;은행 현황: 예금 증가, 대출 감소
&lt;/h2&gt;&lt;p&gt;경제 불확실성이 커지면 사람들은 소비나 투자보다 저축을 선호하게 됩니다. 이는 은행의 예금 증가를 가져오지만, 동시에 은행이 예금자에게 더 많은 이자를 지급해야 함을 의미합니다. 반면, 소비와 투자의 감소로 인해 대출 수요가 줄어들고, 은행은 대출을 통해 이자 수익을 얻기 어려워집니다.&lt;/p&gt;
&lt;p&gt;고객을 유치하고 유지하기 위해 은행은 더욱 경쟁력 있는 예금 금리를 제공해야 하며, 이는 은행의 순이자마진을 더욱 압박한다. 동시에 경제 성장과 소비를 촉진하기 위해 중앙은행이 기준 금리 인하 정책을 시행할 수 있는데, 이 또한 은행의 대출 금리에 영향을 미쳐 은행 수익성에 영향을 줄 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;은행-마케팅-전략-사용자-습관-형성&#34;&gt;은행 마케팅 전략: 사용자 습관 형성
&lt;/h2&gt;&lt;p&gt;최근 상환 기일이 다가왔습니다. 먼저, 중국은행에서 1년 무이자 분할 상환 서비스를 제공했고, 이어서 중신은행에서는 연율 1.9%의 할인된 이자율로 분할 상환 혜택을 제공했습니다. 이러한 혜택에 발맞춰 저는 두 은행의 분할 상환 서비스를 이용하기로 결정했습니다.&lt;/p&gt;
&lt;p&gt;은행이 사용자 습관을 만들기 위해 정말 아낌없이 투자한다는 것을 깨달았다. 은행의 정의에 따르면 나는 은행의 우수 고객에 해당한다. 현재 은행 자금 대출이 어려운 상황에서, 나에게 할부 의식을 심어주는 것은 미래에 내가 겪을 수 있는 자금 운반 어려움에 대비하는 것과 같다. 그때 그들은 내게서 더 많은 이자 수입을 얻을 수 있을 것이다. 결국, 신용카드 청구서 분석의 이자는 결코 낮지 않다는 것은 누구나 알고 있다.&lt;/p&gt;
&lt;p&gt;은행은 무이자 분할 납부 서비스와 낮은 이자율의 분할 납부 혜택을 제공함으로써 신용카드의 사용 빈도와 한도를 늘리는 동시에 사용자에게 긍정적인 이미지를 구축했습니다. 이러한 전략 변화는 은행이 시장 변화에 빠르게 대응하고 고객의 요구를 깊이 이해하는 것을 보여줍니다. 이러한 방식으로 은행은 자금 대출의 어려움을 해결했을 뿐만 아니라 미래 수익을 위한 기반을 마련했습니다.&lt;strong&gt;赚钱不是只看当下，放眼未来才能长长久久&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;개인-재정-관리의-중요성&#34;&gt;개인 재정 관리의 중요성
&lt;/h2&gt;&lt;p&gt;은행의 할부 혜택이 매력적으로 들릴 수 있지만, 사용자로서 과도한 신용카드 할부 의존이 가져올 위험을 인지해야 합니다. 자신의 상환 능력과 미래 자금 필요를 충분히 고려하고, 단기적인 재정적 편의 때문에 장기적인 부채 문제에 빠지지 않도록 주의해야 합니다. 개인 재무 관리의 핵심은 현재의 요구와 미래 계획의 균형입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/bank-marketing-personal-finance-balance/image.png&#34;
	width=&#34;421&#34;
	height=&#34;809&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;招商分期账单&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;52&#34;
		data-flex-basis=&#34;124px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>게임의 다차원성: 심리 발달과 사회적 오락의 교차점</title>
        <link>https://blog.ttf248.life/ko/p/games-multidimensionality-psychological-development-social-entertainment-intersection/</link>
        <pubDate>Sat, 30 Mar 2024 15:07:45 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/games-multidimensionality-psychological-development-social-entertainment-intersection/</guid>
        <description>&lt;p&gt;오늘날 디지털 시대에 게임은 단순한 오락거리를 넘어 일상생활에서 없어서는 안 될 존재가 되었습니다. 심리학적으로 볼 때, 게임은 다양한 연령대의 사람들의 심리 발달에 서로 다른 역할을 하며, 사회적 교류와 즐거움과도 밀접하게 연결되어 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;심리-상태&#34;&gt;심리 상태
&lt;/h2&gt;&lt;p&gt;젊은 세대는 자아를 탐색하고 정체성을 확립하는 단계에 있으며, &lt;strong&gt;游戏为他们提供了一个低成本的尝试和探索环境&lt;/strong&gt; 다양한 역할과 삶을 경험하며 호기심과 탐구 욕구를 충족할 수 있습니다. 하지만 나이가 들어감에 따라 개인의 관심사와 가치관이 안정화되면서 게임은 더 이상 그들의 목표와 흥미를 반영하지 않을 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;사회성&#34;&gt;사회성
&lt;/h2&gt;&lt;p&gt;동시에, 게임은 사회 활동의 일부가 되었으며, 특히 젊은 세대에게 그러했습니다. 그들은 게임을 통해 친구를 사귀고 소셜 네트워크를 구축했으며, 게임은 사회적 교류의 다리 역할을 했습니다. 하지만 나이가 들어감에 따라 사람들의 교제 관계는 점차 안정되고, 사회적 욕구는 다른 더 성숙한 방식으로 충족될 수 있으며, 이로 인해 게임의 사회적 역할은 상대적으로 약화됩니다.&lt;/p&gt;
&lt;h2 id=&#34;소셜-속성-여자친구-데려가기&#34;&gt;소셜 속성: 여자친구 데려가기
&lt;/h2&gt;&lt;p&gt;국내에서는 연애 교육이 부족하고, 어릴 때는 부모님이 공부만 하라고 강요하시고, 졸업하자마자 바로 연애를 시키는 현상이 흔하다&lt;/p&gt;
&lt;p&gt;학업, 직장 생활의 바쁘심이나 교류 부족으로 현실에서 안정적인 정서적 관계를 맺지 못해 고독감을 느끼고 관심받고 싶어 하는 사람들이다. &lt;strong&gt;그들은 여성 플레이어를 돕고 보호함으로써 필요로 되고 존중받는다는 느낌을 경험하며 정서적 만족감을 얻는다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;동시에, 게임 내 상호작용 규칙이 명확하고 환경이 통제되어 현실의 복잡성과 불확실성에 비해 안정감과 안전감을 제공하며, 현실 관계에서의 불확실성에 대한 두려움을 줄여준다. 하지만, 장기적으로 게임 내 가상적 만족감에 의존하면 현실에서 건강한 정서적 관계를 형성하고 유지하는 능력에 영향을 미칠 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;현실적인-압박&#34;&gt;현실적인 압박
&lt;/h2&gt;&lt;p&gt;게임은 플레이어가 현실의 스트레스, 어려움 또는 불쾌한 감정에서 일시적으로 도피할 수 있는 가상 세계를 제공합니다. 특히 학업 스트레스, 가정 문제 또는 대인 관계의 어려움을 겪는 젊은이들에게 게임은 위안과 휴식을 구하는 방법이 될 수 있습니다.&lt;/p&gt;
&lt;p&gt;게임은 플레이어가 임무를 완료하거나, 레벨을 올리거나, 상대를 이길 때 성취감과 인정을 받도록 설계되는 경우가 많다. 젊은이들은 게임에서 칭찬받고 인정받는 느낌을 얻을 수 있기 때문에 중독될 가능성이 있는데, 이러한 감정은 현실에서는 부족할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;나이가-들면-더-이상-놀고-싶지-않다&#34;&gt;나이가 들면 더 이상 놀고 싶지 않다
&lt;/h2&gt;&lt;p&gt;젊은 시절에는 사회적 책임과 압박이 상대적으로 적어 게임에 더 많은 시간과 에너지를 쏟을 수 있었지만, 직장 생활이나 가정을 시작하면서 책임감이 늘어나고 시간과 에너지가 더욱 귀해지면서 게임은 시간 낭비로 여겨질 수 있고 우선적인 휴식 방법으로 선택하기 어려워진다&lt;/p&gt;
&lt;p&gt;나이가 들면서 사람들의 인지 능력과 관심사는 변하기 마련이다. 젊을 때는 속도가 빠르고 화려한 게임에 흥미를 느낄 수 있지만, 경험이 쌓이면 전략적이고 스토리가 강하거나 깊이 있는 게임을 선호하게 된다. 만약 시장의 게임들이 이러한 변화하는 요구를 충족시키지 못하면 자연스럽게 관심은 줄어들 것이다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>위안화 환율이 뚜렷한 변동성을 보이며 7.26을 돌파했습니다</title>
        <link>https://blog.ttf248.life/ko/p/renminbi-exchange-rate-volatility/</link>
        <pubDate>Sat, 23 Mar 2024 00:31:13 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/renminbi-exchange-rate-volatility/</guid>
        <description>&lt;p&gt;위안화 환율 변동과 대주식 시장 하락은 전 세계 중앙은행의 움직임, 스위스 중앙은행의 예기치 않은 금리 인하, 미국 경제 지표의 흐름, 그리고 시장의 인플레이션 및 금리 인하 기대 조정 등과 관련이 있을 수 있습니다. 이러한 요인들이 외환 시장과 주식 시장에 복합적으로 작용하여 위안화 환율 변동과 A주 시장 하락을 초래했습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;제공해주신 링크 내용에 따르면 2024년 3월 22일, 위안화 환율이 상당한 변동을 보였습니다. 자세한 내용은 다음과 같습니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;美元兑离岸人民币汇率突破&lt;/strong&gt;: 당일 개장 시, 위안화가 약세를 보이며 달러 대비 온란위안 환율이 중반 거래에서 7.24를 넘어 7.24926까지 상승했고, 달러 대비 해안위안 환율 또한 7.22를 넘어 7.22360까지 상승하며 모두 2023년 11월 17일 이후 최고치를 경신했다. 자이언스통신 기자 마감 시점 기준으로 달러 대비 온란위안 환율은 7.26 고점을 돌파했으며, 최저치는 7.2639까지 하락했고 추세는 지속 중이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3월 22일, 인민은행이 발표한 위안화-달러 중간환율은 7.1004로, 62개 기점 하락 조정되었으며, 조정 폭이 다소 확대되었다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 요인의 영향으로 A주 3대 지수는 하락 출발 후 하락세를 이어갔으며, 모두 1% 이상의 하락폭을 기록했습니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;홍콩의 한 투자기관에서 베테랑 외환 거래원이, 스위스 중앙은행의 예상치 못한 금리 인하로 인해 달러가 부상했고, 미국 경제의 건전함과 인플레이션 지속성으로 인한 금리 인하 지연 우려 등이 복합적으로 작용하여 달러 지수가 상승했다고 밝혔다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全球央行动态&lt;/strong&gt;: 이번 주가 글로벌 시장의 &amp;ldquo;슈퍼 중銀 주&amp;quot;로, 미국, 일본, 영국, 호주 등 다수국 중銀이 금리 결정을 발표합니다. 스위스 중銀의 예상치 못한 인하 발표는 팬데믹 이후 G10 국가 중銀 최초의 인하 조치이며, 이는 시장 균형을 깼습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;광다은행 금융시장부 연구원 주무화는 최근 위안화가 다소 변동성을 보였음에도 불구하고, 전반적인 폭은 달러 등 주요 통화에 비해 컸지 않으며, 단기적 변동성은 연내 위안화의 안정적인 상승 추세를 바꾸지 않을 것이라고 밝혔다&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
        </item>
        <item>
        <title>파이썬 딕셔너리에 사용자 정의 객체 저장 시 참조와 깊은 복사의 중요성</title>
        <link>https://blog.ttf248.life/ko/p/python-dictionary-custom-objects-reference-vs-deepcopy/</link>
        <pubDate>Fri, 22 Mar 2024 01:08:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/python-dictionary-custom-objects-reference-vs-deepcopy/</guid>
        <description>&lt;p&gt;파이썬 프로그래밍에서 딕셔너리는 키-값 쌍을 연결하고 데이터를 효율적으로 검색하고 조작할 수 있는 매우 강력한 자료 구조입니다. 사용자 정의 객체를 딕셔너리에 저장하려고 할 때, 중요한 개념은 파이썬의 객체 할당이 실제로는 객체의 깊은 복사라기보다는 참조 할당이라는 것입니다. 즉, 사용자 정의 객체를 딕셔너리에 넣으면 딕셔너리에는 해당 객체의 참조가 저장되고 객체의 새로운 복사본이 저장되는 것이 아닙니다.&lt;/p&gt;
&lt;h2 id=&#34;사용자-정의-객체-저장의-기본-예제&#34;&gt;사용자 정의 객체 저장의 기본 예제
&lt;/h2&gt;&lt;p&gt;가정해 봅시다, 간단한 &lt;code&gt;Person&lt;/code&gt; 클래스가 있다고 하면:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# 创建一个 Person 对象
p1 = Person(&amp;quot;Alice&amp;quot;, 30)

# 将对象存储到字典中
people_dict = {}
people_dict[&amp;quot;alice&amp;quot;] = p1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 예제에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 字典现在包含一个键为 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 的项，其值是对 __INLINE_CODE_2__BOLD_7&lt;code&gt;p1&lt;/code&gt;BOLD_8__INLINE_CODE_4__의 속성:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;p1.age = 31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그러면 딕셔너리로 해당 객체에 접근하면 나이가 업데이트된 것을 확인할 수 있습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(people_dict[&amp;quot;alice&amp;quot;].age)  # 输出：31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사전에는 &lt;code&gt;Person&lt;/code&gt; 객체의 독립적인 복사본이 저장되는 것이 아니라, 동일한 메모리 주소를 가리키는 참조가 저장되기 때문입니다&lt;/p&gt;
&lt;h2 id=&#34;깊은-복사와-얕은-복사의-차이점&#34;&gt;깊은 복사와 얕은 복사의 차이점
&lt;/h2&gt;&lt;p&gt;중첩된 데이터 구조나 사용자 정의 객체를 다룰 때는 이러한 참조 동작으로 인해 예기치 않은 결과가 발생할 수 있습니다. 예를 들어, 사용자 정의 객체에 변경 가능한 속성(예: 리스트나 다른 사용자 정의 객체)이 포함되어 있으면, 딕셔너리에 그런 객체를 직접 저장하고 수정하면 딕셔너리를 통해 접근한 객체에도 영향을 미칩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Address:
    def __init__(self, street, city):
        self.street = street
        self.city = city

class Person:
    def __init__(self, name, age, address):
        self.name = name
        self.age = age
        self.address = address

address = Address(&amp;quot;Main St.&amp;quot;, &amp;quot;Springfield&amp;quot;)
p1 = Person(&amp;quot;Bob&amp;quot;, 40, address)
people_dict[&amp;quot;bob&amp;quot;] = p1

# 修改原始地址对象
address.city = &amp;quot;Shelbyville&amp;quot;

# 字典中的人的地址也变了
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 输出：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;解决办法：深拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이러한 공유 상태로 인한 문제를 피하기 위해 때로는 딕셔너리에 객체의 완전한 복사본을 저장하도록 해야 하며, 이를 위해 Python은 &lt;strong&gt;copy&lt;/strong&gt;() 함수를 제공합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import copy

# 使用深拷贝存储对象
people_dict[&amp;quot;bob_deepcopy&amp;quot;] = copy.deepcopy(p1)

# 此时即使修改原始地址对象，深拷贝的对象不会受影响
address.city = &amp;quot;Capital City&amp;quot;
print(people_dict[&amp;quot;bob&amp;quot;].address.city)  # 输出：Capital City
print(people_dict[&amp;quot;bob_deepcopy&amp;quot;].address.city)  # 输出：Shelbyville
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;파이썬에서 딕셔너리로 사용자 정의 객체를 저장할 때는 기본적으로 객체 참조가 저장된다는 점에 유의해야 합니다. 독립적인 상태를 유지해야 하는 경우에는 공유 참조로 인한 예기치 않은 데이터 변경을 피하기 위해 깊은 복사(&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;)를 사용하십시오.&lt;/p&gt;</description>
        </item>
        <item>
        <title>전분 소세지와 길거리 노점: 자본의 뉴스 영향력</title>
        <link>https://blog.ttf248.life/ko/p/sausages-and-street-vendors-capital-news-influence/</link>
        <pubDate>Mon, 18 Mar 2024 00:31:58 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/sausages-and-street-vendors-capital-news-influence/</guid>
        <description>&lt;p&gt;315은 실제로는 기골반에 대한 보도를 하지 않았으며, 이 문제는 CCTV 3·15 갈라의 공식 노출과 동시에 발생한 다른 식품 안전 문제들을 혼동하고 있다&lt;/p&gt;
&lt;h2 id=&#34;죄송합니다-번역할-중국어-텍스트가-제공되지-않았습니다-텍스트를-제공해-주시면-번역해-드리겠습니다&#34;&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
&lt;/h2&gt;&lt;p&gt;315晚会에서 총 아홉 개 업체가 언급되었는데, 핫바는 없었고, 현재 거론된 대형 브랜드들은 인기가 없고, 오히려 전국 어디든 흔히 볼 수 있는 간식인 핫바를 문제 삼으니 핫바가 희생양처럼 보이는 느낌이다. 온라인 뉴스 출처를 확인해 보니 중앙방송망에서 3월 15일에 핫바에 대한 조사를 발표했는데, 몇몇 업체의 성분만 나열했고, 이 업체들은 주로 핫바를 생산하지도 않으며, 성분에 문제가 있는 것처럼 보이지 않는다. 그런 다음 b 기자라는 사람이 공장 직원의 말을 인용하여 때로는 닭 뼈 반죽으로 닭고기를 대체한다고 주장하고, 타오바오의 반려동물 사료 판매자에게 닭 뼈 반죽이 식용 가능한지 물어봤다. 이건 어리석은 질문 아니겠는가? 반려동물 사료 업체에서 사람이 먹을 수 있다고 말하겠는가? 이후 핫바에 닭 뼈 반죽이 들어있다, 닭 뼈 반죽은 사람이 먹을 수 없다는 소문이 퍼져나갔다.&lt;/p&gt;
&lt;p&gt;지금 상황이 그렇다 보니 많은 공장들이 문을 닫을 판이고, 전국적으로 수십만 명의 소상공인들은 물건을 팔아도 장사를 못 해 어려움을 겪고 있습니다&lt;/p&gt;
&lt;h2 id=&#34;현실-그대로&#34;&gt;현실 그대로
&lt;/h2&gt;&lt;p&gt;샤오샹청보(潇湘晨报) 17일 보도에 따르면, 3월 16일 허난성(河南省) 산먼샤(三門峽)에서 ‘전분 소시지 건물 붕괴’ 사건 다음 날, 한 노파가 전분 소시지를 팔기 위해 장사를 벌였으나 2시간이 지나도록 아무도 사지 않았고 결국 스스로 먹어 치웠다. 촬영자는 평소에 전분 소시지 4~5개를 먹을 정도이지만, 닭뼈 반죽이 들어있다는 사실을 알고는 단번에 끊었다고 한다. 그는 사건이 보도된 후에도 사람들이 전분 소시지를 사러 올까 궁금했지만, 판매자가 2시간 동안 한 개도 팔지 못하는 것을 목격했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;아저씨는 찹쌀빵 사건 같은 거 전혀 모르셔, 그냥 오늘 갑자기 사람들이 핫도그를 안 사 먹는다는 것만 아시더라고&lt;/li&gt;
&lt;li&gt;할머니 말씀이 맞아요, 집안 살림 때문에 그런 것뿐이에요. 할머니는 제품에 문제가 있는지, 품질은 되는지조차 모르시고 뼈진흙이라는 단어 또한 잘 모르는 분들이에요. 그들은 인터넷을 이용하는 법도 모른 채, 밑바닥에서 살아남기 위해 애쓰시는 거잖아요.&lt;/li&gt;
&lt;li&gt;전분 소시지는 망했지만, 그 대가를 치르는 것은 밑바닥에서 일하는 사람들이다. 고통스러운 과정이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;죄송합니다-번역할-중국어-텍스트가-제공되지-않았습니다-텍스트를-제공해-주시면-번역해-드리겠습니다-1&#34;&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
&lt;/h2&gt;&lt;p&gt;몇 년 전 어느 오후, 북경에 온 동료와 점심을 먹으러 가던 길에 꼬치와 철판 스테이크를 파는 작은 포장마차를 지나쳤다&lt;/p&gt;
&lt;p&gt;지금 당장 이런 첨단 기술로 만든 소시지나 리프레인(돼지고기 안심)을 누가 먹겠어? 내가 생각하기에 며칠 전부터 먹은 햄소세지는 대략 10년 전쯤이었으니까&lt;/p&gt;
&lt;p&gt;동료가 잠시 망설이다가 조심스럽게 말했습니다. “아마 대도시에서 사셨기 때문일 거예요. 사실 고향처럼 작은 지역에서는 榨菜(zà cài), 라면, 소세지가 일상적인 음식이었어요.”&lt;/p&gt;
&lt;p&gt;학교 다닐 때, 시험을 만점 받아야만 아빠가 길에서 나에게 소시지 한 번 사줬다. 위생 문제 때문이 아니라, 소시지가 1.5원이었고 그 돈으로 두 근의 채소를 살 수 있었기 때문이다.&lt;/p&gt;
&lt;p&gt;비슷한 즉석밥, 탄산음료, 쫄병을 “쓰레기 식품”이라고 부르는 말은 베이징에 가서 공부를 하고 나서야 들었다&lt;/p&gt;
&lt;p&gt;방금 내뱉은 말에서 오만함이 느껴져서 더는 말을 하지 않았다. 하지만 이 일은 내 기억에 깊이 남을 것이다.&lt;/p&gt;
&lt;p&gt;사실, 이게 중국 대부분 백성들의 일상이다&lt;/p&gt;
&lt;p&gt;그들의 삶에는 고급스러운 “지중해식 식단”, “유기농 채소”, “비GMO 대두” 같은 것들이 없었다. 그들은 저렴하고 맛있는 채소, 고기, 간식을 살 수 있는지, 온 가족이 소박한 행복을 누릴 수 있는지만 신경썼다.&lt;/p&gt;
&lt;p&gt;선반 위의 물건들이 어떤 성분으로 이루어져 있는지, 그들의 건강을 해칠 수 있는지, 그리고 특이한 화학 성분이 있는지&lt;/p&gt;
&lt;p&gt;원래 그들이 신경 쓰고 이해해야 할 일이 아니었어&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;他们就是朴素的相信，如果有问题的东西，应该有人管不会出现在货架上的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;하지만 315 행사를 보고 나서야 비로소 알게 되었다&lt;/p&gt;
&lt;p&gt;시장의 전자저울, 주유소의 연료 펌프에는 고기술 개조 마더보드가 숨겨져 있어, UP주가 맞을 위험을 감수하고 영상을 촬영해야 감독 당국이 뒤늦게 알아차려 조사할 수 있다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直播间的梅菜肉、小摊上的淀粉肠，原来用的是烂肉、骨粉，需要央视的记者卧底调查拍下录像，才会有人去核实，调查货源去向；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;텔레비전 채널과 공항 광고에서 호들갑스럽게 홍보하던 “건강주”가 누군가의 폭로 영상으로 모든 속사정이 드러난 후, 갑자기 단숨에 철수하여 시민들의 눈앞에서 사라졌다&lt;/p&gt;
&lt;p&gt;일년에 한 번 있는 315, 매번 추첨해서 다섯 여섯 개나 오랫동안 팔던 제품을 없애는데 충분한가?&lt;/p&gt;
&lt;p&gt;그 사람들, 이미 먹어보고 샀는데, 누구를 찾아야 할까요?&lt;/p&gt;</description>
        </item>
        <item>
        <title>새로 설치한 기가급 광케이블, 속도 측정 시 100메가에 그치는 이유는 무엇인가요?</title>
        <link>https://blog.ttf248.life/ko/p/new-gigabit-fiber-slow-speed/</link>
        <pubDate>Mon, 18 Mar 2024 00:29:02 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/new-gigabit-fiber-slow-speed/</guid>
        <description>&lt;p&gt;집안 네트워크를 번개처럼 빠뜨리고 싶으신가요? 핵심은 랜 케이블 선택, 광모뎀 및 공유기 설정, 그리고 눈에 띄지 않는 작은 디테일을 이해하는 것입니다. 이 블로그는 6급 랜 케이블로 기가비트 네트워크를 구축하고 간단한 장치 점검과 설정을 통해 네트워크 속도를 제약 없이 유지하는 방법을 쉽게 알려드립니다. 함께 탐색하며 집안 인터넷 속도를 높여 봅시다!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/new-gigabit-fiber-slow-speed/image.png&#34;
	width=&#34;1001&#34;
	height=&#34;590&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;手动修复&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;407px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;제1장-네트워크-전송-매체-심층-분석&#34;&gt;제1장: 네트워크 전송 매체 심층 분석
&lt;/h2&gt;&lt;p&gt;기가비트급 네트워크 접근을 논할 때, 정보를 고속으로 전송하는 매개체인 랜 케이블이 매우 중요한 역할을 합니다. 다음은 5급, 6급 및 7급 랜 케이블에 대한 자세한 설명입니다.&lt;/p&gt;
&lt;h3 id=&#34;죄송합니다-번역할-중국어-텍스트가-제공되지-않았습니다-텍스트를-제공해-주시면-번역해-드리겠습니다&#34;&gt;죄송합니다. 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
&lt;/h3&gt;&lt;p&gt;다섯 종류의 네트워크 케이블, CAT5라고도 하며, 비교적 초기에 널리 사용된 트위스트 페어 케이블입니다. 각 선 코어는 정밀한 나선 구조 설계로 인한 신호 간섭을 줄입니다. 주로 10/100Mbps의 빠른 이더넷에 적용되며 최대 전송 주파수는 약 100MHz입니다. 과거에는 널리 사용되었지만, 현재 기가비트 이상의 속도를 요구하는 경우 다섯 종류의 네트워크 케이블은 물리적인 한계로 인해 충족하지 못합니다.&lt;/p&gt;
&lt;h3 id=&#34;두-번째&#34;&gt;두 번째
&lt;/h3&gt;&lt;p&gt;기술 발전과 함께 6류 네트워크 케이블이 등장했습니다. 5류 케이블보다 더 엄격한 제조 기준과 첨단 구조 설계로 제작되어, 전반적인 내성능과 데이터 전송 효율을 크게 향상시켰으며, 최대 1Gbps의 전송 속도를 지원합니다. 이상적인 환경에서는 100미터까지 전송이 가능하여, 기가비트 네트워크 접속 요구 사항에 정확히 부합합니다.&lt;/p&gt;
&lt;h3 id=&#34;3&#34;&gt;3
&lt;/h3&gt;&lt;p&gt;7가지 규격의 네트워크 케이블은 현재 트위스트 페어 기술의 최첨단을 나타냅니다. 전송 속도가 획기적으로 향상되었을 뿐만 아니라 이론적으로 최대 10Gbps의 초고속을 지원하며, 각 선 쌍 간 및 전체 외부를 포함한 완벽한 차폐 시스템이 적용되어 외부 전자파 간섭과 근접 교차 누화를 크게 줄여 데이터 전송의 안정성과 정확성을 보장합니다. 하지만 7가지 규격의 네트워크 케이블은 주로 미래의 10기가비트 이더넷 또는 특정 고성능 환경에서 사용됩니다.&lt;/p&gt;
&lt;p&gt;기가비트 가정 네트워크 환경에서 기가 광섬유의 잠재력을 최대한 활용하기 위해서는 6급 랜 케이블을 선택하는 것이 가장 경제적이고 효율적인 방법입니다. 또한, 모든 연결 케이블의 품질이 양호한지 확인하고 표준 접선 방식으로 엄격하게 작업하는 것도 중요한 과정입니다.&lt;/p&gt;
&lt;h2 id=&#34;제2장-네트워크-핵심-장비---광모뎀-라우터-lan-포트-대역폭-영향-심층-분석&#34;&gt;제2장: 네트워크 핵심 장비 - 광모뎀, 라우터 LAN 포트 대역폭 영향 심층 분석
&lt;/h2&gt;&lt;h3 id=&#34;광촉매와-lan-포트-대역폭의-중요성&#34;&gt;광촉매와 LAN 포트 대역폭의 중요성
&lt;/h3&gt;&lt;p&gt;광촉매, 정식 명칭 광섬유 모뎀은 가정용 초고속 인터넷 접속의 핵심 장비이며, 광섬유 내의 광 신호를 디지털 신호로 변환하여 가정 네트워크 장비에서 사용하도록 하는 기능을 수행합니다. 기가급 광섬유 사용자에게 있어 광촉매가 기가 전송을 지원하는지 여부가 특히 중요합니다. 만약 광촉매의 WAN 포트가 100메가를 지원한다면, 입구 광섬유 속도가 아무리 높아도 이 병목 현상으로 인해 100메가 이하로 제한됩니다. 마찬가지로 광촉매의 LAN 포트 또한 기가 출력 능력을 갖춰야 하며, 그렇지 않으면 연결된 라우터나 다른 장비는 진정한 기가 속도를 얻을 수 없습니다.&lt;/p&gt;
&lt;h3 id=&#34;라우터-lan-포트-대역폭의-역할&#34;&gt;라우터 LAN 포트 대역폭의 역할
&lt;/h3&gt;&lt;p&gt;라우터의 LAN 포트는 수신된 데이터를 각 단말 장치로 분배하는 역할을 합니다. 라우터의 LAN 포트가 100Mbps인 경우, 다른 장비 설정이 아무리 좋아도 100Mbps 속도의 로컬 네트워크 통신만 가능합니다. 따라서 기가홈 네트워크를 구축할 때는 라우터의 WAN 포트가 기가 데이터를 수신하고, LAN 포트 또한 기가 수준의 데이터 출력 능력을 제공해야 모든 스마트 기기가 고속 네트워크의 원활한 경험을 누릴 수 있습니다.&lt;/p&gt;
&lt;p&gt;또한, 주의해야 할 점은 일부 구형 또는 저가형 라우터는 LAN 포트 자동 협상 기능이 있을 수 있으며, 이는 라우터 자체는 기가비트를 지원하더라도 케이블, 장치 호환성 등의 이유로 속도가 100Mbps 모드로 낮아질 수 있다는 의미입니다. 따라서 기가비트 네트워크를 구현하기 위해서는 라우터 설정을 올바르게 구성하고 강제 기가비트 모드를 활성화하며 기가비트 스위치나 직접 연결된 장치를 함께 사용하는 것이 중요한 단계 중 하나입니다.&lt;/p&gt;
&lt;p&gt;기가급 광섬유로 업그레이드한 후에는 반드시 기가급 ONT와 기가급 공유기로 교체하고, 모든 장비 인터페이스가 기가급 수준인지 확인하십시오&lt;/p&gt;
&lt;h2 id=&#34;제3장-잠재된-미스터리---끊어진-서브-라인이-어떻게-테라비트급-네트워크-속도에-영향을-미치는가&#34;&gt;제3장: 잠재된 미스터리 - 끊어진 서브 라인이 어떻게 테라비트급 네트워크 속도에 영향을 미치는가
&lt;/h2&gt;&lt;h3 id=&#34;서브-라인-장애-및-네트워크-성능-저하&#34;&gt;서브 라인 장애 및 네트워크 성능 저하
&lt;/h3&gt;&lt;p&gt;측정 기간 동안 네트워크 연결은 안정적이었고, 명백한 단절 현상은 없었습니다. 신규 입주형 광대역 회선이라 분배함 내부가 복잡하고, 가끔씩 광모뎀 배선이나 전원 인터페이스 위치를 조정하다 보니 간혹 기가 속도가 측정된 적도 있습니다.&lt;/p&gt;
&lt;p&gt;앞선 자료를 바탕으로 점검한 결과, 랜 케이블 모델과 광케이블 LAN 포트 속도를 분석했더니, 결국 범인은 랜 케이블 내부의 갈색 서브 라인이 끊어진 것이었습니다&lt;/p&gt;
&lt;p&gt;설치 기사님이 크리스탈 헤드를 설치할 때 이 랜선에 조금 세게 힘을 가했고, 그 결과 한 선이 반쯤 끊어졌습니다. 완전히 끊어지지는 않았지만, 이후 광모뎀 위치를 계속 조정하면서 위치를 옮기니 결국 완전히 끊어졌습니다.&lt;/p&gt;
&lt;h3 id=&#34;6가지-네트워크-케이블-8선-기능-분석&#34;&gt;6가지 네트워크 케이블 8선 기능 분석
&lt;/h3&gt;&lt;p&gt;여섯 종류의 네트워크 케이블은 TIA/EIA-568-B 표준을 따르며, 8개의 트위스트 페어 전선으로 구성되어 있으며, 색상 코딩은 다음과 같습니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;백청 / 청&lt;/li&gt;
&lt;li&gt;백록 / 녹&lt;/li&gt;
&lt;li&gt;흰색 파란색 / 파란색&lt;/li&gt;
&lt;li&gt;갈색&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;기가비트 이더넷(1000BASE-T) 표준 하에, 이 8개의 선 중 4쌍의 선이 동시에 작동하며, 각 역할은 다음과 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;백오렌지와 오렌지 이 두 선(1&amp;amp;2)은 데이터 전송(Tx+/-)에 사용됩니다&lt;/li&gt;
&lt;li&gt;백록과 녹색 이 두 선(3&amp;amp;6)은 데이터 수신(Rx+/-)에 사용됩니다&lt;/li&gt;
&lt;li&gt;백란과 남색 쌍(4&amp;amp;5) 및 백갈색과 갈색 쌍(7&amp;amp;8)은 기가비트 이더넷에서 원래 주 용도로 사용되지는 않지만, 일부 고급 애플리케이션(예: 특정 PoE 전원 공급 또는 향후 기술 확장)에서는 활성화될 수 있습니다. 반면 전통적인 100메가비트 네트워크에서는 1, 2, 3, 6번 선만 사용하는 것으로 충분합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;절단된-서브넷이-네트워크-속도에-미치는-영향&#34;&gt;절단된 서브넷이 네트워크 속도에 미치는 영향
&lt;/h3&gt;&lt;p&gt;위와 같은 상황에서 갈색의 부선(갈색 선 또는 갈색 흰색 선)이 끊어지면 이론적으로는 1Gbps 네트워크 환경에서 속도 저하가 발생할 수 있습니다. 왜냐하면 1Gbps 네트워크는 최대 속도를 달성하기 위해 모든 4쌍의 선이 양방향으로 동시에 전송해야 하기 때문입니다. 하지만 가정용 네트워크 장비는 종종 자동 협상 기능을 가지고 있어 케이블 문제를 감지하면 정상적으로 작동하는 낮은 속도 모드, 즉 100Mbps 모드로 전환합니다. 따라서 부선이 끊어져도 네트워크 연결은 유지되고 100Mbps 속도로 작동하는 이유를 설명합니다.&lt;/p&gt;
&lt;p&gt;간단히 말해서, 단일 갈색 보조 광섬유가 끊어진다고 백메가 비트 네트워크의 기본 작동에는 영향을 미치지 않지만, 기가비트 네트워크 환경에서는 네트워크 속도를 제한하는 주요 요인이 될 수 있습니다. 심층적인 진단과 복구 작업을 거쳐야만 기가 광섬유의 잠재력을 완전히 발휘할 수 있습니다. 이는 유사한 상황에 직면했을 때, 기본적인 연결에는 영향을 미치지 않는 것처럼 보이는 작은 결함이라 할지라도 고속 네트워크 경험을 저해하는 숨겨진 장애물이 될 수 있으므로 잠재적인 네트워크 인프라 문제를 간과해서는 안 된다는 점을 시사합니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>WPF UI 스레드와 멈춤 문제 및 해결책</title>
        <link>https://blog.ttf248.life/ko/p/wpf-ui-thread-and-freezing-issues-solutions/</link>
        <pubDate>Tue, 12 Mar 2024 07:12:21 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/wpf-ui-thread-and-freezing-issues-solutions/</guid>
        <description>&lt;p&gt;데스크톱 애플리케이션을 개발할 때, 특히 Windows Presentation Foundation (WPF) 프레임워크를 사용하여 리치 클라이언트 앱을 구축할 때는 UI 스레드를 올바르게 처리하는 것이 애플리케이션의 원활성과 응답성을 보장하는 데 매우 중요합니다. UI 스레드, 또는 메인 스레드는 창 및 컨트롤 이벤트 처리, 레이아웃 계산, 그리고 인터페이스 렌더링을 담당하는 핵심 스레드입니다. UI 요소와의 모든 상호 작용은 UI 스레드에서 실행되어야 하며, 이는 WPF를 비롯한 대부분의 GUI 프레임워크가 따르는 기본 원칙입니다.&lt;/p&gt;
&lt;h2 id=&#34;ui-스레드가-무엇인가요&#34;&gt;UI 스레드가 무엇인가요?
&lt;/h2&gt;&lt;p&gt;WPF 애플리케이션 시작 시 UI 스레드는 운영체제에 의해 생성되고 애플리케이션 주 창을 초기화합니다. 이 스레드만이 직접적으로 UI 구성 요소를 액세스하고 수정할 수 있으며, 버튼 클릭, 텍스트 상자 입력, 창 크기 변경 등 모든 사용자 인터랙션 이벤트는 이 스레드 컨텍스트 내에서 처리됩니다. 또한 WPF의 종속 속성 시스템, 데이터 바인딩 메커니즘 및 레이아웃 로직도 UI 스레드 위에서 동기적으로 실행됩니다.&lt;/p&gt;
&lt;h2 id=&#34;끊김-현상-및-원인&#34;&gt;끊김 현상 및 원인
&lt;/h2&gt;&lt;p&gt;UI 스레드가 장시간 점유되거나 차단될 때, 예를 들어 시간이 오래 걸리는 계산, 대량 데이터 로딩, 데이터베이스 쿼리 또는 기타 I/O 집약적인 작업을 수행할 경우 사용자 상호 작용 요청에 즉시 응답하지 못하여 화면이 응답하지 않는 것처럼 보이는 &amp;ldquo;멈춤&amp;rdquo; 현상이 발생합니다. 이 경우 사용자는 앱의 지연과 끊김을 느끼며 심각한 경우 &amp;ldquo;응답 없음(ANR)&amp;rdquo; 경고가 표시될 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;ui-스레드의-두-가지-기본-규칙&#34;&gt;UI 스레드의 두 가지 기본 규칙
&lt;/h2&gt;&lt;p&gt;위와 같은 상황을 피하기 위해, WPF 개발자는 다음 두 가지 주요 규칙을 준수해야 합니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;UI 스레드가 사용자 입력에 즉시 대응하고 화면 렌더링을 처리할 수 있도록, UI 스레드를 일시 중단할 수 있는 작업은 가능한 한 백그라운드 스레드로 옮겨야 합니다&lt;/li&gt;
&lt;li&gt;WPF의 보안 메커니즘 설계상 UI 스레드만이 UI 요소를 수정할 권한을 가지고 있습니다. 다른 스레드에서 직접 UI 상태를 변경하려고 하면 예외가 발생합니다. 따라서 백그라운드 스레드에서 계산이나 데이터 준비가 완료되더라도 적절한 크로스 스레드 통신 메커니즘을 통해 결과를 UI에 표시해야 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;비동기-프로그래밍-및-스레드-안전-업데이트&#34;&gt;비동기 프로그래밍 및 스레드 안전 업데이트
&lt;/h2&gt;&lt;p&gt;UI의 응답성을 유지하면서도 시간이 오래 걸리는 작업을 수행하기 위해, WPF는 개발자가 이 목표를 달성하도록 돕기 위한 다양한 비동기 프로그래밍 모델과 도구를 제공합니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WPF의 Dispatcher 클래스는 작업 항목을 UI 스레드의 작업 큐에 배치하여 실행할 수 있습니다. __INLINE_CODE_0BOLD_3&lt;code&gt;Dispatcher.BeginInvoke&lt;/code&gt; 메서드를 사용하여 백그라운드 스레드에서 안전하게 UI를 업데이트할 수 있습니다.&lt;/li&gt;
&lt;li&gt;C# 언어의 비동기 기능을 활용하면 비동기 메서드를 작성하고 그 안에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 키워드를 사용하여 백그라운드 작업 완료를 기다린 후, 완료되면 자동으로 UI 스레드에서 후속 UI 업데이트 코드를 실행할 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;사례&#34;&gt;사례
&lt;/h2&gt;&lt;h3 id=&#34;__inline_code_0__-방법을-사용하여-ui를-업데이트합니다&#34;&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 방법을 사용하여 UI를 업데이트합니다
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void Button_Click(object sender, RoutedEventArgs e)
{
    // 假设这是一个耗时操作
    Task.Run(() =&amp;gt;
    {
        var result = LongRunningOperation(); // 这里是模拟一个耗时计算的方法
        
        // 当耗时操作完成后，在UI线程上更新UI
        Application.Current.Dispatcher.Invoke(() =&amp;gt;
        {
            LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
        });
    });
}

private string LongRunningOperation()
{
    // 模拟耗时操作
    Thread.Sleep(5000);
    return &amp;quot;已完成&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;사용-asyncawaitbold_2taskrun&#34;&gt;사용 &lt;code&gt;async/await&lt;/code&gt;BOLD_2&lt;code&gt;Task.Run&lt;/code&gt;
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private async void Button_ClickAsync(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    button.IsEnabled = false; // 防止用户重复点击

    try
    {
        // 开启后台任务
        var result = await Task.Run(() =&amp;gt; LongRunningOperation());

        // 在后台任务完成后，自动切换回UI线程更新UI
        LabelStatus.Text = $&amp;quot;计算结果: {result}&amp;quot;;
    }
    catch (Exception ex)
    {
        MessageBox.Show($&amp;quot;发生错误: {ex.Message}&amp;quot;);
    }
    finally
    {
        button.IsEnabled = true; // 重新启用按钮
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>GCC 버전 업그레이드로 인한 프로그램 충돌: 비표준 코드의 잠재적 위험</title>
        <link>https://blog.ttf248.life/ko/p/upgrade-gcc-version-causes-program-crash-code-irregularities/</link>
        <pubDate>Sun, 10 Mar 2024 23:19:06 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/upgrade-gcc-version-causes-program-crash-code-irregularities/</guid>
        <description>&lt;p&gt;동일한 비즈니스 코드의 경우, CentOS 7 환경에서 컴파일 및 실행은 정상적으로 이루어졌지만, CentOS 8로 전환하고 최신 버전의 GCC를 사용하여 컴파일했을 때 프로그램이 충돌했습니다. 주목할 점은 문제가 &lt;strong&gt;Release 模式&lt;/strong&gt;에서만 발생하며, &lt;strong&gt;Debug 模式&lt;/strong&gt;에서는 전혀 문제가 없다는 것입니다. 이와 같은 상황은 처음 경험했으며, 사흘간의 조사 끝에 문제의 근본 원인을 찾았습니다.&lt;/p&gt;
&lt;h3 id=&#34;문제-파악&#34;&gt;문제 파악
&lt;/h3&gt;&lt;p&gt;일련의 점검 결과, 문제의 근본 원인은 &lt;strong&gt;函数缺少返回值&lt;/strong&gt;에 있습니다. Release 모드에서 GCC 최신 버전은 더 많은 최적화를 수행하며, 이로 인해 명시적인 반환 값이 없는 함수의 실행 과정에서 예상치 못한 로직이 발생하여 충돌을 일으킵니다. 결론으로는, &lt;strong&gt;编译器的警告不容忽视，尤其是在老项目中，部分警告可能被无视，但也应当避免屏蔽所有警告&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;h3 id=&#34;환경-설명&#34;&gt;환경 설명
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CentOS 7 GCC版本：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)
Copyright © 2015 Free Software Foundation, Inc.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CentOS 8 GCC版本：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc (GCC) 8.5.0 20210514 (Red Hat 8.5.0-21)
Copyright (C) 2018 Free Software Foundation, Inc.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;붕괴-현상&#34;&gt;붕괴 현상
&lt;/h3&gt;&lt;p&gt;프로그램 충돌 스택을 분석하는 과정에서 다음과 같은 스택 정보를 확인했습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[New LWP 1385902]
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib64/libthread_db.so.1&amp;quot;.
Core was generated by `./pstack_main`.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007ffe894b4420 in ?? ()
(gdb) bt
#0  0x00007ffe894b4420 in ?? ()
#1  0x00000000004008e9 in main ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 스택은 직관적이지 않아 보이며, 충돌 함수의 스택 정보가 &lt;code&gt;??&lt;/code&gt;으로 표시되어 문제 해결을 더욱 어렵게 만들고 있습니다&lt;/p&gt;
&lt;h3 id=&#34;코드-예시&#34;&gt;코드 예시
&lt;/h3&gt;&lt;p&gt;문제 이해를 돕기 위해, 재현을 위한 최소 코드 예제는 다음과 같습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int test() {
    std::cout &amp;lt;&amp;lt; &amp;quot;1&amp;quot; &amp;lt;&amp;lt; std::endl;
}

int main() {
    test();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;해당 코드에서 &lt;code&gt;__INLINE_CODE_0__ 函数显然没有显式返回一个值，而它的返回类型是 __INLINE_CODE_1__BOLD_4&lt;/code&gt;int`` 유형의 경우, 반드시 반환 값이 있어야 하며, 그렇지 않으면 정의되지 않은 동작이 발생할 수 있습니다&lt;/p&gt;
&lt;h3 id=&#34;컴파일-경고&#34;&gt;컴파일 경고
&lt;/h3&gt;&lt;p&gt;프로젝트에서 CMake 스크립트가 여러 컴파일 경고를 숨겼는데, 그중에는 다음과 같은 경고 메시지도 포함되어 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/root/pstack/main.cpp: In function ‘int test()’:
/root/pstack/main.cpp:7:1: warning: no return statement in function returning non-void [-Wreturn-type]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 경고는 &lt;code&gt;test()&lt;/code&gt; 함수가 반환값을 가지지 않는다는 것을 나타내며, 이것이 문제의 근원입니다. GCC의 높은 버전(예: 8.5.0)은 코드를 최적화할 때 이러한 정의되지 않은 동작에 대해 불안정한 최적화를 수행하여 프로그램 충돌을 일으킬 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;어셈블리-코드-차이&#34;&gt;어셈블리 코드 차이
&lt;/h3&gt;&lt;p&gt;GCC 컴파일러 최적화 동작의 차이를 설명하기 위해, 다양한 버전의 GCC가 생성한 어셈블리 코드를 비교했습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GCC 4.8.5 生成的汇编代码：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;어셈블리 코드는 다소 장황하며, 표준 출력 스트림(예: &lt;code&gt;std::cout&lt;/code&gt;）的处理逻辑。这表明编译器进行了更保守的优化，未对 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 함수에서 누락된 반환값 문제)에 대한 과도한 최적화를 포함하고 있어, 이로 인해 런타임 오류를 피했을 가능성이 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GCC 8.5.0 生成的汇编代码：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새 버전의 GCC는 더 많은 최적화를 수행하여 코드 양을 줄였습니다. 하지만 이러한 최적화로 인해 반환 값이 없는 함수의 실행 동작이 정의되지 않아 프로그램이 충돌할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;결론&#34;&gt;결론
&lt;/h3&gt;&lt;p&gt;이번 문제 해결 과정을 통해 C++에서 &lt;strong&gt;函数返回值必须明确&lt;/strong&gt;, 특히 함수 선언이 &lt;code&gt;int&lt;/code&gt;BOLD_2__일 때, 모든 경고를 숨기지 않고, 특히 반환 값, 타입 매칭 등 흔히 발생하는 문제에 대해 선택적으로 처리해야 한다는 것을 깊이 인식하게 되었습니다&lt;/p&gt;
&lt;p&gt;마침내 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 함수에 반환값을 추가하여 문제를 해결하고 프로그램이 정상적으로 작동하게 되었습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>VMware 가상 머신 CPU 리소스 사용량 이상</title>
        <link>https://blog.ttf248.life/ko/p/vmware-virtual-machine-cpu-resource-usage-anomaly/</link>
        <pubDate>Sun, 10 Mar 2024 22:14:59 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/vmware-virtual-machine-cpu-resource-usage-anomaly/</guid>
        <description>&lt;p&gt;로컬 머신에 배포된 Windows 버전 업무 시스템은 CPU 자원 점유율이 약 5% 정도인데, VMware에 설치된 CentOS8 환경의 Linux 버전 업무 시스템은 자원 점유율이 비정상적입니다&lt;/p&gt;
&lt;h2 id=&#34;문제-설명&#34;&gt;문제 설명
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;호스트 시스템: Win10 기업판&lt;/li&gt;
&lt;li&gt;vmware：17.5&lt;/li&gt;
&lt;li&gt;가상 머신: CentOS 8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가상 머신 리소스 할당은 &lt;code&gt;4C8GB&lt;/code&gt;이며, 비즈니스 시스템을 시작합니다. 비즈니스 시스템은 가상 머신 Linux 시스템에 배포되어 있으며, 가상 머신 내부의 top 명령어를 통해 시스템 리소스 사용량을 관찰한 결과 CPU 사용량은 높지 않습니다. 하지만 외부 Windows 시스템에서 작업 관리자를 통해 확인했을 때 CPU 리소스 사용량이 매우 높았고, 프로세스를 확인해 보니 VMware 프로세스가 CPU 리소스를 많이 사용하고 있었습니다.&lt;/p&gt;
&lt;p&gt;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+
|         Windows           |
|                           |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|   |      VMware        |  |
|   |      Program       |  |
|   +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+  |
|                           |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&lt;/p&gt;
&lt;h2 id=&#34;핵심-개념&#34;&gt;핵심 개념
&lt;/h2&gt;&lt;p&gt;이 문제 해결은 순탄치 않았는데, 도화선이 비즈니스 시스템 자체가 아니라 가상 머신 자체의 문제였기 때문이다. 어떻게 하면 일반적인 비즈니스 코드에서 벗어나 시스템 부하로 사고를 전환하고, 부하 데이터의 이상 현상을 통해 소프트 인터럽트를 찾아내어 결국 핵심에 다다를 수 있을까? 무엇이 VMware 소프트 인터럽트의 효율성을 저해하는 것일까? 본 글에서는 먼저 관련 지식을 설명하고 마지막으로 해결책을 제시한다.&lt;/p&gt;
&lt;h3 id=&#34;hyper-v&#34;&gt;hyper-v
&lt;/h3&gt;&lt;p&gt;윈도우 운영 체제의 가상화 기술에 큰 변화가 있었습니다. 마이크로소프트가 WSL을 처음 출시했을 때 Hyper-V 서비스를 활성화하면 VMware 가상 머신을 동시에 사용할 수 없었습니다. 이후 버전에서 VMware는 Hyper-V 서비스와 호환되게 되었습니다.&lt;/p&gt;
&lt;h3 id=&#34;시스템-부하&#34;&gt;시스템 부하
&lt;/h3&gt;&lt;p&gt;리눅스 시스템에서 &amp;ldquo;로드(load)&amp;ldquo;는 실행 중이거나 실행을 기다리는 프로세스의 수를 의미합니다. 로드는 일반적으로 1분, 5분, 15분 동안의 실행 대기열에 있는 평균 프로세스 수를 나타내는 세 자리 숫자로 표시됩니다. 이러한 숫자는 &amp;ldquo;uptime&amp;rdquo; 또는 &amp;ldquo;top&amp;rdquo; 명령어를 실행하여 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;구체적으로, 이 세 숫자는 각각을 의미합니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;1分钟负载&lt;/strong&gt;: 시스템이 지난 1분 동안 실행한 평균 프로세스 수입니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5分钟负载&lt;/strong&gt;: 시스템은 지난 5분 동안 실행 중인 프로세스 평균 수를 나타냅니다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;15分钟负载&lt;/strong&gt;: 시스템은 지난 15분 동안 실행 중인 프로세스 평균 수를 나타냅니다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;부하란 시스템에서 실행을 기다리는 프로세스 수를 의미합니다. 이 숫자가 시스템의 논리 CPU 수보다 높으면 시스템 부하가 높다는 뜻이며, 많은 프로세스가 프로세서 자원을 기다리고 있음을 나타냅니다. 이는 시스템이 느려지거나 응답하지 않을 수 있으며, 부하 정도와 시스템 구성 및 성능에 따라 달라집니다.&lt;/p&gt;
&lt;p&gt;이상적으로는, 부하가 시스템의 논리 CPU 수 범위 내에 유지되어야 시스템 성능을 최적화할 수 있습니다. 부하가 지속적으로 CPU 수보다 높다면, 시스템 프로세스를 추가적으로 분석하여 높은 부하의 원인을 파악하고, 시스템 리소스 할당 조정 또는 프로세스 실행 방식 최적화를 위한 조치를 취해야 합니다.&lt;/p&gt;
&lt;h3 id=&#34;mpstat-로드-분석&#34;&gt;mpstat 로드 분석
&lt;/h3&gt;&lt;p&gt;부하 분석 절차:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 sysstat&lt;/strong&gt;:
__INLINE_CODE_0__이 설치되어 있지 않다면, 시스템에 적합한 패키지 관리 도구를 사용하여 설치할 수 있습니다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;运行 mpstat&lt;/strong&gt;:
자원 사용을 나타냄&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;01:32:33 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
01:32:35 PM  all    0.00    0.00    0.26    0.00    3.73    0.26    0.00    0.00    0.00   95.76
01:32:35 PM    0    0.00    0.00    0.51    0.00    3.57    0.00    0.00    0.00    0.00   95.92
01:32:35 PM    1    0.00    0.00    0.00    0.00    3.59    0.51    0.00    0.00    0.00   95.90
01:32:35 PM    2    0.00    0.00    0.00    0.00    4.15    0.00    0.00    0.00    0.00   95.85
01:32:35 PM    3    0.00    0.00    0.52    0.00    3.61    0.52    0.00    0.00    0.00   95.36
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分析输出&lt;/strong&gt;:
__INLINE_CODE_0__의 출력은 각 CPU 사용률과 시스템 평균 부하를 포함합니다. 평균 부하와 각 CPU 사용률에 특히 주의하면 시스템 부하 상황을 파악하는 데 도움이 됩니다. 부하가 높다면, 어떤 프로세스가 원인인지 추가 분석하고 성능 병목 현상이 있는지 확인할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结合其他工具&lt;/strong&gt;:
다양한 도구들을 활용하여 시스템 성능을 종합적으로 분석합니다. 여러 도구의 결과를 결합하면 시스템 부하 상황을 보다 포괄적으로 파악하고, 성능 문제의 근본 원인을 찾아낼 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;중단&#34;&gt;중단
&lt;/h3&gt;&lt;p&gt;여기 내용은 너무 자세히 설명하지 않겠습니다
추천: &lt;a class=&#34;link&#34; href=&#34;https://www.codedump.info/post/20200522-sgfap-softirq/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《面向应用开发者的系统指南》CPU篇之软中断&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;잦은 소프트웨어 인터럽트 발생은 시스템 부하에도 반영된다&lt;/p&gt;
&lt;h2 id=&#34;문제-해결&#34;&gt;문제 해결
&lt;/h2&gt;&lt;p&gt;CPU 관점만으로는 문제 위치를 파악하기 어렵다면, 시스템에 이상이 발생했을 가능성을 의심해야 할까요? Linux 운영체제의 과도한 부하로 인해 VMware가 지나치게 많은 CPU 자원을 사용하고 있을 수도 있습니다. &lt;code&gt;mpstat&lt;/code&gt;分析本地虚拟机，我们发现&lt;code&gt;irq&lt;/code&gt;占用异常，单核接近25%，而在正常情况下，启动业务进程空跑时，&lt;code&gt;irq&lt;/code&gt;의 비율은 약 5% 정도여야 합니다.&lt;/p&gt;
&lt;p&gt;팀 내 동료의 개발 환경에서 그의 CentOS 7은 VMware에 배포되었으며, 자원 사용량은 정상적으로 표시됩니다. 반면 상하이 개발 환경에서는 동일하게 VMware이지만 호스트 CPU 자원 상황을 직접 관찰할 수 없습니다. 이 때 우리는 VMware 가상 머신, Linux 운영체제 및 GCC 버전을 포함한 여러 변수를 고려해야 합니다.&lt;/p&gt;
&lt;p&gt;물리 서버에 배포되고, 저 버전 GCC 컴파일 서비스가 실행 중이며, CentOS 8 위에서 운영되는 선전 테스트 환경으로 분석을 전환해 보면, __INLINE_CODE_0__의 사용량은 정상입니다&lt;/p&gt;
&lt;p&gt;문제 해결을 위해 GCC 최신 버전으로 컴파일된 프로그램을 선전 환경에 배포하여 테스트한 결과 모두 정상 작동했습니다&lt;/p&gt;
&lt;p&gt;문제는 좀 더 명확해지는 듯하고, 운영체제에 문제가 있는 건 아닌지 의심하기 시작했습니다. 결국 CentOS 8은 공식 지원이 종료되었으니까요. 하지만 깨끗한 CentOS 7과 CentOS 8을 다시 배포해도 문제는 여전히 발생합니다.&lt;/p&gt;
&lt;p&gt;지금, VMware 가상화 소프트웨어가 유일한 불확실성 요소인 것 같다는 의심이 들기 시작했다. 갑자기 아이디어가 떠올랐다. 혹시 Hyper-V 기술을 이전에 활성화했지만 완전히 종료하지 않아 이런 문제가 발생했을까? 결국, 소프트 인터럽트도 가상화 소프트웨어를 통해 구현되므로, 서로 다른 가상화 기술에 버그가 있을 가능성은 없는지 심층적인 고민과 조사가 필요하다.&lt;/p&gt;
&lt;h2 id=&#34;결론&#34;&gt;결론
&lt;/h2&gt;&lt;p&gt;마이크로소프트 공식 매뉴얼에 따르면, 로컬 Hyper-V 서비스를 완전히 종료한 후 VMware가 호스트에서 정상적으로 복구되었습니다. 덕분에 문제는 마침내 해결되었습니다. 처음 설명했듯이, 이 경험은 굴곡지고 고되었으며 종합적인 분석과 판단이 필요했습니다. 또한, 이번 문제 해결 과정에서 처음으로 VM 수준까지 추적하게 되었습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor
bcdedit /set hypervisorlaunchtype off
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/application-management/virtualization-apps-not-work-with-hyper-v&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43; 프로그래밍의 함정: `std::map` 오용으로 인한 프로그램 충돌 상세 분석</title>
        <link>https://blog.ttf248.life/ko/p/cpp-programming-traps-std-map-crash-details/</link>
        <pubDate>Sun, 10 Mar 2024 22:03:06 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/cpp-programming-traps-std-map-crash-details/</guid>
        <description>&lt;p&gt;C++ 프로그래밍에서 &lt;code&gt;std::map&lt;/code&gt; 컨테이너를 잘못 사용하면 프로그램이 충돌할 수 있습니다. 대괄호 연산자로 존재하지 않는 키에 접근하려 할 때 자동으로 빈 요소가 추가되기 때문입니다. 이 오해를 자세히 분석하고 예제 코드를 통해 잠재적인 위험을 보여드리겠습니다.&lt;/p&gt;
&lt;p&gt;저장하는 값이 단순한 값이라면 문제가 없지만, 포인터라면 문제가 발생할 수 있습니다. 포인터는 주소이고, 초기화되지 않은 주소는 불확실하기 때문에 프로그램이 충돌할 수 있습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;C++ 표준 라이브러리에서 __INLINE_CODE_0__是一种关联容器，它按照键（key）的升序存储元素，并提供了高效的关键字查找功能。然而，新手开发者有时会因为对__INLINE_CODE_1__中括号操作符 &lt;code&gt;[]&lt;/code&gt; 的行为理解有误而陷入困境。实际上，当使用 __INLINE_CODE_3__BOLD_8&lt;code&gt;std::map&lt;/code&gt;은 새로운 키-값 쌍을 삽입하고, 기본 생성자를 사용하여 해당 키에 대응하는 값 타입의 초기화를 수행합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;map&amp;gt;

int main() {
    std::map&amp;lt;std::string, int&amp;gt; myMap;
    
    // 错误的用法：假设这里试图访问一个不存在的键并认为会得到0
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for &#39;nonexistent_key&#39;: &amp;quot; &amp;lt;&amp;lt; myMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;

    // 实际上，上述行代码创建了一个新的键值对，其中值被默认初始化为int的默认值（通常是0）
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드 자체는 프로그램 충돌을 직접적으로 유발하지는 않지만, 이러한 암묵적인 삽입 동작은 특정 상황에서 예상치 못한 부작용(예: 리소스 누수 또는 예기치 않은 상태 변경)을 초래할 수 있습니다. 더 나쁜 경우, 다중 스레드 환경에서 초기화되지 않은 메모리 영역에 대한 동시 접근은 프로그램 충돌로 이어질 수도 있습니다.&lt;/p&gt;
&lt;p&gt;이러한 문제가 발생하는 것을 방지하기 위해, &lt;code&gt;std::map::find()&lt;/code&gt;BOLD_3&lt;code&gt;std::map::count()&lt;/code&gt;BOLD_4&lt;code&gt;std::map::insert()&lt;/code&gt; 요소를 명시적으로 삽입하는 것이 좋습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;std::map&amp;lt;std::string, int&amp;gt; safeMap;
if (safeMap.count(&amp;quot;nonexistent_key&amp;quot;) == 0) {
    std::cout &amp;lt;&amp;lt; &amp;quot;Key does not exist.&amp;quot; &amp;lt;&amp;lt; std::endl;
} else {
    std::cout &amp;lt;&amp;lt; &amp;quot;Value for existing key: &amp;quot; &amp;lt;&amp;lt; safeMap[&amp;quot;nonexistent_key&amp;quot;] &amp;lt;&amp;lt; std::endl;
}

// 或者明确插入一个键值对，指定初始值
safeMap.insert({ &amp;quot;new_key&amp;quot;, 0 });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;만약 map 컨테이너 내부에 저장된 객체가 포인터 타입이라면, 자동 삽입 동작은 초기화되지 않은 포인터를 저장하며, 이 포인터를 사용하는 모든 작업은 프로그램 충돌을 야기할 수 있습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>pstack으로 프로세스 멈춤 현상 진단</title>
        <link>https://blog.ttf248.life/ko/p/pstack-troubleshooting-process-hang/</link>
        <pubDate>Sat, 24 Feb 2024 23:55:59 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/pstack-troubleshooting-process-hang/</guid>
        <description>&lt;p&gt;소프트웨어 개발 및 운영 환경에서 프로세스 응답 없음 현상이 자주 발생하는데, 이로 인해 시스템 성능 저하나 서비스 중단이 발생할 수 있습니다. 본 문서에서는 pstack 도구를 사용하여 프로세스 응답 없음 문제를 진단하고, 프로세스 스택 정보를 분석하여 문제 원인을 파악하고 해결하는 방법을 설명합니다.&lt;/p&gt;
&lt;p&gt;배경: 위험 관리 시스템 하위 서비스가 응답하지 않는 상태로 멈춰 위험 관리 서비스를 사용할 수 없게 되었습니다. 서비스 가용성 모니터링 부족으로 인해 프로세스 응답 없음 상황을 즉시 파악하지 못해 시스템이 중단되었습니다.&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;프로세스 응답 없음은 프로세스가 중단되어 응답하지 않지만 종료되지 않은 상태를 의미합니다. 이는 데드락, 리소스 고갈, 예외 등 다양한 원인으로 발생할 수 있습니다. 이러한 문제를 해결하기 위해 pstack 도구를 사용하여 프로세스의 스택 정보를 분석하고 문제의 근본 원인을 파악할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;단계&#34;&gt;단계
&lt;/h2&gt;&lt;p&gt;pstack은 일반적으로 gdb(GNU 디버거)와 함께 제공되는 유용한 도구입니다. 다음 명령어를 통해 설치할 수 있습니다:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo apt-get install gdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;프로세스 ID 획득: 먼저, 응답하지 않는 프로세스의 프로세스 ID(PID)를 얻어야 합니다. ps 명령어를 사용하여 모든 프로세스를 나열하고, 문제 해결이 필요한 프로세스 ID를 찾을 수 있습니다.
pstack 도구를 사용하여 프로세스 스택을 분석할 수 있습니다. 프로세스 ID를 얻은 후에는 pstack 도구를 사용하여 해당 프로세스의 스택 정보를 가져올 수 있습니다. 다음 명령어를 실행하세요:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pstack &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 프로세스의 스택 정보를 출력하여 현재 실행 중인 함수 호출 시퀀스를 보여줍니다. 이러한 정보를 분석하면 프로세스가 멈춘 위치를 파악하고 문제를 진단할 수 있습니다.&lt;/p&gt;
&lt;p&gt;스택 정보를 분석하면 프로세스가 멈추는 원인을 파악할 수 있습니다. 데드락, 무한 루프 또는 기타 예외 상황이 발견될 수 있으며, 잠금 해제나 코드 로직 수정 등 구체적인 상황에 맞는 조치를 취해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;사례&#34;&gt;사례
&lt;/h2&gt;&lt;p&gt;간단한 데모인데, 메인 함수 실행 후 서브 스레드를 새로 생성하고 실제 실행 함수가 무한 루프에 들어가 프로그램이 정상적으로 종료되지 않고 멈춰버리는 상태입니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cmake_minimum_required(VERSION 3.0.0)
project(pstack_main VERSION 0.1.0 LANGUAGES C CXX)

include(CTest)
enable_testing()

# 查找线程库
find_package(Threads REQUIRED)

add_executable(pstack_main main.cpp)

# 链接线程库
target_link_libraries(pstack_main PRIVATE Threads::Threads)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;
#include &amp;lt;chrono&amp;gt;

void infiniteLoop() {
    while (true) {
        // 主线程进入死循环
    }
}

int main() {
    std::thread thread(infiniteLoop); // 创建一个线程，执行死循环函数
    thread.join(); // 等待线程结束
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;프로그램 시작, pstack 결과:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Thread 2 (Thread 0x7eff3619b700 (LWP 1315017)):
#0  infiniteLoop () at /root/pstack/main.cpp:6
#1  0x0000000000402ca9 in std::__invoke_impl&amp;lt;void, void (*)()&amp;gt; (__f=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:60
#2  0x0000000000402b02 in std::__invoke&amp;lt;void (*)()&amp;gt; (__fn=@0x2260eb8: 0x4029a6 &amp;lt;infiniteLoop()&amp;gt;) at /usr/include/c++/8/bits/invoke.h:95
#3  0x0000000000403150 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::_M_invoke&amp;lt;0ul&amp;gt; (this=0x2260eb8) at /usr/include/c++/8/thread:244
#4  0x0000000000403126 in std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt;::operator() (this=0x2260eb8) at /usr/include/c++/8/thread:253
#5  0x000000000040310a in std::thread::_State_impl&amp;lt;std::thread::_Invoker&amp;lt;std::tuple&amp;lt;void (*)()&amp;gt; &amp;gt; &amp;gt;::_M_run (this=0x2260eb0) at /usr/include/c++/8/thread:196
#6  0x00007eff36bceb23 in execute_native_thread_routine () from /lib64/libstdc++.so.6
#7  0x00007eff36ea91ca in start_thread () from /lib64/libpthread.so.0
#8  0x00007eff361d58d3 in clone () from /lib64/libc.so.6
Thread 1 (Thread 0x7eff372e1740 (LWP 1315016)):
#0  0x00007eff36eaa6cd in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
#1  0x00007eff36bceda7 in std::thread::join() () from /lib64/libstdc++.so.6
#2  0x00000000004029d2 in main () at /root/pstack/main.cpp:13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;프로세스 응결의 원인은 데드루프이며, 메인 스레드가 데드루프에 진입하면 서브 스레드가 종료되지 않아 프로세스가 응결됩니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>가끔씩 나가 돌아다니는 건 어쨌든 좋지</title>
        <link>https://blog.ttf248.life/ko/p/come-out-and-walk-around-its-always-good/</link>
        <pubDate>Thu, 08 Feb 2024 10:30:43 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/come-out-and-walk-around-its-always-good/</guid>
        <description>&lt;p&gt;만약 집안의 계획대로, 성실하게 전공을 살려 전기 공학을 공부했다면, 나는 평범한 순종적인 남자가 되었을 것이다&lt;/p&gt;
&lt;p&gt;기억 속 먼지를 털어내고 보니, 계기는 다가오는 설날과 함께 룸메이트와의 대화에서 비롯되었고, 몇 년간의 과정을 되짚어 보게 되었다&lt;/p&gt;
&lt;h2 id=&#34;제-1장&#34;&gt;제 1장
&lt;/h2&gt;&lt;p&gt;고등학교 성적이라고 단정 지을 순 없지만, 211 대학을 졸업했다. 아버지가 처음 계획하셨던 대로 전력망을 열심히 공부해서 고향 시의 전력공사에서 일할 줄 알았는데. 앞서 언급했듯이 IT로 어떻게 오게 되었는지에 대한 이야기 중 돈에 대한 가치관과 자기 통제력 부분은 미처 설명하지 못했다.&lt;/p&gt;
&lt;p&gt;처음엔 면소재지 학교에 다녔는데, 중학교 2학년 때부터 부모님이 시내 학교로 전학을 보내셨다. 마치 유姥姥가 대관원에 온 것 같았고, 도시의 번화함에 적응하기까지 시간이 좀 걸렸다. 영화관에 몇 번 가본 적이 없었고, 정확히 말하면 부모님과 함께 간 적은 거의 없었지만, 친척들이 데려간 적은 있었다. 다행히도 운 좋게도 비슷한 취향을 가진 친구들을 만났고, 비록 지금은 연락이 줄어들었지만, 그 시절의 소년 시절은 여전히 아름답게 느껴진다. 방과 후 보충 수업 후에 플라스틱 병을 모아 책가방에 넣고 엄마에게 가져다 드렸는데, 어느 정도 모이면 고물상에 가서 처리했다. 함께 장기를 두거나 배드민턴을 치고, 섯불거리를 했는데, 진 사람은 푸쉬업 몇 개를 해야 했다. 그땐 아빠가 어릴 때부터 운동을 시켜줘서 다행이라고 생각했었다. 이때부터 돈에 대한 생각이 조금 이상해지고, 약간 스스로 작아지는 느낌이 들었지만, 이런 불운은 금방 지나갔다. 집안 형편이 넉넉하지는 않았고, 용돈도 많지 않아 주변 친구들과 함께 놀 수 없을 때가 있었는데, 특히 주말에는 그랬다. 부모님의 노력은 눈으로 볼 수 있을 정도였고, 우리는 시골에서 나와 도시로 이사했다. 이때 씨앗이 뿌려졌고, 싹을 틔울 차례를 기다리고 있었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;머리가 단순한 저는, 학업 기간 동안 전반적으로 매우 행복했고, 많은 사람들이 졸업 후에야 비로소 깨닫는 것처럼, 공부는 생각보다 어렵지 않으며 투입과 산출의 전환이 비교적 쉽습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;중첩된 어린 시절 제국 시대의 기억을 가지고 대학 시절에 노트북과 접촉하면서 판도라의 상자가 열린 듯 게임과 접하게 되었고, 게임 상업이라는 역할과도 연결되었다. 처음에는 하위 판매원으로서 상류에서 물건을 구매하여 자신의 커뮤니티 채널을 통해 조금씩 상품을 판매하며 돈을 벌었다. 시간이 지나면서 전체 링크의 작동 논리를 점차 이해하게 되었다. 우리가 판매하는 물건은 결국 상류 프로그램이 배치로 부화시킨 것이고, 그들의 비용은 거의 제로에 가깝다. 이때부터 길은 조금 꼬이기 시작했다. 전공 내에도 세분화된 전공이 있는데, 왼쪽에 전기망, 오른쪽에 자동화(매우 다양함, 칩 프로그래밍, 공장 전기 자동화)가 있었다. 나는 프로그램으로 돈을 벌 수 있다는 것을 깨달았고, 채널 상류는 확실히 많은 돈을 벌었고, 이전부터 프로그래밍의 기반이 있었기 때문에 여기저기서 이것저것 하고 조금의 돈을 벌었다. 전공 선택 시 자연스럽게 자동화를 선택했다. 3학년 전공 수업은 많이 듣지 않았고, 머릿속에는 매일 코드를 작성하여 돈을 버는 것에 대해 생각하고 있었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;지난해 글에서 언급했듯, 해커에 대한 동경을 품고 시작한 프로그래밍은 전공이 아닌 IT자가 仁愛(인애)로 어셈블리, 침투 테스트, 게임 핵, DLL 가드닝, 계정 탈취 등 다양한 불법/회색 영역을 접하게 했지만, 부모님 덕분에 인간적인 삶의 가치를 알게 되었고 법의 조언 또한 나를 막아주어 완전히 잘못된 길로 가지는 못했다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이전 링크: &lt;a class=&#34;link&#34; href=&#34;https://blog.ttf248.life/ko/p/then-boy-talent-not-much/&#34; &gt;那时少年&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;대학교 때 한 번 연애도 해봤는데, 돌이켜보면 드라마 속 사랑에 대한 동경이었을 것이다. 미성숙했던 내게는 어떻게 사랑하는지 알기도 전에, 굳건히 가정을 이루고 성공하기까지는 더욱 어려웠다.&lt;/p&gt;
&lt;h2 id=&#34;제2장&#34;&gt;제2장
&lt;/h2&gt;&lt;p&gt;시대의 물결 속에서, 저는 운도 좋았습니다. 대학 시절의 여러 번의 노력에도 불구하고 연구원 시험을 보러 가지 못하고 졸업 후 바로 일을 시작했습니다. IT 업계의 순풍을 타고 일도 순조롭게 풀렸습니다. 벌써 8번째 해를 맞이하면서, 업계의 투기 자금은 사라지고 막바지에 이르렀습니다. 가끔은 그때 선택이 잘못된 건 아닌가 하는 의문이 들기도 합니다. 아버지 말씀을 듣고 전력 회사에 들어갔을 수도 있었겠지요. 일하는 처음 5년 동안에는 그런 생각이 종종 있었지만, 시간이 지나면서 점차 사라졌습니다. 신입으로 홍성에 입사하여 5년간 회사를 옮기지 않았기에 기술과 산업에 대한 이해, 그리고 저의 능력에 대한 인식이 어느 정도 부족했습니다. 본사의 지시에 따라 선전 분사로 갔고, 직장 내 갈등을 겪었습니다 (나중에 보니 양쪽 모두 패배했고 최종 승자는 이사회였습니다). 기술에 대한 열정을 품고 다시 항저우로 돌아왔지만, 젊음의 무지함과 함께 항저우에서 나와 상하이로 향했습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;원래 항저우로 이사해서 자리 잡고 집을 살 계획이었는데, 금리 최고조와 주택 가격 정점에 맞춰 들어가면 묶여 버리고, 가진 돈이 부족해서 감당할 수 없었다. 주택 담보 대출의 압박을 안고 결혼하는 것과 업계 하락세까지 더해지니 감정적으로 불안하기 쉽다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;제3장&#34;&gt;제3장
&lt;/h2&gt;&lt;p&gt;오랫동안 세상에 나와 숱한 일을 겪어보니, 어리석은 행동도 하고 방황하기도 했지만, 지금은 다행히 괜찮다. 여러 가지 일과 사람들을 거치며 천천히 성장했고, 만약 집에만 있었다면 성격의 결함이 어떤 형태로든 터져 나왔을 것이다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>C&#43;&#43; 함수 호출 시간</title>
        <link>https://blog.ttf248.life/ko/p/cpp-function-call-timing/</link>
        <pubDate>Wed, 24 Jan 2024 14:11:33 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/cpp-function-call-timing/</guid>
        <description>&lt;p&gt;다양한 콜백 함수 구현 방식에 맞춰 설계 시나리오 SDK를 위한 시간 소모적인 테스트를 진행했습니다. 최근 C++ 함수 프로그래밍을 살펴보고 있는데, 함수가 일급 시민이 되어 프로그램 내에서 자유롭게 흐르는 경우 성능 차이가 있을까요?&lt;/p&gt;
&lt;p&gt;이전 링크: &lt;a class=&#34;link&#34; href=&#34;https://blog.ttf248.life/ko/p/compiler-callback-function-performance-testing/&#34; &gt;编译器、回调函数、性能测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大佬刚好也做了类似的测试，借代码一用。 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 비슷한 테스트를 이미 해 두신 분에게 코드를 빌려 썼다&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;실행 플랫폼은 여전히 우리의 든든한 친구, &lt;a class=&#34;link&#34; href=&#34;https://wandbox.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wandbox.org/&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;cassert&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;vector&amp;gt;

int add_one(int input) { return input + 1; }

bool validate_vector_add_one(std::vector&amp;lt;int&amp;gt; const&amp;amp; input_vector,
                             std::vector&amp;lt;int&amp;gt; const&amp;amp; output_vector)
{
    bool is_valid{true};
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        if (output_vector.at(i) != input_vector.at(i) + 1)
        {
            is_valid = false;
            break;
        }
    }
    return is_valid;
}

void reset_vector(std::vector&amp;lt;int&amp;gt;&amp;amp; input_vector)
{
    for (size_t i{0}; i &amp;lt; input_vector.size(); ++i)
    {
        input_vector.at(i) = 0;
    }
}

template &amp;lt;typename T, typename Func&amp;gt;
void unitary_function_pass_by_lambda_function(T&amp;amp; output, T const&amp;amp; input,
                                              Func const func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_std_function_value(T&amp;amp; output, T const&amp;amp; input,
                                                 std::function&amp;lt;T(T)&amp;gt; const func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_std_function_reference(
    T&amp;amp; output, T const&amp;amp; input, std::function&amp;lt;T(T)&amp;gt; const&amp;amp; func)
{
    output = func(input);
}

template &amp;lt;typename T&amp;gt;
void unitary_function_pass_by_function_pointer(T&amp;amp; output, T const&amp;amp; input,
                                               T (*func)(T))
{
    output = func(input);
}

int main()
{
    // Set floating point format std::cout with 3 decimal places.
    std::cout.precision(3);

    size_t const num_elements{10000000};
    std::vector&amp;lt;int&amp;gt; input_vector(num_elements, 0);
    std::vector&amp;lt;int&amp;gt; output_vector(num_elements, 0);

    auto const lambda_function_add_one{[](int const&amp;amp; input) -&amp;gt; int
                                       { return input + 1; }};
    std::function&amp;lt;int(int)&amp;gt; const std_function_add_one{lambda_function_add_one};

    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a function pointer: &amp;quot; &amp;lt;&amp;lt; sizeof(&amp;amp;add_one)
              &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a std::function pointer: &amp;quot;
              &amp;lt;&amp;lt; sizeof(&amp;amp;std_function_add_one) &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;The size of a std::function: &amp;quot; &amp;lt;&amp;lt; sizeof(std_function_add_one)
              &amp;lt;&amp;lt; std::endl;

    // Call function frequently in a vanilla way.
    // The compiler knows what function to call at compile time and can optimize
    // the code.
    // This is the best performance we could get.
    std::chrono::steady_clock::time_point const time_start_vanilla{
        std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        output_vector.at(i) = add_one(input_vector.at(i));
    }
    std::chrono::steady_clock::time_point const time_end_vanilla{
        std::chrono::steady_clock::now()};
    auto const time_elapsed_vanilla{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(time_end_vanilla -
                                                             time_start_vanilla)
            .count()};
    float const latency_vanilla{time_elapsed_vanilla /
                                static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass Vanilla: &amp;quot; &amp;lt;&amp;lt; latency_vanilla &amp;lt;&amp;lt; &amp;quot; ns&amp;quot;
              &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // Sometimes, we don&#39;t know what function to call at compile time.
    // We can use std::function to pass a function as an argument.
    // In this case, we pass the std::function by value.
    // Because the size of a std::function is 32 bytes, passing by value
    // results in a lot of copying and bad performance.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_std_function_value{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_std_function_value(
            output_vector.at(i), input_vector.at(i), std_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_std_function_value{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_std_function_value{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_std_function_value -
            time_start_pass_by_std_function_value)
            .count()};
    float const latency_pass_by_std_function_value{
        time_elapsed_pass_by_std_function_value /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Std Function Value: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_std_function_value &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // Instead of passing the std::function by value, we can pass it by
    // reference (pointer). In this case, object copying is eliminated. The
    // performance is better than passing the std::function by value. However,
    // the performance is still not as good as the vanilla way.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_std_function_reference{
            std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_std_function_reference(
            output_vector.at(i), input_vector.at(i), std_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_std_function_reference{
            std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_std_function_reference{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_std_function_reference -
            time_start_pass_by_std_function_reference)
            .count()};
    float const latency_pass_by_std_function_reference{
        time_elapsed_pass_by_std_function_reference /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Std Function Reference: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_std_function_reference &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // std::function is a general purpose wrapper for function pointers,
    // callable objects, and lambda functions. Because it&#39;s general purpose,
    // it&#39;s not as efficient as a function pointer. In this case, we pass a
    // function pointer to a function. The performance is better than passing
    // the std::function by reference.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_function_pointer{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_function_pointer(output_vector.at(i),
                                                  input_vector.at(i), &amp;amp;add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_function_pointer{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_function_pointer{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_function_pointer -
            time_start_pass_by_function_pointer)
            .count()};
    float const latency_pass_by_function_pointer{
        time_elapsed_pass_by_function_pointer /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Function Pointer: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_function_pointer &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);

    // We can also pass a lambda function to a function.
    // The compiler knows what function to call at compile time and can optimize
    // the code. The performance is also better than passing the std::function
    // by reference.
    std::chrono::steady_clock::time_point const
        time_start_pass_by_lambda_function{std::chrono::steady_clock::now()};
    for (size_t i{0}; i &amp;lt; num_elements; ++i)
    {
        unitary_function_pass_by_lambda_function(
            output_vector.at(i), input_vector.at(i), lambda_function_add_one);
    }
    std::chrono::steady_clock::time_point const
        time_end_pass_by_lambda_function{std::chrono::steady_clock::now()};
    auto const time_elapsed_pass_by_lambda_function{
        std::chrono::duration_cast&amp;lt;std::chrono::nanoseconds&amp;gt;(
            time_end_pass_by_lambda_function -
            time_start_pass_by_lambda_function)
            .count()};
    float const latency_pass_by_lambda_function{
        time_elapsed_pass_by_lambda_function /
        static_cast&amp;lt;float&amp;gt;(num_elements)};
    std::cout &amp;lt;&amp;lt; &amp;quot;Latency Pass By Lambda Function: &amp;quot;
              &amp;lt;&amp;lt; latency_pass_by_lambda_function &amp;lt;&amp;lt; &amp;quot; ns&amp;quot; &amp;lt;&amp;lt; std::endl;
    assert(validate_vector_add_one(input_vector, output_vector));
    reset_vector(output_vector);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 组里常规也就开启 O2 优化，编译选用了 gcc13，不同版本的 gcc 性能耗时略有不同，版本越高 lambda 效果越好
The size of a function pointer: 8
The size of a std::function pointer: 8
The size of a std::function: 32
Latency Pass Vanilla: 0.418 ns
Latency Pass By Std Function Value: 3.47 ns
Latency Pass By Std Function Reference: 1.36 ns
Latency Pass By Function Pointer: 0.396 ns
Latency Pass By Lambda Function: 0.44 ns
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://leimao.github.io/blog/CPP-Function-Call-Performance/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://leimao.github.io/blog/CPP-Function-Call-Performance/&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>컴퓨터가 왜 일반적으로 빅엔디안이 아닌 리틀 엔디안을 채택했는가?</title>
        <link>https://blog.ttf248.life/ko/p/little-endian-storage-why/</link>
        <pubDate>Wed, 24 Jan 2024 10:43:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/little-endian-storage-why/</guid>
        <description>&lt;p&gt;바이트 순서에 대한 설명 &lt;a class=&#34;link&#34; href=&#34;https://blog.ttf248.life/ko/p/host-order-network-order-debugger-observation/&#34; &gt;主机序、网络序，通过调试器，直接观察&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;컴퓨터 분야의 역사적 이유로 형성된 특정 설계 습관은, 엉덩이 너비가 로켓 추진기 폭을 결정하는 것과 같은 이치입니다. 안쪽에 &amp;ldquo;장점&amp;quot;이나 &amp;ldquo;단점&amp;quot;을 분석할 필요 없이 순전히 과거의 관습일 뿐입니다.&lt;/p&gt;
&lt;h2 id=&#34;원본-링크&#34;&gt;원본 링크
&lt;/h2&gt;&lt;p&gt;작가: 북극
링크: &lt;a class=&#34;link&#34; href=&#34;https://www.zhihu.com/question/637413724/answer/3346032134&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zhihu.com/question/637413724/answer/3346032134&lt;/a&gt;
출처: 지식인
저작권은 저자에게 있습니다. 상업적 재판행 시에는 저자와 협의하여 허가를 받으시고, 비상업적 재판행 시에는 출처를 명시하십시오.&lt;/p&gt;
&lt;h2 id=&#34;본문-재게시&#34;&gt;본문 재게시
&lt;/h2&gt;&lt;p&gt;현재의 빅엔디언과 릴리틀 엔디언 상황은 역사적 관습과 상업화의 결과이며, 기술 자체와 큰 관련이 없습니다. ARM은 빅엔디언 또는 리틀 엔디언으로 설정할 수 있습니다. TCP/IP 헤더는 아직도 빅엔디언(네트워크 바이트 오더)을 사용하고 있으며, 저장 분야에서도 많은 저장 프로토콜/규격이 빅엔디언 방식으로 데이터를 저장합니다.&lt;/p&gt;
&lt;p&gt;그래서 질문자의 세 가지 질문은, 오늘날에 와서 보면:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터가 왜 널리 리틀 엔디안을 채택하는가? &amp;ndash;&amp;gt; 틀렸습니다&lt;/li&gt;
&lt;li&gt;효율이 더 높지 않습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;이 세 가지 문제에 대해 현재 기술로 논증하는 것은 화살을 쏜 후에 표적을 그리는 행위와 같습니다&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;하지만 빅 엔디언 또는 리틀 엔디언의 선택은 컴퓨터 역사에서 실제로 일정한 객관적인 요인이 있었습니다: 호스트 바이트 오더(리틀 엔디언)의 장점: 리틀 엔디언의 덧셈기는 구현하기 쉽습니다. 8비트 * 4의 덧셈기를 만들면 8비트 덧셈기 하나만 있으면 되며, 낮은 비트부터 높은 비트로 순차적으로 모든 바이트를 더하면 됩니다. 이때 발생하는 자리 올림 회로는 매우 간단합니다. 반면에 빅 엔디언은 한 번에 32비트를 로드해야 하며, 그렇지 않으면 계산을 수행할 수 없습니다. 현재는 한 번에 8비트 또는 32비트를 로드하는 것의 차이가 크지 않지만, 몇십 년 전에는 메모리 가격이 비쌌기 때문에 가능한 한 간단한 것이 좋았고, 따라서 호스트 바이트 오더가 리틀 엔디언으로 선택된 것은 비용을 고려한 결과였습니다. 네트워크 바이트 오더(빅 엔디언)의 장점: 초기 장치의 캐시가 작았기 때문에 높은 바이트를 먼저 수신하면 패킷 정보를 빠르게 판단할 수 있었습니다: 버퍼 크기(얼마나 큰 버퍼를 준비해야 하는지), 주소 범위(IP 주소는 앞부터 뒤로 매칭됩니다). 초기 네트워크 장치의 캐시는 바이트 단위였고, 높은 바이트를 먼저 가져오는 것이 실제로 더 빨랐습니다. 따라서 네트워크 장치가 빅 엔디언을 사용하는 것도 비용을 고려한 결과였습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;그래서, 바이트 오더 선택은 역사적으로는 애플리케이션 시나리오와 비용 고려가 더 많았고 (예: PPC/MIPS는 네트워크 장비에 더 적합), 이후 기술 발전 과정에서 호환성 때문에 빅 엔디언과 리틀 엔디언 설정이 현재까지 유지되고 있습니다&lt;/p&gt;
&lt;p&gt;지금 보면, 이러한 장점은 완전히 사라졌고 역사적인 습관일 뿐입니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>디버깅을 어떻게 막아야 할까요?</title>
        <link>https://blog.ttf248.life/ko/p/program-how-to-anti-debug/</link>
        <pubDate>Tue, 23 Jan 2024 19:46:36 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/program-how-to-anti-debug/</guid>
        <description>&lt;p&gt;뜻밖에도 새로운 배경화면을 찾아보게 됐는데, 역시 검은색 계열이 좋고, 부분적으로 색감을 넣으면 좋겠다. 바탕 화면에 아이콘을 배치해야 하니 다른 색상의 배경화면을 사용하면 아이콘이 잘 보이지 않을 것 같아.&lt;/p&gt;
&lt;p&gt;위에 있는 어셈블리 코드 보고 생각 좀 해봤는데, 무슨 말인지 모르겠어. __INLINE_CODE_0__에게 맡겨서 명령어를 설명받았지만, 상황은 설명 안 해주네. 분명 특수한 상황에서만 쓰이는 명령어인 것 같아. 일반적인 코드는 이런식으로 생기지 않아.&lt;/p&gt;
&lt;p&gt;지금은 검색 엔진이 더 나을 것 같아요, 어셈블리 지식이 부족하니까요&lt;/p&gt;
&lt;h2 id=&#34;벽지&#34;&gt;벽지
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/program-how-to-anti-debug/Snipaste_2024-01-23_19-50-53.png&#34;
	width=&#34;1020&#34;
	height=&#34;470&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;黑色汇编壁纸&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;어셈블리-코드&#34;&gt;어셈블리 코드
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PUSHFD
MOV DWORD PTR [ESP],0X100
POPFD
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제 사용 시나리오&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool IsDebugged()
{
    __try
    {
        __asm
        {
            pushfd
            mov dword ptr [esp], 0x100
            popfd
            nop
        }
        return true;
    }
    __except(GetExceptionCode() == EXCEPTION_SINGLE_STEP
        ? EXCEPTION_EXECUTE_HANDLER
        : EXCEPTION_CONTINUE_EXECUTION)
    {
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;설명&#34;&gt;설명
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TrapFlag&lt;/code&gt;강조_2&lt;code&gt;SINGLE_STEP&lt;/code&gt;，우리가 코드를 추적하면 이 플래그는 디버거에 의해 초기화되므로 예외를 볼 수 없습니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;실제 테스트 결과, 검사 디버깅 함수를 직접 건너뛰면 디버깅이 감지되지 않지만, 검사 함수 실행 시에만 감지되는 것으로 나타났다 (자료 조사 중이며 아직 실제 확인은 되지 않았다)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;관련 자료는 웹사이트의 영문 원본을 번역한 것이며, 사이트에서는 다양한 디버깅 방지 기술에 대해 설명하고 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://anti-debug.checkpoint.com/techniques/assembly.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://anti-debug.checkpoint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://song-10.gitee.io/2021/08/08/Reverse-2021-08-08-anti-debug/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>초점 인터뷰/CCTV 비디오 파일을 어떻게 다운로드하나요?</title>
        <link>https://blog.ttf248.life/ko/p/how-to-download-focus-interview-cctv-video-files/</link>
        <pubDate>Tue, 23 Jan 2024 19:23:35 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/how-to-download-focus-interview-cctv-video-files/</guid>
        <description>&lt;p&gt;최근에 누가 물어봤는데, 시사 인터뷰 영상 다운로드하는 방법이 있냐고. 머리 속에는 거의 틀림없이 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 방식으로 암호화되어 있을 거라고 생각했는데, 간단히 처리했다.&lt;/p&gt;
&lt;h2 id=&#34;다운로더&#34;&gt;다운로더
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/nilaoda/N_m3u8DL-CLI&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/nilaoda/N_m3u8DL-CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;오픈 소스 명령줄 m3u8/HLS/dash 다운로더입니다. 일반적인 AES-128-CBC 복호화, 멀티 스레드, 사용자 지정 헤더 등을 지원합니다. 간체 중국어, 번체 중국어 및 영어를 지원합니다.&lt;/p&gt;
&lt;h2 id=&#34;브라우저-플러그인&#34;&gt;브라우저 플러그인
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://microsoftedge.microsoft.com/addons/detail/ngjclnbcdbahekojpkhancmiobdahemb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Live Stream Downloader&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;달콤한-자신감&#34;&gt;달콤한 자신감
&lt;/h2&gt;&lt;p&gt;주소를 받았다고 생각했는데, 아무것도 아니었고, 분단 내용을 정상적으로 파싱할 수 없었습니다. 자료를 검색해 보니 공식에서 다운로드 주소를 처리해서, 플러그인이 해석한 __INLINE_CODE_0__을 아래 링크에 수동으로 복사하여 교체해야 합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;https://newcntv.qcloudcdn.com/asp/hls/2000/0303000a/3/default/***********************/2000.m3u8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2024년 1월까지 주소 테스트는 유효하며, 이후 변경 사항은 웹페이지에서 직접 확인하시기 바랍니다&lt;/p&gt;
&lt;p&gt;이전 주소 백업: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://jln.cn/post/517.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://jln.cn/post/517.html&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>SQL Server 데이터베이스 디스크 파일 권한 일괄 수정</title>
        <link>https://blog.ttf248.life/ko/p/bulk-modify-sqlserver-database-disk-file-permissions/</link>
        <pubDate>Tue, 23 Jan 2024 19:06:36 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/bulk-modify-sqlserver-database-disk-file-permissions/</guid>
        <description>&lt;p&gt;회사 보안 정책 변경으로 인해 &lt;strong&gt;이탤릭체_5__굵게_3__이탤릭체_6__굵게_4__이탤릭체_7&lt;/strong&gt;, 활성화 방법이 비정규적이어서, 집에서는 활성화하지 않아도 괜찮은 것 같습니다&lt;/p&gt;
&lt;p&gt;비정상적인 방식으로 활성화하여 마이크로소프트의 검사를 트리거했는데 (반달 동안 정상적으로 실행되었음), 서버는 부팅 한 시간 후 자동으로 종료되었습니다. 시스템 로그를 뒤져보니 불법 복제본 문제였습니다.&lt;/p&gt;
&lt;p&gt;방법이 없네요, 시스템을 다시 설치해야겠어요. __INLINE_CODE_0__도 재설치를 해야 하고, 할 때마다 골치 아파요. 파일 권한 관리가 엄격해서 데이터베이스를 정상적으로 추가할 수 없네요.&lt;/p&gt;
&lt;h2 id=&#34;오류-정보&#34;&gt;오류 정보
&lt;/h2&gt;&lt;p&gt;시스템을 재설치한 후, &lt;code&gt;SqlServer&lt;/code&gt; 부가 데이터베이스에서 5120 오류, 운영체제 접근 거부 발생할 수 있습니다&lt;/p&gt;
&lt;h2 id=&#34;스크립트-처리&#34;&gt;스크립트 처리
&lt;/h2&gt;&lt;p&gt;이전 링크: &lt;a class=&#34;link&#34; href=&#34;https://blog.ttf248.life/ko/p/bulk-update-local-git-repository-and-legacy-permission-issues/&#34; &gt;批量更新本地Git仓库&lt;/a&gt;, 변함없이 익숙한 스크립트입니다. 폴더를 순회하면서 파일 권한을 수정하는데, 현재는 완전 편집 권한을 부여합니다.&lt;/p&gt;
&lt;p&gt;온라인 튜토리얼은 대부분 수동 수정인데, 그들은 몇 개의 파일만 수정하는 건가? 나는 항상 한꺼번에 많은 파일을 처리해야 하고, 전부 수동으로 하려니 사람이 지쳐&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$rootDirectory = &amp;quot;D:\data\2013_RujiaInfo&amp;quot;

Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    if ($_ -is [System.IO.DirectoryInfo]) {
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
            # 授予当前用户写入权限
            Invoke-Expression &amp;quot;icacls `&amp;quot;$itemPath`&amp;quot; /grant `&amp;quot;$($currentUserName):(OI)(CI)F`&amp;quot;&amp;quot;
            Write-Host &amp;quot;已授予 $currentUserName 编辑文件夹的权限&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # 授予当前用户写入权限
            Invoke-Expression &amp;quot;icacls `&amp;quot;$itemPath`&amp;quot; /grant `&amp;quot;$($currentUserName):(F)`&amp;quot;&amp;quot;
            Write-Host &amp;quot;已授予 $currentUserName 编辑文件的权限&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>리눅스 시스템 벤치마크 테스트</title>
        <link>https://blog.ttf248.life/ko/p/linux-system-benchmark-test/</link>
        <pubDate>Tue, 09 Jan 2024 10:56:23 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/linux-system-benchmark-test/</guid>
        <description>&lt;p&gt;윈도우 플랫폼에는 루마스터(유희 마스터)라는 프로그램이 있는데, 데이터가 정확하다고는 할 수 없지만 참고 자료 정도는 된다. 물론 다른 전문 벤치마크 소프트웨어도 있고, 리눅스 시스템에서는 특별히 적합한 벤치마크 프로그램을 찾은 적은 없는 것 같다.&lt;/p&gt;
&lt;p&gt;Sysbench는 CPU, 메모리, 파일 I/O, 스레드 성능 등 다양한 기능을 테스트할 수 있는 다목적 벤치마크 도구입니다. 다양한 성능 테스트 작업을 수행하는 데 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;테스트에 사용할 기기가 세 대 있습니다: 메커니즘 미니 로컬 호스트, 알리바바 클라우드 개발 클라우드 서버, 화웨이 클라우드 개발 서버&lt;/p&gt;
&lt;h2 id=&#34;sysbench-설치&#34;&gt;Sysbench 설치
&lt;/h2&gt;&lt;p&gt;대부분의 Linux 배포판에서 패키지 관리 도구를 사용하여 Sysbench를 설치할 수 있습니다. 예를 들어 CentOS 8에서는 다음 명령어를 사용하여 설치할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dnf install sysbench
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sysbench-사용-예시&#34;&gt;Sysbench 사용 예시
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CPU 성능 테스트: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;메모리 읽기 성능 테스트: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;테스트 파일 I/O 성능:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=fileio --file-test-mode=rndrw prepare
sysbench --test=fileio --file-test-mode=rndrw run
sysbench --test=fileio --file-test-mode=rndrw cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;멀티스레드 성능 테스트: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;MySQL 데이터베이스 성능 테스트 (최대 연결 수 조정 필요):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --oltp-table-size=1000000 prepare
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword --max-time=60 --oltp-read-only=off --oltp-test-mode=complex --max-requests=0 run
sysbench --test=oltp --db-driver=mysql --mysql-db=test --mysql-user=yourusername --mysql-password=yourpassword cleanup
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;분포-데이터-보고서&#34;&gt;분포 데이터 보고서
&lt;/h2&gt;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&lt;link type=&#34;text/css&#34; rel=&#34;stylesheet&#34; href=&#34;resources/sheet.css&#34; &gt;
&lt;style type=&#34;text/css&#34;&gt;.ritz .waffle a { color: inherit; }.ritz .waffle .s0{background-color:#ffffff;text-align:left;color:#000000;font-family:&#39;Arial&#39;;font-size:10pt;vertical-align:bottom;white-space:nowrap;direction:ltr;padding:2px 3px 2px 3px;}&lt;/style&gt;&lt;div class=&#34;ritz grid-container&#34; dir=&#34;ltr&#34;&gt;&lt;table class=&#34;waffle&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th class=&#34;row-header freezebar-origin-ltr&#34;&gt;&lt;/th&gt;&lt;th id=&#34;0C0&#34; style=&#34;width:100px;&#34; class=&#34;column-headers-background&#34;&gt;A&lt;/th&gt;&lt;th id=&#34;0C1&#34; style=&#34;width:421px;&#34; class=&#34;column-headers-background&#34;&gt;B&lt;/th&gt;&lt;th id=&#34;0C2&#34; style=&#34;width:398px;&#34; class=&#34;column-headers-background&#34;&gt;C&lt;/th&gt;&lt;th id=&#34;0C3&#34; style=&#34;width:422px;&#34; class=&#34;column-headers-background&#34;&gt;D&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R0&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;1&lt;/div&gt;&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;本地机械师&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;阿里云&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;华为云&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R1&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;2&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;系统配置&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 23.04&lt;br&gt;  Kernel                        Linux 6.2.0-36-generic x86_64&lt;br&gt;  Model                         Machenike Machenike DT Computer&lt;br&gt;  Motherboard                   Machenike Machenike DT Computer&lt;br&gt;  BIOS                          American Megatrends International, LLC.&lt;br&gt;DB19V012&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel Core i7-12650H&lt;br&gt;  Topology                      1 Processor, 10 Cores, 16 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 154 Stepping 3&lt;br&gt;  Base Frequency                4.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB x 8&lt;br&gt;  L1 Data Cache                 48.0 KB x 8&lt;br&gt;  L2 Cache                      1.25 MB x 2&lt;br&gt;  L3 Cache                      24.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          62.6 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              CentOS Stream 8&lt;br&gt;  Kernel                        Linux 4.18.0-513.el8.x86_64 x86_64&lt;br&gt;  Model                         Alibaba Cloud Alibaba Cloud ECS&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS 449e491&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Platinum&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 4&lt;br&gt;  Base Frequency                2.50 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      33.0 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          1.65 GB&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;System Information&lt;br&gt;  Operating System              Ubuntu 22.04.1 LTS&lt;br&gt;  Kernel                        Linux 5.15.0-60-generic x86_64&lt;br&gt;  Model                         OpenStack Foundation OpenStack Nova&lt;br&gt;  Motherboard                   N/A&lt;br&gt;  BIOS                          SeaBIOS&lt;br&gt;rel-1.10.2-0-g5f4c7b1-20181220_000000-szxrtosci10000&lt;br&gt;&lt;br&gt;CPU Information&lt;br&gt;  Name                          Intel(R) Xeon(R) Gold 6278C CPU @ 2.60GHz&lt;br&gt;  Topology                      1 Processor, 1 Core, 2 Threads&lt;br&gt;  Identifier                    GenuineIntel Family 6 Model 85 Stepping 7&lt;br&gt;  Base Frequency                2.60 GHz&lt;br&gt;  L1 Instruction Cache          32.0 KB&lt;br&gt;  L1 Data Cache                 32.0 KB&lt;br&gt;  L2 Cache                      1.00 MB&lt;br&gt;  L3 Cache                      35.8 MB&lt;br&gt;&lt;br&gt;Memory Information&lt;br&gt;  Size                          3.64 GB&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R2&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;3&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;CPU&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  4032.48&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              40330&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.25&lt;br&gt;         avg:                                    0.25&lt;br&gt;         max:                                    0.73&lt;br&gt;         95th percentile:                        0.25&lt;br&gt;         sum:                                 9997.55&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           40330.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9975/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1062.51&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0008s&lt;br&gt;    total number of events:              10628&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.91&lt;br&gt;         avg:                                    0.94&lt;br&gt;         max:                                   22.84&lt;br&gt;         95th percentile:                        1.06&lt;br&gt;         sum:                                 9993.46&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           10628.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9935/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;sysbench 1.0.20 (using system LuaJIT 2.1.0-beta3)&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Prime numbers limit: 10000&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;CPU speed:&lt;br&gt;    events per second:  1125.56&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0005s&lt;br&gt;    total number of events:              11258&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.86&lt;br&gt;         avg:                                    0.89&lt;br&gt;         max:                                    1.70&lt;br&gt;         95th percentile:                        0.99&lt;br&gt;         sum:                                 9995.40&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           11258.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9954/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R3&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;4&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;内存&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 101993199 (10198146.52 per second)&lt;br&gt;&lt;br&gt;99602.73 MiB transferred (9959.13 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              101993199&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.03&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4059.50&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           101993199.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.0595/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 48418803 (4841004.79 per second)&lt;br&gt;&lt;br&gt;47283.99 MiB transferred (4727.54 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              48418803&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                   25.26&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4578.95&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           48418803.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5789/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Running memory speed test with the following options:&lt;br&gt;  block size: 1KiB&lt;br&gt;  total size: 102400MiB&lt;br&gt;  operation: write&lt;br&gt;  scope: global&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;Total operations: 57056904 (5704765.11 per second)&lt;br&gt;&lt;br&gt;55719.63 MiB transferred (5571.06 MiB/sec)&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0001s&lt;br&gt;    total number of events:              57056904&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.00&lt;br&gt;         max:                                    0.06&lt;br&gt;         95th percentile:                        0.00&lt;br&gt;         sum:                                 4556.06&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           57056904.0000/0.00&lt;br&gt;    execution time (avg/stddev):   4.5561/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R4&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;5&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;硬盘&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 1.81 seconds (1129.59 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      3373.41&lt;br&gt;    writes/s:                     2248.94&lt;br&gt;    fsyncs/s:                     7201.80&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  52.71&lt;br&gt;    written, MiB/s:               35.14&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0127s&lt;br&gt;    total number of events:              128288&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.08&lt;br&gt;         max:                                    5.14&lt;br&gt;         95th percentile:                        0.34&lt;br&gt;         sum:                                 9977.78&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           128288.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9778/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 19.29 seconds (106.16 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1593.12&lt;br&gt;    writes/s:                     1062.08&lt;br&gt;    fsyncs/s:                     3406.64&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  24.89&lt;br&gt;    written, MiB/s:               16.60&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0164s&lt;br&gt;    total number of events:              60600&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                   31.32&lt;br&gt;         95th percentile:                        0.54&lt;br&gt;         sum:                                 9956.30&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           60600.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9563/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;2147483648 bytes written in 18.29 seconds (111.98 MiB/sec).&lt;br&gt;&lt;br&gt;Running the test with following options:&lt;br&gt;Number of threads: 1&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Extra file open flags: (none)&lt;br&gt;128 files, 16MiB each&lt;br&gt;2GiB total file size&lt;br&gt;Block size 16KiB&lt;br&gt;Number of IO requests: 0&lt;br&gt;Read/Write ratio for combined random IO test: 1.50&lt;br&gt;Periodic FSYNC enabled, calling fsync() each 100 requests.&lt;br&gt;Calling fsync() at the end of test, Enabled.&lt;br&gt;Using synchronous I/O mode&lt;br&gt;Doing random r/w test&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;File operations:&lt;br&gt;    reads/s:                      1665.88&lt;br&gt;    writes/s:                     1110.59&lt;br&gt;    fsyncs/s:                     3563.77&lt;br&gt;&lt;br&gt;Throughput:&lt;br&gt;    read, MiB/s:                  26.03&lt;br&gt;    written, MiB/s:               17.35&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0112s&lt;br&gt;    total number of events:              63355&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.00&lt;br&gt;         avg:                                    0.16&lt;br&gt;         max:                                  205.01&lt;br&gt;         95th percentile:                        0.78&lt;br&gt;         sum:                                 9972.64&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           63355.0000/0.00&lt;br&gt;    execution time (avg/stddev):   9.9726/0.00&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;height: 20px&#34;&gt;&lt;th id=&#34;0R5&#34; style=&#34;height: 20px;&#34; class=&#34;row-headers-background&#34;&gt;&lt;div class=&#34;row-header-wrapper&#34; style=&#34;line-height: 20px&#34;&gt;6&lt;/div&gt;&lt;/th&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;多线程&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0002s&lt;br&gt;    total number of events:              197956&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.16&lt;br&gt;         avg:                                    0.20&lt;br&gt;         max:                                    0.34&lt;br&gt;         95th percentile:                        0.21&lt;br&gt;         sum:                                39970.47&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           49489.0000/5.70&lt;br&gt;    execution time (avg/stddev):   9.9926/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0174s&lt;br&gt;    total number of events:              18360&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.57&lt;br&gt;         avg:                                    2.18&lt;br&gt;         max:                                   32.77&lt;br&gt;         95th percentile:                        2.61&lt;br&gt;         sum:                                40050.41&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           4590.0000/94.36&lt;br&gt;    execution time (avg/stddev):   10.0126/0.00&lt;/td&gt;&lt;td class=&#34;s0&#34; dir=&#34;ltr&#34;&gt;Running the test with following options:&lt;br&gt;Number of threads: 4&lt;br&gt;Initializing random number generator from current time&lt;br&gt;&lt;br&gt;&lt;br&gt;Initializing worker threads...&lt;br&gt;&lt;br&gt;Threads started!&lt;br&gt;&lt;br&gt;&lt;br&gt;General statistics:&lt;br&gt;    total time:                          10.0004s&lt;br&gt;    total number of events:              28536&lt;br&gt;&lt;br&gt;Latency (ms):&lt;br&gt;         min:                                    0.23&lt;br&gt;         avg:                                    1.40&lt;br&gt;         max:                                    3.56&lt;br&gt;         95th percentile:                        1.47&lt;br&gt;         sum:                                39975.16&lt;br&gt;&lt;br&gt;Threads fairness:&lt;br&gt;    events (avg/stddev):           7134.0000/39.87&lt;br&gt;    execution time (avg/stddev):   9.9938/0.01&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ChatGPT&lt;/code&gt;**BOLD_2&lt;code&gt;Markdown&lt;/code&gt;완전히 표 형태로 만들 수 없으며, 그렇게 하지 않으면 효과가 매우 나쁩니다. 사용자 정의 테마는 페이지 최대 너비를 제한하고, 페이지 설정이 동기화되어 너비가 퍼센트 제한으로 변경되었습니다.__&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;간단한 방법은 TablesGenerator와 같은 온라인 도구를 사용하여 HTML 테이블을 생성하는 것입니다(복잡한 내용은 적합하지 않음)&lt;/li&gt;
&lt;li&gt;또는 구글 온라인 문서로 작성한 후 HTML 문서로 다운로드하여 저장하고, 블로그에 바로 복사하는 방법이 있습니다 (간단하고 직접적이며, 최종적으로 이 방법을 사용했습니다)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;config 설정에서 unsafe 옵션이 활성화되어 있는지 확인하고, 페이지별로 너비를 개별적으로 지정하세요&lt;/p&gt;
&lt;p&gt;Hugo에서 페이지별로 너비를 설정할 수 있습니다. 이는 페이지의 프론트 매터에 사용자 지정 파라미터를 추가하여 구현할 수 있습니다. 다음은 예시입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;마크다운 페이지의 프론트 매터 부분(일반적으로 파일 시작 부분)에 사용자 지정 파라미터를 추가하세요. 예를 들어, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---
title: &amp;quot;我的页面&amp;quot;
date: 2024-01-09
custom_width: &amp;quot;800px&amp;quot;  # 设置宽度为 800 像素
---

正文内容...
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;귀하의 Hugo 테마에서 해당 단일 페이지 템플릿 파일(예: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;)을 찾거나 생성하십시오&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단일 페이지 템플릿에서, 페이지의 프론트 매터에 &lt;code&gt;custom_width&lt;/code&gt;BOLD_2&lt;code&gt;div&lt;/code&gt;가 있는지 확인하세요:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ define &amp;quot;main&amp;quot; }}
  &amp;lt;div style=&amp;quot;max-width: {{ with .Params.custom_width }}{{ . }}{{ else }}100%{{ end }}; margin: 0 auto;&amp;quot;&amp;gt;
    {{ .Content }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 예제에서는 인라인 스타일(&lt;strong&gt;INLINE_CODE_0__属性）为 &lt;code&gt;div&lt;/code&gt; 元素设置了 &lt;code&gt;max-width&lt;/code&gt;BOLD_8__INLINE_CODE_3&lt;/strong&gt; 参数时，宽度默认为100%。&lt;code&gt;margin: 0 auto;&lt;/code&gt; 用于将 &lt;code&gt;div&lt;/code&gt;) 요소들을 가운데 정렬했습니다&lt;/p&gt;
&lt;p&gt;실제 적용 시에는 주제 구조와 CSS 스타일의 세부 사항에 따라 위 예시를 조정해야 할 수 있습니다. 스타일을 조정할 때는 일관성과 가독성을 유지하는 것이 중요합니다.&lt;/p&gt;
&lt;p&gt;활성화된 테마가 약간 달라서, 사이트 사용자 정의의 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 설정을 최종적으로 조정했습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>Git 비활성화 http 저장소</title>
        <link>https://blog.ttf248.life/ko/p/git-disable-http-repositories/</link>
        <pubDate>Mon, 08 Jan 2024 21:22:04 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/git-disable-http-repositories/</guid>
        <description>&lt;p&gt;소프트웨어 버전 업데이트를 습관화했지만, 어떤 버전의 &lt;strong&gt;INLINE_CODE_0__开始，禁止从__INLINE_CODE_1&lt;/strong&gt; 저장소에서 코드를 가져와야 할지 모르겠네요&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;fatal: Unencrypted HTTP is not supported for GitLab. Ensure the repository remote URL is using HTTPS
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;배경-소개&#34;&gt;배경 소개
&lt;/h2&gt;&lt;p&gt;환경: Windows 플랫폼, 항상 작은 거북이로 git을 사용하고 있었고, 키 설정도 작은 거북이로 처리했으며, 이전에 스크립트를 통해 로컬 저장소를 일괄적으로 업데이트한 적이 있습니다&lt;/p&gt;
&lt;p&gt;이전 링크: &lt;a class=&#34;link&#34; href=&#34;https://blog.ttf248.life/ko/p/bulk-update-local-git-repository-and-legacy-permission-issues/&#34; &gt;批量更新本地Git仓库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;오늘 코드 업데이트를 하려는데, 앞서 발생했던 오류가 발생해서 저장소를 정상적으로 업데이트할 수 없게 됐습니다. __INLINE_CODE_0__应该提供了配置，让我继续使用__INLINE_CODE_1__의 프로토콜 업데이트 저장소를 찾으려고 했는데, 관련 설정 항목을 찾을 수가 없네요.&lt;/p&gt;
&lt;p&gt;가장 간단한 해결책은 당연히 __INLINE_CODE_0__BOLD_3&lt;code&gt;gitlab&lt;/code&gt;BOLD_4&lt;code&gt;https&lt;/code&gt;프로토콜로 전환하는 것입니다&lt;/p&gt;
&lt;h2 id=&#34;미결-문제&#34;&gt;미결 문제
&lt;/h2&gt;&lt;p&gt;앞서 작성한 로컬 저장소 일괄 업데이트 스크립트에서 __INLINE_CODE_0__BOLD_2&lt;code&gt;git&lt;/code&gt; 설정 정보가 config에 동기화되지 않아 명령줄 실행 시 발생했습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git pull #提示没有权限，无法正常更新仓库
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;명령을 통해 키 설정도 확인하는 것은 올바르다: &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TortoiseGit으로 코드를 정상적으로 가져올 수 있지만 명령줄에서 git pull 명령을 사용할 때 키가 올바르지 않다고 표시되면 TortoiseGit이 PuTTY의 SSH 키를 사용하는 반면 명령줄은 OpenSSH의 SSH 키를 사용하기 때문일 수 있습니다&lt;/p&gt;
&lt;p&gt;작은 거북이의 키 설정은 시스템 .ssh 폴더에서 키 파일 정보를 읽어오는 대신, 인터페이스 저장소 구성 시 별도로 키 파일 경로를 설정합니다. 유용한 팁: 첫 번째 저장소를 가져오기 위한 키를 설정하면 나머지 저장소는 이 키 파일을 재사용할 수 있습니다. PuTTY가 키를 로드한 후 즉시 종료되지 않고 프록시 서비스를 시작합니다.&lt;/p&gt;
&lt;p&gt;전역 설정을 조정하여 시스템 기본 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 설정 대신, 이렇게 설정하면 Git Bash는 TortoisePlink를 사용하여 SSH 작업을 수행합니다. 이 설정은 TortoiseGit에 포함된 PuTTY 도구를 사용하는 경우에 적합합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global core.sshCommand &amp;quot;&#39;C:/Program Files/TortoiseGit/bin/TortoisePlink.exe&#39; -batch -ssh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위에 설정된 실행 파일 경로를 해당 작은 거북이 경로로 직접 수정하면 시스템 환경 변수에 경로를 추가할 필요가 없습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>AI 프로그래밍 및 작업 분할</title>
        <link>https://blog.ttf248.life/ko/p/ai-programming-and-task-decomposition/</link>
        <pubDate>Fri, 22 Dec 2023 08:44:26 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/ai-programming-and-task-decomposition/</guid>
        <description>&lt;p&gt;2년 전 사이트에 코드 영역 복사 기능을 추가하려고 했는데, 반쯤 날로 붙들여 놓은 듯했고, 렌더링 효과도 만족스럽지 않았습니다. 반쪽짜리 프론트엔드 개발자였으니 개선할 생각도 없이 그냥 쓰고 있었는데, 올해 __INLINE_CODE_0__으로 미니 프로그램을 개발하면서 프론트엔드 개발에 더 익숙해졌고, AI를 활용하여 다시 디자인했습니다.&lt;/p&gt;
&lt;p&gt;깨달음: 임무 분해, 여러 소임들, &lt;em&gt;이탤릭 강조&lt;/em&gt; 굵게 표시_ 또 다른 소임들_&lt;/p&gt;
&lt;h2 id=&#34;전문&#34;&gt;전문
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;promot&lt;/strong&gt;: CSS 및 JavaScript 코드를 설계하여, 클래스가 &amp;ldquo;highlight&amp;quot;인 웹 요소의 컨테이너 내에 복사 버튼을 추가하고 코드 복사 기능을 구현합니다&lt;/p&gt;
&lt;p&gt;제공된 첫 번째 초안 코드에는 문제가 있어 보입니다. 다시 생성한 두 번째 초안은 기본적으로 사용 가능하지만, 복사된 내용이 정확하지 않고 불필요한 텍스트가 있습니다. 핵심 색상 디자인과 포함될 효과를 지정하여 추가 최적화를 유도합니다.&lt;/p&gt;
&lt;p&gt;버튼 크기 및 색상에 대한 특정 요구 사항을 파악했습니다. 이러한 요구 사항에 맞게 버튼 스타일을 재설계할 수 있으며, 제공해주신 색상 구성표를 포함하고 버튼 크기를 최적화한 CSS 스타일이 아래와 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.copy-btn {
  position: absolute;
  top: 2px; /* 调整位置 */
  right: 2px;
  padding: 3px 6px; /* 缩小尺寸 */
  font-size: 12px; /* 减小字体大小 */
  background-color: #8FD1E1; /* 按钮背景色 */
  color: #272822; /* 文字颜色 */
  border: 1px solid #272822; /* 边框颜色 */
  border-radius: 3px; /* 圆角 */
  cursor: pointer;
  opacity: 0.7; /* 默认半透明 */
  transition: opacity 0.3s ease, background-color 0.3s ease; /* 平滑过渡效果 */
}

.copy-btn:hover {
  opacity: 1; /* 鼠标悬停时不透明 */
  background-color: #A3D4E5; /* 鼠标悬停时的背景色 */
}

.highlight {
  position: relative;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 스타일에서 버튼 크기와 글꼴 크기를 줄여 더욱 세련되게 만들었습니다. 또한, 버튼의 기본 상태는 반투명하며, 마우스가 올라오면 불투명해지고 배경색이 약간 밝아져 시각적인 피드백을 제공합니다. 이러한 디자인은 귀하의 색상 요구 사항을 충족하면서도 현대적이고 사용자 친화적인 특징을 유지합니다.&lt;/p&gt;
&lt;p&gt;해당하는 더 간단한 ____이 제공되었습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  // 查找所有 .highlight 元素
  const highlights = document.querySelectorAll(&#39;.highlight&#39;);

  highlights.forEach(function(highlight) {
    // 创建复制按钮
    const copyBtn = document.createElement(&#39;button&#39;);
    copyBtn.textContent = &#39;复制&#39;;
    copyBtn.classList.add(&#39;copy-btn&#39;);

    // 将按钮添加到每个 .highlight 元素中
    highlight.appendChild(copyBtn);

    // 添加点击事件监听器
    copyBtn.addEventListener(&#39;click&#39;, function() {
      // 假设 .highlight 下的第一个 &amp;lt;code&amp;gt; 元素包含要复制的代码
      const code = highlight.querySelector(&#39;code&#39;) ? highlight.querySelector(&#39;code&#39;).textContent : &#39;&#39;;

      navigator.clipboard.writeText(code).then(() =&amp;gt; {
        // 显示复制成功信息
        copyBtn.textContent = &#39;已复制!&#39;;
        setTimeout(() =&amp;gt; {
          copyBtn.textContent = &#39;复制&#39;;
        }, 2000);
      }).catch(err =&amp;gt; {
        console.error(&#39;复制失败: &#39;, err);
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;비록 코드 영역 오른쪽 상단에 복사 버튼을 추가하기를 더 바라지만, 프론트엔드에 대한 이해 부족으로 정확한 기능 설명을 위한 키워드를 제시하지 못했고, __INLINE_CODE_0__과 여러 차례 시도했음에도 기대했던 결과를 얻지 못했습니다&lt;/p&gt;
&lt;p&gt;시간이 지남에 따라 &lt;code&gt;AI&lt;/code&gt;이 프로그램 개발에 얼마나 영향을 미칠지 모르겠다&lt;/p&gt;</description>
        </item>
        <item>
        <title>동방전선 소문 논란: 문화와 상업의 충돌</title>
        <link>https://blog.ttf248.life/ko/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</link>
        <pubDate>Wed, 20 Dec 2023 18:57:25 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/dongfang-zhenxuan-essay-controversy-culture-vs-commerce/</guid>
        <description>&lt;p&gt;동방전선 소문 사건은 동방전선 공식 계정이 방송인 덩위후이가 모든 소문의 저자임을 부인하면서 발생한 온라인 논란이다. 진실이 어떠했는지는 이미 확인할 수 없고, 회사 권모술수의 다툼으로 인해 이 일이 풍심에 오르내리게 되었다.&lt;/p&gt;
&lt;p&gt;어류의 7초 기억력, 이후에는 &lt;code&gt;AI&lt;/code&gt;BOLD_3&lt;code&gt;Bing AI&lt;/code&gt;和&lt;code&gt;ChatGPT plus&lt;/code&gt;에 전달되는데, 전자는 더 완전한 자료를 제공하지만 검색 엔진이 얻는 자료는 좀 더 많습니다. 출력되는 블로그 내용이 충분하지 않고 형식은 다소 경직되어 있습니다. 후자는 키워드를 통해 내용을 획득하고 생성된 내용은 그렇게 완전하지 않지만 전체 블로그 내용을 획득할 수 있으며, 참고 자료 웹사이트를 제공하면 생성된 초안을 최적화할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;동방전선 소문 사건은 저작권 및 창작물 귀속을 둘러싼 논쟁으로, 2023년 12월 5일부터 시작되어 방송인 동우휘와 동방전선의 일련의 상호작용이 포함되었습니다. 이 파장은 단순한 사업 운영의 복잡성을 드러낼 뿐만 아니라 현대 상업 문화와 네트워크 사회에 대한 깊은 반성을 불러일으켰습니다.&lt;/p&gt;
&lt;h4 id=&#34;2023년-12월-5일-사건-발단&#34;&gt;2023년 12월 5일: 사건 발단
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;동방전선이 예고 영상을 게시했는데, 앵커 둥위후이가 낭송한 ‘작은 글’이 빠르게 인기를 얻었다&lt;/li&gt;
&lt;li&gt;동방전선은 영상 댓글에서 이러한 짧은 글들은 대부분 카피라이팅 팀이 제작했으며, 전부 동우휘의 작품이 아니라고 밝혔습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023년-12월-13일-동우후이의-답변&#34;&gt;2023년 12월 13일: 동우후이의 답변
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;동우휘가 장문의 글을 통해 &amp;ldquo;飯圈&amp;quot;이라는 이름으로 누구를 낙인찍는 것을 반대하며, 사건에 대한 자신의 입장을 밝혔다&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023년-12월-14일-경영진의-답변&#34;&gt;2023년 12월 14일: 경영진의 답변
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;동방전선 CEO 션둥쉬가 사과 영상을 발표하며 회사 경영상의 허점을 인정했다&lt;/li&gt;
&lt;li&gt;동방전선 회장 유민홍 또한 이번 사태에 대해 입장을 밝혔다며, 동우휘에게 사과했다&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023년-12월-16일-중대한-결정&#34;&gt;2023년 12월 16일: 중대한 결정
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;동방전선이 션둥쉬 CEO 직위 해임 및 유민홍 겸직 발표&lt;/li&gt;
&lt;li&gt;같은 날, 유민홍은 사과서를 발표하며 차단했던 네티즌들의 방송 시청 금지 조치를 해제할 것이라고 밝혔다&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2023년-12월-18일-동우후이의-새로운-역할&#34;&gt;2023년 12월 18일: 동우후이의 새로운 역할
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;신동방교육기술그룹은 동우휘를 신동방교육기술그룹 문화조력장으로 임명하고, 신동방문화여행그룹 부사장직을 겸임한다&lt;/li&gt;
&lt;li&gt;유민홍은 둥우후이와 함께 스튜디오를 설립하여 새로운 라이브 계정 및 방송실을 구축할 것이라고 밝혔다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;결론-및-반성&#34;&gt;결론 및 반성
&lt;/h2&gt;&lt;p&gt;이 논란은 저작권 및 창작 귀속에 대한 분쟁일 뿐만 아니라, 문화와 상업의 충돌을 심층적으로 반영한다. 디지털화되고 파편화된 시대적 배경 속에서 콘텐츠 창작의 저작권 귀속 문제는 깊이 고민해야 할 주제가 되었다. 동방전선 소문 사건은 단순한 언론 논란이 아닌, 현대 상업 문화와 네트워크 사회에 대한 깊은 성찰이다.&lt;/p&gt;
&lt;p&gt;관찰자로서 우리는 문화와 상업의 충돌을 어떻게 바라봐야 할까? 동시에 상업적 이익을 추구하면서 창작자의 노고를 어떻게 보호하고 존중해야 할까? 이러한 질문은 우리 모두가 깊이 고민해 볼 가치가 있다&lt;/p&gt;</description>
        </item>
        <item>
        <title>게임 심리학: 경쟁 게임</title>
        <link>https://blog.ttf248.life/ko/p/game-psychology-esports/</link>
        <pubDate>Mon, 11 Dec 2023 10:26:22 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/game-psychology-esports/</guid>
        <description>&lt;p&gt;여기 氪金 게임에 대한 논쟁은 하지 않습니다. 게임 커뮤니티에서는 이런 유형의 플레이어를 &amp;lsquo;돈 버는 전사&amp;rsquo;라고 부릅니다. 게임 설정에 대한 이해보다는 두둑한 지갑이 필요하며, 주변 부하들의 아첨과 __INLINE_CODE_0__에서 오는 쾌감을 즐깁니다.&lt;/p&gt;
&lt;p&gt;광범위한 팬층을 보유한 e스포츠 게임, 예를 들어 리그 오브 레전드, 도타, 아레나 오브 발러, 배틀그라운드와 같은 게임들은 세계관 설정이 완벽하고, 경기 대회가 건강한 순환 상태에 진입했습니다&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;게임 디자인에서 심리학은 중요한 분야이며, 특히 사회심리학이 더욱 중요합니다. 사람들의 행동, 욕구 및 동기를 이해하면 더 매력적인 게임 경험을 설계하는 데 도움이 됩니다. &amp;ldquo;허세&amp;quot;와 사회심리학의 관계에 대해서는 다음과 같은 몇 가지 관점에서 살펴볼 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;사람들은 종종 사회 집단 내에서 소속감을 찾으려 합니다. 게임에서 플레이어가 특정 면에서 뛰어남을 느끼하고 다른 플레이어의 관심을 끌 수 있도록 설계하면, 이는 그들의 사회적 소속감을 높일 수 있습니다. 이러한 현상은 자신의 기술을 과시하거나 획득한 보상을 자랑하는 등의 방식으로 나타날 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일부 게임은 소셜 경쟁 요소를 도입하여 플레이어가 소셜 네트워크에서 자신의 성과를 뽐낼 수 있도록 장려합니다. 이는 리더보드, 업적 시스템 또는 멀티플레이어 대결 등의 방식으로 구현될 수 있습니다. 이러한 설계는 플레이어 간의 경쟁 심리를 자극하고 일부 플레이어가 사회적 인정을 얻기 위해 더욱 두각을 나타내도록 만들 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일부 게임은 플레이어가 사용자 정의 캐릭터나 가상 아이템 등을 통해 자신을 표현하도록 허용합니다. 이러한 자기표현은 단순한 과시를 넘어 개성을 드러내고 사회적 교류하는 방식이 될 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;일부 게임은 팀 협력을 중시하며, 소셜 상호작용을 통해 게임 목표를 달성합니다. 이러한 상황에서는 허세나 과시 행위보다는 팀워크와 서로 지지하는 것이 강조됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;게임 디자인은 심리적 보상 시스템을 활용하여 플레이어의 적극적인 사회적 행동을 유도할 수 있습니다. 예를 들어, 플레이어가 적극적으로 소셜 상호작용에 참여하도록 돕기 위해 보상이나 특권을 제공할 수 있습니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;전반적으로, 게임 디자인에서 사회심리학은 플레이어 간의 상호작용과 소셜 경험을 형성하는 데 활용될 수 있습니다. 허세적인 행동이 특정 상황에서 발생할 수 있지만, 게임 디자이너는 일반적으로 이러한 행동을 균형 있게 조정하여 모든 플레이어가 긍정적이고 재미있는 경험을 할 수 있도록 노력합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;생각나는 대로 쓰고, 완벽한 개요가 없어서 조금은 엉망진창이다&lt;/p&gt;
&lt;p&gt;작가들이 주로 즐기는 리그 오브 레전드는 우리 세대의 청춘 기억이라고 할 수 있습니다. 대부분의 부모님들은 자녀가 게임을 하는 것을 좋아하지 않는데, 이는 그들이 이 유형의 게임에 대한 깊이 있는 이해와 경험이 부족하기 때문이며, 당연히 게임 설정과도 관련이 있습니다. 매 게임은 새로운 시작이고, 많은 아이들에게는 플레이할 때 너무 많은 생각을 하지 않고 스스로 탐구하는 방식으로 즐깁니다. 이러한 방식에서 게임의 승패는 자녀 자체의 게임 재능에 더 좌우됩니다. 필자의 실제 경험을 바탕으로 볼 때, 상당수의 플레이어들이 이 유형에 속합니다. 그들에겐&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;가장 큰 비용은 돈이 아니라 시간입니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;게임 내에도 엔터테인먼트 모드가 있어, 즐길 거리를 찾는 플레이어의 요구를 충족한다&lt;/p&gt;
&lt;p&gt;리그 오브 레전드와 같은 경쟁 게임은 필자에게 더 많은 것은 ств&lt;code&gt;三国梦&lt;/code&gt;。开局你兜里两手空空，靠着自己的理解，补刀、发育，花费经济，布控视野，设局埋伏对面，更多的是用脑子玩游戏，没有那种绝佳的游戏天赋，也能玩的很开心。统领全局的&lt;code&gt;掌控感&lt;/code&gt;을 채우는 것, 역경 속에서 뒤집는 즐거움이다. 그리고 많은 댓글에서 흔히 볼 수 있는 &amp;lsquo;구름 유저&amp;rsquo;들도 게임은 더 이상 하지 않지만, 월드컵 기간이 되면 경기를 시청한다.&lt;/p&gt;
&lt;p&gt;여기서 언급하지 않을 수 없는데, &lt;code&gt;游戏时间&lt;/code&gt;BOLD_3&lt;code&gt;网瘾少年&lt;/code&gt;，顺风的情况，无事发生，逆风的情况下，他们能问候你的全家，隔着屏幕你都能感受到那股子&lt;code&gt;戾气&lt;/code&gt;이다&lt;/p&gt;
&lt;p&gt;본래 IT 업계에 종사하고 게임을 많이 접해왔고, 다양한 장르를 경험해 봤다. 경쟁 게임에서는 늘 머리를 써서 하는 것에 익숙했고, 재능은 있어도 반응 속도는 조금 느린 편이다. 원래부터 팀을 이끌고 지휘하는 것을 선호하며, 처음 시작했을 때는 공부할 때였는데, YY 길드의 형들이나 함께 했던 기억이 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;지금 게임 환경은 좀 들뜬 분위기이고, 예전처럼 순수하지 않아요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;학년을 올라서고 나서, 고수들과의 대국은 정말 힘들다. 내내 높은 집중력을 유지해야 하고, 상대방의 전략을 파악하고 그 함정을 어떻게 벗어낼지 고민해야 한다. 한 판 끝나면 더 이상 하고 싶지 않은 기분이다.&lt;/p&gt;
&lt;p&gt;정말로 네가 잘하는 건 인정하지만, 프로 경기 안 뛰면 인생의 궤적에 아무런 의미가 없고, 사회생활 수단으로는 괜찮지만 생계를 꾸려나갈 수는 없어&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;싱글 플레이 게임과 온라인 게임은 게임 방식, 경험, 기술 측면에서 뚜렷한 차이를 보이는 두 가지 다른 유형의 게임입니다. 다음은 싱글 플레이 게임과 온라인 게임 간의 차이점을 이해하기 위한 몇 가지 주요 측면입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;连接方式：&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;이 게임은 로컬 장치에서 혼자 즐길 수 있으며, 인터넷 연결이 필요하지 않습니다. 플레이어는 네트워크 연결 없이도 게임을 즐길 수 있습니다.&lt;/li&gt;
&lt;li&gt;이러한 게임은 플레이어들이 실시간으로 상호작용하기 위해 보통 인터넷 연결이 필요하며, 협력 또는 경쟁적인 온라인 소셜 활동과 관련될 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;玩家互动：&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;플레이어는 주로 게임 내 인공지능, 미리 설정된 미션 또는 적대적인 요소와 상호작용합니다. 게임 경험은 일반적으로 개인화되며, 게임 내 디자인과 스토리라인의 영향을 받습니다.&lt;/li&gt;
&lt;li&gt;플레이어는 전 세계의 다른 실제 플레이어들과 상호 작용할 수 있습니다. 이는 협력하여 임무를 완료하거나, 경쟁 또는 대결을 하거나, 채팅, 길드 시스템과 같은 소셜 요소 등을 포함할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;游戏设计和内容：&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;게임 디자인은 완전하고 독립적인 스토리와 게임 경험을 제공하는 데 더 중점을 두고 있습니다. 게임 내용은 일반적으로 미리 설계되어 있으며, 플레이어는 게임 내에서 탐험, 퍼즐 해결 또는 전투를 합니다.&lt;/li&gt;
&lt;li&gt;게임 디자인은 실시간 상호작용과 플레이어 간의 경쟁 또는 협력을 고려해야 합니다. 게임 콘텐츠는 정기적인 업데이트, 온라인 이벤트 및 소셜 인터랙션 등을 포함하여 더욱 역동적일 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;技术要求：&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 오프라인 상태에서 실행 가능하며, 장치 성능 및 인터넷 연결에 대한 요구 사항이 상대적으로 낮습니다&lt;/li&gt;
&lt;li&gt;강력한 인터넷 연결이 필요하며, 원활한 실시간 상호작용을 위해 서버 및 네트워크 성능에 대한 높은 요구사항이 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;商业模式：&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 일회성 구매 또는 다운로드 방식으로 운영되며, 플레이어는 게임을 구매하면 로컬 장치에서 완전하게 즐길 수 있습니다&lt;/li&gt;
&lt;li&gt;무료 플레이, 광고, 아이템 구매 또는 구독 등 다양한 수익 모델을 통해 서버 운영과 게임 콘텐츠 업데이트를 지속할 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 차이를 이해하는 것은 플레이어가 게임을 선택할 때 자신의 선호도를 명확히 하고, 게임 개발자가 플레이어의 기대에 더 잘 부응하도록 돕는다&lt;/p&gt;</description>
        </item>
        <item>
        <title>클라우드 서버와 스크립트 키즈</title>
        <link>https://blog.ttf248.life/ko/p/cloud-servers-and-script-kids/</link>
        <pubDate>Mon, 20 Nov 2023 15:08:53 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/cloud-servers-and-script-kids/</guid>
        <description>&lt;p&gt;더블 11 프로모션으로 알리바이가 새 서버를 구매했습니다. 경제 버전이라 구성은 높지 않지만, 집안 서비스의 게이트웨이 역할을 하기에 좋고, 내년 2026년까지 프로모션이 진행 중입니다.&lt;/p&gt;
&lt;p&gt;특别히 상하이 지역 서버를 선택해서 집의 컴퓨터에 낮은 지연 시간 프록시로 연결했는데, win11과 windows server 2022를 사용하고 있습니다. 서버 버전은 나중에 배포되었고, 사용할 때 갑자기 접근 거부 메시지를 받았습니다. 서버 업데이트라고 생각하며 잠시 기다리니 정상적으로 복구될 줄 알았는데, 5분 후에 다시 시도해도 여전히 로그인되지 않습니다. 관련 오류를 검색해 보니 누군가가 로그인을 시도하고 있고, 비밀번호가 틀린 횟수가 너무 많아 현재 로그인이 불가능하다고 합니다.&lt;/p&gt;
&lt;p&gt;이전에 보안 공격 스크립트를 다뤄본 경험이 있어 바로 알 수 있었다. 이 로그인 시도는 정상적인 행동이 아니며, 누군가 서비스를 공격하고 로그인 서버를 무차별 대입하려고 하는 것이다. 방화벽 설정은 간단하게 해놓았고, 화이트리스트 설정도 되어 있지 않다. 두 대의 기계의 3389 포트를 프록시했는데, 이 포트가 공공 네트워크에 노출되어 있는 상황이었다. 마치 연못 속 미끼와 같다. 스크립트 키드의 공격이라는 것을 알았으니, 다음 단계는 간단하다. 방화벽 화이트리스트를 설정하여 회사 IP 주소와 집 IP 주소만 프록시 서비스에 접속하도록 허용한다.&lt;/p&gt;
&lt;p&gt;__INLINE_CODE_0__대리 서버는 이전에도 실행 로그를 설정하지 않았는데, 로그를 켜니 정말 다행이다. 전국 각지의 대리 IP들이 우리 집 서버에 접속을 시도하고 있었네. 다행히 server 버전이라 문제점을 깨달았고, 그렇지 않으면 win11 머신은 결국 해킹당할 것이다. 비밀번호가 너무 단순했어.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [101.43.98.211:50486]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [218.93.202.63:56970]
2023/11/17 16:51:14 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.179.106.174:60812]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [58.16.204.238:2839]
2023/11/17 16:51:15 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [124.223.47.24:50274]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.248.128.22:55883]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.143.53.138:56955]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [43.228.7.250:61550]
2023/11/17 16:51:16 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [125.76.228.9:55842]
2023/11/17 16:51:17 [I] [proxy.go:204] [4dfcc2259937dcb9] [winserver-remote] get a user connection [91.240.118.187:49326]
2023/11/17 16:51:17 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [91.240.118.187:49324]
2023/11/17 16:51:17 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [89.248.163.79:51712]
2023/11/17 16:51:18 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [218.63.75.24:62387]
2023/11/17 16:51:19 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [103.186.109.227:51396]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [116.233.234.104:51567]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.187.193.202:51585]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [59.48.98.42:57489]
2023/11/17 16:51:20 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [146.56.241.134:53558]
2023/11/17 16:51:21 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [222.179.106.174:30620]
2023/11/17 16:51:23 [I] [proxy.go:204] [639d8947325142ac] [host-remote] get a user connection [183.14.214.51:62128]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;훑이로 Linux 서비스 로그인 로그를 확인해 보니, 알리바바 클라우드 이 서버 외에 친구가 쓰는 화웨이 클라우드 서버도 있네&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo grep &amp;quot;Failed password&amp;quot; /var/log/secure  centos系列
sudo grep &amp;quot;Failed password&amp;quot; /var/log/auth.log  ubuntu系列
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Nov 16 04:46:34 aliyun-sh sshd[156625]: Failed password for root from 120.55.164.64 port 53410 ssh2
Nov 16 04:46:34 aliyun-sh sshd[156623]: Failed password for root from 111.16.215.122 port 36548 ssh2
Nov 16 04:46:58 aliyun-sh sshd[156630]: Failed password for invalid user share from 139.9.233.78 port 53872 ssh2
Nov 16 04:47:23 aliyun-sh sshd[156634]: Failed password for invalid user spark from 139.9.233.78 port 36134 ssh2
Nov 16 04:47:26 aliyun-sh sshd[156636]: Failed password for root from 120.55.164.64 port 46142 ssh2
Nov 16 04:47:47 aliyun-sh sshd[156640]: Failed password for root from 111.16.215.122 port 42962 ssh2
Nov 16 04:48:24 aliyun-sh sshd[156652]: Failed password for root from 120.55.164.64 port 38868 ssh2
Nov 16 04:48:25 aliyun-sh sshd[156654]: Failed password for root from 111.16.215.122 port 46164 ssh2
Nov 16 04:48:39 aliyun-sh sshd[156657]: Failed password for invalid user test from 139.9.233.78 port 39386 ssh2
Nov 16 04:48:50 aliyun-sh sshd[156659]: Failed password for root from 111.16.215.122 port 38892 ssh2
Nov 16 04:48:53 aliyun-sh sshd[156662]: Failed password for root from 120.55.164.64 port 49348 ssh2
Nov 16 04:48:53 aliyun-sh sshd[156664]: Failed password for invalid user test from 139.9.233.78 port 49864 ssh2
Nov 16 04:50:02 aliyun-sh sshd[156672]: Failed password for root from 111.16.215.122 port 45294 ssh2
Nov 16 04:50:30 aliyun-sh sshd[156680]: Failed password for invalid user zabbix from 139.9.233.78 port 52206 ssh2
Nov 16 04:50:50 aliyun-sh sshd[156683]: Failed password for root from 120.55.164.64 port 34820 ssh2
Nov 16 04:50:51 aliyun-sh sshd[156685]: Failed password for root from 111.16.215.122 port 58978 ssh2
Nov 16 04:51:18 aliyun-sh sshd[156689]: Failed password for root from 120.55.164.64 port 45306 ssh2
Nov 16 04:51:25 aliyun-sh sshd[156692]: Failed password for root from 111.16.215.122 port 33938 ssh2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 화웨이 클라우드 머신은 켜진 지 시간이 꽤 돼서, 이제 사변 공격의 중간 단계에 접어들고 있으며 이상한 사용자들도 나타나기 시작했다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Nov 16 20:30:35 hecs-411458 sshd[182965]: Failed password for invalid user oeh from 39.129.9.180 port 26459 ssh2
Nov 16 20:32:17 hecs-411458 sshd[182967]: Failed password for invalid user dnu from 39.129.9.180 port 27079 ssh2
Nov 16 20:34:12 hecs-411458 sshd[182971]: Failed password for invalid user rq from 39.129.9.180 port 27742 ssh2
Nov 16 20:36:07 hecs-411458 sshd[182979]: Failed password for invalid user zw from 39.129.9.180 port 28415 ssh2
Nov 16 20:37:59 hecs-411458 sshd[182981]: Failed password for invalid user egi from 39.129.9.180 port 29068 ssh2
Nov 16 20:39:52 hecs-411458 sshd[182984]: Failed password for invalid user bjb from 39.129.9.180 port 29723 ssh2
Nov 16 20:41:53 hecs-411458 sshd[182988]: Failed password for invalid user hna from 39.129.9.180 port 30375 ssh2
Nov 16 20:43:46 hecs-411458 sshd[182994]: Failed password for invalid user gar from 39.129.9.180 port 31036 ssh2
Nov 16 20:45:40 hecs-411458 sshd[183003]: Failed password for invalid user mze from 39.129.9.180 port 31703 ssh2
Nov 16 20:47:35 hecs-411458 sshd[183007]: Failed password for invalid user tmh from 39.129.9.180 port 32381 ssh2
Nov 16 21:23:01 hecs-411458 sshd[183047]: Failed password for invalid user amax from 112.4.65.118 port 41188 ssh2
Nov 16 22:31:20 hecs-411458 sshd[183116]: Failed password for root from 211.228.203.123 port 60213 ssh2
Nov 16 22:53:44 hecs-411458 sshd[183162]: Failed password for root from 112.132.249.164 port 39272 ssh2
Nov 17 11:44:26 hecs-411458 sshd[184811]: Failed password for invalid user jsh from 43.157.103.27 port 54608 ssh2
Nov 17 11:47:23 hecs-411458 sshd[184818]: Failed password for invalid user mrunal from 43.157.103.27 port 50448 ssh2
Nov 17 11:48:46 hecs-411458 sshd[184820]: Failed password for invalid user robertsheen from 43.157.103.27 port 50560 ssh2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;자가 개발 서버는 Windows의 경우 공용 네트워크 접속 시 화이트리스트 설정이 필요하며, Linux는 비밀번호 로그인을 비활성화하고 키 파일 로그인 기능을 활성화하는 것이 좋습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>대량 업데이트 및 기존 권한 문제 해결</title>
        <link>https://blog.ttf248.life/ko/p/bulk-update-local-git-repository-and-legacy-permission-issues/</link>
        <pubDate>Thu, 19 Oct 2023 14:16:22 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/bulk-update-local-git-repository-and-legacy-permission-issues/</guid>
        <description>&lt;p&gt;팀 내 프로젝트 간 의존 관계가 존재하며, 과거의 사유로 인해 __INLINE_CODE_0__을 사용하여 의존성을 관리하지 않아, 일상적인 개발 시 코드 업데이트를 수동으로 순차적으로 진행해야 합니다. 그렇지 않으면 다양한 문제가 발생할 수 있습니다.&lt;/p&gt;
&lt;p&gt;온라인 자료를 참고하여 구조가 기본적으로 유사하므로, 로컬에서 &lt;strong&gt;git_list.txt&lt;/strong&gt;라는 저장소 디렉터리를 수동으로 관리하고, 스크립트를 작성하여 디렉터리를 순회하며 한 번에 업데이트합니다. 이후 작업 전에 스크립트를 실행하세요.&lt;/p&gt;
&lt;h2 id=&#34;linux&#34;&gt;linux
&lt;/h2&gt;&lt;p&gt;create new file: batch_pull.sh&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash

echo &amp;quot;============ 更新仓库 ===================&amp;quot;

# 检查 git_list.txt 是否存在
if [ ! -f &amp;quot;git_list.txt&amp;quot; ]; then
  echo &amp;quot;git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。&amp;quot;
  exit 1
else
  echo &amp;quot;============ 检测到了 git 仓库清单文件 ====&amp;quot;
fi

# 逐行读取 git_list.txt 中的 URL，并执行拉取操作
while read -r url; do
  if [ -d &amp;quot;$url&amp;quot; ]; then
    cd &amp;quot;$url&amp;quot; || continue
    git pull
    cd ..
    echo &amp;quot;Pull $url 完成！&amp;quot;
    echo &amp;quot;========================================&amp;quot;
  else
    echo &amp;quot;目录 $url 不存在，跳过拉取。&amp;quot;
  fi
done &amp;lt; &amp;quot;git_list.txt&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;windows&#34;&gt;windows
&lt;/h2&gt;&lt;p&gt;create a new file: batch_pull.bat&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;@echo off
chcp 65001 &amp;gt; nul
rem 进入脚本所在目录
cd /d &amp;quot;%~dp0&amp;quot;

rem 检查 git_list.txt 是否存在
if not exist &amp;quot;git_list.txt&amp;quot; (
  echo git_list.txt 文件不存在！请创建并添加要拉取的 git 仓库 URL。
  exit /b 1
) else (
  echo ============ 检测到了 git 仓库清单文件 ====
)

rem 逐行读取 git_list.txt 中的 URL，并执行拉取操作
for /f %%i in (git_list.txt) do (
  if exist &amp;quot;%%i&amp;quot; (
    pushd &amp;quot;%%i&amp;quot;
    git pull
    popd
    echo Pull %%i 完成！
    echo ========================================
  ) else (
    echo 目录 %%i 不存在，跳过拉取。
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;역사-유산-문제&#34;&gt;역사 유산 문제
&lt;/h3&gt;&lt;p&gt;시스템 재설치 후 발생한 &lt;strong&gt;인라인 이탤릭 2&lt;/strong&gt; &lt;strong&gt;볼드 1&lt;/strong&gt; 치명적인 오류(&amp;ldquo;안전하지 않은 저장소(&amp;rsquo;/home/repon&amp;rsquo;은 다른 사용자가 소유함&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;온라인 제안의 대부분은 __INLINE_CODE_0__에서 비롯됩니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;창고 목록 신뢰 추가:&lt;/li&gt;
&lt;li&gt;수동으로 설정 파일 __INLINE_CODE_0__을 수정하여, 디렉터리 추가 신뢰&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[safe]
    directory = /home/repon
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위의 방식으로 처리한 후, 창고 업데이트는 정상적으로 이루어지지만, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 콘솔에서 사용자 소유권 오류를 포함한 많은 경고 메시지가 표시됩니다&lt;/p&gt;
&lt;h3 id=&#34;데스크톱-재설치&#34;&gt;데스크톱 재설치
&lt;/h3&gt;&lt;p&gt;개발한 기계가 너무 오래돼서 시스템을 재설치하지 않았더니, 쓰레기 파일이 폭발해서 해결할 방법이 없었습니다. 시간을 내어 시스템을 재설치했는데 또 권한 문제가 발생했고, 기존 스크립트가 실행되지 않으며, 수정된 권한이 불완전합니다.&lt;/p&gt;
&lt;p&gt;새로운 방식에 따라 &lt;code&gt;*&lt;/code&gt;BOLD_2&lt;code&gt;git&lt;/code&gt;을 직접 추가하면 모든 디렉터리를 자동으로 신뢰합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;알 수 없는 사용자 권한 문제인지, 아니면 다들 &lt;strong&gt;INLINE_CODE_0__平台其实也有类似__INLINE_CODE_1&lt;/strong&gt; 명령에 익숙하지 않은 건지 모를 것 같습니다. 폴더 소유자를 수정하려고 했는데, 만약 디렉토리가 많지 않다면 수동으로 소유자를 변경하는 것도 괜찮습니다. 하지만 이 업무용 컴퓨터에는 도메인 정보가 추가되어 있는데, 회사에서 배포한 도메인에 문제가 있는 걸까요, 아니면 로컬 시스템 설정에 문제가 있는 걸까요? 사용자 목록에서 로그인에 사용된 사용자를 찾을 수 없었고, 결국 명령줄로 처리했습니다.&lt;/p&gt;
&lt;p&gt;관리자 권한으로 &lt;code&gt;powershell&lt;/code&gt;脚本__INLINE_CODE_1__，记得调整脚本文件编码为__INLINE_CODE_2__을 실행하고, 중국어 운영체제를 사용해야 인코딩 문제가 발생하지 않습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 获取当前用户的用户名
$currentUserName = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

# 设置 PowerShell 的字符编码为 UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

# 要更改所有者的根目录路径
$rootDirectory = &amp;quot;G:\workspace&amp;quot;  # 替换为实际的目录路径

# 递归遍历目录并更改文件和文件夹的所有者
Get-ChildItem -Path $rootDirectory -Recurse | ForEach-Object {
    $itemPath = $_.FullName

    # 检查是文件还是文件夹
    if ($_ -is [System.IO.DirectoryInfo]) {
        # 如果是文件夹，使用 icacls 更改所有者权限
        $icaclsResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            Write-Host &amp;quot;已更改文件夹 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件夹 $itemPath 的所有者。错误信息: $icaclsResult&amp;quot;
        }
    } else {
        # 如果是文件，使用 icacls 更改所有者权限
        $takeownResult = icacls $itemPath /setowner &amp;quot;$currentUserName&amp;quot; 2&amp;gt;&amp;amp;1
        if ($LASTEXITCODE -eq 0) {
            # Write-Host &amp;quot;已更改文件 $itemPath 的所有者为 $currentUserName&amp;quot;
        } else {
            Write-Host &amp;quot;无法更改文件 $itemPath 的所有者。错误信息: $takeownResult&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;예상치 못한 상황이 발생했는데, 스크립트 실행 시 출력되는 중국어 정보가 엉망이고, 콘솔 문자 인코딩을 설정하고 스크립트 인코딩을 조정해도 여전히 깨져서 머리가 제대로 작동하지 않는 것 같았습니다. 제어판-지역-언어 설정의 베타 기능을 활성화하고 전역적으로 유니코드 인코딩을 켰더니 스크립트는 정상적으로 실행되었지만, 여러 개발 소프트웨어가 제대로 작동하지 않았습니다. 뒤돌아보니 자료를 정리하면서 스크립트 파일의 인코딩을 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 로 설정해야 한다는 것을 깨달았습니다.&lt;/p&gt;
&lt;h2 id=&#34;자료&#34;&gt;자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ganzhixiong.com/p/f1b9f4fc/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ganzhixiong.com/p/f1b9f4fc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/71901632/fatal-error-unsafe-repository-home-repon-is-owned-by-someone-else&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>WPF 학습 자료</title>
        <link>https://blog.ttf248.life/ko/p/wpf-learning-resources/</link>
        <pubDate>Tue, 17 Oct 2023 10:49:24 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/wpf-learning-resources/</guid>
        <description>&lt;p&gt;미니 프로그램 개발 설계의 함정은 아직 메워지지 않았는데, 또 다른 &lt;strong&gt;WPF&lt;/strong&gt;을 새로 파고 있고, 최근 회사도 시끄러운 상황이라, 여러 지역 간 협업 업무 소통은 효율이 어딘가 만족스럽지 않다. 그래서 클라이언트 인터페이스 개발을 맡기로 했다.&lt;/p&gt;
&lt;h2 id=&#34;wpf&#34;&gt;WPF
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;추천&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 界面设计用到的很多概念，类似于网页前端设计，尽可能的剥离UI设计和业务逻辑，让UI的设计能独立出来，也是互联网公司期望的分工方式。今年刚好折腾过小程序，很多概念上的东西都是通用的，上手也就比较轻松，这些算是现代UI设计中的**길을 &lt;strong&gt;잡으면&lt;/strong&gt;, 기본적인 틀 개념을 익혔으니, 이후로 쉽게 길을 잃지 않을 것이다&lt;/p&gt;
&lt;p&gt;이전에 __INLINE_CODE_0__BOLD_2&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/zh7791/p/11502696.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 基础总结(学习建议)&lt;/a&gt;이라는 자료가 있었는데, 분량이 길지 않아 경험 있는 독자들이 학습 경로를 계획하기에 적합합니다&lt;/p&gt;
&lt;p&gt;초보 독자라면 &lt;a class=&#34;link&#34; href=&#34;http://www.wpfsoft.com/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WPF 中文网&lt;/a&gt;을 추천합니다. 기본 개념, 발전 역사, 하위 계층의 인지 논리를 처음부터 설명합니다. 이 웹사이트는 우연히 올해 8월에 저자가 새로 게시한 것이었고, 제 시간과 딱 맞아떨어졌습니다. 조금만 더 늦었다면 아마도 인연은 없었을 겁니다.&lt;/p&gt;
&lt;p&gt;가장 정통적인 학습 자료를 원한다면 당연히 마이크로소프트 공식 자료여야 합니다. 다소 지루할 수 있지만, 새로운 독자들은 인내심을 가져야 합니다.&lt;/p&gt;
&lt;p&gt;고전적인 전자책도 많지만, 크게 추천하지는 않아요. 일상 업무가 많아서 책을 읽을 시간이 많지 않고, 한 번에 몰입하기 어렵네요. 프로젝트 연습이 더 적합할 것 같아요.&lt;/p&gt;
&lt;h2 id=&#34;c-및-net-출시-기록&#34;&gt;C# 및 .NET 출시 기록
&lt;/h2&gt;&lt;p&gt;이전 학습했던 언어에 비해 최근 몇 년간 새롭게 추가된 기능이 조금 많아지고, 매년 문법 버전이 업데이트되고 있습니다&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;공식 학습 자료:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/csharp/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/csharp/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://learn.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio?pivots=dotnet-7-0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>금융 부패 척벌의 시작</title>
        <link>https://blog.ttf248.life/ko/p/financial-anti-corruption-curtain/</link>
        <pubDate>Mon, 09 Oct 2023 14:53:35 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/financial-anti-corruption-curtain/</guid>
        <description>&lt;p&gt;중국 공산당 중앙정치국: 국유기업 및 금융 분야 부패 방지 노력을 강화하고, “사풍”을 깊이 교정해야 한다&lt;/p&gt;
&lt;h2 id=&#34;중국공산당-중앙정치국&#34;&gt;중국공산당 중앙정치국
&lt;/h2&gt;&lt;p&gt;중국 공산당 중앙정치국은 9월 27일 회의를 열어 제20차 당 대회 첫 차례 순시 상황 종합 보고서를 심의했다. 시진핑 중국 공산당 총서기가 회의를 주재했다. 회의는 순시 결과를 계기로 당의 전면적 지도 강화, 순시 대상 당 조직의 정치적 위상 향상 촉구, 당 중앙에서 부여한 책임과 사명 충실, 국유 기업 핵심 기능 및 핵심 경쟁력 강화, 중국 특색 사회주의의 중요 물질 토대와 정치 토대 구축, 금융 기관이 실체 경제와 국가 전략 지원 확대, 고품질 발전 추진을 강조했다. 발전과 안보를 균형 있게 조정하고, 기본 사고방식과 극한 사고방식을 확립하며, 강력한 조치로 중대한 위험을 예방하고 해결하며, 안전 선을 굳건히 지켜야 한다. 전면 엄격한 당 건설을 심화 발전시키고, 각 당 위원회(당조) 서기의 첫 번째 책임자 책임, 리더십 팀 구성원의 “일관 이책임”, 검찰 및 감사 기관의 감독 책임을 강화하며, 각급 “최고 책임자”에 대한 감시를 강화하고, 국유 기업과 금융 분야 부패 방지 노력을 확대하며, “사풍”을 깊이 교정하고, 사례를 통한 개선 및 치료를 심화하여 부패하지 않도록 막고, 할 수 없게 하고, 원치 않게 하는 것을 통합적으로 추진해야 한다. 새로운 시대 당 조직 노선에 충실히 유도하고, 리더십 팀 건설, 간부 인재팀 건설, 초급 당 조직 건설을 강화해야 한다. 순시 성과를 종합적으로 활용하여 개혁을 심화하고 제도를 개선하며, 근원적 관리와 치료를 추진해야 한다. (신화통신)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;심각한 금융 리스크 초래! 중국 은행 전 당위원회 서기, 주석 유련가 해산&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;중앙감찰검위구국사이트에 따르면 공산당 중앙의 승인을 받아 중앙감찰검위는 중국은행 주식회사 전 당위원회 서기, 회장 유리안커의 심각한 비위반 위법 문제에 대해 단서 조사 및 검사를 실시했다
검사 결과, 류련가(刘连舸)는 이상 신념을 상실하고 초심과 사명을 배신했으며 당중앙의 결정 및 배치에 대해 단호하지 못하고 소홀히 했으며, 금융 리스크 방어 책임을 포기하고 대규모로 불법적으로 신용 프로젝트에 개입하고 불법적으로 대출을 실행하여 중대한 금융 리스크를 초래했으며, 전면 엄격한 당정치 주체적 책임 이행이 미흡하여 근무 단위의 정치 생태를 심각하게 파괴하고, 불법 서적 및 간행물을 반입하며 조직 검사에 적극적으로 저항했습니다. 중앙 8개 규정을 무시하고 부적절한 선물과 현금을 수령하고 사설 클럽을 출입하며 스키와 여행을 즐기도록 배정받았으며, 장기간 관리 대상 차량을 차용하고, 개인 관련 사항을 정해진 바에 따라 보고하지 않고 조직 문의 시 문제점을 허심탄회하게 설명하지 않았으며, 사적인 친분으로 인사 채용 및 승진을 진행했습니다. 불법적으로 사업을 경영하고 자금 대출에 부당하게 개입하며 기밀 자료를 보관했으며 도덕이 문란하고 가풍이 부정하며 가족 관리를 소홀히 했습니다. 규율과 법의 선을 무시하고 권력을 남용하여 “금융으로 먹고 마셨으며” 직무 편의를 이용하여 타인의 대출 및 자금 조달, 프로젝트 협력 등에서 이익을 추구하고 불법적으로 거액의 재물을 수령했습니다.&lt;/p&gt;
&lt;p&gt;류련가(刘连舸)는 당의 정치적 규율, 조직적 규율, 청렴 규율, 업무 규율 및 생활 규율을 심각히 위반하고, 중대한 직무 위법을 구성하며 뇌수(受贿)와 불법적인 대출 범죄를 저질렀으며, 당 제18차 전국대표대회 이후에도 수정을 거두지 않고 손을 뻗지 않아 사태가 심각하고 영향이 매우 나쁘므로 엄중하게 처리해야 한다. 관련 규정에 따라 중앙징계검찰위원회 상무위원회의 회의를 통해 연구 및 중국공산당 중앙의 승인을 받아 류련가에게 당적 박탈 처분을 내리고, 규정에 따라 향유하던 대가를 취소하며, 제20차 당 대회 대표 자격을 종료하고, 위법한 이익을 추징하며, 관련 범죄 문제는 검찰 기관에 송치하여 법적으로 조사 및 기소할 것이다. 관련 재산도 함께 송치한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;중국 광다그룹 전 당위서기, 주석 리샤오펑이 심각한 비리 및 불법 행위로 인해 당적 박탈 및 공직 해임 처분을 받았다. (CCTV 뉴스)&lt;/li&gt;
&lt;li&gt;중앙징위 국가감사위원회 웹사이트 발표에 따르면, 귀주성 징위감사위원회 소식에: 귀주은행 전 당서기·회장 리지밍은 심각한 비위반·비법 행위를 저질렀을 가능성이 있으며, 현재 귀주성 징위감사위원회의 당사 규율검사와 감찰조사를 받고 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;팔년-만에-회금-시중은행-4대주식-확대&#34;&gt;팔년 만에 회금, 시중은행 4대주식 확대
&lt;/h2&gt;&lt;p&gt;10월 11일, 중국은행을 포함한 산업은행, 농업은행, 건설은행 등 4대 국유 상업은행이 공지를 발표하며 회금공사의 지분율 증가를 각각 2761만 주, 3727만 주, 2489만 주, 1838만 주로 발표했습니다. 회금공사는 향후 6개월 동안 2차 시장에서 이들 은행의 지분을 추가로 매수할 계획입니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>경로를 통한 수익 창출 모델: 추첨</title>
        <link>https://blog.ttf248.life/ko/p/traffic-monetization-business-models-lottery/</link>
        <pubDate>Tue, 19 Sep 2023 07:04:35 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/traffic-monetization-business-models-lottery/</guid>
        <description>&lt;p&gt;방송국에서 아이폰 증정? 미니 프로그램 순위 보상? 각종 라이브 플랫폼 선물 추첨?&lt;/p&gt;
&lt;p&gt;위 세 가지는 겉보기에는 관련 없어 보이지만, 실질적으로 모두 무료 트래픽을 활용한 수익화의 다양한 방식이며, 약간 금융 게임과 같은 느낌이다&lt;/p&gt;
&lt;h2 id=&#34;플랫폼-추첨으로-선물-받기&#34;&gt;플랫폼 추첨으로 선물 받기
&lt;/h2&gt;&lt;p&gt;일반적인 시나리오에서 사용자는 플랫폼 화폐를 재설정하여 마음에 드는 방송원에게 선물을 보내고, 각 플랫폼마다 또 다른 방식으로 플랫폼 화폐를 획득한 후 직접 선물하는 대신 일정량의 화폐를 사용하여 추첨 이벤트에 참여하고 한정판 고가 상품을 얻습니다&lt;/p&gt;
&lt;p&gt;지금 벌써 문제가 생겼다. 온라인 추첨은 간단히 말해 플랫폼이 카지노를 운영하는 것이고, 참여 인원이 충분하면 절대 손해 보지 않는다. &lt;strong&gt;屌丝&lt;/strong&gt; 사용자 기는 한번 해보자는 마음으로 큰 상을 타고 가서 선물을 주고, 체면을 세우며 일짱 노는 것을 생각했다!&lt;/p&gt;
&lt;h2 id=&#34;방송국-선물-물건&#34;&gt;방송국 선물 (물건)
&lt;/h2&gt;&lt;p&gt;위에 언급된 플랫폼 추첨은 사용자 본인의 글쓰기를 대상으로 하며, 방송 진행자는 매월 거래량 및 인기 관련 임무를 수행합니다. 선물 추첨 기능을 활성화하면 팬들이 지정된 선물을 보내거나 특정 금액의 선물을 보낼 경우 추첨에 참여할 기회가 주어지는데, 상품은 고가 스마트폰이나 현금 혜택 등이 있습니다.&lt;/p&gt;
&lt;p&gt;인기 있는 스트리머에게는 이 이벤트가 돈이 되는 일입니다. 일시적으로 시작하는 무료 상품 구매와 같고, 참여 인원이 충분히 많아 스트리머도 수익을 낼 수 있습니다. 여기서 스트리머의 운영 능력이 시험됩니다.&lt;/p&gt;
&lt;p&gt;물론 또 다른 방식도 있는데, 보상이 꽤 높습니다(현금 가치). 많은 야외 방송인이 이 방식을 활용하는데, 변장된 온라인 도박과 같습니다. 시청자는 콘텐츠에 관심이 없고 오직 당첨될 수 있는지 여부만 신경 쓰입니다.&lt;/p&gt;
&lt;p&gt;쇼 타입의 진행자 외에 PK 모드를 통해 팬들의 소비 충전을 유도하는 방식으로는, 일반 게임 방송인들이 플레이어들의 소비 심리를 자극하기는 어렵다. 게임을 하고 스트리밍을 보는 것은 모두 여가 활동이며, 추가적인 금전적 지출을 하고 싶어 하는 경우는 드물다. 특히 &lt;strong&gt;竞技类游戏&lt;/strong&gt;, 추첨 방식은 사용자의 충전 습관과 소비 습관을 길러주고, 가끔 즉흥적인 소비(많은 상품을 제공하여 당첨되길 바라는 마음)를 유발할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;소규모-프로그램-순위-보상&#34;&gt;소규모 프로그램 순위 보상
&lt;/h2&gt;&lt;p&gt;간단한 앱을 설계하여 별 볼 일 없는 기능들을 구현하거나, 게임 관련 보조 서비스를 제공합니다. 이러한 것들은 모두 위장이며, 텐센트 심사를 통과하기 위한 것입니다. 앱 내 플레이에 순위 시스템을 추가합니다. 사용자는 리워드 광고를 시청하고, 임무를 완료하며, 포인트를 획득합니다. 백엔드는 포인트에 따라 순위를 설정하고, 상위 사용자에게는 지정된 보상을 제공합니다.&lt;/p&gt;
&lt;p&gt;핵심 로직: 광고 수익 &amp;gt; 운영 비용 + 보상 비용&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;미니 프로그램도 정상적으로 운영될 수 있으며, 합리적인 서비스를 제공하고 적절한 광고를 통해 수익을 창출할 수 있습니다. 큰 돈은 아니겠지만, 꾸준히 모이면 괜찮습니다.&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>지리적 분산 환경의 ZeroTier</title>
        <link>https://blog.ttf248.life/ko/p/zero-tier-remote-lan/</link>
        <pubDate>Tue, 19 Sep 2023 04:58:03 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/zero-tier-remote-lan/</guid>
        <description>&lt;p&gt;사무실에 새 __INLINE_CODE_0__主机，想着配置配置环境方便，在家偶尔也有访问的需求，临时部署内网穿透。按照以往的经验，部署__INLINE_CODE_1__服务，指定端口转发，需要一台公网的服务器，连接的质量取决于公网服务器的宽带质量。折腾一点新鲜的__INLINE_CODE_2__虚拟机局域网，类似于__INLINE_CODE_3__을 구입했고, 로컬에서 가상 네트워크 어댑터를 새로 만들어서 모든 장비를 하나의 가상 네트워크에 연결했습니다&lt;/p&gt;
&lt;h2 id=&#34;제로티어는-무엇인가요&#34;&gt;제로티어는 무엇인가요?
&lt;/h2&gt;&lt;p&gt;__INLINE_CODE_0__BOLD_3&lt;code&gt;SD-WAN&lt;/code&gt;BOLD_4&lt;code&gt;ZeroTier&lt;/code&gt;，여러 대의 컴퓨터, 서버 및 장치를 마치 동일한 로컬 네트워크에 있는 것처럼 가상적이고 암호화된 네트워크로 쉽게 연결할 수 있습니다. 이를 통해 프로그래머와 IT 전문가는 복잡한 네트워크 설정이나 VPN 구성 없이 서로 다른 위치에서 데이터와 리소스를 안전하게 공유할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;제로티어 네트워크는 가상 전역 LAN으로, 서로 다른 장치들이 인터넷을 통해 연결되어 마치 동일한 물리 네트워크에 있는 것처럼 작동합니다. 이 네트워크는 여러 서브넷을 포함할 수 있으며, 모든 장치는 제로티어 기술을 통해 연결됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;行星服务器&lt;/strong&gt;: 행성 서버는 Zerotier 네트워크의 핵심 구성 요소 중 하나입니다. 이 서버는 글로벌 네트워크로서 Zerotier 네트워크 전체의 토폴로지 구조, 라우팅 정보 및 네트워크 상태를 유지하고 관리합니다. 행성 서버는 네트워크 제어 센터 역할을 하지만 데이터를 직접 전송하지 않습니다. 사용자 장치는 Zerotier 네트워크에 참여하기 위해 최소한 하나의 행성 서버에 연결해야 합니다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중계 서버는 Zerotier 네트워크에서 보조 노드로, 장치 간 직접 통신 채널을 설정하는 데 도움을 줍니다. 장치가 서로 직접 연결할 수 없을 때 중계 서버를 통해 데이터를 전송할 수 있습니다. 이는 네트워크의 가용성과 성능을 향상시키는 데 도움이 됩니다. 중계 서버는 일반적으로 전 세계 곳곳에 위치하여 데이터 전송의 경유지가 됩니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;전반적으로 Zerotier는 행성 서버와 중계 서버의 도움을 받아 전 세계에 가상 로컬 네트워크를 구축하여 장치 간 안전하고 빠른 통신을 가능하게 합니다. 행성 서버는 전체 네트워크 관리를 담당하며, 중계 서버는 필요 시 장치 간 통신 연결을 돕습니다.&lt;/p&gt;
&lt;h2 id=&#34;설치-배포&#34;&gt;설치 배포
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ZeroTier 공식 웹사이트(&lt;a class=&#34;link&#34; href=&#34;https://www.zerotier.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.zerotier.com/&lt;/a&gt;)에서 설치 파일 및 문서를 확인하세요&lt;/li&gt;
&lt;li&gt;귀하의 운영 체제에 따라 ZeroTier One 클라이언트를 다운로드하여 설치하십시오. Windows, macOS, Linux 및 기타 여러 플랫폼을 지원합니다.&lt;/li&gt;
&lt;li&gt;설치 후 ZeroTier One 클라이언트를 시작합니다&lt;/li&gt;
&lt;li&gt;ZeroTier 계정이 아직 없으시다면, 계정을 만드세요. 클라이언트에서 계정 생성이 가능합니다.&lt;/li&gt;
&lt;li&gt;제로티어 계정에 로그인하여 새 네트워크를 만드세요. 네트워크에는 고유한 16자리 ID가 있으며, 이를 기억해야 합니다.&lt;/li&gt;
&lt;li&gt;귀하의 장치에 이 네트워크를 추가합니다. 클라이언트에서 네트워크 ID를 입력하거나 QR 코드 스캔 기능을 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;ZeroTier 클라이언트가 설치 및 구성된 장치는 동일한 가상 네트워크에 추가됩니다. 이제 이러한 장치들은 마치 동일한 로컬 영역 네트워크에 있는 것처럼 직접 통신할 수 있습니다.&lt;/li&gt;
&lt;li&gt;ZeroTier 제어판에서 네트워크 설정 관리, 장치 추가 및 네트워크 트래픽 모니터링 등을 할 수 있습니다&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;문-설치-배포&#34;&gt;문 설치 배포
&lt;/h2&gt;&lt;p&gt;국내 통신사들은 대부분 &lt;code&gt;UDP&lt;/code&gt;BOLD_5__INLINE_CODE_1__服务稳定，由于走的__INLINE_CODE_2__BOLD_7&lt;code&gt;Zerotier&lt;/code&gt;部署中转服务器也能实现类似的效果，防火墙需要开放__INLINE_CODE_4__을 금지하고 있습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -s https://install.zerotier.com/ | sudo bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;설치 성공 여부 확인&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli info
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;로컬 네트워크에 연결하기&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli join network-id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;생성&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd /var/lib/zerotier-one &amp;amp;&amp;amp; sudo zerotier-idtool initmoon identity.public &amp;gt; moon.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;설정 파일을 편집하여 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 노드를 &amp;ldquo;서버 공공 IP/9993&amp;quot;으로 조정합니다&lt;/p&gt;
&lt;p&gt;서명 구성 생성, &lt;code&gt;moons.d&lt;/code&gt; 폴더 생성 후 해당 파일들을 옮긴 뒤 서비스를 재시작합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo zerotier-idtool genmoon moon.json
mkdir moons.d &amp;amp;&amp;amp; mv 000000eb444ec0d8.moon moons.d/
systemctl restart zerotier-one.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;클라이언트 노드가 문(moon) 서버에 접속하며, ID는 앞선 JSON 설정 파일의 ID 필드에서 가져옵니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;zerotier-cli.bat orbit ztaddr ztaddr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 观察是否出现新的 mooon 节点，id 和信息为服务器配置的相同
[root@idv-36f9d5 ~]# zerotier-cli listpeers
200 listpeers &amp;lt;ztaddr&amp;gt; &amp;lt;path&amp;gt; &amp;lt;latency&amp;gt; &amp;lt;version&amp;gt; &amp;lt;role&amp;gt;
200 listpeers 0cccb***** 35.236.*.*/64393;110;10726 327 1.6.3 LEAF
200 listpeers 3a46f***** 185.180.*.*/9993;110;757 -1 - PLANET
200 listpeers 3ed7c***** 39.97.*.*/9993;172;79 32 1.6.3 MOON
200 listpeers 4f838***** - -1 - LEAF
200 listpeers 62f86***** 50.7.*.*/9993;110;4796 351 - PLANET
200 listpeers 778cd***** 103.195.*.*/9993;5148;4887 253 - PLANET
200 listpeers 992fc***** 195.181.*.*/9993;10161;4921 226 - PLANET
200 listpeers 9d2b5***** - -1 - LEAF
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows 플랫폼에서는 관리자 권한으로 터미널을 실행하고 zerotier-cli.bat 명령줄 도구를 사용하여 운영하며, Linux 플랫폼에서는 zerotier-cli를 사용합니다. peers 서브 명령어는 연결 상태를 확인하고, listpeers는 모든 노드를 표시하며, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 노드가 정상적으로 표시되면 성공적으로 추가된 것을 의미합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;어떻게-제거하나요&#34;&gt;어떻게 제거하나요
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Windows&lt;/code&gt;平台如何卸载不再赘述，常规操作，通过控制面板卸载即可，我们重点说下&lt;code&gt;ubuntu&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;dpkg를 통해 zerotier-one 서비스 삭제&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo dpkg -P zerotier-one
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;zerotier-one 폴더를 삭제하면 주소가 저장된 파일이 제거되고, 다시 설치하면 새로운 주소를 얻을 수 있습니다&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo rm -rf /var/lib/zerotier-one/
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;원래 다 이미 삭제했는데, 서버는 도착했고 적절한 프록시 노드 역할을 할 서비스가 없었다. 알리바바 클라우드는 실적을 위해 개발 전용 서버를 제공했는데, 사양이 높지 않고 99원에 1년 구독이라 가격이 저렴해서 두 년 정도 사용했다. 서버에서 제공하는 대역폭이 마음에 들어서였다.&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.wnark.com/archives/152.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.wnark.com/archives/152.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cnblogs.com/Yogile/p/12642423.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cnblogs.com/Yogile/p/12642423.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>VMware 가상 머신 디스크 공간 최적화</title>
        <link>https://blog.ttf248.life/ko/p/vmware-virtual-disk-space-optimization/</link>
        <pubDate>Wed, 21 Jun 2023 18:35:41 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/vmware-virtual-disk-space-optimization/</guid>
        <description>&lt;p&gt;가상 머신을 설치하고 개발 시스템을 사용할 때, 보통 디스크 공간을 넉넉히 확보해두는데, 시간이 지나면 실제 파일 내용보다 훨씬 더 많은 로컬 디스크 공간을 차지하게 됩니다&lt;/p&gt;
&lt;h2 id=&#34;장면-묘사&#34;&gt;장면 묘사
&lt;/h2&gt;&lt;p&gt;명령을 내린 후, 현재 기계의 디스크 정보를 확인하니 실제 사용량은 60GB였고, 모든 스냅샷과 클론 이미지를 삭제했음에도 불구하고 로컬 가상 머신이 차지하는 디스크 공간은 여전히 60GB를 훨씬 넘었다. 본래 부족한 하드디스크에 더 큰 부담을 주게 되었다.&lt;/p&gt;
&lt;h2 id=&#34;전제-조건&#34;&gt;전제 조건
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;가상 머신 설치 시, 미리 할당된 디스크 옵션을 선택하지 않았습니다&lt;/li&gt;
&lt;li&gt;가상 머신이 사용하는 공간보다 남은 디스크 공간이 더 큰 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;남은 공간이 부족하므로, 임시로 가상 머신을 외장 하드로 옮긴 후 디스크를 최적화한 다음 다시 이전하는 것을 고려해 볼 수 있습니다&lt;/p&gt;
&lt;h2 id=&#34;도구&#34;&gt;도구
&lt;/h2&gt;&lt;p&gt;공식적으로 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 패키지를 제공하며, yum을 통해 설치하거나 VMware Tools 이미지 패키지로 설치할 수 있습니다&lt;/p&gt;
&lt;h2 id=&#34;명령&#34;&gt;명령
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;vmware-toolbox-cmd disk shrink /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실행하면 가상 머신이 자동으로 종료되고 VMware 호스트 프로그램은 디스크 압축을 실행합니다. 실행 시간은 가상 머신의 크기와 디스크 액세스 속도에 따라 달라집니다.&lt;/p&gt;
&lt;p&gt;가상 머신의 디스크 공간 점유는 __INLINE_CODE_0__의 디스크 정보와 거의 동일합니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>스테이블 디퓨전 - 제로베이스 설치의 흥망성쇠</title>
        <link>https://blog.ttf248.life/ko/p/stable-diffusion-zero-install-saga/</link>
        <pubDate>Thu, 13 Apr 2023 00:23:54 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/stable-diffusion-zero-install-saga/</guid>
        <description>&lt;p&gt;국내 자료들을 보니, 기본적으로 &lt;strong&gt;秋叶&lt;/strong&gt; 전문가의 원클릭 배포 패키지를 추천하는 것 같아. &lt;code&gt;Python&lt;/code&gt; 기반 오픈소스 프로젝트라서 복잡하지 않을 테니, 일단 처음부터 시작해 보려고 해.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AI 생성 이미지 만들려고 그래픽 카드까지 바꿨는데, &lt;strong&gt;INLINE_CODE_0__入门版本；服役七年的__INLINE_CODE_1&lt;/strong&gt; 영광스럽게 종료되네요&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;핵심 암호화가 계속 활성화되지 않습니다&lt;/p&gt;
&lt;h2 id=&#34;미처리&#34;&gt;미처리
&lt;/h2&gt;&lt;p&gt;기사 구조를 재구성하여 pytorch, 버전 호환성, 버전을 확인하는 방법을 먼저 소개합니다
로컬에서 어떻게 처음부터 가상 환경을 만들고 PyTorch를 배포할 수 있나요?
3. 번역 작업, Stable Diffusion 설치부터 시작 &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;
자료 정리&lt;/p&gt;
&lt;h2 id=&#34;단계&#34;&gt;단계
&lt;/h2&gt;&lt;p&gt;중국어로 검색해도 관련 단계별 설치 튜토리얼을 찾기 어려울 수 있습니다. __INLINE_CODE_0__BOLD_3&lt;code&gt;git&lt;/code&gt;BOLD_4&lt;code&gt;python&lt;/code&gt; 후, 저장소를 다운로드하고 스크립트를 더블 클릭하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;자세한 사용법 및 Q&amp;amp;A는 &lt;code&gt;issues&lt;/code&gt;，&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki&lt;/a&gt;에서 확인하세요&lt;/p&gt;
&lt;p&gt;저도 왜인지 모르겠지만 이 창고가 뭐하는 곳인지 설명해 주는 사람이 없네요. 사실 이름만 봐도 알 수 있습니다. 인터페이스 콘솔이고, 우리를 더 편리하게 사용할 수 있도록 해 줍니다. 실제로 설치할 때, 그는 공식 저장소 내용을 다운로드하여 실제 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 코드를 가져옵니다.&lt;/p&gt;
&lt;p&gt;저장소와 함께 설치 시작 스크립트도 만들었습니다. 현재 폴더에 __INLINE_CODE_0__虚拟环境。如果有的话默认使用当前路径的的__INLINE_CODE_1__이 있는지 자동으로 인식합니다.&lt;/p&gt;
&lt;p&gt;순수 백지 사용자라면, &lt;a class=&#34;link&#34; href=&#34;https://stable-diffusion-art.com/install-windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stable-diffusion-art.com/install-windows/&lt;/a&gt;을 확인해 보세요&lt;/p&gt;
&lt;h2 id=&#34;pytorch&#34;&gt;pytorch
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기서 제가 오늘 말씀드리고 싶은 건, 우선 그들의 단계대로 스크립트를 바로 실행하지 마세요. Python은 requirement 파일로 의존성 라이브러리를 설치하는데, 이건 별거 아니에요. 핵심은 그래픽 카드 드라이버 버전이 PyTorch와 호환되는지 확인하는 겁니다. 이 부분에 대한 정보도 많은 자료가 있으니 인터넷에서 찾아보시면 됩니다.&lt;/p&gt;
&lt;p&gt;참조: &lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/weixin_40660408/article/details/129896700&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.csdn.net/weixin_40660408/article/details/129896700&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;가상 환경을 하나 만들고, 빈 가상 환경에서 바로 공식 웹사이트 스크립트를 실행하여 pytorch를 설치하면 됩니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.version.cuda)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -c &amp;quot;import torch; print(torch.__version__, torch.cuda.is_available())&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위에 두 스크립트는 설치해야 할 CUDA 버전을 확인하고, 설치 성공 여부를 확인할 수 있습니다&lt;/p&gt;
&lt;p&gt;여기 화려한 조작은 권장하지 않습니다. 공식 페이지의 로직을 그대로 복사해서 설치하면 되고, pip으로 설치하면 실패하거나 CUDA가 활성화되지 않을 가능성이 높습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;중요: 폴더 경로에 불필요한 내용이 있으면 pytorch 사용이 어려워질 수 있습니다&lt;/p&gt;
&lt;p&gt;중간에 여러 번 설치하고, 공식 설치 파일을 다운로드하여 수동으로 설치하는 방법도 시도했습니다. 2.0 버전으로 업그레이드하려고 했는데, 공식 문서에는 2.0 버전이 속도가 빠르다고 되어 있습니다. 하지만 이전에는 많이 사용하지 않았고, Python 버전과 이것이 영향을 미치는지도 모르겠습니다. 중간에 공식 매뉴얼을 살펴보니 3.8 버전을 사용하는 것이 좋다고 합니다. 이로 인해 약간의 충돌이 발생했는데, 기존에 원클릭 설치 패키지를 사용했더니 그 안에 3.10 버전이 포함되어 있었습니다. 결국 처음부터 다시 시작하여 새 폴더를 만들고 가상 환경을 생성하고 torch가 성공적으로 설치되었는지 확인했습니다.&lt;/p&gt;
&lt;p&gt;그런 다음 이 설치된 가상 환경을 웹 UI 폴더 안으로 이동하세요. 그러면 스크립트 설치 시 다른 의존성 문제는 크게 줄어들 겁니다.&lt;/p&gt;
&lt;p&gt;이동 후에는 다음을 실행하세요: python -m pip install &amp;ndash;upgrade &amp;ndash;force-reinstall pip로 pip를 수정합니다&lt;/p&gt;
&lt;p&gt;꽤 엉뚱해 보일 수도 있지만, 이 부분은 한참을 고생했어요. 제 torch를 제대로 인식하지 못해서요. 모든 간섭 요소를 배제하기 위해 먼저 이걸 설치한 다음에 다른 의존성 라이브러리를 설치하려고 했어요.&lt;/p&gt;
&lt;h2 id=&#34;xformers&#34;&gt;Xformers
&lt;/h2&gt;&lt;p&gt;권장 설정입니다. 이미지 생성 속도를 높이고 기존 사용량을 줄여줍니다. 부작용은 &lt;strong&gt;生成的图像相对不是那么稳定&lt;/strong&gt; 입니다.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;stable-diffusion-webui:Xformers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/docs/diffusers/optimization/xformers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;huggingface optimization&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Optimization Ratio&lt;/th&gt;
&lt;th&gt;Time taken&lt;/th&gt;
&lt;th&gt;Torch active/reserved&lt;/th&gt;
&lt;th&gt;Sys VRAM&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;100.00%&lt;/td&gt;
&lt;td&gt;2m 57.03s&lt;/td&gt;
&lt;td&gt;7440/10058 MiB&lt;/td&gt;
&lt;td&gt;12288/12288 MiB (100.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;51.02%&lt;/td&gt;
&lt;td&gt;1m 29.21s&lt;/td&gt;
&lt;td&gt;4547/7164 MiB&lt;/td&gt;
&lt;td&gt;9298/12288 MiB (75.67%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;((masterpiece)),((best quality)),((high detial)),((realistic,))
Industrial age city, deep canyons in the middle,chinese architectural streets,bazaars, Bridges, (rainy days:1.2), (steampunk:0.8), chinese architecture
Negative prompt: nsfw,((cowboy)),(((pubic))), ((((pubic_hair))))sketch, duplicate, ugly, huge eyes, text, logo, monochrome, worst face, (bad and mutated hands:1.3), (worst quality:2.0), (low quality:2.0), (blurry:2.0), horror, geometry, bad_prompt, (bad hands), (missing fingers), multiple limbs, bad anatomy, (interlocked fingers:1.2), Ugly Fingers, (extra digit and hands and fingers and legs and arms:1.4), crown braid, ((2girl)), (deformed fingers:1.2), (long fingers:1.2),succubus wings,horn,succubus horn,succubus hairstyle, (bad-artist-anime), bad-artist, bad hand, borrowed character, text focus, watermark, sample watermark, character watermark, lofter username, photo date watermark, movie poster, magazine cover, journal, cover, cover page, doujin cover, album cover, manga cover, brand name imitation, EasyNegative,Tights, silk stockings,shorts
Steps: 35, Sampler: DPM adaptive, CFG scale: 5.5, Seed: 2223996555, Size: 1088x1088, Model hash: 543bcbc212, Model: base_Anything-V3.0-pruned, Clip skip: 2, ENSD: 31337
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;원래 추천하는 원클릭 배포 패키지가 아니라서요. 그 패키지 안에는 작성자가 개인적으로 설정한 부분이 있어서, 공식 버전과 완전히 동일하지 않거든요. 초보자라면 왜 그런 설정을 해야 하는지 모를 수 있으니, 일단은 공식 버전을 사용하는 게 좋습니다. 사용 시간이 늘어날수록 공식 매뉴얼을 살펴보면 어떤 파라미터를 조정해야 할지 알게 될 거예요.&lt;/p&gt;
&lt;h2 id=&#34;그래픽카드-선택&#34;&gt;그래픽카드 선택
&lt;/h2&gt;&lt;p&gt;데이터 화폐 채굴 이후, 그래픽카드 가격이 상대적으로 많이 내렸고, 일반적인 초보 유저라면 &lt;strong&gt;INLINE_CODE_0__BOLD_4&lt;code&gt;3060ti&lt;/code&gt;BOLD_5__INLINE_CODE_2__版本的3060，毕竟能生成更大分辨率的图，为什么需要更大的分辨率，因为你可以在生成的时候，把分辨率调大，这样生成的图像就会更加清晰，更加细腻。如果你是想要生成一些小图，那么__INLINE_CODE_3&lt;/strong&gt; VRAM도 충분합니다&lt;/p&gt;
&lt;p&gt;아직 한 가지 더 있는데, &lt;strong&gt;高清放大&lt;/strong&gt; 옵션은 디테일을 구체화하여 화면의 디테일을 더욱 풍부하게 만들지만, 더 많은 비디오 메모리가 필요합니다&lt;/p&gt;
&lt;p&gt;다음은 NVIDIA GeForce GTX 970, GeForce RTX 3060 Ti, GeForce RTX 3060, GeForce RTX 3080 및 GeForce RTX 3080 Ti의 단정밀도(FP32), 반정밀도(FP16) 및 배정밀도(FP64) 부동소수점 연산 능력 사양 요약표입니다&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;그래픽 카드 모델&lt;/th&gt;
&lt;th&gt;출시 연도&lt;/th&gt;
&lt;th&gt;단정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;th&gt;반정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;th&gt;배정밀도 부동소수점 연산 능력 (TFLOPS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce GTX 970&lt;/td&gt;
&lt;td&gt;2014&lt;/td&gt;
&lt;td&gt;3.49&lt;/td&gt;
&lt;td&gt;87.2&lt;/td&gt;
&lt;td&gt;0.109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060 Ti&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;16.2&lt;/td&gt;
&lt;td&gt;32.4&lt;/td&gt;
&lt;td&gt;0.51&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3060&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;12.7&lt;/td&gt;
&lt;td&gt;25.4&lt;/td&gt;
&lt;td&gt;0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080&lt;/td&gt;
&lt;td&gt;2020&lt;/td&gt;
&lt;td&gt;29.8&lt;/td&gt;
&lt;td&gt;58.9&lt;/td&gt;
&lt;td&gt;0.93&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 3080 Ti&lt;/td&gt;
&lt;td&gt;2021&lt;/td&gt;
&lt;td&gt;34.8&lt;/td&gt;
&lt;td&gt;68.7&lt;/td&gt;
&lt;td&gt;1.36&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;링크된 내용입니다&lt;/p&gt;
&lt;h2 id=&#34;업데이트&#34;&gt;업데이트
&lt;/h2&gt;&lt;p&gt;반년 정도의 공백을 두고, 설치 단계 정리나 기초 개념 설명도 하고 싶었지만, 결국 일반인들은 AI 그림을 그리는 것이 고수들이 제공한 이미지 파라미터를 기반으로 조정하거나, 기존 이미지를 바탕으로 형식화된 재렌더링에 불과하다는 것을 알게 되었다&lt;/p&gt;
&lt;p&gt;중간에 AI로 미니 프로그램 UI 소재를 그리는 프로젝트가 있었는데, 반쯤 포기하고 직접 공식 미니 프로그램에서 리소스를 가져오는 게 더 나은 것 같아&lt;/p&gt;</description>
        </item>
        <item>
        <title>프로그램 최적화는 하드웨어를 상대하려 하지 마세요</title>
        <link>https://blog.ttf248.life/ko/p/program-optimization-dont-fight-hardware/</link>
        <pubDate>Fri, 07 Apr 2023 16:30:15 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/program-optimization-dont-fight-hardware/</guid>
        <description>&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;，耗时已经在**마이크로초 &lt;strong&gt;수준에서, 서버 교체 시 최대 6만 개의 데이터 패킷이 지연되던 것이 거의 지연되지 않게 되었습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;단일 스레드 루프 처리 시 CPU 성능은 클럭 속도, 캐시 크기, 명령어 집합 아키텍처 등의 요인에 따라 달라진다. 일반적으로 클럭 속도가 높고, 캐시가 크며, 명령어 집합 아키텍처가 발전할수록 단일 스레드 데이터 처리 성능이 향상된다.&lt;/p&gt;
&lt;h2 id=&#34;단일-스레드&#34;&gt;단일 스레드
&lt;/h2&gt;&lt;p&gt;성능 향상을 위해 스레드를 늘리는 것은 필수가 아니며, 프로젝트 흐름을 정리하고 병목 지점을 파악해야 합니다. 단일 스레드가 요구사항을 충족하는지 확인하고, 단일 스레드는 고려할 사항이 적고 문제 발생 가능성도 낮습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;바로 스레드를 추가하자는 말인데, 좀 이상하다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;사건&#34;&gt;사건
&lt;/h2&gt;&lt;p&gt;처리하는 것은 모두 &lt;strong&gt;行情数据，延迟敏感&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;죽어라 야근해서 새로운 최적화 버전 배포했고, 로컬 분리 인터페이스 테스트 결과 속도도 괜찮아, TPS: 4.2만&lt;/p&gt;
&lt;p&gt;서버에 배포 후 TPS가 급감했습니다: 21,000. 집에서 데스크톱으로 시도했을 때 TPS는 79,000이었습니다. 내부 서비스 가상화 환경에 문제가 있는 것 같아 의심되기 시작했는데, 우선 CPU 클럭 속도가 원인일 가능성이 높습니다. 가정용 데스크톱과 서버의 가장 큰 차이점은 바로 CPU 클럭 속도입니다.&lt;/p&gt;
&lt;p&gt;테스트 서버 A&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 47
model name	: Intel(R) Xeon(R) CPU E7- 4807  @ 1.87GHz
stepping	: 2
microcode	: 0x34
cpu MHz		: 1866.733
cache size	: 18432 KB
physical id	: 1
siblings	: 4
core id		: 3
cpu cores	: 4
apicid		: 7
initial apicid	: 7
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss ht syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 popcnt aes hypervisor lahf_lm pti dtherm arat
bugs		: clflush_monitor cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 3733.46
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;테스트 서버 B&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;processor	: 7
vendor_id	: GenuineIntel
cpu family	: 6
model		: 63
model name	: Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz
stepping	: 2
microcode	: 0x3c
cpu MHz		: 2599.998
cache size	: 20480 KB
physical id	: 14
siblings	: 1
core id		: 0
cpu cores	: 1
apicid		: 14
initial apicid	: 14
fpu		: yes
fpu_exception	: yes
cpuid level	: 15
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc cpuid aperfmperf pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cpuid_fault epb pti fsgsbase smep xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit
bogomips	: 5199.99
clflush size	: 64
cache_alignment	: 64
address sizes	: 40 bits physical, 48 bits virtual
power management:
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;openai에-문의하세요&#34;&gt;OpenAI에 문의하세요
&lt;/h2&gt;&lt;p&gt;먼저 코어 수와 클럭 속도 측면에서 Intel(R) Xeon(R) CPU E7-4807 @ 1.87GHz는 6개의 물리 코어와 12개의 논리 코어를 가지고 있으며, 클럭 속도는 1.87GHz입니다. 반면에 Intel(R) Xeon(R) CPU E5-2640 v3 @ 2.60GHz는 8개의 물리 코어와 16개의 논리 코어를 가지고 있으며, 클럭 속도는 2.60GHz입니다. 따라서 코어 수와 클럭 속도 측면에서 볼 때, E5-2640 v3가 단일 스레드 처리 시 E7-4807보다 더 유리할 것으로 예상됩니다.&lt;/p&gt;
&lt;p&gt;둘째, 캐시 크기 측면에서 E7-4807은 12MB의 캐시를 가지고 있는 반면, E5-2640 v3은 20MB의 캐시를 가지고 있습니다. 따라서 E5-2640 v3이 더 큰 캐시 공간을 제공하여 데이터 접근 속도와 캐시 히트율을 향상시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;마지막으로 아키텍처 측면에서 E5-2640 v3는 더 발전된 Haswell 아키텍처를 채택한 반면, E7-4807은 구형 Nehalem 아키텍처를 사용합니다. Haswell 아키텍처는 Nehalem 아키텍처에 비해 성능이 향상되었으며, 이는 E5-2640 v3의 단일 스레드 데이터 처리 성능 향상에 영향을 미칠 수 있습니다.&lt;/p&gt;
&lt;p&gt;따라서 종합적으로 고려했을 때, 단일 스레드 루프 처리 시나리오에서는 E5-2640 v3가 E7-4807보다 더 나은 성능을 보여줄 것으로 예상됩니다. 하지만 실제 성능 차이는 데이터 처리 알고리즘, 메모리 대역폭, 시스템 부하 등 다양한 요인의 영향을 받으므로, 구체적인 상황에 따라 분석해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;하드웨어-자료&#34;&gt;하드웨어 자료
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7%e2%80%934807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.cpubenchmark.net/compare/3786.2vs2365.2/%5BDual-CPU%5D-Intel-Xeon-E7–4807-vs-%5BDual-CPU%5D-Intel-Xeon-E5-2640-v3&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Specification&lt;/th&gt;
&lt;th&gt;Xeon E7-4807 (LGA1567)&lt;/th&gt;
&lt;th&gt;Xeon E5-2640 v3 (LGA2011-v3)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Price&lt;/td&gt;
&lt;td&gt;Search Online  $78 - BUY&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Socket Type&lt;/td&gt;
&lt;td&gt;LGA1567&lt;/td&gt;
&lt;td&gt;LGA2011-v3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Class&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clockspeed&lt;/td&gt;
&lt;td&gt;1.9 GHz&lt;/td&gt;
&lt;td&gt;2.6 GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Turbo Speed&lt;/td&gt;
&lt;td&gt;Not Supported&lt;/td&gt;
&lt;td&gt;Up to 3.4 GHz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# of Physical Cores&lt;/td&gt;
&lt;td&gt;6 (Threads: 12)&lt;/td&gt;
&lt;td&gt;8 (Threads: 16)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cache&lt;/td&gt;
&lt;td&gt;NA2&lt;/td&gt;
&lt;td&gt;NA2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Max TDP&lt;/td&gt;
&lt;td&gt;95W x 2&lt;/td&gt;
&lt;td&gt;90W x 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Yearly Running Cost&lt;/td&gt;
&lt;td&gt;$34.68&lt;/td&gt;
&lt;td&gt;$32.85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Other&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;First Seen on Chart&lt;/td&gt;
&lt;td&gt;Q3 2020&lt;/td&gt;
&lt;td&gt;Q3 2014&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;# of Samples&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Value&lt;/td&gt;
&lt;td&gt;69.1&lt;/td&gt;
&lt;td&gt;225.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single Thread Rating&lt;/td&gt;
&lt;td&gt;721 (-59.2%)&lt;/td&gt;
&lt;td&gt;1767 (0.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU Mark&lt;/td&gt;
&lt;td&gt;6223 (-64.6%)&lt;/td&gt;
&lt;td&gt;17600 (0.0%)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
        </item>
        <item>
        <title>프롬프트 엔지니어</title>
        <link>https://blog.ttf248.life/ko/p/prompt-engineer/</link>
        <pubDate>Sun, 26 Mar 2023 20:46:53 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/prompt-engineer/</guid>
        <description>&lt;p&gt;마치 과거 검색 엔진 사용법을 배운 것처럼, 우리는 __INLINE_CODE_0__과 소통하는 방법, 합리적이고 충분한 조건을 제시하여 필요한 답변을 효율적으로 얻는 방법을 배워야 합니다&lt;/p&gt;
&lt;p&gt;만약 다른 각도에서 접근해 본다면, 현재의 __INLINE_CODE_0__属于一个记忆力很好的小孩子，它拥有过目不忘的能力，有抄作业的能力。我们需要做的是学会如何正确、有效的和__INLINE_CODE_1__沟通，精准的描述需求，帮助__INLINE_CODE_2__이 예상하는 결과를 낼 수 있을 것이다&lt;/p&gt;
&lt;h2 id=&#34;과학-대중화&#34;&gt;과학 대중화
&lt;/h2&gt;&lt;p&gt;발사되는 듯 하늘을 찌르는 &lt;code&gt;AI&lt;/code&gt;确切的说__INLINE_CODE_1__은 직역하면 생성적 사전 훈련이다. 이는 인터넷에서 구할 수 있는 데이터로 학습된 텍스트 생성 심층 학습 모델이며, 질의응답, 텍스트 요약 생성, 기계 번역, 분류, 코드 생성 및 대화형 AI와 같은 작업에 사용된다. 현재 GPT-1, GPT-2, GPT-3 및 GPT-4 등 다양한 버전의 모델이 있으며, 각 버전은 이전 버전에 비해 더 크고 강력하다.&lt;/p&gt;
&lt;h2 id=&#34;정말-인공지능이-있을까&#34;&gt;정말 인공지능이 있을까?
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;유사도가 높을수록 정확도 또한 높아진다&lt;/li&gt;
&lt;li&gt;기본적이고 반복적인 업무는 특정 훈련을 거치면 더 이상 인공의 개입이 필요하지 않다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;생성형 AI는 기존의 텍스트, 오디오, 이미지 등 데이터를 활용하여 새로운 콘텐츠를 생성하는 기술입니다. 텍스트 생성, 음성 합성, 이미지 생성, 대화 시스템 등 다양한 작업에 사용될 수 있습니다. 생성형 AI의 논리성은 학습 데이터와 모델 구조에 따라 달라지며, 일반적으로 문법, 논리 및 상식을 어느 정도 따르지만 오류, 편향 또는 부정확한 내용을 포함할 수도 있습니다. 따라서 생성형 AI의 출력은 인간의 판단과 검증이 필요하며 맹목적으로 믿거나 사용할 수 없습니다.&lt;/p&gt;
&lt;h2 id=&#34;프롬프트-엔지니어&#34;&gt;프롬프트 엔지니어
&lt;/h2&gt;&lt;p&gt;시간의 흐름은 거슬러갈 수 없고, 사람은 변화에 적응해야 합니다. 당신이 __INLINE_CODE_0__을 비효율적이고 논리성이 없다고 생각할 수도 있습니다. 그것은 종종 쓸모없는 코드를 생성합니다.&lt;/p&gt;
&lt;p&gt;만약 다른 각도에서 접근해 본다면, 현재의 &lt;code&gt;AI&lt;/code&gt;属于一个记忆力很好的小孩子，它拥有过目不忘的能力，有抄作业的能力。我们需要做的是学会如何正确、有效的和&lt;code&gt;AI&lt;/code&gt;沟通，精准的描述需求，帮助&lt;code&gt;AI&lt;/code&gt;이 예상하는 결과를 낼 수 있을 것이다&lt;/p&gt;
&lt;h2 id=&#34;대화-모드&#34;&gt;대화 모드
&lt;/h2&gt;&lt;p&gt;두 해 전 __发布，谁也想不到两年后，__INLINE_CODE_0__이 __INLINE_CODE_1__과 함께 등장하여 인간에게 거대 언어 모델의 능력을 각인시켰다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于注释的编程&lt;/strong&gt;와 &lt;strong&gt;基于对话的编程&lt;/strong&gt;를 기반으로, 상호 작용 방식이 완전히 다르며, 대화 모드는 초보 사용자에게 친숙한 경험을 제공합니다. 여기서는 반드시 &lt;code&gt;NewBing&lt;/code&gt;BOLD_4&lt;code&gt;AI&lt;/code&gt; 지식 데이터베이스 내 더 많은 내용을 언급해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;예시로-말하자면&#34;&gt;예시로 말하자면
&lt;/h2&gt;&lt;p&gt;고속철도 여행 시간은 길지만, 코딩이 좋은 선택이다. 데이터 사용량이 제한적인 상황에서 몇 장의 사진을 처리하고 이미지 자료를 얻었더니, 사진 편집 프로그램을 다운로드하여 처리하는 것은 다소 사치스럽고 네트워크 환경도 허락하지 않는다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;: 이미지 자료 모음이 있는데, 투명 배경으로 되어 있고, 앱의 내비게이션 바에 사용하기 위한 것입니다. 선택된 상태는 컬러이고, 선택되지 않은 상태는 흑백입니다. 자료들은 모두 컬러로 되어 있으므로, 사전 처리 과정이 필요합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prompt&lt;/strong&gt;: 폴더 내 모든 이미지를 읽어와서 흑백으로 변환하고, 투명 배경을 유지하며, 이미지 품질을 최적화하여 파일 크기를 줄인 후 저장하는 Python 코드를 작성하세요. 콘솔에 최적 전후 파일 크기 비교를 표시합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 导入必要的库
import os
import PIL
from PIL import Image

# 定义一个函数，将图片转换成黑白，维持透明背景，保存图片，并返回文件体积
def convert_and_save(image_file):
    # 打开图片
    image = Image.open(image_file)
    # 获取图片的模式，如果是 RGBA 模式，说明有透明背景
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 创建一个和图片大小一致的白色背景图片
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 将原图片粘贴到白色背景上，忽略透明像素
        background.paste(image, mask=image.split()[3])
        # 将合成的图片转换成灰度模式
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # 将灰度图片再转换成 RGBA 模式，以便保留透明背景
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # 如果不是 RGBA 模式，直接将图片转换成灰度模式
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 获取原图片的文件名和扩展名
    file_name, file_ext = os.path.splitext(image_file)
    # 定义新图片的文件名，添加 _bw 后缀表示黑白
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 保存新图片，并优化质量，减少文件体积
    final_image.save(new_file_name, optimize=True)
    # 获取原图片和新图片的文件体积，并返回
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return old_size, new_size

# 定义一个文件夹路径，存放所有的图片
folder_path = &amp;quot;images&amp;quot;
# 遍历文件夹中的所有文件
for file in os.listdir(folder_path):
    # 拼接完整的文件路径
    file_path = os.path.join(folder_path, file)
    # 判断是否是图片文件，根据扩展名判断，可以根据需要添加或修改扩展名
    if file_path.endswith((&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;)):
        # 调用函数，转换并保存图片，并获取文件体积
        old_size, new_size = convert_and_save(file_path)
        # 在控制台展示优化前后的文件体积大小对比
        print(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;빠르게 답을 내놓았지만, 보기에는 괜찮고 사용에도 문제는 없으나, 경험이 많은 프로그래머라면 아래 코드가 충분히 일반적이지 않으며 프로덕션 환경에 적용하기 어렵다고 느낄 것이다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;매개변수 고정됨&lt;/li&gt;
&lt;li&gt;로그 파일이 없고, 정보는 모두 콘솔에 출력됩니다&lt;/li&gt;
&lt;li&gt;이미지 처리는 멀티스레드 모델에 적합합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 코드 개선할 부분 있을까요?&lt;/p&gt;
&lt;p&gt;제공된 답변은 솔직히 기대 이상이었고, 일반 프로그래머가 생각할 수 있는 최적화 방안에 대한 구체적인 제안들이 모두 포함되어 있습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;这段代码可能还有一些可以改进的地方，比如：

可以使用 argparse 库，让用户可以通过命令行参数指定文件夹路径和扩展名，而不是写死在代码里。
可以使用 logging 库，记录程序的运行情况，而不是直接打印到控制台。
可以使用 try-except 语句，捕获可能出现的异常，比如文件打开失败，图片转换失败等，并做相应的处理。
可以使用 multiprocessing 库，利用多核处理器，加速图片的转换和保存过程。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;매우 친절한 응답입니다. 배포 환경의 차이를 고려하여 다중 프로세스를 지원하지 않아도 괜찮습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;当然，我很乐意帮你修改一下代码。我尝试添加了 argparse, logging 和 try-except 语句，但没有添加 multiprocessing 库，因为我不确定你的电脑是否支持多核处理。修改后的代码如下：
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 导入必要的库
import argparse
import logging
import multiprocessing
import os

from PIL import Image


# 定义一个函数，将图片转换成黑白，维持透明背景，保存图片，并返回文件体积
def convert_and_save(image_file):
    # 打开图片
    try:
        image = Image.open(image_file)
    except Exception as e:
        logging.error(f&amp;quot;Failed to open {image_file}: {e}&amp;quot;)
        return None, None
    # 获取图片的模式，如果是 RGBA 模式，说明有透明背景
    mode = image.mode
    if mode == &amp;quot;RGBA&amp;quot;:
        # 创建一个和图片大小一致的白色背景图片
        background = Image.new(&amp;quot;RGB&amp;quot;, image.size, (255, 255, 255))
        # 将原图片粘贴到白色背景上，忽略透明像素
        background.paste(image, mask=image.split()[3])
        # 将合成的图片转换成灰度模式
        gray_image = background.convert(&amp;quot;L&amp;quot;)
        # 将灰度图片再转换成 RGBA 模式，以便保留透明背景
        final_image = gray_image.convert(&amp;quot;RGBA&amp;quot;)
    else:
        # 如果不是 RGBA 模式，直接将图片转换成灰度模式
        final_image = image.convert(&amp;quot;L&amp;quot;)
    # 获取原图片的文件名和扩展名
    file_name, file_ext = os.path.splitext(image_file)
    # 定义新图片的文件名，添加 _bw 后缀表示黑白
    new_file_name = file_name + &amp;quot;_bw&amp;quot; + file_ext
    # 保存新图片，并优化质量，减少文件体积
    try:
        final_image.save(new_file_name, optimize=True)
    except Exception as e:
        logging.error(f&amp;quot;Failed to save {new_file_name}: {e}&amp;quot;)
        return None, None
    # 获取原图片和新图片的文件体积，并返回
    old_size = os.path.getsize(image_file)
    new_size = os.path.getsize(new_file_name)
    return file_name, old_size, new_size

# 定义一个函数，解析命令行参数，并返回文件夹路径和扩展名列表
def parse_args():
    # 创建一个解析器对象
    parser = argparse.ArgumentParser(description=&amp;quot;Convert images to black and white and optimize quality.&amp;quot;)
    # 添加一个必选的位置参数，表示文件夹路径
    parser.add_argument(&amp;quot;folder_path&amp;quot;, help=&amp;quot;The path of the folder that contains the images.&amp;quot;)
    # 添加一个可选的参数，表示扩展名列表，默认为 png, jpg, jpeg 和 gif
    parser.add_argument(&amp;quot;-e&amp;quot;, &amp;quot;--extensions&amp;quot;, nargs=&amp;quot;+&amp;quot;, default=[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.gif&amp;quot;], help=&amp;quot;The extensions of the image files.&amp;quot;)
    # 解析命令行参数，并返回结果对象
    args = parser.parse_args()
    return args.folder_path, args.extensions

# 定义一个函数，打印优化前后的文件体积大小对比
def print_result(result):
    # 如果结果不为空，说明转换和保存成功
    if result:
        # 解包结果为文件名和文件体积元组
        if len(result) == 3:
            file, old_size, new_size = result
            # 在控制台展示优化前后的文件体积大小对比
            logging.info(f&amp;quot;{file}: {old_size} bytes -&amp;gt; {new_size} bytes&amp;quot;)
        else:
            logging.info(f&amp;quot;{result}&amp;quot;)

# 配置日志记录器，将日志输出到控制台和文件中，设置日志等级为 INFO
logging.basicConfig(level=logging.INFO,
                    format=&amp;quot;%(asctime)s %(levelname)s %(message)s&amp;quot;,
                    handlers=[logging.StreamHandler(),
                              logging.FileHandler(&amp;quot;log.txt&amp;quot;)])

# 调用函数，获取文件夹路径和扩展名列表
folder_path, extensions = parse_args()

if __name__ == &amp;quot;__main__&amp;quot;:
    # Windows 需要这个函数的原因是 Windows 缺乏 fork() 函数（这不完全正确）。
    # 因此，在 Windows 上，fork() 是通过创建一个新的进程来模拟的，这个新的进程中运行的代码，在 Linux 上是在子进程中运行的。
    # 由于这些代码要在技术上无关的进程中运行，所以它必须在运行之前被传递到那里。
    # 传递的方式是先将它们序列化，然后通过管道从原始进程发送到新的进程。
    # 另外，这个新的进程被通知它必须运行通过管道传递的代码，通过向它传递 --multiprocessing-fork 命令行参数。
    # 如果你看一下 freeze_support() 函数的实现，它的任务是检查它运行在哪个进程中，是否应该运行通过管道传递的代码
    multiprocessing.freeze_support()

    # 创建一个进程池，根据电脑的核心数自动分配进程
    pool = multiprocessing.Pool()
    # 创建一个空列表，用于存放异步任务的结果对象
    results = []
    # 遍历文件夹中的所有文件
    for file in os.listdir(folder_path):
        # 拼接完整的文件路径
        file_path = os.path.join(folder_path, file)
        # 判断是否是图片文件，根据扩展名判断，可以根据需要修改扩展名列表
        if any(file_path.endswith(ext) for ext in extensions):
            # 调用函数，转换并保存图片，并获取文件体积，使用异步方式，不阻塞主进程
            result = pool.apply_async(convert_and_save, args=(file_path,), callback=print_result)
            # 将结果对象添加到列表中
            results.append((file, result))
    # 关闭进程池，不再接受新的任务
    pool.close()
    # 等待所有的任务完成
    pool.join()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;로컬 개발 중 __系统，__INLINE_CODE_0__第一次给出的答案，并没有加上__INLINE_CODE_1__函数，也没有__INLINE_CODE_2__BOLD_5&lt;code&gt;multiprocessing.freeze_support&lt;/code&gt; 오류가 발생하여, 질문을 통해 오류를 추적하고 코드를 수정했습니다&lt;/p&gt;
&lt;p&gt;마치 과거 검색 엔진 사용법을 배운 것처럼, 우리는 __INLINE_CODE_0__과 소통하는 방법, 합리적이고 충분한 조건을 제시하여 필요한 답변을 효율적으로 얻는 방법을 배워야 합니다&lt;/p&gt;
&lt;p&gt;주의:&lt;/p&gt;</description>
        </item>
        <item>
        <title>위챗 미니 프로그램 배경 및 개발 환경</title>
        <link>https://blog.ttf248.life/ko/p/wechat-mini-program-background-and-development-environment/</link>
        <pubDate>Fri, 24 Mar 2023 21:59:11 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/wechat-mini-program-background-and-development-environment/</guid>
        <description>&lt;p&gt;위챗 미니 프로그램 소개 및 개발 준비&lt;/p&gt;
&lt;h2 id=&#34;왜-소규모-프로그램이-있을까&#34;&gt;왜 소규모 프로그램이 있을까?
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;더 나은 경험: 내장된 웹 페이지 로딩 속도 저하, 백 화면 발생; 네이티브 앱의 경험은 더 빠른 로딩을 제공합니다&lt;/li&gt;
&lt;li&gt;규범과 관리: 위챗의 경우, 접속 및 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;출시 전, 위챗은 __이탤릭체__굵게__인라인__이탤릭체__를 발표했습니다. 이는 위챗 결제 및 쿠폰과 같은 개방된 기능들을 제공합니다. 하지만 개발자들은 웹 페이지 개발 언어의 로직을 사용하여 위챗의 일부 규제를 우회할 수 있었습니다. 미니 프로그램은 자체적인 설명 언어를 사용합니다.&lt;/p&gt;
&lt;h2 id=&#34;무엇이-미니-프로그램인가&#34;&gt;무엇이 미니 프로그램인가?
&lt;/h2&gt;&lt;p&gt;소규모 프로그램은 다운로드나 설치 없이 사용할 수 있는 애플리케이션으로, 애플리케이션 &lt;strong&gt;触手可及&lt;/strong&gt;의 꿈을 실현했습니다&lt;/p&gt;
&lt;p&gt;사용자가 스캔하거나 검색하기만 하면 앱이 열리도록 하는 것도 &lt;strong&gt;用完即走&lt;/strong&gt;의 철학을 반영합니다&lt;/p&gt;
&lt;p&gt;사용자는 너무 많은 앱을 설치했는지 여부에 대해 걱장할 필요가 없다. 앱은 어디에나 존재하고 언제든 사용 가능하지만, 동시에 &lt;strong&gt;无需安装卸载&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;小程序와-모바일-앱의-차이점&#34;&gt;小程序와 모바일 앱의 차이점
&lt;/h2&gt;&lt;p&gt;설치 불필요, 메모리 차지 없음, 간편한 공유: QR 코드, 미니 프로그램 카드, 검색&lt;/p&gt;
&lt;h2 id=&#34;小程序로-무엇을-할-수-있나요&#34;&gt;小程序로 무엇을 할 수 있나요?
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;콘텐츠 도구: 지식, 웨이보 인기 게시물, 모바이 자전거, 오늘 당사표, 텐센트 지도, 텐센트 번역&lt;/li&gt;
&lt;li&gt;소매: 핀두어두오, 징둥 구매, 무궁가게, 메이리우션, 샤오미 쇼핑몰, 퀄스천스&lt;/li&gt;
&lt;li&gt;게임: 점프, 신나는 섯다, 신나는 마작, 투유 라이브, YY 라이브&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;강의 내용은 2018년 것이고, 현재는 일부 적용 업체가 폐업했습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;개발-준비&#34;&gt;개발 준비
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;소규모 프로그램 계정 등록: 일반적인 정보 입력으로 등록 가능하며, 이메일에서 활성화 링크를 클릭하세요&lt;/li&gt;
&lt;li&gt;정보 등록&lt;/li&gt;
&lt;li&gt;소규모 프로그램 관리자 접속&lt;/li&gt;
&lt;li&gt;완료된 소규모 프로그램 정보&lt;/li&gt;
&lt;li&gt;개발자 연동: 개인 개발자의 경우, 로그인한 위챗 계정이 관리자 계정으로 설정되어 있어 별도의 연동 작업이 필요 없습니다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이메일에는 제한이 있어 새로운 이메일이 필요하지만, &lt;code&gt;QQ&lt;/code&gt; 이메일은 별칭을 신청할 수 있고 微信 백엔드는 이를 검증하지 않습니다. 시도해 보니 소규모 프로그램 이름이 까다롭고, 상표와 관련된 경우 심사에서 실패하기 쉽습니다.&lt;/p&gt;
&lt;p&gt;서비스 카테고리를 선택하거나 직접 추가할 수 있으며, 하나의 미니 프로그램은 최대 다섯 가지 카테고리를 추가할 수 있습니다&lt;/p&gt;
&lt;p&gt;설정에서 미니 프로그램 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 정보를 확인하고 메시지 푸시를 활성화할 수 있습니다. 메시지 푸시를 사용하면 메시지 템플릿 기능을 사용할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;개발-도구-필자-주&#34;&gt;개발 도구 (필자 주)
&lt;/h2&gt;&lt;p&gt;정상적으로 다운로드 및 설치하면 특별한 주의사항은 없고, 간단히 이해하고 방문자 모드로 들어가면 됩니다. 휴대폰 디버깅을 사용하려면, 즉 휴대폰으로 소규모 프로그램 개발 버전을 보려면 소규모 프로그램 개발자 계정에 로그인한 다음 설정에서 프로젝트 상세 정보 내에서 지정된 소규모 프로그램을 __INLINE_CODE_0__로 전환해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;코드-구조&#34;&gt;코드 구조
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;JS: 상호작용 로직&lt;/li&gt;
&lt;li&gt;JSON: 데이터 설정&lt;/li&gt;
&lt;li&gt;인터페이스의 요소&lt;/li&gt;
&lt;li&gt;인터페이스 스타일&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>사무실 이전으로 서버 접속이 안 됩니다</title>
        <link>https://blog.ttf248.life/ko/p/office-migration-server-unavailable/</link>
        <pubDate>Sat, 11 Mar 2023 01:42:05 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/office-migration-server-unavailable/</guid>
        <description>&lt;p&gt;업무 공간 변경 안내입니다. 기존 2층에서 15층으로 이전되었습니다. 평범한 자리 이동입니다.&lt;/p&gt;
&lt;h2 id=&#34;디자인-감각&#34;&gt;디자인 감각
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/office-migration-server-unavailable/20230311014537.png&#34;
	width=&#34;511&#34;
	height=&#34;916&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;办公楼&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;55&#34;
		data-flex-basis=&#34;133px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;이주&#34;&gt;이주
&lt;/h2&gt;&lt;p&gt;퇴근 시 정리, 익숙한 이동 경로, 새로운 자리, 컴퓨터 배선 정리 후 편안한 자세로 업무 시작&lt;/p&gt;
&lt;p&gt;(ÒωÓױ)！ 인터넷 연결했는데, 팀에서 주로 사용하는 서버에 접속이 안 돼요. 무선 네트워크로 바꾸니 다시 정상적으로 접속되네요.&lt;/p&gt;
&lt;p&gt;처음에는 서버 네트워크 설정 문제라고 생각했습니다. 새로운 작업 공간의 유선 네트워크가 방화벽 구성 목록에 없어서 IT 동료에게 연락해 조정하면 될 거라고 봤습니다. 그런데 이 네트워크는 한 대의 서버뿐 아니라 다른 서버에도 접속해보니 모두 정상이었고, 점차 의아해졌습니다. 전문적인 일은 전문가에게 맡기기로 하고, 결국 운영팀 동료가 확인해보니 해당 서버에 &lt;code&gt;docker&lt;/code&gt;，服务的默认网络&lt;code&gt;docker0&lt;/code&gt;和办公室有线网络配置的网段冲突了，导致发过去的数据包，都收不到应答，被路由给了__INLINE_CODE_2__ 서비스가 배포되어 있었던 것이었습니다.&lt;/p&gt;
&lt;p&gt;다른 서버에 배포된 __INLINE_CODE_0__服务，也就这台，我比较常用，偶尔用容器部署一些测试服务，没想到还能碰到这个场景。后来细想想，由于整个集团都在一个办公大楼里面，IT部门的同事划分网段，用到了__INLINE_CODE_1__로 시작하는 주소는 이상하지 않다&lt;/p&gt;
&lt;h2 id=&#34;docker0&#34;&gt;docker0
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# vim /etc/docker/daemon.json
{
    &amp;quot;bip&amp;quot;:&amp;quot;172.200.0.1/24&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;서비스를 재시작하고 새로운 네트워크로 전환하면 서버가 정상적으로 접속됩니다&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>임베디드 입문 1 - 전문 용어</title>
        <link>https://blog.ttf248.life/ko/p/embedded-introduction-professional-terms/</link>
        <pubDate>Tue, 07 Mar 2023 13:42:36 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/embedded-introduction-professional-terms/</guid>
        <description>&lt;p&gt;임베디드 시스템을 떠올리면 아직도 학교 연구실의 51 단일칩 회로와 프리스칼이 생각난다&lt;/p&gt;
&lt;p&gt;LPA3399Pro는 루신(Rockchip) RK3399Pro 플랫폼을 기반으로 개발된 비전 호스트로, 대규모 시각 연산이 필요한 휴대용 컴퓨팅 장치에 적합합니다. 내장 NPU 계산 유닛을 통해 3.0TOPS의 연산 능력을 제공하며, 다양한 알고리즘 모델을 지원합니다.&lt;/p&gt;
&lt;p&gt;RV1109은 루신(Realtek) 인공지능 및 머신 비전 분기 SoC로, 내장된 독립 NPU를 갖추고 있습니다. RV1109은 1TOPS의 연산 능력을 제공합니다.&lt;/p&gt;
&lt;h2 id=&#34;system-on-chip&#34;&gt;System on Chip
&lt;/h2&gt;&lt;p&gt;SoC는 &amp;ldquo;System on a Chip&amp;quot;의 약자로, “칩 상 시스템”을 의미합니다. 이는 여러 전자 시스템을 하나의 칩에 통합하는 기술입니다. 이 기술은 전자 제품의 크기와 무게를 크게 줄이면서 성능을 향상시키고 전력 소비를 낮춥니다.&lt;/p&gt;
&lt;p&gt;SoC(시스템 온 칩)와 CPU(중앙 처리 장치)는 모두 컴퓨터 시스템의 중요한 구성 요소이지만, 몇 가지 차이가 있습니다&lt;/p&gt;
&lt;p&gt;CPU는 컴퓨터 시스템의 핵심 프로세서로서 프로그램 명령어를 실행하는 역할을 담당합니다. 일반적으로 연산 장치, 제어 장치 및 레지스터와 같은 기본 부품으로 구성됩니다.&lt;/p&gt;
&lt;p&gt;SoC는 여러 전자 시스템을 하나의 칩에 통합한 것으로, CPU 외에도 메모리, 그래픽 프로세서, 입출력 인터페이스 등 다양한 구성 요소를 포함할 수 있습니다. 이를 통해 전자 제품의 크기와 무게를 크게 줄이고 성능을 향상시키며 전력 소비를 낮출 수 있습니다.&lt;/p&gt;
&lt;p&gt;결론적으로, CPU는 SoC의 구성 요소이며, SoC는 더욱 복잡하고 통합된 전자 시스템입니다&lt;/p&gt;
&lt;h2 id=&#34;microcontroller-unit&#34;&gt;Microcontroller Unit
&lt;/h2&gt;&lt;p&gt;SoC(시스템 온 칩)와 MCU(마이크로컨트롤러 유닛)는 여러 전자 시스템을 하나의 칩에 통합하는 기술이지만, 몇 가지 차이점이 있습니다&lt;/p&gt;
&lt;p&gt;MCU는 일반적으로 CPU, 메모리, 입출력 인터페이스 등의 기본 부품을 포함하는 마이크로컨트롤러입니다. 가전제품, 자동차 전자 시스템 등 다른 전자 장치를 제어하는 데 주로 사용됩니다.&lt;/p&gt;
&lt;p&gt;SoC는 더 많은 전자 시스템을 하나의 칩에 통합한 것으로, MCU의 기본 구성 요소 외에도 그래픽 프로세서, 무선 통신 모듈과 같은 다른 구성 요소를 통합할 수 있습니다. 이를 통해 전자 제품의 크기와 무게를 크게 줄이고 성능을 향상시키며 전력 소비를 낮출 수 있습니다.&lt;/p&gt;
&lt;p&gt;요컨대, MCU는 간단한 마이크로컨트롤러이고, SoC는 더욱 복잡하고 통합된 전자 시스템입니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>AI 지원 프로그래밍, 생산성 진화</title>
        <link>https://blog.ttf248.life/ko/p/ai-assisted-programming-productivity-evolution/</link>
        <pubDate>Tue, 28 Feb 2023 17:05:17 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/ai-assisted-programming-productivity-evolution/</guid>
        <description>&lt;p&gt;&lt;code&gt;GitHub Copilot&lt;/code&gt;BOLD_2&lt;code&gt;ChatGPT&lt;/code&gt;이 세상에 나왔는데, 작동 원리는 잘 모르지만 한동안 사용했다. 두 도구는 생산성 향상에 있어 완전히 다른 수준의 도움을 주지만, 모두 큰 효과를 발휘한다.&lt;/p&gt;
&lt;p&gt;너무 복잡한 일은, ⁠_강조_⁠의 효과는 아홉할 정도일 뿐이다&lt;/p&gt;
&lt;h2 id=&#34;github-copilot&#34;&gt;github copilot
&lt;/h2&gt;&lt;p&gt;발표할 때, 홈페이지 소개__INLINE_CODE_0__를 보니 그렇게 똑똑해 보이지 않았고, 사용해 봤는데 잘 안 돼서 포기했다&lt;/p&gt;
&lt;p&gt;2022년 이전에는, 시간 날 때마다 새로운 버전으로 바꿔서 사용해 보는데, 효과는 꽤 괜찮은 편이다. 다만 국내 속도가 좀 느린데, 아마 네트워크 문제인 것 같다. &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 같은 언어로 작성된 코드는 주석을 참고해서 따라 하면 나보다 자료를 찾아 직접 짜는 것보다 훨씬 빠르다.&lt;/p&gt;
&lt;h2 id=&#34;chatgpt&#34;&gt;ChatGPT
&lt;/h2&gt;&lt;p&gt;여전히 프로그래머, 즉 개발 관점에서 제품을 설계하고 있으며, 프로그래밍 방법을 이해해야 하고, 주석을 통해 AI 지원 프로그래밍을 점진적으로 유도해야 합니다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 走到了下一个层面，**외지인도 빠르게 시작할 수 있습니다. 대화형 챗 인터페이스로 설계되어, 질문하고 요구사항을 설명하며, 이해가 안 되는 부분은 계속 질문할 수 있습니다.&lt;/p&gt;
&lt;p&gt;간단한 예시로, 토큰화 개념은 알지만 코딩 방법은 모르고 문자열 유사도를 계산하고 싶습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Python 分词计算 維天運通 LOGORY 和 合肥維天運通信息科技股份有限公司 两个字符串的相似度；
比较前，统一处理字符串，英文转换为小写；
第二个字符中如果能找到第一个字符的首字符，将第二个字符串截位，截位的长度为第一个字符串的长度
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;안녕하세요, 빙입니다. 😊&lt;/p&gt;
&lt;p&gt;온라인 정보에 따르면 123, Python 분단 계산은 jieba 라이브러리를 사용하여 구현할 수 있습니다. jieba 라이브러리는 정확 모드, 전체 모드 및 검색 엔진 모드의 세 가지 분단 모드를 지원합니다. 필요에 따라 적절한 모드를 선택할 수 있습니다.&lt;/p&gt;
&lt;p&gt;두 문자열의 유사도를 비교하려면 먼저 토큰화한 다음 단어 벡터 또는 편집 거리 등의 지표를 계산해야 합니다. 수학 연산에는 numpy나 scipy 같은 라이브러리를 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;문자열을 일관되게 처리하기 위해 영문자를 소문자로 변환하려면 Python의 내장 함수 lower()를 사용할 수 있습니다&lt;/p&gt;
&lt;p&gt;두 번째 문자열을 추출하려면 Python의 슬라이스 연산자 []를 사용할 수 있습니다&lt;/p&gt;
&lt;p&gt;다음은 가능한 코드 예제입니다:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jieba
import numpy as np
from scipy.spatial.distance import cosine

# 定义两个字符串
str1 = &amp;quot;維天運通 LOGORY&amp;quot;
str2 = &amp;quot;合肥維天運通信息科技股份有限公司&amp;quot;

# 统一处理字符串，英文转换为小写
str1 = str1.lower()
str2 = str2.lower()

# 找到第二个字符串中第一个字符的位置
index = str2.find(str1[0])

# 如果找到了，截取第二个字符串
if index != -1:
    str2 = str2[index:index+len(str1)]

# 使用 jieba 库进行分词
words1 = list(jieba.cut(str1))
words2 = list(jieba.cut(str2))

# 计算两个字符串的词向量（以词频作为权重）
vector1 = np.zeros(len(words1))
vector2 = np.zeros(len(words1))

for i, word in enumerate(words1):
    vector1[i] += 1 # 统计第一个字符串中每个词出现的次数
    if word in words2:
        vector2[i] += 1 # 统计第二个字符串中每个词出现的次数

# 计算两个字符串的相似度（以余弦距离作为指标）
similarity = 1 - cosine(vector1, vector2)

print(&amp;quot;两个字符串的相似度是：&amp;quot;, similarity)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;更进一步，咨询运行的结果，恭喜你，发现问题了，结果是瞎编的，它并没有实际运行代码，但是会给你一个不错的结果&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;밤&#34;&gt;밤
&lt;/h3&gt;&lt;p&gt;SQL 쿼리, 제품 코드 테이블에서 제품 코드 범위가 80000부터 89999까지인 레코드 검색&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;你好，这是 Bing。😊

根据搜索结果12，你可以使用 SQL BETWEEN 运算符来选择给定区间内的值。BETWEEN 运算符包含了开始和结束的值。

你需要先指定要查询的表名和列名，然后在 WHERE 子句中使用 BETWEEN 运算符和区间值。

例如，如果你要查询产品代码表中，产品代码在 80000 到 89999 之间的记录，你可以使用以下语句：

SELECT * FROM product_code
WHERE code BETWEEN 80000 AND 89999;
这里，* 表示选择所有列3。如果你只想选择特定的列，比如产品名称和价格，你可以用逗号分隔它们，如下：

SELECT name, price FROM product_code
WHERE code BETWEEN 80000 AND 89999;
希望这能帮助到你。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;계속 질문하고 반박하세요: 제품 코드는 문자열이고, 당신의 코드가 잘못되었습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;抱歉，我没有注意到产品代码是字符串。如果是这样的话，你需要在区间值两边加上单引号，如下：

SELECT * FROM product_code
WHERE code BETWEEN &#39;80000&#39; AND &#39;89999&#39;;
请原谅我的错误。🙏
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;축하해요, 틀릴 거예요&lt;/p&gt;</description>
        </item>
        <item>
        <title>자주 사용하지 않는 GIT 명령어 몇 가지 정리</title>
        <link>https://blog.ttf248.life/ko/p/git-less-common-commands-summary/</link>
        <pubDate>Fri, 17 Feb 2023 10:08:57 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/git-less-common-commands-summary/</guid>
        <description>&lt;p&gt;자주 사용하지는 않지만 유용한 &lt;code&gt;git&lt;/code&gt; 명령&lt;/p&gt;
&lt;h3 id=&#34;시스템-재설치로-인해-__inline_code_0__-폴더-소유자-정보가-변경되었습니다&#34;&gt;시스템 재설치로 인해 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 폴더 소유자 정보가 변경되었습니다
&lt;/h3&gt;&lt;p&gt;새 버전은 보안 검사를 추가하여 위험을 알리고, 이로 인해 작업을 계속할 수 없습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global --add safe.directory
git config --global --add safe.directory &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;새-컴퓨터-계정-정보-저장&#34;&gt;새 컴퓨터 계정 정보 저장
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;정보를 업데이트하기 전에 먼저 기존 증거를 정리하세요&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git config --system --unset credential.helper
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>홍콩 달러, 위안화 이중 통장 방식</title>
        <link>https://blog.ttf248.life/ko/p/hk-rmb-dual-counter-mode/</link>
        <pubDate>Thu, 16 Feb 2023 20:25:47 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/hk-rmb-dual-counter-mode/</guid>
        <description>&lt;p&gt;홍콩증권거래소는 12월 13일, 자회사 증권시장이 “홍콩달러-위안화 이중 카운터 모델”(이하 “이중 카운터 모델”) 및 이중 카운터 주식 중개인 제도를 도입하여 홍콩 상장, 거래 및 결제에서의 위안화 카운터를 추가적으로 지원할 것이라고 발표했다&lt;/p&gt;
&lt;h2 id=&#34;양측-카운터-방식-및-양측-카운터-주식-중개인-제도&#34;&gt;양측 카운터 방식 및 양측 카운터 주식 중개인 제도
&lt;/h2&gt;&lt;p&gt;홍콩증권거래소는 규제기관 승인과 시장 준비가 완료되면 2023년 상반기부터 신규 조치 등록 절차를 시작하고, 이중 카운터 모델 하에서 투자자들이 동일 발행인의 홍콩달러 및 위안화 카운터 증권을 교환할 수 있도록 거래 및 결제 방식을 최적화할 것이라고 밝혔다&lt;/p&gt;
&lt;p&gt;홍콩증권거래소는 위안화 카운터의 유동성을 높이고 두 카운터 간 가격 차를 좁히기 위해 이중 카운터 마켓 메이커 제도를 도입할 예정이며, 관련 법률이 입법회에서 통과되면 특정 거래 시 증지세 면제 혜택을 제공하여 주식 시장 유동성 공급 활동을 수행하는 시장 조성자들을 지원할 것입니다. 동시에 이러한 새로운 조치들은 향후 중국 본토 투자자들이 홍콩 주식을 통해 위안화로 가격 결정된 증권을 거래할 수 있도록 기반을 마련할 것입니다.&lt;/p&gt;
&lt;p&gt;홍콩달러-위안화 이중 카운터 모델 및 이중 카운터 딜러 메커니즘 도입은 시장 발전을 위한 중요한 조치입니다. 다른 시장 조치와 함께 이러한 방안은 더 많은 이중 카운터 증권의 홍콩 상장을 유도하고 홍콩증권거래소 기존 대륙 상품과의 시너지 효과를 창출하는 데 도움이 될 것입니다. 홍콩증권거래소 최고 운영 책임자 겸 시장 공동 책임자인 요카린이 밝혔습니다.&lt;/p&gt;
&lt;p&gt;알려진 바에 따르면, 홍콩 주식 시장의 현행 상장, 거래, 결제 및 정산 절차는 이중 카운터 모델 하의 위안화 관련 증권에도 대체로 적용될 예정이다. 홍콩거래소는 이중 카운터 모델 시행일자와 지정 투자자 제재 대상이 될 자격 있는 이중 카운터 증권 명단을 적절한 시기에 발표할 것이다.&lt;/p&gt;
&lt;h2 id=&#34;홍콩-달러-위안화-거래-카운터를-어떻게-식별할-수-있습니까&#34;&gt;홍콩 달러-위안화 거래 카운터를 어떻게 식별할 수 있습니까?
&lt;/h2&gt;&lt;p&gt;홍콩증권거래소 자료에 따르면 홍콩달러-위안화 이중 카운터 거래는 기존 주식 코드 배분 계획을 대략적으로 따를 예정이며, 홍콩달러 카운터의 주식 코드는 “0”으로 시작하는 5자리 숫자이고, 위안화 카운터의 주식 코드는 “8”로 시작하는 5자리 숫자입니다. 홍콩달러 및 위안화 카운터 주식 코드의 마지막 네 자리 숫자는 동일하며, 위안화 카운터 주식 약칭에는“-R”이 붙습니다.&lt;/p&gt;
&lt;p&gt;거래 관련하여, 위안화 및 홍콩달러 카운터의 증권이 동일한 범주이며 서로 전환 가능한 토대를 바탕으로, 한 카운터(예: 홍콩달러 카운터)가 공매도 지정증권으로 지정되면, 다른 카운터(예: 위안화 카운터) 또한 거래소 규정에 따라 공매도 지정증권으로 포함될 수 있으며, 이에 따라 두 카운터 모두 거래소가 발표하는 공매도 지정증권 명단에 올라갈 것이다&lt;/p&gt;
&lt;p&gt;두 거래소 주식은 동일한 종류이며 상호 변환이 가능하므로, 홍콩 달러로 구매하여 주식을 보유하다가 위안화로 매도하거나 그 반대로 하는 행위는 모두 지고매수(持货沽售)에 해당합니다. 두 거래소 간의 결제 기간은 T+2입니다.&lt;/p&gt;
&lt;p&gt;공매도 자격이 있는 특정 주식에 대해, 예를 들어 홍콩 달러로 빌린 주식을 인민폐 장외 시장에서 매도하는 경우, 담보 공매도로 간주되며, 그 반대의 경우도 마찬가지입니다&lt;/p&gt;
&lt;p&gt;쌍계좌 모드 하에서는 위안화 계좌는 거래 및 결제 용도로만 사용되므로 실물 주식의 입금 또는 출금 서비스를 제공하지 않습니다. 실물 주식은 홍콩 달러 계좌에 먼저 입금한 후 위안화 계좌로 전환해야 합니다. 마찬가지로, 위안화 계좌에서 실물 주식을 인출하려면 홍콩 달러 계좌로 먼저 전환해야 합니다.&lt;/p&gt;
&lt;p&gt;관련 거래 결제 및 이행 수수료는 모든 홍콩 청산 수수료가 홍콩 달러로 계산 및 부과되지만, 배당금 대행 서비스 수수료와 이자 대행 서비스 수수료는 관련 증권이 사용하는 적격 통화로 계산됩니다&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/Services/Trading/Securities/Overview/Trading-Mechanism/HKD-RMB-Dual-Counter-Model?sc_lang=en&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKD-RMB-Dual-Counter-Model&lt;/a&gt;
출처: 홍콩거래소 펄스/HKEx Pulse, 증권중국&lt;/p&gt;</description>
        </item>
        <item>
        <title>컴파일러, 콜백 함수, 성능 테스트</title>
        <link>https://blog.ttf248.life/ko/p/compiler-callback-function-performance-testing/</link>
        <pubDate>Wed, 15 Feb 2023 13:59:25 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/compiler-callback-function-performance-testing/</guid>
        <description>&lt;p&gt;지난해 __INLINE_CODE_0__을 설계했는데, 이 기능은 이벤트 캡처를 처리하고 외부에는 클래스 인터페이스를 제공합니다. 서비스 초기화 시 호출하는 쪽에서 해당 클래스를 구현하고 객체 포인터를 모듈에 전달합니다.
접촉한 __，好奇心害死猫，就想着这些接口都用__INLINE_CODE_1__함수 객체 콜백을 통해 얻는 결과는 순수 가상 함수의 인터페이스 정의 방법과 비교하여 더 유연하다
질문이 생겼다. 두 가지 다른 문법 중 성능 면에서 어느 것이 더 빠른가? 컴파일 원리를 모르는 사람이 코드를 조금 작성해서 확인해 보았다.&lt;/p&gt;
&lt;h2 id=&#34;서론&#34;&gt;서론
&lt;/h2&gt;&lt;p&gt;온라인 주소에서 다양한 컴파일러와 컴파일 옵션을 선택하고, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 플랫폼에서 코드를 실행하거나 해당 어셈블리 코드를 확인할 수 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기술 검증을 할 때, 웹 페이지에서 짧은 코드 조각을 실행하는 것이 편리합니다&lt;/li&gt;
&lt;li&gt;다양한 색상으로 다른 어셈블리 코드에 해당하는 부분을 구분하면 로컬 디버거보다 훨씬 편리합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;표준위원회에서 문법 규칙을 제정했으며, 컴파일 단계에서 어떻게 구현할지는 각 컴파일러에 달려 있습니다. 이 점에서는 마이크로소프트의 컴파일러가 꽤 강력하다고 말씀드릴 수 있습니다. 문법적 설탕이 만능은 아니며, 콜백 인터페이스가 많지 않으므로 __INLINE_CODE_0__을 사용하면 더욱 편리하고 빈 콜백 함수 인터페이스를 정의할 필요도 없습니다. 콜백 인터페이스 종류가 다양할 때는 전통적인 가상 함수가 비즈니스 인터페이스 정의의 통일성을 높이는 데 더 유리합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;플랫폼인데, 성능이 비슷하고 큰 차이는 없습니다&lt;/li&gt;
&lt;li&gt;__INLINE_CODE_0__굵게_2__INLINE_CODE_1__비교 시 1.35ns 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일반적인 비즈니스 시스템 개발에서는 이 정도의 성능 손실은 무시할 수 있으며, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;，在设计的上，能带来更多的便捷。在设计多信号处理时，尤为明显，底层有事件触发，如果需要落地日志，出入日志对象的的处理函数。当需要更多的业务处理接口时，底层用__INLINE_CODE_1__BOLD_5&lt;code&gt;lambda&lt;/code&gt;BOLD_6__INLINE_CODE_3__ 내의 신호와 슬롯, 로깅, 모니터링, 비즈니스 1, 비즈니스 2는 서로 완전히 분리되어 있습니다&lt;/p&gt;
&lt;h2 id=&#34;코드&#34;&gt;코드
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Counter: 1000000
Time: 3966us
Counter: 1000000
Time: 5316us
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;
#include &amp;lt;atomic&amp;gt;
#include &amp;lt;string&amp;gt;

std::atomic_int64_t counter = 0;

// 定义回调接口
class UserInterface
{
public:
    virtual void name() = 0;
    virtual void full_name() = 0;
};

class User : public UserInterface
{
public:
    void name() {}
    void full_name() { counter++; }
};

void to_string(UserInterface* user)
{
    user-&amp;gt;name();
    user-&amp;gt;full_name();
}

using name_handler = std::function&amp;lt;void()&amp;gt;;
using full_name_handler = std::function&amp;lt;void()&amp;gt;;

class Test
{
    name_handler name_;
    full_name_handler full_name_;

public:
    void set_name_handler(name_handler name)
    {
        name_ = name;
    }

    void set_full_name_handler(full_name_handler full_name)
    {
        full_name_ = full_name;
    }

    void to_string()
    {
        name_();
        full_name_();
    }
};

int main()
{
    User user;

    auto start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++)
    {
        to_string(&amp;amp;user);
    }

    auto end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;Counter: &amp;quot; &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;Time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

    counter = 0;
    auto name = []() {};
    auto full_name = []() { counter++; };

    Test test;
    test.set_name_handler(name);
    test.set_full_name_handler(full_name);

    start = std::chrono::high_resolution_clock::now();

    for (int i = 0; i &amp;lt; 1000000; i++)
    {
        test.to_string();
    }

    end = std::chrono::high_resolution_clock::now();
    std::cout &amp;lt;&amp;lt; &amp;quot;Counter: &amp;quot; &amp;lt;&amp;lt; counter &amp;lt;&amp;lt; std::endl;
    std::cout &amp;lt;&amp;lt; &amp;quot;Time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(end - start).count() &amp;lt;&amp;lt; &amp;quot;us&amp;quot; &amp;lt;&amp;lt; std::endl;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;자료를 찾다가 비슷한 코드 조각을 발견했습니다. &lt;a class=&#34;link&#34; href=&#34;https://gist.githubusercontent.com/benloong/8050171/raw/fa577ec923b460862078b8b40233a42a1c619eeb/functionperformance.cpp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;functionperformance.cpp&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;memory&amp;gt;
#include &amp;lt;functional&amp;gt;

using namespace std;
using namespace std::chrono;

class Base
{
public:
	Base(){}
	virtual ~Base(){}
	virtual int func(int i) = 0;
};

class Derived : public Base
{
public:
	Derived(int base = 10) : base{base}
	{

	}
	~Derived(){}

	virtual int func(int i)
	{
		return i*base;
	}
private:
	int base;
};

struct Func
{
	int base;
	int operator()(int i)
	{
		return i*base;
	}
	Func(int base) : base {base}
	{

	}
};
const int base = 10;
int calculate(int i)
{
	return base*i;
}

int main()
{
	const int num = 10000;
	Base *p = new Derived{10};
	int total = 0;
	auto start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += p-&amp;gt;func(i);
	}
	auto end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nvirtual call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += calculate(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\ndirect function call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;

	Func functor{10};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += functor(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nfunctor call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	int base = 10;
	function&amp;lt;int(int)&amp;gt; lambda = [base](int i)
	{
		return i*base;
	};
	total = 0;
	start = high_resolution_clock::now();
	for (int i = 0; i &amp;lt; num; ++i)
	{
		total += lambda(i);
	}
	end = high_resolution_clock::now();
	std::cout&amp;lt;&amp;lt;&amp;quot;result: &amp;quot;&amp;lt;&amp;lt;total&amp;lt;&amp;lt;&amp;quot;\nlambda call elapsed: \t&amp;quot;&amp;lt;&amp;lt;duration_cast&amp;lt;nanoseconds&amp;gt;(end-start).count()&amp;lt;&amp;lt;&amp;quot; nanoseconds.\n&amp;quot;&amp;lt;&amp;lt;std::endl;
	return 0;
}

/*
test on mac mini i7 2.7GHz
clang++ -std=c++11 chronotest.cpp -O0
output:
result: 499950000
virtual call elapsed: 	43171 nanoseconds.

result: 499950000
direct function call elapsed: 	31379 nanoseconds.

result: 499950000
functor call elapsed: 	41497 nanoseconds.

result: 499950000
lambda call elapsed: 	207416 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O1
output:
result: 499950000
virtual call elapsed: 	26144 nanoseconds.

result: 499950000
direct function call elapsed: 	22384 nanoseconds.

result: 499950000
functor call elapsed: 	33477 nanoseconds.

result: 499950000
lambda call elapsed: 	55799 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O2
result: 499950000
virtual call elapsed: 	22284 nanoseconds.

result: 499950000
direct function call elapsed: 	36 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	28292 nanoseconds.

===================================================
clang++ -std=c++11 chronotest.cpp -O3
result: 499950000
virtual call elapsed: 	18975 nanoseconds.

result: 499950000
direct function call elapsed: 	29 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	22542 nanoseconds.
===================================================
clang++ -std=c++11 chronotest.cpp -O4

result: 499950000
virtual call elapsed: 	22141 nanoseconds.

result: 499950000
direct function call elapsed: 	30 nanoseconds.

result: 499950000
functor call elapsed: 	30 nanoseconds.

result: 499950000
lambda call elapsed: 	22584 nanoseconds.
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;여기에는 일반 함수와 람다 함수라는 두 가지 모드가 추가되었으며, 인터페이스 콜백 방식과 직접 호출 방식을 비교하여 성능 손실이 수치적인 차이를 보인다. 람다 함수의 성능은 함수에 근접하며 때로는 더 우수하다. 컴파일 원리에 대한 지식 부족으로 추측컨대, 접근하는 변수 주소와 함수가 인접해 있어 &lt;strong&gt;INLINE&lt;/strong&gt; 처리 효율을 높이는 것으로 보인다.&lt;/p&gt;
&lt;p&gt;첨부된 실행 결과&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result: 499950000
virtual call elapsed: 6143 nanoseconds.

result: 499950000
direct function call elapsed: 30 nanoseconds.

result: 499950000
functor call elapsed: 31 nanoseconds.

result: 499950000
lambda call elapsed: 15134 nanoseconds.
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>호스트 순서, 네트워크 순서를 디버거를 통해 직접 관찰</title>
        <link>https://blog.ttf248.life/ko/p/host-order-network-order-debugger-observation/</link>
        <pubDate>Tue, 10 Jan 2023 14:18:12 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/host-order-network-order-debugger-observation/</guid>
        <description>&lt;p&gt;컴퓨터 발전 역사에서 데이터를 저장하는 방법에 대한 통일된 표준은 없었습니다&lt;/p&gt;
&lt;p&gt;바이트 정렬 방식에는 두 가지 일반적인 규칙이 있습니다. 예를 들어, 다중 자릿수의 하위 바이트를 작은 주소에 배치하고 상위 바이트를 큰 주소에 배치하는 것을 리틀 엔디언이라고 하며, 그 반대는 빅 엔디언이라고 합니다. 네트워크 애플리케이션에서는 다양한 기기 유형이 서로 다른 표준의 바이트 정렬을 채택할 수 있으므로 바이트 순서가 반드시 고려되어야 하며, 모두 네트워크 표준으로 변환됩니다.&lt;/p&gt;
&lt;p&gt;읽기 습관에 따라 빅 엔디안 바이트 순서가 왼쪽에서 오른쪽으로 읽는 방식과 더 일치합니다&lt;/p&gt;
&lt;h2 id=&#34;죄송합니다-번역할-중국어-텍스트가-제공되지-않았습니다-텍스트를-제공해-주시면-번역해-드리겠습니다&#34;&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;x86, MOS Technology 6502, Z80, VAX, PDP-11 등 프로세서는 리틀 엔디언 방식입니다&lt;/li&gt;
&lt;li&gt;모토로라 6800, 모토로라 68000, PowerPC 970 등 프로세서는 빅 엔디언 방식입니다&lt;/li&gt;
&lt;li&gt;ARM, PowerPC(PowerPC 970 제외), DEC Alpha, SPARC V9, MIPS, PA-RISC 및 IA64의 바이트 순서는 설정 가능합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;네트워크-서론&#34;&gt;네트워크 서론
&lt;/h2&gt;&lt;p&gt;네트워크 전송은 일반적으로 빅 엔디안을 사용하며, 네트워크 바이트 오더 또는 네트워크 순서라고도 합니다. IP 프로토콜에서 빅 엔디안을 네트워크 바이트 오더로 정의합니다.
소켓은 16비트 및 32비트 정수를 네트워크 바이트 순서와 로컬 바이트 순서 간에 변환하는 일련의 변환 함수를 정의합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;arpa/inet.h&amp;gt;

uint32_t htonl(uint32_t hostlong); //把uint32_t类型从主机序转换到网络序
uint16_t htons(uint16_t hostshort); //把uint16_t类型从主机序转换到网络序
uint32_t ntohl(uint32_t netlong); //把uint32_t类型从网络序转换到主机序
uint16_t ntohs(uint16_t netshort); //把uint16_t类型从网络序转换到主机序
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;__INLINE_CODE_0__를 네트워크 라이브러리로 선택하면, 내장된 네임스페이스에 플랫폼 독립적인 함수 이름이 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::network_to_host_short&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_long&lt;/li&gt;
&lt;li&gt;boost::asio::detail::socket_ops::host_to_network_short&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;비주얼-스튜디오-디버거&#34;&gt;비주얼 스튜디오 디버거
&lt;/h2&gt;&lt;p&gt;디버그 모드에서 디버그 메뉴, 창을 선택하고 메모리 윈도우를 체크하세요&lt;/p&gt;
&lt;p&gt;__INLINE_CODE_0__에서 디버거 내에서 메모리 데이터를 직접 확인할 수 있습니다(아래 그림 참조)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/host-order-network-order-debugger-observation/Snipaste_2023-01-10_14-44-00.png&#34;
	width=&#34;535&#34;
	height=&#34;147&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;调试器菜单&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;363&#34;
		data-flex-basis=&#34;873px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;메모리-확인-방법&#34;&gt;메모리 확인 방법
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;창에서 변수 이름을 직접 출력하고 해당 변수의 주소로 이동합니다&lt;/li&gt;
&lt;li&gt;변수가 이미 포인터라면, 변수를 더블 클릭하여 선택한 후 메모리 윈도우로 드래그하면 해당 주소의 내용을 확인할 수 있습니다&lt;/li&gt;
&lt;li&gt;변수가 포인터가 아니면 계산 창에 추가하고, 주소를 가져온 다음 메모리 창에 수동으로 복사합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;예시로-말하자면&#34;&gt;예시로 말하자면
&lt;/h3&gt;&lt;p&gt;데이터를 받아 __INLINE_CODE_0__对象中，将网络序转成主机序，得到__INLINE_CODE_1__가 30으로 설정되었고, 서버는 이 데이터를 전송하기 위해 네 개의 바이트를 할당했습니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool NetworkMessage::decode_header()
{
    // 网络序转成主机序
    body_length_ = boost::asio::detail::socket_ops::network_to_host_long(*(int *)buffer_.data());
    return auto_reserve(body_length_);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;메모리 창에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 의 내용을 관찰하십시오&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/host-order-network-order-debugger-observation/buffer_.png&#34;
	width=&#34;603&#34;
	height=&#34;318&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;buffer_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;메모리 창에서 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 의 내용을 관찰하십시오&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/host-order-network-order-debugger-observation/body_length_.png&#34;
	width=&#34;581&#34;
	height=&#34;333&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;body_length_&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>그때 그 소년은, 재능이 있을지도 모르지만 많지는 않았다</title>
        <link>https://blog.ttf248.life/ko/p/then-boy-talent-not-much/</link>
        <pubDate>Mon, 09 Jan 2023 13:45:09 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/then-boy-talent-not-much/</guid>
        <description>&lt;p&gt;일곱 번째 해가 되니, 코딩하며 얻는 긍정적인 피드백이 예전만큼 많지 않다. 어떻게 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 길을 걷게 되었는지 되돌아본다.
어린 시절의 다양한 선택은, 긍정적인 피드백을 따르는 경향이 있어 위험을 회피하고 이익을 추구하게 된다&lt;/p&gt;
&lt;h2 id=&#34;어릴-적&#34;&gt;어릴 적
&lt;/h2&gt;&lt;p&gt;도심으로 이사하고 컴퓨터 서적이나 해커 자료에 접하게 되고, 윈도우 시스템을 알게 된 일들… 그런 건 뒷 이야기야&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间应该定位到小时候和堂弟偷摸用家里的电脑玩游戏&lt;/strong&gt;, 형님의 외삼촌이 컴퓨터 거리에서 가게를 운영하고 있어요
어릴 때부터 컴퓨터를 접할 기회가 많았고, 기본적인 지식을 쌓았으며, 학교에서 전자통신 수업을 들을 때도 관심이 있었음
중학교 때 컴퓨터 경선대회 얘기를 듣고 멋있다고 생각했는데, 전학 후에는 그 일이 잠시 멈춰버렸다
중학교 시절에 컴퓨터 기본 조작을 익숙하게 했고, 컴퓨터 수업 시간에 눈에 띄기 쉬웠어요
만약 아직도 익숙하다면, 네, 착각하지 말고, 숙련이 아니라 오피스 사무 프로그램에 익숙하다면 더 대단할 거야&lt;/p&gt;
&lt;h2 id=&#34;이주&#34;&gt;이주
&lt;/h2&gt;&lt;p&gt;이사 문제로 시내에 왔는데, 이웃 때문에 도서관을 알게 되었고, 소설도 많이 읽었지만 잡지도 많이 봤어요
컴퓨터 보고서, 대중 소프트웨어
컴퓨터에 대한 관심이 점점 더 생기고, 어렸을 때 해커를 동경했던 마음과 함께 학교 관련 지식을 적극적으로 찾아다녔습니다
운영 체제의 기본 사항: 제어판, CMD 명령, VBS 스크립트 인지&lt;/p&gt;
&lt;p&gt;컴퓨터 보고서 초보자용으로 괜찮은데, 매번 사례 형태로 시스템 운영에 대한 지식을 쉽게 설명해 줘요
다양한 소프트웨어, 업계 소식 추천&lt;/p&gt;
&lt;h2 id=&#34;셋째-고등학교&#34;&gt;셋째, 고등학교
&lt;/h2&gt;&lt;p&gt;고등학교 2학년 때, &lt;strong&gt;博哥转校进入我们班，前两年计算机竞赛保送了好几位前辈&lt;/strong&gt;, 학교에서도 이 대회에 신경을 많이 써 주셨습니다
미리 갖춰진 하드웨어 기반도 있고, 미국에 있는 동문이 학교에 건물 하나를 기부했는데, 새로운 도서관이고 새로운 컴퓨터실이고, 다 그렇게 우연처럼 일어난 일이다
박선배의 해설이 더해지면 반에서 컴퓨터 전문가로 여겨질 거야&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;학력 우수자이자 컴퓨터 전문가, 다른 사람의 컴퓨터를 해킹하고 교실 감시 시스템을 무력화하는 방법을 알고 있다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;경쟁전은 어설프게나마 결승까지 올라왔고, 배우는 내용이 완전히 익숙한 것은 아니지만 기본적인 알고리즘 위주라 약간의 성과도 있었다&lt;/p&gt;
&lt;p&gt;애반은 결국 애반일 뿐이고, 여행 온 것과 다름없다&lt;/p&gt;
&lt;h2 id=&#34;네-번째-대학교&#34;&gt;네 번째, 대학교
&lt;/h2&gt;&lt;p&gt;대학교 전공 선택에 이르러서는 집에서 자동화라고 하길래 따랐는데, 사실은 강전(強電)을 하고 싶었고, 집에 돌아와서 전력 회사에 들어갔더니 전공 공부는 많이 못 했어
자기 주도 학습 능력은 전공 수업에서는 거의 없지만, 큰 규모의 컴퓨터 수업은 정말 잘 맞는다&lt;/p&gt;
&lt;p&gt;전공 수업은 빼먹고, 컴퓨터 과목은 열심히 공부하며, 매일 포럼에 맴돌았다: 《정의포럼》, 《오아이해커》
전문 학문 지식인 어셈블리, C++를 활용하여,
결국, 소짜오의 선택은 칩에 코드를 짜는 쪽이었고, 집에서도 별로 간섭하지 않았지, 내가 직접 고른 거야&lt;/p&gt;
&lt;p&gt;이때, &lt;strong&gt;第三个关键人物：堂哥&lt;/strong&gt;, 고학력으로 바이두에 입사했습니다
언니도 날 잘 아는 듯, 내가 그때는 생각할 겨를이 없었을 거라며 동생 오빠랑 얘기해 보라고 하네
향후 발전 방향을 정하고, 여름방학에 고향에 가지 않고 지도 교수님과 함께 프로젝트를 하며 경험을 쌓자
자신의 괜찮은 성적을 바탕으로 헝생전자에 입사했다&lt;/p&gt;
&lt;h2 id=&#34;다섯-졸업&#34;&gt;다섯. 졸업
&lt;/h2&gt;&lt;p&gt;여기 중요한 점이 있는데, 저는 벽을 넘고 선택 과목으로 컴퓨터 정보 검색을 들었습니다. 자료와 문제점을 빠르고 정확하게 찾는 방법을 알고 있습니다.
업무 중에 조력자가 나타나, &lt;strong&gt;硕哥&lt;/strong&gt;, 스스로 학습하고 문제 해결의 근본 원인을 파악할 시간을 주었고, 연구 개발 센터의 전문가들을 만나게 해주었다
이것도 다 기반을 닦은 거고, 심천 지사에서는 저를 대단하다고 생각하고 거래 채널 그룹의 성공적인 책임을 맡았어요&lt;/p&gt;
&lt;p&gt;여기 문제점이 있는데, 컴퓨터 운영체제, 알고리즘 등 기초 지식과 소프트웨어 공학 설계
체계적인 학습은 없었고, 모두 스스로 쌓아온 경험에 의존했다
자신의 코드 설계를 앞뒤로 부정하고, 모듈 설계에 대한 원칙이 없었으며, 일곱 번째 해가 되어서야 지쳐오기 시작했다&lt;/p&gt;</description>
        </item>
        <item>
        <title>중국 코로나19 해제</title>
        <link>https://blog.ttf248.life/ko/p/china-coronavirus-unlocking/</link>
        <pubDate>Thu, 22 Dec 2022 19:22:04 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/china-coronavirus-unlocking/</guid>
        <description>&lt;p&gt;정책 발표는 갑작스러웠고, 시행은 신속했습니다. 건강 코드 사용 중단 및 공공장소에서 더 이상 QR 코드를 확인하지 않습니다.&lt;/p&gt;
&lt;p&gt;뉴욕 타임스 중국어 웹사이트를 둘러보니 전체적으로 중국 해제에 대한 논의가 이루어지고 있었습니다&lt;/p&gt;
&lt;p&gt;정책을 평가하지 않고, 주변 상황을 기록한다&lt;/p&gt;
&lt;p&gt;정책이 제한을 풀자, 빠르게 확산되어 넓게 감염되었고, 아는 사람들 중에는 중증 환자는 없었다&lt;/p&gt;
&lt;p&gt;선전은 광저우와 붙어 있어 빠르게 발전하고 있으며, 상하이에 거주하지만 회사 위치가 외곽 지역이라 이 글을 쓰는 시점에는 아직 대규모 감염이 발생하지 않았다&lt;/p&gt;
&lt;p&gt;보호 조치가 미흡하여, 순식간에 대규모로 확산되었다&lt;/p&gt;
&lt;p&gt;대부분 비슷한 느낌이었을 것 같아요, 갑자기 풀어주는 바람에 일주일에 하나씩 정책이 바뀌더니 완전히 해금됐죠&lt;/p&gt;
&lt;p&gt;세 년 청조의 효과는 부정할 수 없고, 초연하게 받아들인다&lt;/p&gt;</description>
        </item>
        <item>
        <title>C11: sleep for vs yield</title>
        <link>https://blog.ttf248.life/ko/p/c11-sleep-for-vs-yield/</link>
        <pubDate>Tue, 20 Sep 2022 20:54:51 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/c11-sleep-for-vs-yield/</guid>
        <description>&lt;p&gt;코드를 살펴보는데, &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 猛的引入眼帘，__INLINE_CODE_1__BOLD_4&lt;code&gt;yield&lt;/code&gt;이 처음 보는 것 같고, 예전엔 눈에 띄지 않았던 것 같아요&lt;/p&gt;
&lt;p&gt;매뉴얼을 확인하지 않고 가장 먼저 떠오르는 것은 비동기 변환과 관련이 있는지인데, __INLINE_CODE_0__boost 라이브러리의 코루틴 구현에 이 단어가 사용되었으므로 여기서는 코루틴과는 상관없고, 제어 로직은 일반 스레드와 관련이 있는 것 같습니다&lt;/p&gt;
&lt;h2 id=&#34;문서&#34;&gt;문서
&lt;/h2&gt;&lt;h3 id=&#34;yield&#34;&gt;yield
&lt;/h3&gt;&lt;p&gt;이 함수의 정확성은 구현에 의존하며, 특히 사용 중인 OS 스케줄러 메커니즘과 시스템 상태에 따라 달라집니다. 예를 들어, 먼저 온(FIFO) 실시간 스케줄러(Linux의 SCHED_FIFO)는 현재 스레드를 일시 중단하고 동일 우선순위의 다른 스레드가 없는 경우 큐의 맨 뒤로 배치합니다 (다른 스레드가 없으면 yield 효과 없음).&lt;/p&gt;
&lt;h3 id=&#34;sleep_for&#34;&gt;sleep_for
&lt;/h3&gt;&lt;p&gt;지정된 sleep_duration 동안 현재 스레드의 실행을 차단합니다
이 함수는 스케줄링 지연이나 리소스 충돌로 인해 sleep_duration보다 오래 블록될 수 있습니다
표준 라이브러리는 안정적인 클럭으로 시간을 측정하는 것을 권장합니다. 구현에서 시스템 시간을 사용하면 대기 시간 또한 클럭 조정에 민감할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&#34;분석&#34;&gt;분석
&lt;/h3&gt;&lt;p&gt;두 함수 모두 현재 스레드를 더 이상 점유하지 않도록 하는 것인데, 실행 결과는 플랫폼에 따라 다를 수 있나? 여기서도 여전히 엉망진창이다. 코드를 실행해서 결과를 확인해 보자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ThinkPad 노트북(Visual Studio 커뮤니티 에디션 2022), 텐센트 클라우드 S2 표준 서버 (gcc8.5)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;실행 플랫폼&lt;/th&gt;
&lt;th&gt;함수&lt;/th&gt;
&lt;th&gt;1회/μs&lt;/th&gt;
&lt;th&gt;2회/μs&lt;/th&gt;
&lt;th&gt;3회/μs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;9872&lt;/td&gt;
&lt;td&gt;1884&lt;/td&gt;
&lt;td&gt;11302&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;119&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;sleep_for&lt;/td&gt;
&lt;td&gt;171&lt;/td&gt;
&lt;td&gt;168&lt;/td&gt;
&lt;td&gt;167&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;td&gt;102&lt;/td&gt;
&lt;td&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;운영체제 구현 방식에 따라 고정밀 슬립 모드에서는 __INLINE_CODE_0__稳定性差异巨大，如果想要高精度的休眠，使用__INLINE_CODE_1__이 더 적합합니다&lt;/p&gt;
&lt;p&gt;시간 정밀도가 __INLINE_CODE_0__일 때, 두 차이는 뚜렷하지 않다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;chrono&amp;gt;
#include &amp;lt;thread&amp;gt;
 
// 建议其他线程运行一小段时间的“忙睡眠”
void little_sleep(std::chrono::microseconds us)
{
    auto start = std::chrono::high_resolution_clock::now();
    auto end = start + us;
    do {
        std::this_thread::yield();
    } while (std::chrono::high_resolution_clock::now() &amp;lt; end);
}
 
int main()
{
    auto start = std::chrono::high_resolution_clock::now();
 
    little_sleep(std::chrono::microseconds(100));
    std::this_thread::sleep_for(std::chrono::microseconds(100));
 
    auto elapsed = std::chrono::high_resolution_clock::now() - start;
    std::cout &amp;lt;&amp;lt; &amp;quot;waited for &amp;quot;
              &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;std::chrono::microseconds&amp;gt;(elapsed).count()
              &amp;lt;&amp;lt; &amp;quot; microseconds\n&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;참조&#34;&gt;참조
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/header/thread.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qingcms.gitee.io/cppreference/20210212/zh/cpp/thread/sleep_for.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>리눅스 서버, MySQL 비밀번호 재설정</title>
        <link>https://blog.ttf248.life/ko/p/linux-server-reset-mysql-password/</link>
        <pubDate>Tue, 20 Sep 2022 14:27:35 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/linux-server-reset-mysql-password/</guid>
        <description>&lt;p&gt;유휴 상태인 텐센트 클라우드 서버가 있는데, 연말에 만료되므로 갱신할 생각은 없었고, 개발용 데이터베이스로 MySQL을 설치했습니다. 시스템 재설치 시 편하기 위해 텐센트 클라우드가 제공하는 써드파티 이미지를 선택했는데, MySQL 데이터베이스가 이미 설치되어 있었습니다. 시스템 내부에 비밀번호나 배포 경로를 설명하는 Readme 파일이 있을 줄 알았는데.&lt;/p&gt;
&lt;p&gt;텐센트 클라우드 시스템 재설치는 정말 빠르네요, 1분 정도 지나니 재설치가 완료되었다는 알림이 왔어요. 로그인하니 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 서비스가 이미 시작되어 있네요. 비밀번호를 찾아봐야겠는데, 아무리 찾아도 안 보여요. 점점 짜증나기 시작합니다.&lt;/p&gt;
&lt;p&gt;이때 생각하니 이미 서버에 접근했고 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 권한을 가지고 있으니, 방법이 있을 거야. 자료를 뒤져보니 알리바바 클라우드 포럼에 관련 글이 있네, 계속 시도해 봐야겠다.&lt;/p&gt;
&lt;h2 id=&#34;비밀번호-재설정&#34;&gt;비밀번호 재설정
&lt;/h2&gt;&lt;p&gt;설정 파일 편집&lt;/p&gt;
&lt;p&gt;다시 사용한 __直接登录数据，接来下就是正常操作了，重置&lt;code&gt;mysql&lt;/code&gt;대기 사용자 비밀번호로 원격 로그인을 허용하세요&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;USE mysql;
UPDATE user SET authentication_string = password (&#39;pass&#39;) WHERE User = &#39;root&#39;;
grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;pass&#39; with grant option;
flush privileges;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;설정 파일을 되돌리고, 데이터베이스를 재시작하면 끝&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://help.aliyun.com/document_detail/42520.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://help.aliyun.com/document_detail/42520.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>밤의 명명술</title>
        <link>https://blog.ttf248.life/ko/p/night-naming-art/</link>
        <pubDate>Thu, 11 Aug 2022 22:10:14 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/night-naming-art/</guid>
        <description>&lt;p&gt;중화 한자의 방대한 체계 속에서 “명(命)”자는 유일무이하며, 동음자조차 없다. 어쩌면 이것은 운명적으로 각자의 삶은 단 한 번뿐이며, 복제하거나 되돌릴 수 없음을 암시하는 것 같다.&lt;/p&gt;
&lt;p&gt;한가할 때쯤 晋中中文网의 랭킹을 살펴보면 《밤의 명명술》의 월표 수가 압도적으로 선두를 달리고, 2위와의 격차가 엄청나서 도저히 따라갈 엄두가 나지 않는다. 그동안은 唐家三少, 耳根 등 유명 작가들의 작품을 주로 봐왔는데, 이번에는 새로운 작가의 작품을 시도해 보며 색다른 독서 경험을 해보려 한다.&lt;/p&gt;
&lt;p&gt;8월 초까지 《밤의 명명법》의 월 티켓 판매량은 200만 장에 달하며, 2위는 8만 장으로 엄청난 격차를 보인다&lt;/p&gt;
&lt;p&gt;이 책의 문체를 평가할 만한 능력은 없지만, 십 몇 챕터를 읽어보니 이야기가 흥미진진하고 치밀하게 연결되어 있어 독자를 사로잡는다. 이렇게 높은 월표를 얻을 자격이 충분히 있다고 생각한다.&lt;/p&gt;
&lt;p&gt;흥미롭게도, “명(命)”자와 마찬가지로 “사(死)”자 역시 한자에서 동음자를 찾을 수 없는데, 이는 생명의 종결 또한 유일무이하고 대체 불가능한 의미를 내포하는 것일까요?&lt;/p&gt;</description>
        </item>
        <item>
        <title>자동화 테스트에 대한 간략한 고찰</title>
        <link>https://blog.ttf248.life/ko/p/shallow-discussion-on-automation-testing/</link>
        <pubDate>Thu, 04 Aug 2022 11:39:18 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/shallow-discussion-on-automation-testing/</guid>
        <description>&lt;p&gt;금융 거래 시스템 테스트에 대한 투자는 다른 시스템보다 훨씬 많지만, 복잡한 테스트 단계가 반복되고, __INLINE_CODE_0__은 너무 낮습니다. 프로젝트 및 인력 교체로 인해 피할 수 없는 변수가 발생하고, 흔히 A 인터페이스의 특정 필드를 수정하면 B 인터페이스 결과에 영향을 미치는 경우가 발생합니다. 버전 출시 때마다 위험이 누적됩니다.&lt;/p&gt;
&lt;h2 id=&#34;이론적-지식&#34;&gt;이론적 지식
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如何衡量自动化的价值？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자동화 테스트 사례 ROI = (수동 실행 시간) * (실행 횟수) / (개발 비용 + 유지 보수 비용)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;哪些功能需要做自动化测试？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사용자가 자주 사용하는 기능, 자주 변경되지 않는 기능에 대한 자동화 테스트 코드를 작성하는 것이 가장 효과적입니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;为什么选择这个时间点推动自动化测试？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로젝트 출시 임박 시점이 아니라 지금이 가장 적절합니다. 장거리 물은 당장의 갈증을 해소하지 못하고, 자동화는 장기적인 효과 모델입니다. 프로젝트가 &lt;strong&gt;生产环境&lt;/strong&gt;에 이미 출시되었고 안정적인 배포 주기를 맞이하고 있으므로, 지금이 가장 적합합니다.&lt;/p&gt;
&lt;h2 id=&#34;프레임-선택&#34;&gt;프레임 선택
&lt;/h2&gt;&lt;p&gt;관련 경험이 부족한 상태에서 자동화 테스트라는 업무를 맡았으니, 일반적인 시작은 다음과 같다: 검색 엔진을 열어 현재 시스템에 적용 가능한 도구와 프레임워크를 찾아 사용 설명서를 훑어보고 작업을 시작한다. 바로 적합한 도구를 찾았다면 축하한다, &lt;strong&gt;完美开局&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;먼저 잘못했다고 말씀드립니다. 관련 자료를 확인해 보니 없다는 게 아니라 프레임워크 자체가 너무 복잡하고, 배포에 필요한 리소스도 과도합니다. 초보자 입문에는 작고 간결한 것이 필요하며, 테스트팀 동료들과 상의 결과 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 자체 프레임워크를 구축하는 것이 좋다는 의견이 나왔습니다. 간단히 말해 기존 유닛 테스트 프레임워크를 활용하여 자동화 테스트 프레임워크로 묶는 방식입니다.&lt;/p&gt;
&lt;p&gt;참고할 프로젝트 디자인 아이디어: &lt;a class=&#34;link&#34; href=&#34;https://github.com/wintests/pytestDemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/wintests/pytestDemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;프레임워크가-왜-필요할까요&#34;&gt;프레임워크가 왜 필요할까요?
&lt;/h2&gt;&lt;p&gt;서비스는 개발 환경, 테스트 환경, 온라인 테스트 환경 등 다양한 배포 환경을 가지고 있으며, 프레임워크는 계층 분리 및 테스트 케이스와 데이터 분리에 역할을 합니다. 각 환경에 맞는 사례 데이터를 구성하고 공통 데이터도 지원합니다.&lt;/p&gt;
&lt;p&gt;핵심적인 논리는 자동화 활용률을 높이기 위한 것이다. 시나리오가 더 복잡해지고, 환경별 데이터가 서로 다르고 관련이 없다면, 설정 사례 데이터를 추가할 때 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 태그를 사용하여 현재 데이터가 지원하는 환경을 지정하면 된다.&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>새로운 언어를 배워야 하는 이유는 무엇인가?</title>
        <link>https://blog.ttf248.life/ko/p/why-learn-a-new-language/</link>
        <pubDate>Thu, 04 Aug 2022 11:27:30 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/why-learn-a-new-language/</guid>
        <description>&lt;p&gt;학창 시절부터 시작해서 &lt;code&gt;C++&lt;/code&gt;을 접한 지 벌써 10년이 넘었으니, 다른 프로그래밍 언어를 배울 필요가 있을까요?&lt;/p&gt;
&lt;p&gt;세련된 모듈 설계 경험은 부족하지만, 문법은 자유롭고 다른 언어를 학습하면서 더 세련된 설계를 유도할 수 있습니다&lt;/p&gt;
&lt;p&gt;도구들을 만들 때 자주 사용하게 된다&lt;/p&gt;
&lt;p&gt;설계 원칙은 하위 레이어 라이브러리든, 비즈니스 모듈 구현이든 모두 통일되어 있습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>비주얼 스튜디오 컴파일 문자집합 [번역]</title>
        <link>https://blog.ttf248.life/ko/p/visual-studio-compilation-character-set-translation/</link>
        <pubDate>Thu, 04 Aug 2022 10:51:43 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/visual-studio-compilation-character-set-translation/</guid>
        <description>&lt;p&gt;__INLINE_CODE_0__굵게_2__INLINE_CODE_1__상수 내 줄 바꿈 문자&lt;/p&gt;
&lt;h2 id=&#34;visual-studio&#34;&gt;visual studio
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;cmake&lt;/code&gt;BOLD_3&lt;code&gt;windows&lt;/code&gt;BOLD_4&lt;code&gt;utf-8&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;출처 자료에서 원리부터 시작하여 문제의 발생 원인을 상세히 설명하고 있습니다&lt;/p&gt;
&lt;p&gt;인코딩 관련해서는 __INLINE_CODE_0__有专门的编译选项__INLINE_CODE_1__BOLD_4&lt;code&gt;/execution-charset&lt;/code&gt; 두 가지 옵션으로 해결할 수 있는데, 전자는 파일 자체의 인코딩을 나타내고 후자는 컴파일 이후 문자 배열 내 바이트가 어떤 인코딩인지 나타냅니다&lt;/p&gt;
&lt;p&gt;예를 들어, 콘솔에서 한자가 정상적으로 표시된다&lt;/p&gt;
&lt;h2 id=&#34;cmake-빌드-설정-visual-studio&#34;&gt;CMake 빌드 설정 (Visual Studio)
&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;if( WIN32 )
    message( STATUS &amp;quot;Configuring trade on WIN32&amp;quot;)
    set( CMAKE_CXX_FLAGS &amp;quot;${CMAKE_CXX_FLAGS} /source-charset:utf-8 /execution-charset:gbk&amp;quot;)
endif()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/146543940&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/146543940&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>펠로시 대만 방문</title>
        <link>https://blog.ttf248.life/ko/p/pelosi-visits-taiwan/</link>
        <pubDate>Tue, 02 Aug 2022 22:57:54 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/pelosi-visits-taiwan/</guid>
        <description>&lt;p&gt;정치에 대해 모르는 척하며 논평하지 않고, 이 온라인 “축제”를 기록할 뿐입니다&lt;/p&gt;
&lt;h2 id=&#34;에세이&#34;&gt;에세이
&lt;/h2&gt;&lt;p&gt;최근의 &lt;strong&gt;唐山打人事件&lt;/strong&gt;, &lt;strong&gt;人教小学教材文化入侵事件&lt;/strong&gt;은 기억하는 사람이 얼마나 있을지 모르겠다. 뉴스 속 이런 화제는 무뎌져서 감흥이 없고, 퇴근 후 평소처럼 드라마를 보고, 그냥 구경거리로 여긴다. 경제 상황이 그렇듯, 전쟁이 발발해도 사는 건 달라지지 않는다. 정치에 대해서는 모르는 척하고 언급하지 않겠다. 인터넷상의 “광란”을 기록한다.&lt;/p&gt;
&lt;h2 id=&#34;죄송합니다-번역할-중국어-텍스트가-제공되지-않았습니다-텍스트를-제공해-주시면-번역해-드리겠습니다&#34;&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
&lt;/h2&gt;&lt;p&gt;2022년 낸시 페로시의 대만 방문은 제52대 미국 하원 의장인 낸시 페로시가 2022년 아시아 국가 순방 중 대만을 방문한 여정을 의미합니다&lt;/p&gt;
&lt;p&gt;미국 하원의장의 대만 방문은 중국 인민해방군 창건 기념일(8월 1일), 중국 공산당 20차 전국대표대회, 2022년 미국 선거 및 중화민국 지방공직선거와 시기가 가까워 중국 정부는 강력히 항의하며 해군 구축함 부대를 타이완해 북동부 해역으로 파견하고 산둥함과랴오닝함 두 개의 항공모함 전단이 동원되었습니다. 동부전구와 남부전구는 각각 동해와 남해에서 대규모 실탄 훈련을 실시했습니다. 미국은 로널드 레이건 항모전단을 타이완 해역으로 파견하여 펠로시의 방문을 경호하고, 다수의 정찰기와 공중 급유기를 주한미군 가쓰나공군기지에 배치했습니다.&lt;/p&gt;
&lt;p&gt;중국 국가主席 시진핑과 미국 대통령 조 바이든은 방문에 앞서 화상 회의를 진행했으며, 내용은 대만 문제와 관련되어 있었습니다. 대만과 국제 언론은 낸시 펠로시 의장 및 하원 대표단이 2일 타이베이 송산 공항에 도착하여 숙박 후 3일에 차이잉원 대만을 포함한 정부 고위 관계자들과 회견할 예정이라고 밝혔습니다. 일부에서는 펠로시 의장의 이번 대만 방문이 1996년 타이완 해협 미사일 위기 이후 26년 만에 새로운 타이완 해협 위기를 야기할 수 있다고 보고 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;08-11&#34;&gt;08-11
&lt;/h2&gt;&lt;p&gt;오늘로서 기본적으로 상황이 마무리되었고, 한동안 헤드라인을 장식했던 해군 훈련 관련 내용들이 많았네요. 지후도 애써서 매일 다른 방식으로 인기 게시물을 업데이트하고 있었죠. 편집자님 수고하셨습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>윈도우 플랫폼에서 폴더 크기 빠르게 통계</title>
        <link>https://blog.ttf248.life/ko/p/windows-platform-quick-folder-size-statistics/</link>
        <pubDate>Mon, 01 Aug 2022 19:54:18 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/windows-platform-quick-folder-size-statistics/</guid>
        <description>&lt;p&gt;어떻게 해야 할까? 디스크가 많고, 파일을 정리하고 싶은데, 파일이 많은 상태에서 시스템 자체의 리소스 관리자로 폴더 크기를 확인하려고 하면 너무 느려서 포기하고 싶을 정도다&lt;/p&gt;
&lt;h2 id=&#34;everything&#34;&gt;Everything
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 平台下做开发的朋友，没有亲手用过 &lt;strong&gt;INLINE_CODE_1&lt;/strong&gt; 또한 친구에게서 들었을 수도 있을 것입니다. 검색 속도는 시스템 기본 파일 탐색기보다 훨씬 빠릅니다. 시스템 수준에서 빠른 파일 인덱싱을 지원한다면, 분명히 유사한 도구를 찾아 파일 인덱스를 구축하고 파일 크기를 함께 통계적으로 산출할 수 있을 것입니다.&lt;/p&gt;
&lt;h2 id=&#34;wiztree&#34;&gt;WizTree
&lt;/h2&gt;&lt;p&gt;공식 웹사이트: &lt;a class=&#34;link&#34; href=&#34;https://www.diskanalyzer.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.diskanalyzer.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;일반 설치 모드 또는 압축 해제 후 실행&lt;/p&gt;
&lt;p&gt;빠른 속도, 다양한 데이터 표시 유형, 왼쪽은 트리 형태, 오른쪽은 파일 형식, 물론 그래픽 표현도 소프트웨어 하단에 있습니다&lt;/p&gt;
&lt;h2 id=&#34;spacesniffer-업데이트-2023년-중단됨&#34;&gt;SpaceSniffer (업데이트 2023년 중단됨)
&lt;/h2&gt;&lt;p&gt;소프트웨어 공식 웹사이트: &lt;a class=&#34;link&#34; href=&#34;http://www.uderzo.it/main_products/space_sniffer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.uderzo.it/main_products/space_sniffer/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;조작은 간단합니다. 해당 디스크를 선택하면 소프트웨어가 시각적으로 폴더 크기를 표시하는데, 크기가 클수록 이미지 내 해당 매트릭스도 커집니다. 나머지는 클릭 몇 번으로 이해할 수 있으며, 조건 필터를 입력하여 파일을 지원합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일 크기 필터링&lt;/li&gt;
&lt;li&gt;파일 날짜 필터&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/windows-platform-quick-folder-size-statistics/space_sniffer.gif&#34;
	width=&#34;960&#34;
	height=&#34;540&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;基础用法&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/windows-platform-quick-folder-size-statistics/advance.gif&#34;
	width=&#34;960&#34;
	height=&#34;540&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;高级用法&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://moe.best/software/spacesniffer.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://moe.best/software/spacesniffer.html&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>웹 페이지 스타일 시트(CSS) 복사 방법: 요소 검사</title>
        <link>https://blog.ttf248.life/ko/p/how-to-copy-webpage-css-element-inspection/</link>
        <pubDate>Sun, 31 Jul 2022 23:36:48 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/how-to-copy-webpage-css-element-inspection/</guid>
        <description>&lt;p&gt;정적인 블로그 테마는 주로 해외 템플릿을 기반으로 수정 및 조정하며, 중국어 콘텐츠의 레이아웃에 대한 고려는 충분하지 않다&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;반달 전 블로그 스타일시트를 조정했는데, 오랜 기간 백엔드 서비스 개발만 해와서 프론트엔드는 완전 초보라 할 수 있습니다. 며칠 동안 이것저것 만져봤지만 디자인이 영 마음에 들지 않았습니다. 문득 떠올라서 자주 보는 기술 블로그인 infoq나 오픈소스 중국의 레이아웃을 참고하면 어떨까 싶었습니다. 관련 요소들을 찾아봤더니 소스 코드를 보니까 머리가 엉망이 되었습니다.&lt;/p&gt;
&lt;p&gt;프론트엔드 개발자라면 여기서 웃을 수도 있겠네요&amp;hellip; 특정 요소를 찾는 것조차 모르는군요. 모르는 건 괜찮아요, 주말에 시간도 많으니 잠시 멈춰서 생각해보니, 예전에 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 크롤러를 만들 때 비슷한 걸 사용했던 것 같아요.&lt;/p&gt;
&lt;h3 id=&#34;요소-검토&#34;&gt;요소 검토
&lt;/h3&gt;&lt;p&gt;맞아요, 브라우저 자체의 요소 검사 도구로 스타일 시트를 복사하고 특정 요소를 찾기는 정말 간단한 일이죠&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요소 복사&lt;/li&gt;
&lt;li&gt;복사 outerHTML&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复制 selector&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;JS 경로 복사&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复制样式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;XPath 복사&lt;/li&gt;
&lt;li&gt;전체 XPath 복사&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>윈도우 플랫폼 편집용 초대형 파일 편집기: EmEditor (텍스트 에디터)</title>
        <link>https://blog.ttf248.life/ko/p/windows-platform-editing-large-files-emeditor-text-editor/</link>
        <pubDate>Sun, 31 Jul 2022 23:21:24 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/windows-platform-editing-large-files-emeditor-text-editor/</guid>
        <description>&lt;p&gt;상하이 국안 데이터베이스 사건은 해커 커뮤니티에서 떠들썩하게 번지고 있지만, 진실 여부는 알 수 없다. 2년 뒤에 다시 한번 살펴보자. 기존 경험을 바탕으로 로컬 소셜 엔지니어링 데이터베이스 자료를 업데이트했는데, 17.9G의 거대한 SQL 파일이 있었다. 일반적인 텍스트 편집기로는 미리 보기조차 어렵고 열기는 더더욱 불가능했다. 다른 사용자와 대화하던 중 EmEditor라는 프로그램을 언급했다.&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;공식 웹사이트: &lt;a class=&#34;link&#34; href=&#34;https://www.emeditor.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.emeditor.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;주말에 시간 내서 사용해 봤는데, 꽤 편리하고 디자인 자체가 큰 파일을 편집할 수 있게 되어 있네요. 메모리가 충분하면 파일 전체를 메모리에 로드해서 검색 및 편집 속도도 빠르고, 파일 분할 기능도 지원합니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>상하이 원앙 훠궈 폐쇄</title>
        <link>https://blog.ttf248.life/ko/p/shanghai-yuanyang-pot-closure/</link>
        <pubDate>Wed, 30 Mar 2022 23:03:27 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/shanghai-yuanyang-pot-closure/</guid>
        <description>&lt;p&gt;리더십은 며칠 전까지도 체면을 지키겠다며 상하이를 봉쇄하지 않겠다고 했고, 상하이의 중요성을 강조했습니다. 결과는 어찌 됐든 현실에 직면하거나 자신의 자리를 지키기 위해 강 건너에서 시작해, 황푸강 반대편부터 봉쇄하고, 그 다음 이쪽 강을 봉쇄했습니다.&lt;/p&gt;
&lt;h2 id=&#34;봉쇄&#34;&gt;봉쇄
&lt;/h2&gt;&lt;p&gt;어릴 때 사스(SARS)를 겪었지만 별로 기억이 나지 않는다. 관련 자료를 보니까 잠복기가 짧아서 전국적인 확산 전에 끝났나 보다. 당시 초등학생이었는데, 매일 학교에서 일찍 퇴근했고 교실에는 소독약 냄새가 항상 풍겼다.&lt;/p&gt;
&lt;p&gt;2019년 말부터 현재까지 코로나19 팬데믹이 거의 3년을 되었습니다. 외국에서 일하는 사람들은 마스크를 착용해야 할 때는 마스크를 쓰는 것에 익숙해졌습니다. 상하이의 이번 유행은 홍콩이 발원지였고, 국경을 넘어 선전으로 확산된 후, 홍콩으로부터 유입된 사례로 인해 발생했습니다. 당국은 격리 호텔의 방역 조치 미흡으로 인해 팬데믹이 확산되었다고 발표했고, 변종 바이러스는 독성은 약해졌지만 전파 속도는 빨라져 환기 시스템을 통해 확산되었습니다. 처음에는 심각하지 않았고 통제할 수 있었지만요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;사람들은 항상 자신감이 있습니다. 상하이의 지도자들도 마찬가지입니다. 그들은 우리에게 가능한 격자화된 리스크 관리와 정확한 통제를 선택할 것입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;현재 결과를 다들 보셨을 겁니다. 신규 확진이 2만 건 이상으로 누적되었고, 어쩔 수 없이 봉쇄 조치를 선택했습니다. 하지만 대외적으로는 &amp;ldquo;봉쇄&amp;quot;라는 단어를 사용하지 않았습니다. 이는 이전 기자회견에서 상하이가 봉쇄될 필요가 없다고 발표하여 마지막 체면을 지키기 위한 것이었습니다.&lt;/p&gt;
&lt;h2 id=&#34;장보기&#34;&gt;장보기
&lt;/h2&gt;&lt;p&gt;배달 산업은 인터넷이 만들어낸 신흥 산업입니다. 핵심은 누군가가 배달해줘야 하는데, 코로나19로 인해 넓은 지역이 봉쇄되면서 상가는 영업을 하지만 배달할 사람이 없어 마지막 연결고리가 끊어진 거죠. 밖에 있는 사람들은 이해를 못 할 수도 있겠지만, 국제적인 대도시인 상하이에 왜 다 같이 식료품을 사러 가는 걸까 싶을 겁니다. 생각해 보면 알 수 있습니다. 대부분은 타지에서 일하러 온 사람들이고, 렌트에 살면서 평소에는 회사 구내식당이나 식당에서 먹기 때문에 집에서 직접 요리하는 경우는 드물죠. 그런데 외부 활동이 막히면, 가능하다면 식료품을 사기 시작합니다. 이러한 봉쇄 조치가 사전 공지되지 않았고, 일상적으로 충분한 식량이나 채소를 비축해두지도 못했기 때문에 영상처럼 다 같이 식료품을 사러 가는 현상이 발생했습니다. 이런 상황에서 모이는 것은 곧바로 코로나19의 재확산으로 이어졌습니다.&lt;/p&gt;
&lt;h2 id=&#34;산업&#34;&gt;산업
&lt;/h2&gt;&lt;p&gt;IT 업계 종사자인데, 코로나 때문에 재택근무를 경험해 봤습니다. 19년도에 거의 한 달 동안 집에 있었고, 기차표 변경을 여러 번 해서 언제 상하이로 돌아갈 수 있을지 전혀 알 수 없었습니다. 식당, 관광업이나 많은 서비스 업종의 경우, 그 사람들이 지난 몇 년간 어떻게 지냈는지 상상조차 할 수 없습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>돈 벌 생각 할 때</title>
        <link>https://blog.ttf248.life/ko/p/when-you-want-to-make-money/</link>
        <pubDate>Sun, 27 Mar 2022 03:23:53 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/when-you-want-to-make-money/</guid>
        <description>&lt;p&gt;일반인들은 사회적 동물이다. 틀림없다, 너는 개인이고 동시에 직립 보행하는 동물이며 강한 사회성을 지니고 있다. 자존심과 허영심이 있으며, 사회는 끊임없이 변화하고 당신의 &lt;strong&gt;平常心&lt;/strong&gt;을 침식해 온다. 우리는 위대한 사람들, 그리고 사회와 국가를 위해 자신을 불태우려는 사람들에 대해서는 논하지 않겠다.&lt;/p&gt;
&lt;h2 id=&#34;지금의-나&#34;&gt;지금의 나
&lt;/h2&gt;&lt;p&gt;평균 임금으로 보든, 고향의 임금을 기준으로 보든, 지금 제 소득은 평균 수준을 훨씬 넘어섰는데, 무엇이 불만족스러울 수 있겠습니까?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;만 원을 벌면 백만 원을 생각하고, 백만 원을 벌면 천만 원을 생각하게 된다. 이것이 인간의 본성이며, 사람은 자신의 내면과 마주해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;뭘 보고 눈이 빨개진 걸까, 더 쉽고 빠르게 돈을 버는 방법: 짧은 동영상&lt;/p&gt;
&lt;p&gt;모두들 입사하기가 쉽지 않다는 걸 잘 알고 있습니다. 지금 보고 계신 건 짧은 영상이지만, 뒤에 이어지는 촬영 기획 및 문구 작성 과정은 보이지 않습니다. 하지만 모든 사람은 자신이 천재라고 생각하고, 이 분야에 적합하다고 느낍니다.&lt;/p&gt;
&lt;h2 id=&#34;시작하다&#34;&gt;시작하다
&lt;/h2&gt;&lt;p&gt;그렇게 많은 영상을 보니까, 여러 장면을 꼼꼼히 분석해 보면 전문적인 편집 기법과 강렬한 영화 같은 분위기가 느껴져. 즉, 그들은 상당수가 전공자 출신이라는 뜻이지. 물론 풀뿌리에서 성공하는 경우도 있지만, 일반인에게는 해당되지 않는 이야기잖아?&lt;/p&gt;
&lt;p&gt;틱톡에는 영상 제작 방법을 알려주는 영상들이 많기도 하고, 이 시점에서 정신이 번쩍 들게 되죠. 돈을 벌 수 있다면 왜 직접 하지 않고 당신에게 가르치는 걸까요?&lt;/p&gt;
&lt;h2 id=&#34;비인간적인-추천-알고리즘&#34;&gt;비인간적인 추천 알고리즘
&lt;/h2&gt;&lt;p&gt;전에 틱톡 알고리즘이 영화 클립이나 애니메이션 클립을 추천할 때 계속 보다 보니 재미있어지는데, 틱톡으로 돈 버는 방법에 대한 영상을 보려고 하니 관련 교육 영상만 끊임없이 추천해 준다. 나 역시 IT 업계에 종사하고 있는데, 이런 식으로 추천하는 사람들이 혹시 문제가 있는 건 아닐까 생각하게 된다. 내가 바보라고 생각하는 걸까? 게다가 틱톡으로 돈 버는 방법을 다양한 각도와 유형별로 계속해서 추천한다. 이 글은 새벽 3시에 쓰기 시작했는데, 사실 쓰고 싶지 않았다. 이런 상업 모델이 얼마나 오래 지속될 수 있을까? 그리고 사람들의 시간을 얼마나 더 빼앗을 수 있을까?&lt;/p&gt;
&lt;h2 id=&#34;깨닫다&#34;&gt;깨닫다
&lt;/h2&gt;&lt;p&gt;사람 가르치는 데는 이론만 앞세우고, 자기 일에는 통제도 못 하는 꼴이라 웃기지도 않아. 순수하게 기술 블로거가 아니니 일부 내용은 국내에 올리지 않았고, 여기서는 그냥 불만을 토로하는 거야. 만약 차단당한다면 어쩔 수 없지, 다른 곳을 찾아야겠지. 틱톡이 아무것도 안 했다는 건 할 수 없는 말이야. 적어도 현재 실시간 뉴스 전달이나 국가 정책 홍보에는 적극적으로 협조하고 있으니 말이지. 결국 우리나라에서는 당의 뜻에 반할 수는 없는 거잖아?&lt;/p&gt;
&lt;p&gt;지금 생각해보니 옛날 공부할 때가 떠오른다. 진정으로 인생의 의미를 찾지 못할 때는 조용히 책을 읽는 것만으로도 충분하다. 요즘 시대에 얼마나 많은 사람들이 마음을 고요히 하고 조용히 책을 읽을 수 있을까.&lt;/p&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;여기 과학 기술의 발전에 감사드려야 할 것 같습니다. 이 줄을 보고 계신다면 전체 글이 매우 구어체로 쓰여 있다는 것을 알 수 있을 겁니다. 그리고 저는 그냥 읽으면서 써 내려갔습니다. 평소에 사용하던 입력법은 소고우 입력법이었는데, 7~8년 정도 사용했습니다. 하지만 음성 입력 기능은 뭐니뭐니해도 讯飞가 전문적입니다.&lt;/p&gt;
&lt;p&gt;2022년 글의 번호가 002로 바뀌었네. 왜 두 개의 0이 붙은 걸까? 올해 글을 100개 넘게 쓰는 꿈이 있는데, 그 정도면 꿈이라고 할 수 있겠지. 글이라고 하기도 어렵고, 그냥 기록 몇 가지일 뿐이야. 나는 매일 세 번 자신을 돌아보고, 너도 뭔가 떠오르는 게 있을 거야, 그렇지?&lt;/p&gt;</description>
        </item>
        <item>
        <title>생각보다 간단해 보이는 일인데, 코드 복사 버튼을 추가하는 것</title>
        <link>https://blog.ttf248.life/ko/p/add-code-copy-button/</link>
        <pubDate>Fri, 25 Feb 2022 01:23:39 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/add-code-copy-button/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;네 시간이나 붙잡고 있었는데, 이 문장을 보고는 웃겼다. 어떻게 이렇게 오래 걸릴 수 있지? 자세히 보니 시간이 세 시간밖에 안 갔네.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이것은 2022년의 첫 번째 초안인데, 크게 복잡한 것은 아니고 제목 그대로입니다 (그때는 제가 어렸었죠). &lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;作业&lt;/a&gt;을 그냥 베껴서 즐겨찾기에 넣어두고 미루다 보니 한 달 넘게 지나서야 비로소 이 일을 기억했습니다.&lt;/p&gt;
&lt;p&gt;__INLINE_CODE_0__로 이사했을 때 플러그인이 너무 부족하다고 생각했고, 코드 복사 기능이 없어 많은 노트들을 에버노트에서 블로그로 옮기는 과정에서 코드를 복사하는 작업이 번거로워져서 블로그에 글을 쓰는 의욕을 크게 저해했습니다&lt;/p&gt;
&lt;h2 id=&#34;서론&#34;&gt;서론
&lt;/h2&gt;&lt;p&gt;원저자의 초고를 꼼꼼히 살펴보고, 일단 쭉 읽어본 뒤에 작가 소개도 확인해 봤는데, 대단한 분이시야. 칭화대 재학 중인 학부생이고, 어릴 때부터 컴퓨터와 접촉했네. 아, 잠깐만, 이 블로그부터 먼저 살펴보자. 무슨 일 하려고 했던지 기억조차 안 나. 그리고 작가의 &lt;code&gt;Github&lt;/code&gt;仓库，这个修改后的__INLINE_CODE_1__ 주제가 훨씬 낫고 기능도 많으니, 일단 관련 코드를 합쳐보자.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/add-code-copy-button/2022-02-25-02-08-19.png&#34;
	width=&#34;215&#34;
	height=&#34;150&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;344px&#34;
	
&gt; &lt;img src=&#34;https://blog.ttf248.life/p/add-code-copy-button/2022-02-25-02-08-40.png&#34;
	width=&#34;217&#34;
	height=&#34;167&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;새-기능-기사-이력-및-연관-제출-기록-확인&#34;&gt;새 기능: 기사 이력 및 연관 제출 기록 확인
&lt;/h3&gt;&lt;p&gt;효과는 괜찮은 편이야, 글 뒤쪽에 보면 알 수 있어&lt;/p&gt;
&lt;p&gt;작업하기 전에 원본 저장소의 기록을 자세히 보지 않고 간단하게 병합하면 될 줄 알았는데, 결국 많은 코드를 병합했고, 충돌도 여러 번 발생하고 무식하게 덮어썼다. 모두 프론트엔드와 렌더링 템플릿 코드인데, 내 것을 기준으로 했다.&lt;/p&gt;
&lt;p&gt;창고 주소: &lt;a class=&#34;link&#34; href=&#34;https://github.com/TianlongXiang/hugo-theme-even&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/TianlongXiang/hugo-theme-even&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;중국어의 한 문제점, &lt;strong&gt;인라인 이탤릭 3____굵게 2____인라인 이탤릭 4&lt;/strong&gt;__ 때문에 과거 링크 생성에 실패합니다. 기사 전체 과거를 생성할 때도 자동 통합 스크립트를 수정해야 하며, 현재 저장소의 모든 과거 기록을 가져오도록 해야 합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;name: Build Github
run: git config --global core.quotePath false &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; ls
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;스타일-조정&#34;&gt;스타일 조정
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;사이트 콘텐츠 폭을 조정합니다. 이전 디자인은 모바일과 PC 모두에 적합했지만, 실제로는 아무도 휴대폰으로 보지 않고 저조차도 PC로 보는 경우가 많습니다.&lt;/li&gt;
&lt;li&gt;목록 열 지원 자동 확장/축소&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;참고 코드 기록을 한 시간 반 넘게 봤는데, 복사 버튼을 어떻게 추가하는지 도통 이해가 안 된다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;시간이 흘러 한 달쯤 지나서도 이 일이 생각난다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 과제가 이해가 안 되면 다른 문제로 베끼고, 어쨌든 따라 할 수 있을 거야. 검색 결과는 꽤 예상외였는데, __INLINE_CODE_0__官方的论坛里面就有个帖子提到了如何增加复制按钮，跑过去一看，逻辑清晰。懵逼的事情来了，回到的站点一看__INLINE_CODE_1__에서 생성된 코드 블록 스타일이 자료 설명과 달라서 이 부분은 좀 복잡하니까 간단히 기록해 둔다.&lt;/p&gt;
&lt;p&gt;기본적인 프론트엔드 개발 지식이 부족해서 이해가 안 되는 부분은 브라우저를 __INLINE_CODE_0__BOLD_2&lt;code&gt;JavaScript&lt;/code&gt;켜두고, 콘솔에 로그를 확인했다. 많이 모르는 부분이 있었지만 차분히 마음을 가다듬고 논리를 천천히 분해하니 결국 해결책을 찾을 수 있었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;__INLINE_CODE_0__노드가 여러 개 있는데, 여기서 말하는 것은 단일 코드 블록이고, 테마가 자체적으로 라인 넘버를 생성하여 복사 버튼이 두 개로 나타나는 현상입니다&lt;/li&gt;
&lt;li&gt;관심 있는 주제의 코드 하이라이트 렌더링을 구현하고 싶지만, 해당 테마 설정에 익숙하지 않다&lt;/li&gt;
&lt;li&gt;코드 하이라이트 제어 설정&lt;/li&gt;
&lt;li&gt;설정 파일을 조정해도 계속 안 되고, 렌더링 결과가 예상과 다릅니다&lt;/li&gt;
&lt;li&gt;이 설정들 발견하고 자료를 다시 뒤적거리며 설정을 조정해 보는데, 일단 행 번호는 제거할게요&lt;/li&gt;
&lt;li&gt;맞춤 설정된 __INLINE_CODE_0__BOLD_2&lt;code&gt;js&lt;/code&gt; 스크립트&lt;/li&gt;
&lt;li&gt;이렇게까지 일을 벌였으니, 문득 최근에 봤던 색상 조합이 괜찮다는 생각이 들어서 버튼 스타일을 중국풍 천청색으로 바꿔보자&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:20%&#34; src=&#34;2022-02-25-02-01-22.png&#34; /&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:20%&#34; src=&#34;2022-02-25-02-01-33.png&#34; /&gt;
&lt;p&gt;네 시간이나 붙였다가, 이 문장을 보고는 웃겼다. 어떻게 이렇게 오래 걸릴 수가 있지? 마지막에 보니 시간이 세 시간이었다.&lt;/p&gt;
&lt;h2 id=&#34;참조-링크&#34;&gt;참조 링크
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://ouuan.github.io/post/from-hexo-to-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ouuan.github.io/post/from-hexo-to-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugobrasil.netlify.app/content-management/syntax-highlighting/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/configuration-markup#highlight&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gohugo.io/getting-started/configuration-markup#highlight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.dannyguo.com/blog/how-to-add-copy-to-clipboard-buttons-to-code-blocks-in-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>우리가 일평생 추구하는 것은 무엇인가?</title>
        <link>https://blog.ttf248.life/ko/p/we-exhaust-ourselves-chasing/</link>
        <pubDate>Tue, 31 Aug 2021 21:09:58 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/we-exhaust-ourselves-chasing/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;부인의 교제는 평생을 두고 굽어보고 올려다볼 일이며, 마음속에서 깨달음을 얻기도 하고, 방 안에서 말로 표현하기도 하며, 때로는 뜻을 실어 몸을 버리고 세상에 나돌기도 한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;인생은 덧없는 한 줄기 빛과 같으니, 풀잎이 봄을 맞고 시들어 사라지는 것과 같으며, 새벽의 밝음이 동쪽에서 떠서 서쪽으로 지는 것과 같습니다&lt;/p&gt;
&lt;p&gt;애써도 욕심은 많구나&lt;/p&gt;
&lt;p&gt;어릴 적 시냇가에 누워 연꽃 껍질을 벗기고, 동풍이 불면 연을 날리며, 노란 나비를 쫓아다녔다&lt;/p&gt;
&lt;p&gt;에도 곁에 버려진 포도나무 그림자를 보고 수박 심는 법을 배우고, 배불리 먹고 돌아와 저녁놀이 지나면, 방석도 벗지 않고 밝은 달빛 아래 누우네&lt;/p&gt;
&lt;p&gt;성인이 되면 금방 이름을 떨치고, 아름다운 벗과 함께하며, 돈이 끊이지 않고, 계급이 오르며, 높은 손님들이 가득하고, 밤마다 풍류를 즐기기를 희망한다&lt;/p&gt;
&lt;p&gt;늙어서도 건강하게 장수하고 싶다면, 시집온 딸과 어린 자녀를 맞이하며, 바둑 한 판, 한 친구, 술 한 병, 마당 하나로 가족의 행복을 누리며 살아가기를&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;세상 사람들이 어찌 이리 다투듯 서두르는가, 짤순간의 재물 때문일 뿐인데. 바로 그 짤순간의 재물이 세상을 근심하는 갖가지 괴로움을 덜어주니.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;대부분의 사람들은 아직 삶의 고투에 시달리고 있는데, 어디서 의미를 찾을 시간이 있을까?&lt;/p&gt;
&lt;p&gt;사실 인생은 한 번의 경험일 뿐이며, 풀과 나무, 해와 달처럼 욕망의 윤회를 경험하는 것이다&lt;/p&gt;
&lt;p&gt;삶이 덧없이 느껴지면, 장수하는 꿈은 허무하고, 광대한 바다 속 한 알 모래와 같다고 생각하며, 내 삶의 짧음에 슬퍼하고, 양쯔강의 영원함을 부러워한다. 하지만 삶을 깨달으면 현재를 즐기고, 주어진 것에 만족하며, 늙음이 다가오는 줄조차 모른다.&lt;/p&gt;
&lt;p&gt;돈과 명예를 좇을 수도 있고, 시와 술과 차를 추구할 수도 있으며, 강가의 맑은 바람을 좇을 수도 있고, 산 위의 밝은 달을 추구할 수도 있다&lt;/p&gt;
&lt;p&gt;결과에 지나치게 집착할 필요는 없어요, 결국 사라질 텐테니까요&lt;/p&gt;
&lt;p&gt;평생을 바쳐 세상에 왔으니, 가능한 한 세상의 희로애락과 기쁨과 슬픔, 탄생과 노쇠와 질병과 죽음을 경험하리라&lt;/p&gt;
&lt;p&gt;이 말, 큰 물고기 네条꼬리 정말 좋다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;우리 인생은 짧으니, 용감하게 사랑하고, 산을 오르고, 꿈을 좇아보자. 답이 없는 일들이 많으니, 주저하지 말고 해보는 것이 좋겠다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《란정집서》와 《적벽부》를 아주 좋아합니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;매 단석인의 흥감을 깨달을 때면, 마치 한 몸에 합쳐진 듯하고, 문장을 마주할 때마다 탄식하지 않는 일이 없었으니, 그 뜻을 마음속에 담기 어렵다. 진실로 인생과 죽음은 허황되고, 평등한 수명을 꾀하는 것은 어리석은 짓이다. 후세는 현재를 바라보는 듯, 현재는 과거를 바라본다. 슬프도다!&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>증권 코드 특별 형식 설명</title>
        <link>https://blog.ttf248.life/ko/p/interactive-brokers-stock-code-format-explanation/</link>
        <pubDate>Mon, 30 Aug 2021 17:35:59 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/interactive-brokers-stock-code-format-explanation/</guid>
        <description>&lt;p&gt;흔하지 않지만, 시간이 지나면 분명히 만날 수 있습니다. 관련 주식 코드: 버크셔&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;일부 주식 코드 이름에 &lt;code&gt;.&lt;/code&gt;BOLD_2&lt;code&gt;Fix&lt;/code&gt;이 포함된 경우, IB로 보고할 때 주식 코드 이름을 특정 방식으로 변환해야 합니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BRK/B -&amp;gt; BRK B&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;티저트레이션에 대한 경우, 변환 규칙은 고정되어 있어 코딩으로 구현할 수 있습니다. 규칙이 고정되지 않은 경우에는 일반적으로 시스템 내부에 해당 매핑 관계를 저장하고, 업무 담당자가 주기적으로 업데이트합니다.&lt;/p&gt;
&lt;h2 id=&#34;참조-링크&#34;&gt;참조 링크
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ibkr.info/article/462&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How do I enter the symbol for Berkshire Hathaway Class B shares onto TWS?&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>방황했다</title>
        <link>https://blog.ttf248.life/ko/p/lost-and-confused/</link>
        <pubDate>Thu, 26 Aug 2021 18:01:06 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/lost-and-confused/</guid>
        <description>&lt;p&gt;자주 인생의 어느 순간, 사람은 길을 잃고 자신이 무엇을 원하는지 알 수 없게 되며, 일상적인 업무 속에서 일에 대한 의미를 찾는 것을 점점 잊게 됩니다. 졸업했을 때 뜨거운 열정으로 가득했던 마음을 떠올리면, 그 때는 망설임 없이 코드를 쓰고 사람들의 눈길을 사로잡는 멋진 코드를 만들고 싶다고 말했습니다. 하지만 지금은 업무 관련 일들을 더 많이 접하게 되었고, 이는 산업 발전의 혜택 덕분입니다.&lt;/p&gt;
&lt;p&gt;삶의 관점에서는 아직 결혼과 출산, 안정적인 가정을 꾸리는 일들을 생각 범위에 넣지 않고 있어요. 머릿속이 거의 비어 있는 상태인데다, 그저 현재를 즐기는 데만 몰두하고 있죠. 주말에는 조용히 게임을 하곤 하고, 하루 종일 집에서 칩거하며 제 작은 세상에 빠져드는 걸 좋아해요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;인생을 살아가면서, 결국 스스로 열정을 가지고 몰두할 일이 있어야 한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;집-사기&#34;&gt;집 사기
&lt;/h2&gt;&lt;p&gt;몇 년 전에는 무조건 돈을 모아 내 집을 사야겠다고 생각하며 매일 발품을 팔았지만, 집값 폭등을 보며 처음의 불안과 애타는 마음이 결국 무감각해졌고, 집을 산들간에 무거운 짐을 지게 되는 것 같아 포기했습니다&lt;/p&gt;
&lt;h2 id=&#34;돈을-모으다&#34;&gt;돈을 모으다
&lt;/h2&gt;&lt;p&gt;처음에는 돈을 모으는 것이 강력한 데스크탑 PC를 맞추거나, 오랫동안 갖고 싶었던 카메라를 구입하거나, 즉흥적으로 떠나는 여행과 같은 작은 목표를 달성하기 위한 것이었습니다. 하지만 이제 저는 돈을 모으는 것에 대해 좀 더 무심하게 대하고, 일상적인 지출에 대해 크게 걱정하지 않고, 먹고 싶은 음식이 있으면 먹으러 가고, 새로운 것에 대해서도 과감하게 시도합니다.&lt;/p&gt;
&lt;h2 id=&#34;집에-가세요&#34;&gt;집에 가세요
&lt;/h2&gt;&lt;p&gt;결국, 가장 갈망했던 것은 집으로 돌아가 가족과 함께하는 평범한 일상이었음을 깨달았다. 특별한 일을 할 필요 없이, 그 익숙한 공간에서 따뜻함과 평온함을 느끼는 것만으로도 충분했다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>홍콩 주식 선물 기본 개념</title>
        <link>https://blog.ttf248.life/ko/p/hong-kong-futures-basics/</link>
        <pubDate>Wed, 18 Aug 2021 10:54:50 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/hong-kong-futures-basics/</guid>
        <description>&lt;p&gt;금융 시장의 끊임없는 변화에 따라 투자자들은 더 효과적인 투자 도구를 통해 투자 수익을 높이는 것을 모색하기 시작했습니다. 이러한 투자자의 요구에 부응하고자 홍콩거래소는 일련의 주식 선물 계약을 출시했는데, 이 계약들이 상장된 주식은 홍콩거래소의 전액 출자 자회사인 홍콩합병증권유한회사의(홍콩연결) 시장에서 높은 거래량과 활발한 거래를 보입니다. 주식 선물을 투자함으로써 투자자는 개별 상장 기업의 실적에 참여하는 동시에 파생상품 시장이 제공하는 공매도 및 레버리지 효과 등의 편의성을 누릴 수 있습니다.&lt;/p&gt;
&lt;p&gt;주식 선물은 해당 산업의 대표성을 띠므로, 투자자는 전체 주식 시장에 대한 전망과 비교하여 특정 산업의 성과가 더 좋을 것으로 예상되면 해당 산업의 주식 선물을 선택할 수 있습니다&lt;/p&gt;
&lt;h2 id=&#34;기본-정의&#34;&gt;기본 정의
&lt;/h2&gt;&lt;p&gt;증권 선물 계약은 특정 날짜에 특정 가격(약정가격)으로 일정한 수량의 주식과 동일한 가치를 지닌 금융 상품을 사고파는 합의입니다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有股票期货合约都以现金结算，合约到期时不会有股票交收。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;계약-만료&#34;&gt;계약 만료
&lt;/h3&gt;&lt;p&gt;계약 만료 시, 계약 성립 가격과 최종 정산 가격의 차이에 계약 승수(multiplier)를 곱한 이익/손실 금액은 계약 보유자의 보증 계좌에서 공제됩니다&lt;/p&gt;
&lt;p&gt;최종 결제 가격은 관련 주식의 최종 거래일 당일 홍콩 증권 거래소에 보고된 공식 종가입니다&lt;/p&gt;
&lt;p&gt;만약 주식 선물 투자자가 계약 만료 전에 포지션을 청산하고자 한다면, 기존에 공매도했던 투자자는 선물 계약을 매수하고, 매수한 투자자는 선물 계약을 매도하면 된다&lt;/p&gt;
&lt;h3 id=&#34;보증금&#34;&gt;보증금
&lt;/h3&gt;&lt;p&gt;선물 거래를 할 때, 매수 및 매도 양측은 계약 이행을 보장하기 위해 기본 증거금을 먼저 납부해야 합니다. 청산소는 매일 시장 마감 후 미결제 계약의 손익을 시장 가격으로 계산하여 투자자의 증거금 계좌에서 차감합니다. 불리한 시장 상황으로 인해 투자자가 손실을 입어 증거금이 규정된 수준 이하로 떨어지면, 거래소는 특정 기간 내에 추가 납부를 요구하여 증거금을 원래 기본 증거금 수준으로 유지하도록 합니다(보충 증거금).&lt;/p&gt;
&lt;h2 id=&#34;장점&#34;&gt;장점
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;거래 수수료가 저렴합니다. 주식 선물 계약은 수천 주의 주식 가치와 동등하며, 계약 매매 시 발생하는 수수료는 계약 건수에 따라 달라지므로 거래 비용은 계약 가치에 비해 매우 낮습니다.&lt;/li&gt;
&lt;li&gt;공매도 주식 거래가 더 편리해졌습니다. 투자자들은 공매도 주식 선물 계약을 통해 하락장세에서 이익을 얻을 수 있습니다.&lt;/li&gt;
&lt;li&gt;증시 유동성 확보를 위해 홍콩 거래소는 지정된 가격 범위 내에서 시장 조성자가 동시에 매수 및 매도 호가를 제시하여 주식 선물 시장의 유동성을 유지하도록 규정하고 있습니다&lt;/li&gt;
&lt;li&gt;레버리지 효과: 투자자는 선물 계약의 일부 금액만을 지불하면 주식 및 선물 거래를 더욱 비용 효율적으로 할 수 있습니다&lt;/li&gt;
&lt;li&gt;해외 투자자의 외환 위험을 줄이기 위해: 주식 선물 계약은 해외 투자자가 현지 우량주에 투자할 수 있는 경로를 제공합니다. 주식 선물 매매는 계약 전체 가치 대신 증거금만 납부하므로, 해외 투자자가 감수해야 할 외환 위험을 크게 낮춥니다.&lt;/li&gt;
&lt;li&gt;전자 거래 시스템을 통한 매매: 주식 선물 계약은 거래소의 전자 거래 시스템을 통해 매매됩니다. 모든 매매 주문은 가격 및 시간 순서대로 체결되며, 즉시 매수 가격, 매도 가격 및 체결 가격을 표시하여 시장 투명성을 극대화합니다.&lt;/li&gt;
&lt;li&gt;중개 회사에서 이행 보증을 제공합니다. 주식 및 선물 계약은 홍콩 선물 청산 공사(중개 회사)가 등록, 청산하고 이행을 보증합니다. 중개 회사가 모든 미결제 계약의 상대방이므로 거래소 참여자는 상대 위험을 감수할 필요가 없습니다. 그러나 보증 범위는 거래소 참여자의 고객에 대한 재정적 책임은 포함하지 않으며, 투자자는 증거금사를 선택할 때 신중해야 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;장정-제도&#34;&gt;장정 제도
&lt;/h3&gt;&lt;p&gt;시장 참여자는 개별 주식 선물에 시장 조성자로 등록하여 지정된 최대 스프레드 내에서 매수 및 매도 호가를 동시에 제시할 수 있습니다. 거래소 참여자와 그들의 고객은 개별 주식 선물에 시장 조성자가 등록되어 있지 않은 경우, 매매가 시장 호가를 기준으로 이루어질 수 있음을 유의해야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;주식-및-선물-거래의-위험&#34;&gt;주식 및 선물 거래의 위험
&lt;/h2&gt;&lt;p&gt;주식 선물은 고위험 투자이며, 매매로 인해 발생한 손실이 증거금보다 클 경우 추가 증거금 납부가 필요할 수 있습니다. 증거금 납부 불능 시에는 포지션 청산이 이루어질 수 있으며, 이 때 발생하는 모든 손실은 본인이 부담합니다. 따라서 주식 선물 거래의 위험성을 명확히 인지하고 자신에게 적합한지 신중하게 고려해야 합니다. 거래 전에는 재정 상황과 투자 목표를 고려하여 증권사 또는 금융 자문가와 상담 후 계약 매매 여부를 결정하는 것이 좋습니다.&lt;/p&gt;
&lt;h2 id=&#34;주석-조정&#34;&gt;주석 조정
&lt;/h2&gt;&lt;p&gt;주식회사가 유상증자나 현금배당 등의 방식으로 자본 구조를 변경할 경우, 순자산가치 또는 효력 발생 시 주가가 변동될 수 있으며, 이로 인해 미결제약정도 영향을 받을 수 있습니다&lt;/p&gt;
&lt;p&gt;다른 조건이 동일하다면 주주가 보유한 포트폴리오 가치는 청산일 이후에도 변하지 않지만, 선물 계약에 대한 매수자나 보유자에게는 상황이 다릅니다. 선물 계약에서 적절한 조정이 이루어지지 않는 한 말입니다. 약정 가격을 변경하지 않고 주식 선물 계약의 곱수를 그대로 유지하면, 주가 조정은 주식 선물 포지션 가치에 부당하고 불공정한 영향을 미칠 것입니다.&lt;/p&gt;
&lt;p&gt;결제소는 공정한 선물 계약 가치를 유지하는 원칙에 따라 비율을 조정하며, 중대한 변화가 발생할 경우에만 조정합니다. 홍콩 거래소는 조정 세부 사항을 발표하고, 거래소 참여자는 고객에게 변경 사항을 알려야 합니다.&lt;/p&gt;
&lt;h2 id=&#34;증권-선물-계약-개요&#34;&gt;증권 선물 계약 개요
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/hong-kong-futures-basics/%E8%82%A1%E7%A5%A8%E6%9C%9F%E8%B4%A7%E5%90%88%E7%BA%A6%E6%A6%82%E8%A6%81.png&#34;
	width=&#34;1416&#34;
	height=&#34;632&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;股票期货合约概要&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;537px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;정보-제공업체-코드&#34;&gt;정보 제공업체 코드
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/hong-kong-futures-basics/%E8%B5%84%E8%AE%AF%E4%BE%9B%E5%BA%94%E5%95%86%E4%BB%A3%E7%A0%81.png&#34;
	width=&#34;1418&#34;
	height=&#34;820&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;资讯供应商代码&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;415px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
&lt;a class=&#34;link&#34; href=&#34;https://www.hkex.com.hk/-/media/HKEX-Market/Products/Listed-Derivatives/Single-Stock/Stock-Futures/Stock-Futures-Information-Sheets/HKEX_Stock_Futures_SC.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HKEX_Stock_Futures_SC.pdf&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>자본 독점과 온라인 교육 산업의 종말</title>
        <link>https://blog.ttf248.life/ko/p/capital-monopoly-and-the-fall-of-online-education/</link>
        <pubDate>Wed, 28 Jul 2021 14:59:08 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/capital-monopoly-and-the-fall-of-online-education/</guid>
        <description>&lt;p&gt;최근 2거래일 동안 주식 시장이 크게 하락하면서, 새로 진입한 투자자들이 시장의 위험을 실감했습니다. 우리나라는 곧 고령화 단계에 접어들 예정이며, 출산율 데이터는 참담합니다. 관련 전문가들의 예상보다 감소 폭이 훨씬 더 크고, 출산율 저해 요인에 대한 산업 분야를 향해 강력하게 대응할 것입니다.&lt;/p&gt;
&lt;h2 id=&#34;학생-부담-경감&#34;&gt;학생 부담 경감
&lt;/h2&gt;&lt;p&gt;90년대에 태어난 우리들은 널리 다니는 학원이나 과외 없이 방과 후에는 마음껏 뛰어놀았는데, 첫째는 집안 환경이 허락하지 않았고, 둘째는 당시 과외 업체들이 브랜드 이미지를 구축하기 전이었기 때문이다. 불과 이십 년 만에 K12 교육의 자본화가 시작되었고, 猿辅导와 같은 온라인 과외 업체들이 등장하여 자본의 지원을 받아 우수한 인력을 모아 명성 있는 과외 학원들을 만들어냈다. 천문학적인 비용에도 불구하고 부모님의 열기는 막을 수 없었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;도시화 과정에서 많은 부모님들이 독서를 통해 가난한 환경을 벗어나 계층 상승을 이루셨습니다. 직장 생활로 바쁘셔서 아이를 제대로 돌볼 시간이 부족하고, 자신들도 경쟁에 지쳐 다른 아이들보다 뒤처지는 것을 원하지 않습니다. 적절한 학력이 없으면 평범한 가정에서 현재의 계층을 유지하거나 다시 더 높은 계층으로 올라가기 어렵습니다. 직업 고등학교 진학은 현재 사회 환경에서 계층 하락으로 이어질 수 있다고 생각하여 대부분의 부모님들이 받아들일 수 없습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;왜 과외 수업이 생기고, 학부모들이 왜 과외를 필요로 하는지 되돌아보면, 교과서 지식과 예제는 쉽게 이해할 수 있지만 많은 과목은 범위가 넓고 피상적인 개념에 그치는 경우가 많습니다. 인재 선발 시스템에는 어느 정도의 차별성이 필요하며, 이는 모순을 야기합니다. 시험 문제가 단순히 교과서 지식을 벗어나지 못하면 선별 효과를 내기 어렵고, 수평적, 수직적으로 확장해야 합니다. 이러한 내용은 교실에서 선생님이 다루기 어려운 부분이며, 이 공간의 존재가 과외 수업을 위한 토양을 제공하는 것입니다.&lt;/p&gt;
&lt;p&gt;파일 내용은 방대하며, 30개 세부 조항이 여러 측면을 규정하고 있습니다. 안내 문서 개요 요약:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;과제량과 시간을 전면적으로 줄여 학생들의 과도한 학습 부담을 덜어준다&lt;/li&gt;
&lt;li&gt;학교 방과후 서비스 질을 향상하여 학생들의 다양한 요구를 충족시킨다&lt;/li&gt;
&lt;li&gt;엄격한 규제와 관리를 통해 교외 사교육 활동 전반을 규정한다&lt;/li&gt;
&lt;li&gt;교육 및 교수 품질을 대폭 향상시켜 학생들이 학교에서 충분히 배우고 성장하도록 보장한다&lt;/li&gt;
&lt;li&gt;강화된 지원 및 보장 능력 향상&lt;/li&gt;
&lt;li&gt;세심하게 조직하고 실행하여 실질적인 성과를 거두도록 노력한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;엘리트-교육&#34;&gt;엘리트 교육
&lt;/h2&gt;&lt;p&gt;교육 업계에는 또 다른 현상이 있는데, 사립 중학교가 점점 늘어나는 동시에 공립학교의 우수 자원이 부족해지고 있습니다(파생된 학군 주택). 다양한 규모의 교육 그룹들은 높은 연봉으로 우수 교사들을 영입하고 양질의 교육 환경을 구축하여 점차 각자의 브랜드를 구축합니다. 가장 유명한 곳은 &lt;strong&gt;衡水模式&lt;/strong&gt;입니다. 고향 평균 회사 급여는 3천만 원 정도인데, 뛰어난 사립 초등학교는 학비가 9천만 원에서 1억 원까지 합니다. 교육 그룹은 선순환을 형성하는데, 수업료가 비싸더라도 교사가 뛰어나고 학생들의 성적이 좋으니, 수업료를 올리더라도 학부모들은 자녀를 보내려 합니다. 공립학교의 자원(교사) 역시 점차 사립학교로 유입되어 결국 질 낮은 교육이라는 용어의 대명사가 됩니다.&lt;/p&gt;
&lt;h2 id=&#34;알고리즘-착취&#34;&gt;알고리즘 착취
&lt;/h2&gt;&lt;p&gt;데이터에 따르면, 메뚜안과 계약한 라이더는 거의 4백만 명에 달하며, 활동적인 라이더는 40~50만 명 정도입니다. 많은 사람들이 이 일로 생계를 유지하고 있지만, 끊임없는 알고리즘은 배달 시간을 압박하여 사람을 측정 가능한 단위로 환산하고 알고리즘 계산에 투입하며, 지속적으로 배달원의 한계점을 탐색합니다. 스스로를 매우 똑똑하다고 생각하지만, &lt;strong&gt;违背人性，服务资本&lt;/strong&gt; . 시장은 여기 있습니다. 모두가 잘 협력하여 지속 가능한 방식으로 운영해야 합니다. 경쟁적인 방식이 아닌, &lt;strong&gt;搞垄断、搞特权，资本主义的玩法，肆意的野蛮的生长终将落幕&lt;/strong&gt; 을 위한 것입니다.&lt;/p&gt;
&lt;h2 id=&#34;주식-변동성&#34;&gt;주식 변동성
&lt;/h2&gt;&lt;p&gt;2021년 7월 24일, 신동방을 대표하는 교육주가 다이빙 쇼를 선보였고, 미증시 호황 속에서 하이브로 이어졌다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;우리나라는 점차 고령화 사회로 접어들고 있으며, 각종 인구 관련 문제에 영향을 미치는 사회 현상들은 반드시 개선되어야 합니다. 또한 독점과 과로를 조장하는 인터넷 기업들은 벌금을 받았고, 자본이 집중된 교육 산업 역시 규제 대상이 되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;자본화가 금지되면서 교육 산업의 기업 공개 및 자금 조달을 일괄적으로 거부당했고, 비판 여론이 쏟아지고 있다&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;절단된 신동방&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/capital-monopoly-and-the-fall-of-online-education/%E6%96%B0%E4%B8%9C%E6%96%B9%E8%82%A1%E4%BB%B7.png&#34;
	width=&#34;1840&#34;
	height=&#34;702&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;腰斩的新东方&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;629px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;폭락한 메이퇀&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/capital-monopoly-and-the-fall-of-online-education/%E6%96%B0%E4%B8%9C%E6%96%B9%E8%82%A1%E4%BB%B7.png&#34;
	width=&#34;1840&#34;
	height=&#34;702&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;暴跌的美团&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;262&#34;
		data-flex-basis=&#34;629px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;참조-링크&#34;&gt;참조 링크
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.
죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>혼돈 엔지니어링</title>
        <link>https://blog.ttf248.life/ko/p/chaos-engineering/</link>
        <pubDate>Wed, 28 Jul 2021 14:35:07 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/chaos-engineering/</guid>
        <description>&lt;p&gt;시스템 안정성 테스트를 위한 시스템 파괴 모드&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;p&gt;국내 인터넷 업계는 늘 새로운 것을 만들어내려고 하고, 가끔 용어를 들어도 뭔지 떠올리기 어려운 경우가 많다&lt;/p&gt;
&lt;p&gt;부분적으로 기사를 봤는데, 혼돈 엔지니어링 초기 정의는 비교적 받아들이기 쉬웠다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;혼돈 엔지니어링의 초기 탐색은 사실 업계에서 꾸준히 있어 왔으며, 장애 테스트나 재해 훈련과 같은 형태로 존재했습니다. 하지만 마이크로서비스 아키텍처의 발전과 분산 시스템의 규모가 커짐에 따라 혼돈 엔지니어링이 부상하기 시작하며 점점 더 중요해지고 있습니다. 넷플릭스가 혼돈 엔지니어링 개념을 공식적으로 제안하면서 관련 이론도 빠르게 풍부해졌고, 넷플릭스의 실증은 안정성 분야에서 혼돈 엔지니어링이 갖는 엄청난 의미를 증명했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;참조-링크&#34;&gt;참조 링크
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>컨테이너 일시 중지</title>
        <link>https://blog.ttf248.life/ko/p/kubernetes-pause-pod/</link>
        <pubDate>Mon, 12 Jul 2021 11:23:09 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/kubernetes-pause-pod/</guid>
        <description>&lt;p&gt;배포 컨트롤러는 Kubernetes 클러스터에서 매우 중요한 기능인 Pod의 수평 확장 및 축소 기능을 제공합니다. 이 기능은 기존 클라우드 시대 플랫폼에 필수적인 역량입니다.&lt;/p&gt;
&lt;p&gt;비즈니스 시나리오에서 데이터베이스 데이터를 수정하고, 조정 후 Pod 노드를 재시작해야 합니다. 하지만 Pod 실행 중에 계속해서 테이블 필드를 수정하므로, 일시적으로 애플리케이션의 테이블 업데이트를 중단한 다음 데이터를 조정하고 Pod를 복원해야 합니다.&lt;/p&gt;
&lt;p&gt;배포 삭제 외에 유사한 일시 중지 효과를 내는 다른 방법이 있을까요?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl scale --replicas=0 deployment/&amp;lt;your-deployment&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;답을 보기 전에는 많은 사람이 상상도 못했을 텐데, 보니까 미소를 지어지네. 머리는 아직 안 돌아가고, 여전히 프로세스를 직접 조작하던 시대에 머물러서, 비즈니스 프로세스를 바로 제어하려 하는 걸 보니 말이야.&lt;/p&gt;
&lt;h2 id=&#34;참조-링크&#34;&gt;참조 링크
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/54821044/how-to-stop-pause-a-pod-in-kubernetes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;how to stop/pause a pod in kubernetes&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>기금 및 고수익 자산 관리</title>
        <link>https://blog.ttf248.life/ko/p/fund-and-fixed-income-wealth-management/</link>
        <pubDate>Fri, 09 Jul 2021 11:27:06 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/fund-and-fixed-income-wealth-management/</guid>
        <description>&lt;p&gt;90년대에 태어난 우리 세대에게 2008년 금융 위기는 별다른 느낌이 없었고, 어렸고 재테크할 나이가 아니었으니까. 2015년의 강세장은 웅장하게 시작했지만, 역시나 국가가 시장을 구하기 위해 개입했다. 동시에 이로 인해 펀드라는 개념이 일반인의 시야에 들어왔다.&lt;/p&gt;
&lt;h2 id=&#34;알리바바와-알리페이&#34;&gt;알리바바와 알리페이
&lt;/h2&gt;&lt;p&gt;알리페이는 알리바바 산하의 자연스러운 트래픽 유입구로서, 처음부터 결제 도구로 포지셔닝되었으며, 펀드 구매 시 대부분의 사람들이 알리페이를 선택했습니다. 알리페이는 펀드 판매를 일반 쇼핑처럼 만들었고, 2019년부터 시작된 소규모 강세장과 펀드 매니저들의 협력은 근본적으로 코로나19로 인한 통화량 급증에 기인합니다. 투자한 사람들은 모두 돈을 벌었고, 투자하지 않은 사람들도 부러움을 느끼며 뛰어들었습니다. 신규 펀드의 규모가 100억 원을 돌파하는 속도가 점점 빨라지고 있으며, 주부들이 펀드를 구매하기 시작하면서 천억 규모의 펀드도 머지않아 가능해질 것입니다.&lt;/p&gt;
&lt;p&gt;알리바바의 펀드 판매 플랫폼이 인기를 얻기 전에는 일반적인 사람들이 펀드를 접할 기회가 은행에 돈을 맡길 때였고, 지점장은 다양한 재테크 상품을 적극적으로 소개했습니다. 하지만 인터넷의 포장과 홍보 페이지 안내, 그리고 펀드 판매 기관이 지불하는 터무니없는 광고비 때문에 알리페이가 제공하는 펀드 광고는 합리성을 벗어났습니다.&lt;/p&gt;
&lt;p&gt;제시된 상승폭 데이터에서 최근 3년 수익률만 표기하고, 기존 펀드는 연평균 수익률만 기재한 이유가 무엇입니까? 매년 평균 수익률을 별도로 기재하지 않는 이유는 계산이 어렵기 때문인가요? 아니면 데이터가 좋지 않아 고객의 구매를 유도하기 어려울 것이기 때문인가요?&lt;/p&gt;
&lt;h2 id=&#34;고정-수입-자산-관리&#34;&gt;고정 수입 자산 관리
&lt;/h2&gt;&lt;p&gt;중국은 아직 마이너스 금리 시대에 접어들지 않았고, 은행 예금과 국채가 가장 안전한 고수익 상품입니다. 순 채권 펀드도 괜찮습니다. 중국의 평균 임금을 확인하려면 각 지역 통계청에서 발표하는 데이터를 참고하시면 됩니다. 필자는 자산 규모 200만 위안, 연화 수익률 4% 환산 시 대부분 도시의 평균 임금보다 매년 더 높은 수익을 얻는 간단한 시나리오를 제시합니다.&lt;/p&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;p&gt;개인적인 경험에서 더 많은 이야기를 할 수 있지만, 더 자세히 알고 싶다면 경제 관련 서적을 직접 찾아보는 것을 추천합니다. 맹목적으로 따르지 마세요. 평범한 가정이라면 재무의 핵심은 가치 보존이며, 위험한 투자를 통해 부자가 되는 꿈을 꾸는 것이 아닙니다.&lt;/p&gt;
&lt;p&gt;큰아버지가 늘 하시는 말씀:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;적절한 시간에 적절한 일을 해야 가치가 가장 크다. 책을 읽을 때는 열심히 읽고 좋은 학위를 받는 것이 전단지를 나눠 돈을 버는 것보다 낫다. 졸업 직후에는 성실히 일해야 임금 인상이 풍부한 보상을 가져다준다. 결혼할 때에는 집안을 돌보는 법을 배워야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;관심 있는 분들은 이 연설문 한번 보시고, 시간이라는 것에 대한 답을 찾으려면 많은 책을 읽어야 하는데, 본문에 텍스트 원본이 있습니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>증권사: 거래 중단</title>
        <link>https://blog.ttf248.life/ko/p/interactive-brokers-trading-interruption/</link>
        <pubDate>Tue, 22 Jun 2021 10:51:59 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/interactive-brokers-trading-interruption/</guid>
        <description>&lt;p&gt;거래 중단이란 거래가 실행되었고 IB가 거래소로부터 실행 정보를 받은 후, 거래소가 어떤 오류(예: 가격, 전자 처리 과정, 명백한 오류 등)가 발생했다는 것을 인지하고 해당 거래를 중단(취소)하기로 결정하는 것을 의미합니다. 이 과정은 전적으로 거래소에서 결정되고 통제됩니다.&lt;/p&gt;
&lt;p&gt;A busted traderefers to a situation where an execution occurs and IB receives the execution messagefrom the exchange. The exchange then realizes some type of error (Pricing,electronic, obvious error, etc) and rules to bust (cancel) the trade. Theexchange makes these rulings entirely on their own.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;거래 관점에서 볼 때 홍콩 증권 거래소의 거래 취소 및 거래 수정에 해당합니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>거래소 인터페이스 문서 모음</title>
        <link>https://blog.ttf248.life/ko/p/exchange-interface-documentation-summary/</link>
        <pubDate>Wed, 27 Jan 2021 14:35:21 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/exchange-interface-documentation-summary/</guid>
        <description>&lt;p&gt;금융 소프트웨어 개발 5년째, 다루는 것이 대부분 거래소 인터페이스 문서이고, 익숙한 것도 홍콩증권거래소 문서입니다. 최근 중화통(中華通) 업무를 처리하면서 중화통 관련 자료를 확인하기 위해 상해증권거래소와 선전증권거래소 자료를 참고했습니다.&lt;/p&gt;
&lt;h2 id=&#34;홍콩증권거래소&#34;&gt;홍콩증권거래소
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;
&lt;h3 id=&#34;일반적으로-사용됨&#34;&gt;일반적으로 사용됨
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;링크_0__증권&lt;/li&gt;
&lt;li&gt;링크_0__증권&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;시장-데이터-인터페이스-문서-홍콩-주식--중화-통과&#34;&gt;시장 데이터 인터페이스 문서: 홍콩 주식 + 중화 통과
&lt;/h3&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;
&lt;p&gt;자주 묻는 질문, 개발 매뉴얼 및 과거 시장 데이터 인터페이스 문서는 검색창을 통해 다운로드 주소를 얻을 수 있으며, 과거 버전 번호도 검색할 수 있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&#34; &gt;HKEX_OMDC_Binary_Interface_Specifications_v_1,-d-,32c.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;HKEX_OMDC_Developers_Guide_1_11.pdf&#34; &gt;HKEX_OMDC_Developers_Guide_1_11.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMDC_Connectivity_Guide_Securities_Market-_Index_datafeed_%28v2_2%29.pdf&#34; &gt;OMDC_Connectivity_Guide_Securities_Market-&lt;em&gt;Index_datafeed&lt;/em&gt;(v2_2).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Interface_Specification_China_Connect_Securities-%28v1-3%29.pdf&#34; &gt;OMD_Interface_Specification_China_Connect_Securities-(v1-3).pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Connectivity_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Connectivity_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;OMD_Developers_Guide_China_Connect_Securities.pdf&#34; &gt;OMD_Developers_Guide_China_Connect_Securities.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;호가-인터페이스-문서-홍콩주식--중화통&#34;&gt;호가 인터페이스 문서: 홍콩주식 + 중화통
&lt;/h3&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;a class=&#34;link&#34; href=&#34;HKEX_OCG_FIX_Trading_Interface_Specifications_v2_2-%28clean%29.pdf&#34; &gt;港股FIX协议接口文档 PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(&lt;a class=&#34;link&#34; href=&#34;HKEX_OCG_Binary_Trading_Interface_Specifications_v2_2-%28clean%29.pdf&#34; &gt;港股二级制协议接口文档 PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;(&lt;a class=&#34;link&#34; href=&#34;HKEx_CCCG_FIX_Trading_Interface_Specifications_v1_3-%28clean%29.pdf&#34; &gt;中华通Fix协议接口文档 PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(&lt;a class=&#34;link&#34; href=&#34;HKEx_CCCG_Binary_Trading_Interface_Specifications_v1_3-%28clean%29.pdf&#34; &gt;中华通二进制接口文档 PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;상해증권거래소&#34;&gt;상해증권거래소
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;
&lt;p&gt;오류 인터페이스 문서는 다른 메뉴에서 가져옵니다&lt;/p&gt;
&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;심천증권거래소&#34;&gt;심천증권거래소
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;
&lt;p&gt;상해증권거래소는 별도의 오류 정보 설명을 제공하지 않았으며, 주문 인터페이스 문서 제6장에 부가 설명이 있습니다&lt;/p&gt;
&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;나스닥&#34;&gt;나스닥
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;수시가&#34;&gt;수시가
&lt;/h2&gt;&lt;p&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>도커에 대한 몇 가지 이야기</title>
        <link>https://blog.ttf248.life/ko/p/docker-two-three-things/</link>
        <pubDate>Thu, 21 Jan 2021 09:26:07 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/docker-two-three-things/</guid>
        <description>&lt;p&gt;오랫동안 일하면서 접했던 __操作系统，如果是__사용자__用户或者__의 일부 내용이 적용되지 않습니다&lt;/p&gt;
&lt;p&gt;설치 부분은 칭화대학교의 매뉴얼을 참고하세요: &lt;a class=&#34;link&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;설치&#34;&gt;설치
&lt;/h2&gt;&lt;p&gt;알 수 없는 불가사의한 힘으로 인해, 국내 설치 시에는 클라우드 공급업체가 제공하는 저장소 주소를 사용하는 것이 좋습니다. 여기서는 &lt;strong&gt;阿里云&lt;/strong&gt;를 추천합니다.&lt;/p&gt;
&lt;h3 id=&#34;저장소-소스-주소-설정&#34;&gt;저장소 소스 주소 설정
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install yum-utils device-mapper-persistent-data lvm2 &amp;amp;&amp;amp; \
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;최신-버전-배포&#34;&gt;최신 버전 배포
&lt;/h3&gt;&lt;p&gt;도커는 일반적으로 사용되는 백그라운드 서비스이므로, 부팅 시 자동 시작으로 설정하는 것을 권장하며, 현재 명령어는 CentOS 7에 적용 가능합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum install -y docker-ce docker-ce-cli containerd.io &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;지정-버전-배포&#34;&gt;지정 버전 배포
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;kubernetes&lt;/code&gt;和__INLINE_CODE_1__的发布并没与完全同步，如果接下来需要部署&lt;code&gt;kubernetes&lt;/code&gt;，请参考&lt;code&gt;kubernetes&lt;/code&gt;部署说明，安装指定版本的&lt;code&gt;docker&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum list docker-ce --showduplicates | sort -r
sudo yum install -y docker-ce-18.09.2-3.el7 docker-ce-cli-18.09.2-3.el7 containerd.io-18.09.2-3.el7 &amp;amp;&amp;amp; systemctl enable --now docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;일반-사용자에-docker-권한-추가&#34;&gt;일반 사용자에 Docker 권한 추가
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo usermod -aG docker ${USER}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;제거&#34;&gt;제거
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo yum erase -y docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;일상-사용&#34;&gt;일상 사용
&lt;/h2&gt;&lt;h3 id=&#34;미러-가속&#34;&gt;미러 가속
&lt;/h3&gt;&lt;p&gt;여전히 예측할 수 없는 미지의 힘으로 인해 이미지 다운로드 속도가 느리지만, 국내 클라우드 제공업체들이 다양한 가속 서비스를 제공하고 있으므로 &lt;strong&gt;阿里云&lt;/strong&gt;을 추천합니다&lt;/p&gt;
&lt;p&gt;가속된 주소는 직접 알리바바 클라우드 계정을 등록하여 확인하시기 바랍니다. 이 서비스는 무료이며, 알리바바 클라우드는 무료 이미지 빌드 서비스도 제공합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cat &amp;gt; /etc/docker/daemon.json &amp;lt;&amp;lt;EOF
{
  &amp;quot;registry-mirrors&amp;quot;: [
    &amp;quot;https://docker.nju.edu.cn&amp;quot;,
    &amp;quot;https://mirror.baidubce.com&amp;quot;,
    &amp;quot;https://docker.m.daocloud.io&amp;quot;,
    &amp;quot;https://docker.mirrors.sjtug.sjtu.edu.cn&amp;quot;
  ]
}
EOF
systemctl daemon-reload &amp;amp;&amp;amp; \
systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;강력-추천-제어판&#34;&gt;강력 추천 제어판
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker volume create portainer_data &amp;amp;&amp;amp; \
docker run -d --name=portainer --restart=always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:2.20.3-alpine
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;자주-사용하는-이미지-모음&#34;&gt;자주 사용하는 이미지 모음
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull rancher/rancher:stable &amp;amp;&amp;amp; docker pull  portainer/portainer-ce:2.0.1 &amp;amp;&amp;amp; \
docker pull centos:7 &amp;amp;&amp;amp; docker pull ubuntu:20.04 &amp;amp;&amp;amp; docker pull ubuntu:18.04 &amp;amp;&amp;amp; \
docker pull redis:5 &amp;amp;&amp;amp; docker pull redis:6 &amp;amp;&amp;amp; \
docker pull alpine:3.11 &amp;amp;&amp;amp; docker pull busybox:1.32 &amp;amp;&amp;amp; \
docker pull rabbitmq:3.7-management &amp;amp;&amp;amp; \
docker pull mariadb:10.2 &amp;amp;&amp;amp; \
docker pull nginx:1.18 &amp;amp;&amp;amp; docker pull nginx:1.19 &amp;amp;&amp;amp; \
docker pull mysql:5.6 &amp;amp;&amp;amp; docker pull mysql:8 &amp;amp;&amp;amp; \
docker pull elasticsearch:6.8.11 &amp;amp;&amp;amp; docker pull logstash:6.8.11 &amp;amp;&amp;amp; docker pull kibana:6.8.11 &amp;amp;&amp;amp; \
docker pull zookeeper:3.4 &amp;amp;&amp;amp; \
docker pull influxdb:1.7 &amp;amp;&amp;amp; docker pull grafana/grafana:7.3.1 &amp;amp;&amp;amp; \
docker pull percona:8 &amp;amp;&amp;amp; docker pull percona:5.6 &amp;amp;&amp;amp; \
docker pull cloverzrg/frps-docker:0.34.3 &amp;amp;&amp;amp; docker pull cloverzrg/frpc-docker:0.34.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;자주-사용되는-명령어-조합&#34;&gt;자주 사용되는 명령어 조합
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/engine/reference/commandline/docker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/engine/reference/commandline/docker/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;컨테이너 실행 상태를 확인하고 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 매개변수를 추가하여 자세한 컨테이너 정보를 확인합니다. 이때는 이미지 정보는 무시합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker ps --format &amp;quot;{{.Names}}: {{.Ports}}: {{.Size}}&amp;quot;
#portainer: 0.0.0.0:8000-&amp;gt;8000/tcp, 0.0.0.0:9000-&amp;gt;9000/tcp: 0B (virtual 172MB)
#influxdb: 0.0.0.0:8086-&amp;gt;8086/tcp: 183B (virtual 311MB)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;모든 컨테이너 중지&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker stop $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;모든 이미지를 한 번에 삭제합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dokcer rmi $(docker images -a -q)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;이미지 내보내기&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; &amp;gt; -o XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이미지 내보내기 및 압축&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker save &amp;lt;IMAGE NAME&amp;gt;:&amp;lt;IMAGE TAG&amp;gt; | gzip &amp;gt; XXX.tar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이미지 가져오기&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker load -i XXX.tar
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>리눅스 기반 Jmeter 부하 테스트 환경 구축</title>
        <link>https://blog.ttf248.life/ko/p/linux-setup-jmeter-testing-environment/</link>
        <pubDate>Tue, 22 Dec 2020 10:12:50 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/linux-setup-jmeter-testing-environment/</guid>
        <description>&lt;p&gt;저자는 하드웨어에 대한 높은 관심을 가지고 있으며, Jmeter를 사용하여 성능 테스트를 진행하고 CentOS 7에 Jmeter, InfluxDB 및 Grafana를 배포하는 과정을 기록했습니다. Jmeter 설치 및 명령어 사용법, InfluxDB의 특징 및 Docker 설치 방법, 그리고 Grafana의 간단한 배포 및 구성 방법을 공유하며, 고성능 프로그램 패턴 경험과 참고 자료를 정리했습니다.&lt;/p&gt;
&lt;h2 id=&#34;배경&#34;&gt;배경
&lt;/h2&gt;&lt;p&gt;데이터 시현 외에 웹 패널을 추가로 구성하는 것이 무슨 소용이 있나요?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;생각은 자기만 생각하는 대로인데, 직접 해봐야 알 수 있어
Don&amp;rsquo;t use GUI mode for load testing! only for Test creation and Test debuggin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;공식적으로 추천하는 방식은 명령줄을 통해 부하 테스트 보고서를 얻고 GUI 방식으로 표시하는데, 데이터 오류가 발생할 수 있나요? JMeter에 대한 이해는 깊지 않지만, 적어도 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 버전의 콘솔 패널을 굴려볼 만한 이유를 찾았습니다&lt;/p&gt;
&lt;p&gt;오픈소스 차이나 게시글인데, 핵심 컴포넌트 배포 방식이 썩 좋지 않고, 설치에 필요한 파일도 다운로드하려면 공중계정을 팔로우해야 한다. 새세대 사용자로서 당연히 __INLIN_ITALIC_1____으로 대체했다. 결국 서버가 국내에 있어야 하고, 해외 소스 주소 접근 속도는 매우 느리다. 적어도 미러 서비스는 알리바바 클라우드에 무료 가속 기능이 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 설치 배포에 대한 내용은 여기서는 더 이상 다루지 않으며, 이전 자료를 참고하시기를 권장합니다&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;다음 내용은 크게 두 부분으로 나뉩니다: 기본 테스트 환경 구성 요소 구축 및 각 요소에 대한 간단한 설명입니다&lt;/p&gt;
&lt;h2 id=&#34;jmeter&#34;&gt;Jmeter
&lt;/h2&gt;&lt;p&gt;Apache JMeter는 Apache 재단에서 개발한 Java 기반의 성능 테스트 도구입니다. 소프트웨어에 대한 부하 테스트를 위해 설계되었으며, 처음에는 웹 애플리케이션 테스트용으로 만들어졌지만 이후 다른 테스트 영역으로 확장되었습니다. 정적 파일, Java 마이크로 서비스, CGI 스크립트, Java 객체, 데이터베이스, FTP 서버 등 정적 및 동적 리소스를 테스트하는 데 사용할 수 있습니다. JMeter는 다양한 압력 범주에서 서버, 네트워크 또는 객체에 대한 막대한 부하를 시뮬레이션하여 강점을 테스트하고 전체 성능을 분석할 수 있습니다. 또한 JMeter는 어설션을 사용하여 스크립트를 생성하여 프로그램이 예상 결과를 반환하는지 확인하여 기능/회귀 테스트를 수행할 수 있습니다. 최대의 유연성을 위해 JMeter는 정규 표현식을 사용하여 어설션을 만들 수 있습니다.&lt;/p&gt;
&lt;p&gt;Apache JMeter는 정적 및 동적 리소스(파일, 서블릿, Perl 스크립트, Java 객체, 데이터베이스 쿼리, FTP 서버 등)의 성능 테스트에 사용될 수 있습니다. 서버, 네트워크 또는 객체에 과도한 부하를 가하여 강도를 테스트하거나 다양한 압력 유형에서 전체적인 성능을 분석하는 데 활용할 수 있으며, 성능 그래프 분석이나 고동시 부하 테스트에도 적합합니다.&lt;/p&gt;
&lt;h3 id=&#34;jmeter-배포-centos7&#34;&gt;JMeter 배포 CentOS7
&lt;/h3&gt;&lt;p&gt;설치 패키지&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install java-1.8.0-openjdk -y &amp;amp;&amp;amp; \
wget https://mirrors.bfsu.edu.cn/apache//jmeter/binaries/apache-jmeter-5.4.tgz &amp;amp;&amp;amp; tar -xf apache-jmeter-5.4.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;환경 변수 설정&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export JMETER_HOME=$HOME/jmeter/apache-jmeter-5.4
export PATH=$JMETER_HOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;지메터-명령어&#34;&gt;지메터 명령어
&lt;/h3&gt;&lt;p&gt;최종적으로 __控制面板，可以不输入&lt;code&gt;Grafana&lt;/code&gt;参数，在__INLINE_CODE_2__제어판 관측 데이터&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;jmeter -n -t /tmp/order-500-10s.jmx -l /tmp/jmeter-order-report-20200109/order-500-10s.jtl
# 一般不用测试结果和测试报告，简化命令
jmeter -n -t /tmp/order-500-10s.jmx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;influxdb&#34;&gt;InfluxDB
&lt;/h2&gt;&lt;p&gt;InfluxDB는 Go 언어로 작성된 오픈 소스 분산 시계열, 이벤트 및 지표 데이터베이스이며 외부 의존성이 필요 없습니다. 현재 DevOps 모니터링 데이터, APP 메트릭, IoT 센서 데이터 및 실시간 분석 데이터를 포함한 대량의 타임스탬프 데이터를 저장하는 데 주로 사용됩니다.&lt;/p&gt;
&lt;h3 id=&#34;인플럭스db-특징&#34;&gt;인플럭스DB 특징
&lt;/h3&gt;&lt;p&gt;인플럭스DB의 특징은 다음과 같이 9가지로 요약할 수 있습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구조(패턴) 없음: 열의 개수가 임의일 수 있습니다&lt;/li&gt;
&lt;li&gt;메트릭 저장 기간을 설정할 수 있습니다&lt;/li&gt;
&lt;li&gt;통계 편의를 위해 시간 관련 함수(최소, 최대, 합계, 개수, 평균, 중앙값 등) 지원;&lt;/li&gt;
&lt;li&gt;지원되는 저장 정책: 데이터의 삭제 및 수정에 사용 가능합니다.(InfluxDB는 데이터 삭제 및 수정 방법을 제공하지 않습니다.)&lt;/li&gt;
&lt;li&gt;연속 쿼리 지원: 데이터베이스에서 자동으로 주기적으로 실행되는 일련의 문이며, 저장 정책과 함께 사용하면 InfluxDB 시스템 점유량을 줄일 수 있습니다&lt;/li&gt;
&lt;li&gt;네이티브 HTTP 지원, 내장된 HTTP API;&lt;/li&gt;
&lt;li&gt;SQL과 유사한 구문을 지원합니다&lt;/li&gt;
&lt;li&gt;클러스터 내 데이터 복제본 수를 설정할 수 있습니다&lt;/li&gt;
&lt;li&gt;정기 샘플링 데이터를 지원하고, 별도의 measurement에 기록하여 세분화된 데이터 저장 기능을 제공합니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;인플럭스db-도커-설치&#34;&gt;인플럭스DB 도커 설치
&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir influxdb &amp;amp;&amp;amp; cd influxdb &amp;amp;&amp;amp; \
docker run -p 8086:8086 -d --name influxdb -v $PWD:/var/lib/influxdb influxdb:1.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;컨테이너에 진입하여 명령을 실행하고, 수동으로 데이터베이스를 생성합니다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;root@bce0a55bbc72:/# influx
Connected to http://localhost:8086 version 1.7.10
InfluxDB shell version: 1.7.10
&amp;gt; 交互面板执行命令
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;인플럭스db-데이터베이스-및-사용자-생성&#34;&gt;인플럭스DB 데이터베이스 및 사용자 생성
&lt;/h3&gt;&lt;p&gt;데이터베이스 생성: create database jmeter_t2
데이터베이스 확인:
데이터베이스 전환: use jmeter_t2
관리자 권한으로 비밀번호가 &amp;lsquo;admin&amp;rsquo;인 사용자 &amp;ldquo;admin&amp;quot;을 생성합니다
사용자 보기&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; show users
user  admin
----  -----
admin true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사용자 권한이 표시되면 데이터베이스 준비가 완료되었습니다&lt;/p&gt;
&lt;h2 id=&#34;grafana&#34;&gt;Grafana
&lt;/h2&gt;&lt;p&gt;테스트 케이스를 작성하다 보니 차트 표시가 크게 필요하지 않다는 것을 알게 되었고, 인터페이스의 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 데이터는 명령줄에서 실행하면 이미 관찰할 수 있으며, 더 중요한 것은 프로그램 내부의 소요 시간이다&lt;/p&gt;
&lt;p&gt;간단한 배포&lt;/p&gt;
&lt;p&gt;테스트 결과를 태그로 필터링할 수 있으며, 일반적으로 &lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 데이터베이스 하나만 구성하면 됩니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;애플리케이션 이름&lt;/li&gt;
&lt;li&gt;테스트 사례 이름&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/linux-setup-jmeter-testing-environment/Snipaste_2021-03-09_19-44-22.png&#34;
	width=&#34;861&#34;
	height=&#34;357&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;grafana&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -d --name=grafana -p 3000:3000 grafana/grafana:7.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;웹 버전은 샘플러 간격으로 인해 계산된 __INLINE_CODE_0__和相关数值与__INLINE_CODE_1__聚合报告不相符，参考链接：&lt;strong&gt;링크_2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;자료에서는 __INLINE_CODE_0__을 사용자 정의하는 방법도 설명하고 있습니다&lt;/p&gt;
&lt;h2 id=&#34;사후기&#34;&gt;사후기
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;고성능 프로그램 모드는 단일 루프 스레드여야 하며, 잠금, 큐에 넣기 및 큐에서 제거하는 작업은 불필요한 성능 저하를 야기한다&lt;/li&gt;
&lt;li&gt;핵심 비즈니스 로직의 처리 시간은 다른 코드 도입에 필요한 시간보다 길기 때문에, 동시성으로 효율을 높이는 것이 효과적이다. 핵심 처리 시간이 충분히 짧다면 다른 코드를 신중하게 도입하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://medium.com/@jasonli.studio/to-install-apache-jmeter-in-centos7-294bc72a97ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;To install Apache JMeter in CentOS7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>레드햇과 CentOS 라이프사이클</title>
        <link>https://blog.ttf248.life/ko/p/redhat-centos-lifecycle/</link>
        <pubDate>Tue, 21 Jul 2020 20:02:35 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/redhat-centos-lifecycle/</guid>
        <description>&lt;p&gt;온라인 생산 환경 운영체제는 Red Hat과 CentOS가 주류 선택입니다. 두 시스템의 라이프사이클에 대한 공식 웹사이트 링크를 기록하고 CentOS 8에서 CentOS 8 Stream으로 업그레이드 경험을 공유합니다.&lt;/p&gt;
&lt;h2 id=&#34;서론&#34;&gt;서론
&lt;/h2&gt;&lt;p&gt;온라인 생산 환경 운영체제는 현재 국내에서 Red Hat과 CentOS가 주류 선택입니다. 지난 2년간 Red Hat 6의 지원 종료를 겪었기에, 두 시스템의 라이프사이클 공식 웹사이트 링크를 기록합니다.&lt;/p&gt;
&lt;h2 id=&#34;본문&#34;&gt;본문
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://access.redhat.com/support/policy/updates/errata&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Red Hat Enterprise Linux Life Cycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;레드햇 엔터프라이즈 리눅스(RHEL)와 CentOS는 기업용 서버 운영체제에서 널리 사용되는 선택입니다. RHEL은 안정적인 지원 및 업데이트 주기를 제공하여 기업 환경에 적합하며, CentOS는 RHEL의 커뮤니티 버전으로서 유사한 기능과 안정성을 제공하지만 공식 지원은 없습니다.&lt;/p&gt;
&lt;h2 id=&#34;계속-봐&#34;&gt;계속 봐
&lt;/h2&gt;&lt;p&gt;이 글을 게시할 때, 두 년 후 업데이트를 하게 될 줄은 상상도 못 했습니다. 이틀 전까지만 해도 일상적으로 사용하는 가상 머신을 CentOS 8에서 CentOS 8 Stream으로 업그레이드했습니다. 생산 환경에 어떻게 선택할지는 논하지 않겠습니다만, 로컬 환경에서는 최신 버전을 추구합니다.&lt;/p&gt;
&lt;p&gt;CentOS 8 Stream은 지속적인 업데이트를 제공하는 롤링 릴리스 버전으로, 개발 및 테스트 환경에 적합합니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>미국과 중국 간 무역 전쟁</title>
        <link>https://blog.ttf248.life/ko/p/us-china-trade-war/</link>
        <pubDate>Tue, 21 Jul 2020 19:52:41 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/us-china-trade-war/</guid>
        <description>&lt;p&gt;먼저 본론 외 이야기부터 시작해서, 중국 특색 사회주의와 자본주의의 차이점에 대해 말씀드리겠습니다. 선구자 세대로부터 &amp;ldquo;부유해지려면 먼저 도로를 정비해야 한다&amp;quot;는 말을 들은 적 있을 겁니다. 중국의 기반 시설 건설은 국가가 비용을 부담하는데, 자본주의 사회에서는 이러한 일들이 모두 위탁 계약됩니다. 이익이 전혀 없는 외딴 지역이라면 기업들이 맡으려 하지 않겠죠. 너무 장황하게 이야기하면 현재 기사 주제에서 벗어나는 것 같으니, 일반인들은 무역 전쟁이 생활에 큰 영향을 미치지 않는다고 생각할 수 있지만, 사실 우리나라는 고성능 제조업이 오랫동안 상대적으로 취약했습니다. 제가 종사하는 IT 분야를 예로 들자면, 메모리, 하드 디스크, CPU, 그래픽 카드 등 컴퓨터 핵심 부품은 모두 해외 공장에서 생산되고 있으며, 이러한 부품 비용이 조립식 PC 전체 가격의 50%를 차지합니다. 고성능 제조업은 반드시 필요합니다. 중국과 미국의 충돌은 피할 수 없을 것입니다.&lt;/p&gt;
&lt;h2 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;위키백과&#34;&gt;위키백과
&lt;/h2&gt;&lt;p&gt;2018~2020년 미중 무역 전쟁(미중 무역 분쟁, 미중 무역 마찰, 미중 무역 소송 또는 미국-중국 무역 전쟁이라고도 함)은 중화인민공화국과 미국 간의 무역 전쟁이다&lt;/p&gt;
&lt;p&gt;미국 대통령 도널드 트럼프가 2018년 3월 22일 메모를 서명하면서 “중국이 미국의 지적재산과 영업 비밀을 절도한다”고 주장하고, 1974년 무역법 제301조에 따라 중국으로부터 수입되는 상품에 대해 총 600억 달러 규모의 관세를 부과하도록 미국무역대표부에 요청한 것이 무역 분쟁의 발단이었다. 이에 따라 미국은 2018년 7월 6일 340억 달러 상당의 중국산 제품에 대한 25% 추가 관세를 부과했고, 중국 상무부는 같은 날 340억 달러 규모의 미국산 제품에 대해 25% 추가 관세로 맞대응했다. 이는 특히 중국으로 가장 많이 수출되는 대두를 포함한다.&lt;/p&gt;
&lt;p&gt;미국과 중국 양측은 2018년 5월 무역 전쟁을 중단하는 데 합의하고 화해를 모색하는 공동 성명을 발표한 바 있었다. 그러나 미국 무역대표부는 이후 6월 16일, 5억 달러 규모의 중국산 수입품에 대한 첫 번째 관세 부과 목록을 발표하며 기존 10% 세율을 25%로 인상했다. 이에 중국 국가조세총청은 동등한 보복 조치를 취했고, 중국 상무부는 미국으로부터의 수입 다수 제품에 대한 반덤핑 조사 재개를 중단하지 않았다. 7월 6일, 트럼프 행정부는 첫 번째 관세 부과 목록에 포함된 340억 달러 규모의 중국산 수입품에 대해 25% 관세를 부과하며 트럼프 정부의 대중국 관세 정책이 공식적으로 시행되었다(나머지 160억 달러 규모는 8월 23일 추가 부과). 이후 중국 상무부는 성명에서 “미국은 WTO 규칙을 위반하여 역사상 최대 규모의 무역 전쟁을 벌였다”고 지적했다. 또한 중국세관총서는 미국의 관세 부과 조치 시행 직후 즉각적인 반격 조치를 취했다고 밝혔다.&lt;/p&gt;
&lt;p&gt;12월 1일, G20 부에노스아이레스 정상회담에서 양국 지도자 시진핑과 도널드 트럼프는 합의를 이루고 90일간의 협상을 진행하며 그 기간 동안 새로운 무역 조치를 중단하기로 동의했다. 2019년 3월 1일 마감 기한이 만료된 후, 미국 측은 상당한 진전이 있다고 발표하고 새로운 무역 조치 중단 기간을 연장했다.&lt;/p&gt;
&lt;p&gt;2019년 5월 5일, 미국 대통령 도널드 트럼프는 추가로 약 200억 달러 규모의 중국산 수입품에 대해 25% 관세를 부과한다고 발표했으며, 이 조치는 6월 1일부터 미국 항구에 도착하는 중국 상품에 적용되기 시작했다. 5월 13일, 중국 국무원 세관세정책위원회는 6월 1일부터 원산지가 미국인 일부 수입품에 대해 5%에서 25%로 관세를 인상한다고 발표했다. 6월 1일, 미 무역대표부는 미국의 25% 관세 부과 시점을 6월 15일로 연기했으며, 중국 국무원 세관세정책위원회는 중국의 추가 관세 조치가 6월 1일에 예정대로 시행된다고 밝혔다.&lt;/p&gt;
&lt;p&gt;6월 29일, 양국 지도자 시진핑과 트럼프는 G20 오사카 정상회담에서 회담을 갖고 경貿 협상 재개를 합의했으며, 미국은 중국 제품에 대한 새로운 관세를 부과하지 않기로 동의했다&lt;/p&gt;
&lt;p&gt;8월 1일, 트럼프 정부가 중국 정부의 미국 농산물 구매 진행 상황에 불만을 표시하면서 트럼프는 트위터에서 2019년 9월 1일부터 잔여 3천억 달러 규모의 모든 중국산 제품에 대해 10% 관세를 부과할 것이라고 발표했습니다. 8월 5일, 위안화 대비 달러 환율이 7선(關口)을 하회했습니다. 같은 날 미국 재무부는 중국을 환율 조작국으로 지정했습니다. 이후 중국 정부는 미국 농산물 구매를 중단하고 8월 24일에 약 7억 5천만 달러 규모의 미국 상품에 대해 10% 또는 5% 관세를 부과하고, 미국 자동차 및 부품에 대한 관세 재부과를 발표했습니다. 이에 미국은 다음 날 3천억 달러 규모의 중국 제품에 대한 세율을 15%로 인상하고, 현재 2천5백만 달러 규모의 중국 제품에 대한 25% 관세를 30%로 인상하는 방식으로 대응했지만, 이후 중단되었습니다.&lt;/p&gt;
&lt;p&gt;2020년 1월 16일, 미중 양국은 첫 번째 무역 협정을 체결했다&lt;/p&gt;</description>
        </item>
        <item>
        <title>컴퓨터 조립에 관한 일들</title>
        <link>https://blog.ttf248.life/ko/p/computer-assembly-tips/</link>
        <pubDate>Sat, 18 Jul 2020 14:33:46 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/computer-assembly-tips/</guid>
        <description>&lt;p&gt;저자는 어릴 적부터 컴퓨터 조립에 대한 관심이 많았으며, 대학 이후로 하드웨어 조립을 접하기 시작했다. CPU, SSD, HDD, 메모리 클럭 속도 등 하드웨어 성능 비교 웹사이트 및 구매 추천 정보를 제공하고, 하드웨어 선택 경험과 주의사항을 공유한다.&lt;/p&gt;
&lt;h3 id=&#34;인연-말로-다-할-수-없네&#34;&gt;인연, 말로 다 할 수 없네
&lt;/h3&gt;&lt;p&gt;어릴 때부터 내 컴퓨터를 조립하고 싶었는데, 경제적인 상황이 허락하지 않았다. 어렵게 대학교에 들어서서는 휴대성을 고려해서 노트북을 샀다. 정확한 시점을 꼽자면, 고향의 도서관에서 시작되었는데. 그곳은 시내 수준의 도서관이었고 전자 열람실(사실 가본 적 없고 유료였다)과 잡지 열람실이 있었는데, 바로 그곳에서 《大众软件》이나 《电脑报》 같은 잡지를 보게 되었고, 컴퓨터를 접할 기회가 많지 않았던 나에게는 거의 신격에 가까운 과학 지식 자료였다. 몬스터 사냥하는 장면을 보면 내 컴퓨터도 만들어서 같이 레이드하고 공격수로 활약하고 싶었고, 첨단 기술을 보면 책에서 따라 해서 설명된 효과를 낼 수 있을 거라고 상상했다(해킹 도구 사용에 대한 이야기). 물론 고등학교 과제가 많았고, 내가 알던 한계 안에서 책은 읽어야 하고 놀이는 해야 하니까, 순진무구하게 지냈다고 할까. 핑계로 도서관에 가서 책을 보러 가는 척하면, 작은 가방 하나 들고 시내를 걸어가서 도서관에 갔다. 도착해서 에어컨을 틀고 소설, 만화, 게임 잡지를 보거나 가끔은 진지한 책도 읽었다.&lt;/p&gt;
&lt;p&gt;나이가 들면 건망증이 쉬운데, 도서관에서 벌어진 일은 처음도 아니었다. 중학교 때 친척 집에서 컴퓨터를 조립한 적 있는데, 그때 그 기계를 왜 조립했는지 기억도 안 난다. 운영체제는 윈도우 2003이었고, 게임은 기본으로 있는 카드 게임과 문명 시리즈였다. 온갖 방법으로 열쇠를 훔쳐서 동생이랑 같이 게임을 하곤 했다.&lt;/p&gt;
&lt;p&gt;방금 중학교에 입학했는데 바로 컴퓨터 기초 교육이 있었고, 나중에 전학하면서 컴퓨터 경시대회 개념을 조금 접하게 됐습니다. 고등학교 때에는 NOIP 한 번 치른 적도 있고요. 여기서 얘기를 하면 빼놓을 수 없는 게, 동문들의 힘입니다. 고등학교의 컴퓨터 건물은 동문의 기부로 지어졌는데, 컴퓨터 교실과 도서관이 함께 있습니다. 그때는 국내 인터넷 물결의 초기 단계였기도 하고요. 학교 관계자들도 컴퓨터 경시대회 참여를 지원했는데, 결국 앞선 두 학년 선배 여러 명이 컴퓨터 실력으로 명문 대학에 진학했으니까요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;나와 컴퓨터에 대한 일들을 이렇게 되돌아본 적은 없었다. 졸업 후 자동화 전공을 과감하게 포기하고 컴퓨터 분야로 온 것도 어찌 보면 당연한 일이었을 것이다. 씨앗은 이미 뿌려져 있었고, 다만 주변 사람들은 그 사실을 모를 뿐이었다. 어릴 때부터 많이 접해 두었던 덕분에 자신이 대단하다고 생각했지만, 실상은 겉핱기만 할 뿐이고, 가장 큰 장점은 처음의 열정뿐이었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;하드웨어-조립&#34;&gt;하드웨어 조립
&lt;/h3&gt;&lt;p&gt;카드바, 칩헬, 지후 컴퓨터 조립 게시판을 많이 둘러보면 초보자도 비교적 간단하게 필요한 기계 목록을 작성할 수 있습니다. 2019년 이후 CPU를 구매하는데 경제적인 여유가 없다면 더 높은 성능을 원한다면 AMD를 우선적으로 고려하세요.&lt;/p&gt;
&lt;p&gt;자주 사용하는 하드웨어 성능 비교 웹사이트를 추천합니다: &lt;a class=&#34;link&#34; href=&#34;https://cpu.userbenchmark.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cpu.userbenchmark.com/&lt;/a&gt;. 가격 정보는 중고나라 미국 버전과 비교하기에 거의 충분합니다. 진정한 고수라면 중고나라에서 중고 제품을 구매하면 훨씬 저렴하게 살 수 있습니다. 하지만 잘 모르는 분들은 중고나라 이용을 비추천합니다. 본인은 가짜 메모리를 구매했는데, 현재 사용에는 문제가 없는 것 같지만 정확하지는 않습니다. 모델과 파라미터가 완전히 일치하지 않습니다.&lt;/p&gt;
&lt;h4 id=&#34;sn550-vs-sn750&#34;&gt;SN550 VS SN750
&lt;/h4&gt;&lt;p&gt;SN550 1TB와 SN750 1TB의 차이는 지속적인 읽기/쓰기 속도가 두 배 정도 다르다는 것인데, 850MB 대 1.6GB입니다. 하지만 일상 사용에서는 차이가 없는데, 둘 다 4K 성능은 동일하기 때문입니다. 물론 여기서 말하는 것은 1TB 용량의 SN550이고, 500G나 250G 모델은 순차 읽기/쓰기 속도가 더 느립니다. 돈을 신경 쓰지 않는다면 상관없겠지만, 저는 일상 사용에는 SN550로 충분하다고 생각합니다. 제가 이 제품을 사지 않은 가장 큰 이유는 순차 읽기/쓰기 속도 때문이 아니라 최대 용량이 1TB라는 점이고, SN750은 2TB 용량을 제공하기 때문입니다. 저에게는 추가 확장 없이 메인보드의 M.2 Nvme 슬롯이 이러한 SSD의 가격 차이보다 더 가치 있다고 생각합니다.&lt;/p&gt;
&lt;p&gt;여러 의견을 종합해 볼 때, 어댑터만 있으면 B150 메인보드도 M.2 SSD를 지원할 수 있습니다&lt;/p&gt;
&lt;h4 id=&#34;기계식-하드-선택-가이드&#34;&gt;기계식 하드 선택 가이드
&lt;/h4&gt;&lt;p&gt;기계식 하드디스크는 현재 가격이 안정적인 추세이며, 대용량 저장 공간이 필요한 사용자라면 적절한 기계식 하드디스크를 선택해야 합니다. 자주 자료를 다운로드하는 사용자에게는 엔터프라이즈급 하드디스크를 추천하며, 흔히 볼 수 있는 제품은 다음과 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;서부 데이터 디스크&lt;/li&gt;
&lt;li&gt;시게 exos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;大容量的机械硬盘推荐进行分区，频繁的下载操作固定在某个分区进行，日后出现坏道，可以集中在某个分区，废弃当前分区即可，能有效延长机械硬盘寿命。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;시지(Seagate) 시리즈&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/computer-assembly-tips/%E5%B8%8C%E6%8D%B7exos1.png&#34;
	width=&#34;589&#34;
	height=&#34;659&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;希捷企业级硬盘概述&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;214px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/computer-assembly-tips/%E5%B8%8C%E6%8D%B7exos2.png&#34;
	width=&#34;588&#34;
	height=&#34;661&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;希捷企业级硬盘概述&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;213px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;메모리-주파수&#34;&gt;메모리 주파수
&lt;/h4&gt;&lt;p&gt;일상 업무 관점에서는 빈도가 성능에 큰 영향을 미치지 않습니다&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/computer-assembly-tips/%E5%86%85%E5%AD%98.png&#34;
	width=&#34;407&#34;
	height=&#34;404&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;内存时序&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;241px&#34;
	
&gt;굵게_2&lt;a class=&#34;link&#34; href=&#34;%e5%92%b8%e9%b1%bc%e5%86%85%e5%ad%98.png&#34; &gt;咸鱼内存&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;메모리 타이밍(Memory timings 또는 RAM timings)은 동기식 DRAM(SDRAM) 성능을 설명하는 CL, TRCD, TRP 및 TRAS의 네 가지 매개변수로, 클럭 주기 단위로 표시됩니다. 이들은 일반적으로 7-8-8-24와 같이 하이픈으로 구분된 네 개의 숫자로 표기되며, 네 번째 매개변수(RAS)는 종종 생략되고 때로는 Command rate(명령 속도), 보통 2T 또는 1T (또는 2N, 1N으로 표기)라는 다섯 번째 매개변수가 추가되기도 합니다. 이러한 매개변수는 무작위 접근 메모리 속도에 영향을 미치는 레이턴시(지연 시간)를 지정합니다. 일반적으로 숫자가 낮을수록 성능이 향상됩니다. 시스템 성능을 결정하는 최종 요소는 실제 레이턴시이며, 보통 나노초 단위로 표시됩니다.&lt;/p&gt;
&lt;p&gt;메모리 타이밍을 실제 지연으로 변환할 때는 시계 주기 단위로 측정된다는 점이 가장 중요합니다. 시계 주기의 시간을 모르면 숫자 세트가 다른 숫자 세트보다 빠른지 알 수 없습니다.&lt;/p&gt;
&lt;p&gt;예를 들어, DDR3-2000 메모리의 클럭 주파수는 1000MHz이고 클럭 주기는 1ns입니다. 이 1ns 클럭을 기준으로 CL=7의 절대 지연은 7ns입니다. 반면 더 빠른 DDR3-2666(클럭 1333MHz, 주기 0.75ns)은 더 큰 CL=9를 사용할 수 있지만, 결과적으로 6.75ns의 더 짧은 절대 지연을 발생시킵니다.&lt;/p&gt;
&lt;p&gt;현대 DIMM은 자동 구성에 권장되는 메모리 타이밍이 포함된 시리얼 존재 감지(SPD) ROM 칩을 포함합니다. PC의 BIOS는 성능 향상을 위해 타이밍을 조정할 수 있지만(안정성 저하 위험 있음), 특정 상황에서는 안정성을 높일 수도 있습니다(권장 타이밍 사용 시).&lt;/p&gt;
&lt;p&gt;주의: 메모리 대역폭은 메모리의 처리량을 측정하며, 일반적으로 지연 시간보다는 전송 속도에 의해 제한됩니다. SDRAM의 여러 내부 뱅크를 교차 접근하면 이론적으로 최고 속도로 연속적인 데이터 전송이 가능합니다. 대역폭을 늘리기 위해 지연 시간을 늘릴 수 있습니다. 구체적으로 말해, 새로운 DDR 메모리 세대는 높은 전송 속도를 가지고 있지만 절대 지연 시간은 크게 변하지 않습니다. 특히 시장에 처음 출시된 제품들은 이전 세대보다 더 긴 지연 시간을 보이는 경향이 있습니다.&lt;/p&gt;
&lt;p&gt;메모리 지연이 늘어나더라도 메모리 대역폭을 늘리면 다중 프로세서 또는 다중 실행 스레드를 가진 컴퓨터 시스템의 성능을 개선할 수 있다. 더 높은 대역폭은 전용 그래픽 메모리가 없는 통합 그래픽 카드의 성능도 향상시킬 것이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/computer-assembly-tips/%E5%86%85%E5%AD%98%E6%97%B6%E5%BA%8F%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E.png&#34;
	width=&#34;731&#34;
	height=&#34;477&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;内存时序参数说明&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;367px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>사이트 가속 및 도메인 설정</title>
        <link>https://blog.ttf248.life/ko/p/website-acceleration-and-domain-setup/</link>
        <pubDate>Sat, 20 Jun 2020 10:36:27 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/website-acceleration-and-domain-setup/</guid>
        <description>&lt;p&gt;국내 접속이 느린 GitHub Pages 때문에, 저자는 개인 도메인을 신청하고 국내 클라우드 호스트 제공업체의 CDN 가속 서비스를 구매했습니다. 설정 과정에서 www 서브도메인에 접근할 수 없는 문제가 발생했는데, 최종적으로 와일드카드 도메인 해석을 삭제하고 2차 도메인을 개별적으로 설정하여 해결했습니다. 저자는 또한 CDN 가속 원리 및 설정 경험과 Nginx 리버스 프록시를 사용한 시도와 그 교훈을 공유했습니다.&lt;/p&gt;
&lt;h3 id=&#34;배경&#34;&gt;배경
&lt;/h3&gt;&lt;p&gt;GitHub Pages에 호스팅되어 있어, 몇 가지 이유로 인해 국내 접속이 다소 느립니다. 그래서 개인 도메인을 신청하고 국내 클라우드 호스트 제공업체의 CDN 가속 서비스를 구매했습니다. 가속 서비스를 설정하면서 개발 머신에 Docker, frp, k8s 등 여러 서비스가 배포되어 있고, 이 서비스들에 대한 대시보드가 있다는 점을 떠올랐습니다. 낭비하지 않겠다는 생각으로 몇 개의 리버스 프록시를 구성하고 모두 2차 도메인에 연결했습니다.&lt;/p&gt;
&lt;p&gt;二级 도메인을 사용하던 중 갑자기 www 서브도메인에 접속할 수 없게 되었고, 알리바바 클라우드에서 DNS 설정이 &lt;a class=&#34;link&#34; href=&#34;https://www.xiangtianlong.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.xiangtianlong.com&lt;/a&gt;과 xiangtianlong.com으로 동시에 해석되도록 되어 있었으며, CDN 가속을 적용하기 전에는 두 도메인이 모두 정상적으로 작동했습니다&lt;/p&gt;
&lt;p&gt;CDN 설정 시, 2차 도메인이 너무 많아 일반 도메인 규칙을 적용하고 개발 머신으로 통합 라우팅했는데, 결과적으로 www 2차 도메인도 함께 접속이 안 되게 됐습니다. 네, 맞아요, www 접두사도 2차 도메인입니다. 실제 웹사이트는 GitHub Pages에 배포되어 있고, 개발 머신에는 웹사이트 캐시 정보가 없습니다.&lt;/p&gt;
&lt;p&gt;개발 환경에 사이트 배포 안 하고, GitHub Actions으로 자동 통합해서 배포하는 게 훨씬 편하네요&lt;/p&gt;
&lt;h3 id=&#34;도메인&#34;&gt;도메인
&lt;/h3&gt;&lt;p&gt;비전문적인 웹 개발에서는 도메인 이해가 SEO나 크로스 도메인 문제와 관련이 없습니다. 블로그 사이트로서 누드 도메인은 블로거의 사이트를 돋보이게 하며, 제처럼 한자 병음으로 된 도메인을 사용하는 초보에게 유리하고, 현재 모바일 접속이 많으므로 입력할 수 있는 문자 수를 줄일 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;컴퓨터에서 단축키를 사용하면 www와 com을 입력할 필요가 없습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;cdn&#34;&gt;CDN
&lt;/h3&gt;&lt;p&gt;알리바다 클라우드와 텐센트 클라우드를 모두 사용해 봤는데, 신규 사용자도 쉽게 시작할 수 있습니다. 텐센트 클라우드는 관련 개념을 설명하는 비디오도 제공합니다. CDN 가속 원리는 제이동 창고와 같은 이치입니다. 신상품 판매 시 전국 각지에 미리 배송하여 배송 요청 발생 시 가장 가까운 창고에서 배송합니다.&lt;/p&gt;
&lt;p&gt;원래 주소: 웹사이트 리소스가 원래 보관된 주소&lt;/p&gt;
&lt;p&gt;캐시 파일 설정, 브라우저 F12, 관리 콘솔, 정적 및 동적 리소스 간략 분석&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전부 0일 유효기간&lt;/li&gt;
&lt;li&gt;유효기간 0일&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt; 1일 유효&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;텐센트 클라우드 설정 규칙:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최대 10개의 캐시 만료 규칙을 구성할 수 있습니다&lt;/li&gt;
&lt;li&gt;하위 규칙 우선&lt;/li&gt;
&lt;li&gt;캐시 만료 시간은 최대 365일까지 설정할 수 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;비참한-자수지어&#34;&gt;비참한 자수지어
&lt;/h3&gt;&lt;p&gt;이전에 Nginx를 사용해 본 적이 없어 웹사이트 검색만으로 리버스 프록시 설정을 이해할 수 있을 줄 알았는데, 결과가 좀 혼란스러웠다. 반나절을 끙끙거려도 302 리디렉션은 제대로 설정하지 못했고 결국 아무 소용 없었다. 그래서 어리석은 방법으로 해결하기 위해 DNS 파싱의 와일드카드 도메인 파싱을 삭제하고 개별 2차 도메인을 독립적으로 설정했다. 그때 갑자기 알리바바 클라우드 DNS 파싱에 &amp;ldquo;표시 URL 리디렉션&amp;quot;이라는 모드가 있다는 것을 알아차렸고, 시도해 보니 이게 바로 내가 원하는 302 리디렉션이었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;첫차 단계별 도메인 설정은 잘 되는데, 둘째 도메인을 설정하려니 안 되고 거의 좌절할 지경이었어요. 잠시 기다리니까 갑자기 되는 걸 보니, 알리바바 클라우드 DNS 전파가 가끔씩 오류를 일으키는 것 같네요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;참고-자료&#34;&gt;참고 자료
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>블로그 IDE 환경과 잡담</title>
        <link>https://blog.ttf248.life/ko/p/blog-ide-environment-and-ramblings/</link>
        <pubDate>Tue, 31 Mar 2020 13:54:27 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/blog-ide-environment-and-ramblings/</guid>
        <description>&lt;p&gt;이 글은 Markdown의 기본 개념과 다양한 소프트웨어에서의 활용을 소개하고, VSCode를 IDE로 추천하며 관련 플러그인을 제시합니다. 또한 Hexo에서 Hugo로 전환한 경험을 공유하며 Hugo의 유연성과 사용자 정의 기능을 강조합니다. 마지막으로 새로운 기술을 빠르게 시작하기 위한 팁과 함께 Hugo 테마 스타일 업데이트 문제 해결 방법도 제공합니다.&lt;/p&gt;
&lt;h2 id=&#34;서론&#34;&gt;서론
&lt;/h2&gt;&lt;h3 id=&#34;markdown&#34;&gt;Markdown
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;가볍고 사람이 읽기 쉽고 쓰기 쉬운 일반 텍스트 형식으로 문서를 작성할 수 있게 해주는 경량 마크업 언어입니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;상세한 Markdown 문법 설명은 생략하고, 전자책을 추천합니다. &lt;a class=&#34;link&#34; href=&#34;https://markdown-zh.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;点击此处&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;시판되는 많은 소프트웨어들이 이미 md를 작성 방식으로 지원합니다. csdn 블로그 시스템은 md 문법을 지원하는 온라인 편집기를 출시했으며, 처음 사용할 때 md 문법에 대한 소개 글이 있는데 괜찮습니다. 에버노트도 2018년에 md 노트 지원을 추가했고, 단축키 바에 다양한 md 마크업 옵션이 있어 일반 문서 편집과 거의 비슷하며 전반적인 인터페이스는 초보자에게 친숙합니다.&lt;/p&gt;
&lt;h3 id=&#34;ide-추천&#34;&gt;IDE 추천
&lt;/h3&gt;&lt;p&gt;글을 쓰고 있을 때 2020년이었고, vscode는 이미 많이 들어봤을 것이다. git page를 사용하여 블로그 시스템을 구축할 생각을 하는 사람은 어차피 업계 관계자일 테니까. 과거에는 sublime이나 atom도 괜찮은 선택이었지만, 2년간의 오픈소스 커뮤니티 주도로 vscode가 빠르게 발전하여 초보자가 입문하기에 가장 좋은 선택이 되었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;마이크로소프트의 거대한 변화와 오픈소스 커뮤니티와의 관계가 단절 상태에서 훈정기로 성공적으로 전환되었습니다. 오픈소스에 대한 포용적인 태도죠. 저희 회사 역시 최근 2년간 Java 생태계를 적극적으로 도입했습니다. 바꿔 말하면, 현재 국내에서의 Java 환경은 정말 매력적입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vs-code-플러그인-추천&#34;&gt;VS Code 플러그인 추천
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-07-17.png&#34;
	width=&#34;310&#34;
	height=&#34;306&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;插件清单&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;플러그인에는 자체 Readme 파일이 있어 기본 사용법과 핵심 기능을 설명하고 있으며, 일부 플러그인 제작자는 동적 효과 시연 이미지를 제공합니다&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;INLINE_CODE_0&lt;/strong&gt;, Hugo의 이미지 플러그인 방식과 함께 사용하면 간편하게 이미지를 추가할 수 있습니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;단축키를 외우지 못해서, VS Code 단축키 관리 메뉴에서 md를 검색하고 여러 번 보고, 플러그인 사용 설명서를 다시 확인해 봐&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;hugo&#34;&gt;hugo
&lt;/h2&gt;&lt;p&gt;글쓰는 일이 내 본성과는 거리가 멀다. 참지 못하고 덤비는 성향 때문이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hugo는 이미지와 md 문서를 별도의 폴더에 배치하는 것을 지원합니다&lt;/li&gt;
&lt;li&gt;학술 주제는 디자인에서 다양한 문서 스타일을 지원합니다&lt;/li&gt;
&lt;li&gt;다양한 맞춤형 확장 기능&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;academic&#34;&gt;academic
&lt;/h2&gt;&lt;p&gt;공식 웹사이트 기본 &lt;strong&gt;인라인_5&lt;/strong&gt; 굵게_3__인라인__인라인_6__ 굵게_4__인라인__&lt;/p&gt;
&lt;p&gt;URL 패턴은 클릭하면 단일 페이지로 이동하고, 홈페이지에서 스크롤하는 방식이 아니라서 개인적인 취향입니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스타일별: 에세이, 강연, 전자책&lt;/li&gt;
&lt;li&gt;유연성: 전체 스타일 사용자 정의, CSS 스타일 사용자 정의&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 테마는 중국어 지원이 아직 완벽하지 않은데, 주로 시각적인 측면에서 폰트 크기가 중국어 읽기 습관에 잘 맞지 않습니다. Hexo 개발팀의 대부분이 중국인이므로 이 점에서는 Hugo보다 우수합니다.&lt;/p&gt;
&lt;p&gt;하지만, 직접 만들어서 입고 먹는 것처럼, 브라우저에서 요소들을 검사합니다. 요소를 찾았으면 수정해야 할 CSS 스타일 이름이 궁금할 때 사이드바에서 &lt;strong&gt;Insert Style Rule Below&lt;/strong&gt;을 클릭하면 여러 겹으로 중첩된 CSS에서도 노드 이름을 쉽게 얻을 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;죄송합니다, 번역할 중국어 텍스트가 제공되지 않았습니다. 텍스트를 제공해 주시면 번역해 드리겠습니다.&lt;/li&gt;
&lt;li&gt;주제 내장 문법 강조 설정, &lt;a class=&#34;link&#34; href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#highlighting-options.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;마무리&#34;&gt;마무리
&lt;/h2&gt;&lt;p&gt;애가 또 뭐라 하네, 처음부터 끝까지 얼버무려 말하고 구체적인 내용은 하나도 안 짚어주잖아&lt;/p&gt;
&lt;p&gt;이것들만 있으면 충분할 거예요:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;공식 매뉴얼&lt;/li&gt;
&lt;li&gt;플러그인 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 기술을 빠르게 익히려면 먼저 공식 문서를 읽어보는 것이 좋습니다. 한 번에 다 이해하려고 하기보다는, 적어도 대략적인 내용을 파악하는 것이 중요합니다. 검색 엔진 결과는 최신 버전과 일치하지 않아 오해를 불러일으킬 수도 있습니다. 새 책도 마찬가지입니다. 목차를 살펴보고 저자가 무엇을 설명하려 하는지 파악한 후 읽으면 좋습니다. 때로는 서문을 먼저 읽는 것도 좋은데, 일부 외국 저작물의 경우 번역자의 서문이 책의 핵심 내용을 담고 있는 경우도 있습니다.&lt;/p&gt;
&lt;h2 id=&#34;이스터-에그&#34;&gt;이스터 에그
&lt;/h2&gt;&lt;p&gt;Hugo Academic 내장 스타일 시선을 변경하고 사이트에 게시했지만, 방문했을 때 스타일이 변하지 않았습니다. 똑똑한 분들은 이미 생각했을 겁니다. 로컬 브라우저 캐시를 지우면 문제가 해결됩니다. 저의 기발한 방법은 F12 개발자 모드로 들어가 __INLINE_CODE_0__BOLD_2&lt;code&gt;disable cache&lt;/code&gt;로 변경 후 새로 고침하면 됩니다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/blog-ide-environment-and-ramblings/2020-03-31-14-27-15.png&#34;
	width=&#34;399&#34;
	height=&#34;142&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;network&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;280&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>자동 통합 시스템 전환</title>
        <link>https://blog.ttf248.life/ko/p/auto-integration-system-switch/</link>
        <pubDate>Sun, 29 Mar 2020 02:11:33 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/auto-integration-system-switch/</guid>
        <description>&lt;p&gt;GitHub Actions를 사용하여 Hugo 블로그를 GitHub Pages 및 Gitee에 자동으로 배포합니다&lt;/p&gt;
&lt;h4 id=&#34;배경-소개&#34;&gt;배경 소개
&lt;/h4&gt;&lt;p&gt;블로그 업데이트 중 Travis 서비스가 작동하지 않는 것을 발견했는데, Travis 웹페이지를 확인해보니 소스 코드 가져오기 단계에서 멈춰있었습니다. 그때 GitHub에서 출시한 Action 서비스가 떠올랐습니다.&lt;/p&gt;
&lt;p&gt;비교적 바쁠 것 같고, 사용하려면 신청도 해야 해서, 지금부터 정식으로 출시되었으니 주말에 시간 나면 새로운 장난감을 한번 해볼까요?&lt;/p&gt;
&lt;p&gt;공식 자료는 웹사이트에서 직접 확인하시면 되고, 이 글은 더 이상 인용하지 않겠습니다. 이전부터 Kubernetes를 사용해 보신 분들은 action의 YAML 파일 설정이 Kubernetes와 비슷하다고 느끼실 겁니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阮一峰的博客&lt;/strong&gt;을 검색해 보세요. 두 개의 기사가 있는데, 첫 번째는 기초 문법 소개이고, 두 번째는 실제 사례입니다.&lt;/p&gt;
&lt;h4 id=&#34;본문&#34;&gt;본문
&lt;/h4&gt;&lt;p&gt;필요한 지식점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github secrets&lt;/li&gt;
&lt;li&gt;행동 구문&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기존 컴포넌트를 활용하여 핵심 작업이 완료되었고, 명령어를 사용하여 국내 gitee에 푸시했습니다. 명령어 부분은 다소 거칠며 강제 푸시 방식으로 구현되어 있으며, travis 사용 로직을 이어받았습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: github pages and gitee pages

on:
  push:
    branches:
      - hugo

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;
          extended: true

      - name: Build Github and Gitee ## 单个step只能写一个run命令
        run: hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;github_public&amp;quot; &amp;amp;&amp;amp; hugo -b &amp;quot;https://www.xiangtianlong.com/&amp;quot; -d &amp;quot;gitee_public&amp;quot; &amp;amp;&amp;amp; ls

      - name: Deploy Github
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.BLOG_TOKEN }}
          publish_dir: ./github_public
          publish_branch: master
          cname: xiangtianlong.com

      - name: Deploy Gitee
        run: cd ./gitee_public &amp;amp;&amp;amp; git init &amp;amp;&amp;amp; git config user.name &amp;quot;TianlongXiang&amp;quot; &amp;amp;&amp;amp; git config user.email &amp;quot;tianlongxiang51@gmail.com&amp;quot; &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update TianlongXiang&#39;s Blog&amp;quot; &amp;amp;&amp;amp; git push --force &amp;quot;https://xiangtianlong:${{ secrets.GITEE_PASSWORD }}@gitee.com/xiangtianlong/xiangtianlong.git&amp;quot; master:master   
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;사후기&#34;&gt;사후기
&lt;/h4&gt;&lt;p&gt;공식 시장에서 제공하는 기능들을 보면 현재 지원되는 플레이 방식이 꽤 많고, Docker 이미지 빌드 후에는 더 이상 Docker Hub의 서비스를 의존하지 않아도 된다&lt;/p&gt;
&lt;p&gt;Hugo 이슈를 확인해 보니, GitHub Actions을 사용하여 Git Pages를 자동 배포하려면 최종적으로 게시되는 웹 페이지가 master 브랜치에 있어야 합니다. 다른 브랜치에 배포하면 설정 인터페이스에서 GitHub가 배포된 웹 페이지에 구문 오류가 있다는 것을 알립니다.&lt;/p&gt;
&lt;p&gt;실제로 hugo의 원본 파일이 master 브랜치에 위치하여 github가 jelly 블로그 소스 코드로 간주하고 검사를 진행하면서, 검사 및 통과 실패로 인한 오류가 발생한 것입니다&lt;/p&gt;
&lt;p&gt;솔루션도 간단합니다. Hugo 소스 파일은 다른 분기에 두고, 정적 파일은 master 분기를 통해 배포하면 됩니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>미래의 좋은 중국은 좋은 노인 남성과 여성으로 가득한 중국일 것이다</title>
        <link>https://blog.ttf248.life/ko/p/future-good-china-with-elderly/</link>
        <pubDate>Sat, 15 Feb 2020 11:28:28 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/future-good-china-with-elderly/</guid>
        <description>&lt;p&gt;스무 해 후, 사랑스러운 노인이 되어 사랑스러운 노부인과 함께하며, 부자나 귀족이 되기는커녕 건강하게 전국을 돌아다닐 수 있으면 좋겠다&lt;/p&gt;
&lt;h2 id=&#34;영상-원본&#34;&gt;영상 원본
&lt;/h2&gt;&lt;p&gt;유쿠 검색으로 충분합니다. 더 이상 링크는 제공하지 않겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;스크립트&#34;&gt;스크립트
&lt;/h2&gt;&lt;p&gt;열 정년 후에 멋쟁이 노인이 바로 저일 겁니다. 멋쟁이 노인이 되기 위해 열심히 노력하고, 미래의 중국은 멋있는 노인과 할머니로 가득 찬 나라가 될 것입니다. 비록 열 년 후 60세가 되더라도 저는 이 세상에서 가장 젊은 사람 중 하나입니다.&lt;/p&gt;
&lt;p&gt;솔직히 말해서, 다들 50세의 중국 남자인데 이런 체형이면 꽤 괜찮다고 생각하겠지만, 이 체형 뒤에는 제가 믿는 한 마디가 있습니다. 자율할수록 자유롭다! 비가 그친 후에 저는 달리기 가려고 했는데, 내일 오후에는 축구를 할 겁니다. 50세에도 여전히 큰 경기를 할 수 있는데, 농담이 아닙니다. 오히려 전문 선수들과 함께 자주 합니다. 그렇다면 뒤에는 무엇이 있을까요? 자율입니다. 남은 시간 동안 달리기를 하는데, 달리기가 지루하다고 생각하는 사람도 있지만, 자율할수록 자유롭습니다. 저는 자율하기 때문에 자유롭게 달릴 수 있습니다. 음악을 듣지 않는데, 제 호흡 소리가 가장 아름다운 음악이라고 생각하기 때문입니다.&lt;/p&gt;
&lt;p&gt;저는 주로 러닝머신은 잘 안 하고, 북경의 스모그가 너무 심한데도 일주일에 5일은 뛰어요. 이틀은 스모그를 위해 남겨두고요. 다른 사람들하고 달리 저는 절대 끊임없이 달립니다. 매달 일기에 기록하는데, 제 경험에 하루씩 그림으로 표시해요. 한 달에 최소 18일 이상은 꼭 뛰고, 러닝할 때는 순식간에 지나가요. 운동할 때는 안경을 안 쓰고, 더 중요한 건 매주 축구를 한다는 거예요. 제 대학원 마지막 수업은 우리 집에서 했는데, 주제는 ‘즐거움’이었어요. 저는 즐거움이 너무 중요하다고 생각하고, 재미나 취미 없이 사는 사람과는 잘 어울리지 않아요.&lt;/p&gt;
&lt;p&gt;존중하고 멀리하는 사람, 그런 사람이 너무 무섭습니다. 재미가 없다고 생각하시면 당신은 뭐가 즐거운지, 저도 별로 없는 것 같습니다. 어떤 일을 좋아하시나요? 올해 초에 제 학생이 중국신문주간에 분담되었는데, 저희는 특집을 진행했는데 제목이 ‘致’였습니다. 10년 후 제 대학원생들이 매년 졸업할 때 마지막 과제는 그들에게 10년 후를 써보라고 하는 것이었습니다. 저는 그걸 보관해두었다가 10년 후에 차례대로 펼쳐서, 저도 50세가 60세에게 쓰는 글을 썼습니다. 60세는 예전에 생각조차 해본 적 없는 멀고 먼 곳이었지만, 눈 깜짝할 사이에 제 다음 목적지가 되었습니다. 20세가 30세에게 쓰는 편지는 봄이 여름에 보내는 러브레터였지만, 제가 50세가 60세에게 쓰는 글은 여름 끝이 가을에 속삭이는 듯한 느낌입니다. 지금 저는 10년 후를 향해 전 세계에서 제 침대, 한 끼 식사, 그리고 저의 가족 옆으로 천천히 적고 있습니다. 이건 너무나 당연한 일입니다.&lt;/p&gt;
&lt;p&gt;하지만 60세에 어떤 사람이 될 것인가, 제 주제는 매우 명확합니다. 서문에서 이 글은 길고, 저는 10년 후 저가 사랑스러운 노인이 되기 위해 노력할 것이라고 말했습니다. 중국이 사랑스럽기를 바라는 것은 미래에 더 많은 시민들이 시민이 되어야 하고, 더 이상 작은 백성이 아닌 활기찬 젊은이들과 규칙을 지키는 젊은이가 있어야 하는 것뿐만 아니라 좋은 노인과 할머니가 있는 중국이어야 합니다. 현재 중국의 60세 이상 인구는 이미 2억 3천만 명이 넘고, 10년 후에는 확실히 3억 명을 넘어설 것입니다. 즉, 60세 이상 인구만을 놓고 볼 때 중국은 단독 국가로 세계 5위 또는 심지어 세계 3위가 될 수도 있습니다. 생각해보면 얼마나 무서운 일입니까?&lt;/p&gt;
&lt;p&gt;저는 그렇게 생각하지 않습니다. 다들 오늘 인터넷에 올라온 표를 보셨나요? 중국 각 성과 직辖시의 평균 수명을 보면 상하이와 베이징은 80세 이상입니다. 남녀 모두 합친 평균 수명이죠. 평균 수명은 분명히 남자들이 여자들의 이득을 많이 본 것입니다. 즉, 저도 10년 후 60세가 되더라도 이 세상에서 가장 젊은 국가 중 하나일 겁니다. 미래에는 여성들이 55세에 은퇴해서 평균 나이인 80세까지 25년을 더 살고, 남성들은 60세에 은퇴해서 평균 나이인 80세까지 20년을 더 사는 것이죠! 그냥 광장 춤만 추는 것은 아무것도 아니라고 생각합니다. 그리고 오늘 광장 춤을 추는 누나와 형님들은 시대가 가져다준 문화적 습관과 오락 방식이라고 말씀드릴 수 있습니다.&lt;/p&gt;
&lt;p&gt;또 20년 후, 다음 세대도 아마 여전히 광장 춤을 추는 사람이 많겠지만 그 수는 크게 줄어들 것이다. 다음 세대는 집단 활동에 적극적으로 참여하는 것을 즐기지 않기 때문이다. 나이가 지긋한 사람들이 여행 시 단체 관광을 선호하는 것처럼, 요즘 젊은이들은 자유여행이나 자가발생 여행을 더 많이 한다. 앞으로도 광장 춤은 존재하겠지만 그 범위는 분명히 축소될 것이고, 이는 좋고 나쁨의 문제가 아니라 시대가 변화하고 있다는 것을 의미한다. 내가 60세 때 가장 어렸던 팀의 일원이었으니, 나는 어떤 사람이 되어야 할까? 중국화에서는 60세에 귀가 밝다고 하지만, 나는 그때도 분명 듣기 싫은 것은 듣지 않을 것이며, 기쁜 일에도 불쾌감을 느낄 것이다. 무엇보다 중요한 것은 젊은 세대를 위해 무엇을 해야 하는 것!&lt;/p&gt;
&lt;p&gt;좋은 일을 하려면 무엇을 해야 할까? 게으르지 않고, 쉽게 타협하지 않으며, 옳다고 생각하면 반대해야 한다. 젊은 세대가 내 이익을 해칠 수도 있는데, 내가 그들 앞에 서서 막아줄 수 있을까? 요즘 나는 자주 거울을 들여다본다. 내 좋은 친구 하나가 세상을 떠났고, 타오 웨이 시절에는 우리 집에 자주 모였는데, 그때 그는 한 번 진실한 이야기를 해주었다. 우리는 함께 슬퍼했다. 첸(陳)의 옛 세대는 모든 것을 집에 숨겨두었는데, 상자를 깨면 30개 넘는 물건이 침대 밑에 있었다. 그에게 이 옷은 500원 이상에 샀다고 말하고, 이제는 제사를 지내야 한다고 해야 할 것이다. 그래서 우리 세대는 부모님과 머리를 맞댈 수밖에 없었다. 700원이나 주고 사 왔는데 얼마가 남았을까?&lt;/p&gt;
&lt;ol start=&#34;220&#34;&gt;
&lt;li&gt;그런데 쉽게 문제가 생기기 쉽다. 타오웨이는 한번 400원 넘게 주고 아빠에게 티셔츠를 사줬다. 그 티셔츠 정말 좋았는데, 얼마였지? 99원짜리 그 행은 입었더니, 다음 날 망했다. 밤에 돌아와서 타오웨이에게 400원을 자랑하길래, 나한테 다시 4개 더 사달라고 했다. 오늘 나가 입으니 리다이 할아버지 등 다들 좋다고 하고, 결국 거짓말의 위험성은 매우 크다는 이야기가 나왔다. 앞으로 이런 일은 하지 말라는 사람이 많았다. 정확히 어느 분이 병원 정형외과에 계신지는 모르겠지만, 노인들이 뼈가 부러진 중요한 원인이 벼룩시장에서 산 신발이라는 것을 발견했다. 물론 이건 아직 물질적인 측면만 다룬 이야기다. 나이가 들어서도 정신 생활이 필요하고, 호기심을 가져야 하고, 여전히 젊은 세대를 위해 바람을 막아주고 비를 가려주는 사람이 되어야 한다. 하루하루 행복하게 살아야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;기대와 설렘을 안고 60세가 되는 순간을 기다리고 있는데, 그게 멋진 시작이 될 것 같아요&lt;/p&gt;
&lt;p&gt;감사합니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>제 18살은, 여러분과 조금 다를 수도 있어요</title>
        <link>https://blog.ttf248.life/ko/p/my-18th-might-be-different/</link>
        <pubDate>Sat, 15 Feb 2020 11:19:33 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/my-18th-might-be-different/</guid>
        <description>&lt;p&gt;꽤 흔한 단어인데, 고등학교 졸업 후 소설 보는 시간을 비우고 나니 오랫동안 진지하게 조용히 책을 읽은 적이 없네요. 가끔 뒤돌아보면, 이리 오래 일했는데도 매년 뭘 했는지 기억나는 게 별로 없어요. 많은 경우 하반년에 다다르면 상반기 일을 많이 잊어버리는 것 같아요. 블로그 쓰는 건 좋은 습관이에요. 비록 제가 쓰는 많은 글이 주목받지 못하더라도 괜찮아요. 원래는 제 자신을 위한 글이니까요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;제일 충실한 독자는 바로 저 자신입니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;영상-원본&#34;&gt;영상 원본
&lt;/h2&gt;&lt;p&gt;유쿠 검색으로 충분합니다. 더 이상 링크는 제공하지 않겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;스크립트&#34;&gt;스크립트
&lt;/h2&gt;&lt;p&gt;모든 사람의 18세는 기대와 질문이 담긴 시선과 같습니다. 누구나 가끔 자신의 18살을 떠올리며, ‘그때 자기가 살고 싶던 모습이었나?’라고 자문합니다. 저는 지금 많은 사람들이 수많은 친구들과 소통하지만 진정한 친구는 없고, 매일 대화는 하지만 마음을 터놓을 사람은 없으며, 지식은 무한히 얻지만 지혜와는 멀어져 있는 것을 걱정합니다. 모든 사람은 자신의 18살을 되돌아보며, 다른 사람을 속이는 것은 너무 쉽지만 자신을 속이는 것은 너무 어렵다는 것을 깨달아야 합니다!&lt;/p&gt;
&lt;p&gt;나에게 당신은 모든 사람의 18세가 기대와 질문이 담긴 시선처럼 느껴져요. 다른 사람을 속일 수는 있어도, 자신의 18살을 속일 수는 없죠. 지금 모습이 18살에 꿈꿨던 모습인가요? 괜찮다고 생각해요. 요즘은 물질이나 명예 등 훨씬 더 많은 것들을 18살 때보다 많이 원하고 얻었지만, 동시에 끊임없이 노력하는 중이에요. 18살 때 저는 방송학원에서 언론학과를 다녔고 최고의 기자, 팔라치처럼 되고 싶었어요. 지금도 그 길을 가고 있죠. 그래서 사람들이 저에게 &amp;ldquo;백 선생님, 왜 아직 CCTV에 계세요? 최고의 기자가 되고 싶은데.&amp;ldquo;라고 묻는 거예요. 이건 제 18살의 시선이에요. 그러니 가끔 자신의 18살을 떠올리며 스스로에게 물어봐야 해요. 당신은 그때 꿈꿨던 삶을 살고 있나요?&lt;/p&gt;
&lt;p&gt;이것은 정말 속일 수 없는 모습이다. 내가 18살 때의 모습인데, 눈 깜짝할 사이에 32년이나 지나버렸다. 베이징에 와서 대학을 온 사람은 누구나 이런 사진 한 장을 가지고 있을 것이다. 그 시절에는 천안문 광장의 주름진 정장 차림새에 교훈 배지를 가슴에 달고 다녔다. 당시에는 대학교 학생이 적어서 다른 학교 배지를 빼놓으면 특별히 자랑스러웠다. 머리도 길었지만, 18살 때의 모습이 참 좋았다. 많은 세월이 지나 나를 둘러싸고 있던 것들을 내가 다행이라고 생각하게 되었다. 조용히 나를 만들어주었기 때문이다. 1986년 5월 8일, 왕푸징 서점에서 &amp;lsquo;몽롱시 선집&amp;rsquo;을 샀다. 그해 공인체육장에서 추이롄의 &amp;lsquo;무(無)&amp;lsquo;를 들었다. 오늘 문득 내 글쓰기 스타일에 가장 큰 영향을 미쳤다는 것을 깨달았다. 나의 성격도 몽롱시, 록 음악과 고룡의 무협 소설의 영향을 받았다.&lt;/p&gt;
&lt;p&gt;열여덟 살에 무엇을 겪었나요? 그 경험이 당신을 어디로 이끌었을까요. 오늘날 열여덟 살들이 무엇을 겪고 있는지 정말 알고 싶어요. 마치 칼과 도끼로 조각하듯, 당신을 다듬는 것 같다고 해야 할까요? 그렇다면 어떤 도구를 사용했을까요? 당신은 어떤 모습으로 다듬어졌나요? 요즘 사람들은 수많은 친구들과 연결되어 있지만, 진정한 친구는 없고, 매일 대화만 하고 마음을 나누는 사람은 없어요. 지식은 무한히 얻을 수 있지만, 지혜와는 거리가 멀고, 모든 것을 아는 듯하지만 실상은 아무것도 모르는 것 같아요. 겉으로는 모두가 개성을 표현하는 것처럼 보이지만, 제 눈에는 요즘 젊은이들은 다 똑같아 보여요. 어떻게 해야 할까요? 열여덟 살에게 무엇을 경험하게 해줘야 할까요? 저는 1986년을 정말 좋아해요. 왜냐하면 1986년이야말로 1966년을 해결할 수 있는 최선의 방법이었으니까요.&lt;/p&gt;
&lt;p&gt;1966년 문화대혁명은 76년에 사천붕을 타도하여 종결되었지만 우연적인 요소가 있었고, 진정으로 당신이 걱정하는 근본적인 문제를 제거하기 위해서는 86년의 계몽과 인간성에 대한 각성의 성장만이 가능하다고 생각합니다. 우리는 아직 계몽을 겪어야 하고, 인간성에 대한 충분한 이해를 겪어야 합니다. 중국 사회는 경제가 아무리 큰 진보와 변화를 비축하더라도 인간성에 대한 이해의 순간이 채워지지 않고, 인간 본성의 악면을 통제하고 선면을 활성화하지 않으면 미래에도 우리를 걱정하게 하는 일이 많을 것입니다. 저의 18세도 이 시대의 18세이며, 너무 멀리 왔으니 처음 왜 출발했는지 잊지 말아야 합니다. 지금은 “본초를 잃지 말라”라는 4글자로 압축되었습니다.&lt;/p&gt;
&lt;p&gt;어쨌든 어디를 가든, 모든 사람은 자신의 18세 모습을 떠올려 봐야 한다고 생각해요. 18살 사진을 남겨두는 건 좋은 일이고, 자주 꺼내서 스스로에게 물어봐야죠. 다른 사람이 하는 말은 중요하지 않아요. 사람을 속이는 건 너무 쉽지만, 자신을 속이는 건 정말 어려워요. 제가 방금 말씀드린 것처럼, 18살 때의 저를 오늘 20살인 당신에게 이야기하자면, 당신은 항상 자신의 18세 모습을 통해 세상을 바라봐야 해요. 그리고 20대에는 다양한 경험을 하고 여러 문을 열어 봐야 합니다. 자신에게 맞는 게 무엇인지 모르는 거니까요. 요즘 중국에서는 20대인데 노인이 된 사람도 많고, 70대인데 젊은이처럼 보이는 사람도 많아요.&lt;/p&gt;
&lt;p&gt;감사합니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>이 사회에 어떤 기자가 필요한가?</title>
        <link>https://blog.ttf248.life/ko/p/what-kind-of-journalists-does-society-need/</link>
        <pubDate>Sat, 15 Feb 2020 11:08:38 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/what-kind-of-journalists-does-society-need/</guid>
        <description>&lt;p&gt;저자는 기자 직업에 대한 자신의 견해를 이야기하며, 기자가 사회적 양심, 지식 축적, 그리고 장거리 경주 선수와 같은 정신을 갖춰야 한다고 강조했다. 또한 50세의 자신에 대한 성찰을 공유했는데, 호기심 유지, 물질과 정신의 균형, 그리고 미래에 대한 고찰 등이 포함되었다.&lt;/p&gt;
&lt;h2 id=&#34;영상-원본&#34;&gt;영상 원본
&lt;/h2&gt;&lt;p&gt;유쿠 검색으로 충분합니다. 더 이상 링크는 제공하지 않겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;스크립트&#34;&gt;스크립트
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;최고의 기자는 먼저 사회적 양심이 있어야 하고, 그 다음 지식과 인내심을 갖춰야 합니다. 100미터만 뛰고 만족하면 안 됩니다. 이 세 가지가 결합되어야 사람들은 백신 안전에 대한 우려를 완전히 해결해주길 기대합니다. 이는 마치 과거 분유 사건처럼 문제 발생 후 해결, 그리고 근본적인 해결이라는 논리적 순환 속에서 발전하는 것입니다. 그렇지 않으면 기자에게 무엇을 맡겨야 할까요?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我觉得 가장 좋은 기자는 먼저 사회적 양심이 있어야 하고, 둘째는 지식과 경험을 갖추고, 셋째는 장거리 달리기를 해야 하는데, 100미터 달리기만으로는 만족할 수 없다는 것입니다. 올해 50세가 되었는데, 이 세 가지를 종합적으로 고려해 보니 저에게 어울리는 것 같습니다. 저는 중국의 40년 개혁과 자연스럽게 연결되어 있습니다. 30살 생일에는 송화강 기슭에 서 있었고, 40살 때는 올림픽 중계를 통해 들어갔다가 나 왔습니다. 올해 50세이고, 전국적으로 개혁 40주년을 기념하고 있으니 확실히 일맥상통합니다. 만약 큰 시대가 40세라면, 중국의 개혁 40년은 해답을 찾았는가 혼란인가?&lt;/p&gt;
&lt;p&gt;40년의 길을 걸어온 중국은 물질적으로는 우리 모두에게 충분한 것을 주었고, 국가에도 충분한 것을 주었지만, 불안과 혼란은 늘어나고 줄어들지 않았다. 우리는 강해지고 부유해졌으니 다 괜찮겠다고 생각했지만, 결과적으로 물질은 그저 밑바탕일 뿐이었다. 물질적인 빈곤에서 벗어나는 것은 가장 쉬웠지만, 정신적으로 풍요로워지고 진정한 대국이 되는 것은 정말 어렵다. 미국조차 고기술을 공격하기 시작했다. 우리야말로 농산물로 맞서 싸워야 할 것이다. 이 세상에는 &amp;lsquo;두 번째가 되기 어렵다&amp;rsquo;는 것이 항상 존재한다! 미국에서 몇 개의 2번이 망가지고 사라졌나? 따라서 우리는 오랜 세월을 거쳐 이러한 ‘2’가 아닌 ‘1’이 되어 자신을 초월해야 한다. 나는 무엇도 얻을 수 없을 것이다.&lt;/p&gt;
&lt;p&gt;25살에 TV 일을 시작하게 된 건 정말 운이 좋았어요. 처음에는 인물 인터뷰부터 시작해서, 수백에서 천 명에 달하는 다양한 방울을 쓴 사람들이랑 접촉했죠. 그때 젊은 사람들은 그런 방울이 그들을 행복하게 할 거라고 생각했지만, 가까이 다가가 보니 아니었어요. 방울과 그들의 행복은 별로 관련이 없었고, 심지어 반비례 관계인 경우도 있었죠. 며칠 전 구모여우의 마지막 29년을 막 봤는데, 국무부 부부총리, 정치협의회 부주석, 부위원장 등 고위직에 오른 그는 거의 처벌을 받지 않았어요. 하지만 두 아들 중 한 명은 자살했고, 다른 한 명은 추락사했을 가능성이 높습니다. 그가 행복할 수 있을까요?&lt;/p&gt;
&lt;p&gt;무엇으로 행복을 잰다는 말일까? 일흔 나이에 몇 년 사이 두 아들을 차례로 떠나보낸 후, 부총리라는 직책이 그녀를 행복하게 할 수 있다. 많은 유명인의 서예 작품이 사람을 행복하게 하고, 안전하게 지내온 세월이 행복을 가져다준다. 무엇이 필요할까? 그래서 나는 책을 통해 사람을 가장 잘 파악할 수 있다고 생각한다. 조금 더 강조하자면, 요즘 많은 사람들이 불안해하는 이유는 너무 많이 생각하고 책을 너무 적게 읽기 때문이라고 생각한다. 이는 양강 노인이 젊은이에게 보낸 답신이다. 책을 읽지 않고는 패스트푸드를 기대하고, 휴대폰 하나로 활력제를 찾으려 한다. 어떻게 가능할까? 나는 한 권의 책을 통해 어리석음에서 벗어나 현명해지는 법을 배웠고, 책을 많이 읽을수록 뺄셈이 가능하다.&lt;/p&gt;
&lt;p&gt;그래서 저는 모든 사람을 기대하기는 바라지 않지만, 점점 더 많은 중국인들이 공부를 통해 더 나은 자신을 발견하길 바라고, 이것이 가장 중요한 것입니다. 아무도 앉아서 하늘의 별을 보며 모든 것을 깨닫지는 못합니다. 저도 할 수 없습니다. 하지만 거울을 볼 수는 있습니다. 몇 년 전 BBC 뉴스 앵커가 베이징에 왔는데, BBC 최고의 앵커라고 자부하며, 누군가가 그를 국제호텔에서 중국 뉴스 앵커들과의 대화에 참여시켰습니다. 그 사람이 대화 중에 저에게 물어봤습니다. &amp;ldquo;BBC는 CCTV로부터 무엇을 배워야 한다고 생각하십니까?&amp;rdquo; 저는 농담으로 시작해서 “물론 먼저 중국어를 배워야 할 것입니다.”라고 말했습니다.&lt;/p&gt;
&lt;p&gt;다음은 제가 농담처럼 말했습니다. BBC가 CCTV로부터 배워야 할 것은 세상에 대한 호기심입니다. 우리는 지난 몇 년간 빠르게 세계로 나갔습니다. 다양한 특파원 소, 현재 70곳이 넘습니다. 학생들이 새로운 것을 보면 모두 매우 궁금해하며 거대한 호기심을 가지고 세상을 관찰합니다. BBC는 영국 자체를 세계로 여기고 더 이상 호기심이 없습니다. 제 친구가 테이블을 치며 말했습니다. 당신 말이 맞아요, 우리에게 필요한 것이 바로 이것입니다. 2007년에 일본을 취재했을 때 작가가 저에게 이런 말을 했습니다. 일본은 희망이 없는 것 말고는 다 있습니다. 나중에 그 의미를 알게 되었고, 이 말은 정말 깊이가 있네요. 다른 각도에서 보면 10년 전에는 중국이 희망이 없는 것 빼고는 모든 것이 부족하다고 생각했지만, 희망은 있었고 모두가 앞날을 기대했습니다.&lt;/p&gt;
&lt;p&gt;그러다가 우리도 희망 외에 모든 것이 있는 풍요로운 나라가 될 날이 올까 봐 걱정입니다. 솔직히 말해서, 중국이 부자가 되어서 무엇을 다 갖추고 나서야 비로소 자신이 정말 가난하다는 것을 깨닫게 되는 상황을 매우 우려합니다. 50세쯤 되면 모든 물질적인 조건을 충족해도 결국 매우 가난한 사람이 될까 봐 두렵습니다. 현실에서 고학력인데 교양이 없는 사람도 많고, 통장에 수많은 숫자가 있는 빈곤한 사람도 많습니다. 이것이 바로 이 시대의 문제입니다. 진정으로 가난한 것은 두려운 것이 아니라, 앞에 목표와 희망이 있기 때문입니다. 그래서 도덕 결핍과 인간성 상실이 발생하는 이유를 말씀드리는 것입니다. 과학자들이 많은 것을 발명한 것은 처음부터 위대한 어떤 사명을 짊어진 것이 아니라 호기심 덕분이라고 생각합니다.&lt;/p&gt;
&lt;p&gt;제가 어떻게 해낼 수 있을지 궁금해서요. 그래서 50대쯤부터 스스로에게 더 궁금해하도록 독려하기 시작했고, 저는 지금도 매우 행복합니다. 제가 가장 힘들어하는 일은 바로 &amp;lsquo;끈기&amp;rsquo;입니다. 방금 대화 중에 당신이 아직 끈기를 가지고 계신다고 말씀하셨는데, 저는 말하지 말라고 해요. 끈기는 죽음과 그리 멀리 있지 않으니까요. 과거에는 끈기가 곧 승리라고 했었죠. 중국 축구는 검은 3분을 끈기 있게 버티면 이를 악물고 버텄습니다. 재미도 없고 방법도 없으면 끈기로 해결하려고 했습니다. 끈기는 때로는 중요하지만, 상당한 경우에는 이 말에는 양면성이 있습니다. 제가 어떤 일을 할 때 끈기를 발휘하는 것이 두렵습니다. 예를 들어, 사람들과 대화할 때 저는 남은 말을 끝까지 하려고 끈기를 발휘합니다. 사실 지금 제 시간은 다 됐지만, 어떻게 될지 궁금합니다. 여러분과의 교류가 어떻게 될까요?&lt;/p&gt;
&lt;p&gt;나 자신에게 아주 작은 키워드를 주고, 다른 사람들과의 소통을 통해 대화한다면 50세에 이르러서도 호기심을 유지할 수 있다면 괜찮다고 생각합니다. 저는 재미있는 모든 것을 좋아하지만, 지금 가장 재미있는 것만이 다가 아니라는 걸 알고 있습니다. 오늘날 유행하는 것은 금방 사라질 수도 있죠. 매년 유행어들이 바뀌는걸 기억하십니까? 오늘의 인터넷 미디어가 10년 후에는 전통 미디어보다 더 나을까요? 재미있는 것들은 항상 그 안에 흥미로운 본질이 있습니다. 저는 모든 사람의 취향을 존중하며, 분명 그만한 이유가 있을 겁니다. 하지만 장기적으로 보면 중국인들이 가장 좋아하는 것은 여전히 마작입니다. 패스트푸드를 즐기는 순간, 정찬 레스토랑은 자연스럽게 사라지겠죠.&lt;/p&gt;
&lt;p&gt;많은 것들이 단순히 감탄하며 지나가는 것이 아닙니다. 매일 스마트폰으로 얼마나 흩어져 읽고 있나요? 길게 읽는 습관은 얼마나 되나요? 하지만 이것 또한 과정입니다. 휴대폰이 우리의 속박이 되고 있습니다. 그래서 짧은 콘텐츠를 많이 볼수록, 서서히 시력이 나빠질 수 있다고 생각합니다. 물론 이것도 과정이며, 저는 콘텐츠의 중요성을 걱정하지 않습니다. 결국 돌아오게 될 것입니다. 매일 즐거움에 빠져 살다가 40대에 와서는 차(茶)의 세계로 돌아올 것입니다. 이것이 중국인의 삶입니다.&lt;/p&gt;
&lt;p&gt;아주 괜찮은데, 다음 변화가 좀 더 빨리 왔으면 좋겠어요. 요즘 조사기자가 너무 없다는 게 안타깝네요. 더 이상 보지 않아도 될 것 같아요.&lt;/p&gt;
&lt;p&gt;감사합니다&lt;/p&gt;</description>
        </item>
        <item>
        <title>20년 후 중국 축구는 어떨까?</title>
        <link>https://blog.ttf248.life/ko/p/chinese-football-in-20-years/</link>
        <pubDate>Sat, 15 Feb 2020 10:59:32 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/chinese-football-in-20-years/</guid>
        <description>&lt;p&gt;추가된 독후감은 대부분 2021년에 즉흥적으로 작성한 것이고, 백연수 선생님의 강연 대본을 글로 옮긴 때는 아직 코로나 팬데믹이 시작했을 때였습니다. 스무 년 후가 아니라 일 년 후, 이 년 후에도 세상의 변화는 항상 사람들의 예상을 뛰어넘습니다. 현재 중국 내 코로나19는 거의 종결 단계에 접어들었지만 해외에서는 여전히 난리입니다. 축구에 관해서는 지난 몇 년간 국가대표팀이 꽤 잘 하고 있고, 감독도 공격적인 전술을 적극적으로 활용합니다. 옛날 어리둥절하게 보던 시절에 비해 조부님과 함께 축구를 보는 것이 조금 재미있어지기 시작했습니다. 한 국가대표팀 경기를 보다가 채널을 바꾸고 싶어 할 정도로 노인조차 귀찮아하는 모습은 어떤 경험일까요?&lt;/p&gt;
&lt;h2 id=&#34;영상-원본&#34;&gt;영상 원본
&lt;/h2&gt;&lt;p&gt;유쿠 검색으로 충분합니다. 더 이상 링크는 제공하지 않겠습니다.&lt;/p&gt;
&lt;h2 id=&#34;스크립트&#34;&gt;스크립트
&lt;/h2&gt;&lt;p&gt;중국 축구에 아직도 관심 있으세요? 매우 궁금합니다. 어떻게 이렇게 망가질 수 있을까요? 중국 축구가 제대로 안 되는 이유는 여러 가지가 있는데, 그중 하나는 누구도 공을 잃기 싫어하고, 다른 사람에게 패스하기보다는 자기만 가지고 있는 플레이 방식입니다.&lt;/p&gt;
&lt;p&gt;물론 이건 그중 아주 작은 한 가지 이유일 뿐이에요. 20년 전 축구, 20년 후의 중국 축구는 너무 멀게 느껴지고, 첫 번째로 확장된 팀이 48개가 됐죠. 중국도 갈 수 있지만, 여전히 못 갈 수도 있어요. 국가대표팀에 가장 이상적인 나이는 26&lt;del&gt;30세인데, 20년 후면 오늘 6&lt;/del&gt;10살 아이들이겠죠. 20년 뒤에는 분명히 될 거라고 생각해요. 그런데 제가 오늘 6~10살 이야기를 하니, 표정이 심각해지시네요. 그러니까 인과관계가 중요하잖아요. 지금 뭘 심고 있는 걸까요? 오늘 우리는 거의 국가대표팀이 리그를 뛰게 할 만한 대두를 심었는데요, 이게 어떻게 될까요? 이런 일을 누가 시작하면, 그 사람은 사직 준비를 해야 합니다. 이건 규칙에 위배되니까, 저는 너무 많이 생각하지 않았어요.&lt;/p&gt;
&lt;p&gt;하지만 진정으로 오늘 6~10세 아이들을 생각해 봐야 합니다. 그들이 축구를 하고 있나요? 20년 후 중국 축구가 어떤 모습일지 짐작할 수 있을 겁니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>도덕적 결핍, 인간성 상실</title>
        <link>https://blog.ttf248.life/ko/p/moral-deficit-humanity-loss/</link>
        <pubDate>Sat, 15 Feb 2020 01:20:34 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/moral-deficit-humanity-loss/</guid>
        <description>&lt;p&gt;사람이 일을 할 때, 무엇보다 먼저는 양심에 거리낌 없이 하는 것이 중요합니다. 그래야 밤잠을 편안하게 잘 수 있고, 사소한 문제에서부터 큰 원칙의 문제까지 잘못 판단하지 않도록 해야 합니다. 만약 잘못했다면 최선을 다해 바로잡고, 숨기려 하거나 잊으려 해서는 안 됩니다. 사람은 착각하기 쉽지만, 기억력이 좋은 종족이기도 합니다. 마음 편안함은 귀결처이며, 스스로에게 되물어봐도 부끄러움 없이 살 수 있을 때 삶이 한결 가벼워집니다.&lt;/p&gt;
&lt;h2 id=&#34;영상-원본&#34;&gt;영상 원본
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://v.youku.com/v_show/id_XNDI5MzA4NjQ4NA==.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;视频原始链接点击此处&lt;/a&gt;, 저작권 문제가 있을 경우 연락 주시면 삭제하겠습니다. 이 글은 단순 텍스트 번역입니다.&lt;/p&gt;
&lt;h2 id=&#34;스크립트&#34;&gt;스크립트
&lt;/h2&gt;&lt;p&gt;저에게 여덟 글자가 있는데, 꽤 무겁게 들립니다. 저는 지금 우리 사회가 도덕적 적자를 겪고 있으며 인간성이 손상되었다고 생각합니다. 시대는 항상 문제 발생 후 해결이라는 논리 순환 속에서 나아가지요. 인내심을 가지고 그 재구성을 기다려야 합니다. 중국과 같이 큰 나라인 경우, 많은 것들이 점진적인 재구성 과정입니다. 그러니 변화와 재구성에 대해 비관적으로 생각하지 마세요.&lt;/p&gt;
&lt;p&gt;최근 중국은 두 개의 태풍과 싸우고 있습니다. 하나의 태풍은 보이지 않고, 다른 하나는 보입니다. 보이지 않는 태풍은 백신이고, 이는 우리 마음속 안보의 댐을 강타합니다. 보이는 태풍은 중국 본토에 상륙하여 베이징과 천진을 피해를 입히는 경우는 드물며, 세 개의 직할시가 함께 맞서는 태풍은 수십 년 동안 없었습니다. 이 이야기는 잠시 접어두고, 다음으로 당신이 고민해야 할 것은 스스로의 행복입니다. 당신에게 큰 변화가 있었고 많은 답을 얻었지만, 주변 환경이 변하지 않는다면 행복할 수 있을까요? 저는 8글자로 표현했는데, 현재 우리는 도덕적 결핍과 인간성 상실에 직면해 있으며, 이것이 가장 큰 결핍이자 손실입니다.&lt;/p&gt;
&lt;p&gt;하지만 사람들은 백신의 안전성에 대한 우려가 완전히 해결되기를 기대하고 있습니다. 이는 과거 분유 사건과 마찬가지입니다. 그래서 역사를 살펴보고 미국의 식약청이 확립되고 완벽한 법률 체계가 갖춰진 과정 또한 과거 분유 및 유제품의 불안전성과 밀접하게 관련되어 있음을 알아야 합니다. 삼루 분유 사건은 중국의 유제품 분야에 큰 변화를 가져왔고, 백신 접종을 연이어 진행하는 것은 아니지만 이번에는 중단되기를 바랍니다. 시대는 문제 발생과 해결, 그리고 완전한 해결이라는 논리적 순환 속에서 나아갑니다. 그렇지 않았다면 기자들은 무슨 존재이며, 시민들은 왜 존재하는 것일까요?&lt;/p&gt;
&lt;p&gt;그래서 제가 생각하기에 우리 각자가 할 수 있는 일은 관심입니다. 하지만 문제는 중국 사람들이 너무 쉽게 잊어버린다는 것입니다. 방금 말씀드린 것처럼, 다른 사람의 차를 박고 도로변에 세워두고 달아나면 아무도 막지 않습니다. 우리 이웃이나 동료 중 상당수가 이런 사람들입니다. 그래서 천천히 변화시켜야 합니다. 그리고 우리와 같이 평범한 시민으로서 할 수 있는 일은 관심을 갖고 잊지 않는 것입니다. 과정이 부족해서가 아니라, 먹을 것이 없고 입을 것이 없을 때 이상에 대해 이야기하는 것은 설득력이 없습니다. 하지만 그들이 배불리 먹고 따뜻하게 옷을 입으면 세계 당뇨병 발병률 1위 국가, 고혈압 발병률 1위 국가 등 여러 개의 1위 국가가 됩니다. 그때 중국인들은 달리기를 시작하고, 다이어트를 하기 시작합니다. 여기 계신 여성분들 중 누가 이런 경험이 없겠습니까? 제가 많이 먹지 않으면 다이어트할 힘이 없는 혹독한 경험 말입니다. 이것이 작은 변화입니다.&lt;/p&gt;
&lt;p&gt;우리가 이야기하는 정신적인 차원도 마찬가지일 텐데, 배불리 먹고 따뜻하게 입었을 때, 달리기를 시작하고 다이어트를 할 때, 천천히 정신적인 욕구도 함께 늘어나는 것 같습니다. 예를 들어 제가 예전에 담배를 피웠는데, 달리기를 시작한 후 갑자기 흐릿해진 기억이지만 20일 넘게 담배를 안 피우다가 다시는 안 피운다는 걸 깨달았습니다. 물론 특별히 완전히 끊었다고 말하지는 않겠습니다. 의식적으로 하는 것보다 거창하게 느껴지거든요. 한 해 동안 두세 개비 정도는 피울 수도 있습니다. 생활 방식이 변하면 많은 것들이 함께 바뀌는데, 중국인으로서 인내심을 가지고 변화를 기다려야 한다고 생각합니다.&lt;/p&gt;
&lt;p&gt;점점 더 많은 사람들이 자신을 행복하지 않다고 느끼지만, 스스로 불행에 빠져들지 않는 것 같아요. 우울증은 늘고 있지만, 다른 한편으로 더 많은 사람들이 긍정적인 삶의 방식을 찾고 있기도 하죠. 그래서 정신적인 측면이 성장하고 있어요. 너무 비관적으로 생각하지 마세요. 똑같은 일이라도 어떻게 보느냐가 중요해요. 저는 길에서 운전하며 끼어드는 사람들을 자주 볼 때 좌절감을 느껴요. 하지만 눈을 돌리면, 다른 쪽 차선에 늘어선 차들이 훨씬 많다는 걸 알게 되죠. 바로 그런 과정이에요. 오늘처럼 비가 그친 저녁에 이렇게 많은 사람들이 모여서 쓸모없는 이야기를 나누는 것 자체가 즐거운 일 아니겠어요?&lt;/p&gt;
&lt;p&gt;이 또한 변화의 일종이고, 많은 것들이 다른 방식으로 생각해야 하는 문제인데, 앞으로 점차 늘어날 것이 많다고 생각합니다. 예를 들어 창업을 말씀하셨는데, 누구든 평생을 창업하며 사는 것입니다. 모든 사람의 인생은 창업이라고 할 수 있습니다. 지금 우리는 창업에 너무 시대적인 의미를 부여하고 있지만, 사실 창업은 항상 존재했습니다. 소동파도 창업하지 않았습니까? 이백도 창업하지 않았습니까? 평생 동안 많은 것을 창조했고, 결국 자신의 브랜드를 만들어냈습니다. 대부분 성공하지 못해도 괜찮습니다. 중요한 것은 충분히 개성 있게 살고 가치 있다고 느끼는 것입니다. 지금 중국이 특히 부족한 것은 좋은 실패를 또 다른 성공의 가치로 받아들이는 문화입니다. 중국인들은 오직 성공적인 결말만을 인정하지만, 좋은 실패는 성공이 아니라는 것을 받아들이지 않습니다.&lt;/p&gt;
&lt;p&gt;我覺得 그건 정말 어렵다고 생각해요. 그래서 중국 축구가 잘 안 되는 이유가 많다는 걸 알게 됐는데, 그중 하나는 누구도 공을 잃을까 봐 자기에게 패스하거나 다른 사람에게 패스하는 것을 두드러지게 꺼린다는 거예요. 그런 플레이 방식이 없으니 당연히 아주 작은 이유 중 하나일 뿐이에요. 그래서 제 나이를 생각해보면 30대 이후로, 서론에서 &amp;lsquo;서두르지 마라&amp;rsquo;라고 썼는데, 지금은 50세가 되니 조금 급해졌어요. 시간이 너무 빨리 지나가고, 기대했던 많은 것들이 현실이 되지 않았으니까요. 하지만 동시에 중국이라는 나라의 경우, 많은 것이 점진적인 변화 과정이라는 것을 이해하고 있어요. 부모님 세대를 보면, 신호등이 없다고 생각하는 분들도 있지만 가끔 아이가 아빠 손을 잡는 모습을 볼 수 있죠. 변하고 있고, 변화를 겪고 있는 거니까요. 그래서 인내심을 좀 가져야 할 것 같아요.&lt;/p&gt;</description>
        </item>
        <item>
        <title>시간에 대한 답을 찾으려면 많은 책을 읽어야 한다</title>
        <link>https://blog.ttf248.life/ko/p/about-time-and-books/</link>
        <pubDate>Fri, 14 Feb 2020 07:27:21 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/about-time-and-books/</guid>
        <description>&lt;p&gt;나라 전체적으로는 좋아지고 부강해지는 추세인데, 사람의 허영심이 그만큼 강하지 않으면 좋겠네요. 90년대부터 지금까지 제가 접촉한 가정들을 보면 모두 예전보다 삶이 훨씬 나아졌고, 동시에 부자도 더 많아졌습니다. 시장 경제 발전 과정에서 불가피하게 빈부 격차가 확대되는 현상이 나타났습니다.&lt;/p&gt;
&lt;p&gt;흔히 말하는 계층 고착화, 상승 경로가 막힌다는 것은 현재 세상의 흔한 문제점이며, 우리 당이 인민의 기본 복지 및 사회 보장에 기여한 부분은 당연히 알아주어야 합니다. 소소한 일상생활이 점점 더 좋아질 것이고, 집을 사지 않고 싶다면 렌트하셔도 좋고, 자녀 교육에도 교육 자원 불균형 문제가 있을 수 있으니 때로는 선택해야 할 수도 있습니다. 더 좋은 직업 기회와 환경을 원할지, 아니면 가족과 함께하는 시간을 더 많이 할지 고민하고, 자신의 생각을 타인에게 강요하지 마세요. 특히 자녀나 가족에게도요. 차분히 앉아서 잘 이야기해 보세요. 결국 삶은 점점 나아질 것입니다.&lt;/p&gt;
&lt;h2 id=&#34;영상-원본&#34;&gt;영상 원본
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://v.youku.com/v_show/id_XNDI5MzA4NjcyNA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;视频原始链接点击此处&lt;/a&gt;, 저작권 문제가 있을 경우 연락 주시면 삭제하겠습니다. 이 글은 단순 텍스트 번역입니다.&lt;/p&gt;
&lt;h2 id=&#34;삼십-세&#34;&gt;삼십 세
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/about-time-and-books/30%E5%B2%81.jpg&#34;
	width=&#34;896&#34;
	height=&#34;503&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;30岁&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;올해 벌써 50세가 됐습니다. 예전에는 상상도 못 했는데, 이제야 비로소 노(老)라고 느낍니다. 30살 때 모습입니다. 30살 때는 자신이 젊고 예쁘다고 생각하지 않았지만, 50살이 되어서 뒤돌아보니 괜찮네요. 30대에 가장 큰 인생의 깨달음은 무엇일까요? 돌아보면 뺄셈이라는 생각이 듭니다. 핵심 키워드는 뺄셈이죠. 어쩌면 고통과 즐거움 속에서도 뺄셈을 하는 것 같습니다. 많은 것을 경험하고 생각하고 글로 남겨두고, 새로운 시작을 위해 달려갑니다. 하지만 제게 있어서 30대는 스스로에게나 다른 분들에게나 뺄셈이 매우 중요했습니다.&lt;/p&gt;
&lt;p&gt;我现在在带东西联大的学生，我经常提醒他们，在30岁之前要玩命的做加法，要去尝试，你不知道自己有多少种可能，你也不知道命运将会给你怎样的机缘。所以不是你怎么知道，但是有的人就在20多岁的时候拼命的事，各种加法，但是忘了收，忘了到一定的时候要做减法，我觉得30岁左右是人生非常重要的一个，要在做了一系列加法和四处乱跑之后，要做一次减法的重要时间，否则就晚了，为什么要做减法？你不是所有的都适合，也不是适合你的，所有的事，你都该去做。 저는 현재 연대생들을 지도하고 있는데, 항상 30세 이전에 모든 노력을 다해 더하기를 해야 한다고 강조합니다. 다양한 가능성을 탐색하고, 운명이 어떤 기회를 줄지 모르는 상태에서 부딪혀 봐야 합니다. 하지만 어떻게 알겠습니까? 문제는 어떤 사람들이 20대에 필사적으로 더하기만 하고 빼기를 할 때가 되었다는 것을 잊어버리는 것입니다. 저는 30세 전후가 인생에서 매우 중요한 시기라고 생각합니다. 여러 가지 더하기와 방황 끝에 한 번의 빼기가 필요한 시기입니다. 그렇지 않으면 너무 늦습니다. 왜 빼기를 해야 하는 걸까요? 모든 것이 당신에게 맞는 것은 아니며, 당신에게 어울리는 것도 있는 것입니다. 모든 것을 다 해봐야 합니다.&lt;/p&gt;
&lt;p&gt;너를 묶는 8가지 선, 얼마나 멀리 도망갈 수 있을까? 서로 제약될 수도 있다&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/about-time-and-books/%E5%BB%89%E4%BB%B7.jpg&#34;
	width=&#34;896&#34;
	height=&#34;505&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;廉价&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;30살이 되어서는 특별 승진을 했는데, 학자라면 교수고 기자라면 고급 기자가 되는 것이죠. 29살에 특별 승진했고, 지금처럼 이런 일이 드물어진 후에는 갑작스러운 커다란 혼란을 느끼기 시작했습니다. 2000년 시드니 올림픽을 진행하며 박수도 많이 받았지만, 문득 모든 것이 어딘가 잘못된 것 같다고 느꼈습니다. 스스로에게 물었습니다. 나는 결국 무엇을 해야 하는 걸까? 무엇을 버려야 할까? 그해 아주 중요한 감산을 했는데, 제 프로그램을 중단했습니다. 1년 동안 방송 출연 없이 지냈고, 당시 사람들이 저에게 “진행자는 한 달만 방송하지 않으면 괜찮지만 반 년이 지나면 아무도 당신을 기억하지 못할 겁니다.”라고 말했습니다. 저는 “제 얼굴이 이렇게 싸구려 같으니 어쩌겠어요.”라고 답했습니다.&lt;/p&gt;
&lt;p&gt;그 해부터 새로운 프로그램 개발을 시작했다. 고통과 즐거움을 모두 겪은 후에, 01년에는 한동안 완전히 멈춰 있었다. 오늘에 이르러서 돌아보니 그때의 ‘뺄셈’이 중요했던 것 같다. 당시에는 스포츠를 할 수도 있고, E(엔터테인먼트)를 할 수도 있고, 다양한 재미있는 일들을 할 수 있었고, 프로듀서를 할 수도 있었다. 하지만 하지 않았다. 나는 뉴스만 해야 하고, 뉴스가 가장 어울린다는 것을 깨달았다. 그래서 당시 세 개의 프로그램의 프로듀서였는데, 갑자기 모두 그만두고 오늘날의 내가 되었다. 단순해진 것이다. 며칠 전 동료들과 이야기하면서 30대 초반에 내렸던 중요한 결정에 대해 말했는데, 할 수 있는 일들이 많았지만 나는 뉴스 일을 하기로 했다. 깊은 우물 같은 자리였는데, 부소장으로 승진할 수도 있었지만 거절하고 평범한 사람의 기반으로 돌아왔다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/about-time-and-books/%E6%9C%AC%E7%A7%91%E7%94%9F.jpg&#34;
	width=&#34;896&#34;
	height=&#34;502&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;本科生&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;428px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;지금까지 저는 중앙电视台 부서장급 간부였고, 절대적으로 학사 졸업생 출신이 아니었습니다. 당신은 우리 체제를 이해하고 있지만, 저는 거절했습니다. 한번 보자는 생각이었죠. 학사 학위로는 얼마나 올라갈 수 있을지, 왜 끊임없이 배우면서 대학원생을 지도할 수 없을까요? 네, 지금은 대학원생 11명을 매년 맡고 있습니다. 다 돌아온 결과라고 할 수 있겠네요. 젊었을 때는 특히 분주함 속에서 모든 것을 가져야 한다는 느낌이 들곤 했습니다. 조금이라도 부족한 것이 있으면 마음이 불편했습니다.&lt;/p&gt;
&lt;p&gt;좌중 여러분은 절제하는 법을 배우는 것도 중요합니다. 28살 때, 1996년 올림픽을 보면서 저는 한 마디를 지어냈습니다. &lt;strong&gt;缺陷是完美的重要组成部分，这个世界上就没有完美&lt;/strong&gt;. 曾国藩의 장편 소설에도 중요한 문장이 하나 실려 있습니다. 인생의 최고의 경지는 무엇일까요? 曾国藩은 자신의 서당 이름을 求阙厅이라 하고 싶었습니다. 꽃이 완전히 피기 전이 가장 좋을 때이고, 달이 완전히 둥글기 전이 가장 좋을 때입니다. 하지만 보통 사람들은 이것을 결함이라고 생각하고 완벽하지 못하다고 느낍니다. 최고를 향해 나아가는 것이라고 생각하지만, 한 사람을 망치는 최고의 방법은 그에게 완벽과 극단을 추구하게 하는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/about-time-and-books/%E8%8A%B1%E6%B2%A1%E6%9C%89%E5%85%A8%E5%BC%80.jpg&#34;
	width=&#34;893&#34;
	height=&#34;504&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;花没有全开&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;세상에는 완벽한 것이 없다. 꽃이 완전히 피기 전이 가장 아름다운 때이고, 꽃이 활짝 피면 떨어질 날이 가까워진다. 달이 둥글어지기 시작하면 초승달로 변하는 날이 다가온다. 그래서 나는 이것을 내 서른 살에 주신 중요한 동기 부여와 깨달음이라고 생각한다. 마흔 살에는 그럴 때보다 더 아름답지는 않지만, 편안해졌고 자유로워졌다. 왜 이제는 정장 차림이나 흑백 사진 대신 행복을 묻기 시작했을까?&lt;/p&gt;
&lt;h2 id=&#34;사십-세&#34;&gt;사십 세
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/about-time-and-books/40%E5%B2%81.jpg&#34;
	width=&#34;894&#34;
	height=&#34;499&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;40岁&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;중국인들의 말 중에 40대에 이르러서는 &amp;lsquo;고뇌&amp;rsquo;라고 하는데, 30대는 빼기이고, 40대는 혼란이라고 합니다. 회의적인 시각으로 보면, 요즘 시대에는 40대의 혼란을 겪는 사람들이 가장 많은 것 같습니다. 저의 중년 위기는 유독 빨리 찾아와서 서른여섯 살쯤부터 이 모든 일이 가치가 있는지 고민하게 됩니다.&lt;/p&gt;
&lt;p&gt;뜻이 있을까요? 내가 과연 무엇을 행복하다고 느끼고 싶었을까요? 이 책은 바로 이러한 혼란 속에서 탄생했습니다. 30살이 되면 많은 행복의 목표가 물질과 연결되어 있다는 것을 깨닫게 되고, &amp;lsquo;30세에 독립&amp;rsquo;이라는 말은 학력과 집안을 의미합니다. 차도 있고 집도 있어야 장모님이 딸을 시집보내 주죠. 매우 현실적인 문제이지만, 40대에 해답을 찾기는 어렵습니다. 옛날 사람들은 평균 수명이 지금보다 훨씬 짧았기 때문에 40에 지혜를 얻는다는 말은 압축된 의미였을 겁니다. 저도 40대인데 아직 혼란스럽습니다. &lt;strong&gt;物质没有给我带来，我以为会带给我的幸福&lt;/strong&gt;. 또한 40세가 되어서 많은 사람들이 저에게 &amp;ldquo;행복하십니까?&amp;ldquo;라고 묻곤 합니다.&lt;/p&gt;
&lt;p&gt;그 책 제목이 행복의 물결인가? 물음표는 내 마음속의 혼란을 의미한다. 중년의 위기는 40세에 수많은 질문에 답해야 할 때 찾아오고, 40세 정도가 되면 자신과 더 많은 대화를 나누고 다양한 것을 읽어 스스로에게 답을 찾아야 한다. 다행히 내가 36, 7살쯤에 도덕경의 세계에 들어갔다. 백설에서 이미 언급했듯이, 40세에 생각해야 할 때 주변 환경이 변하지 않고, 특히 소프트 환경이 개선되지 않으면, 집을 나서는 순간 빨간불과 초록불이 뒤섞인 풍경을 마주하고, 물건은 가짜이고 백신도 믿을 수 없다.&lt;/p&gt;
&lt;p&gt;저는 이틀 동안 중국이 두 개의 태풍과 싸우고 있다고 말했습니다. 하나의 태풍은 보이지 않고, 다른 하나는 보이는 태풍입니다. 보이지 않는 태풍은 백신이고, 그것은 우리의 내면의 안전 둑을 공격합니다. 또 다른 태풍은 중국에서 거의 상하이에 상륙하지 않지만, 이 이야기는 논점에서 벗어납니다. 이제 당신은 스스로를 돌보고, 큰 변화가 있었고, 많은 답을 얻었지만 주변 환경이 변하지 않으면 행복할 수 있을지 고민해야 합니다. &lt;strong&gt;我有八个字说得比较重，我觉得我们现在是道德赤字人性亏损，这才是目前最大的赤字和最大的亏损&lt;/strong&gt; 얼마 전, 멀리 떨어지지 않은 곳에서 두 대의 차가 충돌하는 것을 직접 목격했습니다. 충돌은 심각하지 않았습니다. 책임 있는 사람은 다른 차를 들이받았고, 길가에 세우자고 말했습니다. 상대방도 천천히 길가에 세울 준비를 하고 있었는데, 앞차가 갑자기 도망갔고, 아무도 그를 막지 못했습니다.&lt;/p&gt;
&lt;p&gt;이런 사람이 책임감 있는 아버지일 수 있을까? 책임감 있는 아들이 될 수 있을까? 게다가 그가 당신의 동료가 될 수도 있는데, 도덕적 결함과 인간성 상실은 반드시 당신에게 영향을 미칠 것이다. 아무리 훌륭한 사람이라도, 집에서만 나오지 않는다고 해서 문제가 해결되는 것은 아니다. 예를 들어, 백신 접종을 못 받는 아이들이나, 문제 있는 배달 음식을 먹게 될 수도 있다!&lt;/p&gt;
&lt;p&gt;그래서 중국인이 평범한 백성에서 시민으로 어떻게 변화하는지 배우는 것, 아마도 내가 40세쯤 되었을 때, 나 자신에게 그리고 사회에 중요한 질문이 되는 문제일 것이다&lt;/p&gt;
&lt;p&gt;만약 30대가 마이너스라면, 40대는 혼란이라면, 나는 50대에 스스로에게 주고 싶은 단어는 호기심이다. 50대는 어색하다. 앞뒤가 안 맞고, 나아가면 공격할 수 있지만 물러나면 썩 괜찮다. 자신이 얻은 무언가를 가지고 10년을 누워 있다가 은퇴해도 괜찮을 것 같다.&lt;/p&gt;
&lt;p&gt;최근에 한 책을 보는데, 그 책 중에 흥미로운 내용이 있었어요. 실리콘밸리에서 진정으로 성공한 창업자들은 주로 50대 후반인 경우가 많다는 겁니다. 이건 우리의 생각과는 다른 점이죠. 중국도 어떻게 해야만 젊은 세대의 일로만 치부하지 않고 창업을 바라볼 수 있을까요? 마치 자원봉사자를 모두 청년 봉사자로 취급하는 것은 부적절한 것과 마찬가지입니다. 지난주에 제가 진행한 프로그램에서 은퇴한 초중고 교사를 모집하는데, 매년 2~3만 위안의 보조금을 받고 고향으로 가서 가르치는 건데, 반드시 우수자여야 합니다. 이건 퇴직 후 재취업을 개척하는 선구적인 시도라고 생각합니다. 물론 단순한 자선 활동은 아니지만, 50대에 도달하려면 아직 거리가 있습니다. 어떻게 나아갈 수 있을까요?&lt;/p&gt;
&lt;h2 id=&#34;오십-세&#34;&gt;오십 세
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://blog.ttf248.life/p/about-time-and-books/50%E5%B2%81.jpg&#34;
	width=&#34;899&#34;
	height=&#34;506&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;50岁&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;더 중요한 것은 50세 사람들에게 두 가지 도전이 있다는 것입니다. 첫 번째 도전은 바로 자기 자신입니다. 아직 많은 것에 대해 호기심을 느끼고 있는지, 그리고 자신의 인생관은 어떠한지 자문하게 됩니다. 제 50대에 가장 큰 수확은, 혹은 지금 어떤 방식으로 살아가고 있는지, &lt;strong&gt;我善待每一个今天，20岁的时候容易活在明天里，一不注意50岁容易活在昨天里，但是我努力的克制自己，既不活在明天，也不活在昨天，我善待每一个今天，50岁的人就不该总是明天再说，或者昨天真好！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;오늘 제일 좋았던 건, 내 눈에 띄었던 건,蔡琴의 콘서트 DVD를 보는 거였어. 蔡琴이 한 말 중에 &amp;ldquo;사진을 볼 때마다 두 년 전의 내가 참 예뻤다고 생각하지만, 그때는 스스로가 예쁘다고 생각해 본 적은 없었어.&amp;ldquo;라는 말이 인상 깊더라. 이 문장에 뭔가 맛이 있는 것 같아. 내가 서른 살 때는 그렇게 생각하지 않았지. 그때는 잘생겼다고 생각하고 내 결점들이 많다고 생각했지만, 20년이나 지나서 뒤돌아보니 그랬더라고.&lt;/p&gt;
&lt;p&gt;옛날에 저도 젊었었고, 머리도 많았었죠. 그러니 당신의 오늘을 소중히 여기고, 2년 후에 다시 만나요. 그때가 최고일 거예요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;다리가 걷잡을 수 없을 때, 휠체어에 앉아 달리고 농구를 하던 시절을 매일 그리워하며 고통스러워했던 것과 같습니다
몇 년이 더 흘러, 휠체어에 앉아 있으면 욕창이 생기고 온몸이 고통스러웠다. 그 때마다 몇 년 전 아프지 않고 조용히 휠체어에 앉아 있을 수 있었던 시절을 그리워했다.
또 몇 년이 흘러, врок я 신장 불선증을 얻었고, 항상 투석을 받아야 한다. 그때 나는 다리 궤양이 있던 휠체어 시대를 그리워한다. 만약 50세까지 살지 못하면, 지난 50년은 헛됐다는 생각이 든다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;사실 저는 50세가 되어서야 이道理를 깨닫는 것을 기다릴 필요는 없다고 생각해요. 30대, 40대에 알아차려야죠. 모든 것이 쉽게 지나갈 수 있어요. 여행 중의 한 끼 식사를 놓치면, 30년 후에 다시 먹어도 맛이 없을 수도 있으니, 저는 50세가 되었을 때 가장 먼저 느낀 점은 오늘날을 소중히 여기는 것 같아요.&lt;/p&gt;
&lt;p&gt;두 번째는 호기심인데, 저는 이제 많은 것을 겪어보고 경험했기 때문에 더 이상 많은 일에 대해 궁금해하지 않아도 될 것 같다는 생각을 하곤 합니다. 하지만 스스로를 호기심을 유지하도록 독려합니다. 그래서 지금 하는 모든 일에 호기심을 가지고 임하고 있습니다. 휴대폰을 세로로 찍을 수 있을까요? 가능합니다. 현장 보도를 하고, 겉으로는 매우 크고 엄숙한 듯 보이는 어떤 회의에 참석할 수도 있고, 더 편안하게, 더 재미있게 연결 방송을 할 수도 있습니다. 새로운 미디어를 통해 전파하는 것도 가능합니다. 호기심은 인류 진보를 촉진하는 가장 중요한 동력이라고 생각합니다. 왜 개인의 성장을 촉진하는 가장 중요한 동력이 될 수 없을까요? 한 민족이 호기심을 잃으면 끝입니다. 또 다른 큰 차원에서 보면, 50세는 중요한 시험입니다. 40대에서 50대에 어떤 기득권자가 될 것인가요? 저는 주변의 많은 사람들이 젊은 시절 희망을 가지고 꿈을 이루려고 하지만, 일단 꿈을 이루고 기득권자가 되면 다른 사람들의 꿈을 가로막는 사람이 된다는 점이 매우 걱정됩니다. 맞습니까? 그는 눈 깜짝할 사이에 자신이 가장 싫어했던 방식으로 젊은 세대와 일에 대하고 있습니다.&lt;/p&gt;
&lt;p&gt;몇 년 전부터 제가 직접 자원봉사로 매년 11명의 대학원을 모집하여 두 해 동안 지도하고, 이제 벌써 5개 학년을 배출했으며 총 55명의 순수 대학원생들이 졸업했습니다. 이러한 특권을 누리는 것은 매우 행복한 일입니다. 감정을 공유하고 그들을 이끌 수 있는 능력이 생기죠. 매일 수업을 마치고 저녁 식사를 함께 하면 큰 돈이 들지 않습니다. 하지만 이것은 특권층이 해야 할 일이기도 합니다. 특권층은 두 가지 역할을 할 수 있습니다. 한 가지는 조력자가 되는 것이고, 저는 “당신 덕분에”라고 말하는 대신, 새로운 젊은이들을 더 잘 대우함으로써 감사를 표현하고 싶습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果天天在那说谢谢你，却成为阻拦者&lt;/strong&gt;: 다음은 다른 사람을 위한 길을 닦는 일입니다. 중국이 물질적, 경제적, 사상적, 문화적 모든 분야에서 이익을 얻은 사람들이 당신도 그렇게 되었을 때 어떻게 해야 할지 고민해야 합니다. 어제 기차를 밀었던 사람이 오늘 기차를 막는 사람이 되는 것, 뒤돌아보면 중국 역사 어디서나 그렇습니다. 오늘날에도 마찬가지입니다. 심지어 더 많은 경우도 있습니다. 그래서 모든 이익을 얻은 사람들이 당신이 젊었을 때 어떤 사람을 만나고 싶다고 생각했는지처럼 다시 그렇게 하기를 촉구합니다. 그런 사람을 저는 아마 충분히 잘하지 못할 것입니다. 하지만 적어도 저는 생각하고, 하고, 말하고 있습니다.&lt;/p&gt;</description>
        </item>
        <item>
        <title>표준 라이브러리 컨테이너의 메모리 할당자: allocator</title>
        <link>https://blog.ttf248.life/ko/p/standard-library-container-memory-allocator/</link>
        <pubDate>Mon, 30 Dec 2019 13:26:19 +0800</pubDate>
        
        <guid>https://blog.ttf248.life/ko/p/standard-library-container-memory-allocator/</guid>
        <description>&lt;p&gt;사용자 정의 할당자는 성능 향상, 메모리 사용 효율성 증대, 그리고 빈번한 소량 메모리 할당 문제를 해결할 수 있습니다&lt;/p&gt;
&lt;h4 id=&#34;전인&#34;&gt;전인
&lt;/h4&gt;&lt;p&gt;최근 네트워크 데이터 패킷 개발을 진행하면서 빈번하게 작은 메모리 블록을 할당하고 해제해야 하는데, 메모리 풀을 사용하려 했더니 기존 메모리 풀들을 살펴보니 이런 것을 발견했다&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/cacay/MemoryPool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cacay/MemoryPool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;인터페이스를 보니까 좀 이상하다, 이 메모리 풀 구현이 어떻게 이렇게 특이할까. &lt;code&gt;MemoryPool&lt;/code&gt;的实现逻辑，是在申请固定大小的内存空间。看过boost的内存池接口，提供的是一个模板，用的时候进行实例化。正巧这个库已经有文章进行过介绍，提到了&lt;code&gt;allocator&lt;/code&gt; 개념 말이야.&lt;/p&gt;
&lt;h4 id=&#34;wikihttpszhwikipediaorgwikie58886e9858de599a8_c2b2b&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_%28C%2B%2B%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wiki&lt;/a&gt;
&lt;/h4&gt;&lt;p&gt;C++ 프로그래밍에서 할당자(allocator)는 C++ 표준 라이브러리의 중요한 구성 요소입니다. C++ 라이브러리에는 연결 리스트, 집합 등 다양한 “컨테이너” 데이터 구조가 정의되어 있으며, 이 컨테이너들의 공통적인 특징 중 하나는 프로그램 실행 시간에 크기를 변경할 수 있다는 것입니다. 이를 구현하기 위해 동적 메모리 할당이 필수적이므로, 할당자는 컨테이너의 메모리 할당 및 해제 요청을 처리하는 데 사용됩니다. 다시 말해, 할당자는 표준 템플릿 라이브러리(STL) 컨테이너의 메모리 관리에 대한 저수준 세부 사항을 캡슐화합니다. 기본적으로 C++ 표준 라이브러리는 자체 제공하는 범용 할당자를 사용하지만, 필요에 따라 프로그래머는 자신만의 할당자를 정의하여 대체할 수 있습니다.&lt;/p&gt;
&lt;p&gt;분포자는 원래 C++ 표준 템플릿 라이브러리(STL)의 일부로 알렉산드르 스테파노프가 “라이브러리를 더욱 유연하게 만들고, 하위 데이터 모델에 의존하지 않는 방법”을 목표로 발명했지만, C++ 표준 위원회는 STL을 표준으로 채택하는 과정에서 완전한 데이터 모델 추상화가 용납할 수 없는 성능 저하를 야기한다는 것을 깨달았습니다. 이러한 절충안으로 인해 표준에서 할당자에 대한 제약이 더욱 엄격해졌고, 결과적으로 현재 표준에 설명된 할당자의 사용자 정의 가능성은 스테파노프의 원래 구상에 비해 크게 제한되었습니다.&lt;/p&gt;
&lt;p&gt;할당기 사용자 정의는 제한적일 수 있지만, 많은 경우 다양한 메모리 공간(공유 메모리 및 재활용 메모리와 같은)에 대한 접근 방식을 캡슐화하거나 메모리 풀을 사용한 메모리 할당 시 성능을 향상시키기 위해 여전히 사용자 정의 할당기가 필요합니다. 또한, 빈번하게 소량의 메모리를 할당하는 프로그램에서는 메모리 점유 및 실행 시간 측면에서 전용으로 최적화된 할당기를 도입하면 상당한 이점을 얻을 수 있습니다.&lt;/p&gt;
&lt;h4 id=&#34;使用需求httpszhwikipediaorgwikie58886e9858de599a8_c2b2b&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/wiki/%E5%88%86%E9%85%8D%E5%99%A8_%28C%2B%2B%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用需求&lt;/a&gt;
&lt;/h4&gt;&lt;p&gt;사용자 정의 할당기를 사용하는 주된 이유 중 하나는 성능 향상입니다. 전용 사용자 정의 할당기는 프로그램의 성능을 높이거나, 메모리 사용 효율성을 개선하거나, 이 둘 모두를 달성할 수 있습니다 [4][8]. 기본 할당기는 new 연산자를 사용하여 저장 공간을 할당하는데, 이는 종종 C 언어의 힙 할당 함수(malloc())를 통해 구현됩니다 [9]. 힙 할당 함수는 일반적으로 일시적으로 많은 메모리를 할당하는 데 최적화되어 있으므로, 대량의 메모리를 한 번에 할당해야 하는 컨테이너(예: 벡터, 양방향 큐)의 경우 기본 할당기는 효율적인 경향이 있습니다 [8]. 그러나 연결 리스트와 같이 빈번하게 소량의 메모리를 할당해야 하는 컨테이너의 경우 기본 할당기를 사용하면 일반적으로 효율성이 매우 낮습니다 [4][9]. 또한 malloc() 기반의 기본 할당기는 낮은 지역성[4] 및 메모리 조각화 발생 가능성[4][9]과 같은 여러 가지 문제점을 가지고 있습니다.&lt;/p&gt;
&lt;p&gt;간단히 말해서, 이 부분은 (……)이 해당 표준의 할당기 관련 《나에게 꿈이 있어요》와 같습니다. 꿈이 실현되기 전에는 이식성을 중시하는 프로그래머들은 상태 없는 사용자 정의 할당기를 사용할 수밖에 없을 것입니다.
——스코트 메이스, 《Effective STL》
이러한 점을 감안하여, 이 경우에 사람들은 빈번한 소량 할당 문제를 해결하기 위해 메모리 풀 기반 할당기를 자주 사용한다[8]. 기본 “요청 시 할당” 방식과 달리, 메모리 풀 기반 할당기를 사용하는 경우 프로그램은 미리 대용량 메모리(즉, &amp;ldquo;메모리 풀&amp;rdquo;)를 할당하고, 필요할 때 사용자 정의 할당기는 요청자에게 풀 내 메모리의 포인터를 반환하기만 한다. 객체 소멸 시에는 실제로 메모리를 해제하지 않고, 메모리 풀의 수명이 종료될 때 비로소 해제를 지연시킨다[주 1][8].&lt;/p&gt;
&lt;p&gt;“사용자 정의 할당기”라는 주제에 대해 스콧 메이어스의 “Effective STL”과 안드레이 알렉산더레스쿠의 “Modern C++ Design”과 같이 여러 C++ 전문가 및 관련 저자들이 참여하여 논의해 왔습니다. 메이어스는 특정 타입 T에 대한 모든 할당기 인스턴스가 동일해야 한다면 이식 가능한 할당기 인스턴스는 상태를 포함해서는 안 된다고 지적했습니다. C++ 표준은 라이브러리 구현자가 상태 기반 할당기를 지원하도록 권장하지만[문헌 4], 메이어스는 관련 단락이 “（보이는 듯한）아름다운 관점”이지만 거의 말도 안 되는 소리이며, 할당기 제한이 “지나치게 엄격하다”고 주장했습니다[4]. 예를 들어, STL의 list는 splice 메서드를 허용하는데, 이는 list 객체 A의 노드가 다른 list 객체 B로 직접 이동될 수 있다는 의미입니다. 이는 A의 할당기가 할당한 메모리가 B의 할당기에 의해 해제될 수 있어야 하므로 A와 B의 할당기 인스턴스가 동일해야 함을 시사합니다. 메이어스의 결론은 할당기를 정적 메서드를 사용하는 타입으로 정의하는 것이 가장 좋다는 것입니다. 예를 들어, C++ 표준에 따르면 할당기는 rebind 메서스를 구현한 other 클래스 템플릿을 제공해야 합니다.&lt;/p&gt;
&lt;p&gt;또 다른 예로, Bjarne Stroustrup는 그의 저서 《C++ 프로그램 설계 언어》에서 “각 객체 정보가 다를 수 없도록 할당자를 엄격하게 제한하는 것은 큰 문제가 아니다.”라고 주장하며 대부분의 할당자는 상태를 필요로 하지 않으며, 심지어 상태가 없는 경우 성능이 더 좋을 수도 있다고 지적합니다. 그는 메모리 풀 할당자, 공유 메모리 할당자 및 가비지 컬렉션 할당자의 세 가지 사용자 정의 할당자 사용 사례를 제시하고 내부 메모리 풀을 활용하여 소량의 메모리를 빠르게 할당/해제하는 할당자 구현을 보여줍니다. 하지만 이러한 최적화는 이미 그가 제공한 예시 할당자에서 구현되었을 수도 있다고 언급합니다[3].&lt;/p&gt;
&lt;p&gt;사용자 정의 할당기의 또 다른 용도는 메모리 관련 오류를 디버깅하는 것입니다[10]. 이를 위해 추가 메모리를 할당하여 디버그 정보를 저장하는 할당기를 작성할 수 있습니다. 이러한 할당기는 메모리가 동일한 할당기에서 할당 및 해제되도록 보장할 뿐만 아니라, 캐시 오버플로로부터 프로그램의 안전을 어느 정도 보호할 수도 있습니다[11].&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
